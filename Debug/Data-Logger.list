
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013068  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08013308  08013308  00023308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013518  08013518  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08013518  08013518  00023518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013520  08013520  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013520  08013520  00023520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013524  08013524  00023524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  08013528  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e8  240001cc  080136f4  000301cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240017b4  080136f4  000317b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b221  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000625b  00000000  00000000  0006b41b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ed0  00000000  00000000  00071678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c60  00000000  00000000  00073548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ef69  00000000  00000000  000751a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020734  00000000  00000000  000b4111  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016f4b1  00000000  00000000  000d4845  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00243cf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008518  00000000  00000000  00243d74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001cc 	.word	0x240001cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080132f0 	.word	0x080132f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001d0 	.word	0x240001d0
 80002dc:	080132f0 	.word	0x080132f0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	f5ad 5d87 	sub.w	sp, sp, #4320	; 0x10e0
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 ffd5 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f8b3 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 fb9f 	bl	8000dd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000696:	f000 fb7d 	bl	8000d94 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800069a:	f000 fa6b 	bl	8000b74 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800069e:	f00c fadf 	bl	800cc60 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80006a2:	f011 fcdd 	bl	8012060 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80006a6:	f000 f99d 	bl	80009e4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006aa:	f000 f9ff 	bl	8000aac <MX_FDCAN2_Init>
  MX_UART8_Init();
 80006ae:	f000 fad9 	bl	8000c64 <MX_UART8_Init>
  MX_USART3_UART_Init();
 80006b2:	f000 fb23 	bl	8000cfc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80006b6:	f000 fa7f 	bl	8000bb8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 80006ba:	2201      	movs	r2, #1
 80006bc:	4946      	ldr	r1, [pc, #280]	; (80007d8 <main+0x158>)
 80006be:	4847      	ldr	r0, [pc, #284]	; (80007dc <main+0x15c>)
 80006c0:	f011 f850 	bl	8011764 <f_mount>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d17c      	bne.n	80007c4 <main+0x144>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "test.csv\0";
 80006ca:	4a45      	ldr	r2, [pc, #276]	; (80007e0 <main+0x160>)
 80006cc:	f241 03c8 	movw	r3, #4296	; 0x10c8
 80006d0:	443b      	add	r3, r7
 80006d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80006d4:	c303      	stmia	r3!, {r0, r1}
 80006d6:	801a      	strh	r2, [r3, #0]
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 80006d8:	f241 03c8 	movw	r3, #4296	; 0x10c8
 80006dc:	443b      	add	r3, r7
 80006de:	220a      	movs	r2, #10
 80006e0:	4619      	mov	r1, r3
 80006e2:	4840      	ldr	r0, [pc, #256]	; (80007e4 <main+0x164>)
 80006e4:	f011 f884 	bl	80117f0 <f_open>
  	  char myData[4096];
  	  for(int i = 0; i<4096; i++){
 80006e8:	2300      	movs	r3, #0
 80006ea:	f241 02e4 	movw	r2, #4324	; 0x10e4
 80006ee:	443a      	add	r2, r7
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e011      	b.n	8000718 <main+0x98>
  		myData[i] = 'A';
 80006f4:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80006f8:	f241 03e4 	movw	r3, #4324	; 0x10e4
 80006fc:	443b      	add	r3, r7
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4413      	add	r3, r2
 8000702:	2241      	movs	r2, #65	; 0x41
 8000704:	701a      	strb	r2, [r3, #0]
  	  for(int i = 0; i<4096; i++){
 8000706:	f241 03e4 	movw	r3, #4324	; 0x10e4
 800070a:	443b      	add	r3, r7
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	f241 02e4 	movw	r2, #4324	; 0x10e4
 8000714:	443a      	add	r2, r7
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	f241 03e4 	movw	r3, #4324	; 0x10e4
 800071c:	443b      	add	r3, r7
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000724:	dbe6      	blt.n	80006f4 <main+0x74>
  	  }
  	 int start = HAL_GetTick();
 8000726:	f001 f80d 	bl	8001744 <HAL_GetTick>
 800072a:	4603      	mov	r3, r0
 800072c:	f241 02dc 	movw	r2, #4316	; 0x10dc
 8000730:	443a      	add	r2, r7
 8000732:	6013      	str	r3, [r2, #0]
  	for(int i = 0; i<64000; i++){
 8000734:	2300      	movs	r3, #0
 8000736:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	e00e      	b.n	800075c <main+0xdc>
  		f_write(&myFILE, myData, sizeof(myData), &testByte);
 800073e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <main+0x168>)
 8000744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000748:	4826      	ldr	r0, [pc, #152]	; (80007e4 <main+0x164>)
 800074a:	f011 fa0f 	bl	8011b6c <f_write>
  	for(int i = 0; i<64000; i++){
 800074e:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000766:	dbea      	blt.n	800073e <main+0xbe>
  	  	  }
  	int end = HAL_GetTick();
 8000768:	f000 ffec 	bl	8001744 <HAL_GetTick>
 800076c:	4603      	mov	r3, r0
 800076e:	f241 02d8 	movw	r2, #4312	; 0x10d8
 8000772:	443a      	add	r2, r7
 8000774:	6013      	str	r3, [r2, #0]
  	int duration = end - start;
 8000776:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800077a:	443b      	add	r3, r7
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	f241 03dc 	movw	r3, #4316	; 0x10dc
 8000782:	443b      	add	r3, r7
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	f241 02d4 	movw	r2, #4308	; 0x10d4
 800078c:	443a      	add	r2, r7
 800078e:	6013      	str	r3, [r2, #0]
  	char myTime[200];
  	sprintf(myTime, "\r%i", duration);
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <main+0x16c>)
 8000792:	f241 02e8 	movw	r2, #4328	; 0x10e8
 8000796:	443a      	add	r2, r7
 8000798:	4413      	add	r3, r2
 800079a:	f241 02d4 	movw	r2, #4308	; 0x10d4
 800079e:	443a      	add	r2, r7
 80007a0:	6812      	ldr	r2, [r2, #0]
 80007a2:	4913      	ldr	r1, [pc, #76]	; (80007f0 <main+0x170>)
 80007a4:	4618      	mov	r0, r3
 80007a6:	f012 fa5f 	bl	8012c68 <siprintf>
  	f_write(&myFILE, myTime, sizeof(myTime), &testByte);
 80007aa:	4910      	ldr	r1, [pc, #64]	; (80007ec <main+0x16c>)
 80007ac:	f241 03e8 	movw	r3, #4328	; 0x10e8
 80007b0:	443b      	add	r3, r7
 80007b2:	4419      	add	r1, r3
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <main+0x168>)
 80007b6:	22c8      	movs	r2, #200	; 0xc8
 80007b8:	480a      	ldr	r0, [pc, #40]	; (80007e4 <main+0x164>)
 80007ba:	f011 f9d7 	bl	8011b6c <f_write>
  	  f_close(&myFILE);
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <main+0x164>)
 80007c0:	f011 fbc7 	bl	8011f52 <f_close>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007c4:	2101      	movs	r1, #1
 80007c6:	480b      	ldr	r0, [pc, #44]	; (80007f4 <main+0x174>)
 80007c8:	f003 faf9 	bl	8003dbe <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d0:	f000 ffc4 	bl	800175c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007d4:	e7f6      	b.n	80007c4 <main+0x144>
 80007d6:	bf00      	nop
 80007d8:	24000a74 	.word	0x24000a74
 80007dc:	24000798 	.word	0x24000798
 80007e0:	0801330c 	.word	0x0801330c
 80007e4:	24000334 	.word	0x24000334
 80007e8:	24000a68 	.word	0x24000a68
 80007ec:	ffffef18 	.word	0xffffef18
 80007f0:	08013308 	.word	0x08013308
 80007f4:	58020400 	.word	0x58020400

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0cc      	sub	sp, #304	; 0x130
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000802:	224c      	movs	r2, #76	; 0x4c
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f012 f96d 	bl	8012ae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000810:	2220      	movs	r2, #32
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f012 f966 	bl	8012ae6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4618      	mov	r0, r3
 8000820:	23bc      	movs	r3, #188	; 0xbc
 8000822:	461a      	mov	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f012 f95e 	bl	8012ae6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800082a:	2002      	movs	r0, #2
 800082c:	f004 fcea 	bl	8005204 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	4b67      	ldr	r3, [pc, #412]	; (80009d4 <SystemClock_Config+0x1dc>)
 8000838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083a:	4a66      	ldr	r2, [pc, #408]	; (80009d4 <SystemClock_Config+0x1dc>)
 800083c:	f023 0301 	bic.w	r3, r3, #1
 8000840:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000842:	4b64      	ldr	r3, [pc, #400]	; (80009d4 <SystemClock_Config+0x1dc>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	f003 0201 	and.w	r2, r3, #1
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	4b62      	ldr	r3, [pc, #392]	; (80009d8 <SystemClock_Config+0x1e0>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000856:	4a60      	ldr	r2, [pc, #384]	; (80009d8 <SystemClock_Config+0x1e0>)
 8000858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b5e      	ldr	r3, [pc, #376]	; (80009d8 <SystemClock_Config+0x1e0>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086e:	bf00      	nop
 8000870:	4b59      	ldr	r3, [pc, #356]	; (80009d8 <SystemClock_Config+0x1e0>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800087c:	d1f8      	bne.n	8000870 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <SystemClock_Config+0x1e4>)
 8000880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000882:	f023 0303 	bic.w	r3, r3, #3
 8000886:	4a55      	ldr	r2, [pc, #340]	; (80009dc <SystemClock_Config+0x1e4>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800088e:	2321      	movs	r3, #33	; 0x21
 8000890:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000898:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800089c:	2301      	movs	r3, #1
 800089e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a8:	2302      	movs	r3, #2
 80008aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 38;
 80008b4:	2326      	movs	r3, #38	; 0x26
 80008b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 84;
 80008c0:	2354      	movs	r3, #84	; 0x54
 80008c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008cc:	230c      	movs	r3, #12
 80008ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f004 fcd8 	bl	8005298 <HAL_RCC_OscConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80008ee:	f000 fb5b 	bl	8000fa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	233f      	movs	r3, #63	; 0x3f
 80008f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	2303      	movs	r3, #3
 80008fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000904:	2308      	movs	r3, #8
 8000906:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000922:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f005 f8c5 	bl	8005ab8 <HAL_RCC_ClockConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x140>
  {
    Error_Handler();
 8000934:	f000 fb38 	bl	8000fa8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	4a28      	ldr	r2, [pc, #160]	; (80009e0 <SystemClock_Config+0x1e8>)
 800093e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2202      	movs	r2, #2
 8000946:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	220c      	movs	r2, #12
 800094e:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	2202      	movs	r2, #2
 8000956:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	2202      	movs	r2, #2
 800095e:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	2203      	movs	r2, #3
 8000966:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	22c0      	movs	r2, #192	; 0xc0
 800096e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	2220      	movs	r2, #32
 8000976:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000988:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	2200      	movs	r2, #0
 8000990:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	2200      	movs	r2, #0
 8000998:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	2200      	movs	r2, #0
 80009a0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80009aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 fc30 	bl	8006218 <HAL_RCCEx_PeriphCLKConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x1ca>
  {
    Error_Handler();
 80009be:	f000 faf3 	bl	8000fa8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80009c2:	f005 fa2f 	bl	8005e24 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80009c6:	f004 fc57 	bl	8005278 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80009ca:	bf00      	nop
 80009cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	58000400 	.word	0x58000400
 80009d8:	58024800 	.word	0x58024800
 80009dc:	58024400 	.word	0x58024400
 80009e0:	00059002 	.word	0x00059002

080009e4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80009e8:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <MX_FDCAN1_Init+0xc4>)
 80009ec:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a06:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a12:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a56:	2204      	movs	r2, #4
 8000a58:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a6e:	2204      	movs	r2, #4
 8000a70:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_FDCAN1_Init+0xc0>)
 8000a92:	f002 fc63 	bl	800335c <HAL_FDCAN_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000a9c:	f000 fa84 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	240005e4 	.word	0x240005e4
 8000aa8:	4000a000 	.word	0x4000a000

08000aac <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000ab2:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <MX_FDCAN2_Init+0xc4>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000abc:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000ac8:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000ada:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b1e:	2204      	movs	r2, #4
 8000b20:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b36:	2204      	movs	r2, #4
 8000b38:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_FDCAN2_Init+0xc0>)
 8000b5a:	f002 fbff 	bl	800335c <HAL_FDCAN_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000b64:	f000 fa20 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	240009c8 	.word	0x240009c8
 8000b70:	4000a400 	.word	0x4000a400

08000b74 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <MX_SDMMC1_SD_Init+0x3c>)
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <MX_SDMMC1_SD_Init+0x40>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_SDMMC1_SD_Init+0x3c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <MX_SDMMC1_SD_Init+0x3c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_SDMMC1_SD_Init+0x3c>)
 8000b8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b90:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <MX_SDMMC1_SD_Init+0x3c>)
 8000b94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b98:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <MX_SDMMC1_SD_Init+0x3c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <MX_SDMMC1_SD_Init+0x3c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	24000564 	.word	0x24000564
 8000bb4:	52007000 	.word	0x52007000

08000bb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bbe:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <MX_SPI1_Init+0xa8>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bd2:	2207      	movs	r2, #7
 8000bd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000be4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000be8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c48:	f008 fd66 	bl	8009718 <HAL_SPI_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000c52:	f000 f9a9 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000710 	.word	0x24000710
 8000c60:	40013000 	.word	0x40013000

08000c64 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000c6a:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <MX_UART8_Init+0x94>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000cac:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000cae:	f008 fe46 	bl	800993e <HAL_UART_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000cb8:	f000 f976 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000cc0:	f009 fde1 	bl	800a886 <HAL_UARTEx_SetTxFifoThreshold>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000cca:	f000 f96d 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000cd2:	f009 fe16 	bl	800a902 <HAL_UARTEx_SetRxFifoThreshold>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000cdc:	f000 f964 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_UART8_Init+0x90>)
 8000ce2:	f009 fd97 	bl	800a814 <HAL_UARTEx_DisableFifoMode>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000cec:	f000 f95c 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	24000684 	.word	0x24000684
 8000cf8:	40007c00 	.word	0x40007c00

08000cfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d02:	4a23      	ldr	r2, [pc, #140]	; (8000d90 <MX_USART3_UART_Init+0x94>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d08:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d44:	4811      	ldr	r0, [pc, #68]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d46:	f008 fdfa 	bl	800993e <HAL_UART_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d50:	f000 f92a 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d58:	f009 fd95 	bl	800a886 <HAL_UARTEx_SetTxFifoThreshold>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d62:	f000 f921 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d6a:	f009 fdca 	bl	800a902 <HAL_UARTEx_SetRxFifoThreshold>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d74:	f000 f918 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d7a:	f009 fd4b 	bl	800a814 <HAL_UARTEx_DisableFifoMode>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d84:	f000 f910 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	240002a8 	.word	0x240002a8
 8000d90:	40004800 	.word	0x40004800

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <MX_DMA_Init+0x3c>)
 8000d9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <MX_DMA_Init+0x3c>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_DMA_Init+0x3c>)
 8000dac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	200b      	movs	r0, #11
 8000dbe:	f000 fdd6 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dc2:	200b      	movs	r0, #11
 8000dc4:	f000 fded 	bl	80019a2 <HAL_NVIC_EnableIRQ>

}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	58024400 	.word	0x58024400

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	; 0x30
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dea:	4b69      	ldr	r3, [pc, #420]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	4a67      	ldr	r2, [pc, #412]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000df2:	f043 0310 	orr.w	r3, r3, #16
 8000df6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfa:	4b65      	ldr	r3, [pc, #404]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e08:	4b61      	ldr	r3, [pc, #388]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	4a60      	ldr	r2, [pc, #384]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e18:	4b5d      	ldr	r3, [pc, #372]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e26:	4b5a      	ldr	r3, [pc, #360]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	4a58      	ldr	r2, [pc, #352]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e36:	4b56      	ldr	r3, [pc, #344]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b52      	ldr	r3, [pc, #328]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	4a51      	ldr	r2, [pc, #324]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e54:	4b4e      	ldr	r3, [pc, #312]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b4b      	ldr	r3, [pc, #300]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	4a49      	ldr	r2, [pc, #292]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e72:	4b47      	ldr	r3, [pc, #284]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e80:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	4a42      	ldr	r2, [pc, #264]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e90:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <MX_GPIO_Init+0x1bc>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	210c      	movs	r1, #12
 8000ea2:	483c      	ldr	r0, [pc, #240]	; (8000f94 <MX_GPIO_Init+0x1c0>)
 8000ea4:	f002 ff72 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2103      	movs	r1, #3
 8000eac:	483a      	ldr	r0, [pc, #232]	; (8000f98 <MX_GPIO_Init+0x1c4>)
 8000eae:	f002 ff6d 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4839      	ldr	r0, [pc, #228]	; (8000f9c <MX_GPIO_Init+0x1c8>)
 8000eb8:	f002 ff68 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec2:	4837      	ldr	r0, [pc, #220]	; (8000fa0 <MX_GPIO_Init+0x1cc>)
 8000ec4:	f002 ff62 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	482d      	ldr	r0, [pc, #180]	; (8000f94 <MX_GPIO_Init+0x1c0>)
 8000ee0:	f002 fda4 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4827      	ldr	r0, [pc, #156]	; (8000f98 <MX_GPIO_Init+0x1c4>)
 8000efc:	f002 fd96 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8000f00:	2304      	movs	r3, #4
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <MX_GPIO_Init+0x1d0>)
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	4821      	ldr	r0, [pc, #132]	; (8000f98 <MX_GPIO_Init+0x1c4>)
 8000f14:	f002 fd8a 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	481b      	ldr	r0, [pc, #108]	; (8000f9c <MX_GPIO_Init+0x1c8>)
 8000f30:	f002 fd7c 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8000f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_GPIO_Init+0x1d0>)
 8000f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4812      	ldr	r0, [pc, #72]	; (8000f94 <MX_GPIO_Init+0x1c0>)
 8000f4a:	f002 fd6f 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8000f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <MX_GPIO_Init+0x1cc>)
 8000f68:	f002 fd60 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8000f6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_GPIO_Init+0x1c4>)
 8000f82:	f002 fd53 	bl	8003a2c <HAL_GPIO_Init>

}
 8000f86:	bf00      	nop
 8000f88:	3730      	adds	r7, #48	; 0x30
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	58024400 	.word	0x58024400
 8000f94:	58021000 	.word	0x58021000
 8000f98:	58020000 	.word	0x58020000
 8000f9c:	58020400 	.word	0x58020400
 8000fa0:	58020c00 	.word	0x58020c00
 8000fa4:	11110000 	.word	0x11110000

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fae:	e7fe      	b.n	8000fae <Error_Handler+0x6>

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_MspInit+0x30>)
 8000fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fbc:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_MspInit+0x30>)
 8000fbe:	f043 0302 	orr.w	r3, r3, #2
 8000fc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_MspInit+0x30>)
 8000fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	58024400 	.word	0x58024400

08000fe4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a3d      	ldr	r2, [pc, #244]	; (80010f8 <HAL_FDCAN_MspInit+0x114>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d138      	bne.n	8001078 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001006:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <HAL_FDCAN_MspInit+0x118>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	4a3b      	ldr	r2, [pc, #236]	; (80010fc <HAL_FDCAN_MspInit+0x118>)
 800100e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001010:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <HAL_FDCAN_MspInit+0x118>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d10e      	bne.n	8001036 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001018:	4b39      	ldr	r3, [pc, #228]	; (8001100 <HAL_FDCAN_MspInit+0x11c>)
 800101a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800101e:	4a38      	ldr	r2, [pc, #224]	; (8001100 <HAL_FDCAN_MspInit+0x11c>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001028:	4b35      	ldr	r3, [pc, #212]	; (8001100 <HAL_FDCAN_MspInit+0x11c>)
 800102a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800102e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b32      	ldr	r3, [pc, #200]	; (8001100 <HAL_FDCAN_MspInit+0x11c>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	4a30      	ldr	r2, [pc, #192]	; (8001100 <HAL_FDCAN_MspInit+0x11c>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <HAL_FDCAN_MspInit+0x11c>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001054:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001066:	2309      	movs	r3, #9
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	4824      	ldr	r0, [pc, #144]	; (8001104 <HAL_FDCAN_MspInit+0x120>)
 8001072:	f002 fcdb 	bl	8003a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001076:	e03b      	b.n	80010f0 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a22      	ldr	r2, [pc, #136]	; (8001108 <HAL_FDCAN_MspInit+0x124>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d136      	bne.n	80010f0 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <HAL_FDCAN_MspInit+0x118>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <HAL_FDCAN_MspInit+0x118>)
 800108a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_FDCAN_MspInit+0x118>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d10e      	bne.n	80010b2 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_FDCAN_MspInit+0x11c>)
 8001096:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800109a:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_FDCAN_MspInit+0x11c>)
 800109c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_FDCAN_MspInit+0x11c>)
 80010a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_FDCAN_MspInit+0x11c>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b8:	4a11      	ldr	r2, [pc, #68]	; (8001100 <HAL_FDCAN_MspInit+0x11c>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_FDCAN_MspInit+0x11c>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010d0:	2360      	movs	r3, #96	; 0x60
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80010e0:	2309      	movs	r3, #9
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <HAL_FDCAN_MspInit+0x120>)
 80010ec:	f002 fc9e 	bl	8003a2c <HAL_GPIO_Init>
}
 80010f0:	bf00      	nop
 80010f2:	3730      	adds	r7, #48	; 0x30
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	4000a000 	.word	0x4000a000
 80010fc:	240001e8 	.word	0x240001e8
 8001100:	58024400 	.word	0x58024400
 8001104:	58020400 	.word	0x58020400
 8001108:	4000a400 	.word	0x4000a400

0800110c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a2a      	ldr	r2, [pc, #168]	; (80011d4 <HAL_SD_MspInit+0xc8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d14d      	bne.n	80011ca <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_SD_MspInit+0xcc>)
 8001130:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001134:	4a28      	ldr	r2, [pc, #160]	; (80011d8 <HAL_SD_MspInit+0xcc>)
 8001136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_SD_MspInit+0xcc>)
 8001140:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_SD_MspInit+0xcc>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_SD_MspInit+0xcc>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <HAL_SD_MspInit+0xcc>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_SD_MspInit+0xcc>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <HAL_SD_MspInit+0xcc>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_SD_MspInit+0xcc>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001188:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800118c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800119a:	230c      	movs	r3, #12
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <HAL_SD_MspInit+0xd0>)
 80011a6:	f002 fc41 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011aa:	2304      	movs	r3, #4
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80011ba:	230c      	movs	r3, #12
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4806      	ldr	r0, [pc, #24]	; (80011e0 <HAL_SD_MspInit+0xd4>)
 80011c6:	f002 fc31 	bl	8003a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	52007000 	.word	0x52007000
 80011d8:	58024400 	.word	0x58024400
 80011dc:	58020800 	.word	0x58020800
 80011e0:	58020c00 	.word	0x58020c00

080011e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a1a      	ldr	r2, [pc, #104]	; (800126c <HAL_SPI_MspInit+0x88>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d12d      	bne.n	8001262 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_SPI_MspInit+0x8c>)
 8001208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800120c:	4a18      	ldr	r2, [pc, #96]	; (8001270 <HAL_SPI_MspInit+0x8c>)
 800120e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001212:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_SPI_MspInit+0x8c>)
 8001218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800121c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_SPI_MspInit+0x8c>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	4a11      	ldr	r2, [pc, #68]	; (8001270 <HAL_SPI_MspInit+0x8c>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_SPI_MspInit+0x8c>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001242:	23e0      	movs	r3, #224	; 0xe0
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001252:	2305      	movs	r3, #5
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <HAL_SPI_MspInit+0x90>)
 800125e:	f002 fbe5 	bl	8003a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40013000 	.word	0x40013000
 8001270:	58024400 	.word	0x58024400
 8001274:	58020000 	.word	0x58020000

08001278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	; 0x30
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a4b      	ldr	r2, [pc, #300]	; (80013c4 <HAL_UART_MspInit+0x14c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d12e      	bne.n	80012f8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800129a:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <HAL_UART_MspInit+0x150>)
 800129c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012a0:	4a49      	ldr	r2, [pc, #292]	; (80013c8 <HAL_UART_MspInit+0x150>)
 80012a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012aa:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <HAL_UART_MspInit+0x150>)
 80012ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b8:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <HAL_UART_MspInit+0x150>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012be:	4a42      	ldr	r2, [pc, #264]	; (80013c8 <HAL_UART_MspInit+0x150>)
 80012c0:	f043 0310 	orr.w	r3, r3, #16
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c8:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <HAL_UART_MspInit+0x150>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012d6:	2303      	movs	r3, #3
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80012e6:	2308      	movs	r3, #8
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4836      	ldr	r0, [pc, #216]	; (80013cc <HAL_UART_MspInit+0x154>)
 80012f2:	f002 fb9b 	bl	8003a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012f6:	e061      	b.n	80013bc <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a34      	ldr	r2, [pc, #208]	; (80013d0 <HAL_UART_MspInit+0x158>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d15c      	bne.n	80013bc <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <HAL_UART_MspInit+0x150>)
 8001304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001308:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <HAL_UART_MspInit+0x150>)
 800130a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_UART_MspInit+0x150>)
 8001314:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <HAL_UART_MspInit+0x150>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001326:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <HAL_UART_MspInit+0x150>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <HAL_UART_MspInit+0x150>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800133e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001350:	2307      	movs	r3, #7
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	481e      	ldr	r0, [pc, #120]	; (80013d4 <HAL_UART_MspInit+0x15c>)
 800135c:	f002 fb66 	bl	8003a2c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_UART_MspInit+0x160>)
 8001362:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_UART_MspInit+0x164>)
 8001364:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <HAL_UART_MspInit+0x160>)
 8001368:	222d      	movs	r2, #45	; 0x2d
 800136a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <HAL_UART_MspInit+0x160>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_UART_MspInit+0x160>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_UART_MspInit+0x160>)
 800137a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0x160>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0x160>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_UART_MspInit+0x160>)
 800138e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001392:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_UART_MspInit+0x160>)
 8001396:	2200      	movs	r2, #0
 8001398:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_UART_MspInit+0x160>)
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <HAL_UART_MspInit+0x160>)
 80013a2:	f000 fb19 	bl	80019d8 <HAL_DMA_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_UART_MspInit+0x138>
      Error_Handler();
 80013ac:	f7ff fdfc 	bl	8000fa8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <HAL_UART_MspInit+0x160>)
 80013b4:	679a      	str	r2, [r3, #120]	; 0x78
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_UART_MspInit+0x160>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80013bc:	bf00      	nop
 80013be:	3730      	adds	r7, #48	; 0x30
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40007c00 	.word	0x40007c00
 80013c8:	58024400 	.word	0x58024400
 80013cc:	58021000 	.word	0x58021000
 80013d0:	40004800 	.word	0x40004800
 80013d4:	58020c00 	.word	0x58020c00
 80013d8:	24000230 	.word	0x24000230
 80013dc:	40020010 	.word	0x40020010

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80013e4:	f004 fefc 	bl	80061e0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x8>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 f974 	bl	800171c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <DMA1_Stream0_IRQHandler+0x10>)
 800143e:	f000 fe27 	bl	8002090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	24000230 	.word	0x24000230

0800144c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <OTG_FS_IRQHandler+0x10>)
 8001452:	f002 fe26 	bl	80040a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	240013a8 	.word	0x240013a8

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f011 fae4 	bl	8012a5c <__errno>
 8001494:	4602      	mov	r2, r0
 8001496:	230c      	movs	r3, #12
 8001498:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	24080000 	.word	0x24080000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	240001ec 	.word	0x240001ec
 80014c8:	240017b8 	.word	0x240017b8

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014d0:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <SystemInit+0xec>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d6:	4a38      	ldr	r2, [pc, #224]	; (80015b8 <SystemInit+0xec>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014e0:	4b36      	ldr	r3, [pc, #216]	; (80015bc <SystemInit+0xf0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	2b06      	cmp	r3, #6
 80014ea:	d807      	bhi.n	80014fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014ec:	4b33      	ldr	r3, [pc, #204]	; (80015bc <SystemInit+0xf0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 030f 	bic.w	r3, r3, #15
 80014f4:	4a31      	ldr	r2, [pc, #196]	; (80015bc <SystemInit+0xf0>)
 80014f6:	f043 0307 	orr.w	r3, r3, #7
 80014fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014fc:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <SystemInit+0xf4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a2f      	ldr	r2, [pc, #188]	; (80015c0 <SystemInit+0xf4>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <SystemInit+0xf4>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800150e:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <SystemInit+0xf4>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	492b      	ldr	r1, [pc, #172]	; (80015c0 <SystemInit+0xf4>)
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <SystemInit+0xf8>)
 8001516:	4013      	ands	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <SystemInit+0xf0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	2b07      	cmp	r3, #7
 8001524:	d907      	bls.n	8001536 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001526:	4b25      	ldr	r3, [pc, #148]	; (80015bc <SystemInit+0xf0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 030f 	bic.w	r3, r3, #15
 800152e:	4a23      	ldr	r2, [pc, #140]	; (80015bc <SystemInit+0xf0>)
 8001530:	f043 0307 	orr.w	r3, r3, #7
 8001534:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <SystemInit+0xf4>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <SystemInit+0xf4>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <SystemInit+0xf4>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <SystemInit+0xf4>)
 800154a:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <SystemInit+0xfc>)
 800154c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <SystemInit+0xf4>)
 8001550:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <SystemInit+0x100>)
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001554:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <SystemInit+0xf4>)
 8001556:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <SystemInit+0x104>)
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <SystemInit+0xf4>)
 800155c:	2200      	movs	r2, #0
 800155e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <SystemInit+0xf4>)
 8001562:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <SystemInit+0x104>)
 8001564:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <SystemInit+0xf4>)
 8001568:	2200      	movs	r2, #0
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <SystemInit+0xf4>)
 800156e:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <SystemInit+0x104>)
 8001570:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <SystemInit+0xf4>)
 8001574:	2200      	movs	r2, #0
 8001576:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <SystemInit+0xf4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <SystemInit+0xf4>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <SystemInit+0xf4>)
 8001586:	2200      	movs	r2, #0
 8001588:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <SystemInit+0x108>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <SystemInit+0x10c>)
 8001590:	4013      	ands	r3, r2
 8001592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001596:	d202      	bcs.n	800159e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <SystemInit+0x110>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <SystemInit+0x114>)
 80015a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015a4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SystemInit+0xec>)
 80015a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ac:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00
 80015bc:	52002000 	.word	0x52002000
 80015c0:	58024400 	.word	0x58024400
 80015c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80015c8:	02020200 	.word	0x02020200
 80015cc:	01ff0000 	.word	0x01ff0000
 80015d0:	01010280 	.word	0x01010280
 80015d4:	5c001000 	.word	0x5c001000
 80015d8:	ffff0000 	.word	0xffff0000
 80015dc:	51008108 	.word	0x51008108
 80015e0:	52004000 	.word	0x52004000

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015e8:	f7ff ff70 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015ee:	e003      	b.n	80015f8 <LoopCopyDataInit>

080015f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80015f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015f6:	3104      	adds	r1, #4

080015f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80015fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001600:	d3f6      	bcc.n	80015f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001604:	e002      	b.n	800160c <LoopFillZerobss>

08001606 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001606:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001608:	f842 3b04 	str.w	r3, [r2], #4

0800160c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800160e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001610:	d3f9      	bcc.n	8001606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001612:	f011 fa29 	bl	8012a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7ff f833 	bl	8000680 <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800161c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001620:	08013528 	.word	0x08013528
  ldr  r0, =_sdata
 8001624:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001628:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 800162c:	240001cc 	.word	0x240001cc
  ldr  r3, = _ebss
 8001630:	240017b4 	.word	0x240017b4

08001634 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC3_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163e:	2003      	movs	r0, #3
 8001640:	f000 f98a 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001644:	f004 fbfe 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8001648:	4601      	mov	r1, r0
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_Init+0x68>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <HAL_Init+0x6c>)
 8001656:	5cd3      	ldrb	r3, [r2, r3]
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	fa21 f303 	lsr.w	r3, r1, r3
 8001660:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_Init+0x68>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_Init+0x6c>)
 800166c:	5cd3      	ldrb	r3, [r2, r3]
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	fa22 f303 	lsr.w	r3, r2, r3
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <HAL_Init+0x70>)
 800167a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800167c:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <HAL_Init+0x74>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001682:	2000      	movs	r0, #0
 8001684:	f000 f814 	bl	80016b0 <HAL_InitTick>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e002      	b.n	8001698 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001692:	f7ff fc8d 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	58024400 	.word	0x58024400
 80016a4:	080133fc 	.word	0x080133fc
 80016a8:	24000004 	.word	0x24000004
 80016ac:	24000000 	.word	0x24000000

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_InitTick+0x60>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e021      	b.n	8001708 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <HAL_InitTick+0x64>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_InitTick+0x60>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f96f 	bl	80019be <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00e      	b.n	8001708 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	d80a      	bhi.n	8001706 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f0:	2200      	movs	r2, #0
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f000 f939 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <HAL_InitTick+0x68>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2400000c 	.word	0x2400000c
 8001714:	24000000 	.word	0x24000000
 8001718:	24000008 	.word	0x24000008

0800171c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x20>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x24>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_IncTick+0x24>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	2400000c 	.word	0x2400000c
 8001740:	24000a6c 	.word	0x24000a6c

08001744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTick+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	24000a6c 	.word	0x24000a6c

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff ffee 	bl	8001744 <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001774:	d005      	beq.n	8001782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_Delay+0x40>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001782:	bf00      	nop
 8001784:	f7ff ffde 	bl	8001744 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8f7      	bhi.n	8001784 <HAL_Delay+0x28>
  {
  }
}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2400000c 	.word	0x2400000c

080017a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_GetREVID+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0c1b      	lsrs	r3, r3, #16
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	5c001000 	.word	0x5c001000

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <__NVIC_SetPriorityGrouping+0x40>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <__NVIC_SetPriorityGrouping+0x40>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00
 80017fc:	05fa0000 	.word	0x05fa0000

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff40 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff33 	bl	800181c <__NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa4 	bl	8001914 <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff feb0 	bl	8001744 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e316      	b.n	800201e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a66      	ldr	r2, [pc, #408]	; (8001b90 <HAL_DMA_Init+0x1b8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d04a      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a65      	ldr	r2, [pc, #404]	; (8001b94 <HAL_DMA_Init+0x1bc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d045      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a63      	ldr	r2, [pc, #396]	; (8001b98 <HAL_DMA_Init+0x1c0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d040      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a62      	ldr	r2, [pc, #392]	; (8001b9c <HAL_DMA_Init+0x1c4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d03b      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a60      	ldr	r2, [pc, #384]	; (8001ba0 <HAL_DMA_Init+0x1c8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d036      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a5f      	ldr	r2, [pc, #380]	; (8001ba4 <HAL_DMA_Init+0x1cc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d031      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a5d      	ldr	r2, [pc, #372]	; (8001ba8 <HAL_DMA_Init+0x1d0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d02c      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a5c      	ldr	r2, [pc, #368]	; (8001bac <HAL_DMA_Init+0x1d4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d027      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a5a      	ldr	r2, [pc, #360]	; (8001bb0 <HAL_DMA_Init+0x1d8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d022      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a59      	ldr	r2, [pc, #356]	; (8001bb4 <HAL_DMA_Init+0x1dc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d01d      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a57      	ldr	r2, [pc, #348]	; (8001bb8 <HAL_DMA_Init+0x1e0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d018      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a56      	ldr	r2, [pc, #344]	; (8001bbc <HAL_DMA_Init+0x1e4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d013      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a54      	ldr	r2, [pc, #336]	; (8001bc0 <HAL_DMA_Init+0x1e8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00e      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a53      	ldr	r2, [pc, #332]	; (8001bc4 <HAL_DMA_Init+0x1ec>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d009      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <HAL_DMA_Init+0x1f0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d004      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a50      	ldr	r2, [pc, #320]	; (8001bcc <HAL_DMA_Init+0x1f4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_DMA_Init+0xbc>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_DMA_Init+0xbe>
 8001a94:	2300      	movs	r3, #0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 813b 	beq.w	8001d12 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a37      	ldr	r2, [pc, #220]	; (8001b90 <HAL_DMA_Init+0x1b8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d04a      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a36      	ldr	r2, [pc, #216]	; (8001b94 <HAL_DMA_Init+0x1bc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d045      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a34      	ldr	r2, [pc, #208]	; (8001b98 <HAL_DMA_Init+0x1c0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d040      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a33      	ldr	r2, [pc, #204]	; (8001b9c <HAL_DMA_Init+0x1c4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d03b      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a31      	ldr	r2, [pc, #196]	; (8001ba0 <HAL_DMA_Init+0x1c8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d036      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a30      	ldr	r2, [pc, #192]	; (8001ba4 <HAL_DMA_Init+0x1cc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d031      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a2e      	ldr	r2, [pc, #184]	; (8001ba8 <HAL_DMA_Init+0x1d0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d02c      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2d      	ldr	r2, [pc, #180]	; (8001bac <HAL_DMA_Init+0x1d4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d027      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <HAL_DMA_Init+0x1d8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d022      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a2a      	ldr	r2, [pc, #168]	; (8001bb4 <HAL_DMA_Init+0x1dc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d01d      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a28      	ldr	r2, [pc, #160]	; (8001bb8 <HAL_DMA_Init+0x1e0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d018      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a27      	ldr	r2, [pc, #156]	; (8001bbc <HAL_DMA_Init+0x1e4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a25      	ldr	r2, [pc, #148]	; (8001bc0 <HAL_DMA_Init+0x1e8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00e      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a24      	ldr	r2, [pc, #144]	; (8001bc4 <HAL_DMA_Init+0x1ec>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d009      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a22      	ldr	r2, [pc, #136]	; (8001bc8 <HAL_DMA_Init+0x1f0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <HAL_DMA_Init+0x1f4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d108      	bne.n	8001b5e <HAL_DMA_Init+0x186>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e007      	b.n	8001b6e <HAL_DMA_Init+0x196>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b6e:	e02f      	b.n	8001bd0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b70:	f7ff fde8 	bl	8001744 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b05      	cmp	r3, #5
 8001b7c:	d928      	bls.n	8001bd0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2220      	movs	r2, #32
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2203      	movs	r2, #3
 8001b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e246      	b.n	800201e <HAL_DMA_Init+0x646>
 8001b90:	40020010 	.word	0x40020010
 8001b94:	40020028 	.word	0x40020028
 8001b98:	40020040 	.word	0x40020040
 8001b9c:	40020058 	.word	0x40020058
 8001ba0:	40020070 	.word	0x40020070
 8001ba4:	40020088 	.word	0x40020088
 8001ba8:	400200a0 	.word	0x400200a0
 8001bac:	400200b8 	.word	0x400200b8
 8001bb0:	40020410 	.word	0x40020410
 8001bb4:	40020428 	.word	0x40020428
 8001bb8:	40020440 	.word	0x40020440
 8001bbc:	40020458 	.word	0x40020458
 8001bc0:	40020470 	.word	0x40020470
 8001bc4:	40020488 	.word	0x40020488
 8001bc8:	400204a0 	.word	0x400204a0
 8001bcc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1c8      	bne.n	8001b70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4b83      	ldr	r3, [pc, #524]	; (8001df8 <HAL_DMA_Init+0x420>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001bf6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d107      	bne.n	8001c34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c34:	4b71      	ldr	r3, [pc, #452]	; (8001dfc <HAL_DMA_Init+0x424>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b71      	ldr	r3, [pc, #452]	; (8001e00 <HAL_DMA_Init+0x428>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c40:	d328      	bcc.n	8001c94 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b28      	cmp	r3, #40	; 0x28
 8001c48:	d903      	bls.n	8001c52 <HAL_DMA_Init+0x27a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b2e      	cmp	r3, #46	; 0x2e
 8001c50:	d917      	bls.n	8001c82 <HAL_DMA_Init+0x2aa>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b3e      	cmp	r3, #62	; 0x3e
 8001c58:	d903      	bls.n	8001c62 <HAL_DMA_Init+0x28a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b42      	cmp	r3, #66	; 0x42
 8001c60:	d90f      	bls.n	8001c82 <HAL_DMA_Init+0x2aa>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b46      	cmp	r3, #70	; 0x46
 8001c68:	d903      	bls.n	8001c72 <HAL_DMA_Init+0x29a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b48      	cmp	r3, #72	; 0x48
 8001c70:	d907      	bls.n	8001c82 <HAL_DMA_Init+0x2aa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b4e      	cmp	r3, #78	; 0x4e
 8001c78:	d905      	bls.n	8001c86 <HAL_DMA_Init+0x2ae>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b52      	cmp	r3, #82	; 0x52
 8001c80:	d801      	bhi.n	8001c86 <HAL_DMA_Init+0x2ae>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_DMA_Init+0x2b0>
 8001c86:	2300      	movs	r3, #0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c92:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f023 0307 	bic.w	r3, r3, #7
 8001caa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d117      	bne.n	8001cee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00e      	beq.n	8001cee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f001 f9b9 	bl	8003048 <DMA_CheckFifoParam>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2240      	movs	r2, #64	; 0x40
 8001ce0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e197      	b.n	800201e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f001 f8f4 	bl	8002ee4 <DMA_CalcBaseAndBitshift>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	223f      	movs	r2, #63	; 0x3f
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	e0cd      	b.n	8001eae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a3b      	ldr	r2, [pc, #236]	; (8001e04 <HAL_DMA_Init+0x42c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d022      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a39      	ldr	r2, [pc, #228]	; (8001e08 <HAL_DMA_Init+0x430>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01d      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a38      	ldr	r2, [pc, #224]	; (8001e0c <HAL_DMA_Init+0x434>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d018      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a36      	ldr	r2, [pc, #216]	; (8001e10 <HAL_DMA_Init+0x438>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a35      	ldr	r2, [pc, #212]	; (8001e14 <HAL_DMA_Init+0x43c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00e      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a33      	ldr	r2, [pc, #204]	; (8001e18 <HAL_DMA_Init+0x440>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d009      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a32      	ldr	r2, [pc, #200]	; (8001e1c <HAL_DMA_Init+0x444>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d004      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a30      	ldr	r2, [pc, #192]	; (8001e20 <HAL_DMA_Init+0x448>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_DMA_Init+0x38e>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_DMA_Init+0x390>
 8001d66:	2300      	movs	r3, #0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8097 	beq.w	8001e9c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <HAL_DMA_Init+0x42c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d021      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <HAL_DMA_Init+0x430>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d01c      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <HAL_DMA_Init+0x434>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d017      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <HAL_DMA_Init+0x438>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d012      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1e      	ldr	r2, [pc, #120]	; (8001e14 <HAL_DMA_Init+0x43c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00d      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <HAL_DMA_Init+0x440>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d008      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HAL_DMA_Init+0x444>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d003      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_DMA_Init+0x448>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_DMA_Init+0x44c>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b40      	cmp	r3, #64	; 0x40
 8001de4:	d020      	beq.n	8001e28 <HAL_DMA_Init+0x450>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b80      	cmp	r3, #128	; 0x80
 8001dec:	d102      	bne.n	8001df4 <HAL_DMA_Init+0x41c>
 8001dee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001df2:	e01a      	b.n	8001e2a <HAL_DMA_Init+0x452>
 8001df4:	2300      	movs	r3, #0
 8001df6:	e018      	b.n	8001e2a <HAL_DMA_Init+0x452>
 8001df8:	fe10803f 	.word	0xfe10803f
 8001dfc:	5c001000 	.word	0x5c001000
 8001e00:	ffff0000 	.word	0xffff0000
 8001e04:	58025408 	.word	0x58025408
 8001e08:	5802541c 	.word	0x5802541c
 8001e0c:	58025430 	.word	0x58025430
 8001e10:	58025444 	.word	0x58025444
 8001e14:	58025458 	.word	0x58025458
 8001e18:	5802546c 	.word	0x5802546c
 8001e1c:	58025480 	.word	0x58025480
 8001e20:	58025494 	.word	0x58025494
 8001e24:	fffe000f 	.word	0xfffe000f
 8001e28:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68d2      	ldr	r2, [r2, #12]
 8001e2e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e58:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b6e      	ldr	r3, [pc, #440]	; (8002028 <HAL_DMA_Init+0x650>)
 8001e70:	4413      	add	r3, r2
 8001e72:	4a6e      	ldr	r2, [pc, #440]	; (800202c <HAL_DMA_Init+0x654>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	009a      	lsls	r2, r3, #2
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f001 f82f 	bl	8002ee4 <DMA_CalcBaseAndBitshift>
 8001e86:	4603      	mov	r3, r0
 8001e88:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2201      	movs	r2, #1
 8001e94:	409a      	lsls	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	e008      	b.n	8001eae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0b7      	b.n	800201e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a5f      	ldr	r2, [pc, #380]	; (8002030 <HAL_DMA_Init+0x658>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d072      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a5d      	ldr	r2, [pc, #372]	; (8002034 <HAL_DMA_Init+0x65c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d06d      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5c      	ldr	r2, [pc, #368]	; (8002038 <HAL_DMA_Init+0x660>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d068      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a5a      	ldr	r2, [pc, #360]	; (800203c <HAL_DMA_Init+0x664>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d063      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a59      	ldr	r2, [pc, #356]	; (8002040 <HAL_DMA_Init+0x668>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d05e      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a57      	ldr	r2, [pc, #348]	; (8002044 <HAL_DMA_Init+0x66c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d059      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a56      	ldr	r2, [pc, #344]	; (8002048 <HAL_DMA_Init+0x670>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d054      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a54      	ldr	r2, [pc, #336]	; (800204c <HAL_DMA_Init+0x674>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d04f      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a53      	ldr	r2, [pc, #332]	; (8002050 <HAL_DMA_Init+0x678>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d04a      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a51      	ldr	r2, [pc, #324]	; (8002054 <HAL_DMA_Init+0x67c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d045      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a50      	ldr	r2, [pc, #320]	; (8002058 <HAL_DMA_Init+0x680>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d040      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a4e      	ldr	r2, [pc, #312]	; (800205c <HAL_DMA_Init+0x684>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d03b      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a4d      	ldr	r2, [pc, #308]	; (8002060 <HAL_DMA_Init+0x688>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d036      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a4b      	ldr	r2, [pc, #300]	; (8002064 <HAL_DMA_Init+0x68c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d031      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a4a      	ldr	r2, [pc, #296]	; (8002068 <HAL_DMA_Init+0x690>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d02c      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a48      	ldr	r2, [pc, #288]	; (800206c <HAL_DMA_Init+0x694>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d027      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a47      	ldr	r2, [pc, #284]	; (8002070 <HAL_DMA_Init+0x698>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d022      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a45      	ldr	r2, [pc, #276]	; (8002074 <HAL_DMA_Init+0x69c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01d      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a44      	ldr	r2, [pc, #272]	; (8002078 <HAL_DMA_Init+0x6a0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d018      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a42      	ldr	r2, [pc, #264]	; (800207c <HAL_DMA_Init+0x6a4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a41      	ldr	r2, [pc, #260]	; (8002080 <HAL_DMA_Init+0x6a8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00e      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a3f      	ldr	r2, [pc, #252]	; (8002084 <HAL_DMA_Init+0x6ac>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d009      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a3e      	ldr	r2, [pc, #248]	; (8002088 <HAL_DMA_Init+0x6b0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d004      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a3c      	ldr	r2, [pc, #240]	; (800208c <HAL_DMA_Init+0x6b4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_DMA_Init+0x5ca>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_DMA_Init+0x5cc>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d032      	beq.n	800200e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f001 f8c9 	bl	8003140 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b80      	cmp	r3, #128	; 0x80
 8001fb4:	d102      	bne.n	8001fbc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fd0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d010      	beq.n	8001ffc <HAL_DMA_Init+0x624>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d80c      	bhi.n	8001ffc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f001 f946 	bl	8003274 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	e008      	b.n	800200e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	a7fdabf8 	.word	0xa7fdabf8
 800202c:	cccccccd 	.word	0xcccccccd
 8002030:	40020010 	.word	0x40020010
 8002034:	40020028 	.word	0x40020028
 8002038:	40020040 	.word	0x40020040
 800203c:	40020058 	.word	0x40020058
 8002040:	40020070 	.word	0x40020070
 8002044:	40020088 	.word	0x40020088
 8002048:	400200a0 	.word	0x400200a0
 800204c:	400200b8 	.word	0x400200b8
 8002050:	40020410 	.word	0x40020410
 8002054:	40020428 	.word	0x40020428
 8002058:	40020440 	.word	0x40020440
 800205c:	40020458 	.word	0x40020458
 8002060:	40020470 	.word	0x40020470
 8002064:	40020488 	.word	0x40020488
 8002068:	400204a0 	.word	0x400204a0
 800206c:	400204b8 	.word	0x400204b8
 8002070:	58025408 	.word	0x58025408
 8002074:	5802541c 	.word	0x5802541c
 8002078:	58025430 	.word	0x58025430
 800207c:	58025444 	.word	0x58025444
 8002080:	58025458 	.word	0x58025458
 8002084:	5802546c 	.word	0x5802546c
 8002088:	58025480 	.word	0x58025480
 800208c:	58025494 	.word	0x58025494

08002090 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	; 0x28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800209c:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_DMA_IRQHandler+0x1ac>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a67      	ldr	r2, [pc, #412]	; (8002240 <HAL_DMA_IRQHandler+0x1b0>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0a9b      	lsrs	r3, r3, #10
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a5f      	ldr	r2, [pc, #380]	; (8002244 <HAL_DMA_IRQHandler+0x1b4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d04a      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a5d      	ldr	r2, [pc, #372]	; (8002248 <HAL_DMA_IRQHandler+0x1b8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d045      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a5c      	ldr	r2, [pc, #368]	; (800224c <HAL_DMA_IRQHandler+0x1bc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d040      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a5a      	ldr	r2, [pc, #360]	; (8002250 <HAL_DMA_IRQHandler+0x1c0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d03b      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a59      	ldr	r2, [pc, #356]	; (8002254 <HAL_DMA_IRQHandler+0x1c4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d036      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a57      	ldr	r2, [pc, #348]	; (8002258 <HAL_DMA_IRQHandler+0x1c8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d031      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a56      	ldr	r2, [pc, #344]	; (800225c <HAL_DMA_IRQHandler+0x1cc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d02c      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a54      	ldr	r2, [pc, #336]	; (8002260 <HAL_DMA_IRQHandler+0x1d0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d027      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a53      	ldr	r2, [pc, #332]	; (8002264 <HAL_DMA_IRQHandler+0x1d4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d022      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a51      	ldr	r2, [pc, #324]	; (8002268 <HAL_DMA_IRQHandler+0x1d8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01d      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a50      	ldr	r2, [pc, #320]	; (800226c <HAL_DMA_IRQHandler+0x1dc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d018      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a4e      	ldr	r2, [pc, #312]	; (8002270 <HAL_DMA_IRQHandler+0x1e0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a4d      	ldr	r2, [pc, #308]	; (8002274 <HAL_DMA_IRQHandler+0x1e4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00e      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a4b      	ldr	r2, [pc, #300]	; (8002278 <HAL_DMA_IRQHandler+0x1e8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a4a      	ldr	r2, [pc, #296]	; (800227c <HAL_DMA_IRQHandler+0x1ec>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d004      	beq.n	8002162 <HAL_DMA_IRQHandler+0xd2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a48      	ldr	r2, [pc, #288]	; (8002280 <HAL_DMA_IRQHandler+0x1f0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <HAL_DMA_IRQHandler+0xd6>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_DMA_IRQHandler+0xd8>
 8002166:	2300      	movs	r3, #0
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 842b 	beq.w	80029c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2208      	movs	r2, #8
 8002178:	409a      	lsls	r2, r3
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80a2 	beq.w	80022c8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <HAL_DMA_IRQHandler+0x1b4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d04a      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2d      	ldr	r2, [pc, #180]	; (8002248 <HAL_DMA_IRQHandler+0x1b8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d045      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2b      	ldr	r2, [pc, #172]	; (800224c <HAL_DMA_IRQHandler+0x1bc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d040      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <HAL_DMA_IRQHandler+0x1c0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d03b      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a28      	ldr	r2, [pc, #160]	; (8002254 <HAL_DMA_IRQHandler+0x1c4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d036      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a27      	ldr	r2, [pc, #156]	; (8002258 <HAL_DMA_IRQHandler+0x1c8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d031      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a25      	ldr	r2, [pc, #148]	; (800225c <HAL_DMA_IRQHandler+0x1cc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d02c      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a24      	ldr	r2, [pc, #144]	; (8002260 <HAL_DMA_IRQHandler+0x1d0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d027      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_DMA_IRQHandler+0x1d4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d022      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a21      	ldr	r2, [pc, #132]	; (8002268 <HAL_DMA_IRQHandler+0x1d8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d01d      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1f      	ldr	r2, [pc, #124]	; (800226c <HAL_DMA_IRQHandler+0x1dc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d018      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1e      	ldr	r2, [pc, #120]	; (8002270 <HAL_DMA_IRQHandler+0x1e0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d013      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <HAL_DMA_IRQHandler+0x1e4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00e      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1b      	ldr	r2, [pc, #108]	; (8002278 <HAL_DMA_IRQHandler+0x1e8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d009      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_DMA_IRQHandler+0x1ec>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d004      	beq.n	8002224 <HAL_DMA_IRQHandler+0x194>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a18      	ldr	r2, [pc, #96]	; (8002280 <HAL_DMA_IRQHandler+0x1f0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d12f      	bne.n	8002284 <HAL_DMA_IRQHandler+0x1f4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf14      	ite	ne
 8002232:	2301      	movne	r3, #1
 8002234:	2300      	moveq	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	e02e      	b.n	8002298 <HAL_DMA_IRQHandler+0x208>
 800223a:	bf00      	nop
 800223c:	24000000 	.word	0x24000000
 8002240:	1b4e81b5 	.word	0x1b4e81b5
 8002244:	40020010 	.word	0x40020010
 8002248:	40020028 	.word	0x40020028
 800224c:	40020040 	.word	0x40020040
 8002250:	40020058 	.word	0x40020058
 8002254:	40020070 	.word	0x40020070
 8002258:	40020088 	.word	0x40020088
 800225c:	400200a0 	.word	0x400200a0
 8002260:	400200b8 	.word	0x400200b8
 8002264:	40020410 	.word	0x40020410
 8002268:	40020428 	.word	0x40020428
 800226c:	40020440 	.word	0x40020440
 8002270:	40020458 	.word	0x40020458
 8002274:	40020470 	.word	0x40020470
 8002278:	40020488 	.word	0x40020488
 800227c:	400204a0 	.word	0x400204a0
 8002280:	400204b8 	.word	0x400204b8
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	bf14      	ite	ne
 8002292:	2301      	movne	r3, #1
 8002294:	2300      	moveq	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0204 	bic.w	r2, r2, #4
 80022aa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	2208      	movs	r2, #8
 80022b6:	409a      	lsls	r2, r3
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d06e      	beq.n	80023bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a69      	ldr	r2, [pc, #420]	; (8002488 <HAL_DMA_IRQHandler+0x3f8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d04a      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a67      	ldr	r2, [pc, #412]	; (800248c <HAL_DMA_IRQHandler+0x3fc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d045      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a66      	ldr	r2, [pc, #408]	; (8002490 <HAL_DMA_IRQHandler+0x400>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d040      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a64      	ldr	r2, [pc, #400]	; (8002494 <HAL_DMA_IRQHandler+0x404>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d03b      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a63      	ldr	r2, [pc, #396]	; (8002498 <HAL_DMA_IRQHandler+0x408>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d036      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a61      	ldr	r2, [pc, #388]	; (800249c <HAL_DMA_IRQHandler+0x40c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d031      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a60      	ldr	r2, [pc, #384]	; (80024a0 <HAL_DMA_IRQHandler+0x410>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d02c      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a5e      	ldr	r2, [pc, #376]	; (80024a4 <HAL_DMA_IRQHandler+0x414>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d027      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a5d      	ldr	r2, [pc, #372]	; (80024a8 <HAL_DMA_IRQHandler+0x418>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d022      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a5b      	ldr	r2, [pc, #364]	; (80024ac <HAL_DMA_IRQHandler+0x41c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01d      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a5a      	ldr	r2, [pc, #360]	; (80024b0 <HAL_DMA_IRQHandler+0x420>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d018      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a58      	ldr	r2, [pc, #352]	; (80024b4 <HAL_DMA_IRQHandler+0x424>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a57      	ldr	r2, [pc, #348]	; (80024b8 <HAL_DMA_IRQHandler+0x428>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00e      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a55      	ldr	r2, [pc, #340]	; (80024bc <HAL_DMA_IRQHandler+0x42c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d009      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a54      	ldr	r2, [pc, #336]	; (80024c0 <HAL_DMA_IRQHandler+0x430>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d004      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ee>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a52      	ldr	r2, [pc, #328]	; (80024c4 <HAL_DMA_IRQHandler+0x434>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10a      	bne.n	8002394 <HAL_DMA_IRQHandler+0x304>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf14      	ite	ne
 800238c:	2301      	movne	r3, #1
 800238e:	2300      	moveq	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	e003      	b.n	800239c <HAL_DMA_IRQHandler+0x30c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2300      	movs	r3, #0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00d      	beq.n	80023bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2201      	movs	r2, #1
 80023aa:	409a      	lsls	r2, r3
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b4:	f043 0202 	orr.w	r2, r3, #2
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	2204      	movs	r2, #4
 80023c6:	409a      	lsls	r2, r3
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 808f 	beq.w	80024f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a2c      	ldr	r2, [pc, #176]	; (8002488 <HAL_DMA_IRQHandler+0x3f8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d04a      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a2a      	ldr	r2, [pc, #168]	; (800248c <HAL_DMA_IRQHandler+0x3fc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d045      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a29      	ldr	r2, [pc, #164]	; (8002490 <HAL_DMA_IRQHandler+0x400>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d040      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a27      	ldr	r2, [pc, #156]	; (8002494 <HAL_DMA_IRQHandler+0x404>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d03b      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a26      	ldr	r2, [pc, #152]	; (8002498 <HAL_DMA_IRQHandler+0x408>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d036      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a24      	ldr	r2, [pc, #144]	; (800249c <HAL_DMA_IRQHandler+0x40c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d031      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <HAL_DMA_IRQHandler+0x410>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d02c      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <HAL_DMA_IRQHandler+0x414>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d027      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a20      	ldr	r2, [pc, #128]	; (80024a8 <HAL_DMA_IRQHandler+0x418>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d022      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <HAL_DMA_IRQHandler+0x41c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d01d      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <HAL_DMA_IRQHandler+0x420>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d018      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_DMA_IRQHandler+0x424>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_DMA_IRQHandler+0x428>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00e      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a18      	ldr	r2, [pc, #96]	; (80024bc <HAL_DMA_IRQHandler+0x42c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d009      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <HAL_DMA_IRQHandler+0x430>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d004      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3e2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <HAL_DMA_IRQHandler+0x434>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d12a      	bne.n	80024c8 <HAL_DMA_IRQHandler+0x438>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf14      	ite	ne
 8002480:	2301      	movne	r3, #1
 8002482:	2300      	moveq	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e023      	b.n	80024d0 <HAL_DMA_IRQHandler+0x440>
 8002488:	40020010 	.word	0x40020010
 800248c:	40020028 	.word	0x40020028
 8002490:	40020040 	.word	0x40020040
 8002494:	40020058 	.word	0x40020058
 8002498:	40020070 	.word	0x40020070
 800249c:	40020088 	.word	0x40020088
 80024a0:	400200a0 	.word	0x400200a0
 80024a4:	400200b8 	.word	0x400200b8
 80024a8:	40020410 	.word	0x40020410
 80024ac:	40020428 	.word	0x40020428
 80024b0:	40020440 	.word	0x40020440
 80024b4:	40020458 	.word	0x40020458
 80024b8:	40020470 	.word	0x40020470
 80024bc:	40020488 	.word	0x40020488
 80024c0:	400204a0 	.word	0x400204a0
 80024c4:	400204b8 	.word	0x400204b8
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00d      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	2204      	movs	r2, #4
 80024de:	409a      	lsls	r2, r3
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	f043 0204 	orr.w	r2, r3, #4
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	2210      	movs	r2, #16
 80024fa:	409a      	lsls	r2, r3
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a6 	beq.w	8002652 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a85      	ldr	r2, [pc, #532]	; (8002720 <HAL_DMA_IRQHandler+0x690>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d04a      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a83      	ldr	r2, [pc, #524]	; (8002724 <HAL_DMA_IRQHandler+0x694>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d045      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a82      	ldr	r2, [pc, #520]	; (8002728 <HAL_DMA_IRQHandler+0x698>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d040      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a80      	ldr	r2, [pc, #512]	; (800272c <HAL_DMA_IRQHandler+0x69c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d03b      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a7f      	ldr	r2, [pc, #508]	; (8002730 <HAL_DMA_IRQHandler+0x6a0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d036      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a7d      	ldr	r2, [pc, #500]	; (8002734 <HAL_DMA_IRQHandler+0x6a4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d031      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a7c      	ldr	r2, [pc, #496]	; (8002738 <HAL_DMA_IRQHandler+0x6a8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d02c      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a7a      	ldr	r2, [pc, #488]	; (800273c <HAL_DMA_IRQHandler+0x6ac>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d027      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a79      	ldr	r2, [pc, #484]	; (8002740 <HAL_DMA_IRQHandler+0x6b0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d022      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a77      	ldr	r2, [pc, #476]	; (8002744 <HAL_DMA_IRQHandler+0x6b4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d01d      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a76      	ldr	r2, [pc, #472]	; (8002748 <HAL_DMA_IRQHandler+0x6b8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d018      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a74      	ldr	r2, [pc, #464]	; (800274c <HAL_DMA_IRQHandler+0x6bc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d013      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a73      	ldr	r2, [pc, #460]	; (8002750 <HAL_DMA_IRQHandler+0x6c0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00e      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a71      	ldr	r2, [pc, #452]	; (8002754 <HAL_DMA_IRQHandler+0x6c4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a70      	ldr	r2, [pc, #448]	; (8002758 <HAL_DMA_IRQHandler+0x6c8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d004      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x516>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a6e      	ldr	r2, [pc, #440]	; (800275c <HAL_DMA_IRQHandler+0x6cc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10a      	bne.n	80025bc <HAL_DMA_IRQHandler+0x52c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	e009      	b.n	80025d0 <HAL_DMA_IRQHandler+0x540>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d03e      	beq.n	8002652 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	2210      	movs	r2, #16
 80025de:	409a      	lsls	r2, r3
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d018      	beq.n	8002624 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d108      	bne.n	8002612 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2b00      	cmp	r3, #0
 8002606:	d024      	beq.n	8002652 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
 8002610:	e01f      	b.n	8002652 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01b      	beq.n	8002652 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	4798      	blx	r3
 8002622:	e016      	b.n	8002652 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d107      	bne.n	8002642 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0208 	bic.w	r2, r2, #8
 8002640:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	2220      	movs	r2, #32
 800265c:	409a      	lsls	r2, r3
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8110 	beq.w	8002888 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2c      	ldr	r2, [pc, #176]	; (8002720 <HAL_DMA_IRQHandler+0x690>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d04a      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <HAL_DMA_IRQHandler+0x694>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d045      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a29      	ldr	r2, [pc, #164]	; (8002728 <HAL_DMA_IRQHandler+0x698>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d040      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a28      	ldr	r2, [pc, #160]	; (800272c <HAL_DMA_IRQHandler+0x69c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d03b      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a26      	ldr	r2, [pc, #152]	; (8002730 <HAL_DMA_IRQHandler+0x6a0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d036      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a25      	ldr	r2, [pc, #148]	; (8002734 <HAL_DMA_IRQHandler+0x6a4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d031      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a23      	ldr	r2, [pc, #140]	; (8002738 <HAL_DMA_IRQHandler+0x6a8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d02c      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a22      	ldr	r2, [pc, #136]	; (800273c <HAL_DMA_IRQHandler+0x6ac>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d027      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a20      	ldr	r2, [pc, #128]	; (8002740 <HAL_DMA_IRQHandler+0x6b0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d022      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <HAL_DMA_IRQHandler+0x6b4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d01d      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <HAL_DMA_IRQHandler+0x6b8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d018      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1c      	ldr	r2, [pc, #112]	; (800274c <HAL_DMA_IRQHandler+0x6bc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d013      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1a      	ldr	r2, [pc, #104]	; (8002750 <HAL_DMA_IRQHandler+0x6c0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00e      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a19      	ldr	r2, [pc, #100]	; (8002754 <HAL_DMA_IRQHandler+0x6c4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <HAL_DMA_IRQHandler+0x6c8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d004      	beq.n	8002708 <HAL_DMA_IRQHandler+0x678>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a16      	ldr	r2, [pc, #88]	; (800275c <HAL_DMA_IRQHandler+0x6cc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d12b      	bne.n	8002760 <HAL_DMA_IRQHandler+0x6d0>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	bf14      	ite	ne
 8002716:	2301      	movne	r3, #1
 8002718:	2300      	moveq	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	e02a      	b.n	8002774 <HAL_DMA_IRQHandler+0x6e4>
 800271e:	bf00      	nop
 8002720:	40020010 	.word	0x40020010
 8002724:	40020028 	.word	0x40020028
 8002728:	40020040 	.word	0x40020040
 800272c:	40020058 	.word	0x40020058
 8002730:	40020070 	.word	0x40020070
 8002734:	40020088 	.word	0x40020088
 8002738:	400200a0 	.word	0x400200a0
 800273c:	400200b8 	.word	0x400200b8
 8002740:	40020410 	.word	0x40020410
 8002744:	40020428 	.word	0x40020428
 8002748:	40020440 	.word	0x40020440
 800274c:	40020458 	.word	0x40020458
 8002750:	40020470 	.word	0x40020470
 8002754:	40020488 	.word	0x40020488
 8002758:	400204a0 	.word	0x400204a0
 800275c:	400204b8 	.word	0x400204b8
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf14      	ite	ne
 800276e:	2301      	movne	r3, #1
 8002770:	2300      	moveq	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 8087 	beq.w	8002888 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	2220      	movs	r2, #32
 8002784:	409a      	lsls	r2, r3
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b04      	cmp	r3, #4
 8002794:	d139      	bne.n	800280a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0216 	bic.w	r2, r2, #22
 80027a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <HAL_DMA_IRQHandler+0x736>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0208 	bic.w	r2, r2, #8
 80027d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	223f      	movs	r2, #63	; 0x3f
 80027e0:	409a      	lsls	r2, r3
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 834a 	beq.w	8002e94 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	4798      	blx	r3
          }
          return;
 8002808:	e344      	b.n	8002e94 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d018      	beq.n	800284a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d108      	bne.n	8002838 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	2b00      	cmp	r3, #0
 800282c:	d02c      	beq.n	8002888 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
 8002836:	e027      	b.n	8002888 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d023      	beq.n	8002888 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
 8002848:	e01e      	b.n	8002888 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10f      	bne.n	8002878 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0210 	bic.w	r2, r2, #16
 8002866:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8306 	beq.w	8002e9e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8088 	beq.w	80029b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2204      	movs	r2, #4
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a7a      	ldr	r2, [pc, #488]	; (8002a98 <HAL_DMA_IRQHandler+0xa08>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d04a      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a79      	ldr	r2, [pc, #484]	; (8002a9c <HAL_DMA_IRQHandler+0xa0c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d045      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a77      	ldr	r2, [pc, #476]	; (8002aa0 <HAL_DMA_IRQHandler+0xa10>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d040      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a76      	ldr	r2, [pc, #472]	; (8002aa4 <HAL_DMA_IRQHandler+0xa14>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d03b      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a74      	ldr	r2, [pc, #464]	; (8002aa8 <HAL_DMA_IRQHandler+0xa18>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d036      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a73      	ldr	r2, [pc, #460]	; (8002aac <HAL_DMA_IRQHandler+0xa1c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d031      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a71      	ldr	r2, [pc, #452]	; (8002ab0 <HAL_DMA_IRQHandler+0xa20>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02c      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a70      	ldr	r2, [pc, #448]	; (8002ab4 <HAL_DMA_IRQHandler+0xa24>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d027      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6e      	ldr	r2, [pc, #440]	; (8002ab8 <HAL_DMA_IRQHandler+0xa28>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d022      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6d      	ldr	r2, [pc, #436]	; (8002abc <HAL_DMA_IRQHandler+0xa2c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d01d      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6b      	ldr	r2, [pc, #428]	; (8002ac0 <HAL_DMA_IRQHandler+0xa30>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d018      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6a      	ldr	r2, [pc, #424]	; (8002ac4 <HAL_DMA_IRQHandler+0xa34>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a68      	ldr	r2, [pc, #416]	; (8002ac8 <HAL_DMA_IRQHandler+0xa38>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00e      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a67      	ldr	r2, [pc, #412]	; (8002acc <HAL_DMA_IRQHandler+0xa3c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a65      	ldr	r2, [pc, #404]	; (8002ad0 <HAL_DMA_IRQHandler+0xa40>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d004      	beq.n	8002948 <HAL_DMA_IRQHandler+0x8b8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a64      	ldr	r2, [pc, #400]	; (8002ad4 <HAL_DMA_IRQHandler+0xa44>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d108      	bne.n	800295a <HAL_DMA_IRQHandler+0x8ca>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e007      	b.n	800296a <HAL_DMA_IRQHandler+0x8da>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3301      	adds	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002972:	429a      	cmp	r2, r3
 8002974:	d307      	bcc.n	8002986 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f2      	bne.n	800296a <HAL_DMA_IRQHandler+0x8da>
 8002984:	e000      	b.n	8002988 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002986:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2203      	movs	r2, #3
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80029a6:	e003      	b.n	80029b0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8272 	beq.w	8002e9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
 80029c2:	e26c      	b.n	8002e9e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a43      	ldr	r2, [pc, #268]	; (8002ad8 <HAL_DMA_IRQHandler+0xa48>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d022      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x984>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a42      	ldr	r2, [pc, #264]	; (8002adc <HAL_DMA_IRQHandler+0xa4c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d01d      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x984>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a40      	ldr	r2, [pc, #256]	; (8002ae0 <HAL_DMA_IRQHandler+0xa50>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d018      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x984>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a3f      	ldr	r2, [pc, #252]	; (8002ae4 <HAL_DMA_IRQHandler+0xa54>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d013      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x984>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a3d      	ldr	r2, [pc, #244]	; (8002ae8 <HAL_DMA_IRQHandler+0xa58>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00e      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x984>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a3c      	ldr	r2, [pc, #240]	; (8002aec <HAL_DMA_IRQHandler+0xa5c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d009      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x984>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a3a      	ldr	r2, [pc, #232]	; (8002af0 <HAL_DMA_IRQHandler+0xa60>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d004      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x984>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a39      	ldr	r2, [pc, #228]	; (8002af4 <HAL_DMA_IRQHandler+0xa64>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d101      	bne.n	8002a18 <HAL_DMA_IRQHandler+0x988>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_DMA_IRQHandler+0x98a>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 823f 	beq.w	8002e9e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	2204      	movs	r2, #4
 8002a32:	409a      	lsls	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80cd 	beq.w	8002bd8 <HAL_DMA_IRQHandler+0xb48>
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80c7 	beq.w	8002bd8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	2204      	movs	r2, #4
 8002a54:	409a      	lsls	r2, r3
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d049      	beq.n	8002af8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8210 	beq.w	8002e98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a80:	e20a      	b.n	8002e98 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8206 	beq.w	8002e98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a94:	e200      	b.n	8002e98 <HAL_DMA_IRQHandler+0xe08>
 8002a96:	bf00      	nop
 8002a98:	40020010 	.word	0x40020010
 8002a9c:	40020028 	.word	0x40020028
 8002aa0:	40020040 	.word	0x40020040
 8002aa4:	40020058 	.word	0x40020058
 8002aa8:	40020070 	.word	0x40020070
 8002aac:	40020088 	.word	0x40020088
 8002ab0:	400200a0 	.word	0x400200a0
 8002ab4:	400200b8 	.word	0x400200b8
 8002ab8:	40020410 	.word	0x40020410
 8002abc:	40020428 	.word	0x40020428
 8002ac0:	40020440 	.word	0x40020440
 8002ac4:	40020458 	.word	0x40020458
 8002ac8:	40020470 	.word	0x40020470
 8002acc:	40020488 	.word	0x40020488
 8002ad0:	400204a0 	.word	0x400204a0
 8002ad4:	400204b8 	.word	0x400204b8
 8002ad8:	58025408 	.word	0x58025408
 8002adc:	5802541c 	.word	0x5802541c
 8002ae0:	58025430 	.word	0x58025430
 8002ae4:	58025444 	.word	0x58025444
 8002ae8:	58025458 	.word	0x58025458
 8002aec:	5802546c 	.word	0x5802546c
 8002af0:	58025480 	.word	0x58025480
 8002af4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d160      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a8c      	ldr	r2, [pc, #560]	; (8002d38 <HAL_DMA_IRQHandler+0xca8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d04a      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a8a      	ldr	r2, [pc, #552]	; (8002d3c <HAL_DMA_IRQHandler+0xcac>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d045      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a89      	ldr	r2, [pc, #548]	; (8002d40 <HAL_DMA_IRQHandler+0xcb0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d040      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a87      	ldr	r2, [pc, #540]	; (8002d44 <HAL_DMA_IRQHandler+0xcb4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d03b      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a86      	ldr	r2, [pc, #536]	; (8002d48 <HAL_DMA_IRQHandler+0xcb8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d036      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a84      	ldr	r2, [pc, #528]	; (8002d4c <HAL_DMA_IRQHandler+0xcbc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d031      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a83      	ldr	r2, [pc, #524]	; (8002d50 <HAL_DMA_IRQHandler+0xcc0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d02c      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a81      	ldr	r2, [pc, #516]	; (8002d54 <HAL_DMA_IRQHandler+0xcc4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d027      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a80      	ldr	r2, [pc, #512]	; (8002d58 <HAL_DMA_IRQHandler+0xcc8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d022      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a7e      	ldr	r2, [pc, #504]	; (8002d5c <HAL_DMA_IRQHandler+0xccc>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01d      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7d      	ldr	r2, [pc, #500]	; (8002d60 <HAL_DMA_IRQHandler+0xcd0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d018      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a7b      	ldr	r2, [pc, #492]	; (8002d64 <HAL_DMA_IRQHandler+0xcd4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a7a      	ldr	r2, [pc, #488]	; (8002d68 <HAL_DMA_IRQHandler+0xcd8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00e      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a78      	ldr	r2, [pc, #480]	; (8002d6c <HAL_DMA_IRQHandler+0xcdc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d009      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a77      	ldr	r2, [pc, #476]	; (8002d70 <HAL_DMA_IRQHandler+0xce0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0xb12>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a75      	ldr	r2, [pc, #468]	; (8002d74 <HAL_DMA_IRQHandler+0xce4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d108      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0xb24>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0208 	bic.w	r2, r2, #8
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e007      	b.n	8002bc4 <HAL_DMA_IRQHandler+0xb34>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0204 	bic.w	r2, r2, #4
 8002bc2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8165 	beq.w	8002e98 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bd6:	e15f      	b.n	8002e98 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	2202      	movs	r2, #2
 8002be2:	409a      	lsls	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80c5 	beq.w	8002d78 <HAL_DMA_IRQHandler+0xce8>
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80bf 	beq.w	8002d78 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	2202      	movs	r2, #2
 8002c04:	409a      	lsls	r2, r3
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d018      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 813a 	beq.w	8002e9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c30:	e134      	b.n	8002e9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8130 	beq.w	8002e9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c44:	e12a      	b.n	8002e9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d168      	bne.n	8002d22 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a38      	ldr	r2, [pc, #224]	; (8002d38 <HAL_DMA_IRQHandler+0xca8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d04a      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a37      	ldr	r2, [pc, #220]	; (8002d3c <HAL_DMA_IRQHandler+0xcac>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d045      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a35      	ldr	r2, [pc, #212]	; (8002d40 <HAL_DMA_IRQHandler+0xcb0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d040      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a34      	ldr	r2, [pc, #208]	; (8002d44 <HAL_DMA_IRQHandler+0xcb4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d03b      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a32      	ldr	r2, [pc, #200]	; (8002d48 <HAL_DMA_IRQHandler+0xcb8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d036      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a31      	ldr	r2, [pc, #196]	; (8002d4c <HAL_DMA_IRQHandler+0xcbc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d031      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a2f      	ldr	r2, [pc, #188]	; (8002d50 <HAL_DMA_IRQHandler+0xcc0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d02c      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a2e      	ldr	r2, [pc, #184]	; (8002d54 <HAL_DMA_IRQHandler+0xcc4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d027      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2c      	ldr	r2, [pc, #176]	; (8002d58 <HAL_DMA_IRQHandler+0xcc8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d022      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a2b      	ldr	r2, [pc, #172]	; (8002d5c <HAL_DMA_IRQHandler+0xccc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d01d      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a29      	ldr	r2, [pc, #164]	; (8002d60 <HAL_DMA_IRQHandler+0xcd0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d018      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a28      	ldr	r2, [pc, #160]	; (8002d64 <HAL_DMA_IRQHandler+0xcd4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <HAL_DMA_IRQHandler+0xcd8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a25      	ldr	r2, [pc, #148]	; (8002d6c <HAL_DMA_IRQHandler+0xcdc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a23      	ldr	r2, [pc, #140]	; (8002d70 <HAL_DMA_IRQHandler+0xce0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc60>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <HAL_DMA_IRQHandler+0xce4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d108      	bne.n	8002d02 <HAL_DMA_IRQHandler+0xc72>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0214 	bic.w	r2, r2, #20
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e007      	b.n	8002d12 <HAL_DMA_IRQHandler+0xc82>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 020a 	bic.w	r2, r2, #10
 8002d10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80b8 	beq.w	8002e9c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d34:	e0b2      	b.n	8002e9c <HAL_DMA_IRQHandler+0xe0c>
 8002d36:	bf00      	nop
 8002d38:	40020010 	.word	0x40020010
 8002d3c:	40020028 	.word	0x40020028
 8002d40:	40020040 	.word	0x40020040
 8002d44:	40020058 	.word	0x40020058
 8002d48:	40020070 	.word	0x40020070
 8002d4c:	40020088 	.word	0x40020088
 8002d50:	400200a0 	.word	0x400200a0
 8002d54:	400200b8 	.word	0x400200b8
 8002d58:	40020410 	.word	0x40020410
 8002d5c:	40020428 	.word	0x40020428
 8002d60:	40020440 	.word	0x40020440
 8002d64:	40020458 	.word	0x40020458
 8002d68:	40020470 	.word	0x40020470
 8002d6c:	40020488 	.word	0x40020488
 8002d70:	400204a0 	.word	0x400204a0
 8002d74:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	2208      	movs	r2, #8
 8002d82:	409a      	lsls	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8088 	beq.w	8002e9e <HAL_DMA_IRQHandler+0xe0e>
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8082 	beq.w	8002e9e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a41      	ldr	r2, [pc, #260]	; (8002ea4 <HAL_DMA_IRQHandler+0xe14>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d04a      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a3f      	ldr	r2, [pc, #252]	; (8002ea8 <HAL_DMA_IRQHandler+0xe18>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d045      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a3e      	ldr	r2, [pc, #248]	; (8002eac <HAL_DMA_IRQHandler+0xe1c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d040      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a3c      	ldr	r2, [pc, #240]	; (8002eb0 <HAL_DMA_IRQHandler+0xe20>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d03b      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3b      	ldr	r2, [pc, #236]	; (8002eb4 <HAL_DMA_IRQHandler+0xe24>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d036      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a39      	ldr	r2, [pc, #228]	; (8002eb8 <HAL_DMA_IRQHandler+0xe28>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d031      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a38      	ldr	r2, [pc, #224]	; (8002ebc <HAL_DMA_IRQHandler+0xe2c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d02c      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a36      	ldr	r2, [pc, #216]	; (8002ec0 <HAL_DMA_IRQHandler+0xe30>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d027      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a35      	ldr	r2, [pc, #212]	; (8002ec4 <HAL_DMA_IRQHandler+0xe34>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d022      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a33      	ldr	r2, [pc, #204]	; (8002ec8 <HAL_DMA_IRQHandler+0xe38>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01d      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a32      	ldr	r2, [pc, #200]	; (8002ecc <HAL_DMA_IRQHandler+0xe3c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d018      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a30      	ldr	r2, [pc, #192]	; (8002ed0 <HAL_DMA_IRQHandler+0xe40>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d013      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2f      	ldr	r2, [pc, #188]	; (8002ed4 <HAL_DMA_IRQHandler+0xe44>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00e      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a2d      	ldr	r2, [pc, #180]	; (8002ed8 <HAL_DMA_IRQHandler+0xe48>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d009      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2c      	ldr	r2, [pc, #176]	; (8002edc <HAL_DMA_IRQHandler+0xe4c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xdaa>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2a      	ldr	r2, [pc, #168]	; (8002ee0 <HAL_DMA_IRQHandler+0xe50>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d108      	bne.n	8002e4c <HAL_DMA_IRQHandler+0xdbc>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 021c 	bic.w	r2, r2, #28
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e007      	b.n	8002e5c <HAL_DMA_IRQHandler+0xdcc>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 020e 	bic.w	r2, r2, #14
 8002e5a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2201      	movs	r2, #1
 8002e66:	409a      	lsls	r2, r3
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
 8002e92:	e004      	b.n	8002e9e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002e94:	bf00      	nop
 8002e96:	e002      	b.n	8002e9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e98:	bf00      	nop
 8002e9a:	e000      	b.n	8002e9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e9c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002e9e:	3728      	adds	r7, #40	; 0x28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40020010 	.word	0x40020010
 8002ea8:	40020028 	.word	0x40020028
 8002eac:	40020040 	.word	0x40020040
 8002eb0:	40020058 	.word	0x40020058
 8002eb4:	40020070 	.word	0x40020070
 8002eb8:	40020088 	.word	0x40020088
 8002ebc:	400200a0 	.word	0x400200a0
 8002ec0:	400200b8 	.word	0x400200b8
 8002ec4:	40020410 	.word	0x40020410
 8002ec8:	40020428 	.word	0x40020428
 8002ecc:	40020440 	.word	0x40020440
 8002ed0:	40020458 	.word	0x40020458
 8002ed4:	40020470 	.word	0x40020470
 8002ed8:	40020488 	.word	0x40020488
 8002edc:	400204a0 	.word	0x400204a0
 8002ee0:	400204b8 	.word	0x400204b8

08002ee4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a42      	ldr	r2, [pc, #264]	; (8002ffc <DMA_CalcBaseAndBitshift+0x118>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d04a      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a41      	ldr	r2, [pc, #260]	; (8003000 <DMA_CalcBaseAndBitshift+0x11c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d045      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a3f      	ldr	r2, [pc, #252]	; (8003004 <DMA_CalcBaseAndBitshift+0x120>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d040      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a3e      	ldr	r2, [pc, #248]	; (8003008 <DMA_CalcBaseAndBitshift+0x124>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d03b      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a3c      	ldr	r2, [pc, #240]	; (800300c <DMA_CalcBaseAndBitshift+0x128>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d036      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a3b      	ldr	r2, [pc, #236]	; (8003010 <DMA_CalcBaseAndBitshift+0x12c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d031      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a39      	ldr	r2, [pc, #228]	; (8003014 <DMA_CalcBaseAndBitshift+0x130>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d02c      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a38      	ldr	r2, [pc, #224]	; (8003018 <DMA_CalcBaseAndBitshift+0x134>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d027      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a36      	ldr	r2, [pc, #216]	; (800301c <DMA_CalcBaseAndBitshift+0x138>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d022      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a35      	ldr	r2, [pc, #212]	; (8003020 <DMA_CalcBaseAndBitshift+0x13c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d01d      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a33      	ldr	r2, [pc, #204]	; (8003024 <DMA_CalcBaseAndBitshift+0x140>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d018      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a32      	ldr	r2, [pc, #200]	; (8003028 <DMA_CalcBaseAndBitshift+0x144>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d013      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a30      	ldr	r2, [pc, #192]	; (800302c <DMA_CalcBaseAndBitshift+0x148>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00e      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a2f      	ldr	r2, [pc, #188]	; (8003030 <DMA_CalcBaseAndBitshift+0x14c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d009      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a2d      	ldr	r2, [pc, #180]	; (8003034 <DMA_CalcBaseAndBitshift+0x150>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <DMA_CalcBaseAndBitshift+0xa8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2c      	ldr	r2, [pc, #176]	; (8003038 <DMA_CalcBaseAndBitshift+0x154>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <DMA_CalcBaseAndBitshift+0xac>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <DMA_CalcBaseAndBitshift+0xae>
 8002f90:	2300      	movs	r3, #0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d024      	beq.n	8002fe0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3b10      	subs	r3, #16
 8002f9e:	4a27      	ldr	r2, [pc, #156]	; (800303c <DMA_CalcBaseAndBitshift+0x158>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	4a24      	ldr	r2, [pc, #144]	; (8003040 <DMA_CalcBaseAndBitshift+0x15c>)
 8002fb0:	5cd3      	ldrb	r3, [r2, r3]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d908      	bls.n	8002fd0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <DMA_CalcBaseAndBitshift+0x160>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	1d1a      	adds	r2, r3, #4
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	659a      	str	r2, [r3, #88]	; 0x58
 8002fce:	e00d      	b.n	8002fec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <DMA_CalcBaseAndBitshift+0x160>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8002fde:	e005      	b.n	8002fec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40020010 	.word	0x40020010
 8003000:	40020028 	.word	0x40020028
 8003004:	40020040 	.word	0x40020040
 8003008:	40020058 	.word	0x40020058
 800300c:	40020070 	.word	0x40020070
 8003010:	40020088 	.word	0x40020088
 8003014:	400200a0 	.word	0x400200a0
 8003018:	400200b8 	.word	0x400200b8
 800301c:	40020410 	.word	0x40020410
 8003020:	40020428 	.word	0x40020428
 8003024:	40020440 	.word	0x40020440
 8003028:	40020458 	.word	0x40020458
 800302c:	40020470 	.word	0x40020470
 8003030:	40020488 	.word	0x40020488
 8003034:	400204a0 	.word	0x400204a0
 8003038:	400204b8 	.word	0x400204b8
 800303c:	aaaaaaab 	.word	0xaaaaaaab
 8003040:	0801340c 	.word	0x0801340c
 8003044:	fffffc00 	.word	0xfffffc00

08003048 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d120      	bne.n	800309e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	2b03      	cmp	r3, #3
 8003062:	d858      	bhi.n	8003116 <DMA_CheckFifoParam+0xce>
 8003064:	a201      	add	r2, pc, #4	; (adr r2, 800306c <DMA_CheckFifoParam+0x24>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	0800307d 	.word	0x0800307d
 8003070:	0800308f 	.word	0x0800308f
 8003074:	0800307d 	.word	0x0800307d
 8003078:	08003117 	.word	0x08003117
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d048      	beq.n	800311a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800308c:	e045      	b.n	800311a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003096:	d142      	bne.n	800311e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800309c:	e03f      	b.n	800311e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a6:	d123      	bne.n	80030f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d838      	bhi.n	8003122 <DMA_CheckFifoParam+0xda>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <DMA_CheckFifoParam+0x70>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030cf 	.word	0x080030cf
 80030c0:	080030c9 	.word	0x080030c9
 80030c4:	080030e1 	.word	0x080030e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
        break;
 80030cc:	e030      	b.n	8003130 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d025      	beq.n	8003126 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030de:	e022      	b.n	8003126 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030e8:	d11f      	bne.n	800312a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030ee:	e01c      	b.n	800312a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d902      	bls.n	80030fe <DMA_CheckFifoParam+0xb6>
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d003      	beq.n	8003104 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80030fc:	e018      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
        break;
 8003102:	e015      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00e      	beq.n	800312e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
    break;
 8003114:	e00b      	b.n	800312e <DMA_CheckFifoParam+0xe6>
        break;
 8003116:	bf00      	nop
 8003118:	e00a      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
        break;
 800311a:	bf00      	nop
 800311c:	e008      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
        break;
 800311e:	bf00      	nop
 8003120:	e006      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
        break;
 8003122:	bf00      	nop
 8003124:	e004      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
        break;
 8003126:	bf00      	nop
 8003128:	e002      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
        break;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
    break;
 800312e:	bf00      	nop
    }
  }

  return status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop

08003140 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a38      	ldr	r2, [pc, #224]	; (8003234 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d022      	beq.n	800319e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a36      	ldr	r2, [pc, #216]	; (8003238 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01d      	beq.n	800319e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a35      	ldr	r2, [pc, #212]	; (800323c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d018      	beq.n	800319e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a33      	ldr	r2, [pc, #204]	; (8003240 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d013      	beq.n	800319e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a32      	ldr	r2, [pc, #200]	; (8003244 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00e      	beq.n	800319e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a30      	ldr	r2, [pc, #192]	; (8003248 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d009      	beq.n	800319e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2f      	ldr	r2, [pc, #188]	; (800324c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d004      	beq.n	800319e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2d      	ldr	r2, [pc, #180]	; (8003250 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d101      	bne.n	80031a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80031a2:	2300      	movs	r3, #0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01a      	beq.n	80031de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	3b08      	subs	r3, #8
 80031b0:	4a28      	ldr	r2, [pc, #160]	; (8003254 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4b26      	ldr	r3, [pc, #152]	; (8003258 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	461a      	mov	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a24      	ldr	r2, [pc, #144]	; (800325c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80031cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2201      	movs	r2, #1
 80031d6:	409a      	lsls	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80031dc:	e024      	b.n	8003228 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	3b10      	subs	r3, #16
 80031e6:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4a1c      	ldr	r2, [pc, #112]	; (8003264 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d806      	bhi.n	8003206 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4a1b      	ldr	r2, [pc, #108]	; (8003268 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d902      	bls.n	8003206 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3308      	adds	r3, #8
 8003204:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4b18      	ldr	r3, [pc, #96]	; (800326c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a16      	ldr	r2, [pc, #88]	; (8003270 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003218:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	2201      	movs	r2, #1
 8003222:	409a      	lsls	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	58025408 	.word	0x58025408
 8003238:	5802541c 	.word	0x5802541c
 800323c:	58025430 	.word	0x58025430
 8003240:	58025444 	.word	0x58025444
 8003244:	58025458 	.word	0x58025458
 8003248:	5802546c 	.word	0x5802546c
 800324c:	58025480 	.word	0x58025480
 8003250:	58025494 	.word	0x58025494
 8003254:	cccccccd 	.word	0xcccccccd
 8003258:	16009600 	.word	0x16009600
 800325c:	58025880 	.word	0x58025880
 8003260:	aaaaaaab 	.word	0xaaaaaaab
 8003264:	400204b8 	.word	0x400204b8
 8003268:	4002040f 	.word	0x4002040f
 800326c:	10008200 	.word	0x10008200
 8003270:	40020880 	.word	0x40020880

08003274 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d04a      	beq.n	8003320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d847      	bhi.n	8003320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a25      	ldr	r2, [pc, #148]	; (800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d022      	beq.n	80032e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a24      	ldr	r2, [pc, #144]	; (8003330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d01d      	beq.n	80032e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a22      	ldr	r2, [pc, #136]	; (8003334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d018      	beq.n	80032e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a21      	ldr	r2, [pc, #132]	; (8003338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d013      	beq.n	80032e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1f      	ldr	r2, [pc, #124]	; (800333c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00e      	beq.n	80032e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d009      	beq.n	80032e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d004      	beq.n	80032e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d101      	bne.n	80032e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80032e4:	2300      	movs	r3, #0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4b17      	ldr	r3, [pc, #92]	; (800334c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	461a      	mov	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a15      	ldr	r2, [pc, #84]	; (8003350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80032fc:	671a      	str	r2, [r3, #112]	; 0x70
 80032fe:	e009      	b.n	8003314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	461a      	mov	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a11      	ldr	r2, [pc, #68]	; (8003358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003312:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3b01      	subs	r3, #1
 8003318:	2201      	movs	r2, #1
 800331a:	409a      	lsls	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	58025408 	.word	0x58025408
 8003330:	5802541c 	.word	0x5802541c
 8003334:	58025430 	.word	0x58025430
 8003338:	58025444 	.word	0x58025444
 800333c:	58025458 	.word	0x58025458
 8003340:	5802546c 	.word	0x5802546c
 8003344:	58025480 	.word	0x58025480
 8003348:	58025494 	.word	0x58025494
 800334c:	1600963f 	.word	0x1600963f
 8003350:	58025940 	.word	0x58025940
 8003354:	1000823f 	.word	0x1000823f
 8003358:	40020940 	.word	0x40020940

0800335c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b098      	sub	sp, #96	; 0x60
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003364:	4a84      	ldr	r2, [pc, #528]	; (8003578 <HAL_FDCAN_Init+0x21c>)
 8003366:	f107 030c 	add.w	r3, r7, #12
 800336a:	4611      	mov	r1, r2
 800336c:	224c      	movs	r2, #76	; 0x4c
 800336e:	4618      	mov	r0, r3
 8003370:	f00f fbae 	bl	8012ad0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e1ca      	b.n	8003714 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a7e      	ldr	r2, [pc, #504]	; (800357c <HAL_FDCAN_Init+0x220>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d106      	bne.n	8003396 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003390:	461a      	mov	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d106      	bne.n	80033b0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fd fe1a 	bl	8000fe4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0210 	bic.w	r2, r2, #16
 80033be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c0:	f7fe f9c0 	bl	8001744 <HAL_GetTick>
 80033c4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80033c6:	e014      	b.n	80033f2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80033c8:	f7fe f9bc 	bl	8001744 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b0a      	cmp	r3, #10
 80033d4:	d90d      	bls.n	80033f2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033dc:	f043 0201 	orr.w	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2203      	movs	r2, #3
 80033ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e190      	b.n	8003714 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d0e3      	beq.n	80033c8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003410:	f7fe f998 	bl	8001744 <HAL_GetTick>
 8003414:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003416:	e014      	b.n	8003442 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003418:	f7fe f994 	bl	8001744 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b0a      	cmp	r3, #10
 8003424:	d90d      	bls.n	8003442 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800342c:	f043 0201 	orr.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2203      	movs	r2, #3
 800343a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e168      	b.n	8003714 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0e3      	beq.n	8003418 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0202 	orr.w	r2, r2, #2
 800345e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	7c1b      	ldrb	r3, [r3, #16]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d108      	bne.n	800347a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003476:	619a      	str	r2, [r3, #24]
 8003478:	e007      	b.n	800348a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699a      	ldr	r2, [r3, #24]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003488:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7c5b      	ldrb	r3, [r3, #17]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d108      	bne.n	80034a4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699a      	ldr	r2, [r3, #24]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a0:	619a      	str	r2, [r3, #24]
 80034a2:	e007      	b.n	80034b4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034b2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	7c9b      	ldrb	r3, [r3, #18]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d108      	bne.n	80034ce <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034ca:	619a      	str	r2, [r3, #24]
 80034cc:	e007      	b.n	80034de <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034dc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003502:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0210 	bic.w	r2, r2, #16
 8003512:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d108      	bne.n	800352e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0204 	orr.w	r2, r2, #4
 800352a:	619a      	str	r2, [r3, #24]
 800352c:	e030      	b.n	8003590 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d02c      	beq.n	8003590 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d020      	beq.n	8003580 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699a      	ldr	r2, [r3, #24]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800354c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0210 	orr.w	r2, r2, #16
 800355c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2b03      	cmp	r3, #3
 8003564:	d114      	bne.n	8003590 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0220 	orr.w	r2, r2, #32
 8003574:	619a      	str	r2, [r3, #24]
 8003576:	e00b      	b.n	8003590 <HAL_FDCAN_Init+0x234>
 8003578:	08013318 	.word	0x08013318
 800357c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0220 	orr.w	r2, r2, #32
 800358e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	3b01      	subs	r3, #1
 8003596:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	3b01      	subs	r3, #1
 800359e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035a0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035a8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035b8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035ba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035c4:	d115      	bne.n	80035f2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	3b01      	subs	r3, #1
 80035d2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035d4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	3b01      	subs	r3, #1
 80035dc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80035de:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	3b01      	subs	r3, #1
 80035e8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80035ee:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035f0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003618:	4413      	add	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d012      	beq.n	8003644 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003626:	f023 0107 	bic.w	r1, r3, #7
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003634:	4413      	add	r3, r2
 8003636:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d012      	beq.n	8003672 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003654:	f023 0107 	bic.w	r1, r3, #7
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003662:	4413      	add	r3, r2
 8003664:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003676:	2b00      	cmp	r3, #0
 8003678:	d013      	beq.n	80036a2 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003682:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003690:	4413      	add	r3, r2
 8003692:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003696:	011a      	lsls	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d013      	beq.n	80036d2 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036b2:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036c0:	4413      	add	r3, r2
 80036c2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80036c6:	021a      	lsls	r2, r3, #8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a11      	ldr	r2, [pc, #68]	; (800371c <HAL_FDCAN_Init+0x3c0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d107      	bne.n	80036ec <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f022 0203 	bic.w	r2, r2, #3
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f80b 	bl	8003720 <FDCAN_CalcultateRamBlockAddresses>
 800370a:	4603      	mov	r3, r0
 800370c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003710:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003714:	4618      	mov	r0, r3
 8003716:	3760      	adds	r7, #96	; 0x60
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	4000a000 	.word	0x4000a000

08003720 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003736:	4ba7      	ldr	r3, [pc, #668]	; (80039d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003738:	4013      	ands	r3, r2
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	0091      	lsls	r1, r2, #2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	430b      	orrs	r3, r1
 8003744:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003750:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	041a      	lsls	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	4413      	add	r3, r2
 800376c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003776:	4b97      	ldr	r3, [pc, #604]	; (80039d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003778:	4013      	ands	r3, r2
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	0091      	lsls	r1, r2, #2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	430b      	orrs	r3, r1
 8003784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003790:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003798:	041a      	lsls	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4413      	add	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80037b8:	4b86      	ldr	r3, [pc, #536]	; (80039d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	0091      	lsls	r1, r2, #2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	430b      	orrs	r3, r1
 80037c6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037d2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	041a      	lsls	r2, r3, #16
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	4413      	add	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003800:	4b74      	ldr	r3, [pc, #464]	; (80039d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003802:	4013      	ands	r3, r2
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	0091      	lsls	r1, r2, #2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	430b      	orrs	r3, r1
 800380e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800381a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003822:	041a      	lsls	r2, r3, #16
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	4413      	add	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003848:	4b62      	ldr	r3, [pc, #392]	; (80039d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800384a:	4013      	ands	r3, r2
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	0091      	lsls	r1, r2, #2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	430b      	orrs	r3, r1
 8003856:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	4413      	add	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003874:	4b57      	ldr	r3, [pc, #348]	; (80039d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003876:	4013      	ands	r3, r2
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	0091      	lsls	r1, r2, #2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	430b      	orrs	r3, r1
 8003882:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800388e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	041a      	lsls	r2, r3, #16
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	4413      	add	r3, r2
 80038ac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	0091      	lsls	r1, r2, #2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	430b      	orrs	r3, r1
 80038c4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80038d0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	041a      	lsls	r2, r3, #16
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80038ec:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f4:	061a      	lsls	r2, r3, #24
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003904:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003906:	4413      	add	r3, r2
 8003908:	009a      	lsls	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	441a      	add	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	441a      	add	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	441a      	add	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	441a      	add	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800396a:	fb01 f303 	mul.w	r3, r1, r3
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	441a      	add	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	441a      	add	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	441a      	add	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	4a04      	ldr	r2, [pc, #16]	; (80039dc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d915      	bls.n	80039fc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80039d0:	e006      	b.n	80039e0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80039d2:	bf00      	nop
 80039d4:	ffff0003 	.word	0xffff0003
 80039d8:	10002b00 	.word	0x10002b00
 80039dc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039e6:	f043 0220 	orr.w	r2, r3, #32
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2203      	movs	r2, #3
 80039f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e010      	b.n	8003a1e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	e005      	b.n	8003a10 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3f3      	bcc.n	8003a04 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop

08003a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a3a:	4b89      	ldr	r3, [pc, #548]	; (8003c60 <HAL_GPIO_Init+0x234>)
 8003a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a3e:	e194      	b.n	8003d6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	2101      	movs	r1, #1
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 8186 	beq.w	8003d64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d00b      	beq.n	8003a78 <HAL_GPIO_Init+0x4c>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d007      	beq.n	8003a78 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a6c:	2b11      	cmp	r3, #17
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b12      	cmp	r3, #18
 8003a76:	d130      	bne.n	8003ada <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	2203      	movs	r2, #3
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aae:	2201      	movs	r2, #1
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0201 	and.w	r2, r3, #1
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0xee>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b12      	cmp	r3, #18
 8003b18:	d123      	bne.n	8003b62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	08da      	lsrs	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3208      	adds	r2, #8
 8003b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	220f      	movs	r2, #15
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	08da      	lsrs	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3208      	adds	r2, #8
 8003b5c:	69b9      	ldr	r1, [r7, #24]
 8003b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43db      	mvns	r3, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4013      	ands	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 0203 	and.w	r2, r3, #3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80e0 	beq.w	8003d64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba4:	4b2f      	ldr	r3, [pc, #188]	; (8003c64 <HAL_GPIO_Init+0x238>)
 8003ba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003baa:	4a2e      	ldr	r2, [pc, #184]	; (8003c64 <HAL_GPIO_Init+0x238>)
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003bb4:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <HAL_GPIO_Init+0x238>)
 8003bb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bc2:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <HAL_GPIO_Init+0x23c>)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	3302      	adds	r3, #2
 8003bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	220f      	movs	r2, #15
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <HAL_GPIO_Init+0x240>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d052      	beq.n	8003c94 <HAL_GPIO_Init+0x268>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1f      	ldr	r2, [pc, #124]	; (8003c70 <HAL_GPIO_Init+0x244>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d031      	beq.n	8003c5a <HAL_GPIO_Init+0x22e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <HAL_GPIO_Init+0x248>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d02b      	beq.n	8003c56 <HAL_GPIO_Init+0x22a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1d      	ldr	r2, [pc, #116]	; (8003c78 <HAL_GPIO_Init+0x24c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d025      	beq.n	8003c52 <HAL_GPIO_Init+0x226>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a1c      	ldr	r2, [pc, #112]	; (8003c7c <HAL_GPIO_Init+0x250>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01f      	beq.n	8003c4e <HAL_GPIO_Init+0x222>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1b      	ldr	r2, [pc, #108]	; (8003c80 <HAL_GPIO_Init+0x254>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d019      	beq.n	8003c4a <HAL_GPIO_Init+0x21e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1a      	ldr	r2, [pc, #104]	; (8003c84 <HAL_GPIO_Init+0x258>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <HAL_GPIO_Init+0x21a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_GPIO_Init+0x25c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00d      	beq.n	8003c42 <HAL_GPIO_Init+0x216>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <HAL_GPIO_Init+0x260>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d007      	beq.n	8003c3e <HAL_GPIO_Init+0x212>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <HAL_GPIO_Init+0x264>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d101      	bne.n	8003c3a <HAL_GPIO_Init+0x20e>
 8003c36:	2309      	movs	r3, #9
 8003c38:	e02d      	b.n	8003c96 <HAL_GPIO_Init+0x26a>
 8003c3a:	230a      	movs	r3, #10
 8003c3c:	e02b      	b.n	8003c96 <HAL_GPIO_Init+0x26a>
 8003c3e:	2308      	movs	r3, #8
 8003c40:	e029      	b.n	8003c96 <HAL_GPIO_Init+0x26a>
 8003c42:	2307      	movs	r3, #7
 8003c44:	e027      	b.n	8003c96 <HAL_GPIO_Init+0x26a>
 8003c46:	2306      	movs	r3, #6
 8003c48:	e025      	b.n	8003c96 <HAL_GPIO_Init+0x26a>
 8003c4a:	2305      	movs	r3, #5
 8003c4c:	e023      	b.n	8003c96 <HAL_GPIO_Init+0x26a>
 8003c4e:	2304      	movs	r3, #4
 8003c50:	e021      	b.n	8003c96 <HAL_GPIO_Init+0x26a>
 8003c52:	2303      	movs	r3, #3
 8003c54:	e01f      	b.n	8003c96 <HAL_GPIO_Init+0x26a>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e01d      	b.n	8003c96 <HAL_GPIO_Init+0x26a>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e01b      	b.n	8003c96 <HAL_GPIO_Init+0x26a>
 8003c5e:	bf00      	nop
 8003c60:	58000080 	.word	0x58000080
 8003c64:	58024400 	.word	0x58024400
 8003c68:	58000400 	.word	0x58000400
 8003c6c:	58020000 	.word	0x58020000
 8003c70:	58020400 	.word	0x58020400
 8003c74:	58020800 	.word	0x58020800
 8003c78:	58020c00 	.word	0x58020c00
 8003c7c:	58021000 	.word	0x58021000
 8003c80:	58021400 	.word	0x58021400
 8003c84:	58021800 	.word	0x58021800
 8003c88:	58021c00 	.word	0x58021c00
 8003c8c:	58022000 	.word	0x58022000
 8003c90:	58022400 	.word	0x58022400
 8003c94:	2300      	movs	r3, #0
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	f002 0203 	and.w	r2, r2, #3
 8003c9c:	0092      	lsls	r2, r2, #2
 8003c9e:	4093      	lsls	r3, r2
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ca6:	4938      	ldr	r1, [pc, #224]	; (8003d88 <HAL_GPIO_Init+0x35c>)
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	089b      	lsrs	r3, r3, #2
 8003cac:	3302      	adds	r3, #2
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	3301      	adds	r3, #1
 8003d68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f47f ae63 	bne.w	8003a40 <HAL_GPIO_Init+0x14>
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	3724      	adds	r7, #36	; 0x24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	58000400 	.word	0x58000400

08003d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	807b      	strh	r3, [r7, #2]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d9c:	787b      	ldrb	r3, [r7, #1]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003da8:	e003      	b.n	8003db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003daa:	887b      	ldrh	r3, [r7, #2]
 8003dac:	041a      	lsls	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	619a      	str	r2, [r3, #24]
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	401a      	ands	r2, r3
 8003dd2:	887b      	ldrh	r3, [r7, #2]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d104      	bne.n	8003de2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dd8:	887b      	ldrh	r3, [r7, #2]
 8003dda:	041a      	lsls	r2, r3, #16
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003de0:	e002      	b.n	8003de8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003de2:	887a      	ldrh	r2, [r7, #2]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	619a      	str	r2, [r3, #24]
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df6:	b08f      	sub	sp, #60	; 0x3c
 8003df8:	af0a      	add	r7, sp, #40	; 0x28
 8003dfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e116      	b.n	8004034 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d106      	bne.n	8003e26 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f00e fafd 	bl	8012420 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f007 fd04 	bl	800b852 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	687e      	ldr	r6, [r7, #4]
 8003e52:	466d      	mov	r5, sp
 8003e54:	f106 0410 	add.w	r4, r6, #16
 8003e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e64:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e68:	1d33      	adds	r3, r6, #4
 8003e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e6c:	6838      	ldr	r0, [r7, #0]
 8003e6e:	f007 fbdb 	bl	800b628 <USB_CoreInit>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0d7      	b.n	8004034 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f007 fcf2 	bl	800b874 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]
 8003e94:	e04a      	b.n	8003f2c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e96:	7bfa      	ldrb	r2, [r7, #15]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	333d      	adds	r3, #61	; 0x3d
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	333c      	adds	r3, #60	; 0x3c
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	b298      	uxth	r0, r3
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	3342      	adds	r3, #66	; 0x42
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ed6:	7bfa      	ldrb	r2, [r7, #15]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	333f      	adds	r3, #63	; 0x3f
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003eea:	7bfa      	ldrb	r2, [r7, #15]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	3344      	adds	r3, #68	; 0x44
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003efe:	7bfa      	ldrb	r2, [r7, #15]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	3348      	adds	r3, #72	; 0x48
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f12:	7bfa      	ldrb	r2, [r7, #15]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	3350      	adds	r3, #80	; 0x50
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d3af      	bcc.n	8003e96 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f36:	2300      	movs	r3, #0
 8003f38:	73fb      	strb	r3, [r7, #15]
 8003f3a:	e044      	b.n	8003fc6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f3c:	7bfa      	ldrb	r2, [r7, #15]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f52:	7bfa      	ldrb	r2, [r7, #15]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f7e:	7bfa      	ldrb	r2, [r7, #15]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f94:	7bfa      	ldrb	r2, [r7, #15]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003faa:	7bfa      	ldrb	r2, [r7, #15]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	73fb      	strb	r3, [r7, #15]
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d3b5      	bcc.n	8003f3c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	687e      	ldr	r6, [r7, #4]
 8003fd8:	466d      	mov	r5, sp
 8003fda:	f106 0410 	add.w	r4, r6, #16
 8003fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fea:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fee:	1d33      	adds	r3, r6, #4
 8003ff0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ff2:	6838      	ldr	r0, [r7, #0]
 8003ff4:	f007 fc68 	bl	800b8c8 <USB_DevInit>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e014      	b.n	8004034 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	2b01      	cmp	r3, #1
 8004020:	d102      	bne.n	8004028 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f001 f8be 	bl	80051a4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f008 fca7 	bl	800c980 <USB_DevDisconnect>

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800403c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_PCD_Start+0x1c>
 8004054:	2302      	movs	r3, #2
 8004056:	e020      	b.n	800409a <HAL_PCD_Start+0x5e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	2b01      	cmp	r3, #1
 8004066:	d109      	bne.n	800407c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800406c:	2b01      	cmp	r3, #1
 800406e:	d005      	beq.n	800407c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f008 fc65 	bl	800c950 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f007 fbd0 	bl	800b830 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80040a2:	b590      	push	{r4, r7, lr}
 80040a4:	b08d      	sub	sp, #52	; 0x34
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f008 fd0c 	bl	800cad6 <USB_GetMode>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f040 83ca 	bne.w	800485a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f008 fc70 	bl	800c9b0 <USB_ReadInterrupts>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 83c0 	beq.w	8004858 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f008 fc67 	bl	800c9b0 <USB_ReadInterrupts>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d107      	bne.n	80040fc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f002 0202 	and.w	r2, r2, #2
 80040fa:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f008 fc55 	bl	800c9b0 <USB_ReadInterrupts>
 8004106:	4603      	mov	r3, r0
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b10      	cmp	r3, #16
 800410e:	d161      	bne.n	80041d4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0210 	bic.w	r2, r2, #16
 800411e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f003 020f 	and.w	r2, r3, #15
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4413      	add	r3, r2
 800413c:	3304      	adds	r3, #4
 800413e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	0c5b      	lsrs	r3, r3, #17
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	2b02      	cmp	r3, #2
 800414a:	d124      	bne.n	8004196 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004152:	4013      	ands	r3, r2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d035      	beq.n	80041c4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004166:	b29b      	uxth	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	6a38      	ldr	r0, [r7, #32]
 800416c:	f008 facd 	bl	800c70a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800417c:	441a      	add	r2, r3
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800418e:	441a      	add	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	619a      	str	r2, [r3, #24]
 8004194:	e016      	b.n	80041c4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	0c5b      	lsrs	r3, r3, #17
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	2b06      	cmp	r3, #6
 80041a0:	d110      	bne.n	80041c4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041a8:	2208      	movs	r2, #8
 80041aa:	4619      	mov	r1, r3
 80041ac:	6a38      	ldr	r0, [r7, #32]
 80041ae:	f008 faac 	bl	800c70a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041be:	441a      	add	r2, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0210 	orr.w	r2, r2, #16
 80041d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f008 fbe9 	bl	800c9b0 <USB_ReadInterrupts>
 80041de:	4603      	mov	r3, r0
 80041e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041e8:	d16e      	bne.n	80042c8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f008 fbef 	bl	800c9d6 <USB_ReadDevAllOutEpInterrupt>
 80041f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80041fa:	e062      	b.n	80042c2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d057      	beq.n	80042b6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	4611      	mov	r1, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f008 fc14 	bl	800ca3e <USB_ReadDevOutEPInterrupt>
 8004216:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00c      	beq.n	800423c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422e:	461a      	mov	r2, r3
 8004230:	2301      	movs	r3, #1
 8004232:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fe0a 	bl	8004e50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	461a      	mov	r2, r3
 8004254:	2308      	movs	r3, #8
 8004256:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 ff04 	bl	8005068 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f003 0310 	and.w	r3, r3, #16
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004276:	461a      	mov	r2, r3
 8004278:	2310      	movs	r3, #16
 800427a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d008      	beq.n	8004298 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004292:	461a      	mov	r2, r3
 8004294:	2320      	movs	r3, #32
 8004296:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ae:	461a      	mov	r2, r3
 80042b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	3301      	adds	r3, #1
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d199      	bne.n	80041fc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f008 fb6f 	bl	800c9b0 <USB_ReadInterrupts>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042dc:	f040 80c0 	bne.w	8004460 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f008 fb90 	bl	800ca0a <USB_ReadDevAllInEpInterrupt>
 80042ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80042f0:	e0b2      	b.n	8004458 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80a7 	beq.w	800444c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f008 fbb6 	bl	800ca7a <USB_ReadDevInEPInterrupt>
 800430e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d057      	beq.n	80043ca <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	2201      	movs	r2, #1
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	43db      	mvns	r3, r3
 8004334:	69f9      	ldr	r1, [r7, #28]
 8004336:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800433a:	4013      	ands	r3, r2
 800433c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434a:	461a      	mov	r2, r3
 800434c:	2301      	movs	r3, #1
 800434e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d132      	bne.n	80043be <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435c:	4613      	mov	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	3348      	adds	r3, #72	; 0x48
 8004368:	6819      	ldr	r1, [r3, #0]
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436e:	4613      	mov	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4403      	add	r3, r0
 8004378:	3344      	adds	r3, #68	; 0x44
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4419      	add	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4403      	add	r3, r0
 800438c:	3348      	adds	r3, #72	; 0x48
 800438e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	2b00      	cmp	r3, #0
 8004394:	d113      	bne.n	80043be <HAL_PCD_IRQHandler+0x31c>
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	3350      	adds	r3, #80	; 0x50
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d108      	bne.n	80043be <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043b6:	461a      	mov	r2, r3
 80043b8:	2101      	movs	r1, #1
 80043ba:	f008 fbbf 	bl	800cb3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f00e f8aa 	bl	801251e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e0:	461a      	mov	r2, r3
 80043e2:	2308      	movs	r3, #8
 80043e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fc:	461a      	mov	r2, r3
 80043fe:	2310      	movs	r3, #16
 8004400:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004418:	461a      	mov	r2, r3
 800441a:	2340      	movs	r3, #64	; 0x40
 800441c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004434:	461a      	mov	r2, r3
 8004436:	2302      	movs	r3, #2
 8004438:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fc75 	bl	8004d36 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	3301      	adds	r3, #1
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	2b00      	cmp	r3, #0
 800445c:	f47f af49 	bne.w	80042f2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f008 faa3 	bl	800c9b0 <USB_ReadInterrupts>
 800446a:	4603      	mov	r3, r0
 800446c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004474:	d122      	bne.n	80044bc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004490:	2b01      	cmp	r3, #1
 8004492:	d108      	bne.n	80044a6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800449c:	2100      	movs	r1, #0
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fea4 	bl	80051ec <HAL_PCDEx_LPM_Callback>
 80044a4:	e002      	b.n	80044ac <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f00e f8b0 	bl	801260c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80044ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f008 fa75 	bl	800c9b0 <USB_ReadInterrupts>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d0:	d112      	bne.n	80044f8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d102      	bne.n	80044e8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f00e f86c 	bl	80125c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80044f6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f008 fa57 	bl	800c9b0 <USB_ReadInterrupts>
 8004502:	4603      	mov	r3, r0
 8004504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800450c:	d121      	bne.n	8004552 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800451c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d111      	bne.n	800454c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	089b      	lsrs	r3, r3, #2
 8004538:	f003 020f 	and.w	r2, r3, #15
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004542:	2101      	movs	r1, #1
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fe51 	bl	80051ec <HAL_PCDEx_LPM_Callback>
 800454a:	e002      	b.n	8004552 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f00e f837 	bl	80125c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f008 fa2a 	bl	800c9b0 <USB_ReadInterrupts>
 800455c:	4603      	mov	r3, r0
 800455e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004566:	f040 80c7 	bne.w	80046f8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2110      	movs	r1, #16
 8004584:	4618      	mov	r0, r3
 8004586:	f007 fafd 	bl	800bb84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800458a:	2300      	movs	r3, #0
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800458e:	e056      	b.n	800463e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459c:	461a      	mov	r2, r3
 800459e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045c2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045d4:	0151      	lsls	r1, r2, #5
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	440a      	add	r2, r1
 80045da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80045e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f0:	461a      	mov	r2, r3
 80045f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004616:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004628:	0151      	lsls	r1, r2, #5
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	440a      	add	r2, r1
 800462e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004636:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463a:	3301      	adds	r3, #1
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004644:	429a      	cmp	r2, r3
 8004646:	d3a3      	bcc.n	8004590 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004656:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800465a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	2b00      	cmp	r3, #0
 8004662:	d016      	beq.n	8004692 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004674:	f043 030b 	orr.w	r3, r3, #11
 8004678:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800468a:	f043 030b 	orr.w	r3, r3, #11
 800468e:	6453      	str	r3, [r2, #68]	; 0x44
 8004690:	e015      	b.n	80046be <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004698:	695a      	ldr	r2, [r3, #20]
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a0:	4619      	mov	r1, r3
 80046a2:	f242 032b 	movw	r3, #8235	; 0x202b
 80046a6:	4313      	orrs	r3, r2
 80046a8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046b8:	f043 030b 	orr.w	r3, r3, #11
 80046bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046e2:	461a      	mov	r2, r3
 80046e4:	f008 fa2a 	bl	800cb3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80046f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f008 f957 	bl	800c9b0 <USB_ReadInterrupts>
 8004702:	4603      	mov	r3, r0
 8004704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470c:	d124      	bne.n	8004758 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f008 f9ee 	bl	800caf4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f007 fa92 	bl	800bc46 <USB_GetDevSpeed>
 8004722:	4603      	mov	r3, r0
 8004724:	461a      	mov	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681c      	ldr	r4, [r3, #0]
 800472e:	f001 fcfb 	bl	8006128 <HAL_RCC_GetHCLKFreq>
 8004732:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004738:	b2db      	uxtb	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	4620      	mov	r0, r4
 800473e:	f006 ffd5 	bl	800b6ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f00d ff13 	bl	801256e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004756:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f008 f927 	bl	800c9b0 <USB_ReadInterrupts>
 8004762:	4603      	mov	r3, r0
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b08      	cmp	r3, #8
 800476a:	d10a      	bne.n	8004782 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f00d fef0 	bl	8012552 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695a      	ldr	r2, [r3, #20]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f002 0208 	and.w	r2, r2, #8
 8004780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f008 f912 	bl	800c9b0 <USB_ReadInterrupts>
 800478c:	4603      	mov	r3, r0
 800478e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004796:	d10f      	bne.n	80047b8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	4619      	mov	r1, r3
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f00d ff52 	bl	801264c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695a      	ldr	r2, [r3, #20]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80047b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f008 f8f7 	bl	800c9b0 <USB_ReadInterrupts>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047cc:	d10f      	bne.n	80047ee <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f00d ff25 	bl	8012628 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695a      	ldr	r2, [r3, #20]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80047ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f008 f8dc 	bl	800c9b0 <USB_ReadInterrupts>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004802:	d10a      	bne.n	800481a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f00d ff33 	bl	8012670 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f008 f8c6 	bl	800c9b0 <USB_ReadInterrupts>
 8004824:	4603      	mov	r3, r0
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b04      	cmp	r3, #4
 800482c:	d115      	bne.n	800485a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f00d ff23 	bl	801268c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	e000      	b.n	800485a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004858:	bf00      	nop
    }
  }
}
 800485a:	3734      	adds	r7, #52	; 0x34
 800485c:	46bd      	mov	sp, r7
 800485e:	bd90      	pop	{r4, r7, pc}

08004860 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_PCD_SetAddress+0x1a>
 8004876:	2302      	movs	r3, #2
 8004878:	e013      	b.n	80048a2 <HAL_PCD_SetAddress+0x42>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	78fa      	ldrb	r2, [r7, #3]
 8004886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	78fa      	ldrb	r2, [r7, #3]
 8004890:	4611      	mov	r1, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f008 f836 	bl	800c904 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	4608      	mov	r0, r1
 80048b4:	4611      	mov	r1, r2
 80048b6:	461a      	mov	r2, r3
 80048b8:	4603      	mov	r3, r0
 80048ba:	70fb      	strb	r3, [r7, #3]
 80048bc:	460b      	mov	r3, r1
 80048be:	803b      	strh	r3, [r7, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	da0f      	bge.n	80048f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	f003 020f 	and.w	r2, r3, #15
 80048d6:	4613      	mov	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	3338      	adds	r3, #56	; 0x38
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4413      	add	r3, r2
 80048e4:	3304      	adds	r3, #4
 80048e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	705a      	strb	r2, [r3, #1]
 80048ee:	e00f      	b.n	8004910 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	f003 020f 	and.w	r2, r3, #15
 80048f6:	4613      	mov	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	4413      	add	r3, r2
 8004906:	3304      	adds	r3, #4
 8004908:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	b2da      	uxtb	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800491c:	883a      	ldrh	r2, [r7, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	78ba      	ldrb	r2, [r7, #2]
 8004926:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d004      	beq.n	800493a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800493a:	78bb      	ldrb	r3, [r7, #2]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d102      	bne.n	8004946 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_PCD_EP_Open+0xaa>
 8004950:	2302      	movs	r3, #2
 8004952:	e00e      	b.n	8004972 <HAL_PCD_EP_Open+0xc8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68f9      	ldr	r1, [r7, #12]
 8004962:	4618      	mov	r0, r3
 8004964:	f007 f994 	bl	800bc90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004970:	7afb      	ldrb	r3, [r7, #11]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800498a:	2b00      	cmp	r3, #0
 800498c:	da0f      	bge.n	80049ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	f003 020f 	and.w	r2, r3, #15
 8004994:	4613      	mov	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	3338      	adds	r3, #56	; 0x38
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	4413      	add	r3, r2
 80049a2:	3304      	adds	r3, #4
 80049a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	705a      	strb	r2, [r3, #1]
 80049ac:	e00f      	b.n	80049ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ae:	78fb      	ldrb	r3, [r7, #3]
 80049b0:	f003 020f 	and.w	r2, r3, #15
 80049b4:	4613      	mov	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	4413      	add	r3, r2
 80049c4:	3304      	adds	r3, #4
 80049c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	f003 030f 	and.w	r3, r3, #15
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_PCD_EP_Close+0x6e>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e00e      	b.n	8004a06 <HAL_PCD_EP_Close+0x8c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68f9      	ldr	r1, [r7, #12]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f007 f9d2 	bl	800bda0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b086      	sub	sp, #24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
 8004a20:	f003 020f 	and.w	r2, r3, #15
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	3304      	adds	r3, #4
 8004a36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2200      	movs	r2, #0
 8004a48:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a50:	7afb      	ldrb	r3, [r7, #11]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d102      	bne.n	8004a6a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a6a:	7afb      	ldrb	r3, [r7, #11]
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d109      	bne.n	8004a88 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6979      	ldr	r1, [r7, #20]
 8004a82:	f007 fcb5 	bl	800c3f0 <USB_EP0StartXfer>
 8004a86:	e008      	b.n	8004a9a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	6979      	ldr	r1, [r7, #20]
 8004a96:	f007 fa5f 	bl	800bf58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	f003 020f 	and.w	r2, r3, #15
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	607a      	str	r2, [r7, #4]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ae4:	7afb      	ldrb	r3, [r7, #11]
 8004ae6:	f003 020f 	and.w	r2, r3, #15
 8004aea:	4613      	mov	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	1a9b      	subs	r3, r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	3338      	adds	r3, #56	; 0x38
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	3304      	adds	r3, #4
 8004afa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2201      	movs	r2, #1
 8004b12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b14:	7afb      	ldrb	r3, [r7, #11]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d102      	bne.n	8004b2e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b2e:	7afb      	ldrb	r3, [r7, #11]
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6818      	ldr	r0, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	6979      	ldr	r1, [r7, #20]
 8004b46:	f007 fc53 	bl	800c3f0 <USB_EP0StartXfer>
 8004b4a:	e008      	b.n	8004b5e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	6979      	ldr	r1, [r7, #20]
 8004b5a:	f007 f9fd 	bl	800bf58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	f003 020f 	and.w	r2, r3, #15
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d901      	bls.n	8004b86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e050      	b.n	8004c28 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da0f      	bge.n	8004bae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	f003 020f 	and.w	r2, r3, #15
 8004b94:	4613      	mov	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	3338      	adds	r3, #56	; 0x38
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	705a      	strb	r2, [r3, #1]
 8004bac:	e00d      	b.n	8004bca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_PCD_EP_SetStall+0x82>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e01e      	b.n	8004c28 <HAL_PCD_EP_SetStall+0xc0>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f007 fdaf 	bl	800c75c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	b2d9      	uxtb	r1, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f007 ff8f 	bl	800cb3c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	f003 020f 	and.w	r2, r3, #15
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d901      	bls.n	8004c4e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e042      	b.n	8004cd4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	da0f      	bge.n	8004c76 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c56:	78fb      	ldrb	r3, [r7, #3]
 8004c58:	f003 020f 	and.w	r2, r3, #15
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	1a9b      	subs	r3, r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	3338      	adds	r3, #56	; 0x38
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	4413      	add	r3, r2
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	705a      	strb	r2, [r3, #1]
 8004c74:	e00f      	b.n	8004c96 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c76:	78fb      	ldrb	r3, [r7, #3]
 8004c78:	f003 020f 	and.w	r2, r3, #15
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_PCD_EP_ClrStall+0x86>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e00e      	b.n	8004cd4 <HAL_PCD_EP_ClrStall+0xa4>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f007 fdb7 	bl	800c838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_PCD_EP_Flush+0x1a>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	e01b      	b.n	8004d2e <HAL_PCD_EP_Flush+0x52>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004cfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	da09      	bge.n	8004d1a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f006 ff36 	bl	800bb84 <USB_FlushTxFifo>
 8004d18:	e004      	b.n	8004d24 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f006 ff56 	bl	800bbd0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b08a      	sub	sp, #40	; 0x28
 8004d3a:	af02      	add	r7, sp, #8
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	3338      	adds	r3, #56	; 0x38
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4413      	add	r3, r2
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d901      	bls.n	8004d6e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e06c      	b.n	8004e48 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	695a      	ldr	r2, [r3, #20]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d902      	bls.n	8004d8a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3303      	adds	r3, #3
 8004d8e:	089b      	lsrs	r3, r3, #2
 8004d90:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d92:	e02b      	b.n	8004dec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	695a      	ldr	r2, [r3, #20]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d902      	bls.n	8004db0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	3303      	adds	r3, #3
 8004db4:	089b      	lsrs	r3, r3, #2
 8004db6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68d9      	ldr	r1, [r3, #12]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	4603      	mov	r3, r0
 8004dce:	6978      	ldr	r0, [r7, #20]
 8004dd0:	f007 fc66 	bl	800c6a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	441a      	add	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	699a      	ldr	r2, [r3, #24]
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	441a      	add	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d809      	bhi.n	8004e16 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d203      	bcs.n	8004e16 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1be      	bne.n	8004d94 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d811      	bhi.n	8004e46 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	2201      	movs	r2, #1
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	6939      	ldr	r1, [r7, #16]
 8004e3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e42:	4013      	ands	r3, r2
 8004e44:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3720      	adds	r7, #32
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	333c      	adds	r3, #60	; 0x3c
 8004e68:	3304      	adds	r3, #4
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	f040 80a0 	bne.w	8004fc8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d015      	beq.n	8004ebe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4a72      	ldr	r2, [pc, #456]	; (8005060 <PCD_EP_OutXfrComplete_int+0x210>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	f240 80dd 	bls.w	8005056 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 80d7 	beq.w	8005056 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eba:	6093      	str	r3, [r2, #8]
 8004ebc:	e0cb      	b.n	8005056 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d009      	beq.n	8004edc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2320      	movs	r3, #32
 8004ed8:	6093      	str	r3, [r2, #8]
 8004eda:	e0bc      	b.n	8005056 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 80b7 	bne.w	8005056 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a5d      	ldr	r2, [pc, #372]	; (8005060 <PCD_EP_OutXfrComplete_int+0x210>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d90f      	bls.n	8004f10 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f06:	461a      	mov	r2, r3
 8004f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f0c:	6093      	str	r3, [r2, #8]
 8004f0e:	e0a2      	b.n	8005056 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	1a9b      	subs	r3, r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004f22:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	0159      	lsls	r1, r3, #5
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	440b      	add	r3, r1
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004f36:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4403      	add	r3, r0
 8004f46:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004f4a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	4613      	mov	r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f5e:	6819      	ldr	r1, [r3, #0]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	4613      	mov	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4403      	add	r3, r0
 8004f6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4419      	add	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4403      	add	r3, r0
 8004f84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f88:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d114      	bne.n	8004fba <PCD_EP_OutXfrComplete_int+0x16a>
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d108      	bne.n	8004fba <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	f007 fdc1 	bl	800cb3c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f00d fa91 	bl	80124e8 <HAL_PCD_DataOutStageCallback>
 8004fc6:	e046      	b.n	8005056 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4a26      	ldr	r2, [pc, #152]	; (8005064 <PCD_EP_OutXfrComplete_int+0x214>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d124      	bne.n	800501a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fec:	6093      	str	r3, [r2, #8]
 8004fee:	e032      	b.n	8005056 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005006:	461a      	mov	r2, r3
 8005008:	2320      	movs	r3, #32
 800500a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f00d fa68 	bl	80124e8 <HAL_PCD_DataOutStageCallback>
 8005018:	e01d      	b.n	8005056 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d114      	bne.n	800504a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d108      	bne.n	800504a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005042:	461a      	mov	r2, r3
 8005044:	2100      	movs	r1, #0
 8005046:	f007 fd79 	bl	800cb3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f00d fa49 	bl	80124e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	4f54300a 	.word	0x4f54300a
 8005064:	4f54310a 	.word	0x4f54310a

08005068 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	333c      	adds	r3, #60	; 0x3c
 8005080:	3304      	adds	r3, #4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d90e      	bls.n	80050bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d009      	beq.n	80050bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b4:	461a      	mov	r2, r3
 80050b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f00d fa01 	bl	80124c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4a0a      	ldr	r2, [pc, #40]	; (80050f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d90c      	bls.n	80050e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d108      	bne.n	80050e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050dc:	461a      	mov	r2, r3
 80050de:	2101      	movs	r1, #1
 80050e0:	f007 fd2c 	bl	800cb3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	4f54300a 	.word	0x4f54300a

080050f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	70fb      	strb	r3, [r7, #3]
 8005100:	4613      	mov	r3, r2
 8005102:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d107      	bne.n	8005122 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005112:	883b      	ldrh	r3, [r7, #0]
 8005114:	0419      	lsls	r1, r3, #16
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	430a      	orrs	r2, r1
 800511e:	629a      	str	r2, [r3, #40]	; 0x28
 8005120:	e028      	b.n	8005174 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	4413      	add	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005130:	2300      	movs	r3, #0
 8005132:	73fb      	strb	r3, [r7, #15]
 8005134:	e00d      	b.n	8005152 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	3340      	adds	r3, #64	; 0x40
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	0c1b      	lsrs	r3, r3, #16
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	4413      	add	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	3301      	adds	r3, #1
 8005150:	73fb      	strb	r3, [r7, #15]
 8005152:	7bfa      	ldrb	r2, [r7, #15]
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	3b01      	subs	r3, #1
 8005158:	429a      	cmp	r2, r3
 800515a:	d3ec      	bcc.n	8005136 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800515c:	883b      	ldrh	r3, [r7, #0]
 800515e:	0418      	lsls	r0, r3, #16
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6819      	ldr	r1, [r3, #0]
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	3b01      	subs	r3, #1
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	4302      	orrs	r2, r0
 800516c:	3340      	adds	r3, #64	; 0x40
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	460b      	mov	r3, r1
 800518c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	887a      	ldrh	r2, [r7, #2]
 8005194:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	10000003 	.word	0x10000003

080051ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800520c:	4b19      	ldr	r3, [pc, #100]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b04      	cmp	r3, #4
 8005216:	d00a      	beq.n	800522e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005218:	4b16      	ldr	r3, [pc, #88]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	429a      	cmp	r2, r3
 8005224:	d001      	beq.n	800522a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e01f      	b.n	800526a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e01d      	b.n	800526a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800522e:	4b11      	ldr	r3, [pc, #68]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f023 0207 	bic.w	r2, r3, #7
 8005236:	490f      	ldr	r1, [pc, #60]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4313      	orrs	r3, r2
 800523c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800523e:	f7fc fa81 	bl	8001744 <HAL_GetTick>
 8005242:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005244:	e009      	b.n	800525a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005246:	f7fc fa7d 	bl	8001744 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005254:	d901      	bls.n	800525a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e007      	b.n	800526a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_PWREx_ConfigSupply+0x70>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005266:	d1ee      	bne.n	8005246 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	58024800 	.word	0x58024800

08005278 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4a04      	ldr	r2, [pc, #16]	; (8005294 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005286:	60d3      	str	r3, [r2, #12]
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	58024800 	.word	0x58024800

08005298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	; 0x30
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e3ff      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 8087 	beq.w	80053c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052b8:	4b99      	ldr	r3, [pc, #612]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052c2:	4b97      	ldr	r3, [pc, #604]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	2b10      	cmp	r3, #16
 80052cc:	d007      	beq.n	80052de <HAL_RCC_OscConfig+0x46>
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	2b18      	cmp	r3, #24
 80052d2:	d110      	bne.n	80052f6 <HAL_RCC_OscConfig+0x5e>
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d10b      	bne.n	80052f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052de:	4b90      	ldr	r3, [pc, #576]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d06c      	beq.n	80053c4 <HAL_RCC_OscConfig+0x12c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d168      	bne.n	80053c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e3d9      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fe:	d106      	bne.n	800530e <HAL_RCC_OscConfig+0x76>
 8005300:	4b87      	ldr	r3, [pc, #540]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a86      	ldr	r2, [pc, #536]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	e02e      	b.n	800536c <HAL_RCC_OscConfig+0xd4>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10c      	bne.n	8005330 <HAL_RCC_OscConfig+0x98>
 8005316:	4b82      	ldr	r3, [pc, #520]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a81      	ldr	r2, [pc, #516]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800531c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	4b7f      	ldr	r3, [pc, #508]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a7e      	ldr	r2, [pc, #504]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e01d      	b.n	800536c <HAL_RCC_OscConfig+0xd4>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005338:	d10c      	bne.n	8005354 <HAL_RCC_OscConfig+0xbc>
 800533a:	4b79      	ldr	r3, [pc, #484]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a78      	ldr	r2, [pc, #480]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	4b76      	ldr	r3, [pc, #472]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a75      	ldr	r2, [pc, #468]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800534c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	e00b      	b.n	800536c <HAL_RCC_OscConfig+0xd4>
 8005354:	4b72      	ldr	r3, [pc, #456]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a71      	ldr	r2, [pc, #452]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800535a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	4b6f      	ldr	r3, [pc, #444]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a6e      	ldr	r2, [pc, #440]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800536a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d013      	beq.n	800539c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fc f9e6 	bl	8001744 <HAL_GetTick>
 8005378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800537c:	f7fc f9e2 	bl	8001744 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b64      	cmp	r3, #100	; 0x64
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e38d      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800538e:	4b64      	ldr	r3, [pc, #400]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0f0      	beq.n	800537c <HAL_RCC_OscConfig+0xe4>
 800539a:	e014      	b.n	80053c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539c:	f7fc f9d2 	bl	8001744 <HAL_GetTick>
 80053a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a4:	f7fc f9ce 	bl	8001744 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	; 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e379      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053b6:	4b5a      	ldr	r3, [pc, #360]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x10c>
 80053c2:	e000      	b.n	80053c6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 80ae 	beq.w	8005530 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053d4:	4b52      	ldr	r3, [pc, #328]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053de:	4b50      	ldr	r3, [pc, #320]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <HAL_RCC_OscConfig+0x162>
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	2b18      	cmp	r3, #24
 80053ee:	d13a      	bne.n	8005466 <HAL_RCC_OscConfig+0x1ce>
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d135      	bne.n	8005466 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053fa:	4b49      	ldr	r3, [pc, #292]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_RCC_OscConfig+0x17a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e34b      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005412:	f7fc f9c5 	bl	80017a0 <HAL_GetREVID>
 8005416:	4602      	mov	r2, r0
 8005418:	f241 0303 	movw	r3, #4099	; 0x1003
 800541c:	429a      	cmp	r2, r3
 800541e:	d817      	bhi.n	8005450 <HAL_RCC_OscConfig+0x1b8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b40      	cmp	r3, #64	; 0x40
 8005426:	d108      	bne.n	800543a <HAL_RCC_OscConfig+0x1a2>
 8005428:	4b3d      	ldr	r3, [pc, #244]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005430:	4a3b      	ldr	r2, [pc, #236]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005436:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005438:	e07a      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800543a:	4b39      	ldr	r3, [pc, #228]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	031b      	lsls	r3, r3, #12
 8005448:	4935      	ldr	r1, [pc, #212]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800544a:	4313      	orrs	r3, r2
 800544c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800544e:	e06f      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005450:	4b33      	ldr	r3, [pc, #204]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	061b      	lsls	r3, r3, #24
 800545e:	4930      	ldr	r1, [pc, #192]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005460:	4313      	orrs	r3, r2
 8005462:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005464:	e064      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d045      	beq.n	80054fa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800546e:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 0219 	bic.w	r2, r3, #25
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	4929      	ldr	r1, [pc, #164]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fc f960 	bl	8001744 <HAL_GetTick>
 8005484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005488:	f7fc f95c 	bl	8001744 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e307      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800549a:	4b21      	ldr	r3, [pc, #132]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a6:	f7fc f97b 	bl	80017a0 <HAL_GetREVID>
 80054aa:	4602      	mov	r2, r0
 80054ac:	f241 0303 	movw	r3, #4099	; 0x1003
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d817      	bhi.n	80054e4 <HAL_RCC_OscConfig+0x24c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d108      	bne.n	80054ce <HAL_RCC_OscConfig+0x236>
 80054bc:	4b18      	ldr	r3, [pc, #96]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054c4:	4a16      	ldr	r2, [pc, #88]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ca:	6053      	str	r3, [r2, #4]
 80054cc:	e030      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
 80054ce:	4b14      	ldr	r3, [pc, #80]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	031b      	lsls	r3, r3, #12
 80054dc:	4910      	ldr	r1, [pc, #64]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	604b      	str	r3, [r1, #4]
 80054e2:	e025      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
 80054e4:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	061b      	lsls	r3, r3, #24
 80054f2:	490b      	ldr	r1, [pc, #44]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	604b      	str	r3, [r1, #4]
 80054f8:	e01a      	b.n	8005530 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a08      	ldr	r2, [pc, #32]	; (8005520 <HAL_RCC_OscConfig+0x288>)
 8005500:	f023 0301 	bic.w	r3, r3, #1
 8005504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005506:	f7fc f91d 	bl	8001744 <HAL_GetTick>
 800550a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800550c:	e00a      	b.n	8005524 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800550e:	f7fc f919 	bl	8001744 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d903      	bls.n	8005524 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e2c4      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
 8005520:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005524:	4ba4      	ldr	r3, [pc, #656]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1ee      	bne.n	800550e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80a9 	beq.w	8005690 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800553e:	4b9e      	ldr	r3, [pc, #632]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005546:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005548:	4b9b      	ldr	r3, [pc, #620]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d007      	beq.n	8005564 <HAL_RCC_OscConfig+0x2cc>
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b18      	cmp	r3, #24
 8005558:	d13a      	bne.n	80055d0 <HAL_RCC_OscConfig+0x338>
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	2b01      	cmp	r3, #1
 8005562:	d135      	bne.n	80055d0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005564:	4b94      	ldr	r3, [pc, #592]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <HAL_RCC_OscConfig+0x2e4>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	2b80      	cmp	r3, #128	; 0x80
 8005576:	d001      	beq.n	800557c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e296      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800557c:	f7fc f910 	bl	80017a0 <HAL_GetREVID>
 8005580:	4602      	mov	r2, r0
 8005582:	f241 0303 	movw	r3, #4099	; 0x1003
 8005586:	429a      	cmp	r2, r3
 8005588:	d817      	bhi.n	80055ba <HAL_RCC_OscConfig+0x322>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	2b20      	cmp	r3, #32
 8005590:	d108      	bne.n	80055a4 <HAL_RCC_OscConfig+0x30c>
 8005592:	4b89      	ldr	r3, [pc, #548]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800559a:	4a87      	ldr	r2, [pc, #540]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 800559c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055a0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055a2:	e075      	b.n	8005690 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055a4:	4b84      	ldr	r3, [pc, #528]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	069b      	lsls	r3, r3, #26
 80055b2:	4981      	ldr	r1, [pc, #516]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055b8:	e06a      	b.n	8005690 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055ba:	4b7f      	ldr	r3, [pc, #508]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	061b      	lsls	r3, r3, #24
 80055c8:	497b      	ldr	r1, [pc, #492]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055ce:	e05f      	b.n	8005690 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d042      	beq.n	800565e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055d8:	4b77      	ldr	r3, [pc, #476]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a76      	ldr	r2, [pc, #472]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80055de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e4:	f7fc f8ae 	bl	8001744 <HAL_GetTick>
 80055e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055ec:	f7fc f8aa 	bl	8001744 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e255      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055fe:	4b6e      	ldr	r3, [pc, #440]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800560a:	f7fc f8c9 	bl	80017a0 <HAL_GetREVID>
 800560e:	4602      	mov	r2, r0
 8005610:	f241 0303 	movw	r3, #4099	; 0x1003
 8005614:	429a      	cmp	r2, r3
 8005616:	d817      	bhi.n	8005648 <HAL_RCC_OscConfig+0x3b0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	2b20      	cmp	r3, #32
 800561e:	d108      	bne.n	8005632 <HAL_RCC_OscConfig+0x39a>
 8005620:	4b65      	ldr	r3, [pc, #404]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005628:	4a63      	ldr	r2, [pc, #396]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 800562a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800562e:	6053      	str	r3, [r2, #4]
 8005630:	e02e      	b.n	8005690 <HAL_RCC_OscConfig+0x3f8>
 8005632:	4b61      	ldr	r3, [pc, #388]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	069b      	lsls	r3, r3, #26
 8005640:	495d      	ldr	r1, [pc, #372]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005642:	4313      	orrs	r3, r2
 8005644:	604b      	str	r3, [r1, #4]
 8005646:	e023      	b.n	8005690 <HAL_RCC_OscConfig+0x3f8>
 8005648:	4b5b      	ldr	r3, [pc, #364]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	061b      	lsls	r3, r3, #24
 8005656:	4958      	ldr	r1, [pc, #352]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005658:	4313      	orrs	r3, r2
 800565a:	60cb      	str	r3, [r1, #12]
 800565c:	e018      	b.n	8005690 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800565e:	4b56      	ldr	r3, [pc, #344]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a55      	ldr	r2, [pc, #340]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fc f86b 	bl	8001744 <HAL_GetTick>
 800566e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005672:	f7fc f867 	bl	8001744 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e212      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005684:	4b4c      	ldr	r3, [pc, #304]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f0      	bne.n	8005672 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d036      	beq.n	800570a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d019      	beq.n	80056d8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056a4:	4b44      	ldr	r3, [pc, #272]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80056a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a8:	4a43      	ldr	r2, [pc, #268]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b0:	f7fc f848 	bl	8001744 <HAL_GetTick>
 80056b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056b8:	f7fc f844 	bl	8001744 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e1ef      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056ca:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80056cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCC_OscConfig+0x420>
 80056d6:	e018      	b.n	800570a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056d8:	4b37      	ldr	r3, [pc, #220]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80056da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056dc:	4a36      	ldr	r2, [pc, #216]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e4:	f7fc f82e 	bl	8001744 <HAL_GetTick>
 80056e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ec:	f7fc f82a 	bl	8001744 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e1d5      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056fe:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f0      	bne.n	80056ec <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d036      	beq.n	8005784 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d019      	beq.n	8005752 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800571e:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a25      	ldr	r2, [pc, #148]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005728:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800572a:	f7fc f80b 	bl	8001744 <HAL_GetTick>
 800572e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005732:	f7fc f807 	bl	8001744 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e1b2      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005744:	4b1c      	ldr	r3, [pc, #112]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCC_OscConfig+0x49a>
 8005750:	e018      	b.n	8005784 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005752:	4b19      	ldr	r3, [pc, #100]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 8005758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800575c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800575e:	f7fb fff1 	bl	8001744 <HAL_GetTick>
 8005762:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005766:	f7fb ffed 	bl	8001744 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e198      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005778:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <HAL_RCC_OscConfig+0x520>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f0      	bne.n	8005766 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8085 	beq.w	800589c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005792:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <HAL_RCC_OscConfig+0x524>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a09      	ldr	r2, [pc, #36]	; (80057bc <HAL_RCC_OscConfig+0x524>)
 8005798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800579e:	f7fb ffd1 	bl	8001744 <HAL_GetTick>
 80057a2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057a4:	e00c      	b.n	80057c0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057a6:	f7fb ffcd 	bl	8001744 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b64      	cmp	r3, #100	; 0x64
 80057b2:	d905      	bls.n	80057c0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e178      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
 80057b8:	58024400 	.word	0x58024400
 80057bc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057c0:	4b96      	ldr	r3, [pc, #600]	; (8005a1c <HAL_RCC_OscConfig+0x784>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0ec      	beq.n	80057a6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d106      	bne.n	80057e2 <HAL_RCC_OscConfig+0x54a>
 80057d4:	4b92      	ldr	r3, [pc, #584]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	4a91      	ldr	r2, [pc, #580]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80057da:	f043 0301 	orr.w	r3, r3, #1
 80057de:	6713      	str	r3, [r2, #112]	; 0x70
 80057e0:	e02d      	b.n	800583e <HAL_RCC_OscConfig+0x5a6>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10c      	bne.n	8005804 <HAL_RCC_OscConfig+0x56c>
 80057ea:	4b8d      	ldr	r3, [pc, #564]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	4a8c      	ldr	r2, [pc, #560]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	6713      	str	r3, [r2, #112]	; 0x70
 80057f6:	4b8a      	ldr	r3, [pc, #552]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	4a89      	ldr	r2, [pc, #548]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80057fc:	f023 0304 	bic.w	r3, r3, #4
 8005800:	6713      	str	r3, [r2, #112]	; 0x70
 8005802:	e01c      	b.n	800583e <HAL_RCC_OscConfig+0x5a6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b05      	cmp	r3, #5
 800580a:	d10c      	bne.n	8005826 <HAL_RCC_OscConfig+0x58e>
 800580c:	4b84      	ldr	r3, [pc, #528]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	4a83      	ldr	r2, [pc, #524]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005812:	f043 0304 	orr.w	r3, r3, #4
 8005816:	6713      	str	r3, [r2, #112]	; 0x70
 8005818:	4b81      	ldr	r3, [pc, #516]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	4a80      	ldr	r2, [pc, #512]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	6713      	str	r3, [r2, #112]	; 0x70
 8005824:	e00b      	b.n	800583e <HAL_RCC_OscConfig+0x5a6>
 8005826:	4b7e      	ldr	r3, [pc, #504]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	4a7d      	ldr	r2, [pc, #500]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	6713      	str	r3, [r2, #112]	; 0x70
 8005832:	4b7b      	ldr	r3, [pc, #492]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	4a7a      	ldr	r2, [pc, #488]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005838:	f023 0304 	bic.w	r3, r3, #4
 800583c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d015      	beq.n	8005872 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005846:	f7fb ff7d 	bl	8001744 <HAL_GetTick>
 800584a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800584c:	e00a      	b.n	8005864 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800584e:	f7fb ff79 	bl	8001744 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f241 3288 	movw	r2, #5000	; 0x1388
 800585c:	4293      	cmp	r3, r2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e122      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005864:	4b6e      	ldr	r3, [pc, #440]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0ee      	beq.n	800584e <HAL_RCC_OscConfig+0x5b6>
 8005870:	e014      	b.n	800589c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005872:	f7fb ff67 	bl	8001744 <HAL_GetTick>
 8005876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005878:	e00a      	b.n	8005890 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800587a:	f7fb ff63 	bl	8001744 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	f241 3288 	movw	r2, #5000	; 0x1388
 8005888:	4293      	cmp	r3, r2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e10c      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005890:	4b63      	ldr	r3, [pc, #396]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1ee      	bne.n	800587a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8101 	beq.w	8005aa8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058a6:	4b5e      	ldr	r3, [pc, #376]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058ae:	2b18      	cmp	r3, #24
 80058b0:	f000 80bc 	beq.w	8005a2c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	f040 8095 	bne.w	80059e8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058be:	4b58      	ldr	r3, [pc, #352]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a57      	ldr	r2, [pc, #348]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80058c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ca:	f7fb ff3b 	bl	8001744 <HAL_GetTick>
 80058ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d2:	f7fb ff37 	bl	8001744 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e0e2      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058e4:	4b4e      	ldr	r3, [pc, #312]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1f0      	bne.n	80058d2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058f0:	4b4b      	ldr	r3, [pc, #300]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80058f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058f4:	4b4b      	ldr	r3, [pc, #300]	; (8005a24 <HAL_RCC_OscConfig+0x78c>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005900:	0112      	lsls	r2, r2, #4
 8005902:	430a      	orrs	r2, r1
 8005904:	4946      	ldr	r1, [pc, #280]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005906:	4313      	orrs	r3, r2
 8005908:	628b      	str	r3, [r1, #40]	; 0x28
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	3b01      	subs	r3, #1
 8005910:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005918:	3b01      	subs	r3, #1
 800591a:	025b      	lsls	r3, r3, #9
 800591c:	b29b      	uxth	r3, r3
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	3b01      	subs	r3, #1
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	3b01      	subs	r3, #1
 8005934:	061b      	lsls	r3, r3, #24
 8005936:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800593a:	4939      	ldr	r1, [pc, #228]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800593c:	4313      	orrs	r3, r2
 800593e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005940:	4b37      	ldr	r3, [pc, #220]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	4a36      	ldr	r2, [pc, #216]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005946:	f023 0301 	bic.w	r3, r3, #1
 800594a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800594c:	4b34      	ldr	r3, [pc, #208]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800594e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005950:	4b35      	ldr	r3, [pc, #212]	; (8005a28 <HAL_RCC_OscConfig+0x790>)
 8005952:	4013      	ands	r3, r2
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005958:	00d2      	lsls	r2, r2, #3
 800595a:	4931      	ldr	r1, [pc, #196]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800595c:	4313      	orrs	r3, r2
 800595e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005960:	4b2f      	ldr	r3, [pc, #188]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	f023 020c 	bic.w	r2, r3, #12
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	492c      	ldr	r1, [pc, #176]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800596e:	4313      	orrs	r3, r2
 8005970:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005972:	4b2b      	ldr	r3, [pc, #172]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	f023 0202 	bic.w	r2, r3, #2
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597e:	4928      	ldr	r1, [pc, #160]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005980:	4313      	orrs	r3, r2
 8005982:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005984:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	4a25      	ldr	r2, [pc, #148]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800598a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005990:	4b23      	ldr	r3, [pc, #140]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800599a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800599c:	4b20      	ldr	r3, [pc, #128]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059a8:	4b1d      	ldr	r3, [pc, #116]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	4a1c      	ldr	r2, [pc, #112]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059b4:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a19      	ldr	r2, [pc, #100]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fb fec0 	bl	8001744 <HAL_GetTick>
 80059c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fb febc 	bl	8001744 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e067      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059da:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0x730>
 80059e6:	e05f      	b.n	8005aa8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e8:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a0c      	ldr	r2, [pc, #48]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 80059ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f4:	f7fb fea6 	bl	8001744 <HAL_GetTick>
 80059f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059fc:	f7fb fea2 	bl	8001744 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e04d      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a0e:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <HAL_RCC_OscConfig+0x788>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0x764>
 8005a1a:	e045      	b.n	8005aa8 <HAL_RCC_OscConfig+0x810>
 8005a1c:	58024800 	.word	0x58024800
 8005a20:	58024400 	.word	0x58024400
 8005a24:	fffffc0c 	.word	0xfffffc0c
 8005a28:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a2c:	4b21      	ldr	r3, [pc, #132]	; (8005ab4 <HAL_RCC_OscConfig+0x81c>)
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a32:	4b20      	ldr	r3, [pc, #128]	; (8005ab4 <HAL_RCC_OscConfig+0x81c>)
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d031      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f003 0203 	and.w	r2, r3, #3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d12a      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d122      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d11a      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	0a5b      	lsrs	r3, r3, #9
 8005a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d111      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	0c1b      	lsrs	r3, r3, #16
 8005a84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d108      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	0e1b      	lsrs	r3, r3, #24
 8005a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d001      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3730      	adds	r7, #48	; 0x30
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	58024400 	.word	0x58024400

08005ab8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e19c      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005acc:	4b8a      	ldr	r3, [pc, #552]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d910      	bls.n	8005afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ada:	4b87      	ldr	r3, [pc, #540]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f023 020f 	bic.w	r2, r3, #15
 8005ae2:	4985      	ldr	r1, [pc, #532]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aea:	4b83      	ldr	r3, [pc, #524]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d001      	beq.n	8005afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e184      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d010      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	4b7b      	ldr	r3, [pc, #492]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d908      	bls.n	8005b2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b18:	4b78      	ldr	r3, [pc, #480]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	4975      	ldr	r1, [pc, #468]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d010      	beq.n	8005b58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695a      	ldr	r2, [r3, #20]
 8005b3a:	4b70      	ldr	r3, [pc, #448]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d908      	bls.n	8005b58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b46:	4b6d      	ldr	r3, [pc, #436]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	496a      	ldr	r1, [pc, #424]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d010      	beq.n	8005b86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699a      	ldr	r2, [r3, #24]
 8005b68:	4b64      	ldr	r3, [pc, #400]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d908      	bls.n	8005b86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b74:	4b61      	ldr	r3, [pc, #388]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	495e      	ldr	r1, [pc, #376]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d010      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69da      	ldr	r2, [r3, #28]
 8005b96:	4b59      	ldr	r3, [pc, #356]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d908      	bls.n	8005bb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ba2:	4b56      	ldr	r3, [pc, #344]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	4953      	ldr	r1, [pc, #332]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d010      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	4b4d      	ldr	r3, [pc, #308]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d908      	bls.n	8005be2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bd0:	4b4a      	ldr	r3, [pc, #296]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f023 020f 	bic.w	r2, r3, #15
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4947      	ldr	r1, [pc, #284]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d055      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bee:	4b43      	ldr	r3, [pc, #268]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	4940      	ldr	r1, [pc, #256]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d107      	bne.n	8005c18 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c08:	4b3c      	ldr	r3, [pc, #240]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d121      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0f6      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d107      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c20:	4b36      	ldr	r3, [pc, #216]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d115      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0ea      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d107      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c38:	4b30      	ldr	r3, [pc, #192]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d109      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0de      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c48:	4b2c      	ldr	r3, [pc, #176]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0d6      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c58:	4b28      	ldr	r3, [pc, #160]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f023 0207 	bic.w	r2, r3, #7
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4925      	ldr	r1, [pc, #148]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6a:	f7fb fd6b 	bl	8001744 <HAL_GetTick>
 8005c6e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c70:	e00a      	b.n	8005c88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c72:	f7fb fd67 	bl	8001744 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e0be      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c88:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d1eb      	bne.n	8005c72 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d010      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	4b14      	ldr	r3, [pc, #80]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d208      	bcs.n	8005cc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb6:	4b11      	ldr	r3, [pc, #68]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f023 020f 	bic.w	r2, r3, #15
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	490e      	ldr	r1, [pc, #56]	; (8005cfc <HAL_RCC_ClockConfig+0x244>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d214      	bcs.n	8005d00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd6:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f023 020f 	bic.w	r2, r3, #15
 8005cde:	4906      	ldr	r1, [pc, #24]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce6:	4b04      	ldr	r3, [pc, #16]	; (8005cf8 <HAL_RCC_ClockConfig+0x240>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d005      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e086      	b.n	8005e06 <HAL_RCC_ClockConfig+0x34e>
 8005cf8:	52002000 	.word	0x52002000
 8005cfc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d010      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	4b3f      	ldr	r3, [pc, #252]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d208      	bcs.n	8005d2e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d1c:	4b3c      	ldr	r3, [pc, #240]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	4939      	ldr	r1, [pc, #228]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d010      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695a      	ldr	r2, [r3, #20]
 8005d3e:	4b34      	ldr	r3, [pc, #208]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d208      	bcs.n	8005d5c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d4a:	4b31      	ldr	r3, [pc, #196]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	492e      	ldr	r1, [pc, #184]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d010      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	4b28      	ldr	r3, [pc, #160]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d208      	bcs.n	8005d8a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d78:	4b25      	ldr	r3, [pc, #148]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	4922      	ldr	r1, [pc, #136]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d010      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69da      	ldr	r2, [r3, #28]
 8005d9a:	4b1d      	ldr	r3, [pc, #116]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d208      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005da6:	4b1a      	ldr	r3, [pc, #104]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	4917      	ldr	r1, [pc, #92]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005db8:	f000 f844 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8005dbc:	4601      	mov	r1, r0
 8005dbe:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	0a1b      	lsrs	r3, r3, #8
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	4a12      	ldr	r2, [pc, #72]	; (8005e14 <HAL_RCC_ClockConfig+0x35c>)
 8005dca:	5cd3      	ldrb	r3, [r2, r3]
 8005dcc:	f003 031f 	and.w	r3, r3, #31
 8005dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8005dd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dd6:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <HAL_RCC_ClockConfig+0x358>)
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	4a0d      	ldr	r2, [pc, #52]	; (8005e14 <HAL_RCC_ClockConfig+0x35c>)
 8005de0:	5cd3      	ldrb	r3, [r2, r3]
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dec:	4a0a      	ldr	r2, [pc, #40]	; (8005e18 <HAL_RCC_ClockConfig+0x360>)
 8005dee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005df0:	4a0a      	ldr	r2, [pc, #40]	; (8005e1c <HAL_RCC_ClockConfig+0x364>)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005df6:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <HAL_RCC_ClockConfig+0x368>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fb fc58 	bl	80016b0 <HAL_InitTick>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	58024400 	.word	0x58024400
 8005e14:	080133fc 	.word	0x080133fc
 8005e18:	24000004 	.word	0x24000004
 8005e1c:	24000000 	.word	0x24000000
 8005e20:	24000008 	.word	0x24000008

08005e24 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8005e28:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <HAL_RCC_EnableCSS+0x1c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a04      	ldr	r2, [pc, #16]	; (8005e40 <HAL_RCC_EnableCSS+0x1c>)
 8005e2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e32:	6013      	str	r3, [r2, #0]
}
 8005e34:	bf00      	nop
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	58024400 	.word	0x58024400

08005e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b089      	sub	sp, #36	; 0x24
 8005e48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e4a:	4baf      	ldr	r3, [pc, #700]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e52:	2b18      	cmp	r3, #24
 8005e54:	f200 814e 	bhi.w	80060f4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005e58:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005ec5 	.word	0x08005ec5
 8005e64:	080060f5 	.word	0x080060f5
 8005e68:	080060f5 	.word	0x080060f5
 8005e6c:	080060f5 	.word	0x080060f5
 8005e70:	080060f5 	.word	0x080060f5
 8005e74:	080060f5 	.word	0x080060f5
 8005e78:	080060f5 	.word	0x080060f5
 8005e7c:	080060f5 	.word	0x080060f5
 8005e80:	08005eeb 	.word	0x08005eeb
 8005e84:	080060f5 	.word	0x080060f5
 8005e88:	080060f5 	.word	0x080060f5
 8005e8c:	080060f5 	.word	0x080060f5
 8005e90:	080060f5 	.word	0x080060f5
 8005e94:	080060f5 	.word	0x080060f5
 8005e98:	080060f5 	.word	0x080060f5
 8005e9c:	080060f5 	.word	0x080060f5
 8005ea0:	08005ef1 	.word	0x08005ef1
 8005ea4:	080060f5 	.word	0x080060f5
 8005ea8:	080060f5 	.word	0x080060f5
 8005eac:	080060f5 	.word	0x080060f5
 8005eb0:	080060f5 	.word	0x080060f5
 8005eb4:	080060f5 	.word	0x080060f5
 8005eb8:	080060f5 	.word	0x080060f5
 8005ebc:	080060f5 	.word	0x080060f5
 8005ec0:	08005ef7 	.word	0x08005ef7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ec4:	4b90      	ldr	r3, [pc, #576]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d009      	beq.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ed0:	4b8d      	ldr	r3, [pc, #564]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	08db      	lsrs	r3, r3, #3
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	4a8c      	ldr	r2, [pc, #560]	; (800610c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005ee2:	e10a      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ee4:	4b89      	ldr	r3, [pc, #548]	; (800610c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005ee6:	61bb      	str	r3, [r7, #24]
    break;
 8005ee8:	e107      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005eea:	4b89      	ldr	r3, [pc, #548]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005eec:	61bb      	str	r3, [r7, #24]
    break;
 8005eee:	e104      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005ef0:	4b88      	ldr	r3, [pc, #544]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005ef2:	61bb      	str	r3, [r7, #24]
    break;
 8005ef4:	e101      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ef6:	4b84      	ldr	r3, [pc, #528]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005f00:	4b81      	ldr	r3, [pc, #516]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f0c:	4b7e      	ldr	r3, [pc, #504]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f16:	4b7c      	ldr	r3, [pc, #496]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1a:	08db      	lsrs	r3, r3, #3
 8005f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80da 	beq.w	80060ee <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d05a      	beq.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d302      	bcc.n	8005f4a <HAL_RCC_GetSysClockFreq+0x106>
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d078      	beq.n	800603a <HAL_RCC_GetSysClockFreq+0x1f6>
 8005f48:	e099      	b.n	800607e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f4a:	4b6f      	ldr	r3, [pc, #444]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d02d      	beq.n	8005fb2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f56:	4b6c      	ldr	r3, [pc, #432]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	08db      	lsrs	r3, r3, #3
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	4a6a      	ldr	r2, [pc, #424]	; (800610c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f62:	fa22 f303 	lsr.w	r3, r2, r3
 8005f66:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	ee07 3a90 	vmov	s15, r3
 8005f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f80:	4b61      	ldr	r3, [pc, #388]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f90:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f94:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006118 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005f98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005fb0:	e087      	b.n	80060c2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbc:	eddf 6a57 	vldr	s13, [pc, #348]	; 800611c <HAL_RCC_GetSysClockFreq+0x2d8>
 8005fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc4:	4b50      	ldr	r3, [pc, #320]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fcc:	ee07 3a90 	vmov	s15, r3
 8005fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fd8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006118 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005fdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ff4:	e065      	b.n	80060c2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006000:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006120 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006008:	4b3f      	ldr	r3, [pc, #252]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006010:	ee07 3a90 	vmov	s15, r3
 8006014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006018:	ed97 6a02 	vldr	s12, [r7, #8]
 800601c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006118 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006020:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800602c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006034:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006038:	e043      	b.n	80060c2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	ee07 3a90 	vmov	s15, r3
 8006040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006044:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006124 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800604c:	4b2e      	ldr	r3, [pc, #184]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006060:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006118 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800606c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006078:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800607c:	e021      	b.n	80060c2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006088:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006120 <HAL_RCC_GetSysClockFreq+0x2dc>
 800608c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006090:	4b1d      	ldr	r3, [pc, #116]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80060a4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006118 <HAL_RCC_GetSysClockFreq+0x2d4>
 80060a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060c0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80060c2:	4b11      	ldr	r3, [pc, #68]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	0a5b      	lsrs	r3, r3, #9
 80060c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060cc:	3301      	adds	r3, #1
 80060ce:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060da:	edd7 6a07 	vldr	s13, [r7, #28]
 80060de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060e6:	ee17 3a90 	vmov	r3, s15
 80060ea:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80060ec:	e005      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61bb      	str	r3, [r7, #24]
    break;
 80060f2:	e002      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80060f4:	4b06      	ldr	r3, [pc, #24]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80060f6:	61bb      	str	r3, [r7, #24]
    break;
 80060f8:	bf00      	nop
  }

  return sysclockfreq;
 80060fa:	69bb      	ldr	r3, [r7, #24]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3724      	adds	r7, #36	; 0x24
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	58024400 	.word	0x58024400
 800610c:	03d09000 	.word	0x03d09000
 8006110:	003d0900 	.word	0x003d0900
 8006114:	017d7840 	.word	0x017d7840
 8006118:	46000000 	.word	0x46000000
 800611c:	4c742400 	.word	0x4c742400
 8006120:	4a742400 	.word	0x4a742400
 8006124:	4bbebc20 	.word	0x4bbebc20

08006128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800612e:	f7ff fe89 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8006132:	4601      	mov	r1, r0
 8006134:	4b10      	ldr	r3, [pc, #64]	; (8006178 <HAL_RCC_GetHCLKFreq+0x50>)
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	0a1b      	lsrs	r3, r3, #8
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	4a0f      	ldr	r2, [pc, #60]	; (800617c <HAL_RCC_GetHCLKFreq+0x54>)
 8006140:	5cd3      	ldrb	r3, [r2, r3]
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	fa21 f303 	lsr.w	r3, r1, r3
 800614a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800614c:	4b0a      	ldr	r3, [pc, #40]	; (8006178 <HAL_RCC_GetHCLKFreq+0x50>)
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	4a09      	ldr	r2, [pc, #36]	; (800617c <HAL_RCC_GetHCLKFreq+0x54>)
 8006156:	5cd3      	ldrb	r3, [r2, r3]
 8006158:	f003 031f 	and.w	r3, r3, #31
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	fa22 f303 	lsr.w	r3, r2, r3
 8006162:	4a07      	ldr	r2, [pc, #28]	; (8006180 <HAL_RCC_GetHCLKFreq+0x58>)
 8006164:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006166:	4a07      	ldr	r2, [pc, #28]	; (8006184 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800616c:	4b04      	ldr	r3, [pc, #16]	; (8006180 <HAL_RCC_GetHCLKFreq+0x58>)
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	58024400 	.word	0x58024400
 800617c:	080133fc 	.word	0x080133fc
 8006180:	24000004 	.word	0x24000004
 8006184:	24000000 	.word	0x24000000

08006188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800618c:	f7ff ffcc 	bl	8006128 <HAL_RCC_GetHCLKFreq>
 8006190:	4601      	mov	r1, r0
 8006192:	4b06      	ldr	r3, [pc, #24]	; (80061ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	091b      	lsrs	r3, r3, #4
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	4a04      	ldr	r2, [pc, #16]	; (80061b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800619e:	5cd3      	ldrb	r3, [r2, r3]
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	58024400 	.word	0x58024400
 80061b0:	080133fc 	.word	0x080133fc

080061b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061b8:	f7ff ffb6 	bl	8006128 <HAL_RCC_GetHCLKFreq>
 80061bc:	4601      	mov	r1, r0
 80061be:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	0a1b      	lsrs	r3, r3, #8
 80061c4:	f003 0307 	and.w	r3, r3, #7
 80061c8:	4a04      	ldr	r2, [pc, #16]	; (80061dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80061ca:	5cd3      	ldrb	r3, [r2, r3]
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	58024400 	.word	0x58024400
 80061dc:	080133fc 	.word	0x080133fc

080061e0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80061e4:	4b07      	ldr	r3, [pc, #28]	; (8006204 <HAL_RCC_NMI_IRQHandler+0x24>)
 80061e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f0:	d105      	bne.n	80061fe <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 80061f2:	f000 f809 	bl	8006208 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80061f6:	4b03      	ldr	r3, [pc, #12]	; (8006204 <HAL_RCC_NMI_IRQHandler+0x24>)
 80061f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061fc:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80061fe:	bf00      	nop
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	58024400 	.word	0x58024400

08006208 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
	...

08006218 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006220:	2300      	movs	r3, #0
 8006222:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006224:	2300      	movs	r3, #0
 8006226:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d03d      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006238:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800623c:	d013      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800623e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006242:	d802      	bhi.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006248:	e01f      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800624a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800624e:	d013      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006250:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006254:	d01c      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006256:	e018      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006258:	4baf      	ldr	r3, [pc, #700]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	4aae      	ldr	r2, [pc, #696]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800625e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006264:	e015      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3304      	adds	r3, #4
 800626a:	2102      	movs	r1, #2
 800626c:	4618      	mov	r0, r3
 800626e:	f001 fd33 	bl	8007cd8 <RCCEx_PLL2_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006276:	e00c      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3324      	adds	r3, #36	; 0x24
 800627c:	2102      	movs	r1, #2
 800627e:	4618      	mov	r0, r3
 8006280:	f001 fddc 	bl	8007e3c <RCCEx_PLL3_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006288:	e003      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
      break;
 800628e:	e000      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d109      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006298:	4b9f      	ldr	r3, [pc, #636]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800629a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a4:	499c      	ldr	r1, [pc, #624]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	650b      	str	r3, [r1, #80]	; 0x50
 80062aa:	e001      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
 80062ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d03d      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d826      	bhi.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80062c4:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80062c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ca:	bf00      	nop
 80062cc:	080062e1 	.word	0x080062e1
 80062d0:	080062ef 	.word	0x080062ef
 80062d4:	08006301 	.word	0x08006301
 80062d8:	08006319 	.word	0x08006319
 80062dc:	08006319 	.word	0x08006319
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e0:	4b8d      	ldr	r3, [pc, #564]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	4a8c      	ldr	r2, [pc, #560]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062ec:	e015      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3304      	adds	r3, #4
 80062f2:	2100      	movs	r1, #0
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 fcef 	bl	8007cd8 <RCCEx_PLL2_Config>
 80062fa:	4603      	mov	r3, r0
 80062fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062fe:	e00c      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3324      	adds	r3, #36	; 0x24
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f001 fd98 	bl	8007e3c <RCCEx_PLL3_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006310:	e003      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	75fb      	strb	r3, [r7, #23]
      break;
 8006316:	e000      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d109      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006320:	4b7d      	ldr	r3, [pc, #500]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006324:	f023 0207 	bic.w	r2, r3, #7
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632c:	497a      	ldr	r1, [pc, #488]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800632e:	4313      	orrs	r3, r2
 8006330:	650b      	str	r3, [r1, #80]	; 0x50
 8006332:	e001      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
 8006336:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006340:	2b00      	cmp	r3, #0
 8006342:	d03e      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006348:	2b80      	cmp	r3, #128	; 0x80
 800634a:	d01c      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800634c:	2b80      	cmp	r3, #128	; 0x80
 800634e:	d804      	bhi.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006354:	2b40      	cmp	r3, #64	; 0x40
 8006356:	d00d      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006358:	e01e      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800635a:	2bc0      	cmp	r3, #192	; 0xc0
 800635c:	d01f      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800635e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006362:	d01e      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006364:	e018      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006366:	4b6c      	ldr	r3, [pc, #432]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	4a6b      	ldr	r2, [pc, #428]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800636c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006370:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006372:	e017      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3304      	adds	r3, #4
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f001 fcac 	bl	8007cd8 <RCCEx_PLL2_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006384:	e00e      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3324      	adds	r3, #36	; 0x24
 800638a:	2100      	movs	r1, #0
 800638c:	4618      	mov	r0, r3
 800638e:	f001 fd55 	bl	8007e3c <RCCEx_PLL3_Config>
 8006392:	4603      	mov	r3, r0
 8006394:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006396:	e005      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	75fb      	strb	r3, [r7, #23]
      break;
 800639c:	e002      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800639e:	bf00      	nop
 80063a0:	e000      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80063a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80063aa:	4b5b      	ldr	r3, [pc, #364]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b6:	4958      	ldr	r1, [pc, #352]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	650b      	str	r3, [r1, #80]	; 0x50
 80063bc:	e001      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d044      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063d8:	d01f      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80063da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063de:	d805      	bhi.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80063e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063e8:	d00e      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80063ea:	e01f      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80063ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063f0:	d01f      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80063f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063f6:	d01e      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80063f8:	e018      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063fa:	4b47      	ldr	r3, [pc, #284]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	4a46      	ldr	r2, [pc, #280]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006404:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006406:	e017      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3304      	adds	r3, #4
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f001 fc62 	bl	8007cd8 <RCCEx_PLL2_Config>
 8006414:	4603      	mov	r3, r0
 8006416:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006418:	e00e      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3324      	adds	r3, #36	; 0x24
 800641e:	2100      	movs	r1, #0
 8006420:	4618      	mov	r0, r3
 8006422:	f001 fd0b 	bl	8007e3c <RCCEx_PLL3_Config>
 8006426:	4603      	mov	r3, r0
 8006428:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800642a:	e005      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	75fb      	strb	r3, [r7, #23]
      break;
 8006430:	e002      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006432:	bf00      	nop
 8006434:	e000      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10a      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800643e:	4b36      	ldr	r3, [pc, #216]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006442:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800644c:	4932      	ldr	r1, [pc, #200]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800644e:	4313      	orrs	r3, r2
 8006450:	658b      	str	r3, [r1, #88]	; 0x58
 8006452:	e001      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006454:	7dfb      	ldrb	r3, [r7, #23]
 8006456:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006460:	2b00      	cmp	r3, #0
 8006462:	d044      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800646a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800646e:	d01f      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006474:	d805      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800647a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800647e:	d00e      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006480:	e01f      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006482:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006486:	d01f      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800648c:	d01e      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800648e:	e018      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006490:	4b21      	ldr	r3, [pc, #132]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	4a20      	ldr	r2, [pc, #128]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800649a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800649c:	e017      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3304      	adds	r3, #4
 80064a2:	2100      	movs	r1, #0
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 fc17 	bl	8007cd8 <RCCEx_PLL2_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064ae:	e00e      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3324      	adds	r3, #36	; 0x24
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 fcc0 	bl	8007e3c <RCCEx_PLL3_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064c0:	e005      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	75fb      	strb	r3, [r7, #23]
      break;
 80064c6:	e002      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80064c8:	bf00      	nop
 80064ca:	e000      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80064cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064d4:	4b10      	ldr	r3, [pc, #64]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064e2:	490d      	ldr	r1, [pc, #52]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	658b      	str	r3, [r1, #88]	; 0x58
 80064e8:	e001      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d035      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fe:	2b10      	cmp	r3, #16
 8006500:	d00c      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006502:	2b10      	cmp	r3, #16
 8006504:	d802      	bhi.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d01b      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800650a:	e017      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800650c:	2b20      	cmp	r3, #32
 800650e:	d00c      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006510:	2b30      	cmp	r3, #48	; 0x30
 8006512:	d018      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006514:	e012      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006516:	bf00      	nop
 8006518:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800651c:	4baf      	ldr	r3, [pc, #700]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	4aae      	ldr	r2, [pc, #696]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006526:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006528:	e00e      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3304      	adds	r3, #4
 800652e:	2102      	movs	r1, #2
 8006530:	4618      	mov	r0, r3
 8006532:	f001 fbd1 	bl	8007cd8 <RCCEx_PLL2_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800653a:	e005      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	75fb      	strb	r3, [r7, #23]
      break;
 8006540:	e002      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006542:	bf00      	nop
 8006544:	e000      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006548:	7dfb      	ldrb	r3, [r7, #23]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800654e:	4ba3      	ldr	r3, [pc, #652]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006552:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800655a:	49a0      	ldr	r1, [pc, #640]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800655c:	4313      	orrs	r3, r2
 800655e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006560:	e001      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006562:	7dfb      	ldrb	r3, [r7, #23]
 8006564:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d042      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657a:	d01f      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800657c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006580:	d805      	bhi.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658a:	d00e      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x392>
 800658c:	e01f      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800658e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006592:	d01f      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006598:	d01e      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800659a:	e018      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659c:	4b8f      	ldr	r3, [pc, #572]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	4a8e      	ldr	r2, [pc, #568]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065a8:	e017      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3304      	adds	r3, #4
 80065ae:	2100      	movs	r1, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f001 fb91 	bl	8007cd8 <RCCEx_PLL2_Config>
 80065b6:	4603      	mov	r3, r0
 80065b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065ba:	e00e      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3324      	adds	r3, #36	; 0x24
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 fc3a 	bl	8007e3c <RCCEx_PLL3_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065cc:	e005      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
      break;
 80065d2:	e002      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80065d4:	bf00      	nop
 80065d6:	e000      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80065d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d109      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80065e0:	4b7e      	ldr	r3, [pc, #504]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ec:	497b      	ldr	r1, [pc, #492]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	650b      	str	r3, [r1, #80]	; 0x50
 80065f2:	e001      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d042      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800660c:	d01b      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800660e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006612:	d805      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d022      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800661c:	d00a      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800661e:	e01b      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006620:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006624:	d01d      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800662a:	d01c      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800662c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006630:	d01b      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006632:	e011      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3304      	adds	r3, #4
 8006638:	2101      	movs	r1, #1
 800663a:	4618      	mov	r0, r3
 800663c:	f001 fb4c 	bl	8007cd8 <RCCEx_PLL2_Config>
 8006640:	4603      	mov	r3, r0
 8006642:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006644:	e012      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3324      	adds	r3, #36	; 0x24
 800664a:	2101      	movs	r1, #1
 800664c:	4618      	mov	r0, r3
 800664e:	f001 fbf5 	bl	8007e3c <RCCEx_PLL3_Config>
 8006652:	4603      	mov	r3, r0
 8006654:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006656:	e009      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	75fb      	strb	r3, [r7, #23]
      break;
 800665c:	e006      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800665e:	bf00      	nop
 8006660:	e004      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006662:	bf00      	nop
 8006664:	e002      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006666:	bf00      	nop
 8006668:	e000      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800666a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800666c:	7dfb      	ldrb	r3, [r7, #23]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006672:	4b5a      	ldr	r3, [pc, #360]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006676:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667e:	4957      	ldr	r1, [pc, #348]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006680:	4313      	orrs	r3, r2
 8006682:	650b      	str	r3, [r1, #80]	; 0x50
 8006684:	e001      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006686:	7dfb      	ldrb	r3, [r7, #23]
 8006688:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d044      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800669c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a0:	d01b      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80066a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a6:	d805      	bhi.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d022      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80066ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066b0:	d00a      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80066b2:	e01b      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80066b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b8:	d01d      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80066ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066be:	d01c      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80066c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066c4:	d01b      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80066c6:	e011      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3304      	adds	r3, #4
 80066cc:	2101      	movs	r1, #1
 80066ce:	4618      	mov	r0, r3
 80066d0:	f001 fb02 	bl	8007cd8 <RCCEx_PLL2_Config>
 80066d4:	4603      	mov	r3, r0
 80066d6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066d8:	e012      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3324      	adds	r3, #36	; 0x24
 80066de:	2101      	movs	r1, #1
 80066e0:	4618      	mov	r0, r3
 80066e2:	f001 fbab 	bl	8007e3c <RCCEx_PLL3_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066ea:	e009      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	75fb      	strb	r3, [r7, #23]
      break;
 80066f0:	e006      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80066f2:	bf00      	nop
 80066f4:	e004      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80066f6:	bf00      	nop
 80066f8:	e002      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80066fa:	bf00      	nop
 80066fc:	e000      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80066fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006700:	7dfb      	ldrb	r3, [r7, #23]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10a      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006706:	4b35      	ldr	r3, [pc, #212]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006714:	4931      	ldr	r1, [pc, #196]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006716:	4313      	orrs	r3, r2
 8006718:	658b      	str	r3, [r1, #88]	; 0x58
 800671a:	e001      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d02d      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006734:	d005      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800673a:	d009      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d013      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006740:	e00f      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006742:	4b26      	ldr	r3, [pc, #152]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	4a25      	ldr	r2, [pc, #148]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800674c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800674e:	e00c      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3304      	adds	r3, #4
 8006754:	2101      	movs	r1, #1
 8006756:	4618      	mov	r0, r3
 8006758:	f001 fabe 	bl	8007cd8 <RCCEx_PLL2_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006760:	e003      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	75fb      	strb	r3, [r7, #23]
      break;
 8006766:	e000      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d109      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006770:	4b1a      	ldr	r3, [pc, #104]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006774:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677c:	4917      	ldr	r1, [pc, #92]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800677e:	4313      	orrs	r3, r2
 8006780:	650b      	str	r3, [r1, #80]	; 0x50
 8006782:	e001      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d035      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006798:	2b03      	cmp	r3, #3
 800679a:	d81b      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800679c:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800679e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a2:	bf00      	nop
 80067a4:	080067e1 	.word	0x080067e1
 80067a8:	080067b5 	.word	0x080067b5
 80067ac:	080067c3 	.word	0x080067c3
 80067b0:	080067e1 	.word	0x080067e1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b4:	4b09      	ldr	r3, [pc, #36]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	4a08      	ldr	r2, [pc, #32]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067c0:	e00f      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3304      	adds	r3, #4
 80067c6:	2102      	movs	r1, #2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f001 fa85 	bl	8007cd8 <RCCEx_PLL2_Config>
 80067ce:	4603      	mov	r3, r0
 80067d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067d2:	e006      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	75fb      	strb	r3, [r7, #23]
      break;
 80067d8:	e003      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80067da:	bf00      	nop
 80067dc:	58024400 	.word	0x58024400
      break;
 80067e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d109      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067e8:	4bba      	ldr	r3, [pc, #744]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ec:	f023 0203 	bic.w	r2, r3, #3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f4:	49b7      	ldr	r1, [pc, #732]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067fa:	e001      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
 80067fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 8086 	beq.w	800691a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800680e:	4bb2      	ldr	r3, [pc, #712]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4ab1      	ldr	r2, [pc, #708]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800681a:	f7fa ff93 	bl	8001744 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006820:	e009      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006822:	f7fa ff8f 	bl	8001744 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b64      	cmp	r3, #100	; 0x64
 800682e:	d902      	bls.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	75fb      	strb	r3, [r7, #23]
        break;
 8006834:	e005      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006836:	4ba8      	ldr	r3, [pc, #672]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0ef      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d166      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006848:	4ba2      	ldr	r3, [pc, #648]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800684a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006852:	4053      	eors	r3, r2
 8006854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006858:	2b00      	cmp	r3, #0
 800685a:	d013      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800685c:	4b9d      	ldr	r3, [pc, #628]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800685e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006864:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006866:	4b9b      	ldr	r3, [pc, #620]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	4a9a      	ldr	r2, [pc, #616]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800686c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006870:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006872:	4b98      	ldr	r3, [pc, #608]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	4a97      	ldr	r2, [pc, #604]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800687c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800687e:	4a95      	ldr	r2, [pc, #596]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800688a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688e:	d115      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006890:	f7fa ff58 	bl	8001744 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006896:	e00b      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006898:	f7fa ff54 	bl	8001744 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d902      	bls.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	75fb      	strb	r3, [r7, #23]
            break;
 80068ae:	e005      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068b0:	4b88      	ldr	r3, [pc, #544]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0ed      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d126      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068d0:	d10d      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80068d2:	4b80      	ldr	r3, [pc, #512]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068e0:	0919      	lsrs	r1, r3, #4
 80068e2:	4b7e      	ldr	r3, [pc, #504]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80068e4:	400b      	ands	r3, r1
 80068e6:	497b      	ldr	r1, [pc, #492]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	610b      	str	r3, [r1, #16]
 80068ec:	e005      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80068ee:	4b79      	ldr	r3, [pc, #484]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	4a78      	ldr	r2, [pc, #480]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80068f8:	6113      	str	r3, [r2, #16]
 80068fa:	4b76      	ldr	r3, [pc, #472]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006908:	4972      	ldr	r1, [pc, #456]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800690a:	4313      	orrs	r3, r2
 800690c:	670b      	str	r3, [r1, #112]	; 0x70
 800690e:	e004      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	75bb      	strb	r3, [r7, #22]
 8006914:	e001      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d07d      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800692a:	2b28      	cmp	r3, #40	; 0x28
 800692c:	d866      	bhi.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006a03 	.word	0x08006a03
 8006938:	080069fd 	.word	0x080069fd
 800693c:	080069fd 	.word	0x080069fd
 8006940:	080069fd 	.word	0x080069fd
 8006944:	080069fd 	.word	0x080069fd
 8006948:	080069fd 	.word	0x080069fd
 800694c:	080069fd 	.word	0x080069fd
 8006950:	080069fd 	.word	0x080069fd
 8006954:	080069d9 	.word	0x080069d9
 8006958:	080069fd 	.word	0x080069fd
 800695c:	080069fd 	.word	0x080069fd
 8006960:	080069fd 	.word	0x080069fd
 8006964:	080069fd 	.word	0x080069fd
 8006968:	080069fd 	.word	0x080069fd
 800696c:	080069fd 	.word	0x080069fd
 8006970:	080069fd 	.word	0x080069fd
 8006974:	080069eb 	.word	0x080069eb
 8006978:	080069fd 	.word	0x080069fd
 800697c:	080069fd 	.word	0x080069fd
 8006980:	080069fd 	.word	0x080069fd
 8006984:	080069fd 	.word	0x080069fd
 8006988:	080069fd 	.word	0x080069fd
 800698c:	080069fd 	.word	0x080069fd
 8006990:	080069fd 	.word	0x080069fd
 8006994:	08006a03 	.word	0x08006a03
 8006998:	080069fd 	.word	0x080069fd
 800699c:	080069fd 	.word	0x080069fd
 80069a0:	080069fd 	.word	0x080069fd
 80069a4:	080069fd 	.word	0x080069fd
 80069a8:	080069fd 	.word	0x080069fd
 80069ac:	080069fd 	.word	0x080069fd
 80069b0:	080069fd 	.word	0x080069fd
 80069b4:	08006a03 	.word	0x08006a03
 80069b8:	080069fd 	.word	0x080069fd
 80069bc:	080069fd 	.word	0x080069fd
 80069c0:	080069fd 	.word	0x080069fd
 80069c4:	080069fd 	.word	0x080069fd
 80069c8:	080069fd 	.word	0x080069fd
 80069cc:	080069fd 	.word	0x080069fd
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	08006a03 	.word	0x08006a03
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3304      	adds	r3, #4
 80069dc:	2101      	movs	r1, #1
 80069de:	4618      	mov	r0, r3
 80069e0:	f001 f97a 	bl	8007cd8 <RCCEx_PLL2_Config>
 80069e4:	4603      	mov	r3, r0
 80069e6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069e8:	e00c      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3324      	adds	r3, #36	; 0x24
 80069ee:	2101      	movs	r1, #1
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 fa23 	bl	8007e3c <RCCEx_PLL3_Config>
 80069f6:	4603      	mov	r3, r0
 80069f8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069fa:	e003      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006a00:	e000      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a0a:	4b32      	ldr	r3, [pc, #200]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a16:	492f      	ldr	r1, [pc, #188]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	654b      	str	r3, [r1, #84]	; 0x54
 8006a1c:	e001      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d037      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a32:	2b05      	cmp	r3, #5
 8006a34:	d820      	bhi.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006a36:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3c:	08006a7f 	.word	0x08006a7f
 8006a40:	08006a55 	.word	0x08006a55
 8006a44:	08006a67 	.word	0x08006a67
 8006a48:	08006a7f 	.word	0x08006a7f
 8006a4c:	08006a7f 	.word	0x08006a7f
 8006a50:	08006a7f 	.word	0x08006a7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	2101      	movs	r1, #1
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 f93c 	bl	8007cd8 <RCCEx_PLL2_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a64:	e00c      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3324      	adds	r3, #36	; 0x24
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f001 f9e5 	bl	8007e3c <RCCEx_PLL3_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a76:	e003      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7c:	e000      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d109      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a86:	4b13      	ldr	r3, [pc, #76]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8a:	f023 0207 	bic.w	r2, r3, #7
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a92:	4910      	ldr	r1, [pc, #64]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	654b      	str	r3, [r1, #84]	; 0x54
 8006a98:	e001      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d040      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab0:	2b05      	cmp	r3, #5
 8006ab2:	d827      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006ab4:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aba:	bf00      	nop
 8006abc:	08006b0b 	.word	0x08006b0b
 8006ac0:	08006ae1 	.word	0x08006ae1
 8006ac4:	08006af3 	.word	0x08006af3
 8006ac8:	08006b0b 	.word	0x08006b0b
 8006acc:	08006b0b 	.word	0x08006b0b
 8006ad0:	08006b0b 	.word	0x08006b0b
 8006ad4:	58024400 	.word	0x58024400
 8006ad8:	58024800 	.word	0x58024800
 8006adc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 f8f6 	bl	8007cd8 <RCCEx_PLL2_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006af0:	e00c      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3324      	adds	r3, #36	; 0x24
 8006af6:	2101      	movs	r1, #1
 8006af8:	4618      	mov	r0, r3
 8006afa:	f001 f99f 	bl	8007e3c <RCCEx_PLL3_Config>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b02:	e003      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	75fb      	strb	r3, [r7, #23]
      break;
 8006b08:	e000      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b12:	4bb2      	ldr	r3, [pc, #712]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	f023 0207 	bic.w	r2, r3, #7
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b20:	49ae      	ldr	r1, [pc, #696]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	658b      	str	r3, [r1, #88]	; 0x58
 8006b26:	e001      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d044      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b42:	d01b      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b48:	d805      	bhi.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d022      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b52:	d00a      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006b54:	e01b      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5a:	d01d      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b60:	d01c      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006b62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b66:	d01b      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006b68:	e011      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	2100      	movs	r1, #0
 8006b70:	4618      	mov	r0, r3
 8006b72:	f001 f8b1 	bl	8007cd8 <RCCEx_PLL2_Config>
 8006b76:	4603      	mov	r3, r0
 8006b78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b7a:	e012      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3324      	adds	r3, #36	; 0x24
 8006b80:	2102      	movs	r1, #2
 8006b82:	4618      	mov	r0, r3
 8006b84:	f001 f95a 	bl	8007e3c <RCCEx_PLL3_Config>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b8c:	e009      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	75fb      	strb	r3, [r7, #23]
      break;
 8006b92:	e006      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006b94:	bf00      	nop
 8006b96:	e004      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006b98:	bf00      	nop
 8006b9a:	e002      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006b9c:	bf00      	nop
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ba8:	4b8c      	ldr	r3, [pc, #560]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bac:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb6:	4989      	ldr	r1, [pc, #548]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	654b      	str	r3, [r1, #84]	; 0x54
 8006bbc:	e001      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
 8006bc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d044      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd8:	d01b      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bde:	d805      	bhi.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d022      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be8:	d00a      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006bea:	e01b      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf0:	d01d      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006bf2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bf6:	d01c      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006bf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bfc:	d01b      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006bfe:	e011      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3304      	adds	r3, #4
 8006c04:	2100      	movs	r1, #0
 8006c06:	4618      	mov	r0, r3
 8006c08:	f001 f866 	bl	8007cd8 <RCCEx_PLL2_Config>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c10:	e012      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3324      	adds	r3, #36	; 0x24
 8006c16:	2102      	movs	r1, #2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f001 f90f 	bl	8007e3c <RCCEx_PLL3_Config>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c22:	e009      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	75fb      	strb	r3, [r7, #23]
      break;
 8006c28:	e006      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006c2a:	bf00      	nop
 8006c2c:	e004      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006c2e:	bf00      	nop
 8006c30:	e002      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006c32:	bf00      	nop
 8006c34:	e000      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c3e:	4b67      	ldr	r3, [pc, #412]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c42:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c4c:	4963      	ldr	r1, [pc, #396]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	658b      	str	r3, [r1, #88]	; 0x58
 8006c52:	e001      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d044      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c6e:	d01b      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c74:	d805      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d022      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c7e:	d00a      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006c80:	e01b      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c86:	d01d      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006c88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c8c:	d01c      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006c8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c92:	d01b      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006c94:	e011      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 f81b 	bl	8007cd8 <RCCEx_PLL2_Config>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ca6:	e012      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3324      	adds	r3, #36	; 0x24
 8006cac:	2102      	movs	r1, #2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 f8c4 	bl	8007e3c <RCCEx_PLL3_Config>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006cb8:	e009      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cbe:	e006      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006cc0:	bf00      	nop
 8006cc2:	e004      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006cc4:	bf00      	nop
 8006cc6:	e002      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006cc8:	bf00      	nop
 8006cca:	e000      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006cd4:	4b41      	ldr	r3, [pc, #260]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ce2:	493e      	ldr	r1, [pc, #248]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	658b      	str	r3, [r1, #88]	; 0x58
 8006ce8:	e001      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d01a      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d04:	d10a      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3324      	adds	r3, #36	; 0x24
 8006d0a:	2102      	movs	r1, #2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 f895 	bl	8007e3c <RCCEx_PLL3_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d1c:	4b2f      	ldr	r3, [pc, #188]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d2a:	492c      	ldr	r1, [pc, #176]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01a      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d46:	d10a      	bne.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3324      	adds	r3, #36	; 0x24
 8006d4c:	2102      	movs	r1, #2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f001 f874 	bl	8007e3c <RCCEx_PLL3_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d5e:	4b1f      	ldr	r3, [pc, #124]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d6c:	491b      	ldr	r1, [pc, #108]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d032      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d88:	d00d      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d8e:	d016      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d111      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3304      	adds	r3, #4
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 ff9c 	bl	8007cd8 <RCCEx_PLL2_Config>
 8006da0:	4603      	mov	r3, r0
 8006da2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006da4:	e00c      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3324      	adds	r3, #36	; 0x24
 8006daa:	2102      	movs	r1, #2
 8006dac:	4618      	mov	r0, r3
 8006dae:	f001 f845 	bl	8007e3c <RCCEx_PLL3_Config>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006db6:	e003      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	75fb      	strb	r3, [r7, #23]
      break;
 8006dbc:	e000      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10c      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dc6:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dd4:	4901      	ldr	r1, [pc, #4]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	658b      	str	r3, [r1, #88]	; 0x58
 8006dda:	e003      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006ddc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d02f      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dfa:	d00c      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006dfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e00:	d015      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e06:	d10f      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e08:	4b79      	ldr	r3, [pc, #484]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	4a78      	ldr	r2, [pc, #480]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e14:	e00c      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3324      	adds	r3, #36	; 0x24
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 f80d 	bl	8007e3c <RCCEx_PLL3_Config>
 8006e22:	4603      	mov	r3, r0
 8006e24:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e26:	e003      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e2c:	e000      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e36:	4b6e      	ldr	r3, [pc, #440]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e44:	496a      	ldr	r1, [pc, #424]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	654b      	str	r3, [r1, #84]	; 0x54
 8006e4a:	e001      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d029      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e68:	d007      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006e6a:	e00f      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e6c:	4b60      	ldr	r3, [pc, #384]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	4a5f      	ldr	r2, [pc, #380]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e78:	e00b      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	2102      	movs	r1, #2
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 ff29 	bl	8007cd8 <RCCEx_PLL2_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e8a:	e002      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d109      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e98:	4b55      	ldr	r3, [pc, #340]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea4:	4952      	ldr	r1, [pc, #328]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006eaa:	e001      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00a      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3324      	adds	r3, #36	; 0x24
 8006ec0:	2102      	movs	r1, #2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 ffba 	bl	8007e3c <RCCEx_PLL3_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d02f      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ee6:	d00c      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eec:	d802      	bhi.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d011      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006ef2:	e00d      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef8:	d00f      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006efe:	d00e      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006f00:	e006      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f02:	4b3b      	ldr	r3, [pc, #236]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f06:	4a3a      	ldr	r2, [pc, #232]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f0e:	e007      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	75fb      	strb	r3, [r7, #23]
      break;
 8006f14:	e004      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006f16:	bf00      	nop
 8006f18:	e002      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006f1a:	bf00      	nop
 8006f1c:	e000      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d109      	bne.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f26:	4b32      	ldr	r3, [pc, #200]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f32:	492f      	ldr	r1, [pc, #188]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	654b      	str	r3, [r1, #84]	; 0x54
 8006f38:	e001      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
 8006f3c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d008      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f4a:	4b29      	ldr	r3, [pc, #164]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f56:	4926      	ldr	r1, [pc, #152]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d009      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006f68:	4b21      	ldr	r3, [pc, #132]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f76:	491e      	ldr	r1, [pc, #120]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d008      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f88:	4b19      	ldr	r3, [pc, #100]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f94:	4916      	ldr	r1, [pc, #88]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00d      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fa6:	4b12      	ldr	r3, [pc, #72]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	4a11      	ldr	r2, [pc, #68]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fb0:	6113      	str	r3, [r2, #16]
 8006fb2:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fb4:	691a      	ldr	r2, [r3, #16]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006fbc:	490c      	ldr	r1, [pc, #48]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	da08      	bge.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fca:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd6:	4906      	ldr	r1, [pc, #24]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006fdc:	7dbb      	ldrb	r3, [r7, #22]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e000      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	58024400 	.word	0x58024400

08006ff4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b090      	sub	sp, #64	; 0x40
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007002:	d150      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007004:	4ba1      	ldr	r3, [pc, #644]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007010:	2b04      	cmp	r3, #4
 8007012:	d844      	bhi.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007014:	a201      	add	r2, pc, #4	; (adr r2, 800701c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701a:	bf00      	nop
 800701c:	08007031 	.word	0x08007031
 8007020:	08007041 	.word	0x08007041
 8007024:	08007051 	.word	0x08007051
 8007028:	08007099 	.word	0x08007099
 800702c:	08007061 	.word	0x08007061
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fd03 	bl	8007a40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800703e:	e241      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007040:	f107 0318 	add.w	r3, r7, #24
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fa63 	bl	8007510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800704e:	e239      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007050:	f107 030c 	add.w	r3, r7, #12
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fba7 	bl	80077a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800705e:	e231      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007060:	4b8a      	ldr	r3, [pc, #552]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007068:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800706a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007070:	4b87      	ldr	r3, [pc, #540]	; (8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007074:	e226      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007078:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800707c:	d102      	bne.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800707e:	4b85      	ldr	r3, [pc, #532]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007080:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007082:	e21f      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800708a:	d102      	bne.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800708c:	4b82      	ldr	r3, [pc, #520]	; (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800708e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007090:	e218      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007096:	e215      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007098:	4b80      	ldr	r3, [pc, #512]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800709c:	e212      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070a2:	bf00      	nop
 80070a4:	e20e      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ac:	d14f      	bne.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80070ae:	4b77      	ldr	r3, [pc, #476]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80070b6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80070b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ba:	2b80      	cmp	r3, #128	; 0x80
 80070bc:	d01c      	beq.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80070be:	2b80      	cmp	r3, #128	; 0x80
 80070c0:	d804      	bhi.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80070c6:	2b40      	cmp	r3, #64	; 0x40
 80070c8:	d00e      	beq.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80070ca:	e03c      	b.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80070cc:	2bc0      	cmp	r3, #192	; 0xc0
 80070ce:	d037      	beq.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80070d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d4:	d018      	beq.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80070d6:	e036      	b.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fcaf 	bl	8007a40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070e6:	e1ed      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070e8:	f107 0318 	add.w	r3, r7, #24
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fa0f 	bl	8007510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070f6:	e1e5      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070f8:	f107 030c 	add.w	r3, r7, #12
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fb53 	bl	80077a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007106:	e1dd      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007108:	4b60      	ldr	r3, [pc, #384]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800710a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007110:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007114:	2b00      	cmp	r3, #0
 8007116:	d102      	bne.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007118:	4b5d      	ldr	r3, [pc, #372]	; (8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800711a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800711c:	e1d2      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800711e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007124:	d102      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007126:	4b5b      	ldr	r3, [pc, #364]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800712a:	e1cb      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800712c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007132:	d102      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007134:	4b58      	ldr	r3, [pc, #352]	; (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007136:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007138:	e1c4      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713e:	e1c1      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007140:	4b56      	ldr	r3, [pc, #344]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007144:	e1be      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800714a:	bf00      	nop
 800714c:	e1ba      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007154:	d153      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007156:	4b4d      	ldr	r3, [pc, #308]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800715e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007166:	d01f      	beq.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800716c:	d805      	bhi.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007176:	d00f      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007178:	e03d      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800717a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800717e:	d037      	beq.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007180:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007184:	d018      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007186:	e036      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800718c:	4618      	mov	r0, r3
 800718e:	f000 fc57 	bl	8007a40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007196:	e195      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007198:	f107 0318 	add.w	r3, r7, #24
 800719c:	4618      	mov	r0, r3
 800719e:	f000 f9b7 	bl	8007510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071a6:	e18d      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071a8:	f107 030c 	add.w	r3, r7, #12
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fafb 	bl	80077a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b6:	e185      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071b8:	4b34      	ldr	r3, [pc, #208]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80071c8:	4b31      	ldr	r3, [pc, #196]	; (8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80071cc:	e17a      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80071ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071d4:	d102      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80071d6:	4b2f      	ldr	r3, [pc, #188]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80071d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071da:	e173      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80071dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071e2:	d102      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80071e4:	4b2c      	ldr	r3, [pc, #176]	; (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e8:	e16c      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ee:	e169      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80071f0:	4b2a      	ldr	r3, [pc, #168]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80071f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071f4:	e166      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071fa:	bf00      	nop
 80071fc:	e162      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007204:	d15d      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007206:	4b21      	ldr	r3, [pc, #132]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800720e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007216:	d01f      	beq.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800721c:	d805      	bhi.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007222:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007226:	d00f      	beq.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007228:	e047      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800722a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800722e:	d041      	beq.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007234:	d018      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007236:	e040      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fbff 	bl	8007a40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007246:	e13d      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007248:	f107 0318 	add.w	r3, r7, #24
 800724c:	4618      	mov	r0, r3
 800724e:	f000 f95f 	bl	8007510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007256:	e135      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007258:	f107 030c 	add.w	r3, r7, #12
 800725c:	4618      	mov	r0, r3
 800725e:	f000 faa3 	bl	80077a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007266:	e12d      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007268:	4b08      	ldr	r3, [pc, #32]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800726a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007270:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007274:	2b00      	cmp	r3, #0
 8007276:	d102      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800727a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800727c:	e122      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800727e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007284:	d10c      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007286:	4b03      	ldr	r3, [pc, #12]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800728a:	e11b      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800728c:	58024400 	.word	0x58024400
 8007290:	03d09000 	.word	0x03d09000
 8007294:	003d0900 	.word	0x003d0900
 8007298:	017d7840 	.word	0x017d7840
 800729c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80072a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a6:	d102      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80072a8:	4b89      	ldr	r3, [pc, #548]	; (80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80072aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ac:	e10a      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072b2:	e107      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072b4:	4b87      	ldr	r3, [pc, #540]	; (80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80072b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072b8:	e104      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072be:	bf00      	nop
 80072c0:	e100      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c8:	d153      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80072ca:	4b83      	ldr	r3, [pc, #524]	; (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80072cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ce:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80072d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80072d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072da:	d01f      	beq.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80072dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e0:	d805      	bhi.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00a      	beq.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80072e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ea:	d00f      	beq.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80072ec:	e03d      	b.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80072ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072f2:	d037      	beq.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80072f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072f8:	d018      	beq.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80072fa:	e036      	b.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007300:	4618      	mov	r0, r3
 8007302:	f000 fb9d 	bl	8007a40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800730a:	e0db      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800730c:	f107 0318 	add.w	r3, r7, #24
 8007310:	4618      	mov	r0, r3
 8007312:	f000 f8fd 	bl	8007510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800731a:	e0d3      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800731c:	f107 030c 	add.w	r3, r7, #12
 8007320:	4618      	mov	r0, r3
 8007322:	f000 fa41 	bl	80077a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800732a:	e0cb      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800732c:	4b6a      	ldr	r3, [pc, #424]	; (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800732e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007330:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007334:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800733c:	4b67      	ldr	r3, [pc, #412]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007340:	e0c0      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007348:	d102      	bne.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800734a:	4b65      	ldr	r3, [pc, #404]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800734c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800734e:	e0b9      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007356:	d102      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007358:	4b5d      	ldr	r3, [pc, #372]	; (80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800735c:	e0b2      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007362:	e0af      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007364:	4b5b      	ldr	r3, [pc, #364]	; (80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007366:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007368:	e0ac      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800736e:	bf00      	nop
 8007370:	e0a8      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007378:	d13d      	bne.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800737a:	4b57      	ldr	r3, [pc, #348]	; (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800737c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007382:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800738a:	d00c      	beq.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800738c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007390:	d011      	beq.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d12b      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007396:	f107 0318 	add.w	r3, r7, #24
 800739a:	4618      	mov	r0, r3
 800739c:	f000 f8b8 	bl	8007510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a4:	e08e      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073a6:	f107 030c 	add.w	r3, r7, #12
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 f9fc 	bl	80077a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073b4:	e086      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073b6:	4b48      	ldr	r3, [pc, #288]	; (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80073b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073be:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80073c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d102      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80073c6:	4b45      	ldr	r3, [pc, #276]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80073ca:	e07b      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80073cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073d2:	d102      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80073d4:	4b42      	ldr	r3, [pc, #264]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073d8:	e074      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80073da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073e0:	d102      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80073e2:	4b3b      	ldr	r3, [pc, #236]	; (80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80073e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073e6:	e06d      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ec:	e06a      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073f2:	bf00      	nop
 80073f4:	e066      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073fc:	d11f      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80073fe:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007406:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800740e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007412:	d008      	beq.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007414:	e00f      	b.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fb10 	bl	8007a40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007424:	e04e      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007426:	f107 0318 	add.w	r3, r7, #24
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f870 	bl	8007510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007434:	e046      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800743a:	bf00      	nop
 800743c:	e042      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007444:	d13c      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007446:	4b24      	ldr	r3, [pc, #144]	; (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800744e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007456:	d01e      	beq.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800745c:	d805      	bhi.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00d      	beq.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007466:	d00e      	beq.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007468:	e026      	b.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800746a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800746e:	d01d      	beq.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007474:	d01d      	beq.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007476:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800747a:	d014      	beq.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800747c:	e01c      	b.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800747e:	f000 f831 	bl	80074e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007482:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007484:	e01e      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007486:	f107 0318 	add.w	r3, r7, #24
 800748a:	4618      	mov	r0, r3
 800748c:	f000 f840 	bl	8007510 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007494:	e016      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007496:	f107 030c 	add.w	r3, r7, #12
 800749a:	4618      	mov	r0, r3
 800749c:	f000 f984 	bl	80077a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074a4:	e00e      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80074a6:	4b0d      	ldr	r3, [pc, #52]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80074a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074aa:	e00b      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80074ac:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80074ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074b0:	e008      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80074b2:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80074b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074b6:	e005      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074bc:	bf00      	nop
 80074be:	e001      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80074c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3740      	adds	r7, #64	; 0x40
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	017d7840 	.word	0x017d7840
 80074d4:	00bb8000 	.word	0x00bb8000
 80074d8:	58024400 	.word	0x58024400
 80074dc:	03d09000 	.word	0x03d09000
 80074e0:	003d0900 	.word	0x003d0900

080074e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80074e8:	f7fe fe1e 	bl	8006128 <HAL_RCC_GetHCLKFreq>
 80074ec:	4601      	mov	r1, r0
 80074ee:	4b06      	ldr	r3, [pc, #24]	; (8007508 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	091b      	lsrs	r3, r3, #4
 80074f4:	f003 0307 	and.w	r3, r3, #7
 80074f8:	4a04      	ldr	r2, [pc, #16]	; (800750c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80074fa:	5cd3      	ldrb	r3, [r2, r3]
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007504:	4618      	mov	r0, r3
 8007506:	bd80      	pop	{r7, pc}
 8007508:	58024400 	.word	0x58024400
 800750c:	080133fc 	.word	0x080133fc

08007510 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007510:	b480      	push	{r7}
 8007512:	b089      	sub	sp, #36	; 0x24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007518:	4b9d      	ldr	r3, [pc, #628]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800751a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007522:	4b9b      	ldr	r3, [pc, #620]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007526:	0b1b      	lsrs	r3, r3, #12
 8007528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800752c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800752e:	4b98      	ldr	r3, [pc, #608]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007532:	091b      	lsrs	r3, r3, #4
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800753a:	4b95      	ldr	r3, [pc, #596]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800753c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753e:	08db      	lsrs	r3, r3, #3
 8007540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	fb02 f303 	mul.w	r3, r2, r3
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 810a 	beq.w	8007772 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d05a      	beq.n	800761a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007564:	2b01      	cmp	r3, #1
 8007566:	d302      	bcc.n	800756e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007568:	2b02      	cmp	r3, #2
 800756a:	d078      	beq.n	800765e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800756c:	e099      	b.n	80076a2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800756e:	4b88      	ldr	r3, [pc, #544]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0320 	and.w	r3, r3, #32
 8007576:	2b00      	cmp	r3, #0
 8007578:	d02d      	beq.n	80075d6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800757a:	4b85      	ldr	r3, [pc, #532]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	08db      	lsrs	r3, r3, #3
 8007580:	f003 0303 	and.w	r3, r3, #3
 8007584:	4a83      	ldr	r2, [pc, #524]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007586:	fa22 f303 	lsr.w	r3, r2, r3
 800758a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	ee07 3a90 	vmov	s15, r3
 800759c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a4:	4b7a      	ldr	r3, [pc, #488]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ac:	ee07 3a90 	vmov	s15, r3
 80075b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007798 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80075bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80075d4:	e087      	b.n	80076e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800779c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80075e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e8:	4b69      	ldr	r3, [pc, #420]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007798 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007614:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007618:	e065      	b.n	80076e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	ee07 3a90 	vmov	s15, r3
 8007620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007624:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80077a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762c:	4b58      	ldr	r3, [pc, #352]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800762e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007634:	ee07 3a90 	vmov	s15, r3
 8007638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007640:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007798 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007658:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800765c:	e043      	b.n	80076e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	ee07 3a90 	vmov	s15, r3
 8007664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007668:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800766c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007670:	4b47      	ldr	r3, [pc, #284]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007678:	ee07 3a90 	vmov	s15, r3
 800767c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007680:	ed97 6a03 	vldr	s12, [r7, #12]
 8007684:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007798 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076a0:	e021      	b.n	80076e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	ee07 3a90 	vmov	s15, r3
 80076a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ac:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80077a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80076b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b4:	4b36      	ldr	r3, [pc, #216]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076bc:	ee07 3a90 	vmov	s15, r3
 80076c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007798 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076e4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80076e6:	4b2a      	ldr	r3, [pc, #168]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	0a5b      	lsrs	r3, r3, #9
 80076ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f0:	ee07 3a90 	vmov	s15, r3
 80076f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007700:	edd7 6a07 	vldr	s13, [r7, #28]
 8007704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800770c:	ee17 2a90 	vmov	r2, s15
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007714:	4b1e      	ldr	r3, [pc, #120]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	0c1b      	lsrs	r3, r3, #16
 800771a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800772a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800772e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800773a:	ee17 2a90 	vmov	r2, s15
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007742:	4b13      	ldr	r3, [pc, #76]	; (8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	0e1b      	lsrs	r3, r3, #24
 8007748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774c:	ee07 3a90 	vmov	s15, r3
 8007750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007754:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800775c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007768:	ee17 2a90 	vmov	r2, s15
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007770:	e008      	b.n	8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	609a      	str	r2, [r3, #8]
}
 8007784:	bf00      	nop
 8007786:	3724      	adds	r7, #36	; 0x24
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	58024400 	.word	0x58024400
 8007794:	03d09000 	.word	0x03d09000
 8007798:	46000000 	.word	0x46000000
 800779c:	4c742400 	.word	0x4c742400
 80077a0:	4a742400 	.word	0x4a742400
 80077a4:	4bbebc20 	.word	0x4bbebc20

080077a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b089      	sub	sp, #36	; 0x24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077b0:	4b9d      	ldr	r3, [pc, #628]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	f003 0303 	and.w	r3, r3, #3
 80077b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80077ba:	4b9b      	ldr	r3, [pc, #620]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077be:	0d1b      	lsrs	r3, r3, #20
 80077c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80077c6:	4b98      	ldr	r3, [pc, #608]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	0a1b      	lsrs	r3, r3, #8
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80077d2:	4b95      	ldr	r3, [pc, #596]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d6:	08db      	lsrs	r3, r3, #3
 80077d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	fb02 f303 	mul.w	r3, r2, r3
 80077e2:	ee07 3a90 	vmov	s15, r3
 80077e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 810a 	beq.w	8007a0a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d05a      	beq.n	80078b2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d302      	bcc.n	8007806 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007800:	2b02      	cmp	r3, #2
 8007802:	d078      	beq.n	80078f6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007804:	e099      	b.n	800793a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007806:	4b88      	ldr	r3, [pc, #544]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0320 	and.w	r3, r3, #32
 800780e:	2b00      	cmp	r3, #0
 8007810:	d02d      	beq.n	800786e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007812:	4b85      	ldr	r3, [pc, #532]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	08db      	lsrs	r3, r3, #3
 8007818:	f003 0303 	and.w	r3, r3, #3
 800781c:	4a83      	ldr	r2, [pc, #524]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800781e:	fa22 f303 	lsr.w	r3, r2, r3
 8007822:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783c:	4b7a      	ldr	r3, [pc, #488]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007844:	ee07 3a90 	vmov	s15, r3
 8007848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007850:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007868:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800786c:	e087      	b.n	800797e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	ee07 3a90 	vmov	s15, r3
 8007874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007878:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007a34 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800787c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007880:	4b69      	ldr	r3, [pc, #420]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007890:	ed97 6a03 	vldr	s12, [r7, #12]
 8007894:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078b0:	e065      	b.n	800797e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	ee07 3a90 	vmov	s15, r3
 80078b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078bc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80078c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c4:	4b58      	ldr	r3, [pc, #352]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078cc:	ee07 3a90 	vmov	s15, r3
 80078d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80078d8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80078dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078f4:	e043      	b.n	800797e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	ee07 3a90 	vmov	s15, r3
 80078fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007900:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007908:	4b47      	ldr	r3, [pc, #284]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800790a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007910:	ee07 3a90 	vmov	s15, r3
 8007914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007918:	ed97 6a03 	vldr	s12, [r7, #12]
 800791c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800792c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007934:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007938:	e021      	b.n	800797e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	ee07 3a90 	vmov	s15, r3
 8007940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007944:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794c:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800794e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007954:	ee07 3a90 	vmov	s15, r3
 8007958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007960:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007978:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800797c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800797e:	4b2a      	ldr	r3, [pc, #168]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007982:	0a5b      	lsrs	r3, r3, #9
 8007984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007988:	ee07 3a90 	vmov	s15, r3
 800798c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007990:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007994:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007998:	edd7 6a07 	vldr	s13, [r7, #28]
 800799c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079a4:	ee17 2a90 	vmov	r2, s15
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80079ac:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b0:	0c1b      	lsrs	r3, r3, #16
 80079b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80079ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079d2:	ee17 2a90 	vmov	r2, s15
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80079da:	4b13      	ldr	r3, [pc, #76]	; (8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	0e1b      	lsrs	r3, r3, #24
 80079e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e4:	ee07 3a90 	vmov	s15, r3
 80079e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80079f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a00:	ee17 2a90 	vmov	r2, s15
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a08:	e008      	b.n	8007a1c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	609a      	str	r2, [r3, #8]
}
 8007a1c:	bf00      	nop
 8007a1e:	3724      	adds	r7, #36	; 0x24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	03d09000 	.word	0x03d09000
 8007a30:	46000000 	.word	0x46000000
 8007a34:	4c742400 	.word	0x4c742400
 8007a38:	4a742400 	.word	0x4a742400
 8007a3c:	4bbebc20 	.word	0x4bbebc20

08007a40 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b089      	sub	sp, #36	; 0x24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a48:	4b9d      	ldr	r3, [pc, #628]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4c:	f003 0303 	and.w	r3, r3, #3
 8007a50:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007a52:	4b9b      	ldr	r3, [pc, #620]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a56:	091b      	lsrs	r3, r3, #4
 8007a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a5c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007a5e:	4b98      	ldr	r3, [pc, #608]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a68:	4b95      	ldr	r3, [pc, #596]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6c:	08db      	lsrs	r3, r3, #3
 8007a6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	fb02 f303 	mul.w	r3, r2, r3
 8007a78:	ee07 3a90 	vmov	s15, r3
 8007a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a80:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 810a 	beq.w	8007ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d05a      	beq.n	8007b48 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d302      	bcc.n	8007a9c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d078      	beq.n	8007b8c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007a9a:	e099      	b.n	8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a9c:	4b88      	ldr	r3, [pc, #544]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0320 	and.w	r3, r3, #32
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d02d      	beq.n	8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007aa8:	4b85      	ldr	r3, [pc, #532]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	08db      	lsrs	r3, r3, #3
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	4a84      	ldr	r2, [pc, #528]	; (8007cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab8:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	ee07 3a90 	vmov	s15, r3
 8007ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad2:	4b7b      	ldr	r3, [pc, #492]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ada:	ee07 3a90 	vmov	s15, r3
 8007ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ae6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007afe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b02:	e087      	b.n	8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	ee07 3a90 	vmov	s15, r3
 8007b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ccc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b16:	4b6a      	ldr	r3, [pc, #424]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b46:	e065      	b.n	8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	ee07 3a90 	vmov	s15, r3
 8007b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b5a:	4b59      	ldr	r3, [pc, #356]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b8a:	e043      	b.n	8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	ee07 3a90 	vmov	s15, r3
 8007b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b9e:	4b48      	ldr	r3, [pc, #288]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bce:	e021      	b.n	8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	ee07 3a90 	vmov	s15, r3
 8007bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007be2:	4b37      	ldr	r3, [pc, #220]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bea:	ee07 3a90 	vmov	s15, r3
 8007bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bf6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c12:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007c14:	4b2a      	ldr	r3, [pc, #168]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c18:	0a5b      	lsrs	r3, r3, #9
 8007c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c3a:	ee17 2a90 	vmov	r2, s15
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007c42:	4b1f      	ldr	r3, [pc, #124]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c46:	0c1b      	lsrs	r3, r3, #16
 8007c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c4c:	ee07 3a90 	vmov	s15, r3
 8007c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c68:	ee17 2a90 	vmov	r2, s15
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007c70:	4b13      	ldr	r3, [pc, #76]	; (8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c74:	0e1b      	lsrs	r3, r3, #24
 8007c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c96:	ee17 2a90 	vmov	r2, s15
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007c9e:	e008      	b.n	8007cb2 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	609a      	str	r2, [r3, #8]
}
 8007cb2:	bf00      	nop
 8007cb4:	3724      	adds	r7, #36	; 0x24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	58024400 	.word	0x58024400
 8007cc4:	03d09000 	.word	0x03d09000
 8007cc8:	46000000 	.word	0x46000000
 8007ccc:	4c742400 	.word	0x4c742400
 8007cd0:	4a742400 	.word	0x4a742400
 8007cd4:	4bbebc20 	.word	0x4bbebc20

08007cd8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ce6:	4b53      	ldr	r3, [pc, #332]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cea:	f003 0303 	and.w	r3, r3, #3
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d101      	bne.n	8007cf6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e099      	b.n	8007e2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007cf6:	4b4f      	ldr	r3, [pc, #316]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a4e      	ldr	r2, [pc, #312]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007cfc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d02:	f7f9 fd1f 	bl	8001744 <HAL_GetTick>
 8007d06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d08:	e008      	b.n	8007d1c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d0a:	f7f9 fd1b 	bl	8001744 <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d901      	bls.n	8007d1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e086      	b.n	8007e2a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d1c:	4b45      	ldr	r3, [pc, #276]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1f0      	bne.n	8007d0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d28:	4b42      	ldr	r3, [pc, #264]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	031b      	lsls	r3, r3, #12
 8007d36:	493f      	ldr	r1, [pc, #252]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	628b      	str	r3, [r1, #40]	; 0x28
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	025b      	lsls	r3, r3, #9
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	431a      	orrs	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	041b      	lsls	r3, r3, #16
 8007d5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	061b      	lsls	r3, r3, #24
 8007d68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d6c:	4931      	ldr	r1, [pc, #196]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007d72:	4b30      	ldr	r3, [pc, #192]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	492d      	ldr	r1, [pc, #180]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d84:	4b2b      	ldr	r3, [pc, #172]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	f023 0220 	bic.w	r2, r3, #32
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	4928      	ldr	r1, [pc, #160]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007d96:	4b27      	ldr	r3, [pc, #156]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	4a26      	ldr	r2, [pc, #152]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007d9c:	f023 0310 	bic.w	r3, r3, #16
 8007da0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007da2:	4b24      	ldr	r3, [pc, #144]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007da6:	4b24      	ldr	r3, [pc, #144]	; (8007e38 <RCCEx_PLL2_Config+0x160>)
 8007da8:	4013      	ands	r3, r2
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	69d2      	ldr	r2, [r2, #28]
 8007dae:	00d2      	lsls	r2, r2, #3
 8007db0:	4920      	ldr	r1, [pc, #128]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007db6:	4b1f      	ldr	r3, [pc, #124]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dba:	4a1e      	ldr	r2, [pc, #120]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007dbc:	f043 0310 	orr.w	r3, r3, #16
 8007dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d106      	bne.n	8007dd6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007dc8:	4b1a      	ldr	r3, [pc, #104]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dcc:	4a19      	ldr	r2, [pc, #100]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007dce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dd4:	e00f      	b.n	8007df6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d106      	bne.n	8007dea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ddc:	4b15      	ldr	r3, [pc, #84]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de0:	4a14      	ldr	r2, [pc, #80]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007de6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007de8:	e005      	b.n	8007df6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007dea:	4b12      	ldr	r3, [pc, #72]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	4a11      	ldr	r2, [pc, #68]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007df0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007df4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007df6:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a0e      	ldr	r2, [pc, #56]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007dfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e02:	f7f9 fc9f 	bl	8001744 <HAL_GetTick>
 8007e06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e08:	e008      	b.n	8007e1c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007e0a:	f7f9 fc9b 	bl	8001744 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d901      	bls.n	8007e1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e006      	b.n	8007e2a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e1c:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <RCCEx_PLL2_Config+0x15c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d0f0      	beq.n	8007e0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	58024400 	.word	0x58024400
 8007e38:	ffff0007 	.word	0xffff0007

08007e3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e4a:	4b53      	ldr	r3, [pc, #332]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4e:	f003 0303 	and.w	r3, r3, #3
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d101      	bne.n	8007e5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e099      	b.n	8007f8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e5a:	4b4f      	ldr	r3, [pc, #316]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a4e      	ldr	r2, [pc, #312]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e66:	f7f9 fc6d 	bl	8001744 <HAL_GetTick>
 8007e6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e6c:	e008      	b.n	8007e80 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e6e:	f7f9 fc69 	bl	8001744 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d901      	bls.n	8007e80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e086      	b.n	8007f8e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e80:	4b45      	ldr	r3, [pc, #276]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f0      	bne.n	8007e6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007e8c:	4b42      	ldr	r3, [pc, #264]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	051b      	lsls	r3, r3, #20
 8007e9a:	493f      	ldr	r1, [pc, #252]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	628b      	str	r3, [r1, #40]	; 0x28
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	025b      	lsls	r3, r3, #9
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	041b      	lsls	r3, r3, #16
 8007ebe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	061b      	lsls	r3, r3, #24
 8007ecc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ed0:	4931      	ldr	r1, [pc, #196]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ed6:	4b30      	ldr	r3, [pc, #192]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	492d      	ldr	r1, [pc, #180]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ee8:	4b2b      	ldr	r3, [pc, #172]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	4928      	ldr	r1, [pc, #160]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007efa:	4b27      	ldr	r3, [pc, #156]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	4a26      	ldr	r2, [pc, #152]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f06:	4b24      	ldr	r3, [pc, #144]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f0a:	4b24      	ldr	r3, [pc, #144]	; (8007f9c <RCCEx_PLL3_Config+0x160>)
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	69d2      	ldr	r2, [r2, #28]
 8007f12:	00d2      	lsls	r2, r2, #3
 8007f14:	4920      	ldr	r1, [pc, #128]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f1a:	4b1f      	ldr	r3, [pc, #124]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	4a1e      	ldr	r2, [pc, #120]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d106      	bne.n	8007f3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f2c:	4b1a      	ldr	r3, [pc, #104]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	4a19      	ldr	r2, [pc, #100]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f38:	e00f      	b.n	8007f5a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d106      	bne.n	8007f4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f40:	4b15      	ldr	r3, [pc, #84]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	4a14      	ldr	r2, [pc, #80]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f4c:	e005      	b.n	8007f5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007f4e:	4b12      	ldr	r3, [pc, #72]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f52:	4a11      	ldr	r2, [pc, #68]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007f5a:	4b0f      	ldr	r3, [pc, #60]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a0e      	ldr	r2, [pc, #56]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f66:	f7f9 fbed 	bl	8001744 <HAL_GetTick>
 8007f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f6c:	e008      	b.n	8007f80 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007f6e:	f7f9 fbe9 	bl	8001744 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d901      	bls.n	8007f80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e006      	b.n	8007f8e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f80:	4b05      	ldr	r3, [pc, #20]	; (8007f98 <RCCEx_PLL3_Config+0x15c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0f0      	beq.n	8007f6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	58024400 	.word	0x58024400
 8007f9c:	ffff0007 	.word	0xffff0007

08007fa0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08a      	sub	sp, #40	; 0x28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e07c      	b.n	80080ac <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10c      	bne.n	8007fd8 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7f9 f89a 	bl	800110c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2203      	movs	r2, #3
 8007fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f867 	bl	80080b4 <HAL_SD_InitCard>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e05d      	b.n	80080ac <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007ff0:	f107 0308 	add.w	r3, r7, #8
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fdbe 	bl	8008b78 <HAL_SD_GetCardStatus>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e052      	b.n	80080ac <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008006:	7e3b      	ldrb	r3, [r7, #24]
 8008008:	b2db      	uxtb	r3, r3
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800800c:	7e7b      	ldrb	r3, [r7, #25]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008016:	2b01      	cmp	r3, #1
 8008018:	d10a      	bne.n	8008030 <HAL_SD_Init+0x90>
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	2b00      	cmp	r3, #0
 800801e:	d102      	bne.n	8008026 <HAL_SD_Init+0x86>
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800802c:	65da      	str	r2, [r3, #92]	; 0x5c
 800802e:	e00b      	b.n	8008048 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008034:	2b01      	cmp	r3, #1
 8008036:	d104      	bne.n	8008042 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800803e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008040:	e002      	b.n	8008048 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fe74 	bl	8008d3c <HAL_SD_ConfigWideBusOperation>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e026      	b.n	80080ac <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800805e:	f7f9 fb71 	bl	8001744 <HAL_GetTick>
 8008062:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008064:	e011      	b.n	800808a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008066:	f7f9 fb6d 	bl	8001744 <HAL_GetTick>
 800806a:	4602      	mov	r2, r0
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008074:	d109      	bne.n	800808a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800807c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e010      	b.n	80080ac <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 ff00 	bl	8008e90 <HAL_SD_GetCardState>
 8008090:	4603      	mov	r3, r0
 8008092:	2b04      	cmp	r3, #4
 8008094:	d1e7      	bne.n	8008066 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3728      	adds	r7, #40	; 0x28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80080b4:	b5b0      	push	{r4, r5, r7, lr}
 80080b6:	b08e      	sub	sp, #56	; 0x38
 80080b8:	af04      	add	r7, sp, #16
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80080bc:	2300      	movs	r3, #0
 80080be:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80080c4:	2300      	movs	r3, #0
 80080c6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80080c8:	2300      	movs	r3, #0
 80080ca:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80080cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80080d0:	f7fe ff90 	bl	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq>
 80080d4:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	0a1b      	lsrs	r3, r3, #8
 80080da:	4a40      	ldr	r2, [pc, #256]	; (80081dc <HAL_SD_InitCard+0x128>)
 80080dc:	fba2 2303 	umull	r2, r3, r2, r3
 80080e0:	091b      	lsrs	r3, r3, #4
 80080e2:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d107      	bne.n	80080fc <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f042 0210 	orr.w	r2, r2, #16
 80080fa:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681d      	ldr	r5, [r3, #0]
 8008100:	466c      	mov	r4, sp
 8008102:	f107 0314 	add.w	r3, r7, #20
 8008106:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800810a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800810e:	f107 0308 	add.w	r3, r7, #8
 8008112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008114:	4628      	mov	r0, r5
 8008116:	f002 fc9b 	bl	800aa50 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f002 fcde 	bl	800aae0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800812a:	fbb2 f3f3 	udiv	r3, r2, r3
 800812e:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	2b00      	cmp	r3, #0
 8008134:	d008      	beq.n	8008148 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008136:	4a2a      	ldr	r2, [pc, #168]	; (80081e0 <HAL_SD_InitCard+0x12c>)
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	fbb2 f3f3 	udiv	r3, r2, r3
 800813e:	3301      	adds	r3, #1
 8008140:	4618      	mov	r0, r3
 8008142:	f7f9 fb0b 	bl	800175c <HAL_Delay>
 8008146:	e002      	b.n	800814e <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8008148:	2002      	movs	r0, #2
 800814a:	f7f9 fb07 	bl	800175c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 ff7c 	bl	800904c <SD_PowerON>
 8008154:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e02e      	b.n	80081d2 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 feab 	bl	8008ed0 <SD_InitCard>
 800817a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00b      	beq.n	800819a <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	431a      	orrs	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e01b      	b.n	80081d2 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081a2:	4618      	mov	r0, r3
 80081a4:	f002 fd32 	bl	800ac0c <SDMMC_CmdBlockLength>
 80081a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00f      	beq.n	80081d0 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a0b      	ldr	r2, [pc, #44]	; (80081e4 <HAL_SD_InitCard+0x130>)
 80081b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	431a      	orrs	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e000      	b.n	80081d2 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3728      	adds	r7, #40	; 0x28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bdb0      	pop	{r4, r5, r7, pc}
 80081da:	bf00      	nop
 80081dc:	014f8b59 	.word	0x014f8b59
 80081e0:	00012110 	.word	0x00012110
 80081e4:	1fe00fff 	.word	0x1fe00fff

080081e8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b092      	sub	sp, #72	; 0x48
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80081f6:	f7f9 faa5 	bl	8001744 <HAL_GetTick>
 80081fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d107      	bne.n	800821a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e167      	b.n	80084ea <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b01      	cmp	r3, #1
 8008224:	f040 815a 	bne.w	80084dc <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800822e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	441a      	add	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008238:	429a      	cmp	r2, r3
 800823a:	d907      	bls.n	800824c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008240:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e14e      	b.n	80084ea <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2203      	movs	r2, #3
 8008250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2200      	movs	r2, #0
 800825a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008260:	2b01      	cmp	r3, #1
 8008262:	d002      	beq.n	800826a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	025b      	lsls	r3, r3, #9
 8008268:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800826a:	f04f 33ff 	mov.w	r3, #4294967295
 800826e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	025b      	lsls	r3, r3, #9
 8008274:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008276:	2390      	movs	r3, #144	; 0x90
 8008278:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800827a:	2302      	movs	r3, #2
 800827c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800827e:	2300      	movs	r3, #0
 8008280:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008282:	2300      	movs	r3, #0
 8008284:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f107 0214 	add.w	r2, r7, #20
 800828e:	4611      	mov	r1, r2
 8008290:	4618      	mov	r0, r3
 8008292:	f002 fc8f 	bl	800abb4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082a4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d90a      	bls.n	80082c2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2202      	movs	r2, #2
 80082b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082b8:	4618      	mov	r0, r3
 80082ba:	f002 fced 	bl	800ac98 <SDMMC_CmdReadMultiBlock>
 80082be:	6478      	str	r0, [r7, #68]	; 0x44
 80082c0:	e009      	b.n	80082d6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2201      	movs	r2, #1
 80082c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082ce:	4618      	mov	r0, r3
 80082d0:	f002 fcbf 	bl	800ac52 <SDMMC_CmdReadSingleBlock>
 80082d4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80082d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d012      	beq.n	8008302 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a84      	ldr	r2, [pc, #528]	; (80084f4 <HAL_SD_ReadBlocks+0x30c>)
 80082e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082ea:	431a      	orrs	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e0f3      	b.n	80084ea <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008306:	e058      	b.n	80083ba <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d033      	beq.n	800837e <HAL_SD_ReadBlocks+0x196>
 8008316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008318:	2b1f      	cmp	r3, #31
 800831a:	d930      	bls.n	800837e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800831c:	2300      	movs	r3, #0
 800831e:	643b      	str	r3, [r7, #64]	; 0x40
 8008320:	e027      	b.n	8008372 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4618      	mov	r0, r3
 8008328:	f002 fbbc 	bl	800aaa4 <SDMMC_ReadFIFO>
 800832c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	b2da      	uxtb	r2, r3
 8008332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008334:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008338:	3301      	adds	r3, #1
 800833a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	0a1b      	lsrs	r3, r3, #8
 8008340:	b2da      	uxtb	r2, r3
 8008342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008344:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008348:	3301      	adds	r3, #1
 800834a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834e:	0c1b      	lsrs	r3, r3, #16
 8008350:	b2da      	uxtb	r2, r3
 8008352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008354:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008358:	3301      	adds	r3, #1
 800835a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	0e1b      	lsrs	r3, r3, #24
 8008360:	b2da      	uxtb	r2, r3
 8008362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008364:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008368:	3301      	adds	r3, #1
 800836a:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800836c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800836e:	3301      	adds	r3, #1
 8008370:	643b      	str	r3, [r7, #64]	; 0x40
 8008372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008374:	2b07      	cmp	r3, #7
 8008376:	d9d4      	bls.n	8008322 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837a:	3b20      	subs	r3, #32
 800837c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800837e:	f7f9 f9e1 	bl	8001744 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800838a:	429a      	cmp	r2, r3
 800838c:	d902      	bls.n	8008394 <HAL_SD_ReadBlocks+0x1ac>
 800838e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008390:	2b00      	cmp	r3, #0
 8008392:	d112      	bne.n	80083ba <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a56      	ldr	r2, [pc, #344]	; (80084f4 <HAL_SD_ReadBlocks+0x30c>)
 800839a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e097      	b.n	80084ea <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d09f      	beq.n	8008308 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68da      	ldr	r2, [r3, #12]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083d6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d022      	beq.n	800842c <HAL_SD_ReadBlocks+0x244>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d91f      	bls.n	800842c <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d01b      	beq.n	800842c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f002 fcb7 	bl	800ad6c <SDMMC_CmdStopTransfer>
 80083fe:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008402:	2b00      	cmp	r3, #0
 8008404:	d012      	beq.n	800842c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a3a      	ldr	r2, [pc, #232]	; (80084f4 <HAL_SD_ReadBlocks+0x30c>)
 800840c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008414:	431a      	orrs	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e05e      	b.n	80084ea <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008432:	f003 0308 	and.w	r3, r3, #8
 8008436:	2b00      	cmp	r3, #0
 8008438:	d012      	beq.n	8008460 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a2d      	ldr	r2, [pc, #180]	; (80084f4 <HAL_SD_ReadBlocks+0x30c>)
 8008440:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	f043 0208 	orr.w	r2, r3, #8
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e044      	b.n	80084ea <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d012      	beq.n	8008494 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a20      	ldr	r2, [pc, #128]	; (80084f4 <HAL_SD_ReadBlocks+0x30c>)
 8008474:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	f043 0202 	orr.w	r2, r3, #2
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e02a      	b.n	80084ea <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d012      	beq.n	80084c8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a13      	ldr	r2, [pc, #76]	; (80084f4 <HAL_SD_ReadBlocks+0x30c>)
 80084a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	f043 0220 	orr.w	r2, r3, #32
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e010      	b.n	80084ea <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a0a      	ldr	r2, [pc, #40]	; (80084f8 <HAL_SD_ReadBlocks+0x310>)
 80084ce:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	e006      	b.n	80084ea <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
  }
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3748      	adds	r7, #72	; 0x48
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	1fe00fff 	.word	0x1fe00fff
 80084f8:	18000f3a 	.word	0x18000f3a

080084fc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b092      	sub	sp, #72	; 0x48
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800850a:	f7f9 f91b 	bl	8001744 <HAL_GetTick>
 800850e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d107      	bne.n	800852e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e16b      	b.n	8008806 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b01      	cmp	r3, #1
 8008538:	f040 815e 	bne.w	80087f8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	441a      	add	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854c:	429a      	cmp	r2, r3
 800854e:	d907      	bls.n	8008560 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008554:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e152      	b.n	8008806 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2203      	movs	r2, #3
 8008564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2200      	movs	r2, #0
 800856e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008574:	2b01      	cmp	r3, #1
 8008576:	d002      	beq.n	800857e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	025b      	lsls	r3, r3, #9
 800857c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800857e:	f04f 33ff 	mov.w	r3, #4294967295
 8008582:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	025b      	lsls	r3, r3, #9
 8008588:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800858a:	2390      	movs	r3, #144	; 0x90
 800858c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800858e:	2300      	movs	r3, #0
 8008590:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008592:	2300      	movs	r3, #0
 8008594:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008596:	2300      	movs	r3, #0
 8008598:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f107 0218 	add.w	r2, r7, #24
 80085a2:	4611      	mov	r1, r2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f002 fb05 	bl	800abb4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68da      	ldr	r2, [r3, #12]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085b8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d90a      	bls.n	80085d6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2220      	movs	r2, #32
 80085c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085cc:	4618      	mov	r0, r3
 80085ce:	f002 fba9 	bl	800ad24 <SDMMC_CmdWriteMultiBlock>
 80085d2:	6478      	str	r0, [r7, #68]	; 0x44
 80085d4:	e009      	b.n	80085ea <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2210      	movs	r2, #16
 80085da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085e2:	4618      	mov	r0, r3
 80085e4:	f002 fb7b 	bl	800acde <SDMMC_CmdWriteSingleBlock>
 80085e8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80085ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d012      	beq.n	8008616 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a86      	ldr	r2, [pc, #536]	; (8008810 <HAL_SD_WriteBlocks+0x314>)
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085fe:	431a      	orrs	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e0f7      	b.n	8008806 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800861a:	e05c      	b.n	80086d6 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d037      	beq.n	800869a <HAL_SD_WriteBlocks+0x19e>
 800862a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862c:	2b1f      	cmp	r3, #31
 800862e:	d934      	bls.n	800869a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008630:	2300      	movs	r3, #0
 8008632:	643b      	str	r3, [r7, #64]	; 0x40
 8008634:	e02b      	b.n	800868e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800863c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863e:	3301      	adds	r3, #1
 8008640:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	021a      	lsls	r2, r3, #8
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	4313      	orrs	r3, r2
 800864c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800864e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008650:	3301      	adds	r3, #1
 8008652:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	041a      	lsls	r2, r3, #16
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008662:	3301      	adds	r3, #1
 8008664:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	061a      	lsls	r2, r3, #24
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	4313      	orrs	r3, r2
 8008670:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008674:	3301      	adds	r3, #1
 8008676:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f107 0214 	add.w	r2, r7, #20
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f002 fa1b 	bl	800aabe <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800868a:	3301      	adds	r3, #1
 800868c:	643b      	str	r3, [r7, #64]	; 0x40
 800868e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008690:	2b07      	cmp	r3, #7
 8008692:	d9d0      	bls.n	8008636 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008696:	3b20      	subs	r3, #32
 8008698:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800869a:	f7f9 f853 	bl	8001744 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d902      	bls.n	80086b0 <HAL_SD_WriteBlocks+0x1b4>
 80086aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d112      	bne.n	80086d6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a56      	ldr	r2, [pc, #344]	; (8008810 <HAL_SD_WriteBlocks+0x314>)
 80086b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086be:	431a      	orrs	r2, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e097      	b.n	8008806 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086dc:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d09b      	beq.n	800861c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086f2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d022      	beq.n	8008748 <HAL_SD_WriteBlocks+0x24c>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d91f      	bls.n	8008748 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870c:	2b03      	cmp	r3, #3
 800870e:	d01b      	beq.n	8008748 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	f002 fb29 	bl	800ad6c <SDMMC_CmdStopTransfer>
 800871a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800871c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800871e:	2b00      	cmp	r3, #0
 8008720:	d012      	beq.n	8008748 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a3a      	ldr	r2, [pc, #232]	; (8008810 <HAL_SD_WriteBlocks+0x314>)
 8008728:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800872e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008730:	431a      	orrs	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e05e      	b.n	8008806 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874e:	f003 0308 	and.w	r3, r3, #8
 8008752:	2b00      	cmp	r3, #0
 8008754:	d012      	beq.n	800877c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a2d      	ldr	r2, [pc, #180]	; (8008810 <HAL_SD_WriteBlocks+0x314>)
 800875c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008762:	f043 0208 	orr.w	r2, r3, #8
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e044      	b.n	8008806 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d012      	beq.n	80087b0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a20      	ldr	r2, [pc, #128]	; (8008810 <HAL_SD_WriteBlocks+0x314>)
 8008790:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008796:	f043 0202 	orr.w	r2, r3, #2
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e02a      	b.n	8008806 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b6:	f003 0310 	and.w	r3, r3, #16
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d012      	beq.n	80087e4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a13      	ldr	r2, [pc, #76]	; (8008810 <HAL_SD_WriteBlocks+0x314>)
 80087c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ca:	f043 0210 	orr.w	r2, r3, #16
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e010      	b.n	8008806 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a0a      	ldr	r2, [pc, #40]	; (8008814 <HAL_SD_WriteBlocks+0x318>)
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	e006      	b.n	8008806 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
  }
}
 8008806:	4618      	mov	r0, r3
 8008808:	3748      	adds	r7, #72	; 0x48
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	1fe00fff 	.word	0x1fe00fff
 8008814:	18000f3a 	.word	0x18000f3a

08008818 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8008822:	bf00      	nop
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
	...

08008830 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800883e:	0f9b      	lsrs	r3, r3, #30
 8008840:	b2da      	uxtb	r2, r3
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800884a:	0e9b      	lsrs	r3, r3, #26
 800884c:	b2db      	uxtb	r3, r3
 800884e:	f003 030f 	and.w	r3, r3, #15
 8008852:	b2da      	uxtb	r2, r3
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800885c:	0e1b      	lsrs	r3, r3, #24
 800885e:	b2db      	uxtb	r3, r3
 8008860:	f003 0303 	and.w	r3, r3, #3
 8008864:	b2da      	uxtb	r2, r3
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	b2da      	uxtb	r2, r3
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800887a:	0a1b      	lsrs	r3, r3, #8
 800887c:	b2da      	uxtb	r2, r3
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008886:	b2da      	uxtb	r2, r3
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008890:	0d1b      	lsrs	r3, r3, #20
 8008892:	b29a      	uxth	r2, r3
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800889c:	0c1b      	lsrs	r3, r3, #16
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ae:	0bdb      	lsrs	r3, r3, #15
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088c0:	0b9b      	lsrs	r3, r3, #14
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088d2:	0b5b      	lsrs	r3, r3, #13
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e4:	0b1b      	lsrs	r3, r3, #12
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2200      	movs	r2, #0
 80088f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d163      	bne.n	80089c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008904:	009a      	lsls	r2, r3, #2
 8008906:	f640 73fc 	movw	r3, #4092	; 0xffc
 800890a:	4013      	ands	r3, r2
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008910:	0f92      	lsrs	r2, r2, #30
 8008912:	431a      	orrs	r2, r3
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800891c:	0edb      	lsrs	r3, r3, #27
 800891e:	b2db      	uxtb	r3, r3
 8008920:	f003 0307 	and.w	r3, r3, #7
 8008924:	b2da      	uxtb	r2, r3
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800892e:	0e1b      	lsrs	r3, r3, #24
 8008930:	b2db      	uxtb	r3, r3
 8008932:	f003 0307 	and.w	r3, r3, #7
 8008936:	b2da      	uxtb	r2, r3
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008940:	0d5b      	lsrs	r3, r3, #21
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	b2da      	uxtb	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008952:	0c9b      	lsrs	r3, r3, #18
 8008954:	b2db      	uxtb	r3, r3
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	b2da      	uxtb	r2, r3
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008964:	0bdb      	lsrs	r3, r3, #15
 8008966:	b2db      	uxtb	r3, r3
 8008968:	f003 0307 	and.w	r3, r3, #7
 800896c:	b2da      	uxtb	r2, r3
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	7e1b      	ldrb	r3, [r3, #24]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	3302      	adds	r3, #2
 8008988:	2201      	movs	r2, #1
 800898a:	fa02 f303 	lsl.w	r3, r2, r3
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008992:	fb02 f203 	mul.w	r2, r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	7a1b      	ldrb	r3, [r3, #8]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	f003 030f 	and.w	r3, r3, #15
 80089a4:	2201      	movs	r2, #1
 80089a6:	409a      	lsls	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80089b4:	0a52      	lsrs	r2, r2, #9
 80089b6:	fb02 f203 	mul.w	r2, r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089c4:	659a      	str	r2, [r3, #88]	; 0x58
 80089c6:	e031      	b.n	8008a2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d11d      	bne.n	8008a0c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d4:	041b      	lsls	r3, r3, #16
 80089d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089de:	0c1b      	lsrs	r3, r3, #16
 80089e0:	431a      	orrs	r2, r3
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	3301      	adds	r3, #1
 80089ec:	029a      	lsls	r2, r3, #10
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a00:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	659a      	str	r2, [r3, #88]	; 0x58
 8008a0a:	e00f      	b.n	8008a2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a58      	ldr	r2, [pc, #352]	; (8008b74 <HAL_SD_GetCardCSD+0x344>)
 8008a12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e09d      	b.n	8008b68 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a30:	0b9b      	lsrs	r3, r3, #14
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a42:	09db      	lsrs	r3, r3, #7
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a64:	0fdb      	lsrs	r3, r3, #31
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a70:	0f5b      	lsrs	r3, r3, #29
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	f003 0303 	and.w	r3, r3, #3
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a82:	0e9b      	lsrs	r3, r3, #26
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a94:	0d9b      	lsrs	r3, r3, #22
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	f003 030f 	and.w	r3, r3, #15
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aa6:	0d5b      	lsrs	r3, r3, #21
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ac2:	0c1b      	lsrs	r3, r3, #16
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ad6:	0bdb      	lsrs	r3, r3, #15
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aea:	0b9b      	lsrs	r3, r3, #14
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008afe:	0b5b      	lsrs	r3, r3, #13
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b12:	0b1b      	lsrs	r3, r3, #12
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b26:	0a9b      	lsrs	r3, r3, #10
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	f003 0303 	and.w	r3, r3, #3
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b3a:	0a1b      	lsrs	r3, r3, #8
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	f003 0303 	and.w	r3, r3, #3
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b4e:	085b      	lsrs	r3, r3, #1
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	1fe00fff 	.word	0x1fe00fff

08008b78 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b094      	sub	sp, #80	; 0x50
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008b88:	f107 0308 	add.w	r3, r7, #8
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fb64 	bl	800925c <SD_SendSDStatus>
 8008b94:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d011      	beq.n	8008bc0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a4f      	ldr	r2, [pc, #316]	; (8008ce0 <HAL_SD_GetCardStatus+0x168>)
 8008ba2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008baa:	431a      	orrs	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008bbe:	e070      	b.n	8008ca2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	099b      	lsrs	r3, r3, #6
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	0a1b      	lsrs	r3, r3, #8
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	0e1b      	lsrs	r3, r3, #24
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	061a      	lsls	r2, r3, #24
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	021b      	lsls	r3, r3, #8
 8008c02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c06:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	0a1b      	lsrs	r3, r3, #8
 8008c0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c10:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	0e1b      	lsrs	r3, r3, #24
 8008c16:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	0a1b      	lsrs	r3, r3, #8
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	0d1b      	lsrs	r3, r3, #20
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f003 030f 	and.w	r3, r3, #15
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	0c1b      	lsrs	r3, r3, #16
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	4313      	orrs	r3, r2
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	0a9b      	lsrs	r3, r3, #10
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	0a1b      	lsrs	r3, r3, #8
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	f003 0303 	and.w	r3, r3, #3
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	091b      	lsrs	r3, r3, #4
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	f003 030f 	and.w	r3, r3, #15
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	f003 030f 	and.w	r3, r3, #15
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	0e1b      	lsrs	r3, r3, #24
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008caa:	4618      	mov	r0, r3
 8008cac:	f001 ffae 	bl	800ac0c <SDMMC_CmdBlockLength>
 8008cb0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00d      	beq.n	8008cd4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a08      	ldr	r2, [pc, #32]	; (8008ce0 <HAL_SD_GetCardStatus+0x168>)
 8008cbe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cc4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008cd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3750      	adds	r7, #80	; 0x50
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	1fe00fff 	.word	0x1fe00fff

08008ce4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008d3c:	b5b0      	push	{r4, r5, r7, lr}
 8008d3e:	b08e      	sub	sp, #56	; 0x38
 8008d40:	af04      	add	r7, sp, #16
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2203      	movs	r2, #3
 8008d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d02e      	beq.n	8008dba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d62:	d106      	bne.n	8008d72 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	639a      	str	r2, [r3, #56]	; 0x38
 8008d70:	e029      	b.n	8008dc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d78:	d10a      	bne.n	8008d90 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fb66 	bl	800944c <SD_WideBus_Enable>
 8008d80:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	431a      	orrs	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	639a      	str	r2, [r3, #56]	; 0x38
 8008d8e:	e01a      	b.n	8008dc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10a      	bne.n	8008dac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fba3 	bl	80094e2 <SD_WideBus_Disable>
 8008d9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008da2:	6a3b      	ldr	r3, [r7, #32]
 8008da4:	431a      	orrs	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	639a      	str	r2, [r3, #56]	; 0x38
 8008daa:	e00c      	b.n	8008dc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	639a      	str	r2, [r3, #56]	; 0x38
 8008db8:	e005      	b.n	8008dc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d007      	beq.n	8008dde <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a2e      	ldr	r2, [pc, #184]	; (8008e8c <HAL_SD_ConfigWideBusOperation+0x150>)
 8008dd4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ddc:	e034      	b.n	8008e48 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d903      	bls.n	8008e04 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	61bb      	str	r3, [r7, #24]
 8008e02:	e012      	b.n	8008e2a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e0c:	d103      	bne.n	8008e16 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	61bb      	str	r3, [r7, #24]
 8008e14:	e009      	b.n	8008e2a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e1e:	d102      	bne.n	8008e26 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8008e20:	2302      	movs	r3, #2
 8008e22:	61bb      	str	r3, [r7, #24]
 8008e24:	e001      	b.n	8008e2a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8008e26:	2304      	movs	r3, #4
 8008e28:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681d      	ldr	r5, [r3, #0]
 8008e2e:	466c      	mov	r4, sp
 8008e30:	f107 0314 	add.w	r3, r7, #20
 8008e34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e3c:	f107 0308 	add.w	r3, r7, #8
 8008e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e42:	4628      	mov	r0, r5
 8008e44:	f001 fe04 	bl	800aa50 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e50:	4618      	mov	r0, r3
 8008e52:	f001 fedb 	bl	800ac0c <SDMMC_CmdBlockLength>
 8008e56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00c      	beq.n	8008e78 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a0a      	ldr	r2, [pc, #40]	; (8008e8c <HAL_SD_ConfigWideBusOperation+0x150>)
 8008e64:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	431a      	orrs	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3728      	adds	r7, #40	; 0x28
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8008e8c:	1fe00fff 	.word	0x1fe00fff

08008e90 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008e9c:	f107 030c 	add.w	r3, r7, #12
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 faaa 	bl	80093fc <SD_SendStatus>
 8008ea8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d005      	beq.n	8008ebc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	0a5b      	lsrs	r3, r3, #9
 8008ec0:	f003 030f 	and.w	r3, r3, #15
 8008ec4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008ec6:	693b      	ldr	r3, [r7, #16]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ed0:	b590      	push	{r4, r7, lr}
 8008ed2:	b091      	sub	sp, #68	; 0x44
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f001 fe0e 	bl	800ab02 <SDMMC_GetPowerState>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d102      	bne.n	8008ef2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008eec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ef0:	e0a8      	b.n	8009044 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d02e      	beq.n	8008f58 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f002 f85a 	bl	800afb8 <SDMMC_CmdSendCID>
 8008f04:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <SD_InitCard+0x40>
    {
      return errorstate;
 8008f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f0e:	e099      	b.n	8009044 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2100      	movs	r1, #0
 8008f16:	4618      	mov	r0, r3
 8008f18:	f001 fe39 	bl	800ab8e <SDMMC_GetResponse>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2104      	movs	r1, #4
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f001 fe30 	bl	800ab8e <SDMMC_GetResponse>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2108      	movs	r1, #8
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f001 fe27 	bl	800ab8e <SDMMC_GetResponse>
 8008f40:	4602      	mov	r2, r0
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	210c      	movs	r1, #12
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f001 fe1e 	bl	800ab8e <SDMMC_GetResponse>
 8008f52:	4602      	mov	r2, r0
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d00d      	beq.n	8008f7c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f107 020e 	add.w	r2, r7, #14
 8008f68:	4611      	mov	r1, r2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f002 f863 	bl	800b036 <SDMMC_CmdSetRelAdd>
 8008f70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <SD_InitCard+0xac>
    {
      return errorstate;
 8008f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7a:	e063      	b.n	8009044 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f80:	2b03      	cmp	r3, #3
 8008f82:	d036      	beq.n	8008ff2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008f84:	89fb      	ldrh	r3, [r7, #14]
 8008f86:	461a      	mov	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f94:	041b      	lsls	r3, r3, #16
 8008f96:	4619      	mov	r1, r3
 8008f98:	4610      	mov	r0, r2
 8008f9a:	f002 f82c 	bl	800aff6 <SDMMC_CmdSendCSD>
 8008f9e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <SD_InitCard+0xda>
    {
      return errorstate;
 8008fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa8:	e04c      	b.n	8009044 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2100      	movs	r1, #0
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f001 fdec 	bl	800ab8e <SDMMC_GetResponse>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2104      	movs	r1, #4
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f001 fde3 	bl	800ab8e <SDMMC_GetResponse>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2108      	movs	r1, #8
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f001 fdda 	bl	800ab8e <SDMMC_GetResponse>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	210c      	movs	r1, #12
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f001 fdd1 	bl	800ab8e <SDMMC_GetResponse>
 8008fec:	4602      	mov	r2, r0
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2104      	movs	r1, #4
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 fdc8 	bl	800ab8e <SDMMC_GetResponse>
 8008ffe:	4603      	mov	r3, r0
 8009000:	0d1a      	lsrs	r2, r3, #20
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009006:	f107 0310 	add.w	r3, r7, #16
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff fc0f 	bl	8008830 <HAL_SD_GetCardCSD>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009018:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800901c:	e012      	b.n	8009044 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6819      	ldr	r1, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009026:	041b      	lsls	r3, r3, #16
 8009028:	f04f 0400 	mov.w	r4, #0
 800902c:	461a      	mov	r2, r3
 800902e:	4623      	mov	r3, r4
 8009030:	4608      	mov	r0, r1
 8009032:	f001 fed7 	bl	800ade4 <SDMMC_CmdSelDesel>
 8009036:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <SD_InitCard+0x172>
  {
    return errorstate;
 800903e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009040:	e000      	b.n	8009044 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3744      	adds	r7, #68	; 0x44
 8009048:	46bd      	mov	sp, r7
 800904a:	bd90      	pop	{r4, r7, pc}

0800904c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b088      	sub	sp, #32
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009058:	2300      	movs	r3, #0
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	2300      	movs	r3, #0
 800905e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8009060:	f7f8 fb70 	bl	8001744 <HAL_GetTick>
 8009064:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4618      	mov	r0, r3
 800906c:	f001 fede 	bl	800ae2c <SDMMC_CmdGoIdleState>
 8009070:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <SD_PowerON+0x30>
  {
    return errorstate;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	e0e9      	b.n	8009250 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4618      	mov	r0, r3
 8009082:	f001 fef1 	bl	800ae68 <SDMMC_CmdOperCond>
 8009086:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00d      	beq.n	80090aa <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4618      	mov	r0, r3
 800909a:	f001 fec7 	bl	800ae2c <SDMMC_CmdGoIdleState>
 800909e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d004      	beq.n	80090b0 <SD_PowerON+0x64>
    {
      return errorstate;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	e0d2      	b.n	8009250 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d137      	bne.n	8009128 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fef2 	bl	800aea8 <SDMMC_CmdAppCommand>
 80090c4:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d02d      	beq.n	8009128 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090d0:	e0be      	b.n	8009250 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2100      	movs	r1, #0
 80090d8:	4618      	mov	r0, r3
 80090da:	f001 fee5 	bl	800aea8 <SDMMC_CmdAppCommand>
 80090de:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <SD_PowerON+0x9e>
    {
      return errorstate;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	e0b2      	b.n	8009250 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	495a      	ldr	r1, [pc, #360]	; (8009258 <SD_PowerON+0x20c>)
 80090f0:	4618      	mov	r0, r3
 80090f2:	f001 fefc 	bl	800aeee <SDMMC_CmdAppOperCommand>
 80090f6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d002      	beq.n	8009104 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009102:	e0a5      	b.n	8009250 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2100      	movs	r1, #0
 800910a:	4618      	mov	r0, r3
 800910c:	f001 fd3f 	bl	800ab8e <SDMMC_GetResponse>
 8009110:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	0fdb      	lsrs	r3, r3, #31
 8009116:	2b01      	cmp	r3, #1
 8009118:	d101      	bne.n	800911e <SD_PowerON+0xd2>
 800911a:	2301      	movs	r3, #1
 800911c:	e000      	b.n	8009120 <SD_PowerON+0xd4>
 800911e:	2300      	movs	r3, #0
 8009120:	61bb      	str	r3, [r7, #24]

    count++;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3301      	adds	r3, #1
 8009126:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800912e:	4293      	cmp	r3, r2
 8009130:	d802      	bhi.n	8009138 <SD_PowerON+0xec>
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d0cc      	beq.n	80090d2 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800913e:	4293      	cmp	r3, r2
 8009140:	d902      	bls.n	8009148 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009142:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009146:	e083      	b.n	8009250 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d07d      	beq.n	800924e <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2201      	movs	r2, #1
 8009156:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	2b02      	cmp	r3, #2
 800915e:	d176      	bne.n	800924e <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d071      	beq.n	800924e <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009170:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f042 0208 	orr.w	r2, r2, #8
 8009180:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f001 ffbc 	bl	800b104 <SDMMC_CmdVoltageSwitch>
 800918c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00c      	beq.n	80091ae <SD_PowerON+0x162>
        {
          return errorstate;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	e05b      	b.n	8009250 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009198:	f7f8 fad4 	bl	8001744 <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a6:	d102      	bne.n	80091ae <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80091a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091ac:	e050      	b.n	8009250 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091bc:	d1ec      	bne.n	8009198 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80091c6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091d6:	d002      	beq.n	80091de <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80091d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091dc:	e038      	b.n	8009250 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80091de:	2001      	movs	r0, #1
 80091e0:	f7ff fb1a 	bl	8008818 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0204 	orr.w	r2, r2, #4
 80091f2:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80091f4:	e00a      	b.n	800920c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80091f6:	f7f8 faa5 	bl	8001744 <HAL_GetTick>
 80091fa:	4602      	mov	r2, r0
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009204:	d102      	bne.n	800920c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009206:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800920a:	e021      	b.n	8009250 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800921a:	d1ec      	bne.n	80091f6 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009224:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009234:	d102      	bne.n	800923c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009236:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800923a:	e009      	b.n	8009250 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2213      	movs	r2, #19
 8009242:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f04f 32ff 	mov.w	r2, #4294967295
 800924c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3720      	adds	r7, #32
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	c1100000 	.word	0xc1100000

0800925c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08c      	sub	sp, #48	; 0x30
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009266:	f7f8 fa6d 	bl	8001744 <HAL_GetTick>
 800926a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2100      	movs	r1, #0
 8009276:	4618      	mov	r0, r3
 8009278:	f001 fc89 	bl	800ab8e <SDMMC_GetResponse>
 800927c:	4603      	mov	r3, r0
 800927e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009286:	d102      	bne.n	800928e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009288:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800928c:	e0b0      	b.n	80093f0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2140      	movs	r1, #64	; 0x40
 8009294:	4618      	mov	r0, r3
 8009296:	f001 fcb9 	bl	800ac0c <SDMMC_CmdBlockLength>
 800929a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d005      	beq.n	80092ae <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	e0a0      	b.n	80093f0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092b6:	041b      	lsls	r3, r3, #16
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f001 fdf4 	bl	800aea8 <SDMMC_CmdAppCommand>
 80092c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d005      	beq.n	80092d4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80092d0:	6a3b      	ldr	r3, [r7, #32]
 80092d2:	e08d      	b.n	80093f0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092d4:	f04f 33ff 	mov.w	r3, #4294967295
 80092d8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80092da:	2340      	movs	r3, #64	; 0x40
 80092dc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80092de:	2360      	movs	r3, #96	; 0x60
 80092e0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80092e2:	2302      	movs	r3, #2
 80092e4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80092ea:	2301      	movs	r3, #1
 80092ec:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f107 0208 	add.w	r2, r7, #8
 80092f6:	4611      	mov	r1, r2
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 fc5b 	bl	800abb4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4618      	mov	r0, r3
 8009304:	f001 fedc 	bl	800b0c0 <SDMMC_CmdStatusRegister>
 8009308:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d02b      	beq.n	8009368 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	e069      	b.n	80093f0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d013      	beq.n	8009352 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800932a:	2300      	movs	r3, #0
 800932c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800932e:	e00d      	b.n	800934c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4618      	mov	r0, r3
 8009336:	f001 fbb5 	bl	800aaa4 <SDMMC_ReadFIFO>
 800933a:	4602      	mov	r2, r0
 800933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933e:	601a      	str	r2, [r3, #0]
        pData++;
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	3304      	adds	r3, #4
 8009344:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009348:	3301      	adds	r3, #1
 800934a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800934c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934e:	2b07      	cmp	r3, #7
 8009350:	d9ee      	bls.n	8009330 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009352:	f7f8 f9f7 	bl	8001744 <HAL_GetTick>
 8009356:	4602      	mov	r2, r0
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009360:	d102      	bne.n	8009368 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009362:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009366:	e043      	b.n	80093f0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0d2      	beq.n	800931c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937c:	f003 0308 	and.w	r3, r3, #8
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009384:	2308      	movs	r3, #8
 8009386:	e033      	b.n	80093f0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009396:	2302      	movs	r3, #2
 8009398:	e02a      	b.n	80093f0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a0:	f003 0320 	and.w	r3, r3, #32
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d017      	beq.n	80093d8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80093a8:	2320      	movs	r3, #32
 80093aa:	e021      	b.n	80093f0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f001 fb77 	bl	800aaa4 <SDMMC_ReadFIFO>
 80093b6:	4602      	mov	r2, r0
 80093b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ba:	601a      	str	r2, [r3, #0]
    pData++;
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	3304      	adds	r3, #4
 80093c0:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80093c2:	f7f8 f9bf 	bl	8001744 <HAL_GetTick>
 80093c6:	4602      	mov	r2, r0
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d0:	d102      	bne.n	80093d8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80093d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093d6:	e00b      	b.n	80093f0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1e2      	bne.n	80093ac <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a03      	ldr	r2, [pc, #12]	; (80093f8 <SD_SendSDStatus+0x19c>)
 80093ec:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3730      	adds	r7, #48	; 0x30
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	18000f3a 	.word	0x18000f3a

080093fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d102      	bne.n	8009412 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800940c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009410:	e018      	b.n	8009444 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800941a:	041b      	lsls	r3, r3, #16
 800941c:	4619      	mov	r1, r3
 800941e:	4610      	mov	r0, r2
 8009420:	f001 fe2b 	bl	800b07a <SDMMC_CmdSendStatus>
 8009424:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <SD_SendStatus+0x34>
  {
    return errorstate;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	e009      	b.n	8009444 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2100      	movs	r1, #0
 8009436:	4618      	mov	r0, r3
 8009438:	f001 fba9 	bl	800ab8e <SDMMC_GetResponse>
 800943c:	4602      	mov	r2, r0
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009454:	2300      	movs	r3, #0
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	2300      	movs	r3, #0
 800945a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2100      	movs	r1, #0
 8009462:	4618      	mov	r0, r3
 8009464:	f001 fb93 	bl	800ab8e <SDMMC_GetResponse>
 8009468:	4603      	mov	r3, r0
 800946a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800946e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009472:	d102      	bne.n	800947a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009474:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009478:	e02f      	b.n	80094da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800947a:	f107 030c 	add.w	r3, r7, #12
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f879 	bl	8009578 <SD_FindSCR>
 8009486:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	e023      	b.n	80094da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009498:	2b00      	cmp	r3, #0
 800949a:	d01c      	beq.n	80094d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a4:	041b      	lsls	r3, r3, #16
 80094a6:	4619      	mov	r1, r3
 80094a8:	4610      	mov	r0, r2
 80094aa:	f001 fcfd 	bl	800aea8 <SDMMC_CmdAppCommand>
 80094ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	e00f      	b.n	80094da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2102      	movs	r1, #2
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 fd34 	bl	800af2e <SDMMC_CmdBusWidth>
 80094c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	e003      	b.n	80094da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	e001      	b.n	80094da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b086      	sub	sp, #24
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80094ea:	2300      	movs	r3, #0
 80094ec:	60fb      	str	r3, [r7, #12]
 80094ee:	2300      	movs	r3, #0
 80094f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2100      	movs	r1, #0
 80094f8:	4618      	mov	r0, r3
 80094fa:	f001 fb48 	bl	800ab8e <SDMMC_GetResponse>
 80094fe:	4603      	mov	r3, r0
 8009500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009508:	d102      	bne.n	8009510 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800950a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800950e:	e02f      	b.n	8009570 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009510:	f107 030c 	add.w	r3, r7, #12
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f82e 	bl	8009578 <SD_FindSCR>
 800951c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	e023      	b.n	8009570 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d01c      	beq.n	800956c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800953a:	041b      	lsls	r3, r3, #16
 800953c:	4619      	mov	r1, r3
 800953e:	4610      	mov	r0, r2
 8009540:	f001 fcb2 	bl	800aea8 <SDMMC_CmdAppCommand>
 8009544:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	e00f      	b.n	8009570 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2100      	movs	r1, #0
 8009556:	4618      	mov	r0, r3
 8009558:	f001 fce9 	bl	800af2e <SDMMC_CmdBusWidth>
 800955c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	e003      	b.n	8009570 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009568:	2300      	movs	r3, #0
 800956a:	e001      	b.n	8009570 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800956c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009570:	4618      	mov	r0, r3
 8009572:	3718      	adds	r7, #24
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b08e      	sub	sp, #56	; 0x38
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009582:	f7f8 f8df 	bl	8001744 <HAL_GetTick>
 8009586:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009588:	2300      	movs	r3, #0
 800958a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800958c:	2300      	movs	r3, #0
 800958e:	60bb      	str	r3, [r7, #8]
 8009590:	2300      	movs	r3, #0
 8009592:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2108      	movs	r1, #8
 800959e:	4618      	mov	r0, r3
 80095a0:	f001 fb34 	bl	800ac0c <SDMMC_CmdBlockLength>
 80095a4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	e0ad      	b.n	800970c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095b8:	041b      	lsls	r3, r3, #16
 80095ba:	4619      	mov	r1, r3
 80095bc:	4610      	mov	r0, r2
 80095be:	f001 fc73 	bl	800aea8 <SDMMC_CmdAppCommand>
 80095c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80095c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <SD_FindSCR+0x56>
  {
    return errorstate;
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	e09e      	b.n	800970c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80095ce:	f04f 33ff 	mov.w	r3, #4294967295
 80095d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80095d4:	2308      	movs	r3, #8
 80095d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80095d8:	2330      	movs	r3, #48	; 0x30
 80095da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80095dc:	2302      	movs	r3, #2
 80095de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80095e4:	2301      	movs	r3, #1
 80095e6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f107 0210 	add.w	r2, r7, #16
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f001 fade 	bl	800abb4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f001 fcb9 	bl	800af74 <SDMMC_CmdSendSCR>
 8009602:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009606:	2b00      	cmp	r3, #0
 8009608:	d027      	beq.n	800965a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800960a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960c:	e07e      	b.n	800970c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d113      	bne.n	8009644 <SD_FindSCR+0xcc>
 800961c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961e:	2b00      	cmp	r3, #0
 8009620:	d110      	bne.n	8009644 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4618      	mov	r0, r3
 8009628:	f001 fa3c 	bl	800aaa4 <SDMMC_ReadFIFO>
 800962c:	4603      	mov	r3, r0
 800962e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4618      	mov	r0, r3
 8009636:	f001 fa35 	bl	800aaa4 <SDMMC_ReadFIFO>
 800963a:	4603      	mov	r3, r0
 800963c:	60fb      	str	r3, [r7, #12]
      index++;
 800963e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009640:	3301      	adds	r3, #1
 8009642:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009644:	f7f8 f87e 	bl	8001744 <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009652:	d102      	bne.n	800965a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009654:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009658:	e058      	b.n	800970c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009660:	f240 532a 	movw	r3, #1322	; 0x52a
 8009664:	4013      	ands	r3, r2
 8009666:	2b00      	cmp	r3, #0
 8009668:	d0d1      	beq.n	800960e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009670:	f003 0308 	and.w	r3, r3, #8
 8009674:	2b00      	cmp	r3, #0
 8009676:	d005      	beq.n	8009684 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2208      	movs	r2, #8
 800967e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009680:	2308      	movs	r3, #8
 8009682:	e043      	b.n	800970c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968a:	f003 0302 	and.w	r3, r3, #2
 800968e:	2b00      	cmp	r3, #0
 8009690:	d005      	beq.n	800969e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2202      	movs	r2, #2
 8009698:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800969a:	2302      	movs	r3, #2
 800969c:	e036      	b.n	800970c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a4:	f003 0320 	and.w	r3, r3, #32
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d005      	beq.n	80096b8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2220      	movs	r2, #32
 80096b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80096b4:	2320      	movs	r3, #32
 80096b6:	e029      	b.n	800970c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a15      	ldr	r2, [pc, #84]	; (8009714 <SD_FindSCR+0x19c>)
 80096be:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	061a      	lsls	r2, r3, #24
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	021b      	lsls	r3, r3, #8
 80096c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096cc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	0a1b      	lsrs	r3, r3, #8
 80096d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80096d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	0e1b      	lsrs	r3, r3, #24
 80096dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80096de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e0:	601a      	str	r2, [r3, #0]
    scr++;
 80096e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e4:	3304      	adds	r3, #4
 80096e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	061a      	lsls	r2, r3, #24
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	021b      	lsls	r3, r3, #8
 80096f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096f4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	0a1b      	lsrs	r3, r3, #8
 80096fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80096fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	0e1b      	lsrs	r3, r3, #24
 8009704:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009708:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3738      	adds	r7, #56	; 0x38
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	18000f3a 	.word	0x18000f3a

08009718 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e0e2      	b.n	80098f4 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a70      	ldr	r2, [pc, #448]	; (80098fc <HAL_SPI_Init+0x1e4>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d00f      	beq.n	800975e <HAL_SPI_Init+0x46>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a6f      	ldr	r2, [pc, #444]	; (8009900 <HAL_SPI_Init+0x1e8>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d00a      	beq.n	800975e <HAL_SPI_Init+0x46>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a6d      	ldr	r2, [pc, #436]	; (8009904 <HAL_SPI_Init+0x1ec>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d005      	beq.n	800975e <HAL_SPI_Init+0x46>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	2b0f      	cmp	r3, #15
 8009758:	d901      	bls.n	800975e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e0ca      	b.n	80098f4 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f8d2 	bl	8009908 <SPI_GetPacketSize>
 8009764:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a64      	ldr	r2, [pc, #400]	; (80098fc <HAL_SPI_Init+0x1e4>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d00c      	beq.n	800978a <HAL_SPI_Init+0x72>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a62      	ldr	r2, [pc, #392]	; (8009900 <HAL_SPI_Init+0x1e8>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d007      	beq.n	800978a <HAL_SPI_Init+0x72>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a61      	ldr	r2, [pc, #388]	; (8009904 <HAL_SPI_Init+0x1ec>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d002      	beq.n	800978a <HAL_SPI_Init+0x72>
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b08      	cmp	r3, #8
 8009788:	d811      	bhi.n	80097ae <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800978e:	4a5b      	ldr	r2, [pc, #364]	; (80098fc <HAL_SPI_Init+0x1e4>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d009      	beq.n	80097a8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a59      	ldr	r2, [pc, #356]	; (8009900 <HAL_SPI_Init+0x1e8>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d004      	beq.n	80097a8 <HAL_SPI_Init+0x90>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a58      	ldr	r2, [pc, #352]	; (8009904 <HAL_SPI_Init+0x1ec>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d104      	bne.n	80097b2 <HAL_SPI_Init+0x9a>
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2b10      	cmp	r3, #16
 80097ac:	d901      	bls.n	80097b2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e0a0      	b.n	80098f4 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d106      	bne.n	80097cc <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7f7 fd0c 	bl	80011e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0201 	bic.w	r2, r2, #1
 80097e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097ec:	d110      	bne.n	8009810 <HAL_SPI_Init+0xf8>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097f6:	d10b      	bne.n	8009810 <HAL_SPI_Init+0xf8>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d107      	bne.n	8009810 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800980e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	69da      	ldr	r2, [r3, #28]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009818:	431a      	orrs	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	431a      	orrs	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009822:	ea42 0103 	orr.w	r1, r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68da      	ldr	r2, [r3, #12]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	430a      	orrs	r2, r1
 8009830:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009840:	431a      	orrs	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	431a      	orrs	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	431a      	orrs	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	431a      	orrs	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a1b      	ldr	r3, [r3, #32]
 8009858:	431a      	orrs	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	431a      	orrs	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009864:	431a      	orrs	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	431a      	orrs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009870:	ea42 0103 	orr.w	r1, r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	430a      	orrs	r2, r1
 800987e:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d113      	bne.n	80098b0 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800989a:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098ae:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f022 0201 	bic.w	r2, r2, #1
 80098be:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00a      	beq.n	80098e2 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	430a      	orrs	r2, r1
 80098e0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	40013000 	.word	0x40013000
 8009900:	40003800 	.word	0x40003800
 8009904:	40003c00 	.word	0x40003c00

08009908 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	3301      	adds	r3, #1
 8009918:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	3301      	adds	r3, #1
 8009920:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	3307      	adds	r3, #7
 8009926:	08db      	lsrs	r3, r3, #3
 8009928:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b082      	sub	sp, #8
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e042      	b.n	80099d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009956:	2b00      	cmp	r3, #0
 8009958:	d106      	bne.n	8009968 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7f7 fc88 	bl	8001278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2224      	movs	r2, #36	; 0x24
 800996c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f022 0201 	bic.w	r2, r2, #1
 800997e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f82d 	bl	80099e0 <UART_SetConfig>
 8009986:	4603      	mov	r3, r0
 8009988:	2b01      	cmp	r3, #1
 800998a:	d101      	bne.n	8009990 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	e022      	b.n	80099d6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fdd1 	bl	800a540 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689a      	ldr	r2, [r3, #8]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f042 0201 	orr.w	r2, r2, #1
 80099cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fe58 	bl	800a684 <UART_CheckIdleState>
 80099d4:	4603      	mov	r3, r0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
	...

080099e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80099e4:	b08e      	sub	sp, #56	; 0x38
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	431a      	orrs	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	431a      	orrs	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	4bc1      	ldr	r3, [pc, #772]	; (8009d20 <UART_SetConfig+0x340>)
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	6812      	ldr	r2, [r2, #0]
 8009a20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a22:	430b      	orrs	r3, r1
 8009a24:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	430a      	orrs	r2, r1
 8009a3a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4ab7      	ldr	r2, [pc, #732]	; (8009d24 <UART_SetConfig+0x344>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d004      	beq.n	8009a56 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a52:	4313      	orrs	r3, r2
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	689a      	ldr	r2, [r3, #8]
 8009a5c:	4bb2      	ldr	r3, [pc, #712]	; (8009d28 <UART_SetConfig+0x348>)
 8009a5e:	4013      	ands	r3, r2
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	6812      	ldr	r2, [r2, #0]
 8009a64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a66:	430b      	orrs	r3, r1
 8009a68:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	f023 010f 	bic.w	r1, r3, #15
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	430a      	orrs	r2, r1
 8009a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4aa9      	ldr	r2, [pc, #676]	; (8009d2c <UART_SetConfig+0x34c>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d177      	bne.n	8009b7a <UART_SetConfig+0x19a>
 8009a8a:	4ba9      	ldr	r3, [pc, #676]	; (8009d30 <UART_SetConfig+0x350>)
 8009a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a92:	2b28      	cmp	r3, #40	; 0x28
 8009a94:	d86c      	bhi.n	8009b70 <UART_SetConfig+0x190>
 8009a96:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <UART_SetConfig+0xbc>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009b41 	.word	0x08009b41
 8009aa0:	08009b71 	.word	0x08009b71
 8009aa4:	08009b71 	.word	0x08009b71
 8009aa8:	08009b71 	.word	0x08009b71
 8009aac:	08009b71 	.word	0x08009b71
 8009ab0:	08009b71 	.word	0x08009b71
 8009ab4:	08009b71 	.word	0x08009b71
 8009ab8:	08009b71 	.word	0x08009b71
 8009abc:	08009b49 	.word	0x08009b49
 8009ac0:	08009b71 	.word	0x08009b71
 8009ac4:	08009b71 	.word	0x08009b71
 8009ac8:	08009b71 	.word	0x08009b71
 8009acc:	08009b71 	.word	0x08009b71
 8009ad0:	08009b71 	.word	0x08009b71
 8009ad4:	08009b71 	.word	0x08009b71
 8009ad8:	08009b71 	.word	0x08009b71
 8009adc:	08009b51 	.word	0x08009b51
 8009ae0:	08009b71 	.word	0x08009b71
 8009ae4:	08009b71 	.word	0x08009b71
 8009ae8:	08009b71 	.word	0x08009b71
 8009aec:	08009b71 	.word	0x08009b71
 8009af0:	08009b71 	.word	0x08009b71
 8009af4:	08009b71 	.word	0x08009b71
 8009af8:	08009b71 	.word	0x08009b71
 8009afc:	08009b59 	.word	0x08009b59
 8009b00:	08009b71 	.word	0x08009b71
 8009b04:	08009b71 	.word	0x08009b71
 8009b08:	08009b71 	.word	0x08009b71
 8009b0c:	08009b71 	.word	0x08009b71
 8009b10:	08009b71 	.word	0x08009b71
 8009b14:	08009b71 	.word	0x08009b71
 8009b18:	08009b71 	.word	0x08009b71
 8009b1c:	08009b61 	.word	0x08009b61
 8009b20:	08009b71 	.word	0x08009b71
 8009b24:	08009b71 	.word	0x08009b71
 8009b28:	08009b71 	.word	0x08009b71
 8009b2c:	08009b71 	.word	0x08009b71
 8009b30:	08009b71 	.word	0x08009b71
 8009b34:	08009b71 	.word	0x08009b71
 8009b38:	08009b71 	.word	0x08009b71
 8009b3c:	08009b69 	.word	0x08009b69
 8009b40:	2301      	movs	r3, #1
 8009b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b46:	e233      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009b48:	2304      	movs	r3, #4
 8009b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4e:	e22f      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009b50:	2308      	movs	r3, #8
 8009b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b56:	e22b      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5e:	e227      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009b60:	2320      	movs	r3, #32
 8009b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b66:	e223      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009b68:	2340      	movs	r3, #64	; 0x40
 8009b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6e:	e21f      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009b70:	2380      	movs	r3, #128	; 0x80
 8009b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b76:	bf00      	nop
 8009b78:	e21a      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a6d      	ldr	r2, [pc, #436]	; (8009d34 <UART_SetConfig+0x354>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d132      	bne.n	8009bea <UART_SetConfig+0x20a>
 8009b84:	4b6a      	ldr	r3, [pc, #424]	; (8009d30 <UART_SetConfig+0x350>)
 8009b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b88:	f003 0307 	and.w	r3, r3, #7
 8009b8c:	2b05      	cmp	r3, #5
 8009b8e:	d827      	bhi.n	8009be0 <UART_SetConfig+0x200>
 8009b90:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <UART_SetConfig+0x1b8>)
 8009b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b96:	bf00      	nop
 8009b98:	08009bb1 	.word	0x08009bb1
 8009b9c:	08009bb9 	.word	0x08009bb9
 8009ba0:	08009bc1 	.word	0x08009bc1
 8009ba4:	08009bc9 	.word	0x08009bc9
 8009ba8:	08009bd1 	.word	0x08009bd1
 8009bac:	08009bd9 	.word	0x08009bd9
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb6:	e1fb      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009bb8:	2304      	movs	r3, #4
 8009bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bbe:	e1f7      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009bc0:	2308      	movs	r3, #8
 8009bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc6:	e1f3      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009bc8:	2310      	movs	r3, #16
 8009bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bce:	e1ef      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009bd0:	2320      	movs	r3, #32
 8009bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd6:	e1eb      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009bd8:	2340      	movs	r3, #64	; 0x40
 8009bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bde:	e1e7      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009be0:	2380      	movs	r3, #128	; 0x80
 8009be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be6:	bf00      	nop
 8009be8:	e1e2      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a52      	ldr	r2, [pc, #328]	; (8009d38 <UART_SetConfig+0x358>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d132      	bne.n	8009c5a <UART_SetConfig+0x27a>
 8009bf4:	4b4e      	ldr	r3, [pc, #312]	; (8009d30 <UART_SetConfig+0x350>)
 8009bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf8:	f003 0307 	and.w	r3, r3, #7
 8009bfc:	2b05      	cmp	r3, #5
 8009bfe:	d827      	bhi.n	8009c50 <UART_SetConfig+0x270>
 8009c00:	a201      	add	r2, pc, #4	; (adr r2, 8009c08 <UART_SetConfig+0x228>)
 8009c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c06:	bf00      	nop
 8009c08:	08009c21 	.word	0x08009c21
 8009c0c:	08009c29 	.word	0x08009c29
 8009c10:	08009c31 	.word	0x08009c31
 8009c14:	08009c39 	.word	0x08009c39
 8009c18:	08009c41 	.word	0x08009c41
 8009c1c:	08009c49 	.word	0x08009c49
 8009c20:	2300      	movs	r3, #0
 8009c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c26:	e1c3      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009c28:	2304      	movs	r3, #4
 8009c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2e:	e1bf      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009c30:	2308      	movs	r3, #8
 8009c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c36:	e1bb      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009c38:	2310      	movs	r3, #16
 8009c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3e:	e1b7      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009c40:	2320      	movs	r3, #32
 8009c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c46:	e1b3      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009c48:	2340      	movs	r3, #64	; 0x40
 8009c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4e:	e1af      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009c50:	2380      	movs	r3, #128	; 0x80
 8009c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c56:	bf00      	nop
 8009c58:	e1aa      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a37      	ldr	r2, [pc, #220]	; (8009d3c <UART_SetConfig+0x35c>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d132      	bne.n	8009cca <UART_SetConfig+0x2ea>
 8009c64:	4b32      	ldr	r3, [pc, #200]	; (8009d30 <UART_SetConfig+0x350>)
 8009c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c68:	f003 0307 	and.w	r3, r3, #7
 8009c6c:	2b05      	cmp	r3, #5
 8009c6e:	d827      	bhi.n	8009cc0 <UART_SetConfig+0x2e0>
 8009c70:	a201      	add	r2, pc, #4	; (adr r2, 8009c78 <UART_SetConfig+0x298>)
 8009c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c76:	bf00      	nop
 8009c78:	08009c91 	.word	0x08009c91
 8009c7c:	08009c99 	.word	0x08009c99
 8009c80:	08009ca1 	.word	0x08009ca1
 8009c84:	08009ca9 	.word	0x08009ca9
 8009c88:	08009cb1 	.word	0x08009cb1
 8009c8c:	08009cb9 	.word	0x08009cb9
 8009c90:	2300      	movs	r3, #0
 8009c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c96:	e18b      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009c98:	2304      	movs	r3, #4
 8009c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c9e:	e187      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009ca0:	2308      	movs	r3, #8
 8009ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ca6:	e183      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009ca8:	2310      	movs	r3, #16
 8009caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cae:	e17f      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009cb0:	2320      	movs	r3, #32
 8009cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb6:	e17b      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009cb8:	2340      	movs	r3, #64	; 0x40
 8009cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cbe:	e177      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009cc0:	2380      	movs	r3, #128	; 0x80
 8009cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc6:	bf00      	nop
 8009cc8:	e172      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a1c      	ldr	r2, [pc, #112]	; (8009d40 <UART_SetConfig+0x360>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d144      	bne.n	8009d5e <UART_SetConfig+0x37e>
 8009cd4:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <UART_SetConfig+0x350>)
 8009cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd8:	f003 0307 	and.w	r3, r3, #7
 8009cdc:	2b05      	cmp	r3, #5
 8009cde:	d839      	bhi.n	8009d54 <UART_SetConfig+0x374>
 8009ce0:	a201      	add	r2, pc, #4	; (adr r2, 8009ce8 <UART_SetConfig+0x308>)
 8009ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce6:	bf00      	nop
 8009ce8:	08009d01 	.word	0x08009d01
 8009cec:	08009d09 	.word	0x08009d09
 8009cf0:	08009d11 	.word	0x08009d11
 8009cf4:	08009d19 	.word	0x08009d19
 8009cf8:	08009d45 	.word	0x08009d45
 8009cfc:	08009d4d 	.word	0x08009d4d
 8009d00:	2300      	movs	r3, #0
 8009d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d06:	e153      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009d08:	2304      	movs	r3, #4
 8009d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0e:	e14f      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009d10:	2308      	movs	r3, #8
 8009d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d16:	e14b      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009d18:	2310      	movs	r3, #16
 8009d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1e:	e147      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009d20:	cfff69f3 	.word	0xcfff69f3
 8009d24:	58000c00 	.word	0x58000c00
 8009d28:	11fff4ff 	.word	0x11fff4ff
 8009d2c:	40011000 	.word	0x40011000
 8009d30:	58024400 	.word	0x58024400
 8009d34:	40004400 	.word	0x40004400
 8009d38:	40004800 	.word	0x40004800
 8009d3c:	40004c00 	.word	0x40004c00
 8009d40:	40005000 	.word	0x40005000
 8009d44:	2320      	movs	r3, #32
 8009d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4a:	e131      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009d4c:	2340      	movs	r3, #64	; 0x40
 8009d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d52:	e12d      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009d54:	2380      	movs	r3, #128	; 0x80
 8009d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5a:	bf00      	nop
 8009d5c:	e128      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4ab6      	ldr	r2, [pc, #728]	; (800a03c <UART_SetConfig+0x65c>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d178      	bne.n	8009e5a <UART_SetConfig+0x47a>
 8009d68:	4bb5      	ldr	r3, [pc, #724]	; (800a040 <UART_SetConfig+0x660>)
 8009d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d70:	2b28      	cmp	r3, #40	; 0x28
 8009d72:	d86d      	bhi.n	8009e50 <UART_SetConfig+0x470>
 8009d74:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <UART_SetConfig+0x39c>)
 8009d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7a:	bf00      	nop
 8009d7c:	08009e21 	.word	0x08009e21
 8009d80:	08009e51 	.word	0x08009e51
 8009d84:	08009e51 	.word	0x08009e51
 8009d88:	08009e51 	.word	0x08009e51
 8009d8c:	08009e51 	.word	0x08009e51
 8009d90:	08009e51 	.word	0x08009e51
 8009d94:	08009e51 	.word	0x08009e51
 8009d98:	08009e51 	.word	0x08009e51
 8009d9c:	08009e29 	.word	0x08009e29
 8009da0:	08009e51 	.word	0x08009e51
 8009da4:	08009e51 	.word	0x08009e51
 8009da8:	08009e51 	.word	0x08009e51
 8009dac:	08009e51 	.word	0x08009e51
 8009db0:	08009e51 	.word	0x08009e51
 8009db4:	08009e51 	.word	0x08009e51
 8009db8:	08009e51 	.word	0x08009e51
 8009dbc:	08009e31 	.word	0x08009e31
 8009dc0:	08009e51 	.word	0x08009e51
 8009dc4:	08009e51 	.word	0x08009e51
 8009dc8:	08009e51 	.word	0x08009e51
 8009dcc:	08009e51 	.word	0x08009e51
 8009dd0:	08009e51 	.word	0x08009e51
 8009dd4:	08009e51 	.word	0x08009e51
 8009dd8:	08009e51 	.word	0x08009e51
 8009ddc:	08009e39 	.word	0x08009e39
 8009de0:	08009e51 	.word	0x08009e51
 8009de4:	08009e51 	.word	0x08009e51
 8009de8:	08009e51 	.word	0x08009e51
 8009dec:	08009e51 	.word	0x08009e51
 8009df0:	08009e51 	.word	0x08009e51
 8009df4:	08009e51 	.word	0x08009e51
 8009df8:	08009e51 	.word	0x08009e51
 8009dfc:	08009e41 	.word	0x08009e41
 8009e00:	08009e51 	.word	0x08009e51
 8009e04:	08009e51 	.word	0x08009e51
 8009e08:	08009e51 	.word	0x08009e51
 8009e0c:	08009e51 	.word	0x08009e51
 8009e10:	08009e51 	.word	0x08009e51
 8009e14:	08009e51 	.word	0x08009e51
 8009e18:	08009e51 	.word	0x08009e51
 8009e1c:	08009e49 	.word	0x08009e49
 8009e20:	2301      	movs	r3, #1
 8009e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e26:	e0c3      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009e28:	2304      	movs	r3, #4
 8009e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2e:	e0bf      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009e30:	2308      	movs	r3, #8
 8009e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e36:	e0bb      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009e38:	2310      	movs	r3, #16
 8009e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e3e:	e0b7      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009e40:	2320      	movs	r3, #32
 8009e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e46:	e0b3      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009e48:	2340      	movs	r3, #64	; 0x40
 8009e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e4e:	e0af      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009e50:	2380      	movs	r3, #128	; 0x80
 8009e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e56:	bf00      	nop
 8009e58:	e0aa      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a79      	ldr	r2, [pc, #484]	; (800a044 <UART_SetConfig+0x664>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d132      	bne.n	8009eca <UART_SetConfig+0x4ea>
 8009e64:	4b76      	ldr	r3, [pc, #472]	; (800a040 <UART_SetConfig+0x660>)
 8009e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e68:	f003 0307 	and.w	r3, r3, #7
 8009e6c:	2b05      	cmp	r3, #5
 8009e6e:	d827      	bhi.n	8009ec0 <UART_SetConfig+0x4e0>
 8009e70:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <UART_SetConfig+0x498>)
 8009e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e76:	bf00      	nop
 8009e78:	08009e91 	.word	0x08009e91
 8009e7c:	08009e99 	.word	0x08009e99
 8009e80:	08009ea1 	.word	0x08009ea1
 8009e84:	08009ea9 	.word	0x08009ea9
 8009e88:	08009eb1 	.word	0x08009eb1
 8009e8c:	08009eb9 	.word	0x08009eb9
 8009e90:	2300      	movs	r3, #0
 8009e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e96:	e08b      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009e98:	2304      	movs	r3, #4
 8009e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e9e:	e087      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009ea0:	2308      	movs	r3, #8
 8009ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ea6:	e083      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009ea8:	2310      	movs	r3, #16
 8009eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eae:	e07f      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009eb0:	2320      	movs	r3, #32
 8009eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb6:	e07b      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009eb8:	2340      	movs	r3, #64	; 0x40
 8009eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ebe:	e077      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009ec0:	2380      	movs	r3, #128	; 0x80
 8009ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec6:	bf00      	nop
 8009ec8:	e072      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a5e      	ldr	r2, [pc, #376]	; (800a048 <UART_SetConfig+0x668>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d132      	bne.n	8009f3a <UART_SetConfig+0x55a>
 8009ed4:	4b5a      	ldr	r3, [pc, #360]	; (800a040 <UART_SetConfig+0x660>)
 8009ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed8:	f003 0307 	and.w	r3, r3, #7
 8009edc:	2b05      	cmp	r3, #5
 8009ede:	d827      	bhi.n	8009f30 <UART_SetConfig+0x550>
 8009ee0:	a201      	add	r2, pc, #4	; (adr r2, 8009ee8 <UART_SetConfig+0x508>)
 8009ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee6:	bf00      	nop
 8009ee8:	08009f01 	.word	0x08009f01
 8009eec:	08009f09 	.word	0x08009f09
 8009ef0:	08009f11 	.word	0x08009f11
 8009ef4:	08009f19 	.word	0x08009f19
 8009ef8:	08009f21 	.word	0x08009f21
 8009efc:	08009f29 	.word	0x08009f29
 8009f00:	2300      	movs	r3, #0
 8009f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f06:	e053      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009f08:	2304      	movs	r3, #4
 8009f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f0e:	e04f      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009f10:	2308      	movs	r3, #8
 8009f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f16:	e04b      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009f18:	2310      	movs	r3, #16
 8009f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f1e:	e047      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009f20:	2320      	movs	r3, #32
 8009f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f26:	e043      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009f28:	2340      	movs	r3, #64	; 0x40
 8009f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f2e:	e03f      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009f30:	2380      	movs	r3, #128	; 0x80
 8009f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f36:	bf00      	nop
 8009f38:	e03a      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a43      	ldr	r2, [pc, #268]	; (800a04c <UART_SetConfig+0x66c>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d132      	bne.n	8009faa <UART_SetConfig+0x5ca>
 8009f44:	4b3e      	ldr	r3, [pc, #248]	; (800a040 <UART_SetConfig+0x660>)
 8009f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f48:	f003 0307 	and.w	r3, r3, #7
 8009f4c:	2b05      	cmp	r3, #5
 8009f4e:	d827      	bhi.n	8009fa0 <UART_SetConfig+0x5c0>
 8009f50:	a201      	add	r2, pc, #4	; (adr r2, 8009f58 <UART_SetConfig+0x578>)
 8009f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f56:	bf00      	nop
 8009f58:	08009f71 	.word	0x08009f71
 8009f5c:	08009f79 	.word	0x08009f79
 8009f60:	08009f81 	.word	0x08009f81
 8009f64:	08009f89 	.word	0x08009f89
 8009f68:	08009f91 	.word	0x08009f91
 8009f6c:	08009f99 	.word	0x08009f99
 8009f70:	2302      	movs	r3, #2
 8009f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f76:	e01b      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009f78:	2304      	movs	r3, #4
 8009f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f7e:	e017      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009f80:	2308      	movs	r3, #8
 8009f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f86:	e013      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009f88:	2310      	movs	r3, #16
 8009f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f8e:	e00f      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009f90:	2320      	movs	r3, #32
 8009f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f96:	e00b      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009f98:	2340      	movs	r3, #64	; 0x40
 8009f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f9e:	e007      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009fa0:	2380      	movs	r3, #128	; 0x80
 8009fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fa6:	bf00      	nop
 8009fa8:	e002      	b.n	8009fb0 <UART_SetConfig+0x5d0>
 8009faa:	2380      	movs	r3, #128	; 0x80
 8009fac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a25      	ldr	r2, [pc, #148]	; (800a04c <UART_SetConfig+0x66c>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	f040 80b8 	bne.w	800a12c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fc0:	2b08      	cmp	r3, #8
 8009fc2:	d019      	beq.n	8009ff8 <UART_SetConfig+0x618>
 8009fc4:	2b08      	cmp	r3, #8
 8009fc6:	dc04      	bgt.n	8009fd2 <UART_SetConfig+0x5f2>
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d009      	beq.n	8009fe0 <UART_SetConfig+0x600>
 8009fcc:	2b04      	cmp	r3, #4
 8009fce:	d00b      	beq.n	8009fe8 <UART_SetConfig+0x608>
 8009fd0:	e042      	b.n	800a058 <UART_SetConfig+0x678>
 8009fd2:	2b20      	cmp	r3, #32
 8009fd4:	d02b      	beq.n	800a02e <UART_SetConfig+0x64e>
 8009fd6:	2b40      	cmp	r3, #64	; 0x40
 8009fd8:	d02c      	beq.n	800a034 <UART_SetConfig+0x654>
 8009fda:	2b10      	cmp	r3, #16
 8009fdc:	d014      	beq.n	800a008 <UART_SetConfig+0x628>
 8009fde:	e03b      	b.n	800a058 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009fe0:	f7fd fa80 	bl	80074e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009fe4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009fe6:	e03d      	b.n	800a064 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fe8:	f107 0314 	add.w	r3, r7, #20
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7fd fa8f 	bl	8007510 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ff6:	e035      	b.n	800a064 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ff8:	f107 0308 	add.w	r3, r7, #8
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fd fbd3 	bl	80077a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a006:	e02d      	b.n	800a064 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a008:	4b0d      	ldr	r3, [pc, #52]	; (800a040 <UART_SetConfig+0x660>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 0320 	and.w	r3, r3, #32
 800a010:	2b00      	cmp	r3, #0
 800a012:	d009      	beq.n	800a028 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a014:	4b0a      	ldr	r3, [pc, #40]	; (800a040 <UART_SetConfig+0x660>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	08db      	lsrs	r3, r3, #3
 800a01a:	f003 0303 	and.w	r3, r3, #3
 800a01e:	4a0c      	ldr	r2, [pc, #48]	; (800a050 <UART_SetConfig+0x670>)
 800a020:	fa22 f303 	lsr.w	r3, r2, r3
 800a024:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a026:	e01d      	b.n	800a064 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a028:	4b09      	ldr	r3, [pc, #36]	; (800a050 <UART_SetConfig+0x670>)
 800a02a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a02c:	e01a      	b.n	800a064 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a02e:	4b09      	ldr	r3, [pc, #36]	; (800a054 <UART_SetConfig+0x674>)
 800a030:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a032:	e017      	b.n	800a064 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a03a:	e013      	b.n	800a064 <UART_SetConfig+0x684>
 800a03c:	40011400 	.word	0x40011400
 800a040:	58024400 	.word	0x58024400
 800a044:	40007800 	.word	0x40007800
 800a048:	40007c00 	.word	0x40007c00
 800a04c:	58000c00 	.word	0x58000c00
 800a050:	03d09000 	.word	0x03d09000
 800a054:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a058:	2300      	movs	r3, #0
 800a05a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a062:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 824d 	beq.w	800a506 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	4aad      	ldr	r2, [pc, #692]	; (800a328 <UART_SetConfig+0x948>)
 800a072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a076:	461a      	mov	r2, r3
 800a078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a07e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	4613      	mov	r3, r2
 800a086:	005b      	lsls	r3, r3, #1
 800a088:	4413      	add	r3, r2
 800a08a:	6a3a      	ldr	r2, [r7, #32]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d305      	bcc.n	800a09c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a096:	6a3a      	ldr	r2, [r7, #32]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d903      	bls.n	800a0a4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a0a2:	e230      	b.n	800a506 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f04f 0100 	mov.w	r1, #0
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	4a9d      	ldr	r2, [pc, #628]	; (800a328 <UART_SetConfig+0x948>)
 800a0b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	f04f 0400 	mov.w	r4, #0
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4623      	mov	r3, r4
 800a0c0:	f7f6 f95e 	bl	8000380 <__aeabi_uldivmod>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4622      	mov	r2, r4
 800a0cc:	f04f 0300 	mov.w	r3, #0
 800a0d0:	f04f 0400 	mov.w	r4, #0
 800a0d4:	0214      	lsls	r4, r2, #8
 800a0d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a0da:	020b      	lsls	r3, r1, #8
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	6852      	ldr	r2, [r2, #4]
 800a0e0:	0852      	lsrs	r2, r2, #1
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	f04f 0200 	mov.w	r2, #0
 800a0e8:	eb13 0b01 	adds.w	fp, r3, r1
 800a0ec:	eb44 0c02 	adc.w	ip, r4, r2
 800a0f0:	4658      	mov	r0, fp
 800a0f2:	4661      	mov	r1, ip
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f04f 0400 	mov.w	r4, #0
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	4623      	mov	r3, r4
 800a100:	f7f6 f93e 	bl	8000380 <__aeabi_uldivmod>
 800a104:	4603      	mov	r3, r0
 800a106:	460c      	mov	r4, r1
 800a108:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a110:	d308      	bcc.n	800a124 <UART_SetConfig+0x744>
 800a112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a118:	d204      	bcs.n	800a124 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a120:	60da      	str	r2, [r3, #12]
 800a122:	e1f0      	b.n	800a506 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a12a:	e1ec      	b.n	800a506 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	69db      	ldr	r3, [r3, #28]
 800a130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a134:	f040 8100 	bne.w	800a338 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a138:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a13c:	2b40      	cmp	r3, #64	; 0x40
 800a13e:	f200 80b7 	bhi.w	800a2b0 <UART_SetConfig+0x8d0>
 800a142:	a201      	add	r2, pc, #4	; (adr r2, 800a148 <UART_SetConfig+0x768>)
 800a144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a148:	0800a24d 	.word	0x0800a24d
 800a14c:	0800a255 	.word	0x0800a255
 800a150:	0800a2b1 	.word	0x0800a2b1
 800a154:	0800a2b1 	.word	0x0800a2b1
 800a158:	0800a25d 	.word	0x0800a25d
 800a15c:	0800a2b1 	.word	0x0800a2b1
 800a160:	0800a2b1 	.word	0x0800a2b1
 800a164:	0800a2b1 	.word	0x0800a2b1
 800a168:	0800a26d 	.word	0x0800a26d
 800a16c:	0800a2b1 	.word	0x0800a2b1
 800a170:	0800a2b1 	.word	0x0800a2b1
 800a174:	0800a2b1 	.word	0x0800a2b1
 800a178:	0800a2b1 	.word	0x0800a2b1
 800a17c:	0800a2b1 	.word	0x0800a2b1
 800a180:	0800a2b1 	.word	0x0800a2b1
 800a184:	0800a2b1 	.word	0x0800a2b1
 800a188:	0800a27d 	.word	0x0800a27d
 800a18c:	0800a2b1 	.word	0x0800a2b1
 800a190:	0800a2b1 	.word	0x0800a2b1
 800a194:	0800a2b1 	.word	0x0800a2b1
 800a198:	0800a2b1 	.word	0x0800a2b1
 800a19c:	0800a2b1 	.word	0x0800a2b1
 800a1a0:	0800a2b1 	.word	0x0800a2b1
 800a1a4:	0800a2b1 	.word	0x0800a2b1
 800a1a8:	0800a2b1 	.word	0x0800a2b1
 800a1ac:	0800a2b1 	.word	0x0800a2b1
 800a1b0:	0800a2b1 	.word	0x0800a2b1
 800a1b4:	0800a2b1 	.word	0x0800a2b1
 800a1b8:	0800a2b1 	.word	0x0800a2b1
 800a1bc:	0800a2b1 	.word	0x0800a2b1
 800a1c0:	0800a2b1 	.word	0x0800a2b1
 800a1c4:	0800a2b1 	.word	0x0800a2b1
 800a1c8:	0800a2a3 	.word	0x0800a2a3
 800a1cc:	0800a2b1 	.word	0x0800a2b1
 800a1d0:	0800a2b1 	.word	0x0800a2b1
 800a1d4:	0800a2b1 	.word	0x0800a2b1
 800a1d8:	0800a2b1 	.word	0x0800a2b1
 800a1dc:	0800a2b1 	.word	0x0800a2b1
 800a1e0:	0800a2b1 	.word	0x0800a2b1
 800a1e4:	0800a2b1 	.word	0x0800a2b1
 800a1e8:	0800a2b1 	.word	0x0800a2b1
 800a1ec:	0800a2b1 	.word	0x0800a2b1
 800a1f0:	0800a2b1 	.word	0x0800a2b1
 800a1f4:	0800a2b1 	.word	0x0800a2b1
 800a1f8:	0800a2b1 	.word	0x0800a2b1
 800a1fc:	0800a2b1 	.word	0x0800a2b1
 800a200:	0800a2b1 	.word	0x0800a2b1
 800a204:	0800a2b1 	.word	0x0800a2b1
 800a208:	0800a2b1 	.word	0x0800a2b1
 800a20c:	0800a2b1 	.word	0x0800a2b1
 800a210:	0800a2b1 	.word	0x0800a2b1
 800a214:	0800a2b1 	.word	0x0800a2b1
 800a218:	0800a2b1 	.word	0x0800a2b1
 800a21c:	0800a2b1 	.word	0x0800a2b1
 800a220:	0800a2b1 	.word	0x0800a2b1
 800a224:	0800a2b1 	.word	0x0800a2b1
 800a228:	0800a2b1 	.word	0x0800a2b1
 800a22c:	0800a2b1 	.word	0x0800a2b1
 800a230:	0800a2b1 	.word	0x0800a2b1
 800a234:	0800a2b1 	.word	0x0800a2b1
 800a238:	0800a2b1 	.word	0x0800a2b1
 800a23c:	0800a2b1 	.word	0x0800a2b1
 800a240:	0800a2b1 	.word	0x0800a2b1
 800a244:	0800a2b1 	.word	0x0800a2b1
 800a248:	0800a2a9 	.word	0x0800a2a9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a24c:	f7fb ff9c 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 800a250:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a252:	e033      	b.n	800a2bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a254:	f7fb ffae 	bl	80061b4 <HAL_RCC_GetPCLK2Freq>
 800a258:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a25a:	e02f      	b.n	800a2bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a25c:	f107 0314 	add.w	r3, r7, #20
 800a260:	4618      	mov	r0, r3
 800a262:	f7fd f955 	bl	8007510 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a26a:	e027      	b.n	800a2bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a26c:	f107 0308 	add.w	r3, r7, #8
 800a270:	4618      	mov	r0, r3
 800a272:	f7fd fa99 	bl	80077a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a27a:	e01f      	b.n	800a2bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a27c:	4b2b      	ldr	r3, [pc, #172]	; (800a32c <UART_SetConfig+0x94c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0320 	and.w	r3, r3, #32
 800a284:	2b00      	cmp	r3, #0
 800a286:	d009      	beq.n	800a29c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a288:	4b28      	ldr	r3, [pc, #160]	; (800a32c <UART_SetConfig+0x94c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	08db      	lsrs	r3, r3, #3
 800a28e:	f003 0303 	and.w	r3, r3, #3
 800a292:	4a27      	ldr	r2, [pc, #156]	; (800a330 <UART_SetConfig+0x950>)
 800a294:	fa22 f303 	lsr.w	r3, r2, r3
 800a298:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a29a:	e00f      	b.n	800a2bc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a29c:	4b24      	ldr	r3, [pc, #144]	; (800a330 <UART_SetConfig+0x950>)
 800a29e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2a0:	e00c      	b.n	800a2bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2a2:	4b24      	ldr	r3, [pc, #144]	; (800a334 <UART_SetConfig+0x954>)
 800a2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2a6:	e009      	b.n	800a2bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2ae:	e005      	b.n	800a2bc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a2ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f000 8121 	beq.w	800a506 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c8:	4a17      	ldr	r2, [pc, #92]	; (800a328 <UART_SetConfig+0x948>)
 800a2ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2d6:	005a      	lsls	r2, r3, #1
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	085b      	lsrs	r3, r3, #1
 800a2de:	441a      	add	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	2b0f      	cmp	r3, #15
 800a2f0:	d916      	bls.n	800a320 <UART_SetConfig+0x940>
 800a2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f8:	d212      	bcs.n	800a320 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	f023 030f 	bic.w	r3, r3, #15
 800a302:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	085b      	lsrs	r3, r3, #1
 800a308:	b29b      	uxth	r3, r3
 800a30a:	f003 0307 	and.w	r3, r3, #7
 800a30e:	b29a      	uxth	r2, r3
 800a310:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a312:	4313      	orrs	r3, r2
 800a314:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a31c:	60da      	str	r2, [r3, #12]
 800a31e:	e0f2      	b.n	800a506 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a326:	e0ee      	b.n	800a506 <UART_SetConfig+0xb26>
 800a328:	08013414 	.word	0x08013414
 800a32c:	58024400 	.word	0x58024400
 800a330:	03d09000 	.word	0x03d09000
 800a334:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a338:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a33c:	2b40      	cmp	r3, #64	; 0x40
 800a33e:	f200 80b7 	bhi.w	800a4b0 <UART_SetConfig+0xad0>
 800a342:	a201      	add	r2, pc, #4	; (adr r2, 800a348 <UART_SetConfig+0x968>)
 800a344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a348:	0800a44d 	.word	0x0800a44d
 800a34c:	0800a455 	.word	0x0800a455
 800a350:	0800a4b1 	.word	0x0800a4b1
 800a354:	0800a4b1 	.word	0x0800a4b1
 800a358:	0800a45d 	.word	0x0800a45d
 800a35c:	0800a4b1 	.word	0x0800a4b1
 800a360:	0800a4b1 	.word	0x0800a4b1
 800a364:	0800a4b1 	.word	0x0800a4b1
 800a368:	0800a46d 	.word	0x0800a46d
 800a36c:	0800a4b1 	.word	0x0800a4b1
 800a370:	0800a4b1 	.word	0x0800a4b1
 800a374:	0800a4b1 	.word	0x0800a4b1
 800a378:	0800a4b1 	.word	0x0800a4b1
 800a37c:	0800a4b1 	.word	0x0800a4b1
 800a380:	0800a4b1 	.word	0x0800a4b1
 800a384:	0800a4b1 	.word	0x0800a4b1
 800a388:	0800a47d 	.word	0x0800a47d
 800a38c:	0800a4b1 	.word	0x0800a4b1
 800a390:	0800a4b1 	.word	0x0800a4b1
 800a394:	0800a4b1 	.word	0x0800a4b1
 800a398:	0800a4b1 	.word	0x0800a4b1
 800a39c:	0800a4b1 	.word	0x0800a4b1
 800a3a0:	0800a4b1 	.word	0x0800a4b1
 800a3a4:	0800a4b1 	.word	0x0800a4b1
 800a3a8:	0800a4b1 	.word	0x0800a4b1
 800a3ac:	0800a4b1 	.word	0x0800a4b1
 800a3b0:	0800a4b1 	.word	0x0800a4b1
 800a3b4:	0800a4b1 	.word	0x0800a4b1
 800a3b8:	0800a4b1 	.word	0x0800a4b1
 800a3bc:	0800a4b1 	.word	0x0800a4b1
 800a3c0:	0800a4b1 	.word	0x0800a4b1
 800a3c4:	0800a4b1 	.word	0x0800a4b1
 800a3c8:	0800a4a3 	.word	0x0800a4a3
 800a3cc:	0800a4b1 	.word	0x0800a4b1
 800a3d0:	0800a4b1 	.word	0x0800a4b1
 800a3d4:	0800a4b1 	.word	0x0800a4b1
 800a3d8:	0800a4b1 	.word	0x0800a4b1
 800a3dc:	0800a4b1 	.word	0x0800a4b1
 800a3e0:	0800a4b1 	.word	0x0800a4b1
 800a3e4:	0800a4b1 	.word	0x0800a4b1
 800a3e8:	0800a4b1 	.word	0x0800a4b1
 800a3ec:	0800a4b1 	.word	0x0800a4b1
 800a3f0:	0800a4b1 	.word	0x0800a4b1
 800a3f4:	0800a4b1 	.word	0x0800a4b1
 800a3f8:	0800a4b1 	.word	0x0800a4b1
 800a3fc:	0800a4b1 	.word	0x0800a4b1
 800a400:	0800a4b1 	.word	0x0800a4b1
 800a404:	0800a4b1 	.word	0x0800a4b1
 800a408:	0800a4b1 	.word	0x0800a4b1
 800a40c:	0800a4b1 	.word	0x0800a4b1
 800a410:	0800a4b1 	.word	0x0800a4b1
 800a414:	0800a4b1 	.word	0x0800a4b1
 800a418:	0800a4b1 	.word	0x0800a4b1
 800a41c:	0800a4b1 	.word	0x0800a4b1
 800a420:	0800a4b1 	.word	0x0800a4b1
 800a424:	0800a4b1 	.word	0x0800a4b1
 800a428:	0800a4b1 	.word	0x0800a4b1
 800a42c:	0800a4b1 	.word	0x0800a4b1
 800a430:	0800a4b1 	.word	0x0800a4b1
 800a434:	0800a4b1 	.word	0x0800a4b1
 800a438:	0800a4b1 	.word	0x0800a4b1
 800a43c:	0800a4b1 	.word	0x0800a4b1
 800a440:	0800a4b1 	.word	0x0800a4b1
 800a444:	0800a4b1 	.word	0x0800a4b1
 800a448:	0800a4a9 	.word	0x0800a4a9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a44c:	f7fb fe9c 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 800a450:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a452:	e033      	b.n	800a4bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a454:	f7fb feae 	bl	80061b4 <HAL_RCC_GetPCLK2Freq>
 800a458:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a45a:	e02f      	b.n	800a4bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a45c:	f107 0314 	add.w	r3, r7, #20
 800a460:	4618      	mov	r0, r3
 800a462:	f7fd f855 	bl	8007510 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a46a:	e027      	b.n	800a4bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a46c:	f107 0308 	add.w	r3, r7, #8
 800a470:	4618      	mov	r0, r3
 800a472:	f7fd f999 	bl	80077a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a47a:	e01f      	b.n	800a4bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a47c:	4b2c      	ldr	r3, [pc, #176]	; (800a530 <UART_SetConfig+0xb50>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0320 	and.w	r3, r3, #32
 800a484:	2b00      	cmp	r3, #0
 800a486:	d009      	beq.n	800a49c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a488:	4b29      	ldr	r3, [pc, #164]	; (800a530 <UART_SetConfig+0xb50>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	08db      	lsrs	r3, r3, #3
 800a48e:	f003 0303 	and.w	r3, r3, #3
 800a492:	4a28      	ldr	r2, [pc, #160]	; (800a534 <UART_SetConfig+0xb54>)
 800a494:	fa22 f303 	lsr.w	r3, r2, r3
 800a498:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a49a:	e00f      	b.n	800a4bc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a49c:	4b25      	ldr	r3, [pc, #148]	; (800a534 <UART_SetConfig+0xb54>)
 800a49e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4a0:	e00c      	b.n	800a4bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4a2:	4b25      	ldr	r3, [pc, #148]	; (800a538 <UART_SetConfig+0xb58>)
 800a4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4a6:	e009      	b.n	800a4bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4ae:	e005      	b.n	800a4bc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a4ba:	bf00      	nop
    }

    if (pclk != 0U)
 800a4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d021      	beq.n	800a506 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c6:	4a1d      	ldr	r2, [pc, #116]	; (800a53c <UART_SetConfig+0xb5c>)
 800a4c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	085b      	lsrs	r3, r3, #1
 800a4da:	441a      	add	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	2b0f      	cmp	r3, #15
 800a4ec:	d908      	bls.n	800a500 <UART_SetConfig+0xb20>
 800a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4f4:	d204      	bcs.n	800a500 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4fc:	60da      	str	r2, [r3, #12]
 800a4fe:	e002      	b.n	800a506 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a522:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a526:	4618      	mov	r0, r3
 800a528:	3738      	adds	r7, #56	; 0x38
 800a52a:	46bd      	mov	sp, r7
 800a52c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a530:	58024400 	.word	0x58024400
 800a534:	03d09000 	.word	0x03d09000
 800a538:	003d0900 	.word	0x003d0900
 800a53c:	08013414 	.word	0x08013414

0800a540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00a      	beq.n	800a56a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56e:	f003 0302 	and.w	r3, r3, #2
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00a      	beq.n	800a58c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	430a      	orrs	r2, r1
 800a58a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a590:	f003 0304 	and.w	r3, r3, #4
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00a      	beq.n	800a5ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b2:	f003 0308 	and.w	r3, r3, #8
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00a      	beq.n	800a5d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d4:	f003 0310 	and.w	r3, r3, #16
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00a      	beq.n	800a5f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f6:	f003 0320 	and.w	r3, r3, #32
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d01a      	beq.n	800a656 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	430a      	orrs	r2, r1
 800a634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a63a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a63e:	d10a      	bne.n	800a656 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	430a      	orrs	r2, r1
 800a654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00a      	beq.n	800a678 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	430a      	orrs	r2, r1
 800a676:	605a      	str	r2, [r3, #4]
  }
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af02      	add	r7, sp, #8
 800a68a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a694:	f7f7 f856 	bl	8001744 <HAL_GetTick>
 800a698:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 0308 	and.w	r3, r3, #8
 800a6a4:	2b08      	cmp	r3, #8
 800a6a6:	d10e      	bne.n	800a6c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f82c 	bl	800a714 <UART_WaitOnFlagUntilTimeout>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	e022      	b.n	800a70c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 0304 	and.w	r3, r3, #4
 800a6d0:	2b04      	cmp	r3, #4
 800a6d2:	d10e      	bne.n	800a6f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f816 	bl	800a714 <UART_WaitOnFlagUntilTimeout>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e00c      	b.n	800a70c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2220      	movs	r2, #32
 800a6f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	603b      	str	r3, [r7, #0]
 800a720:	4613      	mov	r3, r2
 800a722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a724:	e062      	b.n	800a7ec <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72c:	d05e      	beq.n	800a7ec <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a72e:	f7f7 f809 	bl	8001744 <HAL_GetTick>
 800a732:	4602      	mov	r2, r0
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d302      	bcc.n	800a744 <UART_WaitOnFlagUntilTimeout+0x30>
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d11d      	bne.n	800a780 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a752:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	689a      	ldr	r2, [r3, #8]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f022 0201 	bic.w	r2, r2, #1
 800a762:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2220      	movs	r2, #32
 800a768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2220      	movs	r2, #32
 800a770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a77c:	2303      	movs	r3, #3
 800a77e:	e045      	b.n	800a80c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f003 0304 	and.w	r3, r3, #4
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d02e      	beq.n	800a7ec <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	69db      	ldr	r3, [r3, #28]
 800a794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a79c:	d126      	bne.n	800a7ec <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a7b6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	689a      	ldr	r2, [r3, #8]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f022 0201 	bic.w	r2, r2, #1
 800a7c6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2220      	movs	r2, #32
 800a7cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2220      	movs	r2, #32
 800a7dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	e00f      	b.n	800a80c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	69da      	ldr	r2, [r3, #28]
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	bf0c      	ite	eq
 800a7fc:	2301      	moveq	r3, #1
 800a7fe:	2300      	movne	r3, #0
 800a800:	b2db      	uxtb	r3, r3
 800a802:	461a      	mov	r2, r3
 800a804:	79fb      	ldrb	r3, [r7, #7]
 800a806:	429a      	cmp	r2, r3
 800a808:	d08d      	beq.n	800a726 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a822:	2b01      	cmp	r3, #1
 800a824:	d101      	bne.n	800a82a <HAL_UARTEx_DisableFifoMode+0x16>
 800a826:	2302      	movs	r3, #2
 800a828:	e027      	b.n	800a87a <HAL_UARTEx_DisableFifoMode+0x66>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2224      	movs	r2, #36	; 0x24
 800a836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f022 0201 	bic.w	r2, r2, #1
 800a850:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a858:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2220      	movs	r2, #32
 800a86c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b084      	sub	sp, #16
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a896:	2b01      	cmp	r3, #1
 800a898:	d101      	bne.n	800a89e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a89a:	2302      	movs	r3, #2
 800a89c:	e02d      	b.n	800a8fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2224      	movs	r2, #36	; 0x24
 800a8aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f022 0201 	bic.w	r2, r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	683a      	ldr	r2, [r7, #0]
 800a8d6:	430a      	orrs	r2, r1
 800a8d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f850 	bl	800a980 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a912:	2b01      	cmp	r3, #1
 800a914:	d101      	bne.n	800a91a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a916:	2302      	movs	r3, #2
 800a918:	e02d      	b.n	800a976 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2224      	movs	r2, #36	; 0x24
 800a926:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f022 0201 	bic.w	r2, r2, #1
 800a940:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	430a      	orrs	r2, r1
 800a954:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f812 	bl	800a980 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2220      	movs	r2, #32
 800a968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
	...

0800a980 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a980:	b480      	push	{r7}
 800a982:	b089      	sub	sp, #36	; 0x24
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a988:	4a2f      	ldr	r2, [pc, #188]	; (800aa48 <UARTEx_SetNbDataToProcess+0xc8>)
 800a98a:	f107 0314 	add.w	r3, r7, #20
 800a98e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a992:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a996:	4a2d      	ldr	r2, [pc, #180]	; (800aa4c <UARTEx_SetNbDataToProcess+0xcc>)
 800a998:	f107 030c 	add.w	r3, r7, #12
 800a99c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9a0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d108      	bne.n	800a9be <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9bc:	e03d      	b.n	800aa3a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9be:	2310      	movs	r3, #16
 800a9c0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9c2:	2310      	movs	r3, #16
 800a9c4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	0e5b      	lsrs	r3, r3, #25
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	f003 0307 	and.w	r3, r3, #7
 800a9d4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	0f5b      	lsrs	r3, r3, #29
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	f003 0307 	and.w	r3, r3, #7
 800a9e4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a9e6:	7fbb      	ldrb	r3, [r7, #30]
 800a9e8:	7f3a      	ldrb	r2, [r7, #28]
 800a9ea:	f107 0120 	add.w	r1, r7, #32
 800a9ee:	440a      	add	r2, r1
 800a9f0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a9f4:	fb02 f303 	mul.w	r3, r2, r3
 800a9f8:	7f3a      	ldrb	r2, [r7, #28]
 800a9fa:	f107 0120 	add.w	r1, r7, #32
 800a9fe:	440a      	add	r2, r1
 800aa00:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aa04:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa08:	b29a      	uxth	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800aa10:	7ffb      	ldrb	r3, [r7, #31]
 800aa12:	7f7a      	ldrb	r2, [r7, #29]
 800aa14:	f107 0120 	add.w	r1, r7, #32
 800aa18:	440a      	add	r2, r1
 800aa1a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aa1e:	fb02 f303 	mul.w	r3, r2, r3
 800aa22:	7f7a      	ldrb	r2, [r7, #29]
 800aa24:	f107 0120 	add.w	r1, r7, #32
 800aa28:	440a      	add	r2, r1
 800aa2a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aa2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa3a:	bf00      	nop
 800aa3c:	3724      	adds	r7, #36	; 0x24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	08013364 	.word	0x08013364
 800aa4c:	0801336c 	.word	0x0801336c

0800aa50 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aa50:	b084      	sub	sp, #16
 800aa52:	b480      	push	{r7}
 800aa54:	b085      	sub	sp, #20
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	f107 001c 	add.w	r0, r7, #28
 800aa5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa62:	2300      	movs	r3, #0
 800aa64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aa66:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800aa68:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aa6a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800aa6e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800aa72:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800aa76:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	685a      	ldr	r2, [r3, #4]
 800aa82:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <SDMMC_Init+0x50>)
 800aa84:	4013      	ands	r3, r2
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	431a      	orrs	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	b004      	add	sp, #16
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	ffc02c00 	.word	0xffc02c00

0800aaa4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800aabe:	b480      	push	{r7}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aad2:	2300      	movs	r3, #0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f043 0203 	orr.w	r2, r3, #3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ab02:	b480      	push	{r7}
 800ab04:	b083      	sub	sp, #12
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 0303 	and.w	r3, r3, #3
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	370c      	adds	r7, #12
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
	...

0800ab20 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab3e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ab44:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ab4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	68da      	ldr	r2, [r3, #12]
 800ab56:	4b06      	ldr	r3, [pc, #24]	; (800ab70 <SDMMC_SendCommand+0x50>)
 800ab58:	4013      	ands	r3, r2
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	431a      	orrs	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr
 800ab70:	fffee0c0 	.word	0xfffee0c0

0800ab74 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	b2db      	uxtb	r3, r3
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b085      	sub	sp, #20
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	3314      	adds	r3, #20
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	4413      	add	r3, r2
 800aba2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3714      	adds	r7, #20
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	685a      	ldr	r2, [r3, #4]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abda:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800abe0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800abe6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	4313      	orrs	r3, r2
 800abec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	431a      	orrs	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0

}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b088      	sub	sp, #32
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac1a:	2310      	movs	r3, #16
 800ac1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac24:	2300      	movs	r3, #0
 800ac26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac2e:	f107 0308 	add.w	r3, r7, #8
 800ac32:	4619      	mov	r1, r3
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7ff ff73 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac3e:	2110      	movs	r1, #16
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 faaf 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800ac46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac48:	69fb      	ldr	r3, [r7, #28]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3720      	adds	r7, #32
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b088      	sub	sp, #32
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac60:	2311      	movs	r3, #17
 800ac62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac74:	f107 0308 	add.w	r3, r7, #8
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7ff ff50 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ac80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac84:	2111      	movs	r1, #17
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fa8c 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800ac8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac8e:	69fb      	ldr	r3, [r7, #28]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3720      	adds	r7, #32
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b088      	sub	sp, #32
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aca6:	2312      	movs	r3, #18
 800aca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acb0:	2300      	movs	r3, #0
 800acb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acba:	f107 0308 	add.w	r3, r7, #8
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7ff ff2d 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800acc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800acca:	2112      	movs	r1, #18
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fa69 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800acd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acd4:	69fb      	ldr	r3, [r7, #28]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3720      	adds	r7, #32
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b088      	sub	sp, #32
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800acec:	2318      	movs	r3, #24
 800acee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acf6:	2300      	movs	r3, #0
 800acf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad00:	f107 0308 	add.w	r3, r7, #8
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7ff ff0a 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad10:	2118      	movs	r1, #24
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fa46 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800ad18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad1a:	69fb      	ldr	r3, [r7, #28]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3720      	adds	r7, #32
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b088      	sub	sp, #32
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad32:	2319      	movs	r3, #25
 800ad34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad46:	f107 0308 	add.w	r3, r7, #8
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff fee7 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad52:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad56:	2119      	movs	r1, #25
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fa23 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800ad5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad60:	69fb      	ldr	r3, [r7, #28]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3720      	adds	r7, #32
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
	...

0800ad6c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b088      	sub	sp, #32
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ad74:	2300      	movs	r3, #0
 800ad76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad78:	230c      	movs	r3, #12
 800ad7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad82:	2300      	movs	r3, #0
 800ad84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad8a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ada4:	f107 0308 	add.w	r3, r7, #8
 800ada8:	4619      	mov	r1, r3
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff feb8 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800adb0:	4a0b      	ldr	r2, [pc, #44]	; (800ade0 <SDMMC_CmdStopTransfer+0x74>)
 800adb2:	210c      	movs	r1, #12
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f9f5 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800adba:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adce:	d101      	bne.n	800add4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800add0:	2300      	movs	r3, #0
 800add2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800add4:	69fb      	ldr	r3, [r7, #28]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3720      	adds	r7, #32
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	05f5e100 	.word	0x05f5e100

0800ade4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b08a      	sub	sp, #40	; 0x28
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800adf4:	2307      	movs	r3, #7
 800adf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adfc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adfe:	2300      	movs	r3, #0
 800ae00:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae06:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae08:	f107 0310 	add.w	r3, r7, #16
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f7ff fe86 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae18:	2107      	movs	r1, #7
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f000 f9c2 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800ae20:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3728      	adds	r7, #40	; 0x28
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b088      	sub	sp, #32
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ae34:	2300      	movs	r3, #0
 800ae36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae40:	2300      	movs	r3, #0
 800ae42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae4a:	f107 0308 	add.w	r3, r7, #8
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7ff fe65 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 f976 	bl	800b148 <SDMMC_GetCmdError>
 800ae5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae5e:	69fb      	ldr	r3, [r7, #28]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3720      	adds	r7, #32
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b088      	sub	sp, #32
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ae70:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ae74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ae76:	2308      	movs	r3, #8
 800ae78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae80:	2300      	movs	r3, #0
 800ae82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae8a:	f107 0308 	add.w	r3, r7, #8
 800ae8e:	4619      	mov	r1, r3
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f7ff fe45 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fb78 	bl	800b58c <SDMMC_GetCmdResp7>
 800ae9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3720      	adds	r7, #32
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b088      	sub	sp, #32
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aeb6:	2337      	movs	r3, #55	; 0x37
 800aeb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aec0:	2300      	movs	r3, #0
 800aec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aec8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeca:	f107 0308 	add.w	r3, r7, #8
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7ff fe25 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800aed6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeda:	2137      	movs	r1, #55	; 0x37
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f961 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800aee2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aee4:	69fb      	ldr	r3, [r7, #28]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3720      	adds	r7, #32
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b088      	sub	sp, #32
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aefc:	2329      	movs	r3, #41	; 0x29
 800aefe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af06:	2300      	movs	r3, #0
 800af08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af10:	f107 0308 	add.w	r3, r7, #8
 800af14:	4619      	mov	r1, r3
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7ff fe02 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 fa7d 	bl	800b41c <SDMMC_GetCmdResp3>
 800af22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af24:	69fb      	ldr	r3, [r7, #28]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3720      	adds	r7, #32
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b088      	sub	sp, #32
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af3c:	2306      	movs	r3, #6
 800af3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af46:	2300      	movs	r3, #0
 800af48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af50:	f107 0308 	add.w	r3, r7, #8
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7ff fde2 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800af5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af60:	2106      	movs	r1, #6
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f91e 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800af68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af6a:	69fb      	ldr	r3, [r7, #28]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3720      	adds	r7, #32
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800af7c:	2300      	movs	r3, #0
 800af7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800af80:	2333      	movs	r3, #51	; 0x33
 800af82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af8a:	2300      	movs	r3, #0
 800af8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af94:	f107 0308 	add.w	r3, r7, #8
 800af98:	4619      	mov	r1, r3
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7ff fdc0 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800afa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afa4:	2133      	movs	r1, #51	; 0x33
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f8fc 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800afac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afae:	69fb      	ldr	r3, [r7, #28]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3720      	adds	r7, #32
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b088      	sub	sp, #32
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800afc4:	2302      	movs	r3, #2
 800afc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800afc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800afcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afce:	2300      	movs	r3, #0
 800afd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afd8:	f107 0308 	add.w	r3, r7, #8
 800afdc:	4619      	mov	r1, r3
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f7ff fd9e 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f9cf 	bl	800b388 <SDMMC_GetCmdResp2>
 800afea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afec:	69fb      	ldr	r3, [r7, #28]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3720      	adds	r7, #32
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b088      	sub	sp, #32
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b004:	2309      	movs	r3, #9
 800b006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b008:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b00c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b00e:	2300      	movs	r3, #0
 800b010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b016:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b018:	f107 0308 	add.w	r3, r7, #8
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7ff fd7e 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f9af 	bl	800b388 <SDMMC_GetCmdResp2>
 800b02a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b02c:	69fb      	ldr	r3, [r7, #28]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3720      	adds	r7, #32
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b088      	sub	sp, #32
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b040:	2300      	movs	r3, #0
 800b042:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b044:	2303      	movs	r3, #3
 800b046:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b04c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b04e:	2300      	movs	r3, #0
 800b050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b056:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b058:	f107 0308 	add.w	r3, r7, #8
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff fd5e 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b064:	683a      	ldr	r2, [r7, #0]
 800b066:	2103      	movs	r1, #3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 fa17 	bl	800b49c <SDMMC_GetCmdResp6>
 800b06e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b070:	69fb      	ldr	r3, [r7, #28]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3720      	adds	r7, #32
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b088      	sub	sp, #32
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b088:	230d      	movs	r3, #13
 800b08a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b08c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b090:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b092:	2300      	movs	r3, #0
 800b094:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b09a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b09c:	f107 0308 	add.w	r3, r7, #8
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f7ff fd3c 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b0a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0ac:	210d      	movs	r1, #13
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f878 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800b0b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3720      	adds	r7, #32
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b088      	sub	sp, #32
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b0cc:	230d      	movs	r3, #13
 800b0ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0e0:	f107 0308 	add.w	r3, r7, #8
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7ff fd1a 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b0ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0f0:	210d      	movs	r1, #13
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f856 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800b0f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0fa:	69fb      	ldr	r3, [r7, #28]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3720      	adds	r7, #32
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b10c:	2300      	movs	r3, #0
 800b10e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b110:	230b      	movs	r3, #11
 800b112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b114:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b11a:	2300      	movs	r3, #0
 800b11c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b11e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b122:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b124:	f107 0308 	add.w	r3, r7, #8
 800b128:	4619      	mov	r1, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7ff fcf8 	bl	800ab20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b130:	f241 3288 	movw	r2, #5000	; 0x1388
 800b134:	210b      	movs	r1, #11
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f834 	bl	800b1a4 <SDMMC_GetCmdResp1>
 800b13c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b13e:	69fb      	ldr	r3, [r7, #28]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3720      	adds	r7, #32
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b150:	4b11      	ldr	r3, [pc, #68]	; (800b198 <SDMMC_GetCmdError+0x50>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a11      	ldr	r2, [pc, #68]	; (800b19c <SDMMC_GetCmdError+0x54>)
 800b156:	fba2 2303 	umull	r2, r3, r2, r3
 800b15a:	0a5b      	lsrs	r3, r3, #9
 800b15c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b160:	fb02 f303 	mul.w	r3, r2, r3
 800b164:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	1e5a      	subs	r2, r3, #1
 800b16a:	60fa      	str	r2, [r7, #12]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d102      	bne.n	800b176 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b170:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b174:	e009      	b.n	800b18a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d0f1      	beq.n	800b166 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a06      	ldr	r2, [pc, #24]	; (800b1a0 <SDMMC_GetCmdError+0x58>)
 800b186:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	24000000 	.word	0x24000000
 800b19c:	10624dd3 	.word	0x10624dd3
 800b1a0:	002000c5 	.word	0x002000c5

0800b1a4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b088      	sub	sp, #32
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b1b2:	4b70      	ldr	r3, [pc, #448]	; (800b374 <SDMMC_GetCmdResp1+0x1d0>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a70      	ldr	r2, [pc, #448]	; (800b378 <SDMMC_GetCmdResp1+0x1d4>)
 800b1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1bc:	0a5a      	lsrs	r2, r3, #9
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	fb02 f303 	mul.w	r3, r2, r3
 800b1c4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	1e5a      	subs	r2, r3, #1
 800b1ca:	61fa      	str	r2, [r7, #28]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d102      	bne.n	800b1d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1d4:	e0c9      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b1dc:	69ba      	ldr	r2, [r7, #24]
 800b1de:	4b67      	ldr	r3, [pc, #412]	; (800b37c <SDMMC_GetCmdResp1+0x1d8>)
 800b1e0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d0ef      	beq.n	800b1c6 <SDMMC_GetCmdResp1+0x22>
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1ea      	bne.n	800b1c6 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f4:	f003 0304 	and.w	r3, r3, #4
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d004      	beq.n	800b206 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2204      	movs	r2, #4
 800b200:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b202:	2304      	movs	r3, #4
 800b204:	e0b1      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b20a:	f003 0301 	and.w	r3, r3, #1
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d004      	beq.n	800b21c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2201      	movs	r2, #1
 800b216:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b218:	2301      	movs	r3, #1
 800b21a:	e0a6      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	4a58      	ldr	r2, [pc, #352]	; (800b380 <SDMMC_GetCmdResp1+0x1dc>)
 800b220:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f7ff fca6 	bl	800ab74 <SDMMC_GetCommandResponse>
 800b228:	4603      	mov	r3, r0
 800b22a:	461a      	mov	r2, r3
 800b22c:	7afb      	ldrb	r3, [r7, #11]
 800b22e:	4293      	cmp	r3, r2
 800b230:	d001      	beq.n	800b236 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b232:	2301      	movs	r3, #1
 800b234:	e099      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b236:	2100      	movs	r1, #0
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f7ff fca8 	bl	800ab8e <SDMMC_GetResponse>
 800b23e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b240:	697a      	ldr	r2, [r7, #20]
 800b242:	4b50      	ldr	r3, [pc, #320]	; (800b384 <SDMMC_GetCmdResp1+0x1e0>)
 800b244:	4013      	ands	r3, r2
 800b246:	2b00      	cmp	r3, #0
 800b248:	d101      	bne.n	800b24e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	e08d      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2b00      	cmp	r3, #0
 800b252:	da02      	bge.n	800b25a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b254:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b258:	e087      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b264:	2340      	movs	r3, #64	; 0x40
 800b266:	e080      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d001      	beq.n	800b276 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b272:	2380      	movs	r3, #128	; 0x80
 800b274:	e079      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b280:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b284:	e071      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b290:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b294:	e069      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b2a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2a4:	e061      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b2b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2b4:	e059      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2c4:	e051      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2d4:	e049      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b2e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2e4:	e041      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b2f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2f4:	e039      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b304:	e031      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b310:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b314:	e029      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b320:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b324:	e021      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b330:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b334:	e019      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d002      	beq.n	800b346 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b340:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b344:	e011      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d002      	beq.n	800b356 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b350:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b354:	e009      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	f003 0308 	and.w	r3, r3, #8
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b360:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b364:	e001      	b.n	800b36a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3720      	adds	r7, #32
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	24000000 	.word	0x24000000
 800b378:	10624dd3 	.word	0x10624dd3
 800b37c:	00200045 	.word	0x00200045
 800b380:	002000c5 	.word	0x002000c5
 800b384:	fdffe008 	.word	0xfdffe008

0800b388 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b390:	4b1f      	ldr	r3, [pc, #124]	; (800b410 <SDMMC_GetCmdResp2+0x88>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a1f      	ldr	r2, [pc, #124]	; (800b414 <SDMMC_GetCmdResp2+0x8c>)
 800b396:	fba2 2303 	umull	r2, r3, r2, r3
 800b39a:	0a5b      	lsrs	r3, r3, #9
 800b39c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a0:	fb02 f303 	mul.w	r3, r2, r3
 800b3a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	1e5a      	subs	r2, r3, #1
 800b3aa:	60fa      	str	r2, [r7, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d102      	bne.n	800b3b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3b4:	e026      	b.n	800b404 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d0ef      	beq.n	800b3a6 <SDMMC_GetCmdResp2+0x1e>
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1ea      	bne.n	800b3a6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d4:	f003 0304 	and.w	r3, r3, #4
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d004      	beq.n	800b3e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2204      	movs	r2, #4
 800b3e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3e2:	2304      	movs	r3, #4
 800b3e4:	e00e      	b.n	800b404 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ea:	f003 0301 	and.w	r3, r3, #1
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d004      	beq.n	800b3fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e003      	b.n	800b404 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a06      	ldr	r2, [pc, #24]	; (800b418 <SDMMC_GetCmdResp2+0x90>)
 800b400:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b402:	2300      	movs	r3, #0
}
 800b404:	4618      	mov	r0, r3
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	24000000 	.word	0x24000000
 800b414:	10624dd3 	.word	0x10624dd3
 800b418:	002000c5 	.word	0x002000c5

0800b41c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b424:	4b1a      	ldr	r3, [pc, #104]	; (800b490 <SDMMC_GetCmdResp3+0x74>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a1a      	ldr	r2, [pc, #104]	; (800b494 <SDMMC_GetCmdResp3+0x78>)
 800b42a:	fba2 2303 	umull	r2, r3, r2, r3
 800b42e:	0a5b      	lsrs	r3, r3, #9
 800b430:	f241 3288 	movw	r2, #5000	; 0x1388
 800b434:	fb02 f303 	mul.w	r3, r2, r3
 800b438:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	1e5a      	subs	r2, r3, #1
 800b43e:	60fa      	str	r2, [r7, #12]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d102      	bne.n	800b44a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b444:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b448:	e01b      	b.n	800b482 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b44e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b456:	2b00      	cmp	r3, #0
 800b458:	d0ef      	beq.n	800b43a <SDMMC_GetCmdResp3+0x1e>
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1ea      	bne.n	800b43a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b468:	f003 0304 	and.w	r3, r3, #4
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d004      	beq.n	800b47a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2204      	movs	r2, #4
 800b474:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b476:	2304      	movs	r3, #4
 800b478:	e003      	b.n	800b482 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a06      	ldr	r2, [pc, #24]	; (800b498 <SDMMC_GetCmdResp3+0x7c>)
 800b47e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3714      	adds	r7, #20
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	24000000 	.word	0x24000000
 800b494:	10624dd3 	.word	0x10624dd3
 800b498:	002000c5 	.word	0x002000c5

0800b49c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b088      	sub	sp, #32
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4aa:	4b35      	ldr	r3, [pc, #212]	; (800b580 <SDMMC_GetCmdResp6+0xe4>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a35      	ldr	r2, [pc, #212]	; (800b584 <SDMMC_GetCmdResp6+0xe8>)
 800b4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4b4:	0a5b      	lsrs	r3, r3, #9
 800b4b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4ba:	fb02 f303 	mul.w	r3, r2, r3
 800b4be:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	1e5a      	subs	r2, r3, #1
 800b4c4:	61fa      	str	r2, [r7, #28]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d102      	bne.n	800b4d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4ce:	e052      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d0ef      	beq.n	800b4c0 <SDMMC_GetCmdResp6+0x24>
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1ea      	bne.n	800b4c0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ee:	f003 0304 	and.w	r3, r3, #4
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d004      	beq.n	800b500 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2204      	movs	r2, #4
 800b4fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4fc:	2304      	movs	r3, #4
 800b4fe:	e03a      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d004      	beq.n	800b516 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2201      	movs	r2, #1
 800b510:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b512:	2301      	movs	r3, #1
 800b514:	e02f      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f7ff fb2c 	bl	800ab74 <SDMMC_GetCommandResponse>
 800b51c:	4603      	mov	r3, r0
 800b51e:	461a      	mov	r2, r3
 800b520:	7afb      	ldrb	r3, [r7, #11]
 800b522:	4293      	cmp	r3, r2
 800b524:	d001      	beq.n	800b52a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b526:	2301      	movs	r3, #1
 800b528:	e025      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	4a16      	ldr	r2, [pc, #88]	; (800b588 <SDMMC_GetCmdResp6+0xec>)
 800b52e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b530:	2100      	movs	r1, #0
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f7ff fb2b 	bl	800ab8e <SDMMC_GetResponse>
 800b538:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b540:	2b00      	cmp	r3, #0
 800b542:	d106      	bne.n	800b552 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	0c1b      	lsrs	r3, r3, #16
 800b548:	b29a      	uxth	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b54e:	2300      	movs	r3, #0
 800b550:	e011      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d002      	beq.n	800b562 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b55c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b560:	e009      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b56c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b570:	e001      	b.n	800b576 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b576:	4618      	mov	r0, r3
 800b578:	3720      	adds	r7, #32
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	24000000 	.word	0x24000000
 800b584:	10624dd3 	.word	0x10624dd3
 800b588:	002000c5 	.word	0x002000c5

0800b58c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b594:	4b22      	ldr	r3, [pc, #136]	; (800b620 <SDMMC_GetCmdResp7+0x94>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a22      	ldr	r2, [pc, #136]	; (800b624 <SDMMC_GetCmdResp7+0x98>)
 800b59a:	fba2 2303 	umull	r2, r3, r2, r3
 800b59e:	0a5b      	lsrs	r3, r3, #9
 800b5a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5a4:	fb02 f303 	mul.w	r3, r2, r3
 800b5a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	1e5a      	subs	r2, r3, #1
 800b5ae:	60fa      	str	r2, [r7, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d102      	bne.n	800b5ba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5b8:	e02c      	b.n	800b614 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d0ef      	beq.n	800b5aa <SDMMC_GetCmdResp7+0x1e>
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1ea      	bne.n	800b5aa <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5d8:	f003 0304 	and.w	r3, r3, #4
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d004      	beq.n	800b5ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2204      	movs	r2, #4
 800b5e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5e6:	2304      	movs	r3, #4
 800b5e8:	e014      	b.n	800b614 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ee:	f003 0301 	and.w	r3, r3, #1
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d004      	beq.n	800b600 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e009      	b.n	800b614 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d002      	beq.n	800b612 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2240      	movs	r2, #64	; 0x40
 800b610:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b612:	2300      	movs	r3, #0

}
 800b614:	4618      	mov	r0, r3
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	24000000 	.word	0x24000000
 800b624:	10624dd3 	.word	0x10624dd3

0800b628 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b628:	b084      	sub	sp, #16
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b084      	sub	sp, #16
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
 800b632:	f107 001c 	add.w	r0, r7, #28
 800b636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d120      	bne.n	800b682 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b644:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	68da      	ldr	r2, [r3, #12]
 800b650:	4b25      	ldr	r3, [pc, #148]	; (800b6e8 <USB_CoreInit+0xc0>)
 800b652:	4013      	ands	r3, r2
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b666:	2b01      	cmp	r3, #1
 800b668:	d105      	bne.n	800b676 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f001 fabe 	bl	800cbf8 <USB_CoreReset>
 800b67c:	4603      	mov	r3, r0
 800b67e:	73fb      	strb	r3, [r7, #15]
 800b680:	e01a      	b.n	800b6b8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f001 fab2 	bl	800cbf8 <USB_CoreReset>
 800b694:	4603      	mov	r3, r0
 800b696:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d106      	bne.n	800b6ac <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	639a      	str	r2, [r3, #56]	; 0x38
 800b6aa:	e005      	b.n	800b6b8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d10b      	bne.n	800b6d6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	f043 0206 	orr.w	r2, r3, #6
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	f043 0220 	orr.w	r2, r3, #32
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6e2:	b004      	add	sp, #16
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	ffbdffbf 	.word	0xffbdffbf

0800b6ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b6fa:	79fb      	ldrb	r3, [r7, #7]
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	d165      	bne.n	800b7cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	4a41      	ldr	r2, [pc, #260]	; (800b808 <USB_SetTurnaroundTime+0x11c>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d906      	bls.n	800b716 <USB_SetTurnaroundTime+0x2a>
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	4a40      	ldr	r2, [pc, #256]	; (800b80c <USB_SetTurnaroundTime+0x120>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d802      	bhi.n	800b716 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b710:	230f      	movs	r3, #15
 800b712:	617b      	str	r3, [r7, #20]
 800b714:	e062      	b.n	800b7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	4a3c      	ldr	r2, [pc, #240]	; (800b80c <USB_SetTurnaroundTime+0x120>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d906      	bls.n	800b72c <USB_SetTurnaroundTime+0x40>
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	4a3b      	ldr	r2, [pc, #236]	; (800b810 <USB_SetTurnaroundTime+0x124>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d802      	bhi.n	800b72c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b726:	230e      	movs	r3, #14
 800b728:	617b      	str	r3, [r7, #20]
 800b72a:	e057      	b.n	800b7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	4a38      	ldr	r2, [pc, #224]	; (800b810 <USB_SetTurnaroundTime+0x124>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d906      	bls.n	800b742 <USB_SetTurnaroundTime+0x56>
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	4a37      	ldr	r2, [pc, #220]	; (800b814 <USB_SetTurnaroundTime+0x128>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d802      	bhi.n	800b742 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b73c:	230d      	movs	r3, #13
 800b73e:	617b      	str	r3, [r7, #20]
 800b740:	e04c      	b.n	800b7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	4a33      	ldr	r2, [pc, #204]	; (800b814 <USB_SetTurnaroundTime+0x128>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d906      	bls.n	800b758 <USB_SetTurnaroundTime+0x6c>
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	4a32      	ldr	r2, [pc, #200]	; (800b818 <USB_SetTurnaroundTime+0x12c>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d802      	bhi.n	800b758 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b752:	230c      	movs	r3, #12
 800b754:	617b      	str	r3, [r7, #20]
 800b756:	e041      	b.n	800b7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	4a2f      	ldr	r2, [pc, #188]	; (800b818 <USB_SetTurnaroundTime+0x12c>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d906      	bls.n	800b76e <USB_SetTurnaroundTime+0x82>
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	4a2e      	ldr	r2, [pc, #184]	; (800b81c <USB_SetTurnaroundTime+0x130>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d802      	bhi.n	800b76e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b768:	230b      	movs	r3, #11
 800b76a:	617b      	str	r3, [r7, #20]
 800b76c:	e036      	b.n	800b7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	4a2a      	ldr	r2, [pc, #168]	; (800b81c <USB_SetTurnaroundTime+0x130>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d906      	bls.n	800b784 <USB_SetTurnaroundTime+0x98>
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	4a29      	ldr	r2, [pc, #164]	; (800b820 <USB_SetTurnaroundTime+0x134>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d802      	bhi.n	800b784 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b77e:	230a      	movs	r3, #10
 800b780:	617b      	str	r3, [r7, #20]
 800b782:	e02b      	b.n	800b7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	4a26      	ldr	r2, [pc, #152]	; (800b820 <USB_SetTurnaroundTime+0x134>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d906      	bls.n	800b79a <USB_SetTurnaroundTime+0xae>
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	4a25      	ldr	r2, [pc, #148]	; (800b824 <USB_SetTurnaroundTime+0x138>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d802      	bhi.n	800b79a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b794:	2309      	movs	r3, #9
 800b796:	617b      	str	r3, [r7, #20]
 800b798:	e020      	b.n	800b7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	4a21      	ldr	r2, [pc, #132]	; (800b824 <USB_SetTurnaroundTime+0x138>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d906      	bls.n	800b7b0 <USB_SetTurnaroundTime+0xc4>
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	4a20      	ldr	r2, [pc, #128]	; (800b828 <USB_SetTurnaroundTime+0x13c>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d802      	bhi.n	800b7b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b7aa:	2308      	movs	r3, #8
 800b7ac:	617b      	str	r3, [r7, #20]
 800b7ae:	e015      	b.n	800b7dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	4a1d      	ldr	r2, [pc, #116]	; (800b828 <USB_SetTurnaroundTime+0x13c>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d906      	bls.n	800b7c6 <USB_SetTurnaroundTime+0xda>
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	4a1c      	ldr	r2, [pc, #112]	; (800b82c <USB_SetTurnaroundTime+0x140>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d802      	bhi.n	800b7c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b7c0:	2307      	movs	r3, #7
 800b7c2:	617b      	str	r3, [r7, #20]
 800b7c4:	e00a      	b.n	800b7dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b7c6:	2306      	movs	r3, #6
 800b7c8:	617b      	str	r3, [r7, #20]
 800b7ca:	e007      	b.n	800b7dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b7cc:	79fb      	ldrb	r3, [r7, #7]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d102      	bne.n	800b7d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b7d2:	2309      	movs	r3, #9
 800b7d4:	617b      	str	r3, [r7, #20]
 800b7d6:	e001      	b.n	800b7dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b7d8:	2309      	movs	r3, #9
 800b7da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	68da      	ldr	r2, [r3, #12]
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	029b      	lsls	r3, r3, #10
 800b7f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b7f4:	431a      	orrs	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	371c      	adds	r7, #28
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr
 800b808:	00d8acbf 	.word	0x00d8acbf
 800b80c:	00e4e1bf 	.word	0x00e4e1bf
 800b810:	00f423ff 	.word	0x00f423ff
 800b814:	0106737f 	.word	0x0106737f
 800b818:	011a499f 	.word	0x011a499f
 800b81c:	01312cff 	.word	0x01312cff
 800b820:	014ca43f 	.word	0x014ca43f
 800b824:	016e35ff 	.word	0x016e35ff
 800b828:	01a6ab1f 	.word	0x01a6ab1f
 800b82c:	01e847ff 	.word	0x01e847ff

0800b830 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f043 0201 	orr.w	r2, r3, #1
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b844:	2300      	movs	r3, #0
}
 800b846:	4618      	mov	r0, r3
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr

0800b852 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b852:	b480      	push	{r7}
 800b854:	b083      	sub	sp, #12
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	f023 0201 	bic.w	r2, r3, #1
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	460b      	mov	r3, r1
 800b87e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b88c:	78fb      	ldrb	r3, [r7, #3]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d106      	bne.n	800b8a0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	60da      	str	r2, [r3, #12]
 800b89e:	e00b      	b.n	800b8b8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b8a0:	78fb      	ldrb	r3, [r7, #3]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d106      	bne.n	800b8b4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	60da      	str	r2, [r3, #12]
 800b8b2:	e001      	b.n	800b8b8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e003      	b.n	800b8c0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b8b8:	2032      	movs	r0, #50	; 0x32
 800b8ba:	f7f5 ff4f 	bl	800175c <HAL_Delay>

  return HAL_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b086      	sub	sp, #24
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b8d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	613b      	str	r3, [r7, #16]
 800b8e6:	e009      	b.n	800b8fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	3340      	adds	r3, #64	; 0x40
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	613b      	str	r3, [r7, #16]
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	2b0e      	cmp	r3, #14
 800b900:	d9f2      	bls.n	800b8e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b904:	2b00      	cmp	r3, #0
 800b906:	d11c      	bne.n	800b942 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b916:	f043 0302 	orr.w	r3, r3, #2
 800b91a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b920:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	e005      	b.n	800b94e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b946:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b954:	461a      	mov	r2, r3
 800b956:	2300      	movs	r3, #0
 800b958:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b960:	4619      	mov	r1, r3
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b968:	461a      	mov	r2, r3
 800b96a:	680b      	ldr	r3, [r1, #0]
 800b96c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b970:	2b01      	cmp	r3, #1
 800b972:	d10c      	bne.n	800b98e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b976:	2b00      	cmp	r3, #0
 800b978:	d104      	bne.n	800b984 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b97a:	2100      	movs	r1, #0
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f949 	bl	800bc14 <USB_SetDevSpeed>
 800b982:	e008      	b.n	800b996 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b984:	2101      	movs	r1, #1
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 f944 	bl	800bc14 <USB_SetDevSpeed>
 800b98c:	e003      	b.n	800b996 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b98e:	2103      	movs	r1, #3
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 f93f 	bl	800bc14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b996:	2110      	movs	r1, #16
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 f8f3 	bl	800bb84 <USB_FlushTxFifo>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 f911 	bl	800bbd0 <USB_FlushRxFifo>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d001      	beq.n	800b9b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9be:	461a      	mov	r2, r3
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	2300      	movs	r3, #0
 800b9da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9dc:	2300      	movs	r3, #0
 800b9de:	613b      	str	r3, [r7, #16]
 800b9e0:	e043      	b.n	800ba6a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	015a      	lsls	r2, r3, #5
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9f8:	d118      	bne.n	800ba2c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	015a      	lsls	r2, r3, #5
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	4413      	add	r3, r2
 800ba08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba12:	6013      	str	r3, [r2, #0]
 800ba14:	e013      	b.n	800ba3e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	015a      	lsls	r2, r3, #5
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba22:	461a      	mov	r2, r3
 800ba24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ba28:	6013      	str	r3, [r2, #0]
 800ba2a:	e008      	b.n	800ba3e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	015a      	lsls	r2, r3, #5
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	4413      	add	r3, r2
 800ba34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba38:	461a      	mov	r2, r3
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	015a      	lsls	r2, r3, #5
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	4413      	add	r3, r2
 800ba46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	015a      	lsls	r2, r3, #5
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	4413      	add	r3, r2
 800ba58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	3301      	adds	r3, #1
 800ba68:	613b      	str	r3, [r7, #16]
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6c:	693a      	ldr	r2, [r7, #16]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d3b7      	bcc.n	800b9e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba72:	2300      	movs	r3, #0
 800ba74:	613b      	str	r3, [r7, #16]
 800ba76:	e043      	b.n	800bb00 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	015a      	lsls	r2, r3, #5
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	4413      	add	r3, r2
 800ba80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba8e:	d118      	bne.n	800bac2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10a      	bne.n	800baac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	015a      	lsls	r2, r3, #5
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa2:	461a      	mov	r2, r3
 800baa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800baa8:	6013      	str	r3, [r2, #0]
 800baaa:	e013      	b.n	800bad4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	015a      	lsls	r2, r3, #5
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4413      	add	r3, r2
 800bab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab8:	461a      	mov	r2, r3
 800baba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	e008      	b.n	800bad4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	015a      	lsls	r2, r3, #5
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	4413      	add	r3, r2
 800baca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bace:	461a      	mov	r2, r3
 800bad0:	2300      	movs	r3, #0
 800bad2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	015a      	lsls	r2, r3, #5
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	4413      	add	r3, r2
 800badc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bae0:	461a      	mov	r2, r3
 800bae2:	2300      	movs	r3, #0
 800bae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	015a      	lsls	r2, r3, #5
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	4413      	add	r3, r2
 800baee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf2:	461a      	mov	r2, r3
 800baf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800baf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	3301      	adds	r3, #1
 800bafe:	613b      	str	r3, [r7, #16]
 800bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d3b7      	bcc.n	800ba78 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bb28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d105      	bne.n	800bb3c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	f043 0210 	orr.w	r2, r3, #16
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	699a      	ldr	r2, [r3, #24]
 800bb40:	4b0e      	ldr	r3, [pc, #56]	; (800bb7c <USB_DevInit+0x2b4>)
 800bb42:	4313      	orrs	r3, r2
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bb48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d005      	beq.n	800bb5a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	f043 0208 	orr.w	r2, r3, #8
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bb5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d105      	bne.n	800bb6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	699a      	ldr	r2, [r3, #24]
 800bb64:	4b06      	ldr	r3, [pc, #24]	; (800bb80 <USB_DevInit+0x2b8>)
 800bb66:	4313      	orrs	r3, r2
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb78:	b004      	add	sp, #16
 800bb7a:	4770      	bx	lr
 800bb7c:	803c3800 	.word	0x803c3800
 800bb80:	40000004 	.word	0x40000004

0800bb84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	019b      	lsls	r3, r3, #6
 800bb96:	f043 0220 	orr.w	r2, r3, #32
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3301      	adds	r3, #1
 800bba2:	60fb      	str	r3, [r7, #12]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	4a09      	ldr	r2, [pc, #36]	; (800bbcc <USB_FlushTxFifo+0x48>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d901      	bls.n	800bbb0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bbac:	2303      	movs	r3, #3
 800bbae:	e006      	b.n	800bbbe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	f003 0320 	and.w	r3, r3, #32
 800bbb8:	2b20      	cmp	r3, #32
 800bbba:	d0f0      	beq.n	800bb9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3714      	adds	r7, #20
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	00030d40 	.word	0x00030d40

0800bbd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2210      	movs	r2, #16
 800bbe0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	60fb      	str	r3, [r7, #12]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	4a09      	ldr	r2, [pc, #36]	; (800bc10 <USB_FlushRxFifo+0x40>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d901      	bls.n	800bbf4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e006      	b.n	800bc02 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	f003 0310 	and.w	r3, r3, #16
 800bbfc:	2b10      	cmp	r3, #16
 800bbfe:	d0f0      	beq.n	800bbe2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	00030d40 	.word	0x00030d40

0800bc14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	78fb      	ldrb	r3, [r7, #3]
 800bc2e:	68f9      	ldr	r1, [r7, #12]
 800bc30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc34:	4313      	orrs	r3, r2
 800bc36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3714      	adds	r7, #20
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr

0800bc46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bc46:	b480      	push	{r7}
 800bc48:	b087      	sub	sp, #28
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	f003 0306 	and.w	r3, r3, #6
 800bc5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d102      	bne.n	800bc6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bc66:	2300      	movs	r3, #0
 800bc68:	75fb      	strb	r3, [r7, #23]
 800bc6a:	e00a      	b.n	800bc82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	d002      	beq.n	800bc78 <USB_GetDevSpeed+0x32>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2b06      	cmp	r3, #6
 800bc76:	d102      	bne.n	800bc7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bc78:	2302      	movs	r3, #2
 800bc7a:	75fb      	strb	r3, [r7, #23]
 800bc7c:	e001      	b.n	800bc82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bc7e:	230f      	movs	r3, #15
 800bc80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	371c      	adds	r7, #28
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	785b      	ldrb	r3, [r3, #1]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d139      	bne.n	800bd20 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb2:	69da      	ldr	r2, [r3, #28]
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	f003 030f 	and.w	r3, r3, #15
 800bcbc:	2101      	movs	r1, #1
 800bcbe:	fa01 f303 	lsl.w	r3, r1, r3
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	68f9      	ldr	r1, [r7, #12]
 800bcc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcca:	4313      	orrs	r3, r2
 800bccc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	015a      	lsls	r2, r3, #5
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d153      	bne.n	800bd8c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	015a      	lsls	r2, r3, #5
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	4413      	add	r3, r2
 800bcec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	78db      	ldrb	r3, [r3, #3]
 800bcfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	059b      	lsls	r3, r3, #22
 800bd06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd08:	431a      	orrs	r2, r3
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	0159      	lsls	r1, r3, #5
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	440b      	add	r3, r1
 800bd12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd16:	4619      	mov	r1, r3
 800bd18:	4b20      	ldr	r3, [pc, #128]	; (800bd9c <USB_ActivateEndpoint+0x10c>)
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	600b      	str	r3, [r1, #0]
 800bd1e:	e035      	b.n	800bd8c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd26:	69da      	ldr	r2, [r3, #28]
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	f003 030f 	and.w	r3, r3, #15
 800bd30:	2101      	movs	r1, #1
 800bd32:	fa01 f303 	lsl.w	r3, r1, r3
 800bd36:	041b      	lsls	r3, r3, #16
 800bd38:	68f9      	ldr	r1, [r7, #12]
 800bd3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	015a      	lsls	r2, r3, #5
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	4413      	add	r3, r2
 800bd4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d119      	bne.n	800bd8c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	78db      	ldrb	r3, [r3, #3]
 800bd72:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bd74:	430b      	orrs	r3, r1
 800bd76:	431a      	orrs	r2, r3
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	0159      	lsls	r1, r3, #5
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	440b      	add	r3, r1
 800bd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd84:	4619      	mov	r1, r3
 800bd86:	4b05      	ldr	r3, [pc, #20]	; (800bd9c <USB_ActivateEndpoint+0x10c>)
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3714      	adds	r7, #20
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	10008000 	.word	0x10008000

0800bda0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	785b      	ldrb	r3, [r3, #1]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d161      	bne.n	800be80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	015a      	lsls	r2, r3, #5
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdd2:	d11f      	bne.n	800be14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	015a      	lsls	r2, r3, #5
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	4413      	add	r3, r2
 800bddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68ba      	ldr	r2, [r7, #8]
 800bde4:	0151      	lsls	r1, r2, #5
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	440a      	add	r2, r1
 800bdea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bdf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	015a      	lsls	r2, r3, #5
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	0151      	lsls	r1, r2, #5
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	440a      	add	r2, r1
 800be0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	f003 030f 	and.w	r3, r3, #15
 800be24:	2101      	movs	r1, #1
 800be26:	fa01 f303 	lsl.w	r3, r1, r3
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	43db      	mvns	r3, r3
 800be2e:	68f9      	ldr	r1, [r7, #12]
 800be30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be34:	4013      	ands	r3, r2
 800be36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be3e:	69da      	ldr	r2, [r3, #28]
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	f003 030f 	and.w	r3, r3, #15
 800be48:	2101      	movs	r1, #1
 800be4a:	fa01 f303 	lsl.w	r3, r1, r3
 800be4e:	b29b      	uxth	r3, r3
 800be50:	43db      	mvns	r3, r3
 800be52:	68f9      	ldr	r1, [r7, #12]
 800be54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be58:	4013      	ands	r3, r2
 800be5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	015a      	lsls	r2, r3, #5
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4413      	add	r3, r2
 800be64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	0159      	lsls	r1, r3, #5
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	440b      	add	r3, r1
 800be72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be76:	4619      	mov	r1, r3
 800be78:	4b35      	ldr	r3, [pc, #212]	; (800bf50 <USB_DeactivateEndpoint+0x1b0>)
 800be7a:	4013      	ands	r3, r2
 800be7c:	600b      	str	r3, [r1, #0]
 800be7e:	e060      	b.n	800bf42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	015a      	lsls	r2, r3, #5
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	4413      	add	r3, r2
 800be88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be96:	d11f      	bne.n	800bed8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	015a      	lsls	r2, r3, #5
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	4413      	add	r3, r2
 800bea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	0151      	lsls	r1, r2, #5
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	440a      	add	r2, r1
 800beae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800beb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	015a      	lsls	r2, r3, #5
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	4413      	add	r3, r2
 800bec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	0151      	lsls	r1, r2, #5
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	440a      	add	r2, r1
 800bece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bed6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	f003 030f 	and.w	r3, r3, #15
 800bee8:	2101      	movs	r1, #1
 800beea:	fa01 f303 	lsl.w	r3, r1, r3
 800beee:	041b      	lsls	r3, r3, #16
 800bef0:	43db      	mvns	r3, r3
 800bef2:	68f9      	ldr	r1, [r7, #12]
 800bef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bef8:	4013      	ands	r3, r2
 800befa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf02:	69da      	ldr	r2, [r3, #28]
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	f003 030f 	and.w	r3, r3, #15
 800bf0c:	2101      	movs	r1, #1
 800bf0e:	fa01 f303 	lsl.w	r3, r1, r3
 800bf12:	041b      	lsls	r3, r3, #16
 800bf14:	43db      	mvns	r3, r3
 800bf16:	68f9      	ldr	r1, [r7, #12]
 800bf18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	015a      	lsls	r2, r3, #5
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	4413      	add	r3, r2
 800bf28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	0159      	lsls	r1, r3, #5
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	440b      	add	r3, r1
 800bf36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4b05      	ldr	r3, [pc, #20]	; (800bf54 <USB_DeactivateEndpoint+0x1b4>)
 800bf3e:	4013      	ands	r3, r2
 800bf40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3714      	adds	r7, #20
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr
 800bf50:	ec337800 	.word	0xec337800
 800bf54:	eff37800 	.word	0xeff37800

0800bf58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b08a      	sub	sp, #40	; 0x28
 800bf5c:	af02      	add	r7, sp, #8
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	4613      	mov	r3, r2
 800bf64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	785b      	ldrb	r3, [r3, #1]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	f040 8163 	bne.w	800c240 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d132      	bne.n	800bfe8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	015a      	lsls	r2, r3, #5
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	4413      	add	r3, r2
 800bf8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf8e:	691a      	ldr	r2, [r3, #16]
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	0159      	lsls	r1, r3, #5
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	440b      	add	r3, r1
 800bf98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4ba5      	ldr	r3, [pc, #660]	; (800c234 <USB_EPStartXfer+0x2dc>)
 800bfa0:	4013      	ands	r3, r2
 800bfa2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	015a      	lsls	r2, r3, #5
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	4413      	add	r3, r2
 800bfac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfb0:	691b      	ldr	r3, [r3, #16]
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	0151      	lsls	r1, r2, #5
 800bfb6:	69fa      	ldr	r2, [r7, #28]
 800bfb8:	440a      	add	r2, r1
 800bfba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bfc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	015a      	lsls	r2, r3, #5
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	4413      	add	r3, r2
 800bfcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd0:	691a      	ldr	r2, [r3, #16]
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	0159      	lsls	r1, r3, #5
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	440b      	add	r3, r1
 800bfda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfde:	4619      	mov	r1, r3
 800bfe0:	4b95      	ldr	r3, [pc, #596]	; (800c238 <USB_EPStartXfer+0x2e0>)
 800bfe2:	4013      	ands	r3, r2
 800bfe4:	610b      	str	r3, [r1, #16]
 800bfe6:	e074      	b.n	800c0d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	015a      	lsls	r2, r3, #5
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	4413      	add	r3, r2
 800bff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bff4:	691a      	ldr	r2, [r3, #16]
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	0159      	lsls	r1, r3, #5
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	440b      	add	r3, r1
 800bffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c002:	4619      	mov	r1, r3
 800c004:	4b8c      	ldr	r3, [pc, #560]	; (800c238 <USB_EPStartXfer+0x2e0>)
 800c006:	4013      	ands	r3, r2
 800c008:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	015a      	lsls	r2, r3, #5
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	4413      	add	r3, r2
 800c012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c016:	691a      	ldr	r2, [r3, #16]
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	0159      	lsls	r1, r3, #5
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	440b      	add	r3, r1
 800c020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c024:	4619      	mov	r1, r3
 800c026:	4b83      	ldr	r3, [pc, #524]	; (800c234 <USB_EPStartXfer+0x2dc>)
 800c028:	4013      	ands	r3, r2
 800c02a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	015a      	lsls	r2, r3, #5
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	4413      	add	r3, r2
 800c034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c038:	691a      	ldr	r2, [r3, #16]
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	6959      	ldr	r1, [r3, #20]
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	440b      	add	r3, r1
 800c044:	1e59      	subs	r1, r3, #1
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c04e:	04d9      	lsls	r1, r3, #19
 800c050:	4b7a      	ldr	r3, [pc, #488]	; (800c23c <USB_EPStartXfer+0x2e4>)
 800c052:	400b      	ands	r3, r1
 800c054:	69b9      	ldr	r1, [r7, #24]
 800c056:	0148      	lsls	r0, r1, #5
 800c058:	69f9      	ldr	r1, [r7, #28]
 800c05a:	4401      	add	r1, r0
 800c05c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c060:	4313      	orrs	r3, r2
 800c062:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	015a      	lsls	r2, r3, #5
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	4413      	add	r3, r2
 800c06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c070:	691a      	ldr	r2, [r3, #16]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	695b      	ldr	r3, [r3, #20]
 800c076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c07a:	69b9      	ldr	r1, [r7, #24]
 800c07c:	0148      	lsls	r0, r1, #5
 800c07e:	69f9      	ldr	r1, [r7, #28]
 800c080:	4401      	add	r1, r0
 800c082:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c086:	4313      	orrs	r3, r2
 800c088:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	78db      	ldrb	r3, [r3, #3]
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d11f      	bne.n	800c0d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	015a      	lsls	r2, r3, #5
 800c096:	69fb      	ldr	r3, [r7, #28]
 800c098:	4413      	add	r3, r2
 800c09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	69ba      	ldr	r2, [r7, #24]
 800c0a2:	0151      	lsls	r1, r2, #5
 800c0a4:	69fa      	ldr	r2, [r7, #28]
 800c0a6:	440a      	add	r2, r1
 800c0a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c0b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	015a      	lsls	r2, r3, #5
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	0151      	lsls	r1, r2, #5
 800c0c4:	69fa      	ldr	r2, [r7, #28]
 800c0c6:	440a      	add	r2, r1
 800c0c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c0d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c0d2:	79fb      	ldrb	r3, [r7, #7]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d14b      	bne.n	800c170 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d009      	beq.n	800c0f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	015a      	lsls	r2, r3, #5
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	691b      	ldr	r3, [r3, #16]
 800c0f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	78db      	ldrb	r3, [r3, #3]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d128      	bne.n	800c14e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d110      	bne.n	800c12e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	015a      	lsls	r2, r3, #5
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	4413      	add	r3, r2
 800c114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	69ba      	ldr	r2, [r7, #24]
 800c11c:	0151      	lsls	r1, r2, #5
 800c11e:	69fa      	ldr	r2, [r7, #28]
 800c120:	440a      	add	r2, r1
 800c122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c12a:	6013      	str	r3, [r2, #0]
 800c12c:	e00f      	b.n	800c14e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	015a      	lsls	r2, r3, #5
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	4413      	add	r3, r2
 800c136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	69ba      	ldr	r2, [r7, #24]
 800c13e:	0151      	lsls	r1, r2, #5
 800c140:	69fa      	ldr	r2, [r7, #28]
 800c142:	440a      	add	r2, r1
 800c144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c14c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	015a      	lsls	r2, r3, #5
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	4413      	add	r3, r2
 800c156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	69ba      	ldr	r2, [r7, #24]
 800c15e:	0151      	lsls	r1, r2, #5
 800c160:	69fa      	ldr	r2, [r7, #28]
 800c162:	440a      	add	r2, r1
 800c164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c168:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c16c:	6013      	str	r3, [r2, #0]
 800c16e:	e133      	b.n	800c3d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	015a      	lsls	r2, r3, #5
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	4413      	add	r3, r2
 800c178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	69ba      	ldr	r2, [r7, #24]
 800c180:	0151      	lsls	r1, r2, #5
 800c182:	69fa      	ldr	r2, [r7, #28]
 800c184:	440a      	add	r2, r1
 800c186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c18a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c18e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	78db      	ldrb	r3, [r3, #3]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d015      	beq.n	800c1c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	695b      	ldr	r3, [r3, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f000 811b 	beq.w	800c3d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	f003 030f 	and.w	r3, r3, #15
 800c1b2:	2101      	movs	r1, #1
 800c1b4:	fa01 f303 	lsl.w	r3, r1, r3
 800c1b8:	69f9      	ldr	r1, [r7, #28]
 800c1ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	634b      	str	r3, [r1, #52]	; 0x34
 800c1c2:	e109      	b.n	800c3d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d110      	bne.n	800c1f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	015a      	lsls	r2, r3, #5
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	4413      	add	r3, r2
 800c1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	69ba      	ldr	r2, [r7, #24]
 800c1e4:	0151      	lsls	r1, r2, #5
 800c1e6:	69fa      	ldr	r2, [r7, #28]
 800c1e8:	440a      	add	r2, r1
 800c1ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c1f2:	6013      	str	r3, [r2, #0]
 800c1f4:	e00f      	b.n	800c216 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	015a      	lsls	r2, r3, #5
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	69ba      	ldr	r2, [r7, #24]
 800c206:	0151      	lsls	r1, r2, #5
 800c208:	69fa      	ldr	r2, [r7, #28]
 800c20a:	440a      	add	r2, r1
 800c20c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c214:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	68d9      	ldr	r1, [r3, #12]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	781a      	ldrb	r2, [r3, #0]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	695b      	ldr	r3, [r3, #20]
 800c222:	b298      	uxth	r0, r3
 800c224:	79fb      	ldrb	r3, [r7, #7]
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	4603      	mov	r3, r0
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f000 fa38 	bl	800c6a0 <USB_WritePacket>
 800c230:	e0d2      	b.n	800c3d8 <USB_EPStartXfer+0x480>
 800c232:	bf00      	nop
 800c234:	e007ffff 	.word	0xe007ffff
 800c238:	fff80000 	.word	0xfff80000
 800c23c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	015a      	lsls	r2, r3, #5
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	4413      	add	r3, r2
 800c248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c24c:	691a      	ldr	r2, [r3, #16]
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	0159      	lsls	r1, r3, #5
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	440b      	add	r3, r1
 800c256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c25a:	4619      	mov	r1, r3
 800c25c:	4b61      	ldr	r3, [pc, #388]	; (800c3e4 <USB_EPStartXfer+0x48c>)
 800c25e:	4013      	ands	r3, r2
 800c260:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	015a      	lsls	r2, r3, #5
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	4413      	add	r3, r2
 800c26a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c26e:	691a      	ldr	r2, [r3, #16]
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	0159      	lsls	r1, r3, #5
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	440b      	add	r3, r1
 800c278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c27c:	4619      	mov	r1, r3
 800c27e:	4b5a      	ldr	r3, [pc, #360]	; (800c3e8 <USB_EPStartXfer+0x490>)
 800c280:	4013      	ands	r3, r2
 800c282:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	695b      	ldr	r3, [r3, #20]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d123      	bne.n	800c2d4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	015a      	lsls	r2, r3, #5
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	4413      	add	r3, r2
 800c294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c298:	691a      	ldr	r2, [r3, #16]
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2a2:	69b9      	ldr	r1, [r7, #24]
 800c2a4:	0148      	lsls	r0, r1, #5
 800c2a6:	69f9      	ldr	r1, [r7, #28]
 800c2a8:	4401      	add	r1, r0
 800c2aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	015a      	lsls	r2, r3, #5
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2be:	691b      	ldr	r3, [r3, #16]
 800c2c0:	69ba      	ldr	r2, [r7, #24]
 800c2c2:	0151      	lsls	r1, r2, #5
 800c2c4:	69fa      	ldr	r2, [r7, #28]
 800c2c6:	440a      	add	r2, r1
 800c2c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2d0:	6113      	str	r3, [r2, #16]
 800c2d2:	e033      	b.n	800c33c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	695a      	ldr	r2, [r3, #20]
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	4413      	add	r3, r2
 800c2de:	1e5a      	subs	r2, r3, #1
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	015a      	lsls	r2, r3, #5
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f6:	691a      	ldr	r2, [r3, #16]
 800c2f8:	8afb      	ldrh	r3, [r7, #22]
 800c2fa:	04d9      	lsls	r1, r3, #19
 800c2fc:	4b3b      	ldr	r3, [pc, #236]	; (800c3ec <USB_EPStartXfer+0x494>)
 800c2fe:	400b      	ands	r3, r1
 800c300:	69b9      	ldr	r1, [r7, #24]
 800c302:	0148      	lsls	r0, r1, #5
 800c304:	69f9      	ldr	r1, [r7, #28]
 800c306:	4401      	add	r1, r0
 800c308:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c30c:	4313      	orrs	r3, r2
 800c30e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	015a      	lsls	r2, r3, #5
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	4413      	add	r3, r2
 800c318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c31c:	691a      	ldr	r2, [r3, #16]
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	8af9      	ldrh	r1, [r7, #22]
 800c324:	fb01 f303 	mul.w	r3, r1, r3
 800c328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c32c:	69b9      	ldr	r1, [r7, #24]
 800c32e:	0148      	lsls	r0, r1, #5
 800c330:	69f9      	ldr	r1, [r7, #28]
 800c332:	4401      	add	r1, r0
 800c334:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c338:	4313      	orrs	r3, r2
 800c33a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c33c:	79fb      	ldrb	r3, [r7, #7]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d10d      	bne.n	800c35e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d009      	beq.n	800c35e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	68d9      	ldr	r1, [r3, #12]
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	015a      	lsls	r2, r3, #5
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	4413      	add	r3, r2
 800c356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c35a:	460a      	mov	r2, r1
 800c35c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	78db      	ldrb	r3, [r3, #3]
 800c362:	2b01      	cmp	r3, #1
 800c364:	d128      	bne.n	800c3b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c372:	2b00      	cmp	r3, #0
 800c374:	d110      	bne.n	800c398 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	015a      	lsls	r2, r3, #5
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	4413      	add	r3, r2
 800c37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	69ba      	ldr	r2, [r7, #24]
 800c386:	0151      	lsls	r1, r2, #5
 800c388:	69fa      	ldr	r2, [r7, #28]
 800c38a:	440a      	add	r2, r1
 800c38c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c394:	6013      	str	r3, [r2, #0]
 800c396:	e00f      	b.n	800c3b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	015a      	lsls	r2, r3, #5
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	4413      	add	r3, r2
 800c3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	69ba      	ldr	r2, [r7, #24]
 800c3a8:	0151      	lsls	r1, r2, #5
 800c3aa:	69fa      	ldr	r2, [r7, #28]
 800c3ac:	440a      	add	r2, r1
 800c3ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	015a      	lsls	r2, r3, #5
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	4413      	add	r3, r2
 800c3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	69ba      	ldr	r2, [r7, #24]
 800c3c8:	0151      	lsls	r1, r2, #5
 800c3ca:	69fa      	ldr	r2, [r7, #28]
 800c3cc:	440a      	add	r2, r1
 800c3ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3720      	adds	r7, #32
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	fff80000 	.word	0xfff80000
 800c3e8:	e007ffff 	.word	0xe007ffff
 800c3ec:	1ff80000 	.word	0x1ff80000

0800c3f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b087      	sub	sp, #28
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	785b      	ldrb	r3, [r3, #1]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	f040 80cd 	bne.w	800c5ac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	695b      	ldr	r3, [r3, #20]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d132      	bne.n	800c480 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	015a      	lsls	r2, r3, #5
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	4413      	add	r3, r2
 800c422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c426:	691a      	ldr	r2, [r3, #16]
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	0159      	lsls	r1, r3, #5
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	440b      	add	r3, r1
 800c430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c434:	4619      	mov	r1, r3
 800c436:	4b98      	ldr	r3, [pc, #608]	; (800c698 <USB_EP0StartXfer+0x2a8>)
 800c438:	4013      	ands	r3, r2
 800c43a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	015a      	lsls	r2, r3, #5
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	4413      	add	r3, r2
 800c444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	693a      	ldr	r2, [r7, #16]
 800c44c:	0151      	lsls	r1, r2, #5
 800c44e:	697a      	ldr	r2, [r7, #20]
 800c450:	440a      	add	r2, r1
 800c452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c456:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c45a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	015a      	lsls	r2, r3, #5
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	4413      	add	r3, r2
 800c464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c468:	691a      	ldr	r2, [r3, #16]
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	0159      	lsls	r1, r3, #5
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	440b      	add	r3, r1
 800c472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c476:	4619      	mov	r1, r3
 800c478:	4b88      	ldr	r3, [pc, #544]	; (800c69c <USB_EP0StartXfer+0x2ac>)
 800c47a:	4013      	ands	r3, r2
 800c47c:	610b      	str	r3, [r1, #16]
 800c47e:	e04e      	b.n	800c51e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	015a      	lsls	r2, r3, #5
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	4413      	add	r3, r2
 800c488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c48c:	691a      	ldr	r2, [r3, #16]
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	0159      	lsls	r1, r3, #5
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	440b      	add	r3, r1
 800c496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c49a:	4619      	mov	r1, r3
 800c49c:	4b7f      	ldr	r3, [pc, #508]	; (800c69c <USB_EP0StartXfer+0x2ac>)
 800c49e:	4013      	ands	r3, r2
 800c4a0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	015a      	lsls	r2, r3, #5
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ae:	691a      	ldr	r2, [r3, #16]
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	0159      	lsls	r1, r3, #5
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	440b      	add	r3, r1
 800c4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4bc:	4619      	mov	r1, r3
 800c4be:	4b76      	ldr	r3, [pc, #472]	; (800c698 <USB_EP0StartXfer+0x2a8>)
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	695a      	ldr	r2, [r3, #20]
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d903      	bls.n	800c4d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	689a      	ldr	r2, [r3, #8]
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	015a      	lsls	r2, r3, #5
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	4413      	add	r3, r2
 800c4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	693a      	ldr	r2, [r7, #16]
 800c4e8:	0151      	lsls	r1, r2, #5
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	440a      	add	r2, r1
 800c4ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c4f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	015a      	lsls	r2, r3, #5
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	4413      	add	r3, r2
 800c500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c504:	691a      	ldr	r2, [r3, #16]
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c50e:	6939      	ldr	r1, [r7, #16]
 800c510:	0148      	lsls	r0, r1, #5
 800c512:	6979      	ldr	r1, [r7, #20]
 800c514:	4401      	add	r1, r0
 800c516:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c51a:	4313      	orrs	r3, r2
 800c51c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c51e:	79fb      	ldrb	r3, [r7, #7]
 800c520:	2b01      	cmp	r3, #1
 800c522:	d11e      	bne.n	800c562 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d009      	beq.n	800c540 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	4413      	add	r3, r2
 800c534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c538:	461a      	mov	r2, r3
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	691b      	ldr	r3, [r3, #16]
 800c53e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	015a      	lsls	r2, r3, #5
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	4413      	add	r3, r2
 800c548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	693a      	ldr	r2, [r7, #16]
 800c550:	0151      	lsls	r1, r2, #5
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	440a      	add	r2, r1
 800c556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c55a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c55e:	6013      	str	r3, [r2, #0]
 800c560:	e092      	b.n	800c688 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	015a      	lsls	r2, r3, #5
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	4413      	add	r3, r2
 800c56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	693a      	ldr	r2, [r7, #16]
 800c572:	0151      	lsls	r1, r2, #5
 800c574:	697a      	ldr	r2, [r7, #20]
 800c576:	440a      	add	r2, r1
 800c578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c57c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c580:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	695b      	ldr	r3, [r3, #20]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d07e      	beq.n	800c688 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	f003 030f 	and.w	r3, r3, #15
 800c59a:	2101      	movs	r1, #1
 800c59c:	fa01 f303 	lsl.w	r3, r1, r3
 800c5a0:	6979      	ldr	r1, [r7, #20]
 800c5a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	634b      	str	r3, [r1, #52]	; 0x34
 800c5aa:	e06d      	b.n	800c688 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	015a      	lsls	r2, r3, #5
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5b8:	691a      	ldr	r2, [r3, #16]
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	0159      	lsls	r1, r3, #5
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	440b      	add	r3, r1
 800c5c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	4b34      	ldr	r3, [pc, #208]	; (800c69c <USB_EP0StartXfer+0x2ac>)
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	015a      	lsls	r2, r3, #5
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5da:	691a      	ldr	r2, [r3, #16]
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	0159      	lsls	r1, r3, #5
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	440b      	add	r3, r1
 800c5e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	4b2b      	ldr	r3, [pc, #172]	; (800c698 <USB_EP0StartXfer+0x2a8>)
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	695b      	ldr	r3, [r3, #20]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d003      	beq.n	800c600 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	689a      	ldr	r2, [r3, #8]
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	015a      	lsls	r2, r3, #5
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	4413      	add	r3, r2
 800c608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c60c:	691b      	ldr	r3, [r3, #16]
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	0151      	lsls	r1, r2, #5
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	440a      	add	r2, r1
 800c616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c61a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c61e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	015a      	lsls	r2, r3, #5
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	4413      	add	r3, r2
 800c628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c62c:	691a      	ldr	r2, [r3, #16]
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c636:	6939      	ldr	r1, [r7, #16]
 800c638:	0148      	lsls	r0, r1, #5
 800c63a:	6979      	ldr	r1, [r7, #20]
 800c63c:	4401      	add	r1, r0
 800c63e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c642:	4313      	orrs	r3, r2
 800c644:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c646:	79fb      	ldrb	r3, [r7, #7]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d10d      	bne.n	800c668 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d009      	beq.n	800c668 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	68d9      	ldr	r1, [r3, #12]
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	015a      	lsls	r2, r3, #5
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	4413      	add	r3, r2
 800c660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c664:	460a      	mov	r2, r1
 800c666:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	015a      	lsls	r2, r3, #5
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	4413      	add	r3, r2
 800c670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	0151      	lsls	r1, r2, #5
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	440a      	add	r2, r1
 800c67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c682:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c686:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	371c      	adds	r7, #28
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	e007ffff 	.word	0xe007ffff
 800c69c:	fff80000 	.word	0xfff80000

0800c6a0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b089      	sub	sp, #36	; 0x24
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	71fb      	strb	r3, [r7, #7]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c6be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d11a      	bne.n	800c6fc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c6c6:	88bb      	ldrh	r3, [r7, #4]
 800c6c8:	3303      	adds	r3, #3
 800c6ca:	089b      	lsrs	r3, r3, #2
 800c6cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	61bb      	str	r3, [r7, #24]
 800c6d2:	e00f      	b.n	800c6f4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c6d4:	79fb      	ldrb	r3, [r7, #7]
 800c6d6:	031a      	lsls	r2, r3, #12
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	4413      	add	r3, r2
 800c6dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	61bb      	str	r3, [r7, #24]
 800c6f4:	69ba      	ldr	r2, [r7, #24]
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d3eb      	bcc.n	800c6d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3724      	adds	r7, #36	; 0x24
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c70a:	b480      	push	{r7}
 800c70c:	b089      	sub	sp, #36	; 0x24
 800c70e:	af00      	add	r7, sp, #0
 800c710:	60f8      	str	r0, [r7, #12]
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	4613      	mov	r3, r2
 800c716:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c720:	88fb      	ldrh	r3, [r7, #6]
 800c722:	3303      	adds	r3, #3
 800c724:	089b      	lsrs	r3, r3, #2
 800c726:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c728:	2300      	movs	r3, #0
 800c72a:	61bb      	str	r3, [r7, #24]
 800c72c:	e00b      	b.n	800c746 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	601a      	str	r2, [r3, #0]
    pDest++;
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	3304      	adds	r3, #4
 800c73e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	3301      	adds	r3, #1
 800c744:	61bb      	str	r3, [r7, #24]
 800c746:	69ba      	ldr	r2, [r7, #24]
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d3ef      	bcc.n	800c72e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c74e:	69fb      	ldr	r3, [r7, #28]
}
 800c750:	4618      	mov	r0, r3
 800c752:	3724      	adds	r7, #36	; 0x24
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	785b      	ldrb	r3, [r3, #1]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d12c      	bne.n	800c7d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	015a      	lsls	r2, r3, #5
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	4413      	add	r3, r2
 800c780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	db12      	blt.n	800c7b0 <USB_EPSetStall+0x54>
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00f      	beq.n	800c7b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	015a      	lsls	r2, r3, #5
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	4413      	add	r3, r2
 800c798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	68ba      	ldr	r2, [r7, #8]
 800c7a0:	0151      	lsls	r1, r2, #5
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	440a      	add	r2, r1
 800c7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c7ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	015a      	lsls	r2, r3, #5
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	68ba      	ldr	r2, [r7, #8]
 800c7c0:	0151      	lsls	r1, r2, #5
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	440a      	add	r2, r1
 800c7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c7ce:	6013      	str	r3, [r2, #0]
 800c7d0:	e02b      	b.n	800c82a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	015a      	lsls	r2, r3, #5
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	4413      	add	r3, r2
 800c7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	db12      	blt.n	800c80a <USB_EPSetStall+0xae>
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00f      	beq.n	800c80a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	015a      	lsls	r2, r3, #5
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	0151      	lsls	r1, r2, #5
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	440a      	add	r2, r1
 800c800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c808:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	015a      	lsls	r2, r3, #5
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	4413      	add	r3, r2
 800c812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	0151      	lsls	r1, r2, #5
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	440a      	add	r2, r1
 800c820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c828:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3714      	adds	r7, #20
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	785b      	ldrb	r3, [r3, #1]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d128      	bne.n	800c8a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	015a      	lsls	r2, r3, #5
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	4413      	add	r3, r2
 800c85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	0151      	lsls	r1, r2, #5
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	440a      	add	r2, r1
 800c86a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c86e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c872:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	78db      	ldrb	r3, [r3, #3]
 800c878:	2b03      	cmp	r3, #3
 800c87a:	d003      	beq.n	800c884 <USB_EPClearStall+0x4c>
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	78db      	ldrb	r3, [r3, #3]
 800c880:	2b02      	cmp	r3, #2
 800c882:	d138      	bne.n	800c8f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	015a      	lsls	r2, r3, #5
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	4413      	add	r3, r2
 800c88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	0151      	lsls	r1, r2, #5
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	440a      	add	r2, r1
 800c89a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c89e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8a2:	6013      	str	r3, [r2, #0]
 800c8a4:	e027      	b.n	800c8f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	015a      	lsls	r2, r3, #5
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	0151      	lsls	r1, r2, #5
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	440a      	add	r2, r1
 800c8bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c8c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	78db      	ldrb	r3, [r3, #3]
 800c8ca:	2b03      	cmp	r3, #3
 800c8cc:	d003      	beq.n	800c8d6 <USB_EPClearStall+0x9e>
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	78db      	ldrb	r3, [r3, #3]
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d10f      	bne.n	800c8f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	015a      	lsls	r2, r3, #5
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	4413      	add	r3, r2
 800c8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	0151      	lsls	r1, r2, #5
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	440a      	add	r2, r1
 800c8ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c8f6:	2300      	movs	r3, #0
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3714      	adds	r7, #20
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c904:	b480      	push	{r7}
 800c906:	b085      	sub	sp, #20
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	460b      	mov	r3, r1
 800c90e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c922:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c926:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	78fb      	ldrb	r3, [r7, #3]
 800c932:	011b      	lsls	r3, r3, #4
 800c934:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c938:	68f9      	ldr	r1, [r7, #12]
 800c93a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c93e:	4313      	orrs	r3, r2
 800c940:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c942:	2300      	movs	r3, #0
}
 800c944:	4618      	mov	r0, r3
 800c946:	3714      	adds	r7, #20
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c96a:	f023 0302 	bic.w	r3, r3, #2
 800c96e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c970:	2003      	movs	r0, #3
 800c972:	f7f4 fef3 	bl	800175c <HAL_Delay>

  return HAL_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c99a:	f043 0302 	orr.w	r3, r3, #2
 800c99e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c9a0:	2003      	movs	r0, #3
 800c9a2:	f7f4 fedb 	bl	800175c <HAL_Delay>

  return HAL_OK;
 800c9a6:	2300      	movs	r3, #0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	695b      	ldr	r3, [r3, #20]
 800c9bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	699b      	ldr	r3, [r3, #24]
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	4013      	ands	r3, r2
 800c9c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3714      	adds	r7, #20
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr

0800c9d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9d6:	b480      	push	{r7}
 800c9d8:	b085      	sub	sp, #20
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9e8:	699b      	ldr	r3, [r3, #24]
 800c9ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9f2:	69db      	ldr	r3, [r3, #28]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	4013      	ands	r3, r2
 800c9f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	0c1b      	lsrs	r3, r3, #16
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3714      	adds	r7, #20
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr

0800ca0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca0a:	b480      	push	{r7}
 800ca0c:	b085      	sub	sp, #20
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca1c:	699b      	ldr	r3, [r3, #24]
 800ca1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca26:	69db      	ldr	r3, [r3, #28]
 800ca28:	68ba      	ldr	r2, [r7, #8]
 800ca2a:	4013      	ands	r3, r2
 800ca2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	b29b      	uxth	r3, r3
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3714      	adds	r7, #20
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr

0800ca3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ca3e:	b480      	push	{r7}
 800ca40:	b085      	sub	sp, #20
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	460b      	mov	r3, r1
 800ca48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ca4e:	78fb      	ldrb	r3, [r7, #3]
 800ca50:	015a      	lsls	r2, r3, #5
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	4413      	add	r3, r2
 800ca56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca64:	695b      	ldr	r3, [r3, #20]
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	4013      	ands	r3, r2
 800ca6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ca6c:	68bb      	ldr	r3, [r7, #8]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3714      	adds	r7, #20
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ca7a:	b480      	push	{r7}
 800ca7c:	b087      	sub	sp, #28
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	460b      	mov	r3, r1
 800ca84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ca9e:	78fb      	ldrb	r3, [r7, #3]
 800caa0:	f003 030f 	and.w	r3, r3, #15
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	fa22 f303 	lsr.w	r3, r2, r3
 800caaa:	01db      	lsls	r3, r3, #7
 800caac:	b2db      	uxtb	r3, r3
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cab4:	78fb      	ldrb	r3, [r7, #3]
 800cab6:	015a      	lsls	r2, r3, #5
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	4413      	add	r3, r2
 800cabc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	693a      	ldr	r2, [r7, #16]
 800cac4:	4013      	ands	r3, r2
 800cac6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cac8:	68bb      	ldr	r3, [r7, #8]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	371c      	adds	r7, #28
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr

0800cad6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cad6:	b480      	push	{r7}
 800cad8:	b083      	sub	sp, #12
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	695b      	ldr	r3, [r3, #20]
 800cae2:	f003 0301 	and.w	r3, r3, #1
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	370c      	adds	r7, #12
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr
	...

0800caf4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb0e:	4619      	mov	r1, r3
 800cb10:	4b09      	ldr	r3, [pc, #36]	; (800cb38 <USB_ActivateSetup+0x44>)
 800cb12:	4013      	ands	r3, r2
 800cb14:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3714      	adds	r7, #20
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr
 800cb38:	fffff800 	.word	0xfffff800

0800cb3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b087      	sub	sp, #28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	460b      	mov	r3, r1
 800cb46:	607a      	str	r2, [r7, #4]
 800cb48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	333c      	adds	r3, #60	; 0x3c
 800cb52:	3304      	adds	r3, #4
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	4a26      	ldr	r2, [pc, #152]	; (800cbf4 <USB_EP0_OutStart+0xb8>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d90a      	bls.n	800cb76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb70:	d101      	bne.n	800cb76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	e037      	b.n	800cbe6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	2300      	movs	r3, #0
 800cb80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb88:	691b      	ldr	r3, [r3, #16]
 800cb8a:	697a      	ldr	r2, [r7, #20]
 800cb8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	697a      	ldr	r2, [r7, #20]
 800cba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cba4:	f043 0318 	orr.w	r3, r3, #24
 800cba8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	697a      	ldr	r2, [r7, #20]
 800cbb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbb8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cbbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cbbe:	7afb      	ldrb	r3, [r7, #11]
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d10f      	bne.n	800cbe4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbca:	461a      	mov	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	697a      	ldr	r2, [r7, #20]
 800cbda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbde:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cbe2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	371c      	adds	r7, #28
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	4f54300a 	.word	0x4f54300a

0800cbf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cc00:	2300      	movs	r3, #0
 800cc02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	3301      	adds	r3, #1
 800cc08:	60fb      	str	r3, [r7, #12]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	4a13      	ldr	r2, [pc, #76]	; (800cc5c <USB_CoreReset+0x64>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d901      	bls.n	800cc16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc12:	2303      	movs	r3, #3
 800cc14:	e01b      	b.n	800cc4e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	691b      	ldr	r3, [r3, #16]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	daf2      	bge.n	800cc04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	691b      	ldr	r3, [r3, #16]
 800cc26:	f043 0201 	orr.w	r2, r3, #1
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	3301      	adds	r3, #1
 800cc32:	60fb      	str	r3, [r7, #12]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	4a09      	ldr	r2, [pc, #36]	; (800cc5c <USB_CoreReset+0x64>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d901      	bls.n	800cc40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc3c:	2303      	movs	r3, #3
 800cc3e:	e006      	b.n	800cc4e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	f003 0301 	and.w	r3, r3, #1
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d0f0      	beq.n	800cc2e <USB_CoreReset+0x36>

  return HAL_OK;
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3714      	adds	r7, #20
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	00030d40 	.word	0x00030d40

0800cc60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cc64:	4904      	ldr	r1, [pc, #16]	; (800cc78 <MX_FATFS_Init+0x18>)
 800cc66:	4805      	ldr	r0, [pc, #20]	; (800cc7c <MX_FATFS_Init+0x1c>)
 800cc68:	f005 f9ea 	bl	8012040 <FATFS_LinkDriver>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	461a      	mov	r2, r3
 800cc70:	4b03      	ldr	r3, [pc, #12]	; (800cc80 <MX_FATFS_Init+0x20>)
 800cc72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cc74:	bf00      	nop
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	24000a74 	.word	0x24000a74
 800cc7c:	0801342c 	.word	0x0801342c
 800cc80:	24000a70 	.word	0x24000a70

0800cc84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cc84:	b480      	push	{r7}
 800cc86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cc88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cc9e:	f000 f879 	bl	800cd94 <BSP_SD_IsDetected>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d001      	beq.n	800ccac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cca8:	2302      	movs	r3, #2
 800ccaa:	e012      	b.n	800ccd2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ccac:	480b      	ldr	r0, [pc, #44]	; (800ccdc <BSP_SD_Init+0x48>)
 800ccae:	f7fb f977 	bl	8007fa0 <HAL_SD_Init>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ccb6:	79fb      	ldrb	r3, [r7, #7]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d109      	bne.n	800ccd0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ccbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ccc0:	4806      	ldr	r0, [pc, #24]	; (800ccdc <BSP_SD_Init+0x48>)
 800ccc2:	f7fc f83b 	bl	8008d3c <HAL_SD_ConfigWideBusOperation>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d001      	beq.n	800ccd0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ccd0:	79fb      	ldrb	r3, [r7, #7]
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	24000564 	.word	0x24000564

0800cce0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b088      	sub	sp, #32
 800cce4:	af02      	add	r7, sp, #8
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
 800ccec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68ba      	ldr	r2, [r7, #8]
 800ccfa:	68f9      	ldr	r1, [r7, #12]
 800ccfc:	4806      	ldr	r0, [pc, #24]	; (800cd18 <BSP_SD_ReadBlocks+0x38>)
 800ccfe:	f7fb fa73 	bl	80081e8 <HAL_SD_ReadBlocks>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d001      	beq.n	800cd0c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cd08:	2301      	movs	r3, #1
 800cd0a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3718      	adds	r7, #24
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	24000564 	.word	0x24000564

0800cd1c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b088      	sub	sp, #32
 800cd20:	af02      	add	r7, sp, #8
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
 800cd28:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	68f9      	ldr	r1, [r7, #12]
 800cd38:	4806      	ldr	r0, [pc, #24]	; (800cd54 <BSP_SD_WriteBlocks+0x38>)
 800cd3a:	f7fb fbdf 	bl	80084fc <HAL_SD_WriteBlocks>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cd48:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3718      	adds	r7, #24
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	24000564 	.word	0x24000564

0800cd58 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cd5c:	4805      	ldr	r0, [pc, #20]	; (800cd74 <BSP_SD_GetCardState+0x1c>)
 800cd5e:	f7fc f897 	bl	8008e90 <HAL_SD_GetCardState>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	bf14      	ite	ne
 800cd68:	2301      	movne	r3, #1
 800cd6a:	2300      	moveq	r3, #0
 800cd6c:	b2db      	uxtb	r3, r3
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	24000564 	.word	0x24000564

0800cd78 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cd80:	6879      	ldr	r1, [r7, #4]
 800cd82:	4803      	ldr	r0, [pc, #12]	; (800cd90 <BSP_SD_GetCardInfo+0x18>)
 800cd84:	f7fb ffae 	bl	8008ce4 <HAL_SD_GetCardInfo>
}
 800cd88:	bf00      	nop
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	24000564 	.word	0x24000564

0800cd94 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800cd9e:	79fb      	ldrb	r3, [r7, #7]
 800cda0:	b2db      	uxtb	r3, r3
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
	...

0800cdb0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cdba:	4b0b      	ldr	r3, [pc, #44]	; (800cde8 <SD_CheckStatus+0x38>)
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cdc0:	f7ff ffca 	bl	800cd58 <BSP_SD_GetCardState>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d107      	bne.n	800cdda <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cdca:	4b07      	ldr	r3, [pc, #28]	; (800cde8 <SD_CheckStatus+0x38>)
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	f023 0301 	bic.w	r3, r3, #1
 800cdd4:	b2da      	uxtb	r2, r3
 800cdd6:	4b04      	ldr	r3, [pc, #16]	; (800cde8 <SD_CheckStatus+0x38>)
 800cdd8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cdda:	4b03      	ldr	r3, [pc, #12]	; (800cde8 <SD_CheckStatus+0x38>)
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	b2db      	uxtb	r3, r3
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	2400000d 	.word	0x2400000d

0800cdec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cdf6:	4b0b      	ldr	r3, [pc, #44]	; (800ce24 <SD_initialize+0x38>)
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cdfc:	f7ff ff4a 	bl	800cc94 <BSP_SD_Init>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d107      	bne.n	800ce16 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ce06:	79fb      	ldrb	r3, [r7, #7]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7ff ffd1 	bl	800cdb0 <SD_CheckStatus>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	461a      	mov	r2, r3
 800ce12:	4b04      	ldr	r3, [pc, #16]	; (800ce24 <SD_initialize+0x38>)
 800ce14:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ce16:	4b03      	ldr	r3, [pc, #12]	; (800ce24 <SD_initialize+0x38>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	b2db      	uxtb	r3, r3
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	2400000d 	.word	0x2400000d

0800ce28 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	4603      	mov	r3, r0
 800ce30:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ce32:	79fb      	ldrb	r3, [r7, #7]
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7ff ffbb 	bl	800cdb0 <SD_CheckStatus>
 800ce3a:	4603      	mov	r3, r0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60b9      	str	r1, [r7, #8]
 800ce4c:	607a      	str	r2, [r7, #4]
 800ce4e:	603b      	str	r3, [r7, #0]
 800ce50:	4603      	mov	r3, r0
 800ce52:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ce54:	2301      	movs	r3, #1
 800ce56:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ce58:	f04f 33ff 	mov.w	r3, #4294967295
 800ce5c:	683a      	ldr	r2, [r7, #0]
 800ce5e:	6879      	ldr	r1, [r7, #4]
 800ce60:	68b8      	ldr	r0, [r7, #8]
 800ce62:	f7ff ff3d 	bl	800cce0 <BSP_SD_ReadBlocks>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d107      	bne.n	800ce7c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ce6c:	bf00      	nop
 800ce6e:	f7ff ff73 	bl	800cd58 <BSP_SD_GetCardState>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d1fa      	bne.n	800ce6e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ce7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3718      	adds	r7, #24
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b086      	sub	sp, #24
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	607a      	str	r2, [r7, #4]
 800ce90:	603b      	str	r3, [r7, #0]
 800ce92:	4603      	mov	r3, r0
 800ce94:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ce96:	2301      	movs	r3, #1
 800ce98:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ce9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	6879      	ldr	r1, [r7, #4]
 800cea2:	68b8      	ldr	r0, [r7, #8]
 800cea4:	f7ff ff3a 	bl	800cd1c <BSP_SD_WriteBlocks>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d107      	bne.n	800cebe <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ceae:	bf00      	nop
 800ceb0:	f7ff ff52 	bl	800cd58 <BSP_SD_GetCardState>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1fa      	bne.n	800ceb0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ceba:	2300      	movs	r3, #0
 800cebc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cebe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b08c      	sub	sp, #48	; 0x30
 800cecc:	af00      	add	r7, sp, #0
 800cece:	4603      	mov	r3, r0
 800ced0:	603a      	str	r2, [r7, #0]
 800ced2:	71fb      	strb	r3, [r7, #7]
 800ced4:	460b      	mov	r3, r1
 800ced6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ced8:	2301      	movs	r3, #1
 800ceda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cede:	4b25      	ldr	r3, [pc, #148]	; (800cf74 <SD_ioctl+0xac>)
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	f003 0301 	and.w	r3, r3, #1
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d001      	beq.n	800cef0 <SD_ioctl+0x28>
 800ceec:	2303      	movs	r3, #3
 800ceee:	e03c      	b.n	800cf6a <SD_ioctl+0xa2>

  switch (cmd)
 800cef0:	79bb      	ldrb	r3, [r7, #6]
 800cef2:	2b03      	cmp	r3, #3
 800cef4:	d834      	bhi.n	800cf60 <SD_ioctl+0x98>
 800cef6:	a201      	add	r2, pc, #4	; (adr r2, 800cefc <SD_ioctl+0x34>)
 800cef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cefc:	0800cf0d 	.word	0x0800cf0d
 800cf00:	0800cf15 	.word	0x0800cf15
 800cf04:	0800cf2d 	.word	0x0800cf2d
 800cf08:	0800cf47 	.word	0x0800cf47
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf12:	e028      	b.n	800cf66 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf14:	f107 0308 	add.w	r3, r7, #8
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7ff ff2d 	bl	800cd78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cf1e:	6a3a      	ldr	r2, [r7, #32]
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cf24:	2300      	movs	r3, #0
 800cf26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf2a:	e01c      	b.n	800cf66 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf2c:	f107 0308 	add.w	r3, r7, #8
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7ff ff21 	bl	800cd78 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf38:	b29a      	uxth	r2, r3
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf44:	e00f      	b.n	800cf66 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf46:	f107 0308 	add.w	r3, r7, #8
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7ff ff14 	bl	800cd78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf52:	0a5a      	lsrs	r2, r3, #9
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf5e:	e002      	b.n	800cf66 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cf60:	2304      	movs	r3, #4
 800cf62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cf66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3730      	adds	r7, #48	; 0x30
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	2400000d 	.word	0x2400000d

0800cf78 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	460b      	mov	r3, r1
 800cf82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800cf84:	f248 0074 	movw	r0, #32884	; 0x8074
 800cf88:	f005 fd92 	bl	8012ab0 <malloc>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d105      	bne.n	800cfa2 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cf9e:	2302      	movs	r3, #2
 800cfa0:	e034      	b.n	800d00c <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	7c1b      	ldrb	r3, [r3, #16]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d115      	bne.n	800cfde <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800cfb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfb6:	2202      	movs	r2, #2
 800cfb8:	2101      	movs	r1, #1
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f005 fbdf 	bl	801277e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800cfc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfcc:	2202      	movs	r2, #2
 800cfce:	2181      	movs	r1, #129	; 0x81
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f005 fbd4 	bl	801277e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	871a      	strh	r2, [r3, #56]	; 0x38
 800cfdc:	e012      	b.n	800d004 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800cfde:	2340      	movs	r3, #64	; 0x40
 800cfe0:	2202      	movs	r2, #2
 800cfe2:	2101      	movs	r1, #1
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f005 fbca 	bl	801277e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2201      	movs	r2, #1
 800cfee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800cff2:	2340      	movs	r3, #64	; 0x40
 800cff4:	2202      	movs	r2, #2
 800cff6:	2181      	movs	r1, #129	; 0x81
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f005 fbc0 	bl	801277e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2201      	movs	r2, #1
 800d002:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 f98e 	bl	800d326 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	460b      	mov	r3, r1
 800d01e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800d020:	2101      	movs	r1, #1
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f005 fbd1 	bl	80127ca <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800d030:	2181      	movs	r1, #129	; 0x81
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f005 fbc9 	bl	80127ca <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 f9cf 	bl	800d3e2 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d009      	beq.n	800d062 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d054:	4618      	mov	r0, r3
 800d056:	f005 fd33 	bl	8012ac0 <free>
    pdev->pClassData = NULL;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d062:	2300      	movs	r3, #0
}
 800d064:	4618      	mov	r0, r3
 800d066:	3708      	adds	r7, #8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b086      	sub	sp, #24
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d07c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800d07e:	2300      	movs	r3, #0
 800d080:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800d082:	2300      	movs	r3, #0
 800d084:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d04d      	beq.n	800d12e <USBD_MSC_Setup+0xc2>
 800d092:	2b20      	cmp	r3, #32
 800d094:	f040 80c6 	bne.w	800d224 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	785b      	ldrb	r3, [r3, #1]
 800d09c:	2bfe      	cmp	r3, #254	; 0xfe
 800d09e:	d002      	beq.n	800d0a6 <USBD_MSC_Setup+0x3a>
 800d0a0:	2bff      	cmp	r3, #255	; 0xff
 800d0a2:	d024      	beq.n	800d0ee <USBD_MSC_Setup+0x82>
 800d0a4:	e03b      	b.n	800d11e <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	885b      	ldrh	r3, [r3, #2]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d118      	bne.n	800d0e0 <USBD_MSC_Setup+0x74>
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	88db      	ldrh	r3, [r3, #6]
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d114      	bne.n	800d0e0 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	da0f      	bge.n	800d0e0 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0c6:	699b      	ldr	r3, [r3, #24]
 800d0c8:	4798      	blx	r3
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f002 fdaa 	bl	800fc32 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d0de:	e025      	b.n	800d12c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800d0e0:	6839      	ldr	r1, [r7, #0]
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f002 fd34 	bl	800fb50 <USBD_CtlError>
        ret = USBD_FAIL;
 800d0e8:	2303      	movs	r3, #3
 800d0ea:	75fb      	strb	r3, [r7, #23]
      break;
 800d0ec:	e01e      	b.n	800d12c <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	885b      	ldrh	r3, [r3, #2]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d10c      	bne.n	800d110 <USBD_MSC_Setup+0xa4>
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	88db      	ldrh	r3, [r3, #6]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d108      	bne.n	800d110 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d104:	2b00      	cmp	r3, #0
 800d106:	db03      	blt.n	800d110 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f000 f947 	bl	800d39c <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d10e:	e00d      	b.n	800d12c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800d110:	6839      	ldr	r1, [r7, #0]
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f002 fd1c 	bl	800fb50 <USBD_CtlError>
        ret = USBD_FAIL;
 800d118:	2303      	movs	r3, #3
 800d11a:	75fb      	strb	r3, [r7, #23]
      break;
 800d11c:	e006      	b.n	800d12c <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800d11e:	6839      	ldr	r1, [r7, #0]
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f002 fd15 	bl	800fb50 <USBD_CtlError>
      ret = USBD_FAIL;
 800d126:	2303      	movs	r3, #3
 800d128:	75fb      	strb	r3, [r7, #23]
      break;
 800d12a:	bf00      	nop
    }
    break;
 800d12c:	e081      	b.n	800d232 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	785b      	ldrb	r3, [r3, #1]
 800d132:	2b0b      	cmp	r3, #11
 800d134:	d86d      	bhi.n	800d212 <USBD_MSC_Setup+0x1a6>
 800d136:	a201      	add	r2, pc, #4	; (adr r2, 800d13c <USBD_MSC_Setup+0xd0>)
 800d138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d13c:	0800d16d 	.word	0x0800d16d
 800d140:	0800d1e3 	.word	0x0800d1e3
 800d144:	0800d213 	.word	0x0800d213
 800d148:	0800d213 	.word	0x0800d213
 800d14c:	0800d213 	.word	0x0800d213
 800d150:	0800d213 	.word	0x0800d213
 800d154:	0800d213 	.word	0x0800d213
 800d158:	0800d213 	.word	0x0800d213
 800d15c:	0800d213 	.word	0x0800d213
 800d160:	0800d213 	.word	0x0800d213
 800d164:	0800d195 	.word	0x0800d195
 800d168:	0800d1bd 	.word	0x0800d1bd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d172:	2b03      	cmp	r3, #3
 800d174:	d107      	bne.n	800d186 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d176:	f107 030e 	add.w	r3, r7, #14
 800d17a:	2202      	movs	r2, #2
 800d17c:	4619      	mov	r1, r3
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f002 fd57 	bl	800fc32 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d184:	e04d      	b.n	800d222 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d186:	6839      	ldr	r1, [r7, #0]
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f002 fce1 	bl	800fb50 <USBD_CtlError>
        ret = USBD_FAIL;
 800d18e:	2303      	movs	r3, #3
 800d190:	75fb      	strb	r3, [r7, #23]
      break;
 800d192:	e046      	b.n	800d222 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d19a:	2b03      	cmp	r3, #3
 800d19c:	d107      	bne.n	800d1ae <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f002 fd43 	bl	800fc32 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d1ac:	e039      	b.n	800d222 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d1ae:	6839      	ldr	r1, [r7, #0]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f002 fccd 	bl	800fb50 <USBD_CtlError>
        ret = USBD_FAIL;
 800d1b6:	2303      	movs	r3, #3
 800d1b8:	75fb      	strb	r3, [r7, #23]
      break;
 800d1ba:	e032      	b.n	800d222 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1c2:	2b03      	cmp	r3, #3
 800d1c4:	d106      	bne.n	800d1d4 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	885b      	ldrh	r3, [r3, #2]
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d1d2:	e026      	b.n	800d222 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f002 fcba 	bl	800fb50 <USBD_CtlError>
        ret = USBD_FAIL;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	75fb      	strb	r3, [r7, #23]
      break;
 800d1e0:	e01f      	b.n	800d222 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1e8:	2b03      	cmp	r3, #3
 800d1ea:	d119      	bne.n	800d220 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	885b      	ldrh	r3, [r3, #2]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d115      	bne.n	800d220 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	889b      	ldrh	r3, [r3, #4]
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f005 fb03 	bl	8012808 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	889b      	ldrh	r3, [r3, #4]
 800d206:	b2db      	uxtb	r3, r3
 800d208:	4619      	mov	r1, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 fa90 	bl	800d730 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800d210:	e006      	b.n	800d220 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800d212:	6839      	ldr	r1, [r7, #0]
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f002 fc9b 	bl	800fb50 <USBD_CtlError>
      ret = USBD_FAIL;
 800d21a:	2303      	movs	r3, #3
 800d21c:	75fb      	strb	r3, [r7, #23]
      break;
 800d21e:	e000      	b.n	800d222 <USBD_MSC_Setup+0x1b6>
      break;
 800d220:	bf00      	nop
    }
    break;
 800d222:	e006      	b.n	800d232 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800d224:	6839      	ldr	r1, [r7, #0]
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f002 fc92 	bl	800fb50 <USBD_CtlError>
    ret = USBD_FAIL;
 800d22c:	2303      	movs	r3, #3
 800d22e:	75fb      	strb	r3, [r7, #23]
    break;
 800d230:	bf00      	nop
  }

  return (uint8_t)ret;
 800d232:	7dfb      	ldrb	r3, [r7, #23]
}
 800d234:	4618      	mov	r0, r3
 800d236:	3718      	adds	r7, #24
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	460b      	mov	r3, r1
 800d246:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800d248:	78fb      	ldrb	r3, [r7, #3]
 800d24a:	4619      	mov	r1, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 f8d9 	bl	800d404 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800d252:	2300      	movs	r3, #0
}
 800d254:	4618      	mov	r0, r3
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	460b      	mov	r3, r1
 800d266:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800d268:	78fb      	ldrb	r3, [r7, #3]
 800d26a:	4619      	mov	r1, r3
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 f8fd 	bl	800d46c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2220      	movs	r2, #32
 800d288:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800d28a:	4b03      	ldr	r3, [pc, #12]	; (800d298 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	370c      	adds	r7, #12
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr
 800d298:	24000048 	.word	0x24000048

0800d29c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2220      	movs	r2, #32
 800d2a8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800d2aa:	4b03      	ldr	r3, [pc, #12]	; (800d2b8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr
 800d2b8:	24000068 	.word	0x24000068

0800d2bc <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2220      	movs	r2, #32
 800d2c8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800d2ca:	4b03      	ldr	r3, [pc, #12]	; (800d2d8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr
 800d2d8:	24000088 	.word	0x24000088

0800d2dc <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	220a      	movs	r2, #10
 800d2e8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800d2ea:	4b03      	ldr	r3, [pc, #12]	; (800d2f8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr
 800d2f8:	240000a8 	.word	0x240000a8

0800d2fc <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d101      	bne.n	800d310 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d30c:	2303      	movs	r3, #3
 800d30e:	e004      	b.n	800d31a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	683a      	ldr	r2, [r7, #0]
 800d314:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	370c      	adds	r7, #12
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr

0800d326 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b084      	sub	sp, #16
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d334:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2200      	movs	r2, #0
 800d33a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	f248 0361 	movw	r3, #32865	; 0x8061
 800d348:	4413      	add	r3, r2
 800d34a:	2200      	movs	r2, #0
 800d34c:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 800d34e:	68fa      	ldr	r2, [r7, #12]
 800d350:	f248 0360 	movw	r3, #32864	; 0x8060
 800d354:	4413      	add	r3, r2
 800d356:	2200      	movs	r2, #0
 800d358:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	f248 0362 	movw	r3, #32866	; 0x8062
 800d360:	4413      	add	r3, r2
 800d362:	2200      	movs	r2, #0
 800d364:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2000      	movs	r0, #0
 800d370:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800d372:	2101      	movs	r1, #1
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f005 fa47 	bl	8012808 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800d37a:	2181      	movs	r1, #129	; 0x81
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f005 fa43 	bl	8012808 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f248 0210 	movw	r2, #32784	; 0x8010
 800d388:	441a      	add	r2, r3
 800d38a:	231f      	movs	r3, #31
 800d38c:	2101      	movs	r1, #1
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f005 fb03 	bl	801299a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d394:	bf00      	nop
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3aa:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800d3b8:	2181      	movs	r1, #129	; 0x81
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f005 fa62 	bl	8012884 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f005 fa5e 	bl	8012884 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f248 0210 	movw	r2, #32784	; 0x8010
 800d3ce:	441a      	add	r2, r3
 800d3d0:	231f      	movs	r3, #31
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f005 fae0 	bl	801299a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d3da:	bf00      	nop
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800d3e2:	b480      	push	{r7}
 800d3e4:	b085      	sub	sp, #20
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3f0:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	721a      	strb	r2, [r3, #8]
}
 800d3f8:	bf00      	nop
 800d3fa:	3714      	adds	r7, #20
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	460b      	mov	r3, r1
 800d40e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d416:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	7a1b      	ldrb	r3, [r3, #8]
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	d004      	beq.n	800d42a <MSC_BOT_DataIn+0x26>
 800d420:	2b02      	cmp	r3, #2
 800d422:	db1c      	blt.n	800d45e <MSC_BOT_DataIn+0x5a>
 800d424:	2b04      	cmp	r3, #4
 800d426:	dc1a      	bgt.n	800d45e <MSC_BOT_DataIn+0x5a>
 800d428:	e014      	b.n	800d454 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d42a:	68fa      	ldr	r2, [r7, #12]
 800d42c:	f248 031d 	movw	r3, #32797	; 0x801d
 800d430:	4413      	add	r3, r2
 800d432:	7819      	ldrb	r1, [r3, #0]
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	f248 031f 	movw	r3, #32799	; 0x801f
 800d43a:	4413      	add	r3, r2
 800d43c:	461a      	mov	r2, r3
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f99e 	bl	800d780 <SCSI_ProcessCmd>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	da0b      	bge.n	800d462 <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d44a:	2101      	movs	r1, #1
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 f90b 	bl	800d668 <MSC_BOT_SendCSW>
    }
    break;
 800d452:	e006      	b.n	800d462 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d454:	2100      	movs	r1, #0
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 f906 	bl	800d668 <MSC_BOT_SendCSW>
    break;
 800d45c:	e002      	b.n	800d464 <MSC_BOT_DataIn+0x60>

  default:
    break;
 800d45e:	bf00      	nop
 800d460:	e000      	b.n	800d464 <MSC_BOT_DataIn+0x60>
    break;
 800d462:	bf00      	nop
  }
}
 800d464:	bf00      	nop
 800d466:	3710      	adds	r7, #16
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	460b      	mov	r3, r1
 800d476:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d47e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	7a1b      	ldrb	r3, [r3, #8]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d002      	beq.n	800d48e <MSC_BOT_DataOut+0x22>
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d004      	beq.n	800d496 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800d48c:	e018      	b.n	800d4c0 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 f81a 	bl	800d4c8 <MSC_BOT_CBW_Decode>
      break;
 800d494:	e014      	b.n	800d4c0 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	f248 031d 	movw	r3, #32797	; 0x801d
 800d49c:	4413      	add	r3, r2
 800d49e:	7819      	ldrb	r1, [r3, #0]
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	f248 031f 	movw	r3, #32799	; 0x801f
 800d4a6:	4413      	add	r3, r2
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f000 f968 	bl	800d780 <SCSI_ProcessCmd>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	da03      	bge.n	800d4be <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d4b6:	2101      	movs	r1, #1
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 f8d5 	bl	800d668 <MSC_BOT_SendCSW>
      break;
 800d4be:	bf00      	nop
  }
}
 800d4c0:	bf00      	nop
 800d4c2:	3710      	adds	r7, #16
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4d6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800d4d8:	68fa      	ldr	r2, [r7, #12]
 800d4da:	f248 0314 	movw	r3, #32788	; 0x8014
 800d4de:	4413      	add	r3, r2
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	68f9      	ldr	r1, [r7, #12]
 800d4e4:	f248 0334 	movw	r3, #32820	; 0x8034
 800d4e8:	440b      	add	r3, r1
 800d4ea:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	f248 0318 	movw	r3, #32792	; 0x8018
 800d4f2:	4413      	add	r3, r2
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	68f9      	ldr	r1, [r7, #12]
 800d4f8:	f248 0338 	movw	r3, #32824	; 0x8038
 800d4fc:	440b      	add	r3, r1
 800d4fe:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d500:	2101      	movs	r1, #1
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f005 fa6a 	bl	80129dc <USBD_LL_GetRxDataSize>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b1f      	cmp	r3, #31
 800d50c:	d11c      	bne.n	800d548 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d50e:	68fa      	ldr	r2, [r7, #12]
 800d510:	f248 0310 	movw	r3, #32784	; 0x8010
 800d514:	4413      	add	r3, r2
 800d516:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d518:	4a38      	ldr	r2, [pc, #224]	; (800d5fc <MSC_BOT_CBW_Decode+0x134>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d114      	bne.n	800d548 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	f248 031d 	movw	r3, #32797	; 0x801d
 800d524:	4413      	add	r3, r2
 800d526:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d80d      	bhi.n	800d548 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	f248 031e 	movw	r3, #32798	; 0x801e
 800d532:	4413      	add	r3, r2
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d006      	beq.n	800d548 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	f248 031e 	movw	r3, #32798	; 0x801e
 800d540:	4413      	add	r3, r2
 800d542:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d544:	2b10      	cmp	r3, #16
 800d546:	d910      	bls.n	800d56a <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d548:	68fa      	ldr	r2, [r7, #12]
 800d54a:	f248 031d 	movw	r3, #32797	; 0x801d
 800d54e:	4413      	add	r3, r2
 800d550:	7819      	ldrb	r1, [r3, #0]
 800d552:	2320      	movs	r3, #32
 800d554:	2205      	movs	r2, #5
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 fd36 	bl	800dfc8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2202      	movs	r2, #2
 800d560:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f8b2 	bl	800d6cc <MSC_BOT_Abort>
 800d568:	e044      	b.n	800d5f4 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	f248 031d 	movw	r3, #32797	; 0x801d
 800d570:	4413      	add	r3, r2
 800d572:	7819      	ldrb	r1, [r3, #0]
 800d574:	68fa      	ldr	r2, [r7, #12]
 800d576:	f248 031f 	movw	r3, #32799	; 0x801f
 800d57a:	4413      	add	r3, r2
 800d57c:	461a      	mov	r2, r3
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 f8fe 	bl	800d780 <SCSI_ProcessCmd>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	da0c      	bge.n	800d5a4 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	7a1b      	ldrb	r3, [r3, #8]
 800d58e:	2b05      	cmp	r3, #5
 800d590:	d104      	bne.n	800d59c <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d592:	2101      	movs	r1, #1
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 f867 	bl	800d668 <MSC_BOT_SendCSW>
 800d59a:	e02b      	b.n	800d5f4 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 f895 	bl	800d6cc <MSC_BOT_Abort>
 800d5a2:	e027      	b.n	800d5f4 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	7a1b      	ldrb	r3, [r3, #8]
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	d022      	beq.n	800d5f2 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d01e      	beq.n	800d5f2 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d5b8:	2b03      	cmp	r3, #3
 800d5ba:	d01a      	beq.n	800d5f2 <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d009      	beq.n	800d5d8 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f103 0110 	add.w	r1, r3, #16
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	68db      	ldr	r3, [r3, #12]
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 f815 	bl	800d600 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800d5d6:	e00d      	b.n	800d5f4 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d104      	bne.n	800d5ea <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 f840 	bl	800d668 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800d5e8:	e004      	b.n	800d5f4 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 f86e 	bl	800d6cc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800d5f0:	e000      	b.n	800d5f4 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 800d5f2:	bf00      	nop
    }
  }
}
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	43425355 	.word	0x43425355

0800d600 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d612:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800d614:	697a      	ldr	r2, [r7, #20]
 800d616:	f248 0318 	movw	r3, #32792	; 0x8018
 800d61a:	4413      	add	r3, r2
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	4293      	cmp	r3, r2
 800d622:	bf28      	it	cs
 800d624:	4613      	movcs	r3, r2
 800d626:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800d628:	697a      	ldr	r2, [r7, #20]
 800d62a:	f248 0338 	movw	r3, #32824	; 0x8038
 800d62e:	4413      	add	r3, r2
 800d630:	681a      	ldr	r2, [r3, #0]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	1ad2      	subs	r2, r2, r3
 800d636:	6979      	ldr	r1, [r7, #20]
 800d638:	f248 0338 	movw	r3, #32824	; 0x8038
 800d63c:	440b      	add	r3, r1
 800d63e:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	f248 033c 	movw	r3, #32828	; 0x803c
 800d646:	4413      	add	r3, r2
 800d648:	2200      	movs	r2, #0
 800d64a:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	2204      	movs	r2, #4
 800d650:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	68ba      	ldr	r2, [r7, #8]
 800d656:	2181      	movs	r1, #129	; 0x81
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f005 f97d 	bl	8012958 <USBD_LL_Transmit>
}
 800d65e:	bf00      	nop
 800d660:	3718      	adds	r7, #24
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
	...

0800d668 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	460b      	mov	r3, r1
 800d672:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d67a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	f248 0330 	movw	r3, #32816	; 0x8030
 800d682:	4413      	add	r3, r2
 800d684:	4a10      	ldr	r2, [pc, #64]	; (800d6c8 <MSC_BOT_SendCSW+0x60>)
 800d686:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 800d688:	68fa      	ldr	r2, [r7, #12]
 800d68a:	f248 033c 	movw	r3, #32828	; 0x803c
 800d68e:	4413      	add	r3, r2
 800d690:	78fa      	ldrb	r2, [r7, #3]
 800d692:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2200      	movs	r2, #0
 800d698:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f248 0230 	movw	r2, #32816	; 0x8030
 800d6a0:	441a      	add	r2, r3
 800d6a2:	230d      	movs	r3, #13
 800d6a4:	2181      	movs	r1, #129	; 0x81
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f005 f956 	bl	8012958 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f248 0210 	movw	r2, #32784	; 0x8010
 800d6b2:	441a      	add	r2, r3
 800d6b4:	231f      	movs	r3, #31
 800d6b6:	2101      	movs	r1, #1
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f005 f96e 	bl	801299a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d6be:	bf00      	nop
 800d6c0:	3710      	adds	r7, #16
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	53425355 	.word	0x53425355

0800d6cc <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6da:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800d6dc:	68fa      	ldr	r2, [r7, #12]
 800d6de:	f248 031c 	movw	r3, #32796	; 0x801c
 800d6e2:	4413      	add	r3, r2
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10e      	bne.n	800d708 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	f248 0318 	movw	r3, #32792	; 0x8018
 800d6f0:	4413      	add	r3, r2
 800d6f2:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d007      	beq.n	800d708 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d103      	bne.n	800d708 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d700:	2101      	movs	r1, #1
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f005 f89f 	bl	8012846 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d708:	2181      	movs	r1, #129	; 0x81
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f005 f89b 	bl	8012846 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	7a5b      	ldrb	r3, [r3, #9]
 800d714:	2b02      	cmp	r3, #2
 800d716:	d107      	bne.n	800d728 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d718:	2181      	movs	r1, #129	; 0x81
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f005 f893 	bl	8012846 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d720:	2101      	movs	r1, #1
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f005 f88f 	bl	8012846 <USBD_LL_StallEP>
  }
}
 800d728:	bf00      	nop
 800d72a:	3710      	adds	r7, #16
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	460b      	mov	r3, r1
 800d73a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d742:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	7a5b      	ldrb	r3, [r3, #9]
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d108      	bne.n	800d75e <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d74c:	2181      	movs	r1, #129	; 0x81
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f005 f879 	bl	8012846 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d754:	2101      	movs	r1, #1
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f005 f875 	bl	8012846 <USBD_LL_StallEP>
 800d75c:	e00d      	b.n	800d77a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800d75e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d762:	2b00      	cmp	r3, #0
 800d764:	da08      	bge.n	800d778 <MSC_BOT_CplClrFeature+0x48>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	7a5b      	ldrb	r3, [r3, #9]
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	d004      	beq.n	800d778 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d76e:	2101      	movs	r1, #1
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f7ff ff79 	bl	800d668 <MSC_BOT_SendCSW>
 800d776:	e000      	b.n	800d77a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800d778:	bf00      	nop
  }
}
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	460b      	mov	r3, r1
 800d78a:	607a      	str	r2, [r7, #4]
 800d78c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d794:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2b25      	cmp	r3, #37	; 0x25
 800d79c:	d06e      	beq.n	800d87c <SCSI_ProcessCmd+0xfc>
 800d79e:	2b25      	cmp	r3, #37	; 0x25
 800d7a0:	dc11      	bgt.n	800d7c6 <SCSI_ProcessCmd+0x46>
 800d7a2:	2b1a      	cmp	r3, #26
 800d7a4:	d04f      	beq.n	800d846 <SCSI_ProcessCmd+0xc6>
 800d7a6:	2b1a      	cmp	r3, #26
 800d7a8:	dc06      	bgt.n	800d7b8 <SCSI_ProcessCmd+0x38>
 800d7aa:	2b03      	cmp	r3, #3
 800d7ac:	d027      	beq.n	800d7fe <SCSI_ProcessCmd+0x7e>
 800d7ae:	2b12      	cmp	r3, #18
 800d7b0:	d02e      	beq.n	800d810 <SCSI_ProcessCmd+0x90>
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d01a      	beq.n	800d7ec <SCSI_ProcessCmd+0x6c>
 800d7b6:	e0a0      	b.n	800d8fa <SCSI_ProcessCmd+0x17a>
 800d7b8:	2b1e      	cmp	r3, #30
 800d7ba:	d03b      	beq.n	800d834 <SCSI_ProcessCmd+0xb4>
 800d7bc:	2b23      	cmp	r3, #35	; 0x23
 800d7be:	d054      	beq.n	800d86a <SCSI_ProcessCmd+0xea>
 800d7c0:	2b1b      	cmp	r3, #27
 800d7c2:	d02e      	beq.n	800d822 <SCSI_ProcessCmd+0xa2>
 800d7c4:	e099      	b.n	800d8fa <SCSI_ProcessCmd+0x17a>
 800d7c6:	2b5a      	cmp	r3, #90	; 0x5a
 800d7c8:	d046      	beq.n	800d858 <SCSI_ProcessCmd+0xd8>
 800d7ca:	2b5a      	cmp	r3, #90	; 0x5a
 800d7cc:	dc07      	bgt.n	800d7de <SCSI_ProcessCmd+0x5e>
 800d7ce:	2b2a      	cmp	r3, #42	; 0x2a
 800d7d0:	d078      	beq.n	800d8c4 <SCSI_ProcessCmd+0x144>
 800d7d2:	2b2f      	cmp	r3, #47	; 0x2f
 800d7d4:	f000 8088 	beq.w	800d8e8 <SCSI_ProcessCmd+0x168>
 800d7d8:	2b28      	cmp	r3, #40	; 0x28
 800d7da:	d061      	beq.n	800d8a0 <SCSI_ProcessCmd+0x120>
 800d7dc:	e08d      	b.n	800d8fa <SCSI_ProcessCmd+0x17a>
 800d7de:	2ba8      	cmp	r3, #168	; 0xa8
 800d7e0:	d067      	beq.n	800d8b2 <SCSI_ProcessCmd+0x132>
 800d7e2:	2baa      	cmp	r3, #170	; 0xaa
 800d7e4:	d077      	beq.n	800d8d6 <SCSI_ProcessCmd+0x156>
 800d7e6:	2b9e      	cmp	r3, #158	; 0x9e
 800d7e8:	d051      	beq.n	800d88e <SCSI_ProcessCmd+0x10e>
 800d7ea:	e086      	b.n	800d8fa <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800d7ec:	7afb      	ldrb	r3, [r7, #11]
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	68f8      	ldr	r0, [r7, #12]
 800d7f4:	f000 f893 	bl	800d91e <SCSI_TestUnitReady>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	75fb      	strb	r3, [r7, #23]
    break;
 800d7fc:	e089      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800d7fe:	7afb      	ldrb	r3, [r7, #11]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	4619      	mov	r1, r3
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f000 fb47 	bl	800de98 <SCSI_RequestSense>
 800d80a:	4603      	mov	r3, r0
 800d80c:	75fb      	strb	r3, [r7, #23]
    break;
 800d80e:	e080      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800d810:	7afb      	ldrb	r3, [r7, #11]
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	4619      	mov	r1, r3
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f000 f8d2 	bl	800d9c0 <SCSI_Inquiry>
 800d81c:	4603      	mov	r3, r0
 800d81e:	75fb      	strb	r3, [r7, #23]
    break;
 800d820:	e077      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800d822:	7afb      	ldrb	r3, [r7, #11]
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	4619      	mov	r1, r3
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f000 fc27 	bl	800e07c <SCSI_StartStopUnit>
 800d82e:	4603      	mov	r3, r0
 800d830:	75fb      	strb	r3, [r7, #23]
    break;
 800d832:	e06e      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800d834:	7afb      	ldrb	r3, [r7, #11]
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	4619      	mov	r1, r3
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f000 fc71 	bl	800e122 <SCSI_AllowPreventRemovable>
 800d840:	4603      	mov	r3, r0
 800d842:	75fb      	strb	r3, [r7, #23]
    break;
 800d844:	e065      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800d846:	7afb      	ldrb	r3, [r7, #11]
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	4619      	mov	r1, r3
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f000 fad7 	bl	800de00 <SCSI_ModeSense6>
 800d852:	4603      	mov	r3, r0
 800d854:	75fb      	strb	r3, [r7, #23]
    break;
 800d856:	e05c      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800d858:	7afb      	ldrb	r3, [r7, #11]
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	4619      	mov	r1, r3
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	f000 faf4 	bl	800de4c <SCSI_ModeSense10>
 800d864:	4603      	mov	r3, r0
 800d866:	75fb      	strb	r3, [r7, #23]
    break;
 800d868:	e053      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800d86a:	7afb      	ldrb	r3, [r7, #11]
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	4619      	mov	r1, r3
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f000 fa56 	bl	800dd22 <SCSI_ReadFormatCapacity>
 800d876:	4603      	mov	r3, r0
 800d878:	75fb      	strb	r3, [r7, #23]
    break;
 800d87a:	e04a      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800d87c:	7afb      	ldrb	r3, [r7, #11]
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	4619      	mov	r1, r3
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	f000 f910 	bl	800daa8 <SCSI_ReadCapacity10>
 800d888:	4603      	mov	r3, r0
 800d88a:	75fb      	strb	r3, [r7, #23]
    break;
 800d88c:	e041      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800d88e:	7afb      	ldrb	r3, [r7, #11]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	4619      	mov	r1, r3
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f000 f98b 	bl	800dbb0 <SCSI_ReadCapacity16>
 800d89a:	4603      	mov	r3, r0
 800d89c:	75fb      	strb	r3, [r7, #23]
    break;
 800d89e:	e038      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800d8a0:	7afb      	ldrb	r3, [r7, #11]
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f000 fc62 	bl	800e170 <SCSI_Read10>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	75fb      	strb	r3, [r7, #23]
    break;
 800d8b0:	e02f      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800d8b2:	7afb      	ldrb	r3, [r7, #11]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f000 fd0b 	bl	800e2d4 <SCSI_Read12>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	75fb      	strb	r3, [r7, #23]
    break;
 800d8c2:	e026      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800d8c4:	7afb      	ldrb	r3, [r7, #11]
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	68f8      	ldr	r0, [r7, #12]
 800d8cc:	f000 fdbe 	bl	800e44c <SCSI_Write10>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	75fb      	strb	r3, [r7, #23]
    break;
 800d8d4:	e01d      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800d8d6:	7afb      	ldrb	r3, [r7, #11]
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	4619      	mov	r1, r3
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f000 fe8d 	bl	800e5fc <SCSI_Write12>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	75fb      	strb	r3, [r7, #23]
    break;
 800d8e6:	e014      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800d8e8:	7afb      	ldrb	r3, [r7, #11]
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f000 ff6c 	bl	800e7cc <SCSI_Verify10>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	75fb      	strb	r3, [r7, #23]
    break;
 800d8f8:	e00b      	b.n	800d912 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800d8fa:	7af9      	ldrb	r1, [r7, #11]
 800d8fc:	2320      	movs	r3, #32
 800d8fe:	2205      	movs	r2, #5
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f000 fb61 	bl	800dfc8 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	2202      	movs	r2, #2
 800d90a:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800d90c:	23ff      	movs	r3, #255	; 0xff
 800d90e:	75fb      	strb	r3, [r7, #23]
    break;
 800d910:	bf00      	nop
  }

  return ret;
 800d912:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d916:	4618      	mov	r0, r3
 800d918:	3718      	adds	r7, #24
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b086      	sub	sp, #24
 800d922:	af00      	add	r7, sp, #0
 800d924:	60f8      	str	r0, [r7, #12]
 800d926:	460b      	mov	r3, r1
 800d928:	607a      	str	r2, [r7, #4]
 800d92a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d932:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800d934:	697a      	ldr	r2, [r7, #20]
 800d936:	f248 0318 	movw	r3, #32792	; 0x8018
 800d93a:	4413      	add	r3, r2
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00c      	beq.n	800d95c <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d942:	697a      	ldr	r2, [r7, #20]
 800d944:	f248 031d 	movw	r3, #32797	; 0x801d
 800d948:	4413      	add	r3, r2
 800d94a:	7819      	ldrb	r1, [r3, #0]
 800d94c:	2320      	movs	r3, #32
 800d94e:	2205      	movs	r2, #5
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f000 fb39 	bl	800dfc8 <SCSI_SenseCode>

    return -1;
 800d956:	f04f 33ff 	mov.w	r3, #4294967295
 800d95a:	e02c      	b.n	800d9b6 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800d95c:	697a      	ldr	r2, [r7, #20]
 800d95e:	f248 0362 	movw	r3, #32866	; 0x8062
 800d962:	4413      	add	r3, r2
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	2b02      	cmp	r3, #2
 800d968:	d10b      	bne.n	800d982 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d96a:	7af9      	ldrb	r1, [r7, #11]
 800d96c:	233a      	movs	r3, #58	; 0x3a
 800d96e:	2202      	movs	r2, #2
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f000 fb29 	bl	800dfc8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2205      	movs	r2, #5
 800d97a:	721a      	strb	r2, [r3, #8]
    return -1;
 800d97c:	f04f 33ff 	mov.w	r3, #4294967295
 800d980:	e019      	b.n	800d9b6 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	7afa      	ldrb	r2, [r7, #11]
 800d98c:	4610      	mov	r0, r2
 800d98e:	4798      	blx	r3
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00b      	beq.n	800d9ae <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d996:	7af9      	ldrb	r1, [r7, #11]
 800d998:	233a      	movs	r3, #58	; 0x3a
 800d99a:	2202      	movs	r2, #2
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f000 fb13 	bl	800dfc8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	2205      	movs	r2, #5
 800d9a6:	721a      	strb	r2, [r3, #8]

    return -1;
 800d9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ac:	e003      	b.n	800d9b6 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	60da      	str	r2, [r3, #12]

  return 0;
 800d9b4:	2300      	movs	r3, #0
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3718      	adds	r7, #24
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
	...

0800d9c0 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b088      	sub	sp, #32
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	607a      	str	r2, [r7, #4]
 800d9cc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9d4:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800d9d6:	69ba      	ldr	r2, [r7, #24]
 800d9d8:	f248 0318 	movw	r3, #32792	; 0x8018
 800d9dc:	4413      	add	r3, r2
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10c      	bne.n	800d9fe <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d9e4:	69ba      	ldr	r2, [r7, #24]
 800d9e6:	f248 031d 	movw	r3, #32797	; 0x801d
 800d9ea:	4413      	add	r3, r2
 800d9ec:	7819      	ldrb	r1, [r3, #0]
 800d9ee:	2320      	movs	r3, #32
 800d9f0:	2205      	movs	r2, #5
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f000 fae8 	bl	800dfc8 <SCSI_SenseCode>
    return -1;
 800d9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9fc:	e04c      	b.n	800da98 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	3301      	adds	r3, #1
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	f003 0301 	and.w	r3, r3, #1
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d022      	beq.n	800da52 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	3302      	adds	r3, #2
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d105      	bne.n	800da22 <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800da16:	2206      	movs	r2, #6
 800da18:	4921      	ldr	r1, [pc, #132]	; (800daa0 <SCSI_Inquiry+0xe0>)
 800da1a:	69b8      	ldr	r0, [r7, #24]
 800da1c:	f001 f862 	bl	800eae4 <SCSI_UpdateBotData>
 800da20:	e039      	b.n	800da96 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	3302      	adds	r3, #2
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	2b80      	cmp	r3, #128	; 0x80
 800da2a:	d105      	bne.n	800da38 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800da2c:	2208      	movs	r2, #8
 800da2e:	491d      	ldr	r1, [pc, #116]	; (800daa4 <SCSI_Inquiry+0xe4>)
 800da30:	69b8      	ldr	r0, [r7, #24]
 800da32:	f001 f857 	bl	800eae4 <SCSI_UpdateBotData>
 800da36:	e02e      	b.n	800da96 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800da38:	69ba      	ldr	r2, [r7, #24]
 800da3a:	f248 031d 	movw	r3, #32797	; 0x801d
 800da3e:	4413      	add	r3, r2
 800da40:	7819      	ldrb	r1, [r3, #0]
 800da42:	2324      	movs	r3, #36	; 0x24
 800da44:	2205      	movs	r2, #5
 800da46:	68f8      	ldr	r0, [r7, #12]
 800da48:	f000 fabe 	bl	800dfc8 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800da4c:	f04f 33ff 	mov.w	r3, #4294967295
 800da50:	e022      	b.n	800da98 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da58:	69d9      	ldr	r1, [r3, #28]
 800da5a:	7afa      	ldrb	r2, [r7, #11]
 800da5c:	4613      	mov	r3, r2
 800da5e:	00db      	lsls	r3, r3, #3
 800da60:	4413      	add	r3, r2
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	440b      	add	r3, r1
 800da66:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	3304      	adds	r3, #4
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	b29b      	uxth	r3, r3
 800da70:	3305      	adds	r3, #5
 800da72:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	3304      	adds	r3, #4
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	8bfa      	ldrh	r2, [r7, #30]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d303      	bcc.n	800da8a <SCSI_Inquiry+0xca>
    {
      len = params[4];
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	3304      	adds	r3, #4
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800da8a:	8bfb      	ldrh	r3, [r7, #30]
 800da8c:	461a      	mov	r2, r3
 800da8e:	6979      	ldr	r1, [r7, #20]
 800da90:	69b8      	ldr	r0, [r7, #24]
 800da92:	f001 f827 	bl	800eae4 <SCSI_UpdateBotData>
  }

  return 0;
 800da96:	2300      	movs	r3, #0
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3720      	adds	r7, #32
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	240000b4 	.word	0x240000b4
 800daa4:	240000bc 	.word	0x240000bc

0800daa8 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800daa8:	b590      	push	{r4, r7, lr}
 800daaa:	b087      	sub	sp, #28
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	460b      	mov	r3, r1
 800dab2:	607a      	str	r2, [r7, #4]
 800dab4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dabc:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dac4:	685c      	ldr	r4, [r3, #4]
 800dac6:	697a      	ldr	r2, [r7, #20]
 800dac8:	f248 0368 	movw	r3, #32872	; 0x8068
 800dacc:	4413      	add	r3, r2
 800dace:	6979      	ldr	r1, [r7, #20]
 800dad0:	f248 0264 	movw	r2, #32868	; 0x8064
 800dad4:	440a      	add	r2, r1
 800dad6:	7af8      	ldrb	r0, [r7, #11]
 800dad8:	4619      	mov	r1, r3
 800dada:	47a0      	blx	r4
 800dadc:	4603      	mov	r3, r0
 800dade:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dae0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d106      	bne.n	800daf6 <SCSI_ReadCapacity10+0x4e>
 800dae8:	697a      	ldr	r2, [r7, #20]
 800daea:	f248 0362 	movw	r3, #32866	; 0x8062
 800daee:	4413      	add	r3, r2
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	2b02      	cmp	r3, #2
 800daf4:	d108      	bne.n	800db08 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800daf6:	7af9      	ldrb	r1, [r7, #11]
 800daf8:	233a      	movs	r3, #58	; 0x3a
 800dafa:	2202      	movs	r2, #2
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f000 fa63 	bl	800dfc8 <SCSI_SenseCode>
    return -1;
 800db02:	f04f 33ff 	mov.w	r3, #4294967295
 800db06:	e04f      	b.n	800dba8 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800db08:	697a      	ldr	r2, [r7, #20]
 800db0a:	f248 0368 	movw	r3, #32872	; 0x8068
 800db0e:	4413      	add	r3, r2
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	3b01      	subs	r3, #1
 800db14:	0e1b      	lsrs	r3, r3, #24
 800db16:	b2da      	uxtb	r2, r3
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800db1c:	697a      	ldr	r2, [r7, #20]
 800db1e:	f248 0368 	movw	r3, #32872	; 0x8068
 800db22:	4413      	add	r3, r2
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	3b01      	subs	r3, #1
 800db28:	0c1b      	lsrs	r3, r3, #16
 800db2a:	b2da      	uxtb	r2, r3
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800db30:	697a      	ldr	r2, [r7, #20]
 800db32:	f248 0368 	movw	r3, #32872	; 0x8068
 800db36:	4413      	add	r3, r2
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	3b01      	subs	r3, #1
 800db3c:	0a1b      	lsrs	r3, r3, #8
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800db44:	697a      	ldr	r2, [r7, #20]
 800db46:	f248 0368 	movw	r3, #32872	; 0x8068
 800db4a:	4413      	add	r3, r2
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	3b01      	subs	r3, #1
 800db52:	b2da      	uxtb	r2, r3
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800db58:	697a      	ldr	r2, [r7, #20]
 800db5a:	f248 0364 	movw	r3, #32868	; 0x8064
 800db5e:	4413      	add	r3, r2
 800db60:	881b      	ldrh	r3, [r3, #0]
 800db62:	161b      	asrs	r3, r3, #24
 800db64:	b2da      	uxtb	r2, r3
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800db6a:	697a      	ldr	r2, [r7, #20]
 800db6c:	f248 0364 	movw	r3, #32868	; 0x8064
 800db70:	4413      	add	r3, r2
 800db72:	881b      	ldrh	r3, [r3, #0]
 800db74:	141b      	asrs	r3, r3, #16
 800db76:	b2da      	uxtb	r2, r3
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800db7c:	697a      	ldr	r2, [r7, #20]
 800db7e:	f248 0364 	movw	r3, #32868	; 0x8064
 800db82:	4413      	add	r3, r2
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	0a1b      	lsrs	r3, r3, #8
 800db88:	b29b      	uxth	r3, r3
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	f248 0364 	movw	r3, #32868	; 0x8064
 800db96:	4413      	add	r3, r2
 800db98:	881b      	ldrh	r3, [r3, #0]
 800db9a:	b2da      	uxtb	r2, r3
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	2208      	movs	r2, #8
 800dba4:	60da      	str	r2, [r3, #12]

  return 0;
 800dba6:	2300      	movs	r3, #0

}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	371c      	adds	r7, #28
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd90      	pop	{r4, r7, pc}

0800dbb0 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dbb0:	b590      	push	{r4, r7, lr}
 800dbb2:	b089      	sub	sp, #36	; 0x24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	460b      	mov	r3, r1
 800dbba:	607a      	str	r2, [r7, #4]
 800dbbc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbc4:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbcc:	685c      	ldr	r4, [r3, #4]
 800dbce:	69ba      	ldr	r2, [r7, #24]
 800dbd0:	f248 0368 	movw	r3, #32872	; 0x8068
 800dbd4:	4413      	add	r3, r2
 800dbd6:	69b9      	ldr	r1, [r7, #24]
 800dbd8:	f248 0264 	movw	r2, #32868	; 0x8064
 800dbdc:	440a      	add	r2, r1
 800dbde:	7af8      	ldrb	r0, [r7, #11]
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	47a0      	blx	r4
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dbe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d106      	bne.n	800dbfe <SCSI_ReadCapacity16+0x4e>
 800dbf0:	69ba      	ldr	r2, [r7, #24]
 800dbf2:	f248 0362 	movw	r3, #32866	; 0x8062
 800dbf6:	4413      	add	r3, r2
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	2b02      	cmp	r3, #2
 800dbfc:	d108      	bne.n	800dc10 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dbfe:	7af9      	ldrb	r1, [r7, #11]
 800dc00:	233a      	movs	r3, #58	; 0x3a
 800dc02:	2202      	movs	r2, #2
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f000 f9df 	bl	800dfc8 <SCSI_SenseCode>
    return -1;
 800dc0a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc0e:	e084      	b.n	800dd1a <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	330a      	adds	r3, #10
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	330b      	adds	r3, #11
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dc20:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	330c      	adds	r3, #12
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800dc2a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	320d      	adds	r2, #13
 800dc30:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800dc32:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800dc38:	2300      	movs	r3, #0
 800dc3a:	77fb      	strb	r3, [r7, #31]
 800dc3c:	e007      	b.n	800dc4e <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 800dc3e:	7ffb      	ldrb	r3, [r7, #31]
 800dc40:	69ba      	ldr	r2, [r7, #24]
 800dc42:	4413      	add	r3, r2
 800dc44:	2200      	movs	r2, #0
 800dc46:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800dc48:	7ffb      	ldrb	r3, [r7, #31]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	77fb      	strb	r3, [r7, #31]
 800dc4e:	7ffa      	ldrb	r2, [r7, #31]
 800dc50:	69bb      	ldr	r3, [r7, #24]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d3f2      	bcc.n	800dc3e <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800dc58:	69ba      	ldr	r2, [r7, #24]
 800dc5a:	f248 0368 	movw	r3, #32872	; 0x8068
 800dc5e:	4413      	add	r3, r2
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	3b01      	subs	r3, #1
 800dc64:	0e1b      	lsrs	r3, r3, #24
 800dc66:	b2da      	uxtb	r2, r3
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800dc6c:	69ba      	ldr	r2, [r7, #24]
 800dc6e:	f248 0368 	movw	r3, #32872	; 0x8068
 800dc72:	4413      	add	r3, r2
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	3b01      	subs	r3, #1
 800dc78:	0c1b      	lsrs	r3, r3, #16
 800dc7a:	b2da      	uxtb	r2, r3
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800dc80:	69ba      	ldr	r2, [r7, #24]
 800dc82:	f248 0368 	movw	r3, #32872	; 0x8068
 800dc86:	4413      	add	r3, r2
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	0a1b      	lsrs	r3, r3, #8
 800dc8e:	b2da      	uxtb	r2, r3
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800dc94:	69ba      	ldr	r2, [r7, #24]
 800dc96:	f248 0368 	movw	r3, #32872	; 0x8068
 800dc9a:	4413      	add	r3, r2
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	3b01      	subs	r3, #1
 800dca2:	b2da      	uxtb	r2, r3
 800dca4:	69bb      	ldr	r3, [r7, #24]
 800dca6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800dca8:	69ba      	ldr	r2, [r7, #24]
 800dcaa:	f248 0364 	movw	r3, #32868	; 0x8064
 800dcae:	4413      	add	r3, r2
 800dcb0:	881b      	ldrh	r3, [r3, #0]
 800dcb2:	161b      	asrs	r3, r3, #24
 800dcb4:	b2da      	uxtb	r2, r3
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800dcba:	69ba      	ldr	r2, [r7, #24]
 800dcbc:	f248 0364 	movw	r3, #32868	; 0x8064
 800dcc0:	4413      	add	r3, r2
 800dcc2:	881b      	ldrh	r3, [r3, #0]
 800dcc4:	141b      	asrs	r3, r3, #16
 800dcc6:	b2da      	uxtb	r2, r3
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800dccc:	69ba      	ldr	r2, [r7, #24]
 800dcce:	f248 0364 	movw	r3, #32868	; 0x8064
 800dcd2:	4413      	add	r3, r2
 800dcd4:	881b      	ldrh	r3, [r3, #0]
 800dcd6:	0a1b      	lsrs	r3, r3, #8
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	b2da      	uxtb	r2, r3
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800dce0:	69ba      	ldr	r2, [r7, #24]
 800dce2:	f248 0364 	movw	r3, #32868	; 0x8064
 800dce6:	4413      	add	r3, r2
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	330a      	adds	r3, #10
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	330b      	adds	r3, #11
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dd00:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	330c      	adds	r3, #12
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800dd0a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	320d      	adds	r2, #13
 800dd10:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800dd12:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	60da      	str	r2, [r3, #12]

  return 0;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3724      	adds	r7, #36	; 0x24
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd90      	pop	{r4, r7, pc}

0800dd22 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b088      	sub	sp, #32
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	60f8      	str	r0, [r7, #12]
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	607a      	str	r2, [r7, #4]
 800dd2e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd36:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	f107 0214 	add.w	r2, r7, #20
 800dd44:	f107 0110 	add.w	r1, r7, #16
 800dd48:	7af8      	ldrb	r0, [r7, #11]
 800dd4a:	4798      	blx	r3
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dd50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d106      	bne.n	800dd66 <SCSI_ReadFormatCapacity+0x44>
 800dd58:	69ba      	ldr	r2, [r7, #24]
 800dd5a:	f248 0362 	movw	r3, #32866	; 0x8062
 800dd5e:	4413      	add	r3, r2
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	2b02      	cmp	r3, #2
 800dd64:	d108      	bne.n	800dd78 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dd66:	7af9      	ldrb	r1, [r7, #11]
 800dd68:	233a      	movs	r3, #58	; 0x3a
 800dd6a:	2202      	movs	r2, #2
 800dd6c:	68f8      	ldr	r0, [r7, #12]
 800dd6e:	f000 f92b 	bl	800dfc8 <SCSI_SenseCode>
    return -1;
 800dd72:	f04f 33ff 	mov.w	r3, #4294967295
 800dd76:	e03e      	b.n	800ddf6 <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 800dd78:	2300      	movs	r3, #0
 800dd7a:	83fb      	strh	r3, [r7, #30]
 800dd7c:	e007      	b.n	800dd8e <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 800dd7e:	8bfb      	ldrh	r3, [r7, #30]
 800dd80:	69ba      	ldr	r2, [r7, #24]
 800dd82:	4413      	add	r3, r2
 800dd84:	2200      	movs	r2, #0
 800dd86:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800dd88:	8bfb      	ldrh	r3, [r7, #30]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	83fb      	strh	r3, [r7, #30]
 800dd8e:	8bfb      	ldrh	r3, [r7, #30]
 800dd90:	2b0b      	cmp	r3, #11
 800dd92:	d9f4      	bls.n	800dd7e <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	2208      	movs	r2, #8
 800dd98:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	3b01      	subs	r3, #1
 800dd9e:	0e1b      	lsrs	r3, r3, #24
 800dda0:	b2da      	uxtb	r2, r3
 800dda2:	69bb      	ldr	r3, [r7, #24]
 800dda4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	3b01      	subs	r3, #1
 800ddaa:	0c1b      	lsrs	r3, r3, #16
 800ddac:	b2da      	uxtb	r2, r3
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	0a1b      	lsrs	r3, r3, #8
 800ddb8:	b2da      	uxtb	r2, r3
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	b2da      	uxtb	r2, r3
 800ddc6:	69bb      	ldr	r3, [r7, #24]
 800ddc8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	2202      	movs	r2, #2
 800ddce:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800ddd0:	8abb      	ldrh	r3, [r7, #20]
 800ddd2:	141b      	asrs	r3, r3, #16
 800ddd4:	b2da      	uxtb	r2, r3
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800ddda:	8abb      	ldrh	r3, [r7, #20]
 800dddc:	0a1b      	lsrs	r3, r3, #8
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	b2da      	uxtb	r2, r3
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800dde6:	8abb      	ldrh	r3, [r7, #20]
 800dde8:	b2da      	uxtb	r2, r3
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	220c      	movs	r2, #12
 800ddf2:	60da      	str	r2, [r3, #12]

  return 0;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3720      	adds	r7, #32
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
	...

0800de00 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b086      	sub	sp, #24
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	460b      	mov	r3, r1
 800de0a:	607a      	str	r2, [r7, #4]
 800de0c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de14:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800de16:	2317      	movs	r3, #23
 800de18:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	3304      	adds	r3, #4
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	b29b      	uxth	r3, r3
 800de22:	8afa      	ldrh	r2, [r7, #22]
 800de24:	429a      	cmp	r2, r3
 800de26:	d303      	bcc.n	800de30 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	3304      	adds	r3, #4
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800de30:	8afb      	ldrh	r3, [r7, #22]
 800de32:	461a      	mov	r2, r3
 800de34:	4904      	ldr	r1, [pc, #16]	; (800de48 <SCSI_ModeSense6+0x48>)
 800de36:	6938      	ldr	r0, [r7, #16]
 800de38:	f000 fe54 	bl	800eae4 <SCSI_UpdateBotData>

  return 0;
 800de3c:	2300      	movs	r3, #0
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3718      	adds	r7, #24
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	240000c4 	.word	0x240000c4

0800de4c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b086      	sub	sp, #24
 800de50:	af00      	add	r7, sp, #0
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	460b      	mov	r3, r1
 800de56:	607a      	str	r2, [r7, #4]
 800de58:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de60:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800de62:	231b      	movs	r3, #27
 800de64:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	3308      	adds	r3, #8
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	8afa      	ldrh	r2, [r7, #22]
 800de70:	429a      	cmp	r2, r3
 800de72:	d303      	bcc.n	800de7c <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	3308      	adds	r3, #8
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800de7c:	8afb      	ldrh	r3, [r7, #22]
 800de7e:	461a      	mov	r2, r3
 800de80:	4904      	ldr	r1, [pc, #16]	; (800de94 <SCSI_ModeSense10+0x48>)
 800de82:	6938      	ldr	r0, [r7, #16]
 800de84:	f000 fe2e 	bl	800eae4 <SCSI_UpdateBotData>

  return 0;
 800de88:	2300      	movs	r3, #0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3718      	adds	r7, #24
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	240000dc 	.word	0x240000dc

0800de98 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b086      	sub	sp, #24
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	460b      	mov	r3, r1
 800dea2:	607a      	str	r2, [r7, #4]
 800dea4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800deac:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800deae:	693a      	ldr	r2, [r7, #16]
 800deb0:	f248 0318 	movw	r3, #32792	; 0x8018
 800deb4:	4413      	add	r3, r2
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d10c      	bne.n	800ded6 <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	f248 031d 	movw	r3, #32797	; 0x801d
 800dec2:	4413      	add	r3, r2
 800dec4:	7819      	ldrb	r1, [r3, #0]
 800dec6:	2320      	movs	r3, #32
 800dec8:	2205      	movs	r2, #5
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f000 f87c 	bl	800dfc8 <SCSI_SenseCode>
    return -1;
 800ded0:	f04f 33ff 	mov.w	r3, #4294967295
 800ded4:	e074      	b.n	800dfc0 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800ded6:	2300      	movs	r3, #0
 800ded8:	75fb      	strb	r3, [r7, #23]
 800deda:	e007      	b.n	800deec <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 800dedc:	7dfb      	ldrb	r3, [r7, #23]
 800dede:	693a      	ldr	r2, [r7, #16]
 800dee0:	4413      	add	r3, r2
 800dee2:	2200      	movs	r2, #0
 800dee4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800dee6:	7dfb      	ldrb	r3, [r7, #23]
 800dee8:	3301      	adds	r3, #1
 800deea:	75fb      	strb	r3, [r7, #23]
 800deec:	7dfb      	ldrb	r3, [r7, #23]
 800deee:	2b11      	cmp	r3, #17
 800def0:	d9f4      	bls.n	800dedc <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	2270      	movs	r2, #112	; 0x70
 800def6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	220c      	movs	r2, #12
 800defc:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800defe:	693a      	ldr	r2, [r7, #16]
 800df00:	f248 0360 	movw	r3, #32864	; 0x8060
 800df04:	4413      	add	r3, r2
 800df06:	781a      	ldrb	r2, [r3, #0]
 800df08:	6939      	ldr	r1, [r7, #16]
 800df0a:	f248 0361 	movw	r3, #32865	; 0x8061
 800df0e:	440b      	add	r3, r1
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	429a      	cmp	r2, r3
 800df14:	d045      	beq.n	800dfa2 <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800df16:	693a      	ldr	r2, [r7, #16]
 800df18:	f248 0360 	movw	r3, #32864	; 0x8060
 800df1c:	4413      	add	r3, r2
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	4619      	mov	r1, r3
 800df22:	693a      	ldr	r2, [r7, #16]
 800df24:	f241 0308 	movw	r3, #4104	; 0x1008
 800df28:	440b      	add	r3, r1
 800df2a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800df32:	693a      	ldr	r2, [r7, #16]
 800df34:	f248 0360 	movw	r3, #32864	; 0x8060
 800df38:	4413      	add	r3, r2
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	4619      	mov	r1, r3
 800df3e:	693a      	ldr	r2, [r7, #16]
 800df40:	f241 0308 	movw	r3, #4104	; 0x1008
 800df44:	440b      	add	r3, r1
 800df46:	00db      	lsls	r3, r3, #3
 800df48:	4413      	add	r3, r2
 800df4a:	791a      	ldrb	r2, [r3, #4]
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800df50:	693a      	ldr	r2, [r7, #16]
 800df52:	f248 0360 	movw	r3, #32864	; 0x8060
 800df56:	4413      	add	r3, r2
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	4619      	mov	r1, r3
 800df5c:	693a      	ldr	r2, [r7, #16]
 800df5e:	f241 0308 	movw	r3, #4104	; 0x1008
 800df62:	440b      	add	r3, r1
 800df64:	00db      	lsls	r3, r3, #3
 800df66:	4413      	add	r3, r2
 800df68:	795a      	ldrb	r2, [r3, #5]
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800df6e:	693a      	ldr	r2, [r7, #16]
 800df70:	f248 0360 	movw	r3, #32864	; 0x8060
 800df74:	4413      	add	r3, r2
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	3301      	adds	r3, #1
 800df7a:	b2d9      	uxtb	r1, r3
 800df7c:	693a      	ldr	r2, [r7, #16]
 800df7e:	f248 0360 	movw	r3, #32864	; 0x8060
 800df82:	4413      	add	r3, r2
 800df84:	460a      	mov	r2, r1
 800df86:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800df88:	693a      	ldr	r2, [r7, #16]
 800df8a:	f248 0360 	movw	r3, #32864	; 0x8060
 800df8e:	4413      	add	r3, r2
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	2b04      	cmp	r3, #4
 800df94:	d105      	bne.n	800dfa2 <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 800df96:	693a      	ldr	r2, [r7, #16]
 800df98:	f248 0360 	movw	r3, #32864	; 0x8060
 800df9c:	4413      	add	r3, r2
 800df9e:	2200      	movs	r2, #0
 800dfa0:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	2212      	movs	r2, #18
 800dfa6:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	3304      	adds	r3, #4
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	2b12      	cmp	r3, #18
 800dfb0:	d805      	bhi.n	800dfbe <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	3304      	adds	r3, #4
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	461a      	mov	r2, r3
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800dfbe:	2300      	movs	r3, #0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3718      	adds	r7, #24
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	4611      	mov	r1, r2
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	70fb      	strb	r3, [r7, #3]
 800dfda:	460b      	mov	r3, r1
 800dfdc:	70bb      	strb	r3, [r7, #2]
 800dfde:	4613      	mov	r3, r2
 800dfe0:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfe8:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	f248 0361 	movw	r3, #32865	; 0x8061
 800dff0:	4413      	add	r3, r2
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	4619      	mov	r1, r3
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	f241 0308 	movw	r3, #4104	; 0x1008
 800dffc:	440b      	add	r3, r1
 800dffe:	78b9      	ldrb	r1, [r7, #2]
 800e000:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	f248 0361 	movw	r3, #32865	; 0x8061
 800e00a:	4413      	add	r3, r2
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	4619      	mov	r1, r3
 800e010:	68fa      	ldr	r2, [r7, #12]
 800e012:	f241 0308 	movw	r3, #4104	; 0x1008
 800e016:	440b      	add	r3, r1
 800e018:	00db      	lsls	r3, r3, #3
 800e01a:	4413      	add	r3, r2
 800e01c:	787a      	ldrb	r2, [r7, #1]
 800e01e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	f248 0361 	movw	r3, #32865	; 0x8061
 800e026:	4413      	add	r3, r2
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	4619      	mov	r1, r3
 800e02c:	68fa      	ldr	r2, [r7, #12]
 800e02e:	f241 0308 	movw	r3, #4104	; 0x1008
 800e032:	440b      	add	r3, r1
 800e034:	00db      	lsls	r3, r3, #3
 800e036:	4413      	add	r3, r2
 800e038:	2200      	movs	r2, #0
 800e03a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800e03c:	68fa      	ldr	r2, [r7, #12]
 800e03e:	f248 0361 	movw	r3, #32865	; 0x8061
 800e042:	4413      	add	r3, r2
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	3301      	adds	r3, #1
 800e048:	b2d9      	uxtb	r1, r3
 800e04a:	68fa      	ldr	r2, [r7, #12]
 800e04c:	f248 0361 	movw	r3, #32865	; 0x8061
 800e050:	4413      	add	r3, r2
 800e052:	460a      	mov	r2, r1
 800e054:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	f248 0361 	movw	r3, #32865	; 0x8061
 800e05c:	4413      	add	r3, r2
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	2b04      	cmp	r3, #4
 800e062:	d105      	bne.n	800e070 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	f248 0361 	movw	r3, #32865	; 0x8061
 800e06a:	4413      	add	r3, r2
 800e06c:	2200      	movs	r2, #0
 800e06e:	701a      	strb	r2, [r3, #0]
  }
}
 800e070:	bf00      	nop
 800e072:	3714      	adds	r7, #20
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b086      	sub	sp, #24
 800e080:	af00      	add	r7, sp, #0
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	460b      	mov	r3, r1
 800e086:	607a      	str	r2, [r7, #4]
 800e088:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e090:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800e092:	697a      	ldr	r2, [r7, #20]
 800e094:	f248 0362 	movw	r3, #32866	; 0x8062
 800e098:	4413      	add	r3, r2
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d10f      	bne.n	800e0c0 <SCSI_StartStopUnit+0x44>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	3304      	adds	r3, #4
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	f003 0303 	and.w	r3, r3, #3
 800e0aa:	2b02      	cmp	r3, #2
 800e0ac:	d108      	bne.n	800e0c0 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e0ae:	7af9      	ldrb	r1, [r7, #11]
 800e0b0:	2324      	movs	r3, #36	; 0x24
 800e0b2:	2205      	movs	r2, #5
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f7ff ff87 	bl	800dfc8 <SCSI_SenseCode>

    return -1;
 800e0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e0be:	e02c      	b.n	800e11a <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	f003 0303 	and.w	r3, r3, #3
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d106      	bne.n	800e0dc <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	f248 0362 	movw	r3, #32866	; 0x8062
 800e0d4:	4413      	add	r3, r2
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	701a      	strb	r2, [r3, #0]
 800e0da:	e01a      	b.n	800e112 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	3304      	adds	r3, #4
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	f003 0303 	and.w	r3, r3, #3
 800e0e6:	2b02      	cmp	r3, #2
 800e0e8:	d106      	bne.n	800e0f8 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800e0ea:	697a      	ldr	r2, [r7, #20]
 800e0ec:	f248 0362 	movw	r3, #32866	; 0x8062
 800e0f0:	4413      	add	r3, r2
 800e0f2:	2202      	movs	r2, #2
 800e0f4:	701a      	strb	r2, [r3, #0]
 800e0f6:	e00c      	b.n	800e112 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	3304      	adds	r3, #4
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	f003 0303 	and.w	r3, r3, #3
 800e102:	2b03      	cmp	r3, #3
 800e104:	d105      	bne.n	800e112 <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e106:	697a      	ldr	r2, [r7, #20]
 800e108:	f248 0362 	movw	r3, #32866	; 0x8062
 800e10c:	4413      	add	r3, r2
 800e10e:	2200      	movs	r2, #0
 800e110:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	2200      	movs	r2, #0
 800e116:	60da      	str	r2, [r3, #12]

  return 0;
 800e118:	2300      	movs	r3, #0
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3718      	adds	r7, #24
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e122:	b480      	push	{r7}
 800e124:	b087      	sub	sp, #28
 800e126:	af00      	add	r7, sp, #0
 800e128:	60f8      	str	r0, [r7, #12]
 800e12a:	460b      	mov	r3, r1
 800e12c:	607a      	str	r2, [r7, #4]
 800e12e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e136:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	3304      	adds	r3, #4
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d106      	bne.n	800e150 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e142:	697a      	ldr	r2, [r7, #20]
 800e144:	f248 0362 	movw	r3, #32866	; 0x8062
 800e148:	4413      	add	r3, r2
 800e14a:	2200      	movs	r2, #0
 800e14c:	701a      	strb	r2, [r3, #0]
 800e14e:	e005      	b.n	800e15c <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800e150:	697a      	ldr	r2, [r7, #20]
 800e152:	f248 0362 	movw	r3, #32866	; 0x8062
 800e156:	4413      	add	r3, r2
 800e158:	2201      	movs	r2, #1
 800e15a:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	2200      	movs	r2, #0
 800e160:	60da      	str	r2, [r3, #12]

  return 0;
 800e162:	2300      	movs	r3, #0
}
 800e164:	4618      	mov	r0, r3
 800e166:	371c      	adds	r7, #28
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	460b      	mov	r3, r1
 800e17a:	607a      	str	r2, [r7, #4]
 800e17c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e184:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	7a1b      	ldrb	r3, [r3, #8]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	f040 8094 	bne.w	800e2b8 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800e190:	697a      	ldr	r2, [r7, #20]
 800e192:	f248 031c 	movw	r3, #32796	; 0x801c
 800e196:	4413      	add	r3, r2
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	b25b      	sxtb	r3, r3
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	db0c      	blt.n	800e1ba <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e1a0:	697a      	ldr	r2, [r7, #20]
 800e1a2:	f248 031d 	movw	r3, #32797	; 0x801d
 800e1a6:	4413      	add	r3, r2
 800e1a8:	7819      	ldrb	r1, [r3, #0]
 800e1aa:	2320      	movs	r3, #32
 800e1ac:	2205      	movs	r2, #5
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f7ff ff0a 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b8:	e088      	b.n	800e2cc <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e1ba:	697a      	ldr	r2, [r7, #20]
 800e1bc:	f248 0362 	movw	r3, #32866	; 0x8062
 800e1c0:	4413      	add	r3, r2
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	2b02      	cmp	r3, #2
 800e1c6:	d108      	bne.n	800e1da <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e1c8:	7af9      	ldrb	r1, [r7, #11]
 800e1ca:	233a      	movs	r3, #58	; 0x3a
 800e1cc:	2202      	movs	r2, #2
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f7ff fefa 	bl	800dfc8 <SCSI_SenseCode>

      return -1;
 800e1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1d8:	e078      	b.n	800e2cc <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	7afa      	ldrb	r2, [r7, #11]
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	4798      	blx	r3
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d008      	beq.n	800e200 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e1ee:	7af9      	ldrb	r1, [r7, #11]
 800e1f0:	233a      	movs	r3, #58	; 0x3a
 800e1f2:	2202      	movs	r2, #2
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f7ff fee7 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e1fe:	e065      	b.n	800e2cc <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	3302      	adds	r3, #2
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	3303      	adds	r3, #3
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e210:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	3304      	adds	r3, #4
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e21a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	3205      	adds	r2, #5
 800e220:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e222:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e224:	6979      	ldr	r1, [r7, #20]
 800e226:	f248 036c 	movw	r3, #32876	; 0x806c
 800e22a:	440b      	add	r3, r1
 800e22c:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	3307      	adds	r3, #7
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	021b      	lsls	r3, r3, #8
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	3208      	adds	r2, #8
 800e23a:	7812      	ldrb	r2, [r2, #0]
 800e23c:	431a      	orrs	r2, r3
 800e23e:	6979      	ldr	r1, [r7, #20]
 800e240:	f248 0370 	movw	r3, #32880	; 0x8070
 800e244:	440b      	add	r3, r1
 800e246:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e248:	697a      	ldr	r2, [r7, #20]
 800e24a:	f248 036c 	movw	r3, #32876	; 0x806c
 800e24e:	4413      	add	r3, r2
 800e250:	6818      	ldr	r0, [r3, #0]
 800e252:	697a      	ldr	r2, [r7, #20]
 800e254:	f248 0370 	movw	r3, #32880	; 0x8070
 800e258:	4413      	add	r3, r2
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	7af9      	ldrb	r1, [r7, #11]
 800e25e:	4602      	mov	r2, r0
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f000 faeb 	bl	800e83c <SCSI_CheckAddressRange>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	da02      	bge.n	800e272 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e26c:	f04f 33ff 	mov.w	r3, #4294967295
 800e270:	e02c      	b.n	800e2cc <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e272:	697a      	ldr	r2, [r7, #20]
 800e274:	f248 0318 	movw	r3, #32792	; 0x8018
 800e278:	4413      	add	r3, r2
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	6979      	ldr	r1, [r7, #20]
 800e27e:	f248 0370 	movw	r3, #32880	; 0x8070
 800e282:	440b      	add	r3, r1
 800e284:	6819      	ldr	r1, [r3, #0]
 800e286:	6978      	ldr	r0, [r7, #20]
 800e288:	f248 0364 	movw	r3, #32868	; 0x8064
 800e28c:	4403      	add	r3, r0
 800e28e:	881b      	ldrh	r3, [r3, #0]
 800e290:	fb03 f301 	mul.w	r3, r3, r1
 800e294:	429a      	cmp	r2, r3
 800e296:	d00c      	beq.n	800e2b2 <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e298:	697a      	ldr	r2, [r7, #20]
 800e29a:	f248 031d 	movw	r3, #32797	; 0x801d
 800e29e:	4413      	add	r3, r2
 800e2a0:	7819      	ldrb	r1, [r3, #0]
 800e2a2:	2320      	movs	r3, #32
 800e2a4:	2205      	movs	r2, #5
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f7ff fe8e 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b0:	e00c      	b.n	800e2cc <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	2202      	movs	r2, #2
 800e2b6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e2be:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e2c0:	7afb      	ldrb	r3, [r7, #11]
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	f000 fadd 	bl	800e884 <SCSI_ProcessRead>
 800e2ca:	4603      	mov	r3, r0
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3718      	adds	r7, #24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b086      	sub	sp, #24
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	607a      	str	r2, [r7, #4]
 800e2e0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2e8:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	7a1b      	ldrb	r3, [r3, #8]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f040 809e 	bne.w	800e430 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800e2f4:	697a      	ldr	r2, [r7, #20]
 800e2f6:	f248 031c 	movw	r3, #32796	; 0x801c
 800e2fa:	4413      	add	r3, r2
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	b25b      	sxtb	r3, r3
 800e300:	2b00      	cmp	r3, #0
 800e302:	db0c      	blt.n	800e31e <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e304:	697a      	ldr	r2, [r7, #20]
 800e306:	f248 031d 	movw	r3, #32797	; 0x801d
 800e30a:	4413      	add	r3, r2
 800e30c:	7819      	ldrb	r1, [r3, #0]
 800e30e:	2320      	movs	r3, #32
 800e310:	2205      	movs	r2, #5
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f7ff fe58 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e318:	f04f 33ff 	mov.w	r3, #4294967295
 800e31c:	e092      	b.n	800e444 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e31e:	697a      	ldr	r2, [r7, #20]
 800e320:	f248 0362 	movw	r3, #32866	; 0x8062
 800e324:	4413      	add	r3, r2
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	2b02      	cmp	r3, #2
 800e32a:	d108      	bne.n	800e33e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e32c:	7af9      	ldrb	r1, [r7, #11]
 800e32e:	233a      	movs	r3, #58	; 0x3a
 800e330:	2202      	movs	r2, #2
 800e332:	68f8      	ldr	r0, [r7, #12]
 800e334:	f7ff fe48 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e338:	f04f 33ff 	mov.w	r3, #4294967295
 800e33c:	e082      	b.n	800e444 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	7afa      	ldrb	r2, [r7, #11]
 800e348:	4610      	mov	r0, r2
 800e34a:	4798      	blx	r3
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d008      	beq.n	800e364 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e352:	7af9      	ldrb	r1, [r7, #11]
 800e354:	233a      	movs	r3, #58	; 0x3a
 800e356:	2202      	movs	r2, #2
 800e358:	68f8      	ldr	r0, [r7, #12]
 800e35a:	f7ff fe35 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e35e:	f04f 33ff 	mov.w	r3, #4294967295
 800e362:	e06f      	b.n	800e444 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	3302      	adds	r3, #2
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	3303      	adds	r3, #3
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e374:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	3304      	adds	r3, #4
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e37e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	3205      	adds	r2, #5
 800e384:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e386:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e388:	6979      	ldr	r1, [r7, #20]
 800e38a:	f248 036c 	movw	r3, #32876	; 0x806c
 800e38e:	440b      	add	r3, r1
 800e390:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	3306      	adds	r3, #6
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	3307      	adds	r3, #7
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e3a2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	3308      	adds	r3, #8
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e3ac:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	3209      	adds	r2, #9
 800e3b2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e3b4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e3b6:	6979      	ldr	r1, [r7, #20]
 800e3b8:	f248 0370 	movw	r3, #32880	; 0x8070
 800e3bc:	440b      	add	r3, r1
 800e3be:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e3c0:	697a      	ldr	r2, [r7, #20]
 800e3c2:	f248 036c 	movw	r3, #32876	; 0x806c
 800e3c6:	4413      	add	r3, r2
 800e3c8:	6818      	ldr	r0, [r3, #0]
 800e3ca:	697a      	ldr	r2, [r7, #20]
 800e3cc:	f248 0370 	movw	r3, #32880	; 0x8070
 800e3d0:	4413      	add	r3, r2
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	7af9      	ldrb	r1, [r7, #11]
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	68f8      	ldr	r0, [r7, #12]
 800e3da:	f000 fa2f 	bl	800e83c <SCSI_CheckAddressRange>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	da02      	bge.n	800e3ea <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e8:	e02c      	b.n	800e444 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e3ea:	697a      	ldr	r2, [r7, #20]
 800e3ec:	f248 0318 	movw	r3, #32792	; 0x8018
 800e3f0:	4413      	add	r3, r2
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	6979      	ldr	r1, [r7, #20]
 800e3f6:	f248 0370 	movw	r3, #32880	; 0x8070
 800e3fa:	440b      	add	r3, r1
 800e3fc:	6819      	ldr	r1, [r3, #0]
 800e3fe:	6978      	ldr	r0, [r7, #20]
 800e400:	f248 0364 	movw	r3, #32868	; 0x8064
 800e404:	4403      	add	r3, r0
 800e406:	881b      	ldrh	r3, [r3, #0]
 800e408:	fb03 f301 	mul.w	r3, r3, r1
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d00c      	beq.n	800e42a <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e410:	697a      	ldr	r2, [r7, #20]
 800e412:	f248 031d 	movw	r3, #32797	; 0x801d
 800e416:	4413      	add	r3, r2
 800e418:	7819      	ldrb	r1, [r3, #0]
 800e41a:	2320      	movs	r3, #32
 800e41c:	2205      	movs	r2, #5
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f7ff fdd2 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e424:	f04f 33ff 	mov.w	r3, #4294967295
 800e428:	e00c      	b.n	800e444 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	2202      	movs	r2, #2
 800e42e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e436:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e438:	7afb      	ldrb	r3, [r7, #11]
 800e43a:	4619      	mov	r1, r3
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f000 fa21 	bl	800e884 <SCSI_ProcessRead>
 800e442:	4603      	mov	r3, r0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b086      	sub	sp, #24
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	460b      	mov	r3, r1
 800e456:	607a      	str	r2, [r7, #4]
 800e458:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e460:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	7a1b      	ldrb	r3, [r3, #8]
 800e466:	2b00      	cmp	r3, #0
 800e468:	f040 80be 	bne.w	800e5e8 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e46c:	697a      	ldr	r2, [r7, #20]
 800e46e:	f248 0318 	movw	r3, #32792	; 0x8018
 800e472:	4413      	add	r3, r2
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d10c      	bne.n	800e494 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e47a:	697a      	ldr	r2, [r7, #20]
 800e47c:	f248 031d 	movw	r3, #32797	; 0x801d
 800e480:	4413      	add	r3, r2
 800e482:	7819      	ldrb	r1, [r3, #0]
 800e484:	2320      	movs	r3, #32
 800e486:	2205      	movs	r2, #5
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f7ff fd9d 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e48e:	f04f 33ff 	mov.w	r3, #4294967295
 800e492:	e0af      	b.n	800e5f4 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e494:	697a      	ldr	r2, [r7, #20]
 800e496:	f248 031c 	movw	r3, #32796	; 0x801c
 800e49a:	4413      	add	r3, r2
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	b25b      	sxtb	r3, r3
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	da0c      	bge.n	800e4be <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e4a4:	697a      	ldr	r2, [r7, #20]
 800e4a6:	f248 031d 	movw	r3, #32797	; 0x801d
 800e4aa:	4413      	add	r3, r2
 800e4ac:	7819      	ldrb	r1, [r3, #0]
 800e4ae:	2320      	movs	r3, #32
 800e4b0:	2205      	movs	r2, #5
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f7ff fd88 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4bc:	e09a      	b.n	800e5f4 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	7afa      	ldrb	r2, [r7, #11]
 800e4c8:	4610      	mov	r0, r2
 800e4ca:	4798      	blx	r3
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d008      	beq.n	800e4e4 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e4d2:	7af9      	ldrb	r1, [r7, #11]
 800e4d4:	233a      	movs	r3, #58	; 0x3a
 800e4d6:	2202      	movs	r2, #2
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f7ff fd75 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e4de:	f04f 33ff 	mov.w	r3, #4294967295
 800e4e2:	e087      	b.n	800e5f4 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4ea:	68db      	ldr	r3, [r3, #12]
 800e4ec:	7afa      	ldrb	r2, [r7, #11]
 800e4ee:	4610      	mov	r0, r2
 800e4f0:	4798      	blx	r3
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d008      	beq.n	800e50a <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e4f8:	7af9      	ldrb	r1, [r7, #11]
 800e4fa:	2327      	movs	r3, #39	; 0x27
 800e4fc:	2202      	movs	r2, #2
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f7ff fd62 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e504:	f04f 33ff 	mov.w	r3, #4294967295
 800e508:	e074      	b.n	800e5f4 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	3302      	adds	r3, #2
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	3303      	adds	r3, #3
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e51a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	3304      	adds	r3, #4
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e524:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	3205      	adds	r2, #5
 800e52a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e52c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e52e:	6979      	ldr	r1, [r7, #20]
 800e530:	f248 036c 	movw	r3, #32876	; 0x806c
 800e534:	440b      	add	r3, r1
 800e536:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	3307      	adds	r3, #7
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	3208      	adds	r2, #8
 800e544:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e546:	431a      	orrs	r2, r3
 800e548:	6979      	ldr	r1, [r7, #20]
 800e54a:	f248 0370 	movw	r3, #32880	; 0x8070
 800e54e:	440b      	add	r3, r1
 800e550:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e552:	697a      	ldr	r2, [r7, #20]
 800e554:	f248 036c 	movw	r3, #32876	; 0x806c
 800e558:	4413      	add	r3, r2
 800e55a:	6818      	ldr	r0, [r3, #0]
 800e55c:	697a      	ldr	r2, [r7, #20]
 800e55e:	f248 0370 	movw	r3, #32880	; 0x8070
 800e562:	4413      	add	r3, r2
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	7af9      	ldrb	r1, [r7, #11]
 800e568:	4602      	mov	r2, r0
 800e56a:	68f8      	ldr	r0, [r7, #12]
 800e56c:	f000 f966 	bl	800e83c <SCSI_CheckAddressRange>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	da02      	bge.n	800e57c <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e576:	f04f 33ff 	mov.w	r3, #4294967295
 800e57a:	e03b      	b.n	800e5f4 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e57c:	697a      	ldr	r2, [r7, #20]
 800e57e:	f248 0370 	movw	r3, #32880	; 0x8070
 800e582:	4413      	add	r3, r2
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	6979      	ldr	r1, [r7, #20]
 800e588:	f248 0364 	movw	r3, #32868	; 0x8064
 800e58c:	440b      	add	r3, r1
 800e58e:	881b      	ldrh	r3, [r3, #0]
 800e590:	fb03 f302 	mul.w	r3, r3, r2
 800e594:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e596:	697a      	ldr	r2, [r7, #20]
 800e598:	f248 0318 	movw	r3, #32792	; 0x8018
 800e59c:	4413      	add	r3, r2
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	693a      	ldr	r2, [r7, #16]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d00c      	beq.n	800e5c0 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e5a6:	697a      	ldr	r2, [r7, #20]
 800e5a8:	f248 031d 	movw	r3, #32797	; 0x801d
 800e5ac:	4413      	add	r3, r2
 800e5ae:	7819      	ldrb	r1, [r3, #0]
 800e5b0:	2320      	movs	r3, #32
 800e5b2:	2205      	movs	r2, #5
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	f7ff fd07 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e5be:	e019      	b.n	800e5f4 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5c6:	bf28      	it	cs
 800e5c8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e5cc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	f103 0210 	add.w	r2, r3, #16
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	2101      	movs	r1, #1
 800e5de:	68f8      	ldr	r0, [r7, #12]
 800e5e0:	f004 f9db 	bl	801299a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	e005      	b.n	800e5f4 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 800e5e8:	7afb      	ldrb	r3, [r7, #11]
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	68f8      	ldr	r0, [r7, #12]
 800e5ee:	f000 f9d7 	bl	800e9a0 <SCSI_ProcessWrite>
 800e5f2:	4603      	mov	r3, r0
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3718      	adds	r7, #24
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b086      	sub	sp, #24
 800e600:	af00      	add	r7, sp, #0
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	460b      	mov	r3, r1
 800e606:	607a      	str	r2, [r7, #4]
 800e608:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e610:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	7a1b      	ldrb	r3, [r3, #8]
 800e616:	2b00      	cmp	r3, #0
 800e618:	f040 80ce 	bne.w	800e7b8 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e61c:	697a      	ldr	r2, [r7, #20]
 800e61e:	f248 0318 	movw	r3, #32792	; 0x8018
 800e622:	4413      	add	r3, r2
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d10c      	bne.n	800e644 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e62a:	697a      	ldr	r2, [r7, #20]
 800e62c:	f248 031d 	movw	r3, #32797	; 0x801d
 800e630:	4413      	add	r3, r2
 800e632:	7819      	ldrb	r1, [r3, #0]
 800e634:	2320      	movs	r3, #32
 800e636:	2205      	movs	r2, #5
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f7ff fcc5 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e63e:	f04f 33ff 	mov.w	r3, #4294967295
 800e642:	e0bf      	b.n	800e7c4 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e644:	697a      	ldr	r2, [r7, #20]
 800e646:	f248 031c 	movw	r3, #32796	; 0x801c
 800e64a:	4413      	add	r3, r2
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	b25b      	sxtb	r3, r3
 800e650:	2b00      	cmp	r3, #0
 800e652:	da0c      	bge.n	800e66e <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e654:	697a      	ldr	r2, [r7, #20]
 800e656:	f248 031d 	movw	r3, #32797	; 0x801d
 800e65a:	4413      	add	r3, r2
 800e65c:	7819      	ldrb	r1, [r3, #0]
 800e65e:	2320      	movs	r3, #32
 800e660:	2205      	movs	r2, #5
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f7ff fcb0 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e668:	f04f 33ff 	mov.w	r3, #4294967295
 800e66c:	e0aa      	b.n	800e7c4 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e674:	689b      	ldr	r3, [r3, #8]
 800e676:	7afa      	ldrb	r2, [r7, #11]
 800e678:	4610      	mov	r0, r2
 800e67a:	4798      	blx	r3
 800e67c:	4603      	mov	r3, r0
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d00b      	beq.n	800e69a <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e682:	7af9      	ldrb	r1, [r7, #11]
 800e684:	233a      	movs	r3, #58	; 0x3a
 800e686:	2202      	movs	r2, #2
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f7ff fc9d 	bl	800dfc8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	2205      	movs	r2, #5
 800e692:	721a      	strb	r2, [r3, #8]
      return -1;
 800e694:	f04f 33ff 	mov.w	r3, #4294967295
 800e698:	e094      	b.n	800e7c4 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6a0:	68db      	ldr	r3, [r3, #12]
 800e6a2:	7afa      	ldrb	r2, [r7, #11]
 800e6a4:	4610      	mov	r0, r2
 800e6a6:	4798      	blx	r3
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00b      	beq.n	800e6c6 <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e6ae:	7af9      	ldrb	r1, [r7, #11]
 800e6b0:	2327      	movs	r3, #39	; 0x27
 800e6b2:	2202      	movs	r2, #2
 800e6b4:	68f8      	ldr	r0, [r7, #12]
 800e6b6:	f7ff fc87 	bl	800dfc8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	2205      	movs	r2, #5
 800e6be:	721a      	strb	r2, [r3, #8]
      return -1;
 800e6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c4:	e07e      	b.n	800e7c4 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	3302      	adds	r3, #2
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	3303      	adds	r3, #3
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e6d6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	3304      	adds	r3, #4
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e6e0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	3205      	adds	r2, #5
 800e6e6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e6e8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e6ea:	6979      	ldr	r1, [r7, #20]
 800e6ec:	f248 036c 	movw	r3, #32876	; 0x806c
 800e6f0:	440b      	add	r3, r1
 800e6f2:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	3306      	adds	r3, #6
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	3307      	adds	r3, #7
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e704:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	3308      	adds	r3, #8
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e70e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	3209      	adds	r2, #9
 800e714:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e716:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e718:	6979      	ldr	r1, [r7, #20]
 800e71a:	f248 0370 	movw	r3, #32880	; 0x8070
 800e71e:	440b      	add	r3, r1
 800e720:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e722:	697a      	ldr	r2, [r7, #20]
 800e724:	f248 036c 	movw	r3, #32876	; 0x806c
 800e728:	4413      	add	r3, r2
 800e72a:	6818      	ldr	r0, [r3, #0]
 800e72c:	697a      	ldr	r2, [r7, #20]
 800e72e:	f248 0370 	movw	r3, #32880	; 0x8070
 800e732:	4413      	add	r3, r2
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	7af9      	ldrb	r1, [r7, #11]
 800e738:	4602      	mov	r2, r0
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f000 f87e 	bl	800e83c <SCSI_CheckAddressRange>
 800e740:	4603      	mov	r3, r0
 800e742:	2b00      	cmp	r3, #0
 800e744:	da02      	bge.n	800e74c <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e746:	f04f 33ff 	mov.w	r3, #4294967295
 800e74a:	e03b      	b.n	800e7c4 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e74c:	697a      	ldr	r2, [r7, #20]
 800e74e:	f248 0370 	movw	r3, #32880	; 0x8070
 800e752:	4413      	add	r3, r2
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	6979      	ldr	r1, [r7, #20]
 800e758:	f248 0364 	movw	r3, #32868	; 0x8064
 800e75c:	440b      	add	r3, r1
 800e75e:	881b      	ldrh	r3, [r3, #0]
 800e760:	fb03 f302 	mul.w	r3, r3, r2
 800e764:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e766:	697a      	ldr	r2, [r7, #20]
 800e768:	f248 0318 	movw	r3, #32792	; 0x8018
 800e76c:	4413      	add	r3, r2
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	693a      	ldr	r2, [r7, #16]
 800e772:	429a      	cmp	r2, r3
 800e774:	d00c      	beq.n	800e790 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e776:	697a      	ldr	r2, [r7, #20]
 800e778:	f248 031d 	movw	r3, #32797	; 0x801d
 800e77c:	4413      	add	r3, r2
 800e77e:	7819      	ldrb	r1, [r3, #0]
 800e780:	2320      	movs	r3, #32
 800e782:	2205      	movs	r2, #5
 800e784:	68f8      	ldr	r0, [r7, #12]
 800e786:	f7ff fc1f 	bl	800dfc8 <SCSI_SenseCode>
      return -1;
 800e78a:	f04f 33ff 	mov.w	r3, #4294967295
 800e78e:	e019      	b.n	800e7c4 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e796:	bf28      	it	cs
 800e798:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e79c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	f103 0210 	add.w	r2, r3, #16
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	2101      	movs	r1, #1
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f004 f8f3 	bl	801299a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	e005      	b.n	800e7c4 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 800e7b8:	7afb      	ldrb	r3, [r7, #11]
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f000 f8ef 	bl	800e9a0 <SCSI_ProcessWrite>
 800e7c2:	4603      	mov	r3, r0
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3718      	adds	r7, #24
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b086      	sub	sp, #24
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	607a      	str	r2, [r7, #4]
 800e7d8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7e0:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	f003 0302 	and.w	r3, r3, #2
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d008      	beq.n	800e802 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e7f0:	7af9      	ldrb	r1, [r7, #11]
 800e7f2:	2324      	movs	r3, #36	; 0x24
 800e7f4:	2205      	movs	r2, #5
 800e7f6:	68f8      	ldr	r0, [r7, #12]
 800e7f8:	f7ff fbe6 	bl	800dfc8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e800:	e018      	b.n	800e834 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800e802:	697a      	ldr	r2, [r7, #20]
 800e804:	f248 036c 	movw	r3, #32876	; 0x806c
 800e808:	4413      	add	r3, r2
 800e80a:	6818      	ldr	r0, [r3, #0]
 800e80c:	697a      	ldr	r2, [r7, #20]
 800e80e:	f248 0370 	movw	r3, #32880	; 0x8070
 800e812:	4413      	add	r3, r2
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	7af9      	ldrb	r1, [r7, #11]
 800e818:	4602      	mov	r2, r0
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	f000 f80e 	bl	800e83c <SCSI_CheckAddressRange>
 800e820:	4603      	mov	r3, r0
 800e822:	2b00      	cmp	r3, #0
 800e824:	da02      	bge.n	800e82c <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 800e826:	f04f 33ff 	mov.w	r3, #4294967295
 800e82a:	e003      	b.n	800e834 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	2200      	movs	r2, #0
 800e830:	60da      	str	r2, [r3, #12]

  return 0;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	3718      	adds	r7, #24
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b086      	sub	sp, #24
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	607a      	str	r2, [r7, #4]
 800e846:	603b      	str	r3, [r7, #0]
 800e848:	460b      	mov	r3, r1
 800e84a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e852:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	441a      	add	r2, r3
 800e85a:	6979      	ldr	r1, [r7, #20]
 800e85c:	f248 0368 	movw	r3, #32872	; 0x8068
 800e860:	440b      	add	r3, r1
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	429a      	cmp	r2, r3
 800e866:	d908      	bls.n	800e87a <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e868:	7af9      	ldrb	r1, [r7, #11]
 800e86a:	2321      	movs	r3, #33	; 0x21
 800e86c:	2205      	movs	r2, #5
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f7ff fbaa 	bl	800dfc8 <SCSI_SenseCode>
    return -1;
 800e874:	f04f 33ff 	mov.w	r3, #4294967295
 800e878:	e000      	b.n	800e87c <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 800e87a:	2300      	movs	r3, #0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3718      	adds	r7, #24
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e884:	b5b0      	push	{r4, r5, r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	460b      	mov	r3, r1
 800e88e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e896:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	f248 0370 	movw	r3, #32880	; 0x8070
 800e89e:	4413      	add	r3, r2
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	68f9      	ldr	r1, [r7, #12]
 800e8a4:	f248 0364 	movw	r3, #32868	; 0x8064
 800e8a8:	440b      	add	r3, r1
 800e8aa:	881b      	ldrh	r3, [r3, #0]
 800e8ac:	fb03 f302 	mul.w	r3, r3, r2
 800e8b0:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8b8:	bf28      	it	cs
 800e8ba:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e8be:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8c6:	691c      	ldr	r4, [r3, #16]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f103 0110 	add.w	r1, r3, #16
 800e8ce:	68fa      	ldr	r2, [r7, #12]
 800e8d0:	f248 036c 	movw	r3, #32876	; 0x806c
 800e8d4:	4413      	add	r3, r2
 800e8d6:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e8d8:	68fa      	ldr	r2, [r7, #12]
 800e8da:	f248 0364 	movw	r3, #32868	; 0x8064
 800e8de:	4413      	add	r3, r2
 800e8e0:	881b      	ldrh	r3, [r3, #0]
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	78f8      	ldrb	r0, [r7, #3]
 800e8ee:	462a      	mov	r2, r5
 800e8f0:	47a0      	blx	r4
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	da08      	bge.n	800e90a <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e8f8:	78f9      	ldrb	r1, [r7, #3]
 800e8fa:	2311      	movs	r3, #17
 800e8fc:	2204      	movs	r2, #4
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f7ff fb62 	bl	800dfc8 <SCSI_SenseCode>
    return -1;
 800e904:	f04f 33ff 	mov.w	r3, #4294967295
 800e908:	e046      	b.n	800e998 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f103 0210 	add.w	r2, r3, #16
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	2181      	movs	r1, #129	; 0x81
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f004 f81f 	bl	8012958 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	f248 036c 	movw	r3, #32876	; 0x806c
 800e920:	4413      	add	r3, r2
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	68f9      	ldr	r1, [r7, #12]
 800e926:	f248 0364 	movw	r3, #32868	; 0x8064
 800e92a:	440b      	add	r3, r1
 800e92c:	881b      	ldrh	r3, [r3, #0]
 800e92e:	4619      	mov	r1, r3
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	fbb3 f3f1 	udiv	r3, r3, r1
 800e936:	441a      	add	r2, r3
 800e938:	68f9      	ldr	r1, [r7, #12]
 800e93a:	f248 036c 	movw	r3, #32876	; 0x806c
 800e93e:	440b      	add	r3, r1
 800e940:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	f248 0370 	movw	r3, #32880	; 0x8070
 800e948:	4413      	add	r3, r2
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	68f9      	ldr	r1, [r7, #12]
 800e94e:	f248 0364 	movw	r3, #32868	; 0x8064
 800e952:	440b      	add	r3, r1
 800e954:	881b      	ldrh	r3, [r3, #0]
 800e956:	4619      	mov	r1, r3
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e95e:	1ad2      	subs	r2, r2, r3
 800e960:	68f9      	ldr	r1, [r7, #12]
 800e962:	f248 0370 	movw	r3, #32880	; 0x8070
 800e966:	440b      	add	r3, r1
 800e968:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e96a:	68fa      	ldr	r2, [r7, #12]
 800e96c:	f248 0338 	movw	r3, #32824	; 0x8038
 800e970:	4413      	add	r3, r2
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	1ad2      	subs	r2, r2, r3
 800e978:	68f9      	ldr	r1, [r7, #12]
 800e97a:	f248 0338 	movw	r3, #32824	; 0x8038
 800e97e:	440b      	add	r3, r1
 800e980:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	f248 0370 	movw	r3, #32880	; 0x8070
 800e988:	4413      	add	r3, r2
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d102      	bne.n	800e996 <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2203      	movs	r2, #3
 800e994:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800e996:	2300      	movs	r3, #0
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bdb0      	pop	{r4, r5, r7, pc}

0800e9a0 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e9a0:	b5b0      	push	{r4, r5, r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9b2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e9b4:	68fa      	ldr	r2, [r7, #12]
 800e9b6:	f248 0370 	movw	r3, #32880	; 0x8070
 800e9ba:	4413      	add	r3, r2
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	68f9      	ldr	r1, [r7, #12]
 800e9c0:	f248 0364 	movw	r3, #32868	; 0x8064
 800e9c4:	440b      	add	r3, r1
 800e9c6:	881b      	ldrh	r3, [r3, #0]
 800e9c8:	fb03 f302 	mul.w	r3, r3, r2
 800e9cc:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9d4:	bf28      	it	cs
 800e9d6:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e9da:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e9e2:	695c      	ldr	r4, [r3, #20]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f103 0110 	add.w	r1, r3, #16
 800e9ea:	68fa      	ldr	r2, [r7, #12]
 800e9ec:	f248 036c 	movw	r3, #32876	; 0x806c
 800e9f0:	4413      	add	r3, r2
 800e9f2:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	f248 0364 	movw	r3, #32868	; 0x8064
 800e9fa:	4413      	add	r3, r2
 800e9fc:	881b      	ldrh	r3, [r3, #0]
 800e9fe:	461a      	mov	r2, r3
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	78f8      	ldrb	r0, [r7, #3]
 800ea0a:	462a      	mov	r2, r5
 800ea0c:	47a0      	blx	r4
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	da08      	bge.n	800ea26 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800ea14:	78f9      	ldrb	r1, [r7, #3]
 800ea16:	2303      	movs	r3, #3
 800ea18:	2204      	movs	r2, #4
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f7ff fad4 	bl	800dfc8 <SCSI_SenseCode>
    return -1;
 800ea20:	f04f 33ff 	mov.w	r3, #4294967295
 800ea24:	e05a      	b.n	800eadc <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	f248 036c 	movw	r3, #32876	; 0x806c
 800ea2c:	4413      	add	r3, r2
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	68f9      	ldr	r1, [r7, #12]
 800ea32:	f248 0364 	movw	r3, #32868	; 0x8064
 800ea36:	440b      	add	r3, r1
 800ea38:	881b      	ldrh	r3, [r3, #0]
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea42:	441a      	add	r2, r3
 800ea44:	68f9      	ldr	r1, [r7, #12]
 800ea46:	f248 036c 	movw	r3, #32876	; 0x806c
 800ea4a:	440b      	add	r3, r1
 800ea4c:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	f248 0370 	movw	r3, #32880	; 0x8070
 800ea54:	4413      	add	r3, r2
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	68f9      	ldr	r1, [r7, #12]
 800ea5a:	f248 0364 	movw	r3, #32868	; 0x8064
 800ea5e:	440b      	add	r3, r1
 800ea60:	881b      	ldrh	r3, [r3, #0]
 800ea62:	4619      	mov	r1, r3
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea6a:	1ad2      	subs	r2, r2, r3
 800ea6c:	68f9      	ldr	r1, [r7, #12]
 800ea6e:	f248 0370 	movw	r3, #32880	; 0x8070
 800ea72:	440b      	add	r3, r1
 800ea74:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	f248 0338 	movw	r3, #32824	; 0x8038
 800ea7c:	4413      	add	r3, r2
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	1ad2      	subs	r2, r2, r3
 800ea84:	68f9      	ldr	r1, [r7, #12]
 800ea86:	f248 0338 	movw	r3, #32824	; 0x8038
 800ea8a:	440b      	add	r3, r1
 800ea8c:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 800ea8e:	68fa      	ldr	r2, [r7, #12]
 800ea90:	f248 0370 	movw	r3, #32880	; 0x8070
 800ea94:	4413      	add	r3, r2
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d104      	bne.n	800eaa6 <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ea9c:	2100      	movs	r1, #0
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7fe fde2 	bl	800d668 <MSC_BOT_SendCSW>
 800eaa4:	e019      	b.n	800eada <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800eaa6:	68fa      	ldr	r2, [r7, #12]
 800eaa8:	f248 0370 	movw	r3, #32880	; 0x8070
 800eaac:	4413      	add	r3, r2
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	68f9      	ldr	r1, [r7, #12]
 800eab2:	f248 0364 	movw	r3, #32868	; 0x8064
 800eab6:	440b      	add	r3, r1
 800eab8:	881b      	ldrh	r3, [r3, #0]
 800eaba:	fb03 f302 	mul.w	r3, r3, r2
 800eabe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eac2:	bf28      	it	cs
 800eac4:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800eac8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f103 0210 	add.w	r2, r3, #16
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	2101      	movs	r1, #1
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f003 ff60 	bl	801299a <USBD_LL_PrepareReceive>
  }

  return 0;
 800eada:	2300      	movs	r3, #0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3710      	adds	r7, #16
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bdb0      	pop	{r4, r5, r7, pc}

0800eae4 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b087      	sub	sp, #28
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	4613      	mov	r3, r2
 800eaf0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800eaf2:	88fb      	ldrh	r3, [r7, #6]
 800eaf4:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800eaf6:	8afa      	ldrh	r2, [r7, #22]
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800eafc:	e00b      	b.n	800eb16 <SCSI_UpdateBotData+0x32>
  {
    len--;
 800eafe:	8afb      	ldrh	r3, [r7, #22]
 800eb00:	3b01      	subs	r3, #1
 800eb02:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800eb04:	8afb      	ldrh	r3, [r7, #22]
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	441a      	add	r2, r3
 800eb0a:	8afb      	ldrh	r3, [r7, #22]
 800eb0c:	7811      	ldrb	r1, [r2, #0]
 800eb0e:	68fa      	ldr	r2, [r7, #12]
 800eb10:	4413      	add	r3, r2
 800eb12:	460a      	mov	r2, r1
 800eb14:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800eb16:	8afb      	ldrh	r3, [r7, #22]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d1f0      	bne.n	800eafe <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	371c      	adds	r7, #28
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr

0800eb2a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b086      	sub	sp, #24
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	60f8      	str	r0, [r7, #12]
 800eb32:	60b9      	str	r1, [r7, #8]
 800eb34:	4613      	mov	r3, r2
 800eb36:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d101      	bne.n	800eb42 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800eb3e:	2303      	movs	r3, #3
 800eb40:	e025      	b.n	800eb8e <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d003      	beq.n	800eb54 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d003      	beq.n	800eb66 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2200      	movs	r2, #0
 800eb62:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d003      	beq.n	800eb74 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	68ba      	ldr	r2, [r7, #8]
 800eb70:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2201      	movs	r2, #1
 800eb78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	79fa      	ldrb	r2, [r7, #7]
 800eb80:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eb82:	68f8      	ldr	r0, [r7, #12]
 800eb84:	f003 fd90 	bl	80126a8 <USBD_LL_Init>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800eb8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3718      	adds	r7, #24
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}

0800eb96 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eb96:	b580      	push	{r7, lr}
 800eb98:	b084      	sub	sp, #16
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
 800eb9e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eba0:	2300      	movs	r3, #0
 800eba2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d101      	bne.n	800ebae <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ebaa:	2303      	movs	r3, #3
 800ebac:	e010      	b.n	800ebd0 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	683a      	ldr	r2, [r7, #0]
 800ebb2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebbe:	f107 020e 	add.w	r2, r7, #14
 800ebc2:	4610      	mov	r0, r2
 800ebc4:	4798      	blx	r3
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3710      	adds	r7, #16
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f003 fdb1 	bl	8012748 <USBD_LL_Start>
 800ebe6:	4603      	mov	r3, r0
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3708      	adds	r7, #8
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ebf8:	2300      	movs	r3, #0
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	370c      	adds	r7, #12
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr

0800ec06 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b084      	sub	sp, #16
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
 800ec0e:	460b      	mov	r3, r1
 800ec10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ec12:	2303      	movs	r3, #3
 800ec14:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d009      	beq.n	800ec34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	78fa      	ldrb	r2, [r7, #3]
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	4798      	blx	r3
 800ec30:	4603      	mov	r3, r0
 800ec32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ec34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b082      	sub	sp, #8
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
 800ec46:	460b      	mov	r3, r1
 800ec48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d007      	beq.n	800ec64 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	78fa      	ldrb	r2, [r7, #3]
 800ec5e:	4611      	mov	r1, r2
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	4798      	blx	r3
  }

  return USBD_OK;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3708      	adds	r7, #8
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b084      	sub	sp, #16
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
 800ec76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec7e:	6839      	ldr	r1, [r7, #0]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f000 ff2b 	bl	800fadc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2201      	movs	r2, #1
 800ec8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ec94:	461a      	mov	r2, r3
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eca2:	f003 031f 	and.w	r3, r3, #31
 800eca6:	2b01      	cmp	r3, #1
 800eca8:	d00e      	beq.n	800ecc8 <USBD_LL_SetupStage+0x5a>
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d302      	bcc.n	800ecb4 <USBD_LL_SetupStage+0x46>
 800ecae:	2b02      	cmp	r3, #2
 800ecb0:	d014      	beq.n	800ecdc <USBD_LL_SetupStage+0x6e>
 800ecb2:	e01d      	b.n	800ecf0 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecba:	4619      	mov	r1, r3
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f000 fa17 	bl	800f0f0 <USBD_StdDevReq>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	73fb      	strb	r3, [r7, #15]
      break;
 800ecc6:	e020      	b.n	800ed0a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecce:	4619      	mov	r1, r3
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f000 fa7b 	bl	800f1cc <USBD_StdItfReq>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	73fb      	strb	r3, [r7, #15]
      break;
 800ecda:	e016      	b.n	800ed0a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ece2:	4619      	mov	r1, r3
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f000 fab7 	bl	800f258 <USBD_StdEPReq>
 800ecea:	4603      	mov	r3, r0
 800ecec:	73fb      	strb	r3, [r7, #15]
      break;
 800ecee:	e00c      	b.n	800ed0a <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ecf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f003 fda1 	bl	8012846 <USBD_LL_StallEP>
 800ed04:	4603      	mov	r3, r0
 800ed06:	73fb      	strb	r3, [r7, #15]
      break;
 800ed08:	bf00      	nop
  }

  return ret;
 800ed0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	607a      	str	r2, [r7, #4]
 800ed20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ed22:	7afb      	ldrb	r3, [r7, #11]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d137      	bne.n	800ed98 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ed2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed36:	2b03      	cmp	r3, #3
 800ed38:	d14a      	bne.n	800edd0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	689a      	ldr	r2, [r3, #8]
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d913      	bls.n	800ed6e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	689a      	ldr	r2, [r3, #8]
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	1ad2      	subs	r2, r2, r3
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	68da      	ldr	r2, [r3, #12]
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	689b      	ldr	r3, [r3, #8]
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	bf28      	it	cs
 800ed60:	4613      	movcs	r3, r2
 800ed62:	461a      	mov	r2, r3
 800ed64:	6879      	ldr	r1, [r7, #4]
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f000 ff8f 	bl	800fc8a <USBD_CtlContinueRx>
 800ed6c:	e030      	b.n	800edd0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed74:	691b      	ldr	r3, [r3, #16]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00a      	beq.n	800ed90 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ed80:	2b03      	cmp	r3, #3
 800ed82:	d105      	bne.n	800ed90 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed8a:	691b      	ldr	r3, [r3, #16]
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800ed90:	68f8      	ldr	r0, [r7, #12]
 800ed92:	f000 ff8b 	bl	800fcac <USBD_CtlSendStatus>
 800ed96:	e01b      	b.n	800edd0 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed9e:	699b      	ldr	r3, [r3, #24]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d013      	beq.n	800edcc <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800edaa:	2b03      	cmp	r3, #3
 800edac:	d10e      	bne.n	800edcc <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edb4:	699b      	ldr	r3, [r3, #24]
 800edb6:	7afa      	ldrb	r2, [r7, #11]
 800edb8:	4611      	mov	r1, r2
 800edba:	68f8      	ldr	r0, [r7, #12]
 800edbc:	4798      	blx	r3
 800edbe:	4603      	mov	r3, r0
 800edc0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800edc2:	7dfb      	ldrb	r3, [r7, #23]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d003      	beq.n	800edd0 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800edc8:	7dfb      	ldrb	r3, [r7, #23]
 800edca:	e002      	b.n	800edd2 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800edcc:	2303      	movs	r3, #3
 800edce:	e000      	b.n	800edd2 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3718      	adds	r7, #24
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}

0800edda <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800edda:	b580      	push	{r7, lr}
 800eddc:	b086      	sub	sp, #24
 800edde:	af00      	add	r7, sp, #0
 800ede0:	60f8      	str	r0, [r7, #12]
 800ede2:	460b      	mov	r3, r1
 800ede4:	607a      	str	r2, [r7, #4]
 800ede6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ede8:	7afb      	ldrb	r3, [r7, #11]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d16a      	bne.n	800eec4 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	3314      	adds	r3, #20
 800edf2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800edfa:	2b02      	cmp	r3, #2
 800edfc:	d155      	bne.n	800eeaa <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	689a      	ldr	r2, [r3, #8]
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	68db      	ldr	r3, [r3, #12]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d914      	bls.n	800ee34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	689a      	ldr	r2, [r3, #8]
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	1ad2      	subs	r2, r2, r3
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	6879      	ldr	r1, [r7, #4]
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f000 ff21 	bl	800fc68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee26:	2300      	movs	r3, #0
 800ee28:	2200      	movs	r2, #0
 800ee2a:	2100      	movs	r1, #0
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f003 fdb4 	bl	801299a <USBD_LL_PrepareReceive>
 800ee32:	e03a      	b.n	800eeaa <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	68da      	ldr	r2, [r3, #12]
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	689b      	ldr	r3, [r3, #8]
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d11c      	bne.n	800ee7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	685a      	ldr	r2, [r3, #4]
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d316      	bcc.n	800ee7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	685a      	ldr	r2, [r3, #4]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d20f      	bcs.n	800ee7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	2100      	movs	r1, #0
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f000 ff02 	bl	800fc68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2200      	movs	r2, #0
 800ee68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	2200      	movs	r2, #0
 800ee70:	2100      	movs	r1, #0
 800ee72:	68f8      	ldr	r0, [r7, #12]
 800ee74:	f003 fd91 	bl	801299a <USBD_LL_PrepareReceive>
 800ee78:	e017      	b.n	800eeaa <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d00a      	beq.n	800ee9c <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ee8c:	2b03      	cmp	r3, #3
 800ee8e:	d105      	bne.n	800ee9c <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee9c:	2180      	movs	r1, #128	; 0x80
 800ee9e:	68f8      	ldr	r0, [r7, #12]
 800eea0:	f003 fcd1 	bl	8012846 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eea4:	68f8      	ldr	r0, [r7, #12]
 800eea6:	f000 ff14 	bl	800fcd2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d123      	bne.n	800eefc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800eeb4:	68f8      	ldr	r0, [r7, #12]
 800eeb6:	f7ff fe9b 	bl	800ebf0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800eec2:	e01b      	b.n	800eefc <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeca:	695b      	ldr	r3, [r3, #20]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d013      	beq.n	800eef8 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800eed6:	2b03      	cmp	r3, #3
 800eed8:	d10e      	bne.n	800eef8 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eee0:	695b      	ldr	r3, [r3, #20]
 800eee2:	7afa      	ldrb	r2, [r7, #11]
 800eee4:	4611      	mov	r1, r2
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	4798      	blx	r3
 800eeea:	4603      	mov	r3, r0
 800eeec:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800eeee:	7dfb      	ldrb	r3, [r7, #23]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d003      	beq.n	800eefc <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800eef4:	7dfb      	ldrb	r3, [r7, #23]
 800eef6:	e002      	b.n	800eefe <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800eef8:	2303      	movs	r3, #3
 800eefa:	e000      	b.n	800eefe <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800eefc:	2300      	movs	r3, #0
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3718      	adds	r7, #24
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b082      	sub	sp, #8
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2201      	movs	r2, #1
 800ef12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2200      	movs	r2, #0
 800ef22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2200      	movs	r2, #0
 800ef28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d009      	beq.n	800ef4a <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	6852      	ldr	r2, [r2, #4]
 800ef42:	b2d2      	uxtb	r2, r2
 800ef44:	4611      	mov	r1, r2
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef4a:	2340      	movs	r3, #64	; 0x40
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	2100      	movs	r1, #0
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f003 fc14 	bl	801277e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2240      	movs	r2, #64	; 0x40
 800ef62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef66:	2340      	movs	r3, #64	; 0x40
 800ef68:	2200      	movs	r2, #0
 800ef6a:	2180      	movs	r1, #128	; 0x80
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f003 fc06 	bl	801277e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2201      	movs	r2, #1
 800ef76:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2240      	movs	r2, #64	; 0x40
 800ef7c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ef7e:	2300      	movs	r3, #0
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3708      	adds	r7, #8
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	460b      	mov	r3, r1
 800ef92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	78fa      	ldrb	r2, [r7, #3]
 800ef98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2204      	movs	r2, #4
 800efc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800efc4:	2300      	movs	r3, #0
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	370c      	adds	r7, #12
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr

0800efd2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800efd2:	b480      	push	{r7}
 800efd4:	b083      	sub	sp, #12
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efe0:	2b04      	cmp	r3, #4
 800efe2:	d105      	bne.n	800eff0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800eff0:	2300      	movs	r3, #0
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	370c      	adds	r7, #12
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr

0800effe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800effe:	b580      	push	{r7, lr}
 800f000:	b082      	sub	sp, #8
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f00c:	2b03      	cmp	r3, #3
 800f00e:	d10b      	bne.n	800f028 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f016:	69db      	ldr	r3, [r3, #28]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d005      	beq.n	800f028 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f022:	69db      	ldr	r3, [r3, #28]
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f032:	b480      	push	{r7}
 800f034:	b083      	sub	sp, #12
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
 800f03a:	460b      	mov	r3, r1
 800f03c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f03e:	2300      	movs	r3, #0
}
 800f040:	4618      	mov	r0, r3
 800f042:	370c      	adds	r7, #12
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr

0800f04c <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b083      	sub	sp, #12
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	460b      	mov	r3, r1
 800f056:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f058:	2300      	movs	r3, #0
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	370c      	adds	r7, #12
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr

0800f066 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f066:	b480      	push	{r7}
 800f068:	b083      	sub	sp, #12
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f06e:	2300      	movs	r3, #0
}
 800f070:	4618      	mov	r0, r3
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr

0800f07c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2201      	movs	r2, #1
 800f088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f092:	2b00      	cmp	r3, #0
 800f094:	d009      	beq.n	800f0aa <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	6852      	ldr	r2, [r2, #4]
 800f0a2:	b2d2      	uxtb	r2, r2
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	4798      	blx	r3
  }

  return USBD_OK;
 800f0aa:	2300      	movs	r3, #0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3708      	adds	r7, #8
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b087      	sub	sp, #28
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f0d2:	8a3b      	ldrh	r3, [r7, #16]
 800f0d4:	021b      	lsls	r3, r3, #8
 800f0d6:	b21a      	sxth	r2, r3
 800f0d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f0dc:	4313      	orrs	r3, r2
 800f0de:	b21b      	sxth	r3, r3
 800f0e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f0e2:	89fb      	ldrh	r3, [r7, #14]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	371c      	adds	r7, #28
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr

0800f0f0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f106:	2b20      	cmp	r3, #32
 800f108:	d004      	beq.n	800f114 <USBD_StdDevReq+0x24>
 800f10a:	2b40      	cmp	r3, #64	; 0x40
 800f10c:	d002      	beq.n	800f114 <USBD_StdDevReq+0x24>
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d00a      	beq.n	800f128 <USBD_StdDevReq+0x38>
 800f112:	e050      	b.n	800f1b6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f11a:	689b      	ldr	r3, [r3, #8]
 800f11c:	6839      	ldr	r1, [r7, #0]
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	4798      	blx	r3
 800f122:	4603      	mov	r3, r0
 800f124:	73fb      	strb	r3, [r7, #15]
    break;
 800f126:	e04b      	b.n	800f1c0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	785b      	ldrb	r3, [r3, #1]
 800f12c:	2b09      	cmp	r3, #9
 800f12e:	d83c      	bhi.n	800f1aa <USBD_StdDevReq+0xba>
 800f130:	a201      	add	r2, pc, #4	; (adr r2, 800f138 <USBD_StdDevReq+0x48>)
 800f132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f136:	bf00      	nop
 800f138:	0800f18d 	.word	0x0800f18d
 800f13c:	0800f1a1 	.word	0x0800f1a1
 800f140:	0800f1ab 	.word	0x0800f1ab
 800f144:	0800f197 	.word	0x0800f197
 800f148:	0800f1ab 	.word	0x0800f1ab
 800f14c:	0800f16b 	.word	0x0800f16b
 800f150:	0800f161 	.word	0x0800f161
 800f154:	0800f1ab 	.word	0x0800f1ab
 800f158:	0800f183 	.word	0x0800f183
 800f15c:	0800f175 	.word	0x0800f175
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800f160:	6839      	ldr	r1, [r7, #0]
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 f9ce 	bl	800f504 <USBD_GetDescriptor>
      break;
 800f168:	e024      	b.n	800f1b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800f16a:	6839      	ldr	r1, [r7, #0]
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 fb33 	bl	800f7d8 <USBD_SetAddress>
      break;
 800f172:	e01f      	b.n	800f1b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800f174:	6839      	ldr	r1, [r7, #0]
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 fb70 	bl	800f85c <USBD_SetConfig>
 800f17c:	4603      	mov	r3, r0
 800f17e:	73fb      	strb	r3, [r7, #15]
      break;
 800f180:	e018      	b.n	800f1b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800f182:	6839      	ldr	r1, [r7, #0]
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f000 fc0d 	bl	800f9a4 <USBD_GetConfig>
      break;
 800f18a:	e013      	b.n	800f1b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800f18c:	6839      	ldr	r1, [r7, #0]
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f000 fc3c 	bl	800fa0c <USBD_GetStatus>
      break;
 800f194:	e00e      	b.n	800f1b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800f196:	6839      	ldr	r1, [r7, #0]
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 fc6a 	bl	800fa72 <USBD_SetFeature>
      break;
 800f19e:	e009      	b.n	800f1b4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800f1a0:	6839      	ldr	r1, [r7, #0]
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f000 fc79 	bl	800fa9a <USBD_ClrFeature>
      break;
 800f1a8:	e004      	b.n	800f1b4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800f1aa:	6839      	ldr	r1, [r7, #0]
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f000 fccf 	bl	800fb50 <USBD_CtlError>
      break;
 800f1b2:	bf00      	nop
    }
    break;
 800f1b4:	e004      	b.n	800f1c0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800f1b6:	6839      	ldr	r1, [r7, #0]
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f000 fcc9 	bl	800fb50 <USBD_CtlError>
    break;
 800f1be:	bf00      	nop
  }

  return ret;
 800f1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3710      	adds	r7, #16
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop

0800f1cc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f1e2:	2b20      	cmp	r3, #32
 800f1e4:	d003      	beq.n	800f1ee <USBD_StdItfReq+0x22>
 800f1e6:	2b40      	cmp	r3, #64	; 0x40
 800f1e8:	d001      	beq.n	800f1ee <USBD_StdItfReq+0x22>
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d12a      	bne.n	800f244 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	2b02      	cmp	r3, #2
 800f1f8:	d81d      	bhi.n	800f236 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	889b      	ldrh	r3, [r3, #4]
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	2b01      	cmp	r3, #1
 800f202:	d813      	bhi.n	800f22c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f20a:	689b      	ldr	r3, [r3, #8]
 800f20c:	6839      	ldr	r1, [r7, #0]
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	4798      	blx	r3
 800f212:	4603      	mov	r3, r0
 800f214:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	88db      	ldrh	r3, [r3, #6]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d110      	bne.n	800f240 <USBD_StdItfReq+0x74>
 800f21e:	7bfb      	ldrb	r3, [r7, #15]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10d      	bne.n	800f240 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f000 fd41 	bl	800fcac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f22a:	e009      	b.n	800f240 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800f22c:	6839      	ldr	r1, [r7, #0]
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f000 fc8e 	bl	800fb50 <USBD_CtlError>
      break;
 800f234:	e004      	b.n	800f240 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800f236:	6839      	ldr	r1, [r7, #0]
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 fc89 	bl	800fb50 <USBD_CtlError>
      break;
 800f23e:	e000      	b.n	800f242 <USBD_StdItfReq+0x76>
      break;
 800f240:	bf00      	nop
    }
    break;
 800f242:	e004      	b.n	800f24e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800f244:	6839      	ldr	r1, [r7, #0]
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 fc82 	bl	800fb50 <USBD_CtlError>
    break;
 800f24c:	bf00      	nop
  }

  return ret;
 800f24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f250:	4618      	mov	r0, r3
 800f252:	3710      	adds	r7, #16
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f262:	2300      	movs	r3, #0
 800f264:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	889b      	ldrh	r3, [r3, #4]
 800f26a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f274:	2b20      	cmp	r3, #32
 800f276:	d004      	beq.n	800f282 <USBD_StdEPReq+0x2a>
 800f278:	2b40      	cmp	r3, #64	; 0x40
 800f27a:	d002      	beq.n	800f282 <USBD_StdEPReq+0x2a>
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d00a      	beq.n	800f296 <USBD_StdEPReq+0x3e>
 800f280:	e135      	b.n	800f4ee <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f288:	689b      	ldr	r3, [r3, #8]
 800f28a:	6839      	ldr	r1, [r7, #0]
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	4798      	blx	r3
 800f290:	4603      	mov	r3, r0
 800f292:	73fb      	strb	r3, [r7, #15]
    break;
 800f294:	e130      	b.n	800f4f8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	785b      	ldrb	r3, [r3, #1]
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d03e      	beq.n	800f31c <USBD_StdEPReq+0xc4>
 800f29e:	2b03      	cmp	r3, #3
 800f2a0:	d002      	beq.n	800f2a8 <USBD_StdEPReq+0x50>
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d077      	beq.n	800f396 <USBD_StdEPReq+0x13e>
 800f2a6:	e11c      	b.n	800f4e2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2ae:	2b02      	cmp	r3, #2
 800f2b0:	d002      	beq.n	800f2b8 <USBD_StdEPReq+0x60>
 800f2b2:	2b03      	cmp	r3, #3
 800f2b4:	d015      	beq.n	800f2e2 <USBD_StdEPReq+0x8a>
 800f2b6:	e02b      	b.n	800f310 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2b8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00c      	beq.n	800f2d8 <USBD_StdEPReq+0x80>
 800f2be:	7bbb      	ldrb	r3, [r7, #14]
 800f2c0:	2b80      	cmp	r3, #128	; 0x80
 800f2c2:	d009      	beq.n	800f2d8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2c4:	7bbb      	ldrb	r3, [r7, #14]
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f003 fabc 	bl	8012846 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2ce:	2180      	movs	r1, #128	; 0x80
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f003 fab8 	bl	8012846 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f2d6:	e020      	b.n	800f31a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800f2d8:	6839      	ldr	r1, [r7, #0]
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 fc38 	bl	800fb50 <USBD_CtlError>
        break;
 800f2e0:	e01b      	b.n	800f31a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	885b      	ldrh	r3, [r3, #2]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d10e      	bne.n	800f308 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f2ea:	7bbb      	ldrb	r3, [r7, #14]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d00b      	beq.n	800f308 <USBD_StdEPReq+0xb0>
 800f2f0:	7bbb      	ldrb	r3, [r7, #14]
 800f2f2:	2b80      	cmp	r3, #128	; 0x80
 800f2f4:	d008      	beq.n	800f308 <USBD_StdEPReq+0xb0>
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	88db      	ldrh	r3, [r3, #6]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d104      	bne.n	800f308 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2fe:	7bbb      	ldrb	r3, [r7, #14]
 800f300:	4619      	mov	r1, r3
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f003 fa9f 	bl	8012846 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f000 fccf 	bl	800fcac <USBD_CtlSendStatus>

        break;
 800f30e:	e004      	b.n	800f31a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800f310:	6839      	ldr	r1, [r7, #0]
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 fc1c 	bl	800fb50 <USBD_CtlError>
        break;
 800f318:	bf00      	nop
      }
      break;
 800f31a:	e0e7      	b.n	800f4ec <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f322:	2b02      	cmp	r3, #2
 800f324:	d002      	beq.n	800f32c <USBD_StdEPReq+0xd4>
 800f326:	2b03      	cmp	r3, #3
 800f328:	d015      	beq.n	800f356 <USBD_StdEPReq+0xfe>
 800f32a:	e02d      	b.n	800f388 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f32c:	7bbb      	ldrb	r3, [r7, #14]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00c      	beq.n	800f34c <USBD_StdEPReq+0xf4>
 800f332:	7bbb      	ldrb	r3, [r7, #14]
 800f334:	2b80      	cmp	r3, #128	; 0x80
 800f336:	d009      	beq.n	800f34c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f338:	7bbb      	ldrb	r3, [r7, #14]
 800f33a:	4619      	mov	r1, r3
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f003 fa82 	bl	8012846 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f342:	2180      	movs	r1, #128	; 0x80
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f003 fa7e 	bl	8012846 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f34a:	e023      	b.n	800f394 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800f34c:	6839      	ldr	r1, [r7, #0]
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 fbfe 	bl	800fb50 <USBD_CtlError>
        break;
 800f354:	e01e      	b.n	800f394 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	885b      	ldrh	r3, [r3, #2]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d119      	bne.n	800f392 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f35e:	7bbb      	ldrb	r3, [r7, #14]
 800f360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f364:	2b00      	cmp	r3, #0
 800f366:	d004      	beq.n	800f372 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f368:	7bbb      	ldrb	r3, [r7, #14]
 800f36a:	4619      	mov	r1, r3
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f003 fa89 	bl	8012884 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 fc9a 	bl	800fcac <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f37e:	689b      	ldr	r3, [r3, #8]
 800f380:	6839      	ldr	r1, [r7, #0]
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	4798      	blx	r3
        }
        break;
 800f386:	e004      	b.n	800f392 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800f388:	6839      	ldr	r1, [r7, #0]
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 fbe0 	bl	800fb50 <USBD_CtlError>
        break;
 800f390:	e000      	b.n	800f394 <USBD_StdEPReq+0x13c>
        break;
 800f392:	bf00      	nop
      }
      break;
 800f394:	e0aa      	b.n	800f4ec <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f39c:	2b02      	cmp	r3, #2
 800f39e:	d002      	beq.n	800f3a6 <USBD_StdEPReq+0x14e>
 800f3a0:	2b03      	cmp	r3, #3
 800f3a2:	d032      	beq.n	800f40a <USBD_StdEPReq+0x1b2>
 800f3a4:	e097      	b.n	800f4d6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3a6:	7bbb      	ldrb	r3, [r7, #14]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d007      	beq.n	800f3bc <USBD_StdEPReq+0x164>
 800f3ac:	7bbb      	ldrb	r3, [r7, #14]
 800f3ae:	2b80      	cmp	r3, #128	; 0x80
 800f3b0:	d004      	beq.n	800f3bc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800f3b2:	6839      	ldr	r1, [r7, #0]
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f000 fbcb 	bl	800fb50 <USBD_CtlError>
          break;
 800f3ba:	e091      	b.n	800f4e0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	da0b      	bge.n	800f3dc <USBD_StdEPReq+0x184>
 800f3c4:	7bbb      	ldrb	r3, [r7, #14]
 800f3c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f3ca:	4613      	mov	r3, r2
 800f3cc:	009b      	lsls	r3, r3, #2
 800f3ce:	4413      	add	r3, r2
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	3310      	adds	r3, #16
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	4413      	add	r3, r2
 800f3d8:	3304      	adds	r3, #4
 800f3da:	e00b      	b.n	800f3f4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f3dc:	7bbb      	ldrb	r3, [r7, #14]
 800f3de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	009b      	lsls	r3, r3, #2
 800f3e6:	4413      	add	r3, r2
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	3304      	adds	r3, #4
 800f3f4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	2202      	movs	r2, #2
 800f400:	4619      	mov	r1, r3
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 fc15 	bl	800fc32 <USBD_CtlSendData>
        break;
 800f408:	e06a      	b.n	800f4e0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800f40a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	da11      	bge.n	800f436 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f412:	7bbb      	ldrb	r3, [r7, #14]
 800f414:	f003 020f 	and.w	r2, r3, #15
 800f418:	6879      	ldr	r1, [r7, #4]
 800f41a:	4613      	mov	r3, r2
 800f41c:	009b      	lsls	r3, r3, #2
 800f41e:	4413      	add	r3, r2
 800f420:	009b      	lsls	r3, r3, #2
 800f422:	440b      	add	r3, r1
 800f424:	3324      	adds	r3, #36	; 0x24
 800f426:	881b      	ldrh	r3, [r3, #0]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d117      	bne.n	800f45c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f42c:	6839      	ldr	r1, [r7, #0]
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 fb8e 	bl	800fb50 <USBD_CtlError>
            break;
 800f434:	e054      	b.n	800f4e0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f436:	7bbb      	ldrb	r3, [r7, #14]
 800f438:	f003 020f 	and.w	r2, r3, #15
 800f43c:	6879      	ldr	r1, [r7, #4]
 800f43e:	4613      	mov	r3, r2
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	4413      	add	r3, r2
 800f444:	009b      	lsls	r3, r3, #2
 800f446:	440b      	add	r3, r1
 800f448:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f44c:	881b      	ldrh	r3, [r3, #0]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d104      	bne.n	800f45c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f452:	6839      	ldr	r1, [r7, #0]
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 fb7b 	bl	800fb50 <USBD_CtlError>
            break;
 800f45a:	e041      	b.n	800f4e0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f45c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f460:	2b00      	cmp	r3, #0
 800f462:	da0b      	bge.n	800f47c <USBD_StdEPReq+0x224>
 800f464:	7bbb      	ldrb	r3, [r7, #14]
 800f466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f46a:	4613      	mov	r3, r2
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	4413      	add	r3, r2
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	3310      	adds	r3, #16
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	4413      	add	r3, r2
 800f478:	3304      	adds	r3, #4
 800f47a:	e00b      	b.n	800f494 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f47c:	7bbb      	ldrb	r3, [r7, #14]
 800f47e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f482:	4613      	mov	r3, r2
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	4413      	add	r3, r2
 800f488:	009b      	lsls	r3, r3, #2
 800f48a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	4413      	add	r3, r2
 800f492:	3304      	adds	r3, #4
 800f494:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f496:	7bbb      	ldrb	r3, [r7, #14]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d002      	beq.n	800f4a2 <USBD_StdEPReq+0x24a>
 800f49c:	7bbb      	ldrb	r3, [r7, #14]
 800f49e:	2b80      	cmp	r3, #128	; 0x80
 800f4a0:	d103      	bne.n	800f4aa <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	601a      	str	r2, [r3, #0]
 800f4a8:	e00e      	b.n	800f4c8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f4aa:	7bbb      	ldrb	r3, [r7, #14]
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f003 fa07 	bl	80128c2 <USBD_LL_IsStallEP>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d003      	beq.n	800f4c2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	2201      	movs	r2, #1
 800f4be:	601a      	str	r2, [r3, #0]
 800f4c0:	e002      	b.n	800f4c8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	2202      	movs	r2, #2
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f000 fbaf 	bl	800fc32 <USBD_CtlSendData>
          break;
 800f4d4:	e004      	b.n	800f4e0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 fb39 	bl	800fb50 <USBD_CtlError>
        break;
 800f4de:	bf00      	nop
      }
      break;
 800f4e0:	e004      	b.n	800f4ec <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f4e2:	6839      	ldr	r1, [r7, #0]
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 fb33 	bl	800fb50 <USBD_CtlError>
      break;
 800f4ea:	bf00      	nop
    }
    break;
 800f4ec:	e004      	b.n	800f4f8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f4ee:	6839      	ldr	r1, [r7, #0]
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 fb2d 	bl	800fb50 <USBD_CtlError>
    break;
 800f4f6:	bf00      	nop
  }

  return ret;
 800f4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3710      	adds	r7, #16
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
	...

0800f504 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f50e:	2300      	movs	r3, #0
 800f510:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f512:	2300      	movs	r3, #0
 800f514:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f516:	2300      	movs	r3, #0
 800f518:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	885b      	ldrh	r3, [r3, #2]
 800f51e:	0a1b      	lsrs	r3, r3, #8
 800f520:	b29b      	uxth	r3, r3
 800f522:	3b01      	subs	r3, #1
 800f524:	2b06      	cmp	r3, #6
 800f526:	f200 8128 	bhi.w	800f77a <USBD_GetDescriptor+0x276>
 800f52a:	a201      	add	r2, pc, #4	; (adr r2, 800f530 <USBD_GetDescriptor+0x2c>)
 800f52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f530:	0800f54d 	.word	0x0800f54d
 800f534:	0800f565 	.word	0x0800f565
 800f538:	0800f5a5 	.word	0x0800f5a5
 800f53c:	0800f77b 	.word	0x0800f77b
 800f540:	0800f77b 	.word	0x0800f77b
 800f544:	0800f71b 	.word	0x0800f71b
 800f548:	0800f747 	.word	0x0800f747
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	7c12      	ldrb	r2, [r2, #16]
 800f558:	f107 0108 	add.w	r1, r7, #8
 800f55c:	4610      	mov	r0, r2
 800f55e:	4798      	blx	r3
 800f560:	60f8      	str	r0, [r7, #12]
    break;
 800f562:	e112      	b.n	800f78a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	7c1b      	ldrb	r3, [r3, #16]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d10d      	bne.n	800f588 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f574:	f107 0208 	add.w	r2, r7, #8
 800f578:	4610      	mov	r0, r2
 800f57a:	4798      	blx	r3
 800f57c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	3301      	adds	r3, #1
 800f582:	2202      	movs	r2, #2
 800f584:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f586:	e100      	b.n	800f78a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f590:	f107 0208 	add.w	r2, r7, #8
 800f594:	4610      	mov	r0, r2
 800f596:	4798      	blx	r3
 800f598:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	3301      	adds	r3, #1
 800f59e:	2202      	movs	r2, #2
 800f5a0:	701a      	strb	r2, [r3, #0]
    break;
 800f5a2:	e0f2      	b.n	800f78a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	885b      	ldrh	r3, [r3, #2]
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	2b05      	cmp	r3, #5
 800f5ac:	f200 80ac 	bhi.w	800f708 <USBD_GetDescriptor+0x204>
 800f5b0:	a201      	add	r2, pc, #4	; (adr r2, 800f5b8 <USBD_GetDescriptor+0xb4>)
 800f5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b6:	bf00      	nop
 800f5b8:	0800f5d1 	.word	0x0800f5d1
 800f5bc:	0800f605 	.word	0x0800f605
 800f5c0:	0800f639 	.word	0x0800f639
 800f5c4:	0800f66d 	.word	0x0800f66d
 800f5c8:	0800f6a1 	.word	0x0800f6a1
 800f5cc:	0800f6d5 	.word	0x0800f6d5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d00b      	beq.n	800f5f4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	7c12      	ldrb	r2, [r2, #16]
 800f5e8:	f107 0108 	add.w	r1, r7, #8
 800f5ec:	4610      	mov	r0, r2
 800f5ee:	4798      	blx	r3
 800f5f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f5f2:	e091      	b.n	800f718 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f5f4:	6839      	ldr	r1, [r7, #0]
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 faaa 	bl	800fb50 <USBD_CtlError>
        err++;
 800f5fc:	7afb      	ldrb	r3, [r7, #11]
 800f5fe:	3301      	adds	r3, #1
 800f600:	72fb      	strb	r3, [r7, #11]
      break;
 800f602:	e089      	b.n	800f718 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f60a:	689b      	ldr	r3, [r3, #8]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d00b      	beq.n	800f628 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f616:	689b      	ldr	r3, [r3, #8]
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	7c12      	ldrb	r2, [r2, #16]
 800f61c:	f107 0108 	add.w	r1, r7, #8
 800f620:	4610      	mov	r0, r2
 800f622:	4798      	blx	r3
 800f624:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f626:	e077      	b.n	800f718 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f628:	6839      	ldr	r1, [r7, #0]
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f000 fa90 	bl	800fb50 <USBD_CtlError>
        err++;
 800f630:	7afb      	ldrb	r3, [r7, #11]
 800f632:	3301      	adds	r3, #1
 800f634:	72fb      	strb	r3, [r7, #11]
      break;
 800f636:	e06f      	b.n	800f718 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f63e:	68db      	ldr	r3, [r3, #12]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d00b      	beq.n	800f65c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f64a:	68db      	ldr	r3, [r3, #12]
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	7c12      	ldrb	r2, [r2, #16]
 800f650:	f107 0108 	add.w	r1, r7, #8
 800f654:	4610      	mov	r0, r2
 800f656:	4798      	blx	r3
 800f658:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f65a:	e05d      	b.n	800f718 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f65c:	6839      	ldr	r1, [r7, #0]
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f000 fa76 	bl	800fb50 <USBD_CtlError>
        err++;
 800f664:	7afb      	ldrb	r3, [r7, #11]
 800f666:	3301      	adds	r3, #1
 800f668:	72fb      	strb	r3, [r7, #11]
      break;
 800f66a:	e055      	b.n	800f718 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f672:	691b      	ldr	r3, [r3, #16]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d00b      	beq.n	800f690 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f67e:	691b      	ldr	r3, [r3, #16]
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	7c12      	ldrb	r2, [r2, #16]
 800f684:	f107 0108 	add.w	r1, r7, #8
 800f688:	4610      	mov	r0, r2
 800f68a:	4798      	blx	r3
 800f68c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f68e:	e043      	b.n	800f718 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f690:	6839      	ldr	r1, [r7, #0]
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f000 fa5c 	bl	800fb50 <USBD_CtlError>
        err++;
 800f698:	7afb      	ldrb	r3, [r7, #11]
 800f69a:	3301      	adds	r3, #1
 800f69c:	72fb      	strb	r3, [r7, #11]
      break;
 800f69e:	e03b      	b.n	800f718 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6a6:	695b      	ldr	r3, [r3, #20]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d00b      	beq.n	800f6c4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6b2:	695b      	ldr	r3, [r3, #20]
 800f6b4:	687a      	ldr	r2, [r7, #4]
 800f6b6:	7c12      	ldrb	r2, [r2, #16]
 800f6b8:	f107 0108 	add.w	r1, r7, #8
 800f6bc:	4610      	mov	r0, r2
 800f6be:	4798      	blx	r3
 800f6c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f6c2:	e029      	b.n	800f718 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f6c4:	6839      	ldr	r1, [r7, #0]
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f000 fa42 	bl	800fb50 <USBD_CtlError>
        err++;
 800f6cc:	7afb      	ldrb	r3, [r7, #11]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	72fb      	strb	r3, [r7, #11]
      break;
 800f6d2:	e021      	b.n	800f718 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6da:	699b      	ldr	r3, [r3, #24]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d00b      	beq.n	800f6f8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6e6:	699b      	ldr	r3, [r3, #24]
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	7c12      	ldrb	r2, [r2, #16]
 800f6ec:	f107 0108 	add.w	r1, r7, #8
 800f6f0:	4610      	mov	r0, r2
 800f6f2:	4798      	blx	r3
 800f6f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f6f6:	e00f      	b.n	800f718 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f6f8:	6839      	ldr	r1, [r7, #0]
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f000 fa28 	bl	800fb50 <USBD_CtlError>
        err++;
 800f700:	7afb      	ldrb	r3, [r7, #11]
 800f702:	3301      	adds	r3, #1
 800f704:	72fb      	strb	r3, [r7, #11]
      break;
 800f706:	e007      	b.n	800f718 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f708:	6839      	ldr	r1, [r7, #0]
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f000 fa20 	bl	800fb50 <USBD_CtlError>
      err++;
 800f710:	7afb      	ldrb	r3, [r7, #11]
 800f712:	3301      	adds	r3, #1
 800f714:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f716:	bf00      	nop
    }
    break;
 800f718:	e037      	b.n	800f78a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	7c1b      	ldrb	r3, [r3, #16]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d109      	bne.n	800f736 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f72a:	f107 0208 	add.w	r2, r7, #8
 800f72e:	4610      	mov	r0, r2
 800f730:	4798      	blx	r3
 800f732:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f734:	e029      	b.n	800f78a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f736:	6839      	ldr	r1, [r7, #0]
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f000 fa09 	bl	800fb50 <USBD_CtlError>
      err++;
 800f73e:	7afb      	ldrb	r3, [r7, #11]
 800f740:	3301      	adds	r3, #1
 800f742:	72fb      	strb	r3, [r7, #11]
    break;
 800f744:	e021      	b.n	800f78a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	7c1b      	ldrb	r3, [r3, #16]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d10d      	bne.n	800f76a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f756:	f107 0208 	add.w	r2, r7, #8
 800f75a:	4610      	mov	r0, r2
 800f75c:	4798      	blx	r3
 800f75e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	3301      	adds	r3, #1
 800f764:	2207      	movs	r2, #7
 800f766:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f768:	e00f      	b.n	800f78a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f76a:	6839      	ldr	r1, [r7, #0]
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 f9ef 	bl	800fb50 <USBD_CtlError>
      err++;
 800f772:	7afb      	ldrb	r3, [r7, #11]
 800f774:	3301      	adds	r3, #1
 800f776:	72fb      	strb	r3, [r7, #11]
    break;
 800f778:	e007      	b.n	800f78a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f77a:	6839      	ldr	r1, [r7, #0]
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f000 f9e7 	bl	800fb50 <USBD_CtlError>
    err++;
 800f782:	7afb      	ldrb	r3, [r7, #11]
 800f784:	3301      	adds	r3, #1
 800f786:	72fb      	strb	r3, [r7, #11]
    break;
 800f788:	bf00      	nop
  }

  if (err != 0U)
 800f78a:	7afb      	ldrb	r3, [r7, #11]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d11e      	bne.n	800f7ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	88db      	ldrh	r3, [r3, #6]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d016      	beq.n	800f7c6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f798:	893b      	ldrh	r3, [r7, #8]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d00e      	beq.n	800f7bc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	88da      	ldrh	r2, [r3, #6]
 800f7a2:	893b      	ldrh	r3, [r7, #8]
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	bf28      	it	cs
 800f7a8:	4613      	movcs	r3, r2
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f7ae:	893b      	ldrh	r3, [r7, #8]
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	68f9      	ldr	r1, [r7, #12]
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 fa3c 	bl	800fc32 <USBD_CtlSendData>
 800f7ba:	e009      	b.n	800f7d0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f7bc:	6839      	ldr	r1, [r7, #0]
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f000 f9c6 	bl	800fb50 <USBD_CtlError>
 800f7c4:	e004      	b.n	800f7d0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 fa70 	bl	800fcac <USBD_CtlSendStatus>
 800f7cc:	e000      	b.n	800f7d0 <USBD_GetDescriptor+0x2cc>
    return;
 800f7ce:	bf00      	nop
    }
  }
}
 800f7d0:	3710      	adds	r7, #16
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop

0800f7d8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	889b      	ldrh	r3, [r3, #4]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d130      	bne.n	800f84c <USBD_SetAddress+0x74>
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	88db      	ldrh	r3, [r3, #6]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d12c      	bne.n	800f84c <USBD_SetAddress+0x74>
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	885b      	ldrh	r3, [r3, #2]
 800f7f6:	2b7f      	cmp	r3, #127	; 0x7f
 800f7f8:	d828      	bhi.n	800f84c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	885b      	ldrh	r3, [r3, #2]
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f804:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f80c:	2b03      	cmp	r3, #3
 800f80e:	d104      	bne.n	800f81a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f810:	6839      	ldr	r1, [r7, #0]
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f000 f99c 	bl	800fb50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f818:	e01c      	b.n	800f854 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	7bfa      	ldrb	r2, [r7, #15]
 800f81e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f822:	7bfb      	ldrb	r3, [r7, #15]
 800f824:	4619      	mov	r1, r3
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f003 f877 	bl	801291a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f000 fa3d 	bl	800fcac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f832:	7bfb      	ldrb	r3, [r7, #15]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d004      	beq.n	800f842 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2202      	movs	r2, #2
 800f83c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f840:	e008      	b.n	800f854 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2201      	movs	r2, #1
 800f846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f84a:	e003      	b.n	800f854 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f84c:	6839      	ldr	r1, [r7, #0]
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 f97e 	bl	800fb50 <USBD_CtlError>
  }
}
 800f854:	bf00      	nop
 800f856:	3710      	adds	r7, #16
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f866:	2300      	movs	r3, #0
 800f868:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	885b      	ldrh	r3, [r3, #2]
 800f86e:	b2da      	uxtb	r2, r3
 800f870:	4b4b      	ldr	r3, [pc, #300]	; (800f9a0 <USBD_SetConfig+0x144>)
 800f872:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f874:	4b4a      	ldr	r3, [pc, #296]	; (800f9a0 <USBD_SetConfig+0x144>)
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d905      	bls.n	800f888 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f87c:	6839      	ldr	r1, [r7, #0]
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 f966 	bl	800fb50 <USBD_CtlError>
    return USBD_FAIL;
 800f884:	2303      	movs	r3, #3
 800f886:	e087      	b.n	800f998 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f88e:	2b02      	cmp	r3, #2
 800f890:	d002      	beq.n	800f898 <USBD_SetConfig+0x3c>
 800f892:	2b03      	cmp	r3, #3
 800f894:	d025      	beq.n	800f8e2 <USBD_SetConfig+0x86>
 800f896:	e071      	b.n	800f97c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f898:	4b41      	ldr	r3, [pc, #260]	; (800f9a0 <USBD_SetConfig+0x144>)
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d01c      	beq.n	800f8da <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f8a0:	4b3f      	ldr	r3, [pc, #252]	; (800f9a0 <USBD_SetConfig+0x144>)
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f8aa:	4b3d      	ldr	r3, [pc, #244]	; (800f9a0 <USBD_SetConfig+0x144>)
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	4619      	mov	r1, r3
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f7ff f9a8 	bl	800ec06 <USBD_SetClassConfig>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f8ba:	7bfb      	ldrb	r3, [r7, #15]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d004      	beq.n	800f8ca <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f8c0:	6839      	ldr	r1, [r7, #0]
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 f944 	bl	800fb50 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f8c8:	e065      	b.n	800f996 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f000 f9ee 	bl	800fcac <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2203      	movs	r2, #3
 800f8d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f8d8:	e05d      	b.n	800f996 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f000 f9e6 	bl	800fcac <USBD_CtlSendStatus>
    break;
 800f8e0:	e059      	b.n	800f996 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f8e2:	4b2f      	ldr	r3, [pc, #188]	; (800f9a0 <USBD_SetConfig+0x144>)
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d112      	bne.n	800f910 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2202      	movs	r2, #2
 800f8ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f8f2:	4b2b      	ldr	r3, [pc, #172]	; (800f9a0 <USBD_SetConfig+0x144>)
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f8fc:	4b28      	ldr	r3, [pc, #160]	; (800f9a0 <USBD_SetConfig+0x144>)
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	4619      	mov	r1, r3
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f7ff f99b 	bl	800ec3e <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 f9cf 	bl	800fcac <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f90e:	e042      	b.n	800f996 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f910:	4b23      	ldr	r3, [pc, #140]	; (800f9a0 <USBD_SetConfig+0x144>)
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	461a      	mov	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d02a      	beq.n	800f974 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	b2db      	uxtb	r3, r3
 800f924:	4619      	mov	r1, r3
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f7ff f989 	bl	800ec3e <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f92c:	4b1c      	ldr	r3, [pc, #112]	; (800f9a0 <USBD_SetConfig+0x144>)
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	461a      	mov	r2, r3
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f936:	4b1a      	ldr	r3, [pc, #104]	; (800f9a0 <USBD_SetConfig+0x144>)
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	4619      	mov	r1, r3
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f7ff f962 	bl	800ec06 <USBD_SetClassConfig>
 800f942:	4603      	mov	r3, r0
 800f944:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f946:	7bfb      	ldrb	r3, [r7, #15]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d00f      	beq.n	800f96c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f94c:	6839      	ldr	r1, [r7, #0]
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 f8fe 	bl	800fb50 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	4619      	mov	r1, r3
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f7ff f96e 	bl	800ec3e <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2202      	movs	r2, #2
 800f966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f96a:	e014      	b.n	800f996 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 f99d 	bl	800fcac <USBD_CtlSendStatus>
    break;
 800f972:	e010      	b.n	800f996 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f000 f999 	bl	800fcac <USBD_CtlSendStatus>
    break;
 800f97a:	e00c      	b.n	800f996 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f97c:	6839      	ldr	r1, [r7, #0]
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f000 f8e6 	bl	800fb50 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f984:	4b06      	ldr	r3, [pc, #24]	; (800f9a0 <USBD_SetConfig+0x144>)
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	4619      	mov	r1, r3
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f7ff f957 	bl	800ec3e <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f990:	2303      	movs	r3, #3
 800f992:	73fb      	strb	r3, [r7, #15]
    break;
 800f994:	bf00      	nop
  }

  return ret;
 800f996:	7bfb      	ldrb	r3, [r7, #15]
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3710      	adds	r7, #16
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	240001f0 	.word	0x240001f0

0800f9a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	88db      	ldrh	r3, [r3, #6]
 800f9b2:	2b01      	cmp	r3, #1
 800f9b4:	d004      	beq.n	800f9c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f9b6:	6839      	ldr	r1, [r7, #0]
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 f8c9 	bl	800fb50 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f9be:	e021      	b.n	800fa04 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	db17      	blt.n	800f9fa <USBD_GetConfig+0x56>
 800f9ca:	2b02      	cmp	r3, #2
 800f9cc:	dd02      	ble.n	800f9d4 <USBD_GetConfig+0x30>
 800f9ce:	2b03      	cmp	r3, #3
 800f9d0:	d00b      	beq.n	800f9ea <USBD_GetConfig+0x46>
 800f9d2:	e012      	b.n	800f9fa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	3308      	adds	r3, #8
 800f9de:	2201      	movs	r2, #1
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f000 f925 	bl	800fc32 <USBD_CtlSendData>
      break;
 800f9e8:	e00c      	b.n	800fa04 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	3304      	adds	r3, #4
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 f91d 	bl	800fc32 <USBD_CtlSendData>
      break;
 800f9f8:	e004      	b.n	800fa04 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f9fa:	6839      	ldr	r1, [r7, #0]
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 f8a7 	bl	800fb50 <USBD_CtlError>
      break;
 800fa02:	bf00      	nop
}
 800fa04:	bf00      	nop
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa1c:	3b01      	subs	r3, #1
 800fa1e:	2b02      	cmp	r3, #2
 800fa20:	d81e      	bhi.n	800fa60 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	88db      	ldrh	r3, [r3, #6]
 800fa26:	2b02      	cmp	r3, #2
 800fa28:	d004      	beq.n	800fa34 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800fa2a:	6839      	ldr	r1, [r7, #0]
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f000 f88f 	bl	800fb50 <USBD_CtlError>
      break;
 800fa32:	e01a      	b.n	800fa6a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2201      	movs	r2, #1
 800fa38:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d005      	beq.n	800fa50 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	68db      	ldr	r3, [r3, #12]
 800fa48:	f043 0202 	orr.w	r2, r3, #2
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	330c      	adds	r3, #12
 800fa54:	2202      	movs	r2, #2
 800fa56:	4619      	mov	r1, r3
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f000 f8ea 	bl	800fc32 <USBD_CtlSendData>
    break;
 800fa5e:	e004      	b.n	800fa6a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800fa60:	6839      	ldr	r1, [r7, #0]
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 f874 	bl	800fb50 <USBD_CtlError>
    break;
 800fa68:	bf00      	nop
  }
}
 800fa6a:	bf00      	nop
 800fa6c:	3708      	adds	r7, #8
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b082      	sub	sp, #8
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
 800fa7a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	885b      	ldrh	r3, [r3, #2]
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	d106      	bne.n	800fa92 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2201      	movs	r2, #1
 800fa88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f000 f90d 	bl	800fcac <USBD_CtlSendStatus>
  }
}
 800fa92:	bf00      	nop
 800fa94:	3708      	adds	r7, #8
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}

0800fa9a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa9a:	b580      	push	{r7, lr}
 800fa9c:	b082      	sub	sp, #8
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
 800faa2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faaa:	3b01      	subs	r3, #1
 800faac:	2b02      	cmp	r3, #2
 800faae:	d80b      	bhi.n	800fac8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	885b      	ldrh	r3, [r3, #2]
 800fab4:	2b01      	cmp	r3, #1
 800fab6:	d10c      	bne.n	800fad2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2200      	movs	r2, #0
 800fabc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f000 f8f3 	bl	800fcac <USBD_CtlSendStatus>
      }
      break;
 800fac6:	e004      	b.n	800fad2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800fac8:	6839      	ldr	r1, [r7, #0]
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f000 f840 	bl	800fb50 <USBD_CtlError>
      break;
 800fad0:	e000      	b.n	800fad4 <USBD_ClrFeature+0x3a>
      break;
 800fad2:	bf00      	nop
  }
}
 800fad4:	bf00      	nop
 800fad6:	3708      	adds	r7, #8
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}

0800fadc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	781a      	ldrb	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	3301      	adds	r3, #1
 800faf6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	781a      	ldrb	r2, [r3, #0]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	3301      	adds	r3, #1
 800fb04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fb06:	68f8      	ldr	r0, [r7, #12]
 800fb08:	f7ff fad4 	bl	800f0b4 <SWAPBYTE>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	461a      	mov	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	3301      	adds	r3, #1
 800fb18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f7ff fac7 	bl	800f0b4 <SWAPBYTE>
 800fb26:	4603      	mov	r3, r0
 800fb28:	461a      	mov	r2, r3
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	3301      	adds	r3, #1
 800fb32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	3301      	adds	r3, #1
 800fb38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fb3a:	68f8      	ldr	r0, [r7, #12]
 800fb3c:	f7ff faba 	bl	800f0b4 <SWAPBYTE>
 800fb40:	4603      	mov	r3, r0
 800fb42:	461a      	mov	r2, r3
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	80da      	strh	r2, [r3, #6]
}
 800fb48:	bf00      	nop
 800fb4a:	3710      	adds	r7, #16
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb5a:	2180      	movs	r1, #128	; 0x80
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f002 fe72 	bl	8012846 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fb62:	2100      	movs	r1, #0
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f002 fe6e 	bl	8012846 <USBD_LL_StallEP>
}
 800fb6a:	bf00      	nop
 800fb6c:	3708      	adds	r7, #8
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b086      	sub	sp, #24
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	60f8      	str	r0, [r7, #12]
 800fb7a:	60b9      	str	r1, [r7, #8]
 800fb7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d036      	beq.n	800fbf6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fb8c:	6938      	ldr	r0, [r7, #16]
 800fb8e:	f000 f836 	bl	800fbfe <USBD_GetLen>
 800fb92:	4603      	mov	r3, r0
 800fb94:	3301      	adds	r3, #1
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	005b      	lsls	r3, r3, #1
 800fb9a:	b29a      	uxth	r2, r3
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fba0:	7dfb      	ldrb	r3, [r7, #23]
 800fba2:	68ba      	ldr	r2, [r7, #8]
 800fba4:	4413      	add	r3, r2
 800fba6:	687a      	ldr	r2, [r7, #4]
 800fba8:	7812      	ldrb	r2, [r2, #0]
 800fbaa:	701a      	strb	r2, [r3, #0]
  idx++;
 800fbac:	7dfb      	ldrb	r3, [r7, #23]
 800fbae:	3301      	adds	r3, #1
 800fbb0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fbb2:	7dfb      	ldrb	r3, [r7, #23]
 800fbb4:	68ba      	ldr	r2, [r7, #8]
 800fbb6:	4413      	add	r3, r2
 800fbb8:	2203      	movs	r2, #3
 800fbba:	701a      	strb	r2, [r3, #0]
  idx++;
 800fbbc:	7dfb      	ldrb	r3, [r7, #23]
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fbc2:	e013      	b.n	800fbec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fbc4:	7dfb      	ldrb	r3, [r7, #23]
 800fbc6:	68ba      	ldr	r2, [r7, #8]
 800fbc8:	4413      	add	r3, r2
 800fbca:	693a      	ldr	r2, [r7, #16]
 800fbcc:	7812      	ldrb	r2, [r2, #0]
 800fbce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	613b      	str	r3, [r7, #16]
    idx++;
 800fbd6:	7dfb      	ldrb	r3, [r7, #23]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fbdc:	7dfb      	ldrb	r3, [r7, #23]
 800fbde:	68ba      	ldr	r2, [r7, #8]
 800fbe0:	4413      	add	r3, r2
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	701a      	strb	r2, [r3, #0]
    idx++;
 800fbe6:	7dfb      	ldrb	r3, [r7, #23]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fbec:	693b      	ldr	r3, [r7, #16]
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d1e7      	bne.n	800fbc4 <USBD_GetString+0x52>
 800fbf4:	e000      	b.n	800fbf8 <USBD_GetString+0x86>
    return;
 800fbf6:	bf00      	nop
  }
}
 800fbf8:	3718      	adds	r7, #24
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fbfe:	b480      	push	{r7}
 800fc00:	b085      	sub	sp, #20
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fc06:	2300      	movs	r3, #0
 800fc08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fc0e:	e005      	b.n	800fc1c <USBD_GetLen+0x1e>
  {
    len++;
 800fc10:	7bfb      	ldrb	r3, [r7, #15]
 800fc12:	3301      	adds	r3, #1
 800fc14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d1f5      	bne.n	800fc10 <USBD_GetLen+0x12>
  }

  return len;
 800fc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3714      	adds	r7, #20
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr

0800fc32 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fc32:	b580      	push	{r7, lr}
 800fc34:	b084      	sub	sp, #16
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	60f8      	str	r0, [r7, #12]
 800fc3a:	60b9      	str	r1, [r7, #8]
 800fc3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2202      	movs	r2, #2
 800fc42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	68ba      	ldr	r2, [r7, #8]
 800fc56:	2100      	movs	r1, #0
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	f002 fe7d 	bl	8012958 <USBD_LL_Transmit>

  return USBD_OK;
 800fc5e:	2300      	movs	r3, #0
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3710      	adds	r7, #16
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b084      	sub	sp, #16
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	68ba      	ldr	r2, [r7, #8]
 800fc78:	2100      	movs	r1, #0
 800fc7a:	68f8      	ldr	r0, [r7, #12]
 800fc7c:	f002 fe6c 	bl	8012958 <USBD_LL_Transmit>

  return USBD_OK;
 800fc80:	2300      	movs	r3, #0
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b084      	sub	sp, #16
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	60f8      	str	r0, [r7, #12]
 800fc92:	60b9      	str	r1, [r7, #8]
 800fc94:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	68ba      	ldr	r2, [r7, #8]
 800fc9a:	2100      	movs	r1, #0
 800fc9c:	68f8      	ldr	r0, [r7, #12]
 800fc9e:	f002 fe7c 	bl	801299a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fca2:	2300      	movs	r3, #0
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3710      	adds	r7, #16
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2204      	movs	r2, #4
 800fcb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f002 fe48 	bl	8012958 <USBD_LL_Transmit>

  return USBD_OK;
 800fcc8:	2300      	movs	r3, #0
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3708      	adds	r7, #8
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}

0800fcd2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fcd2:	b580      	push	{r7, lr}
 800fcd4:	b082      	sub	sp, #8
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2205      	movs	r2, #5
 800fcde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fce2:	2300      	movs	r3, #0
 800fce4:	2200      	movs	r2, #0
 800fce6:	2100      	movs	r1, #0
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f002 fe56 	bl	801299a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fcee:	2300      	movs	r3, #0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	4603      	mov	r3, r0
 800fd00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fd02:	79fb      	ldrb	r3, [r7, #7]
 800fd04:	4a08      	ldr	r2, [pc, #32]	; (800fd28 <disk_status+0x30>)
 800fd06:	009b      	lsls	r3, r3, #2
 800fd08:	4413      	add	r3, r2
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	79fa      	ldrb	r2, [r7, #7]
 800fd10:	4905      	ldr	r1, [pc, #20]	; (800fd28 <disk_status+0x30>)
 800fd12:	440a      	add	r2, r1
 800fd14:	7a12      	ldrb	r2, [r2, #8]
 800fd16:	4610      	mov	r0, r2
 800fd18:	4798      	blx	r3
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3710      	adds	r7, #16
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	2400021c 	.word	0x2400021c

0800fd2c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b084      	sub	sp, #16
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	4603      	mov	r3, r0
 800fd34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fd36:	2300      	movs	r3, #0
 800fd38:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fd3a:	79fb      	ldrb	r3, [r7, #7]
 800fd3c:	4a0d      	ldr	r2, [pc, #52]	; (800fd74 <disk_initialize+0x48>)
 800fd3e:	5cd3      	ldrb	r3, [r2, r3]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d111      	bne.n	800fd68 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800fd44:	79fb      	ldrb	r3, [r7, #7]
 800fd46:	4a0b      	ldr	r2, [pc, #44]	; (800fd74 <disk_initialize+0x48>)
 800fd48:	2101      	movs	r1, #1
 800fd4a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fd4c:	79fb      	ldrb	r3, [r7, #7]
 800fd4e:	4a09      	ldr	r2, [pc, #36]	; (800fd74 <disk_initialize+0x48>)
 800fd50:	009b      	lsls	r3, r3, #2
 800fd52:	4413      	add	r3, r2
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	79fa      	ldrb	r2, [r7, #7]
 800fd5a:	4906      	ldr	r1, [pc, #24]	; (800fd74 <disk_initialize+0x48>)
 800fd5c:	440a      	add	r2, r1
 800fd5e:	7a12      	ldrb	r2, [r2, #8]
 800fd60:	4610      	mov	r0, r2
 800fd62:	4798      	blx	r3
 800fd64:	4603      	mov	r3, r0
 800fd66:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3710      	adds	r7, #16
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	2400021c 	.word	0x2400021c

0800fd78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fd78:	b590      	push	{r4, r7, lr}
 800fd7a:	b087      	sub	sp, #28
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	60b9      	str	r1, [r7, #8]
 800fd80:	607a      	str	r2, [r7, #4]
 800fd82:	603b      	str	r3, [r7, #0]
 800fd84:	4603      	mov	r3, r0
 800fd86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fd88:	7bfb      	ldrb	r3, [r7, #15]
 800fd8a:	4a0a      	ldr	r2, [pc, #40]	; (800fdb4 <disk_read+0x3c>)
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	4413      	add	r3, r2
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	689c      	ldr	r4, [r3, #8]
 800fd94:	7bfb      	ldrb	r3, [r7, #15]
 800fd96:	4a07      	ldr	r2, [pc, #28]	; (800fdb4 <disk_read+0x3c>)
 800fd98:	4413      	add	r3, r2
 800fd9a:	7a18      	ldrb	r0, [r3, #8]
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	68b9      	ldr	r1, [r7, #8]
 800fda2:	47a0      	blx	r4
 800fda4:	4603      	mov	r3, r0
 800fda6:	75fb      	strb	r3, [r7, #23]
  return res;
 800fda8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	371c      	adds	r7, #28
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd90      	pop	{r4, r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	2400021c 	.word	0x2400021c

0800fdb8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fdb8:	b590      	push	{r4, r7, lr}
 800fdba:	b087      	sub	sp, #28
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	60b9      	str	r1, [r7, #8]
 800fdc0:	607a      	str	r2, [r7, #4]
 800fdc2:	603b      	str	r3, [r7, #0]
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fdc8:	7bfb      	ldrb	r3, [r7, #15]
 800fdca:	4a0a      	ldr	r2, [pc, #40]	; (800fdf4 <disk_write+0x3c>)
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	4413      	add	r3, r2
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	68dc      	ldr	r4, [r3, #12]
 800fdd4:	7bfb      	ldrb	r3, [r7, #15]
 800fdd6:	4a07      	ldr	r2, [pc, #28]	; (800fdf4 <disk_write+0x3c>)
 800fdd8:	4413      	add	r3, r2
 800fdda:	7a18      	ldrb	r0, [r3, #8]
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	68b9      	ldr	r1, [r7, #8]
 800fde2:	47a0      	blx	r4
 800fde4:	4603      	mov	r3, r0
 800fde6:	75fb      	strb	r3, [r7, #23]
  return res;
 800fde8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	371c      	adds	r7, #28
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd90      	pop	{r4, r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	2400021c 	.word	0x2400021c

0800fdf8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	4603      	mov	r3, r0
 800fe00:	603a      	str	r2, [r7, #0]
 800fe02:	71fb      	strb	r3, [r7, #7]
 800fe04:	460b      	mov	r3, r1
 800fe06:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fe08:	79fb      	ldrb	r3, [r7, #7]
 800fe0a:	4a09      	ldr	r2, [pc, #36]	; (800fe30 <disk_ioctl+0x38>)
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	4413      	add	r3, r2
 800fe10:	685b      	ldr	r3, [r3, #4]
 800fe12:	691b      	ldr	r3, [r3, #16]
 800fe14:	79fa      	ldrb	r2, [r7, #7]
 800fe16:	4906      	ldr	r1, [pc, #24]	; (800fe30 <disk_ioctl+0x38>)
 800fe18:	440a      	add	r2, r1
 800fe1a:	7a10      	ldrb	r0, [r2, #8]
 800fe1c:	79b9      	ldrb	r1, [r7, #6]
 800fe1e:	683a      	ldr	r2, [r7, #0]
 800fe20:	4798      	blx	r3
 800fe22:	4603      	mov	r3, r0
 800fe24:	73fb      	strb	r3, [r7, #15]
  return res;
 800fe26:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3710      	adds	r7, #16
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	2400021c 	.word	0x2400021c

0800fe34 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fe34:	b480      	push	{r7}
 800fe36:	b085      	sub	sp, #20
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	3301      	adds	r3, #1
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fe44:	89fb      	ldrh	r3, [r7, #14]
 800fe46:	021b      	lsls	r3, r3, #8
 800fe48:	b21a      	sxth	r2, r3
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	b21b      	sxth	r3, r3
 800fe50:	4313      	orrs	r3, r2
 800fe52:	b21b      	sxth	r3, r3
 800fe54:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fe56:	89fb      	ldrh	r3, [r7, #14]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3714      	adds	r7, #20
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fe64:	b480      	push	{r7}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	3303      	adds	r3, #3
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	021b      	lsls	r3, r3, #8
 800fe78:	687a      	ldr	r2, [r7, #4]
 800fe7a:	3202      	adds	r2, #2
 800fe7c:	7812      	ldrb	r2, [r2, #0]
 800fe7e:	4313      	orrs	r3, r2
 800fe80:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	021b      	lsls	r3, r3, #8
 800fe86:	687a      	ldr	r2, [r7, #4]
 800fe88:	3201      	adds	r2, #1
 800fe8a:	7812      	ldrb	r2, [r2, #0]
 800fe8c:	4313      	orrs	r3, r2
 800fe8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	021b      	lsls	r3, r3, #8
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	7812      	ldrb	r2, [r2, #0]
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	60fb      	str	r3, [r7, #12]
	return rv;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3714      	adds	r7, #20
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr

0800feaa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800feaa:	b480      	push	{r7}
 800feac:	b083      	sub	sp, #12
 800feae:	af00      	add	r7, sp, #0
 800feb0:	6078      	str	r0, [r7, #4]
 800feb2:	460b      	mov	r3, r1
 800feb4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	1c5a      	adds	r2, r3, #1
 800feba:	607a      	str	r2, [r7, #4]
 800febc:	887a      	ldrh	r2, [r7, #2]
 800febe:	b2d2      	uxtb	r2, r2
 800fec0:	701a      	strb	r2, [r3, #0]
 800fec2:	887b      	ldrh	r3, [r7, #2]
 800fec4:	0a1b      	lsrs	r3, r3, #8
 800fec6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	1c5a      	adds	r2, r3, #1
 800fecc:	607a      	str	r2, [r7, #4]
 800fece:	887a      	ldrh	r2, [r7, #2]
 800fed0:	b2d2      	uxtb	r2, r2
 800fed2:	701a      	strb	r2, [r3, #0]
}
 800fed4:	bf00      	nop
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fee0:	b480      	push	{r7}
 800fee2:	b083      	sub	sp, #12
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	1c5a      	adds	r2, r3, #1
 800feee:	607a      	str	r2, [r7, #4]
 800fef0:	683a      	ldr	r2, [r7, #0]
 800fef2:	b2d2      	uxtb	r2, r2
 800fef4:	701a      	strb	r2, [r3, #0]
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	0a1b      	lsrs	r3, r3, #8
 800fefa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	1c5a      	adds	r2, r3, #1
 800ff00:	607a      	str	r2, [r7, #4]
 800ff02:	683a      	ldr	r2, [r7, #0]
 800ff04:	b2d2      	uxtb	r2, r2
 800ff06:	701a      	strb	r2, [r3, #0]
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	0a1b      	lsrs	r3, r3, #8
 800ff0c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	1c5a      	adds	r2, r3, #1
 800ff12:	607a      	str	r2, [r7, #4]
 800ff14:	683a      	ldr	r2, [r7, #0]
 800ff16:	b2d2      	uxtb	r2, r2
 800ff18:	701a      	strb	r2, [r3, #0]
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	0a1b      	lsrs	r3, r3, #8
 800ff1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	1c5a      	adds	r2, r3, #1
 800ff24:	607a      	str	r2, [r7, #4]
 800ff26:	683a      	ldr	r2, [r7, #0]
 800ff28:	b2d2      	uxtb	r2, r2
 800ff2a:	701a      	strb	r2, [r3, #0]
}
 800ff2c:	bf00      	nop
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ff38:	b480      	push	{r7}
 800ff3a:	b087      	sub	sp, #28
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d00d      	beq.n	800ff6e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ff52:	693a      	ldr	r2, [r7, #16]
 800ff54:	1c53      	adds	r3, r2, #1
 800ff56:	613b      	str	r3, [r7, #16]
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	1c59      	adds	r1, r3, #1
 800ff5c:	6179      	str	r1, [r7, #20]
 800ff5e:	7812      	ldrb	r2, [r2, #0]
 800ff60:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	3b01      	subs	r3, #1
 800ff66:	607b      	str	r3, [r7, #4]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d1f1      	bne.n	800ff52 <mem_cpy+0x1a>
	}
}
 800ff6e:	bf00      	nop
 800ff70:	371c      	adds	r7, #28
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr

0800ff7a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ff7a:	b480      	push	{r7}
 800ff7c:	b087      	sub	sp, #28
 800ff7e:	af00      	add	r7, sp, #0
 800ff80:	60f8      	str	r0, [r7, #12]
 800ff82:	60b9      	str	r1, [r7, #8]
 800ff84:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	1c5a      	adds	r2, r3, #1
 800ff8e:	617a      	str	r2, [r7, #20]
 800ff90:	68ba      	ldr	r2, [r7, #8]
 800ff92:	b2d2      	uxtb	r2, r2
 800ff94:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	3b01      	subs	r3, #1
 800ff9a:	607b      	str	r3, [r7, #4]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d1f3      	bne.n	800ff8a <mem_set+0x10>
}
 800ffa2:	bf00      	nop
 800ffa4:	371c      	adds	r7, #28
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr

0800ffae <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ffae:	b480      	push	{r7}
 800ffb0:	b089      	sub	sp, #36	; 0x24
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	60f8      	str	r0, [r7, #12]
 800ffb6:	60b9      	str	r1, [r7, #8]
 800ffb8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	61fb      	str	r3, [r7, #28]
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	1c5a      	adds	r2, r3, #1
 800ffca:	61fa      	str	r2, [r7, #28]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	4619      	mov	r1, r3
 800ffd0:	69bb      	ldr	r3, [r7, #24]
 800ffd2:	1c5a      	adds	r2, r3, #1
 800ffd4:	61ba      	str	r2, [r7, #24]
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	1acb      	subs	r3, r1, r3
 800ffda:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	3b01      	subs	r3, #1
 800ffe0:	607b      	str	r3, [r7, #4]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d002      	beq.n	800ffee <mem_cmp+0x40>
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d0eb      	beq.n	800ffc6 <mem_cmp+0x18>

	return r;
 800ffee:	697b      	ldr	r3, [r7, #20]
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3724      	adds	r7, #36	; 0x24
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010006:	e002      	b.n	801000e <chk_chr+0x12>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	3301      	adds	r3, #1
 801000c:	607b      	str	r3, [r7, #4]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d005      	beq.n	8010022 <chk_chr+0x26>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	781b      	ldrb	r3, [r3, #0]
 801001a:	461a      	mov	r2, r3
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	4293      	cmp	r3, r2
 8010020:	d1f2      	bne.n	8010008 <chk_chr+0xc>
	return *str;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	781b      	ldrb	r3, [r3, #0]
}
 8010026:	4618      	mov	r0, r3
 8010028:	370c      	adds	r7, #12
 801002a:	46bd      	mov	sp, r7
 801002c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010030:	4770      	bx	lr
	...

08010034 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010034:	b480      	push	{r7}
 8010036:	b085      	sub	sp, #20
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801003e:	2300      	movs	r3, #0
 8010040:	60bb      	str	r3, [r7, #8]
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	60fb      	str	r3, [r7, #12]
 8010046:	e029      	b.n	801009c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010048:	4a27      	ldr	r2, [pc, #156]	; (80100e8 <chk_lock+0xb4>)
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	011b      	lsls	r3, r3, #4
 801004e:	4413      	add	r3, r2
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d01d      	beq.n	8010092 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010056:	4a24      	ldr	r2, [pc, #144]	; (80100e8 <chk_lock+0xb4>)
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	011b      	lsls	r3, r3, #4
 801005c:	4413      	add	r3, r2
 801005e:	681a      	ldr	r2, [r3, #0]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	429a      	cmp	r2, r3
 8010066:	d116      	bne.n	8010096 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010068:	4a1f      	ldr	r2, [pc, #124]	; (80100e8 <chk_lock+0xb4>)
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	011b      	lsls	r3, r3, #4
 801006e:	4413      	add	r3, r2
 8010070:	3304      	adds	r3, #4
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010078:	429a      	cmp	r2, r3
 801007a:	d10c      	bne.n	8010096 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801007c:	4a1a      	ldr	r2, [pc, #104]	; (80100e8 <chk_lock+0xb4>)
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	011b      	lsls	r3, r3, #4
 8010082:	4413      	add	r3, r2
 8010084:	3308      	adds	r3, #8
 8010086:	681a      	ldr	r2, [r3, #0]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801008c:	429a      	cmp	r2, r3
 801008e:	d102      	bne.n	8010096 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010090:	e007      	b.n	80100a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010092:	2301      	movs	r3, #1
 8010094:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	3301      	adds	r3, #1
 801009a:	60fb      	str	r3, [r7, #12]
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2b01      	cmp	r3, #1
 80100a0:	d9d2      	bls.n	8010048 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2b02      	cmp	r3, #2
 80100a6:	d109      	bne.n	80100bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d102      	bne.n	80100b4 <chk_lock+0x80>
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	2b02      	cmp	r3, #2
 80100b2:	d101      	bne.n	80100b8 <chk_lock+0x84>
 80100b4:	2300      	movs	r3, #0
 80100b6:	e010      	b.n	80100da <chk_lock+0xa6>
 80100b8:	2312      	movs	r3, #18
 80100ba:	e00e      	b.n	80100da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d108      	bne.n	80100d4 <chk_lock+0xa0>
 80100c2:	4a09      	ldr	r2, [pc, #36]	; (80100e8 <chk_lock+0xb4>)
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	011b      	lsls	r3, r3, #4
 80100c8:	4413      	add	r3, r2
 80100ca:	330c      	adds	r3, #12
 80100cc:	881b      	ldrh	r3, [r3, #0]
 80100ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100d2:	d101      	bne.n	80100d8 <chk_lock+0xa4>
 80100d4:	2310      	movs	r3, #16
 80100d6:	e000      	b.n	80100da <chk_lock+0xa6>
 80100d8:	2300      	movs	r3, #0
}
 80100da:	4618      	mov	r0, r3
 80100dc:	3714      	adds	r7, #20
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr
 80100e6:	bf00      	nop
 80100e8:	240001fc 	.word	0x240001fc

080100ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80100f2:	2300      	movs	r3, #0
 80100f4:	607b      	str	r3, [r7, #4]
 80100f6:	e002      	b.n	80100fe <enq_lock+0x12>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	3301      	adds	r3, #1
 80100fc:	607b      	str	r3, [r7, #4]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2b01      	cmp	r3, #1
 8010102:	d806      	bhi.n	8010112 <enq_lock+0x26>
 8010104:	4a09      	ldr	r2, [pc, #36]	; (801012c <enq_lock+0x40>)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	011b      	lsls	r3, r3, #4
 801010a:	4413      	add	r3, r2
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1f2      	bne.n	80100f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2b02      	cmp	r3, #2
 8010116:	bf14      	ite	ne
 8010118:	2301      	movne	r3, #1
 801011a:	2300      	moveq	r3, #0
 801011c:	b2db      	uxtb	r3, r3
}
 801011e:	4618      	mov	r0, r3
 8010120:	370c      	adds	r7, #12
 8010122:	46bd      	mov	sp, r7
 8010124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010128:	4770      	bx	lr
 801012a:	bf00      	nop
 801012c:	240001fc 	.word	0x240001fc

08010130 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010130:	b480      	push	{r7}
 8010132:	b085      	sub	sp, #20
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801013a:	2300      	movs	r3, #0
 801013c:	60fb      	str	r3, [r7, #12]
 801013e:	e01f      	b.n	8010180 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010140:	4a41      	ldr	r2, [pc, #260]	; (8010248 <inc_lock+0x118>)
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	011b      	lsls	r3, r3, #4
 8010146:	4413      	add	r3, r2
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	429a      	cmp	r2, r3
 8010150:	d113      	bne.n	801017a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010152:	4a3d      	ldr	r2, [pc, #244]	; (8010248 <inc_lock+0x118>)
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	011b      	lsls	r3, r3, #4
 8010158:	4413      	add	r3, r2
 801015a:	3304      	adds	r3, #4
 801015c:	681a      	ldr	r2, [r3, #0]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010162:	429a      	cmp	r2, r3
 8010164:	d109      	bne.n	801017a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010166:	4a38      	ldr	r2, [pc, #224]	; (8010248 <inc_lock+0x118>)
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	011b      	lsls	r3, r3, #4
 801016c:	4413      	add	r3, r2
 801016e:	3308      	adds	r3, #8
 8010170:	681a      	ldr	r2, [r3, #0]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010176:	429a      	cmp	r2, r3
 8010178:	d006      	beq.n	8010188 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	3301      	adds	r3, #1
 801017e:	60fb      	str	r3, [r7, #12]
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2b01      	cmp	r3, #1
 8010184:	d9dc      	bls.n	8010140 <inc_lock+0x10>
 8010186:	e000      	b.n	801018a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010188:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	2b02      	cmp	r3, #2
 801018e:	d132      	bne.n	80101f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010190:	2300      	movs	r3, #0
 8010192:	60fb      	str	r3, [r7, #12]
 8010194:	e002      	b.n	801019c <inc_lock+0x6c>
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	3301      	adds	r3, #1
 801019a:	60fb      	str	r3, [r7, #12]
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	2b01      	cmp	r3, #1
 80101a0:	d806      	bhi.n	80101b0 <inc_lock+0x80>
 80101a2:	4a29      	ldr	r2, [pc, #164]	; (8010248 <inc_lock+0x118>)
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	011b      	lsls	r3, r3, #4
 80101a8:	4413      	add	r3, r2
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d1f2      	bne.n	8010196 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	2b02      	cmp	r3, #2
 80101b4:	d101      	bne.n	80101ba <inc_lock+0x8a>
 80101b6:	2300      	movs	r3, #0
 80101b8:	e040      	b.n	801023c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	4922      	ldr	r1, [pc, #136]	; (8010248 <inc_lock+0x118>)
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	011b      	lsls	r3, r3, #4
 80101c4:	440b      	add	r3, r1
 80101c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	689a      	ldr	r2, [r3, #8]
 80101cc:	491e      	ldr	r1, [pc, #120]	; (8010248 <inc_lock+0x118>)
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	011b      	lsls	r3, r3, #4
 80101d2:	440b      	add	r3, r1
 80101d4:	3304      	adds	r3, #4
 80101d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	695a      	ldr	r2, [r3, #20]
 80101dc:	491a      	ldr	r1, [pc, #104]	; (8010248 <inc_lock+0x118>)
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	011b      	lsls	r3, r3, #4
 80101e2:	440b      	add	r3, r1
 80101e4:	3308      	adds	r3, #8
 80101e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80101e8:	4a17      	ldr	r2, [pc, #92]	; (8010248 <inc_lock+0x118>)
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	011b      	lsls	r3, r3, #4
 80101ee:	4413      	add	r3, r2
 80101f0:	330c      	adds	r3, #12
 80101f2:	2200      	movs	r2, #0
 80101f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d009      	beq.n	8010210 <inc_lock+0xe0>
 80101fc:	4a12      	ldr	r2, [pc, #72]	; (8010248 <inc_lock+0x118>)
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	011b      	lsls	r3, r3, #4
 8010202:	4413      	add	r3, r2
 8010204:	330c      	adds	r3, #12
 8010206:	881b      	ldrh	r3, [r3, #0]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d001      	beq.n	8010210 <inc_lock+0xe0>
 801020c:	2300      	movs	r3, #0
 801020e:	e015      	b.n	801023c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d108      	bne.n	8010228 <inc_lock+0xf8>
 8010216:	4a0c      	ldr	r2, [pc, #48]	; (8010248 <inc_lock+0x118>)
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	011b      	lsls	r3, r3, #4
 801021c:	4413      	add	r3, r2
 801021e:	330c      	adds	r3, #12
 8010220:	881b      	ldrh	r3, [r3, #0]
 8010222:	3301      	adds	r3, #1
 8010224:	b29a      	uxth	r2, r3
 8010226:	e001      	b.n	801022c <inc_lock+0xfc>
 8010228:	f44f 7280 	mov.w	r2, #256	; 0x100
 801022c:	4906      	ldr	r1, [pc, #24]	; (8010248 <inc_lock+0x118>)
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	011b      	lsls	r3, r3, #4
 8010232:	440b      	add	r3, r1
 8010234:	330c      	adds	r3, #12
 8010236:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	3301      	adds	r3, #1
}
 801023c:	4618      	mov	r0, r3
 801023e:	3714      	adds	r7, #20
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	240001fc 	.word	0x240001fc

0801024c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801024c:	b480      	push	{r7}
 801024e:	b085      	sub	sp, #20
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	3b01      	subs	r3, #1
 8010258:	607b      	str	r3, [r7, #4]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2b01      	cmp	r3, #1
 801025e:	d825      	bhi.n	80102ac <dec_lock+0x60>
		n = Files[i].ctr;
 8010260:	4a17      	ldr	r2, [pc, #92]	; (80102c0 <dec_lock+0x74>)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	011b      	lsls	r3, r3, #4
 8010266:	4413      	add	r3, r2
 8010268:	330c      	adds	r3, #12
 801026a:	881b      	ldrh	r3, [r3, #0]
 801026c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801026e:	89fb      	ldrh	r3, [r7, #14]
 8010270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010274:	d101      	bne.n	801027a <dec_lock+0x2e>
 8010276:	2300      	movs	r3, #0
 8010278:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801027a:	89fb      	ldrh	r3, [r7, #14]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d002      	beq.n	8010286 <dec_lock+0x3a>
 8010280:	89fb      	ldrh	r3, [r7, #14]
 8010282:	3b01      	subs	r3, #1
 8010284:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010286:	4a0e      	ldr	r2, [pc, #56]	; (80102c0 <dec_lock+0x74>)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	011b      	lsls	r3, r3, #4
 801028c:	4413      	add	r3, r2
 801028e:	330c      	adds	r3, #12
 8010290:	89fa      	ldrh	r2, [r7, #14]
 8010292:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010294:	89fb      	ldrh	r3, [r7, #14]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d105      	bne.n	80102a6 <dec_lock+0x5a>
 801029a:	4a09      	ldr	r2, [pc, #36]	; (80102c0 <dec_lock+0x74>)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	011b      	lsls	r3, r3, #4
 80102a0:	4413      	add	r3, r2
 80102a2:	2200      	movs	r2, #0
 80102a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80102a6:	2300      	movs	r3, #0
 80102a8:	737b      	strb	r3, [r7, #13]
 80102aa:	e001      	b.n	80102b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80102ac:	2302      	movs	r3, #2
 80102ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80102b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	3714      	adds	r7, #20
 80102b6:	46bd      	mov	sp, r7
 80102b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102bc:	4770      	bx	lr
 80102be:	bf00      	nop
 80102c0:	240001fc 	.word	0x240001fc

080102c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b085      	sub	sp, #20
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80102cc:	2300      	movs	r3, #0
 80102ce:	60fb      	str	r3, [r7, #12]
 80102d0:	e010      	b.n	80102f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80102d2:	4a0d      	ldr	r2, [pc, #52]	; (8010308 <clear_lock+0x44>)
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	011b      	lsls	r3, r3, #4
 80102d8:	4413      	add	r3, r2
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	687a      	ldr	r2, [r7, #4]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d105      	bne.n	80102ee <clear_lock+0x2a>
 80102e2:	4a09      	ldr	r2, [pc, #36]	; (8010308 <clear_lock+0x44>)
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	011b      	lsls	r3, r3, #4
 80102e8:	4413      	add	r3, r2
 80102ea:	2200      	movs	r2, #0
 80102ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	3301      	adds	r3, #1
 80102f2:	60fb      	str	r3, [r7, #12]
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d9eb      	bls.n	80102d2 <clear_lock+0xe>
	}
}
 80102fa:	bf00      	nop
 80102fc:	3714      	adds	r7, #20
 80102fe:	46bd      	mov	sp, r7
 8010300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010304:	4770      	bx	lr
 8010306:	bf00      	nop
 8010308:	240001fc 	.word	0x240001fc

0801030c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b086      	sub	sp, #24
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010314:	2300      	movs	r3, #0
 8010316:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	78db      	ldrb	r3, [r3, #3]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d034      	beq.n	801038a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010324:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	7858      	ldrb	r0, [r3, #1]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010330:	2301      	movs	r3, #1
 8010332:	697a      	ldr	r2, [r7, #20]
 8010334:	f7ff fd40 	bl	800fdb8 <disk_write>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d002      	beq.n	8010344 <sync_window+0x38>
			res = FR_DISK_ERR;
 801033e:	2301      	movs	r3, #1
 8010340:	73fb      	strb	r3, [r7, #15]
 8010342:	e022      	b.n	801038a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2200      	movs	r2, #0
 8010348:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6a1b      	ldr	r3, [r3, #32]
 801034e:	697a      	ldr	r2, [r7, #20]
 8010350:	1ad2      	subs	r2, r2, r3
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	699b      	ldr	r3, [r3, #24]
 8010356:	429a      	cmp	r2, r3
 8010358:	d217      	bcs.n	801038a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	789b      	ldrb	r3, [r3, #2]
 801035e:	613b      	str	r3, [r7, #16]
 8010360:	e010      	b.n	8010384 <sync_window+0x78>
					wsect += fs->fsize;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	699b      	ldr	r3, [r3, #24]
 8010366:	697a      	ldr	r2, [r7, #20]
 8010368:	4413      	add	r3, r2
 801036a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	7858      	ldrb	r0, [r3, #1]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010376:	2301      	movs	r3, #1
 8010378:	697a      	ldr	r2, [r7, #20]
 801037a:	f7ff fd1d 	bl	800fdb8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	3b01      	subs	r3, #1
 8010382:	613b      	str	r3, [r7, #16]
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	2b01      	cmp	r3, #1
 8010388:	d8eb      	bhi.n	8010362 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801038a:	7bfb      	ldrb	r3, [r7, #15]
}
 801038c:	4618      	mov	r0, r3
 801038e:	3718      	adds	r7, #24
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b084      	sub	sp, #16
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801039e:	2300      	movs	r3, #0
 80103a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a6:	683a      	ldr	r2, [r7, #0]
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d01b      	beq.n	80103e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f7ff ffad 	bl	801030c <sync_window>
 80103b2:	4603      	mov	r3, r0
 80103b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80103b6:	7bfb      	ldrb	r3, [r7, #15]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d113      	bne.n	80103e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	7858      	ldrb	r0, [r3, #1]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103c6:	2301      	movs	r3, #1
 80103c8:	683a      	ldr	r2, [r7, #0]
 80103ca:	f7ff fcd5 	bl	800fd78 <disk_read>
 80103ce:	4603      	mov	r3, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d004      	beq.n	80103de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80103d4:	f04f 33ff 	mov.w	r3, #4294967295
 80103d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80103da:	2301      	movs	r3, #1
 80103dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	683a      	ldr	r2, [r7, #0]
 80103e2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80103e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3710      	adds	r7, #16
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
	...

080103f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f7ff ff87 	bl	801030c <sync_window>
 80103fe:	4603      	mov	r3, r0
 8010400:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010402:	7bfb      	ldrb	r3, [r7, #15]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d158      	bne.n	80104ba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	2b03      	cmp	r3, #3
 801040e:	d148      	bne.n	80104a2 <sync_fs+0xb2>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	791b      	ldrb	r3, [r3, #4]
 8010414:	2b01      	cmp	r3, #1
 8010416:	d144      	bne.n	80104a2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	3330      	adds	r3, #48	; 0x30
 801041c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010420:	2100      	movs	r1, #0
 8010422:	4618      	mov	r0, r3
 8010424:	f7ff fda9 	bl	800ff7a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	3330      	adds	r3, #48	; 0x30
 801042c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010430:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010434:	4618      	mov	r0, r3
 8010436:	f7ff fd38 	bl	800feaa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	3330      	adds	r3, #48	; 0x30
 801043e:	4921      	ldr	r1, [pc, #132]	; (80104c4 <sync_fs+0xd4>)
 8010440:	4618      	mov	r0, r3
 8010442:	f7ff fd4d 	bl	800fee0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	3330      	adds	r3, #48	; 0x30
 801044a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801044e:	491e      	ldr	r1, [pc, #120]	; (80104c8 <sync_fs+0xd8>)
 8010450:	4618      	mov	r0, r3
 8010452:	f7ff fd45 	bl	800fee0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	3330      	adds	r3, #48	; 0x30
 801045a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	691b      	ldr	r3, [r3, #16]
 8010462:	4619      	mov	r1, r3
 8010464:	4610      	mov	r0, r2
 8010466:	f7ff fd3b 	bl	800fee0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	3330      	adds	r3, #48	; 0x30
 801046e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	68db      	ldr	r3, [r3, #12]
 8010476:	4619      	mov	r1, r3
 8010478:	4610      	mov	r0, r2
 801047a:	f7ff fd31 	bl	800fee0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	69db      	ldr	r3, [r3, #28]
 8010482:	1c5a      	adds	r2, r3, #1
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	7858      	ldrb	r0, [r3, #1]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010496:	2301      	movs	r3, #1
 8010498:	f7ff fc8e 	bl	800fdb8 <disk_write>
			fs->fsi_flag = 0;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2200      	movs	r2, #0
 80104a0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	785b      	ldrb	r3, [r3, #1]
 80104a6:	2200      	movs	r2, #0
 80104a8:	2100      	movs	r1, #0
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff fca4 	bl	800fdf8 <disk_ioctl>
 80104b0:	4603      	mov	r3, r0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d001      	beq.n	80104ba <sync_fs+0xca>
 80104b6:	2301      	movs	r3, #1
 80104b8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80104ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3710      	adds	r7, #16
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}
 80104c4:	41615252 	.word	0x41615252
 80104c8:	61417272 	.word	0x61417272

080104cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80104cc:	b480      	push	{r7}
 80104ce:	b083      	sub	sp, #12
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	3b02      	subs	r3, #2
 80104da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	695b      	ldr	r3, [r3, #20]
 80104e0:	3b02      	subs	r3, #2
 80104e2:	683a      	ldr	r2, [r7, #0]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d301      	bcc.n	80104ec <clust2sect+0x20>
 80104e8:	2300      	movs	r3, #0
 80104ea:	e008      	b.n	80104fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	895b      	ldrh	r3, [r3, #10]
 80104f0:	461a      	mov	r2, r3
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	fb03 f202 	mul.w	r2, r3, r2
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104fc:	4413      	add	r3, r2
}
 80104fe:	4618      	mov	r0, r3
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr

0801050a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801050a:	b580      	push	{r7, lr}
 801050c:	b086      	sub	sp, #24
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
 8010512:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	2b01      	cmp	r3, #1
 801051e:	d904      	bls.n	801052a <get_fat+0x20>
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	695b      	ldr	r3, [r3, #20]
 8010524:	683a      	ldr	r2, [r7, #0]
 8010526:	429a      	cmp	r2, r3
 8010528:	d302      	bcc.n	8010530 <get_fat+0x26>
		val = 1;	/* Internal error */
 801052a:	2301      	movs	r3, #1
 801052c:	617b      	str	r3, [r7, #20]
 801052e:	e08c      	b.n	801064a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010530:	f04f 33ff 	mov.w	r3, #4294967295
 8010534:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	2b02      	cmp	r3, #2
 801053c:	d045      	beq.n	80105ca <get_fat+0xc0>
 801053e:	2b03      	cmp	r3, #3
 8010540:	d05d      	beq.n	80105fe <get_fat+0xf4>
 8010542:	2b01      	cmp	r3, #1
 8010544:	d177      	bne.n	8010636 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	60fb      	str	r3, [r7, #12]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	085b      	lsrs	r3, r3, #1
 801054e:	68fa      	ldr	r2, [r7, #12]
 8010550:	4413      	add	r3, r2
 8010552:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	6a1a      	ldr	r2, [r3, #32]
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	0a5b      	lsrs	r3, r3, #9
 801055c:	4413      	add	r3, r2
 801055e:	4619      	mov	r1, r3
 8010560:	6938      	ldr	r0, [r7, #16]
 8010562:	f7ff ff17 	bl	8010394 <move_window>
 8010566:	4603      	mov	r3, r0
 8010568:	2b00      	cmp	r3, #0
 801056a:	d167      	bne.n	801063c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	1c5a      	adds	r2, r3, #1
 8010570:	60fa      	str	r2, [r7, #12]
 8010572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010576:	693a      	ldr	r2, [r7, #16]
 8010578:	4413      	add	r3, r2
 801057a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801057e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	6a1a      	ldr	r2, [r3, #32]
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	0a5b      	lsrs	r3, r3, #9
 8010588:	4413      	add	r3, r2
 801058a:	4619      	mov	r1, r3
 801058c:	6938      	ldr	r0, [r7, #16]
 801058e:	f7ff ff01 	bl	8010394 <move_window>
 8010592:	4603      	mov	r3, r0
 8010594:	2b00      	cmp	r3, #0
 8010596:	d153      	bne.n	8010640 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801059e:	693a      	ldr	r2, [r7, #16]
 80105a0:	4413      	add	r3, r2
 80105a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105a6:	021b      	lsls	r3, r3, #8
 80105a8:	461a      	mov	r2, r3
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	4313      	orrs	r3, r2
 80105ae:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	f003 0301 	and.w	r3, r3, #1
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d002      	beq.n	80105c0 <get_fat+0xb6>
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	091b      	lsrs	r3, r3, #4
 80105be:	e002      	b.n	80105c6 <get_fat+0xbc>
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80105c6:	617b      	str	r3, [r7, #20]
			break;
 80105c8:	e03f      	b.n	801064a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	6a1a      	ldr	r2, [r3, #32]
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	0a1b      	lsrs	r3, r3, #8
 80105d2:	4413      	add	r3, r2
 80105d4:	4619      	mov	r1, r3
 80105d6:	6938      	ldr	r0, [r7, #16]
 80105d8:	f7ff fedc 	bl	8010394 <move_window>
 80105dc:	4603      	mov	r3, r0
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d130      	bne.n	8010644 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	005b      	lsls	r3, r3, #1
 80105ec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80105f0:	4413      	add	r3, r2
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7ff fc1e 	bl	800fe34 <ld_word>
 80105f8:	4603      	mov	r3, r0
 80105fa:	617b      	str	r3, [r7, #20]
			break;
 80105fc:	e025      	b.n	801064a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	6a1a      	ldr	r2, [r3, #32]
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	09db      	lsrs	r3, r3, #7
 8010606:	4413      	add	r3, r2
 8010608:	4619      	mov	r1, r3
 801060a:	6938      	ldr	r0, [r7, #16]
 801060c:	f7ff fec2 	bl	8010394 <move_window>
 8010610:	4603      	mov	r3, r0
 8010612:	2b00      	cmp	r3, #0
 8010614:	d118      	bne.n	8010648 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	009b      	lsls	r3, r3, #2
 8010620:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010624:	4413      	add	r3, r2
 8010626:	4618      	mov	r0, r3
 8010628:	f7ff fc1c 	bl	800fe64 <ld_dword>
 801062c:	4603      	mov	r3, r0
 801062e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010632:	617b      	str	r3, [r7, #20]
			break;
 8010634:	e009      	b.n	801064a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010636:	2301      	movs	r3, #1
 8010638:	617b      	str	r3, [r7, #20]
 801063a:	e006      	b.n	801064a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801063c:	bf00      	nop
 801063e:	e004      	b.n	801064a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010640:	bf00      	nop
 8010642:	e002      	b.n	801064a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010644:	bf00      	nop
 8010646:	e000      	b.n	801064a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010648:	bf00      	nop
		}
	}

	return val;
 801064a:	697b      	ldr	r3, [r7, #20]
}
 801064c:	4618      	mov	r0, r3
 801064e:	3718      	adds	r7, #24
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010654:	b590      	push	{r4, r7, lr}
 8010656:	b089      	sub	sp, #36	; 0x24
 8010658:	af00      	add	r7, sp, #0
 801065a:	60f8      	str	r0, [r7, #12]
 801065c:	60b9      	str	r1, [r7, #8]
 801065e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010660:	2302      	movs	r3, #2
 8010662:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	2b01      	cmp	r3, #1
 8010668:	f240 80d6 	bls.w	8010818 <put_fat+0x1c4>
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	695b      	ldr	r3, [r3, #20]
 8010670:	68ba      	ldr	r2, [r7, #8]
 8010672:	429a      	cmp	r2, r3
 8010674:	f080 80d0 	bcs.w	8010818 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	2b02      	cmp	r3, #2
 801067e:	d073      	beq.n	8010768 <put_fat+0x114>
 8010680:	2b03      	cmp	r3, #3
 8010682:	f000 8091 	beq.w	80107a8 <put_fat+0x154>
 8010686:	2b01      	cmp	r3, #1
 8010688:	f040 80c6 	bne.w	8010818 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	61bb      	str	r3, [r7, #24]
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	085b      	lsrs	r3, r3, #1
 8010694:	69ba      	ldr	r2, [r7, #24]
 8010696:	4413      	add	r3, r2
 8010698:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	6a1a      	ldr	r2, [r3, #32]
 801069e:	69bb      	ldr	r3, [r7, #24]
 80106a0:	0a5b      	lsrs	r3, r3, #9
 80106a2:	4413      	add	r3, r2
 80106a4:	4619      	mov	r1, r3
 80106a6:	68f8      	ldr	r0, [r7, #12]
 80106a8:	f7ff fe74 	bl	8010394 <move_window>
 80106ac:	4603      	mov	r3, r0
 80106ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80106b0:	7ffb      	ldrb	r3, [r7, #31]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	f040 80a9 	bne.w	801080a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80106be:	69bb      	ldr	r3, [r7, #24]
 80106c0:	1c59      	adds	r1, r3, #1
 80106c2:	61b9      	str	r1, [r7, #24]
 80106c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106c8:	4413      	add	r3, r2
 80106ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	f003 0301 	and.w	r3, r3, #1
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d00d      	beq.n	80106f2 <put_fat+0x9e>
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	b25b      	sxtb	r3, r3
 80106dc:	f003 030f 	and.w	r3, r3, #15
 80106e0:	b25a      	sxtb	r2, r3
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	b2db      	uxtb	r3, r3
 80106e6:	011b      	lsls	r3, r3, #4
 80106e8:	b25b      	sxtb	r3, r3
 80106ea:	4313      	orrs	r3, r2
 80106ec:	b25b      	sxtb	r3, r3
 80106ee:	b2db      	uxtb	r3, r3
 80106f0:	e001      	b.n	80106f6 <put_fat+0xa2>
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	697a      	ldr	r2, [r7, #20]
 80106f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	2201      	movs	r2, #1
 80106fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	6a1a      	ldr	r2, [r3, #32]
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	0a5b      	lsrs	r3, r3, #9
 8010708:	4413      	add	r3, r2
 801070a:	4619      	mov	r1, r3
 801070c:	68f8      	ldr	r0, [r7, #12]
 801070e:	f7ff fe41 	bl	8010394 <move_window>
 8010712:	4603      	mov	r3, r0
 8010714:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010716:	7ffb      	ldrb	r3, [r7, #31]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d178      	bne.n	801080e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010722:	69bb      	ldr	r3, [r7, #24]
 8010724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010728:	4413      	add	r3, r2
 801072a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	f003 0301 	and.w	r3, r3, #1
 8010732:	2b00      	cmp	r3, #0
 8010734:	d003      	beq.n	801073e <put_fat+0xea>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	091b      	lsrs	r3, r3, #4
 801073a:	b2db      	uxtb	r3, r3
 801073c:	e00e      	b.n	801075c <put_fat+0x108>
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	781b      	ldrb	r3, [r3, #0]
 8010742:	b25b      	sxtb	r3, r3
 8010744:	f023 030f 	bic.w	r3, r3, #15
 8010748:	b25a      	sxtb	r2, r3
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	0a1b      	lsrs	r3, r3, #8
 801074e:	b25b      	sxtb	r3, r3
 8010750:	f003 030f 	and.w	r3, r3, #15
 8010754:	b25b      	sxtb	r3, r3
 8010756:	4313      	orrs	r3, r2
 8010758:	b25b      	sxtb	r3, r3
 801075a:	b2db      	uxtb	r3, r3
 801075c:	697a      	ldr	r2, [r7, #20]
 801075e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	2201      	movs	r2, #1
 8010764:	70da      	strb	r2, [r3, #3]
			break;
 8010766:	e057      	b.n	8010818 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	6a1a      	ldr	r2, [r3, #32]
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	0a1b      	lsrs	r3, r3, #8
 8010770:	4413      	add	r3, r2
 8010772:	4619      	mov	r1, r3
 8010774:	68f8      	ldr	r0, [r7, #12]
 8010776:	f7ff fe0d 	bl	8010394 <move_window>
 801077a:	4603      	mov	r3, r0
 801077c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801077e:	7ffb      	ldrb	r3, [r7, #31]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d146      	bne.n	8010812 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	005b      	lsls	r3, r3, #1
 801078e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010792:	4413      	add	r3, r2
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	b292      	uxth	r2, r2
 8010798:	4611      	mov	r1, r2
 801079a:	4618      	mov	r0, r3
 801079c:	f7ff fb85 	bl	800feaa <st_word>
			fs->wflag = 1;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2201      	movs	r2, #1
 80107a4:	70da      	strb	r2, [r3, #3]
			break;
 80107a6:	e037      	b.n	8010818 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	6a1a      	ldr	r2, [r3, #32]
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	09db      	lsrs	r3, r3, #7
 80107b0:	4413      	add	r3, r2
 80107b2:	4619      	mov	r1, r3
 80107b4:	68f8      	ldr	r0, [r7, #12]
 80107b6:	f7ff fded 	bl	8010394 <move_window>
 80107ba:	4603      	mov	r3, r0
 80107bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80107be:	7ffb      	ldrb	r3, [r7, #31]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d128      	bne.n	8010816 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	009b      	lsls	r3, r3, #2
 80107d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80107d8:	4413      	add	r3, r2
 80107da:	4618      	mov	r0, r3
 80107dc:	f7ff fb42 	bl	800fe64 <ld_dword>
 80107e0:	4603      	mov	r3, r0
 80107e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80107e6:	4323      	orrs	r3, r4
 80107e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	009b      	lsls	r3, r3, #2
 80107f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80107f8:	4413      	add	r3, r2
 80107fa:	6879      	ldr	r1, [r7, #4]
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7ff fb6f 	bl	800fee0 <st_dword>
			fs->wflag = 1;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2201      	movs	r2, #1
 8010806:	70da      	strb	r2, [r3, #3]
			break;
 8010808:	e006      	b.n	8010818 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801080a:	bf00      	nop
 801080c:	e004      	b.n	8010818 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801080e:	bf00      	nop
 8010810:	e002      	b.n	8010818 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010812:	bf00      	nop
 8010814:	e000      	b.n	8010818 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010816:	bf00      	nop
		}
	}
	return res;
 8010818:	7ffb      	ldrb	r3, [r7, #31]
}
 801081a:	4618      	mov	r0, r3
 801081c:	3724      	adds	r7, #36	; 0x24
 801081e:	46bd      	mov	sp, r7
 8010820:	bd90      	pop	{r4, r7, pc}

08010822 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010822:	b580      	push	{r7, lr}
 8010824:	b088      	sub	sp, #32
 8010826:	af00      	add	r7, sp, #0
 8010828:	60f8      	str	r0, [r7, #12]
 801082a:	60b9      	str	r1, [r7, #8]
 801082c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801082e:	2300      	movs	r3, #0
 8010830:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	2b01      	cmp	r3, #1
 801083c:	d904      	bls.n	8010848 <remove_chain+0x26>
 801083e:	69bb      	ldr	r3, [r7, #24]
 8010840:	695b      	ldr	r3, [r3, #20]
 8010842:	68ba      	ldr	r2, [r7, #8]
 8010844:	429a      	cmp	r2, r3
 8010846:	d301      	bcc.n	801084c <remove_chain+0x2a>
 8010848:	2302      	movs	r3, #2
 801084a:	e04b      	b.n	80108e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d00c      	beq.n	801086c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010852:	f04f 32ff 	mov.w	r2, #4294967295
 8010856:	6879      	ldr	r1, [r7, #4]
 8010858:	69b8      	ldr	r0, [r7, #24]
 801085a:	f7ff fefb 	bl	8010654 <put_fat>
 801085e:	4603      	mov	r3, r0
 8010860:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010862:	7ffb      	ldrb	r3, [r7, #31]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d001      	beq.n	801086c <remove_chain+0x4a>
 8010868:	7ffb      	ldrb	r3, [r7, #31]
 801086a:	e03b      	b.n	80108e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801086c:	68b9      	ldr	r1, [r7, #8]
 801086e:	68f8      	ldr	r0, [r7, #12]
 8010870:	f7ff fe4b 	bl	801050a <get_fat>
 8010874:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d031      	beq.n	80108e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	2b01      	cmp	r3, #1
 8010880:	d101      	bne.n	8010886 <remove_chain+0x64>
 8010882:	2302      	movs	r3, #2
 8010884:	e02e      	b.n	80108e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	f1b3 3fff 	cmp.w	r3, #4294967295
 801088c:	d101      	bne.n	8010892 <remove_chain+0x70>
 801088e:	2301      	movs	r3, #1
 8010890:	e028      	b.n	80108e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010892:	2200      	movs	r2, #0
 8010894:	68b9      	ldr	r1, [r7, #8]
 8010896:	69b8      	ldr	r0, [r7, #24]
 8010898:	f7ff fedc 	bl	8010654 <put_fat>
 801089c:	4603      	mov	r3, r0
 801089e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80108a0:	7ffb      	ldrb	r3, [r7, #31]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d001      	beq.n	80108aa <remove_chain+0x88>
 80108a6:	7ffb      	ldrb	r3, [r7, #31]
 80108a8:	e01c      	b.n	80108e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80108aa:	69bb      	ldr	r3, [r7, #24]
 80108ac:	691a      	ldr	r2, [r3, #16]
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	695b      	ldr	r3, [r3, #20]
 80108b2:	3b02      	subs	r3, #2
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d20b      	bcs.n	80108d0 <remove_chain+0xae>
			fs->free_clst++;
 80108b8:	69bb      	ldr	r3, [r7, #24]
 80108ba:	691b      	ldr	r3, [r3, #16]
 80108bc:	1c5a      	adds	r2, r3, #1
 80108be:	69bb      	ldr	r3, [r7, #24]
 80108c0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	791b      	ldrb	r3, [r3, #4]
 80108c6:	f043 0301 	orr.w	r3, r3, #1
 80108ca:	b2da      	uxtb	r2, r3
 80108cc:	69bb      	ldr	r3, [r7, #24]
 80108ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80108d4:	69bb      	ldr	r3, [r7, #24]
 80108d6:	695b      	ldr	r3, [r3, #20]
 80108d8:	68ba      	ldr	r2, [r7, #8]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d3c6      	bcc.n	801086c <remove_chain+0x4a>
 80108de:	e000      	b.n	80108e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80108e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80108e2:	2300      	movs	r3, #0
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	3720      	adds	r7, #32
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b088      	sub	sp, #32
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d10d      	bne.n	801091e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	68db      	ldr	r3, [r3, #12]
 8010906:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010908:	69bb      	ldr	r3, [r7, #24]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d004      	beq.n	8010918 <create_chain+0x2c>
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	695b      	ldr	r3, [r3, #20]
 8010912:	69ba      	ldr	r2, [r7, #24]
 8010914:	429a      	cmp	r2, r3
 8010916:	d31b      	bcc.n	8010950 <create_chain+0x64>
 8010918:	2301      	movs	r3, #1
 801091a:	61bb      	str	r3, [r7, #24]
 801091c:	e018      	b.n	8010950 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801091e:	6839      	ldr	r1, [r7, #0]
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f7ff fdf2 	bl	801050a <get_fat>
 8010926:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	2b01      	cmp	r3, #1
 801092c:	d801      	bhi.n	8010932 <create_chain+0x46>
 801092e:	2301      	movs	r3, #1
 8010930:	e070      	b.n	8010a14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010938:	d101      	bne.n	801093e <create_chain+0x52>
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	e06a      	b.n	8010a14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	695b      	ldr	r3, [r3, #20]
 8010942:	68fa      	ldr	r2, [r7, #12]
 8010944:	429a      	cmp	r2, r3
 8010946:	d201      	bcs.n	801094c <create_chain+0x60>
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	e063      	b.n	8010a14 <create_chain+0x128>
		scl = clst;
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010950:	69bb      	ldr	r3, [r7, #24]
 8010952:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010954:	69fb      	ldr	r3, [r7, #28]
 8010956:	3301      	adds	r3, #1
 8010958:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	695b      	ldr	r3, [r3, #20]
 801095e:	69fa      	ldr	r2, [r7, #28]
 8010960:	429a      	cmp	r2, r3
 8010962:	d307      	bcc.n	8010974 <create_chain+0x88>
				ncl = 2;
 8010964:	2302      	movs	r3, #2
 8010966:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010968:	69fa      	ldr	r2, [r7, #28]
 801096a:	69bb      	ldr	r3, [r7, #24]
 801096c:	429a      	cmp	r2, r3
 801096e:	d901      	bls.n	8010974 <create_chain+0x88>
 8010970:	2300      	movs	r3, #0
 8010972:	e04f      	b.n	8010a14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010974:	69f9      	ldr	r1, [r7, #28]
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f7ff fdc7 	bl	801050a <get_fat>
 801097c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d00e      	beq.n	80109a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	2b01      	cmp	r3, #1
 8010988:	d003      	beq.n	8010992 <create_chain+0xa6>
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010990:	d101      	bne.n	8010996 <create_chain+0xaa>
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	e03e      	b.n	8010a14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010996:	69fa      	ldr	r2, [r7, #28]
 8010998:	69bb      	ldr	r3, [r7, #24]
 801099a:	429a      	cmp	r2, r3
 801099c:	d1da      	bne.n	8010954 <create_chain+0x68>
 801099e:	2300      	movs	r3, #0
 80109a0:	e038      	b.n	8010a14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80109a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80109a4:	f04f 32ff 	mov.w	r2, #4294967295
 80109a8:	69f9      	ldr	r1, [r7, #28]
 80109aa:	6938      	ldr	r0, [r7, #16]
 80109ac:	f7ff fe52 	bl	8010654 <put_fat>
 80109b0:	4603      	mov	r3, r0
 80109b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80109b4:	7dfb      	ldrb	r3, [r7, #23]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d109      	bne.n	80109ce <create_chain+0xe2>
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d006      	beq.n	80109ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80109c0:	69fa      	ldr	r2, [r7, #28]
 80109c2:	6839      	ldr	r1, [r7, #0]
 80109c4:	6938      	ldr	r0, [r7, #16]
 80109c6:	f7ff fe45 	bl	8010654 <put_fat>
 80109ca:	4603      	mov	r3, r0
 80109cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80109ce:	7dfb      	ldrb	r3, [r7, #23]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d116      	bne.n	8010a02 <create_chain+0x116>
		fs->last_clst = ncl;
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	69fa      	ldr	r2, [r7, #28]
 80109d8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	691a      	ldr	r2, [r3, #16]
 80109de:	693b      	ldr	r3, [r7, #16]
 80109e0:	695b      	ldr	r3, [r3, #20]
 80109e2:	3b02      	subs	r3, #2
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d804      	bhi.n	80109f2 <create_chain+0x106>
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	691b      	ldr	r3, [r3, #16]
 80109ec:	1e5a      	subs	r2, r3, #1
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80109f2:	693b      	ldr	r3, [r7, #16]
 80109f4:	791b      	ldrb	r3, [r3, #4]
 80109f6:	f043 0301 	orr.w	r3, r3, #1
 80109fa:	b2da      	uxtb	r2, r3
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	711a      	strb	r2, [r3, #4]
 8010a00:	e007      	b.n	8010a12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010a02:	7dfb      	ldrb	r3, [r7, #23]
 8010a04:	2b01      	cmp	r3, #1
 8010a06:	d102      	bne.n	8010a0e <create_chain+0x122>
 8010a08:	f04f 33ff 	mov.w	r3, #4294967295
 8010a0c:	e000      	b.n	8010a10 <create_chain+0x124>
 8010a0e:	2301      	movs	r3, #1
 8010a10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010a12:	69fb      	ldr	r3, [r7, #28]
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3720      	adds	r7, #32
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b087      	sub	sp, #28
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a30:	3304      	adds	r3, #4
 8010a32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	0a5b      	lsrs	r3, r3, #9
 8010a38:	68fa      	ldr	r2, [r7, #12]
 8010a3a:	8952      	ldrh	r2, [r2, #10]
 8010a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	1d1a      	adds	r2, r3, #4
 8010a46:	613a      	str	r2, [r7, #16]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d101      	bne.n	8010a56 <clmt_clust+0x3a>
 8010a52:	2300      	movs	r3, #0
 8010a54:	e010      	b.n	8010a78 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010a56:	697a      	ldr	r2, [r7, #20]
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d307      	bcc.n	8010a6e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010a5e:	697a      	ldr	r2, [r7, #20]
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	1ad3      	subs	r3, r2, r3
 8010a64:	617b      	str	r3, [r7, #20]
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	3304      	adds	r3, #4
 8010a6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010a6c:	e7e9      	b.n	8010a42 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010a6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	681a      	ldr	r2, [r3, #0]
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	4413      	add	r3, r2
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	371c      	adds	r7, #28
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b086      	sub	sp, #24
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010a9a:	d204      	bcs.n	8010aa6 <dir_sdi+0x22>
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	f003 031f 	and.w	r3, r3, #31
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d001      	beq.n	8010aaa <dir_sdi+0x26>
		return FR_INT_ERR;
 8010aa6:	2302      	movs	r3, #2
 8010aa8:	e063      	b.n	8010b72 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	683a      	ldr	r2, [r7, #0]
 8010aae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	689b      	ldr	r3, [r3, #8]
 8010ab4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d106      	bne.n	8010aca <dir_sdi+0x46>
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	2b02      	cmp	r3, #2
 8010ac2:	d902      	bls.n	8010aca <dir_sdi+0x46>
		clst = fs->dirbase;
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ac8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d10c      	bne.n	8010aea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	095b      	lsrs	r3, r3, #5
 8010ad4:	693a      	ldr	r2, [r7, #16]
 8010ad6:	8912      	ldrh	r2, [r2, #8]
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	d301      	bcc.n	8010ae0 <dir_sdi+0x5c>
 8010adc:	2302      	movs	r3, #2
 8010ade:	e048      	b.n	8010b72 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	61da      	str	r2, [r3, #28]
 8010ae8:	e029      	b.n	8010b3e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	895b      	ldrh	r3, [r3, #10]
 8010aee:	025b      	lsls	r3, r3, #9
 8010af0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010af2:	e019      	b.n	8010b28 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6979      	ldr	r1, [r7, #20]
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7ff fd06 	bl	801050a <get_fat>
 8010afe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b06:	d101      	bne.n	8010b0c <dir_sdi+0x88>
 8010b08:	2301      	movs	r3, #1
 8010b0a:	e032      	b.n	8010b72 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	2b01      	cmp	r3, #1
 8010b10:	d904      	bls.n	8010b1c <dir_sdi+0x98>
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	695b      	ldr	r3, [r3, #20]
 8010b16:	697a      	ldr	r2, [r7, #20]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d301      	bcc.n	8010b20 <dir_sdi+0x9c>
 8010b1c:	2302      	movs	r3, #2
 8010b1e:	e028      	b.n	8010b72 <dir_sdi+0xee>
			ofs -= csz;
 8010b20:	683a      	ldr	r2, [r7, #0]
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	1ad3      	subs	r3, r2, r3
 8010b26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010b28:	683a      	ldr	r2, [r7, #0]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d2e1      	bcs.n	8010af4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010b30:	6979      	ldr	r1, [r7, #20]
 8010b32:	6938      	ldr	r0, [r7, #16]
 8010b34:	f7ff fcca 	bl	80104cc <clust2sect>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	697a      	ldr	r2, [r7, #20]
 8010b42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	69db      	ldr	r3, [r3, #28]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d101      	bne.n	8010b50 <dir_sdi+0xcc>
 8010b4c:	2302      	movs	r3, #2
 8010b4e:	e010      	b.n	8010b72 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	69da      	ldr	r2, [r3, #28]
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	0a5b      	lsrs	r3, r3, #9
 8010b58:	441a      	add	r2, r3
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010b5e:	693b      	ldr	r3, [r7, #16]
 8010b60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b6a:	441a      	add	r2, r3
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010b70:	2300      	movs	r3, #0
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3718      	adds	r7, #24
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b086      	sub	sp, #24
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
 8010b82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	695b      	ldr	r3, [r3, #20]
 8010b8e:	3320      	adds	r3, #32
 8010b90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	69db      	ldr	r3, [r3, #28]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d003      	beq.n	8010ba2 <dir_next+0x28>
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010ba0:	d301      	bcc.n	8010ba6 <dir_next+0x2c>
 8010ba2:	2304      	movs	r3, #4
 8010ba4:	e0aa      	b.n	8010cfc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	f040 8098 	bne.w	8010ce2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	69db      	ldr	r3, [r3, #28]
 8010bb6:	1c5a      	adds	r2, r3, #1
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	699b      	ldr	r3, [r3, #24]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d10b      	bne.n	8010bdc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	095b      	lsrs	r3, r3, #5
 8010bc8:	68fa      	ldr	r2, [r7, #12]
 8010bca:	8912      	ldrh	r2, [r2, #8]
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	f0c0 8088 	bcc.w	8010ce2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	61da      	str	r2, [r3, #28]
 8010bd8:	2304      	movs	r3, #4
 8010bda:	e08f      	b.n	8010cfc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	0a5b      	lsrs	r3, r3, #9
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	8952      	ldrh	r2, [r2, #10]
 8010be4:	3a01      	subs	r2, #1
 8010be6:	4013      	ands	r3, r2
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d17a      	bne.n	8010ce2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010bec:	687a      	ldr	r2, [r7, #4]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	699b      	ldr	r3, [r3, #24]
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	4610      	mov	r0, r2
 8010bf6:	f7ff fc88 	bl	801050a <get_fat>
 8010bfa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	2b01      	cmp	r3, #1
 8010c00:	d801      	bhi.n	8010c06 <dir_next+0x8c>
 8010c02:	2302      	movs	r3, #2
 8010c04:	e07a      	b.n	8010cfc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c0c:	d101      	bne.n	8010c12 <dir_next+0x98>
 8010c0e:	2301      	movs	r3, #1
 8010c10:	e074      	b.n	8010cfc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	695b      	ldr	r3, [r3, #20]
 8010c16:	697a      	ldr	r2, [r7, #20]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d358      	bcc.n	8010cce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d104      	bne.n	8010c2c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2200      	movs	r2, #0
 8010c26:	61da      	str	r2, [r3, #28]
 8010c28:	2304      	movs	r3, #4
 8010c2a:	e067      	b.n	8010cfc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010c2c:	687a      	ldr	r2, [r7, #4]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	699b      	ldr	r3, [r3, #24]
 8010c32:	4619      	mov	r1, r3
 8010c34:	4610      	mov	r0, r2
 8010c36:	f7ff fe59 	bl	80108ec <create_chain>
 8010c3a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d101      	bne.n	8010c46 <dir_next+0xcc>
 8010c42:	2307      	movs	r3, #7
 8010c44:	e05a      	b.n	8010cfc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	d101      	bne.n	8010c50 <dir_next+0xd6>
 8010c4c:	2302      	movs	r3, #2
 8010c4e:	e055      	b.n	8010cfc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c56:	d101      	bne.n	8010c5c <dir_next+0xe2>
 8010c58:	2301      	movs	r3, #1
 8010c5a:	e04f      	b.n	8010cfc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f7ff fb55 	bl	801030c <sync_window>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d001      	beq.n	8010c6c <dir_next+0xf2>
 8010c68:	2301      	movs	r3, #1
 8010c6a:	e047      	b.n	8010cfc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	3330      	adds	r3, #48	; 0x30
 8010c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c74:	2100      	movs	r1, #0
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7ff f97f 	bl	800ff7a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	613b      	str	r3, [r7, #16]
 8010c80:	6979      	ldr	r1, [r7, #20]
 8010c82:	68f8      	ldr	r0, [r7, #12]
 8010c84:	f7ff fc22 	bl	80104cc <clust2sect>
 8010c88:	4602      	mov	r2, r0
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8010c8e:	e012      	b.n	8010cb6 <dir_next+0x13c>
						fs->wflag = 1;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	2201      	movs	r2, #1
 8010c94:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010c96:	68f8      	ldr	r0, [r7, #12]
 8010c98:	f7ff fb38 	bl	801030c <sync_window>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d001      	beq.n	8010ca6 <dir_next+0x12c>
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	e02a      	b.n	8010cfc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	613b      	str	r3, [r7, #16]
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cb0:	1c5a      	adds	r2, r3, #1
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	895b      	ldrh	r3, [r3, #10]
 8010cba:	461a      	mov	r2, r3
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d3e6      	bcc.n	8010c90 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	1ad2      	subs	r2, r2, r3
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	697a      	ldr	r2, [r7, #20]
 8010cd2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010cd4:	6979      	ldr	r1, [r7, #20]
 8010cd6:	68f8      	ldr	r0, [r7, #12]
 8010cd8:	f7ff fbf8 	bl	80104cc <clust2sect>
 8010cdc:	4602      	mov	r2, r0
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	68ba      	ldr	r2, [r7, #8]
 8010ce6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cf4:	441a      	add	r2, r3
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010cfa:	2300      	movs	r3, #0
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3718      	adds	r7, #24
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b086      	sub	sp, #24
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010d14:	2100      	movs	r1, #0
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f7ff feb4 	bl	8010a84 <dir_sdi>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010d20:	7dfb      	ldrb	r3, [r7, #23]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d12b      	bne.n	8010d7e <dir_alloc+0x7a>
		n = 0;
 8010d26:	2300      	movs	r3, #0
 8010d28:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	69db      	ldr	r3, [r3, #28]
 8010d2e:	4619      	mov	r1, r3
 8010d30:	68f8      	ldr	r0, [r7, #12]
 8010d32:	f7ff fb2f 	bl	8010394 <move_window>
 8010d36:	4603      	mov	r3, r0
 8010d38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010d3a:	7dfb      	ldrb	r3, [r7, #23]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d11d      	bne.n	8010d7c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6a1b      	ldr	r3, [r3, #32]
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	2be5      	cmp	r3, #229	; 0xe5
 8010d48:	d004      	beq.n	8010d54 <dir_alloc+0x50>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6a1b      	ldr	r3, [r3, #32]
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d107      	bne.n	8010d64 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	3301      	adds	r3, #1
 8010d58:	613b      	str	r3, [r7, #16]
 8010d5a:	693a      	ldr	r2, [r7, #16]
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d102      	bne.n	8010d68 <dir_alloc+0x64>
 8010d62:	e00c      	b.n	8010d7e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010d64:	2300      	movs	r3, #0
 8010d66:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010d68:	2101      	movs	r1, #1
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f7ff ff05 	bl	8010b7a <dir_next>
 8010d70:	4603      	mov	r3, r0
 8010d72:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010d74:	7dfb      	ldrb	r3, [r7, #23]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d0d7      	beq.n	8010d2a <dir_alloc+0x26>
 8010d7a:	e000      	b.n	8010d7e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010d7c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010d7e:	7dfb      	ldrb	r3, [r7, #23]
 8010d80:	2b04      	cmp	r3, #4
 8010d82:	d101      	bne.n	8010d88 <dir_alloc+0x84>
 8010d84:	2307      	movs	r3, #7
 8010d86:	75fb      	strb	r3, [r7, #23]
	return res;
 8010d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	3718      	adds	r7, #24
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}

08010d92 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010d92:	b580      	push	{r7, lr}
 8010d94:	b084      	sub	sp, #16
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
 8010d9a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	331a      	adds	r3, #26
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7ff f847 	bl	800fe34 <ld_word>
 8010da6:	4603      	mov	r3, r0
 8010da8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	2b03      	cmp	r3, #3
 8010db0:	d109      	bne.n	8010dc6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	3314      	adds	r3, #20
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7ff f83c 	bl	800fe34 <ld_word>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	041b      	lsls	r3, r3, #16
 8010dc0:	68fa      	ldr	r2, [r7, #12]
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	60b9      	str	r1, [r7, #8]
 8010dda:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	331a      	adds	r3, #26
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	b292      	uxth	r2, r2
 8010de4:	4611      	mov	r1, r2
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7ff f85f 	bl	800feaa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	781b      	ldrb	r3, [r3, #0]
 8010df0:	2b03      	cmp	r3, #3
 8010df2:	d109      	bne.n	8010e08 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	f103 0214 	add.w	r2, r3, #20
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	0c1b      	lsrs	r3, r3, #16
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	4619      	mov	r1, r3
 8010e02:	4610      	mov	r0, r2
 8010e04:	f7ff f851 	bl	800feaa <st_word>
	}
}
 8010e08:	bf00      	nop
 8010e0a:	3710      	adds	r7, #16
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b086      	sub	sp, #24
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010e1e:	2100      	movs	r1, #0
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f7ff fe2f 	bl	8010a84 <dir_sdi>
 8010e26:	4603      	mov	r3, r0
 8010e28:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010e2a:	7dfb      	ldrb	r3, [r7, #23]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d001      	beq.n	8010e34 <dir_find+0x24>
 8010e30:	7dfb      	ldrb	r3, [r7, #23]
 8010e32:	e03e      	b.n	8010eb2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	69db      	ldr	r3, [r3, #28]
 8010e38:	4619      	mov	r1, r3
 8010e3a:	6938      	ldr	r0, [r7, #16]
 8010e3c:	f7ff faaa 	bl	8010394 <move_window>
 8010e40:	4603      	mov	r3, r0
 8010e42:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010e44:	7dfb      	ldrb	r3, [r7, #23]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d12f      	bne.n	8010eaa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6a1b      	ldr	r3, [r3, #32]
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010e52:	7bfb      	ldrb	r3, [r7, #15]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d102      	bne.n	8010e5e <dir_find+0x4e>
 8010e58:	2304      	movs	r3, #4
 8010e5a:	75fb      	strb	r3, [r7, #23]
 8010e5c:	e028      	b.n	8010eb0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6a1b      	ldr	r3, [r3, #32]
 8010e62:	330b      	adds	r3, #11
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e6a:	b2da      	uxtb	r2, r3
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6a1b      	ldr	r3, [r3, #32]
 8010e74:	330b      	adds	r3, #11
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	f003 0308 	and.w	r3, r3, #8
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d10a      	bne.n	8010e96 <dir_find+0x86>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	6a18      	ldr	r0, [r3, #32]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	3324      	adds	r3, #36	; 0x24
 8010e88:	220b      	movs	r2, #11
 8010e8a:	4619      	mov	r1, r3
 8010e8c:	f7ff f88f 	bl	800ffae <mem_cmp>
 8010e90:	4603      	mov	r3, r0
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d00b      	beq.n	8010eae <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010e96:	2100      	movs	r1, #0
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f7ff fe6e 	bl	8010b7a <dir_next>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010ea2:	7dfb      	ldrb	r3, [r7, #23]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d0c5      	beq.n	8010e34 <dir_find+0x24>
 8010ea8:	e002      	b.n	8010eb0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8010eaa:	bf00      	nop
 8010eac:	e000      	b.n	8010eb0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010eae:	bf00      	nop

	return res;
 8010eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3718      	adds	r7, #24
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}

08010eba <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010eba:	b580      	push	{r7, lr}
 8010ebc:	b084      	sub	sp, #16
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010ec8:	2101      	movs	r1, #1
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f7ff ff1a 	bl	8010d04 <dir_alloc>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010ed4:	7bfb      	ldrb	r3, [r7, #15]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d11c      	bne.n	8010f14 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	69db      	ldr	r3, [r3, #28]
 8010ede:	4619      	mov	r1, r3
 8010ee0:	68b8      	ldr	r0, [r7, #8]
 8010ee2:	f7ff fa57 	bl	8010394 <move_window>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010eea:	7bfb      	ldrb	r3, [r7, #15]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d111      	bne.n	8010f14 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6a1b      	ldr	r3, [r3, #32]
 8010ef4:	2220      	movs	r2, #32
 8010ef6:	2100      	movs	r1, #0
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7ff f83e 	bl	800ff7a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6a18      	ldr	r0, [r3, #32]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	3324      	adds	r3, #36	; 0x24
 8010f06:	220b      	movs	r2, #11
 8010f08:	4619      	mov	r1, r3
 8010f0a:	f7ff f815 	bl	800ff38 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	2201      	movs	r2, #1
 8010f12:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3710      	adds	r7, #16
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
	...

08010f20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b088      	sub	sp, #32
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	60fb      	str	r3, [r7, #12]
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	3324      	adds	r3, #36	; 0x24
 8010f34:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010f36:	220b      	movs	r2, #11
 8010f38:	2120      	movs	r1, #32
 8010f3a:	68b8      	ldr	r0, [r7, #8]
 8010f3c:	f7ff f81d 	bl	800ff7a <mem_set>
	si = i = 0; ni = 8;
 8010f40:	2300      	movs	r3, #0
 8010f42:	613b      	str	r3, [r7, #16]
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	617b      	str	r3, [r7, #20]
 8010f48:	2308      	movs	r3, #8
 8010f4a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	1c5a      	adds	r2, r3, #1
 8010f50:	617a      	str	r2, [r7, #20]
 8010f52:	68fa      	ldr	r2, [r7, #12]
 8010f54:	4413      	add	r3, r2
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010f5a:	7ffb      	ldrb	r3, [r7, #31]
 8010f5c:	2b20      	cmp	r3, #32
 8010f5e:	d94e      	bls.n	8010ffe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010f60:	7ffb      	ldrb	r3, [r7, #31]
 8010f62:	2b2f      	cmp	r3, #47	; 0x2f
 8010f64:	d006      	beq.n	8010f74 <create_name+0x54>
 8010f66:	7ffb      	ldrb	r3, [r7, #31]
 8010f68:	2b5c      	cmp	r3, #92	; 0x5c
 8010f6a:	d110      	bne.n	8010f8e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010f6c:	e002      	b.n	8010f74 <create_name+0x54>
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	3301      	adds	r3, #1
 8010f72:	617b      	str	r3, [r7, #20]
 8010f74:	68fa      	ldr	r2, [r7, #12]
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	4413      	add	r3, r2
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	2b2f      	cmp	r3, #47	; 0x2f
 8010f7e:	d0f6      	beq.n	8010f6e <create_name+0x4e>
 8010f80:	68fa      	ldr	r2, [r7, #12]
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	4413      	add	r3, r2
 8010f86:	781b      	ldrb	r3, [r3, #0]
 8010f88:	2b5c      	cmp	r3, #92	; 0x5c
 8010f8a:	d0f0      	beq.n	8010f6e <create_name+0x4e>
			break;
 8010f8c:	e038      	b.n	8011000 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010f8e:	7ffb      	ldrb	r3, [r7, #31]
 8010f90:	2b2e      	cmp	r3, #46	; 0x2e
 8010f92:	d003      	beq.n	8010f9c <create_name+0x7c>
 8010f94:	693a      	ldr	r2, [r7, #16]
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	d30c      	bcc.n	8010fb6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010f9c:	69bb      	ldr	r3, [r7, #24]
 8010f9e:	2b0b      	cmp	r3, #11
 8010fa0:	d002      	beq.n	8010fa8 <create_name+0x88>
 8010fa2:	7ffb      	ldrb	r3, [r7, #31]
 8010fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8010fa6:	d001      	beq.n	8010fac <create_name+0x8c>
 8010fa8:	2306      	movs	r3, #6
 8010faa:	e044      	b.n	8011036 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010fac:	2308      	movs	r3, #8
 8010fae:	613b      	str	r3, [r7, #16]
 8010fb0:	230b      	movs	r3, #11
 8010fb2:	61bb      	str	r3, [r7, #24]
			continue;
 8010fb4:	e022      	b.n	8010ffc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010fb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	da04      	bge.n	8010fc8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010fbe:	7ffb      	ldrb	r3, [r7, #31]
 8010fc0:	3b80      	subs	r3, #128	; 0x80
 8010fc2:	4a1f      	ldr	r2, [pc, #124]	; (8011040 <create_name+0x120>)
 8010fc4:	5cd3      	ldrb	r3, [r2, r3]
 8010fc6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010fc8:	7ffb      	ldrb	r3, [r7, #31]
 8010fca:	4619      	mov	r1, r3
 8010fcc:	481d      	ldr	r0, [pc, #116]	; (8011044 <create_name+0x124>)
 8010fce:	f7ff f815 	bl	800fffc <chk_chr>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d001      	beq.n	8010fdc <create_name+0xbc>
 8010fd8:	2306      	movs	r3, #6
 8010fda:	e02c      	b.n	8011036 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010fdc:	7ffb      	ldrb	r3, [r7, #31]
 8010fde:	2b60      	cmp	r3, #96	; 0x60
 8010fe0:	d905      	bls.n	8010fee <create_name+0xce>
 8010fe2:	7ffb      	ldrb	r3, [r7, #31]
 8010fe4:	2b7a      	cmp	r3, #122	; 0x7a
 8010fe6:	d802      	bhi.n	8010fee <create_name+0xce>
 8010fe8:	7ffb      	ldrb	r3, [r7, #31]
 8010fea:	3b20      	subs	r3, #32
 8010fec:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	1c5a      	adds	r2, r3, #1
 8010ff2:	613a      	str	r2, [r7, #16]
 8010ff4:	68ba      	ldr	r2, [r7, #8]
 8010ff6:	4413      	add	r3, r2
 8010ff8:	7ffa      	ldrb	r2, [r7, #31]
 8010ffa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010ffc:	e7a6      	b.n	8010f4c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010ffe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011000:	68fa      	ldr	r2, [r7, #12]
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	441a      	add	r2, r3
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d101      	bne.n	8011014 <create_name+0xf4>
 8011010:	2306      	movs	r3, #6
 8011012:	e010      	b.n	8011036 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	2be5      	cmp	r3, #229	; 0xe5
 801101a:	d102      	bne.n	8011022 <create_name+0x102>
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	2205      	movs	r2, #5
 8011020:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011022:	7ffb      	ldrb	r3, [r7, #31]
 8011024:	2b20      	cmp	r3, #32
 8011026:	d801      	bhi.n	801102c <create_name+0x10c>
 8011028:	2204      	movs	r2, #4
 801102a:	e000      	b.n	801102e <create_name+0x10e>
 801102c:	2200      	movs	r2, #0
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	330b      	adds	r3, #11
 8011032:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011034:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011036:	4618      	mov	r0, r3
 8011038:	3720      	adds	r7, #32
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
 801103e:	bf00      	nop
 8011040:	08013440 	.word	0x08013440
 8011044:	08013374 	.word	0x08013374

08011048 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b086      	sub	sp, #24
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801105c:	e002      	b.n	8011064 <follow_path+0x1c>
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	3301      	adds	r3, #1
 8011062:	603b      	str	r3, [r7, #0]
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	2b2f      	cmp	r3, #47	; 0x2f
 801106a:	d0f8      	beq.n	801105e <follow_path+0x16>
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	2b5c      	cmp	r3, #92	; 0x5c
 8011072:	d0f4      	beq.n	801105e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	2200      	movs	r2, #0
 8011078:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	2b1f      	cmp	r3, #31
 8011080:	d80a      	bhi.n	8011098 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2280      	movs	r2, #128	; 0x80
 8011086:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801108a:	2100      	movs	r1, #0
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f7ff fcf9 	bl	8010a84 <dir_sdi>
 8011092:	4603      	mov	r3, r0
 8011094:	75fb      	strb	r3, [r7, #23]
 8011096:	e043      	b.n	8011120 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011098:	463b      	mov	r3, r7
 801109a:	4619      	mov	r1, r3
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f7ff ff3f 	bl	8010f20 <create_name>
 80110a2:	4603      	mov	r3, r0
 80110a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80110a6:	7dfb      	ldrb	r3, [r7, #23]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d134      	bne.n	8011116 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f7ff feaf 	bl	8010e10 <dir_find>
 80110b2:	4603      	mov	r3, r0
 80110b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80110bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80110be:	7dfb      	ldrb	r3, [r7, #23]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d00a      	beq.n	80110da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80110c4:	7dfb      	ldrb	r3, [r7, #23]
 80110c6:	2b04      	cmp	r3, #4
 80110c8:	d127      	bne.n	801111a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80110ca:	7afb      	ldrb	r3, [r7, #11]
 80110cc:	f003 0304 	and.w	r3, r3, #4
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d122      	bne.n	801111a <follow_path+0xd2>
 80110d4:	2305      	movs	r3, #5
 80110d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80110d8:	e01f      	b.n	801111a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80110da:	7afb      	ldrb	r3, [r7, #11]
 80110dc:	f003 0304 	and.w	r3, r3, #4
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d11c      	bne.n	801111e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	799b      	ldrb	r3, [r3, #6]
 80110e8:	f003 0310 	and.w	r3, r3, #16
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d102      	bne.n	80110f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80110f0:	2305      	movs	r3, #5
 80110f2:	75fb      	strb	r3, [r7, #23]
 80110f4:	e014      	b.n	8011120 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	695b      	ldr	r3, [r3, #20]
 8011100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011104:	4413      	add	r3, r2
 8011106:	4619      	mov	r1, r3
 8011108:	68f8      	ldr	r0, [r7, #12]
 801110a:	f7ff fe42 	bl	8010d92 <ld_clust>
 801110e:	4602      	mov	r2, r0
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011114:	e7c0      	b.n	8011098 <follow_path+0x50>
			if (res != FR_OK) break;
 8011116:	bf00      	nop
 8011118:	e002      	b.n	8011120 <follow_path+0xd8>
				break;
 801111a:	bf00      	nop
 801111c:	e000      	b.n	8011120 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801111e:	bf00      	nop
			}
		}
	}

	return res;
 8011120:	7dfb      	ldrb	r3, [r7, #23]
}
 8011122:	4618      	mov	r0, r3
 8011124:	3718      	adds	r7, #24
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}

0801112a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801112a:	b480      	push	{r7}
 801112c:	b087      	sub	sp, #28
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011132:	f04f 33ff 	mov.w	r3, #4294967295
 8011136:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d031      	beq.n	80111a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	617b      	str	r3, [r7, #20]
 8011146:	e002      	b.n	801114e <get_ldnumber+0x24>
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	3301      	adds	r3, #1
 801114c:	617b      	str	r3, [r7, #20]
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	2b20      	cmp	r3, #32
 8011154:	d903      	bls.n	801115e <get_ldnumber+0x34>
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	2b3a      	cmp	r3, #58	; 0x3a
 801115c:	d1f4      	bne.n	8011148 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	2b3a      	cmp	r3, #58	; 0x3a
 8011164:	d11c      	bne.n	80111a0 <get_ldnumber+0x76>
			tp = *path;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	1c5a      	adds	r2, r3, #1
 8011170:	60fa      	str	r2, [r7, #12]
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	3b30      	subs	r3, #48	; 0x30
 8011176:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	2b09      	cmp	r3, #9
 801117c:	d80e      	bhi.n	801119c <get_ldnumber+0x72>
 801117e:	68fa      	ldr	r2, [r7, #12]
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	429a      	cmp	r2, r3
 8011184:	d10a      	bne.n	801119c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d107      	bne.n	801119c <get_ldnumber+0x72>
					vol = (int)i;
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	3301      	adds	r3, #1
 8011194:	617b      	str	r3, [r7, #20]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	697a      	ldr	r2, [r7, #20]
 801119a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	e002      	b.n	80111a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80111a0:	2300      	movs	r3, #0
 80111a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80111a4:	693b      	ldr	r3, [r7, #16]
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	371c      	adds	r7, #28
 80111aa:	46bd      	mov	sp, r7
 80111ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b0:	4770      	bx	lr
	...

080111b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2200      	movs	r2, #0
 80111c2:	70da      	strb	r2, [r3, #3]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f04f 32ff 	mov.w	r2, #4294967295
 80111ca:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80111cc:	6839      	ldr	r1, [r7, #0]
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f7ff f8e0 	bl	8010394 <move_window>
 80111d4:	4603      	mov	r3, r0
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d001      	beq.n	80111de <check_fs+0x2a>
 80111da:	2304      	movs	r3, #4
 80111dc:	e038      	b.n	8011250 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	3330      	adds	r3, #48	; 0x30
 80111e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7fe fe24 	bl	800fe34 <ld_word>
 80111ec:	4603      	mov	r3, r0
 80111ee:	461a      	mov	r2, r3
 80111f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d001      	beq.n	80111fc <check_fs+0x48>
 80111f8:	2303      	movs	r3, #3
 80111fa:	e029      	b.n	8011250 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011202:	2be9      	cmp	r3, #233	; 0xe9
 8011204:	d009      	beq.n	801121a <check_fs+0x66>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801120c:	2beb      	cmp	r3, #235	; 0xeb
 801120e:	d11e      	bne.n	801124e <check_fs+0x9a>
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011216:	2b90      	cmp	r3, #144	; 0x90
 8011218:	d119      	bne.n	801124e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	3330      	adds	r3, #48	; 0x30
 801121e:	3336      	adds	r3, #54	; 0x36
 8011220:	4618      	mov	r0, r3
 8011222:	f7fe fe1f 	bl	800fe64 <ld_dword>
 8011226:	4603      	mov	r3, r0
 8011228:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801122c:	4a0a      	ldr	r2, [pc, #40]	; (8011258 <check_fs+0xa4>)
 801122e:	4293      	cmp	r3, r2
 8011230:	d101      	bne.n	8011236 <check_fs+0x82>
 8011232:	2300      	movs	r3, #0
 8011234:	e00c      	b.n	8011250 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	3330      	adds	r3, #48	; 0x30
 801123a:	3352      	adds	r3, #82	; 0x52
 801123c:	4618      	mov	r0, r3
 801123e:	f7fe fe11 	bl	800fe64 <ld_dword>
 8011242:	4602      	mov	r2, r0
 8011244:	4b05      	ldr	r3, [pc, #20]	; (801125c <check_fs+0xa8>)
 8011246:	429a      	cmp	r2, r3
 8011248:	d101      	bne.n	801124e <check_fs+0x9a>
 801124a:	2300      	movs	r3, #0
 801124c:	e000      	b.n	8011250 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801124e:	2302      	movs	r3, #2
}
 8011250:	4618      	mov	r0, r3
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	00544146 	.word	0x00544146
 801125c:	33544146 	.word	0x33544146

08011260 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b096      	sub	sp, #88	; 0x58
 8011264:	af00      	add	r7, sp, #0
 8011266:	60f8      	str	r0, [r7, #12]
 8011268:	60b9      	str	r1, [r7, #8]
 801126a:	4613      	mov	r3, r2
 801126c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	2200      	movs	r2, #0
 8011272:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011274:	68f8      	ldr	r0, [r7, #12]
 8011276:	f7ff ff58 	bl	801112a <get_ldnumber>
 801127a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801127c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801127e:	2b00      	cmp	r3, #0
 8011280:	da01      	bge.n	8011286 <find_volume+0x26>
 8011282:	230b      	movs	r3, #11
 8011284:	e22e      	b.n	80116e4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011286:	4aa8      	ldr	r2, [pc, #672]	; (8011528 <find_volume+0x2c8>)
 8011288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801128a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801128e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011292:	2b00      	cmp	r3, #0
 8011294:	d101      	bne.n	801129a <find_volume+0x3a>
 8011296:	230c      	movs	r3, #12
 8011298:	e224      	b.n	80116e4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801129e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80112a0:	79fb      	ldrb	r3, [r7, #7]
 80112a2:	f023 0301 	bic.w	r3, r3, #1
 80112a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80112a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112aa:	781b      	ldrb	r3, [r3, #0]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d01a      	beq.n	80112e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80112b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b2:	785b      	ldrb	r3, [r3, #1]
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7fe fd1f 	bl	800fcf8 <disk_status>
 80112ba:	4603      	mov	r3, r0
 80112bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80112c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80112c4:	f003 0301 	and.w	r3, r3, #1
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d10c      	bne.n	80112e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80112cc:	79fb      	ldrb	r3, [r7, #7]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d007      	beq.n	80112e2 <find_volume+0x82>
 80112d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80112d6:	f003 0304 	and.w	r3, r3, #4
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d001      	beq.n	80112e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80112de:	230a      	movs	r3, #10
 80112e0:	e200      	b.n	80116e4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80112e2:	2300      	movs	r3, #0
 80112e4:	e1fe      	b.n	80116e4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80112e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e8:	2200      	movs	r2, #0
 80112ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80112ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112ee:	b2da      	uxtb	r2, r3
 80112f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80112f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f6:	785b      	ldrb	r3, [r3, #1]
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7fe fd17 	bl	800fd2c <disk_initialize>
 80112fe:	4603      	mov	r3, r0
 8011300:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011304:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011308:	f003 0301 	and.w	r3, r3, #1
 801130c:	2b00      	cmp	r3, #0
 801130e:	d001      	beq.n	8011314 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011310:	2303      	movs	r3, #3
 8011312:	e1e7      	b.n	80116e4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011314:	79fb      	ldrb	r3, [r7, #7]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d007      	beq.n	801132a <find_volume+0xca>
 801131a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801131e:	f003 0304 	and.w	r3, r3, #4
 8011322:	2b00      	cmp	r3, #0
 8011324:	d001      	beq.n	801132a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011326:	230a      	movs	r3, #10
 8011328:	e1dc      	b.n	80116e4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801132a:	2300      	movs	r3, #0
 801132c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801132e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011330:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011332:	f7ff ff3f 	bl	80111b4 <check_fs>
 8011336:	4603      	mov	r3, r0
 8011338:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801133c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011340:	2b02      	cmp	r3, #2
 8011342:	d14b      	bne.n	80113dc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011344:	2300      	movs	r3, #0
 8011346:	643b      	str	r3, [r7, #64]	; 0x40
 8011348:	e01f      	b.n	801138a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801134a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011352:	011b      	lsls	r3, r3, #4
 8011354:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011358:	4413      	add	r3, r2
 801135a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135e:	3304      	adds	r3, #4
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d006      	beq.n	8011374 <find_volume+0x114>
 8011366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011368:	3308      	adds	r3, #8
 801136a:	4618      	mov	r0, r3
 801136c:	f7fe fd7a 	bl	800fe64 <ld_dword>
 8011370:	4602      	mov	r2, r0
 8011372:	e000      	b.n	8011376 <find_volume+0x116>
 8011374:	2200      	movs	r2, #0
 8011376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011378:	009b      	lsls	r3, r3, #2
 801137a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801137e:	440b      	add	r3, r1
 8011380:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011386:	3301      	adds	r3, #1
 8011388:	643b      	str	r3, [r7, #64]	; 0x40
 801138a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801138c:	2b03      	cmp	r3, #3
 801138e:	d9dc      	bls.n	801134a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011390:	2300      	movs	r3, #0
 8011392:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011396:	2b00      	cmp	r3, #0
 8011398:	d002      	beq.n	80113a0 <find_volume+0x140>
 801139a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801139c:	3b01      	subs	r3, #1
 801139e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80113a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113a2:	009b      	lsls	r3, r3, #2
 80113a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80113a8:	4413      	add	r3, r2
 80113aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80113ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80113b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d005      	beq.n	80113c2 <find_volume+0x162>
 80113b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80113b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80113ba:	f7ff fefb 	bl	80111b4 <check_fs>
 80113be:	4603      	mov	r3, r0
 80113c0:	e000      	b.n	80113c4 <find_volume+0x164>
 80113c2:	2303      	movs	r3, #3
 80113c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80113c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d905      	bls.n	80113dc <find_volume+0x17c>
 80113d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113d2:	3301      	adds	r3, #1
 80113d4:	643b      	str	r3, [r7, #64]	; 0x40
 80113d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113d8:	2b03      	cmp	r3, #3
 80113da:	d9e1      	bls.n	80113a0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80113dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113e0:	2b04      	cmp	r3, #4
 80113e2:	d101      	bne.n	80113e8 <find_volume+0x188>
 80113e4:	2301      	movs	r3, #1
 80113e6:	e17d      	b.n	80116e4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80113e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	d901      	bls.n	80113f4 <find_volume+0x194>
 80113f0:	230d      	movs	r3, #13
 80113f2:	e177      	b.n	80116e4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80113f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f6:	3330      	adds	r3, #48	; 0x30
 80113f8:	330b      	adds	r3, #11
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7fe fd1a 	bl	800fe34 <ld_word>
 8011400:	4603      	mov	r3, r0
 8011402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011406:	d001      	beq.n	801140c <find_volume+0x1ac>
 8011408:	230d      	movs	r3, #13
 801140a:	e16b      	b.n	80116e4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801140c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801140e:	3330      	adds	r3, #48	; 0x30
 8011410:	3316      	adds	r3, #22
 8011412:	4618      	mov	r0, r3
 8011414:	f7fe fd0e 	bl	800fe34 <ld_word>
 8011418:	4603      	mov	r3, r0
 801141a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801141c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801141e:	2b00      	cmp	r3, #0
 8011420:	d106      	bne.n	8011430 <find_volume+0x1d0>
 8011422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011424:	3330      	adds	r3, #48	; 0x30
 8011426:	3324      	adds	r3, #36	; 0x24
 8011428:	4618      	mov	r0, r3
 801142a:	f7fe fd1b 	bl	800fe64 <ld_dword>
 801142e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011432:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011434:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011438:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801143c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801143e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011442:	789b      	ldrb	r3, [r3, #2]
 8011444:	2b01      	cmp	r3, #1
 8011446:	d005      	beq.n	8011454 <find_volume+0x1f4>
 8011448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801144a:	789b      	ldrb	r3, [r3, #2]
 801144c:	2b02      	cmp	r3, #2
 801144e:	d001      	beq.n	8011454 <find_volume+0x1f4>
 8011450:	230d      	movs	r3, #13
 8011452:	e147      	b.n	80116e4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011456:	789b      	ldrb	r3, [r3, #2]
 8011458:	461a      	mov	r2, r3
 801145a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801145c:	fb02 f303 	mul.w	r3, r2, r3
 8011460:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011468:	b29a      	uxth	r2, r3
 801146a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801146c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801146e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011470:	895b      	ldrh	r3, [r3, #10]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d008      	beq.n	8011488 <find_volume+0x228>
 8011476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011478:	895b      	ldrh	r3, [r3, #10]
 801147a:	461a      	mov	r2, r3
 801147c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147e:	895b      	ldrh	r3, [r3, #10]
 8011480:	3b01      	subs	r3, #1
 8011482:	4013      	ands	r3, r2
 8011484:	2b00      	cmp	r3, #0
 8011486:	d001      	beq.n	801148c <find_volume+0x22c>
 8011488:	230d      	movs	r3, #13
 801148a:	e12b      	b.n	80116e4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801148c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801148e:	3330      	adds	r3, #48	; 0x30
 8011490:	3311      	adds	r3, #17
 8011492:	4618      	mov	r0, r3
 8011494:	f7fe fcce 	bl	800fe34 <ld_word>
 8011498:	4603      	mov	r3, r0
 801149a:	461a      	mov	r2, r3
 801149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80114a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a2:	891b      	ldrh	r3, [r3, #8]
 80114a4:	f003 030f 	and.w	r3, r3, #15
 80114a8:	b29b      	uxth	r3, r3
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d001      	beq.n	80114b2 <find_volume+0x252>
 80114ae:	230d      	movs	r3, #13
 80114b0:	e118      	b.n	80116e4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80114b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b4:	3330      	adds	r3, #48	; 0x30
 80114b6:	3313      	adds	r3, #19
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7fe fcbb 	bl	800fe34 <ld_word>
 80114be:	4603      	mov	r3, r0
 80114c0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80114c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d106      	bne.n	80114d6 <find_volume+0x276>
 80114c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ca:	3330      	adds	r3, #48	; 0x30
 80114cc:	3320      	adds	r3, #32
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fe fcc8 	bl	800fe64 <ld_dword>
 80114d4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80114d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d8:	3330      	adds	r3, #48	; 0x30
 80114da:	330e      	adds	r3, #14
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fe fca9 	bl	800fe34 <ld_word>
 80114e2:	4603      	mov	r3, r0
 80114e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80114e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d101      	bne.n	80114f0 <find_volume+0x290>
 80114ec:	230d      	movs	r3, #13
 80114ee:	e0f9      	b.n	80116e4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80114f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80114f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114f4:	4413      	add	r3, r2
 80114f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114f8:	8912      	ldrh	r2, [r2, #8]
 80114fa:	0912      	lsrs	r2, r2, #4
 80114fc:	b292      	uxth	r2, r2
 80114fe:	4413      	add	r3, r2
 8011500:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011506:	429a      	cmp	r2, r3
 8011508:	d201      	bcs.n	801150e <find_volume+0x2ae>
 801150a:	230d      	movs	r3, #13
 801150c:	e0ea      	b.n	80116e4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801150e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011516:	8952      	ldrh	r2, [r2, #10]
 8011518:	fbb3 f3f2 	udiv	r3, r3, r2
 801151c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011520:	2b00      	cmp	r3, #0
 8011522:	d103      	bne.n	801152c <find_volume+0x2cc>
 8011524:	230d      	movs	r3, #13
 8011526:	e0dd      	b.n	80116e4 <find_volume+0x484>
 8011528:	240001f4 	.word	0x240001f4
		fmt = FS_FAT32;
 801152c:	2303      	movs	r3, #3
 801152e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011534:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011538:	4293      	cmp	r3, r2
 801153a:	d802      	bhi.n	8011542 <find_volume+0x2e2>
 801153c:	2302      	movs	r3, #2
 801153e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011544:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011548:	4293      	cmp	r3, r2
 801154a:	d802      	bhi.n	8011552 <find_volume+0x2f2>
 801154c:	2301      	movs	r3, #1
 801154e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011554:	1c9a      	adds	r2, r3, #2
 8011556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011558:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801155c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801155e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011560:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011564:	441a      	add	r2, r3
 8011566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011568:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801156a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156e:	441a      	add	r2, r3
 8011570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011572:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8011574:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011578:	2b03      	cmp	r3, #3
 801157a:	d11e      	bne.n	80115ba <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801157c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801157e:	3330      	adds	r3, #48	; 0x30
 8011580:	332a      	adds	r3, #42	; 0x2a
 8011582:	4618      	mov	r0, r3
 8011584:	f7fe fc56 	bl	800fe34 <ld_word>
 8011588:	4603      	mov	r3, r0
 801158a:	2b00      	cmp	r3, #0
 801158c:	d001      	beq.n	8011592 <find_volume+0x332>
 801158e:	230d      	movs	r3, #13
 8011590:	e0a8      	b.n	80116e4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011594:	891b      	ldrh	r3, [r3, #8]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d001      	beq.n	801159e <find_volume+0x33e>
 801159a:	230d      	movs	r3, #13
 801159c:	e0a2      	b.n	80116e4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801159e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a0:	3330      	adds	r3, #48	; 0x30
 80115a2:	332c      	adds	r3, #44	; 0x2c
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7fe fc5d 	bl	800fe64 <ld_dword>
 80115aa:	4602      	mov	r2, r0
 80115ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ae:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80115b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b2:	695b      	ldr	r3, [r3, #20]
 80115b4:	009b      	lsls	r3, r3, #2
 80115b6:	647b      	str	r3, [r7, #68]	; 0x44
 80115b8:	e01f      	b.n	80115fa <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80115ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115bc:	891b      	ldrh	r3, [r3, #8]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d101      	bne.n	80115c6 <find_volume+0x366>
 80115c2:	230d      	movs	r3, #13
 80115c4:	e08e      	b.n	80116e4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80115c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c8:	6a1a      	ldr	r2, [r3, #32]
 80115ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115cc:	441a      	add	r2, r3
 80115ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80115d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80115d6:	2b02      	cmp	r3, #2
 80115d8:	d103      	bne.n	80115e2 <find_volume+0x382>
 80115da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115dc:	695b      	ldr	r3, [r3, #20]
 80115de:	005b      	lsls	r3, r3, #1
 80115e0:	e00a      	b.n	80115f8 <find_volume+0x398>
 80115e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e4:	695a      	ldr	r2, [r3, #20]
 80115e6:	4613      	mov	r3, r2
 80115e8:	005b      	lsls	r3, r3, #1
 80115ea:	4413      	add	r3, r2
 80115ec:	085a      	lsrs	r2, r3, #1
 80115ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f0:	695b      	ldr	r3, [r3, #20]
 80115f2:	f003 0301 	and.w	r3, r3, #1
 80115f6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80115f8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80115fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115fc:	699a      	ldr	r2, [r3, #24]
 80115fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011600:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011604:	0a5b      	lsrs	r3, r3, #9
 8011606:	429a      	cmp	r2, r3
 8011608:	d201      	bcs.n	801160e <find_volume+0x3ae>
 801160a:	230d      	movs	r3, #13
 801160c:	e06a      	b.n	80116e4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801160e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011610:	f04f 32ff 	mov.w	r2, #4294967295
 8011614:	611a      	str	r2, [r3, #16]
 8011616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011618:	691a      	ldr	r2, [r3, #16]
 801161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801161e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011620:	2280      	movs	r2, #128	; 0x80
 8011622:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011624:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011628:	2b03      	cmp	r3, #3
 801162a:	d149      	bne.n	80116c0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801162c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162e:	3330      	adds	r3, #48	; 0x30
 8011630:	3330      	adds	r3, #48	; 0x30
 8011632:	4618      	mov	r0, r3
 8011634:	f7fe fbfe 	bl	800fe34 <ld_word>
 8011638:	4603      	mov	r3, r0
 801163a:	2b01      	cmp	r3, #1
 801163c:	d140      	bne.n	80116c0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 801163e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011640:	3301      	adds	r3, #1
 8011642:	4619      	mov	r1, r3
 8011644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011646:	f7fe fea5 	bl	8010394 <move_window>
 801164a:	4603      	mov	r3, r0
 801164c:	2b00      	cmp	r3, #0
 801164e:	d137      	bne.n	80116c0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8011650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011652:	2200      	movs	r2, #0
 8011654:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011658:	3330      	adds	r3, #48	; 0x30
 801165a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801165e:	4618      	mov	r0, r3
 8011660:	f7fe fbe8 	bl	800fe34 <ld_word>
 8011664:	4603      	mov	r3, r0
 8011666:	461a      	mov	r2, r3
 8011668:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801166c:	429a      	cmp	r2, r3
 801166e:	d127      	bne.n	80116c0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011672:	3330      	adds	r3, #48	; 0x30
 8011674:	4618      	mov	r0, r3
 8011676:	f7fe fbf5 	bl	800fe64 <ld_dword>
 801167a:	4602      	mov	r2, r0
 801167c:	4b1b      	ldr	r3, [pc, #108]	; (80116ec <find_volume+0x48c>)
 801167e:	429a      	cmp	r2, r3
 8011680:	d11e      	bne.n	80116c0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011684:	3330      	adds	r3, #48	; 0x30
 8011686:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801168a:	4618      	mov	r0, r3
 801168c:	f7fe fbea 	bl	800fe64 <ld_dword>
 8011690:	4602      	mov	r2, r0
 8011692:	4b17      	ldr	r3, [pc, #92]	; (80116f0 <find_volume+0x490>)
 8011694:	429a      	cmp	r2, r3
 8011696:	d113      	bne.n	80116c0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801169a:	3330      	adds	r3, #48	; 0x30
 801169c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7fe fbdf 	bl	800fe64 <ld_dword>
 80116a6:	4602      	mov	r2, r0
 80116a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116aa:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80116ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ae:	3330      	adds	r3, #48	; 0x30
 80116b0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7fe fbd5 	bl	800fe64 <ld_dword>
 80116ba:	4602      	mov	r2, r0
 80116bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116be:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80116c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80116c6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80116c8:	4b0a      	ldr	r3, [pc, #40]	; (80116f4 <find_volume+0x494>)
 80116ca:	881b      	ldrh	r3, [r3, #0]
 80116cc:	3301      	adds	r3, #1
 80116ce:	b29a      	uxth	r2, r3
 80116d0:	4b08      	ldr	r3, [pc, #32]	; (80116f4 <find_volume+0x494>)
 80116d2:	801a      	strh	r2, [r3, #0]
 80116d4:	4b07      	ldr	r3, [pc, #28]	; (80116f4 <find_volume+0x494>)
 80116d6:	881a      	ldrh	r2, [r3, #0]
 80116d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116da:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80116dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80116de:	f7fe fdf1 	bl	80102c4 <clear_lock>
#endif
	return FR_OK;
 80116e2:	2300      	movs	r3, #0
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3758      	adds	r7, #88	; 0x58
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	41615252 	.word	0x41615252
 80116f0:	61417272 	.word	0x61417272
 80116f4:	240001f8 	.word	0x240001f8

080116f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011702:	2309      	movs	r3, #9
 8011704:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d01c      	beq.n	8011746 <validate+0x4e>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d018      	beq.n	8011746 <validate+0x4e>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d013      	beq.n	8011746 <validate+0x4e>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	889a      	ldrh	r2, [r3, #4]
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	88db      	ldrh	r3, [r3, #6]
 8011728:	429a      	cmp	r2, r3
 801172a:	d10c      	bne.n	8011746 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	785b      	ldrb	r3, [r3, #1]
 8011732:	4618      	mov	r0, r3
 8011734:	f7fe fae0 	bl	800fcf8 <disk_status>
 8011738:	4603      	mov	r3, r0
 801173a:	f003 0301 	and.w	r3, r3, #1
 801173e:	2b00      	cmp	r3, #0
 8011740:	d101      	bne.n	8011746 <validate+0x4e>
			res = FR_OK;
 8011742:	2300      	movs	r3, #0
 8011744:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011746:	7bfb      	ldrb	r3, [r7, #15]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d102      	bne.n	8011752 <validate+0x5a>
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	e000      	b.n	8011754 <validate+0x5c>
 8011752:	2300      	movs	r3, #0
 8011754:	683a      	ldr	r2, [r7, #0]
 8011756:	6013      	str	r3, [r2, #0]
	return res;
 8011758:	7bfb      	ldrb	r3, [r7, #15]
}
 801175a:	4618      	mov	r0, r3
 801175c:	3710      	adds	r7, #16
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
	...

08011764 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b088      	sub	sp, #32
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	4613      	mov	r3, r2
 8011770:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011776:	f107 0310 	add.w	r3, r7, #16
 801177a:	4618      	mov	r0, r3
 801177c:	f7ff fcd5 	bl	801112a <get_ldnumber>
 8011780:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	2b00      	cmp	r3, #0
 8011786:	da01      	bge.n	801178c <f_mount+0x28>
 8011788:	230b      	movs	r3, #11
 801178a:	e02b      	b.n	80117e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801178c:	4a17      	ldr	r2, [pc, #92]	; (80117ec <f_mount+0x88>)
 801178e:	69fb      	ldr	r3, [r7, #28]
 8011790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011794:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011796:	69bb      	ldr	r3, [r7, #24]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d005      	beq.n	80117a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801179c:	69b8      	ldr	r0, [r7, #24]
 801179e:	f7fe fd91 	bl	80102c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80117a2:	69bb      	ldr	r3, [r7, #24]
 80117a4:	2200      	movs	r2, #0
 80117a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d002      	beq.n	80117b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	2200      	movs	r2, #0
 80117b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80117b4:	68fa      	ldr	r2, [r7, #12]
 80117b6:	490d      	ldr	r1, [pc, #52]	; (80117ec <f_mount+0x88>)
 80117b8:	69fb      	ldr	r3, [r7, #28]
 80117ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d002      	beq.n	80117ca <f_mount+0x66>
 80117c4:	79fb      	ldrb	r3, [r7, #7]
 80117c6:	2b01      	cmp	r3, #1
 80117c8:	d001      	beq.n	80117ce <f_mount+0x6a>
 80117ca:	2300      	movs	r3, #0
 80117cc:	e00a      	b.n	80117e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80117ce:	f107 010c 	add.w	r1, r7, #12
 80117d2:	f107 0308 	add.w	r3, r7, #8
 80117d6:	2200      	movs	r2, #0
 80117d8:	4618      	mov	r0, r3
 80117da:	f7ff fd41 	bl	8011260 <find_volume>
 80117de:	4603      	mov	r3, r0
 80117e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80117e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3720      	adds	r7, #32
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	240001f4 	.word	0x240001f4

080117f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b098      	sub	sp, #96	; 0x60
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	4613      	mov	r3, r2
 80117fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d101      	bne.n	8011808 <f_open+0x18>
 8011804:	2309      	movs	r3, #9
 8011806:	e1ad      	b.n	8011b64 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011808:	79fb      	ldrb	r3, [r7, #7]
 801180a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801180e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011810:	79fa      	ldrb	r2, [r7, #7]
 8011812:	f107 0110 	add.w	r1, r7, #16
 8011816:	f107 0308 	add.w	r3, r7, #8
 801181a:	4618      	mov	r0, r3
 801181c:	f7ff fd20 	bl	8011260 <find_volume>
 8011820:	4603      	mov	r3, r0
 8011822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8011826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801182a:	2b00      	cmp	r3, #0
 801182c:	f040 8191 	bne.w	8011b52 <f_open+0x362>
		dj.obj.fs = fs;
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011834:	68ba      	ldr	r2, [r7, #8]
 8011836:	f107 0314 	add.w	r3, r7, #20
 801183a:	4611      	mov	r1, r2
 801183c:	4618      	mov	r0, r3
 801183e:	f7ff fc03 	bl	8011048 <follow_path>
 8011842:	4603      	mov	r3, r0
 8011844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801184c:	2b00      	cmp	r3, #0
 801184e:	d11a      	bne.n	8011886 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011850:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011854:	b25b      	sxtb	r3, r3
 8011856:	2b00      	cmp	r3, #0
 8011858:	da03      	bge.n	8011862 <f_open+0x72>
				res = FR_INVALID_NAME;
 801185a:	2306      	movs	r3, #6
 801185c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011860:	e011      	b.n	8011886 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011862:	79fb      	ldrb	r3, [r7, #7]
 8011864:	f023 0301 	bic.w	r3, r3, #1
 8011868:	2b00      	cmp	r3, #0
 801186a:	bf14      	ite	ne
 801186c:	2301      	movne	r3, #1
 801186e:	2300      	moveq	r3, #0
 8011870:	b2db      	uxtb	r3, r3
 8011872:	461a      	mov	r2, r3
 8011874:	f107 0314 	add.w	r3, r7, #20
 8011878:	4611      	mov	r1, r2
 801187a:	4618      	mov	r0, r3
 801187c:	f7fe fbda 	bl	8010034 <chk_lock>
 8011880:	4603      	mov	r3, r0
 8011882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011886:	79fb      	ldrb	r3, [r7, #7]
 8011888:	f003 031c 	and.w	r3, r3, #28
 801188c:	2b00      	cmp	r3, #0
 801188e:	d07f      	beq.n	8011990 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011890:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011894:	2b00      	cmp	r3, #0
 8011896:	d017      	beq.n	80118c8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011898:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801189c:	2b04      	cmp	r3, #4
 801189e:	d10e      	bne.n	80118be <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80118a0:	f7fe fc24 	bl	80100ec <enq_lock>
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d006      	beq.n	80118b8 <f_open+0xc8>
 80118aa:	f107 0314 	add.w	r3, r7, #20
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7ff fb03 	bl	8010eba <dir_register>
 80118b4:	4603      	mov	r3, r0
 80118b6:	e000      	b.n	80118ba <f_open+0xca>
 80118b8:	2312      	movs	r3, #18
 80118ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80118be:	79fb      	ldrb	r3, [r7, #7]
 80118c0:	f043 0308 	orr.w	r3, r3, #8
 80118c4:	71fb      	strb	r3, [r7, #7]
 80118c6:	e010      	b.n	80118ea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80118c8:	7ebb      	ldrb	r3, [r7, #26]
 80118ca:	f003 0311 	and.w	r3, r3, #17
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d003      	beq.n	80118da <f_open+0xea>
					res = FR_DENIED;
 80118d2:	2307      	movs	r3, #7
 80118d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80118d8:	e007      	b.n	80118ea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80118da:	79fb      	ldrb	r3, [r7, #7]
 80118dc:	f003 0304 	and.w	r3, r3, #4
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d002      	beq.n	80118ea <f_open+0xfa>
 80118e4:	2308      	movs	r3, #8
 80118e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80118ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d168      	bne.n	80119c4 <f_open+0x1d4>
 80118f2:	79fb      	ldrb	r3, [r7, #7]
 80118f4:	f003 0308 	and.w	r3, r3, #8
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d063      	beq.n	80119c4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80118fc:	f7fb f9c2 	bl	800cc84 <get_fattime>
 8011900:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011904:	330e      	adds	r3, #14
 8011906:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011908:	4618      	mov	r0, r3
 801190a:	f7fe fae9 	bl	800fee0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801190e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011910:	3316      	adds	r3, #22
 8011912:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011914:	4618      	mov	r0, r3
 8011916:	f7fe fae3 	bl	800fee0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801191a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801191c:	330b      	adds	r3, #11
 801191e:	2220      	movs	r2, #32
 8011920:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011926:	4611      	mov	r1, r2
 8011928:	4618      	mov	r0, r3
 801192a:	f7ff fa32 	bl	8010d92 <ld_clust>
 801192e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011934:	2200      	movs	r2, #0
 8011936:	4618      	mov	r0, r3
 8011938:	f7ff fa4a 	bl	8010dd0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801193e:	331c      	adds	r3, #28
 8011940:	2100      	movs	r1, #0
 8011942:	4618      	mov	r0, r3
 8011944:	f7fe facc 	bl	800fee0 <st_dword>
					fs->wflag = 1;
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	2201      	movs	r2, #1
 801194c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801194e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011950:	2b00      	cmp	r3, #0
 8011952:	d037      	beq.n	80119c4 <f_open+0x1d4>
						dw = fs->winsect;
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011958:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801195a:	f107 0314 	add.w	r3, r7, #20
 801195e:	2200      	movs	r2, #0
 8011960:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011962:	4618      	mov	r0, r3
 8011964:	f7fe ff5d 	bl	8010822 <remove_chain>
 8011968:	4603      	mov	r3, r0
 801196a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801196e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011972:	2b00      	cmp	r3, #0
 8011974:	d126      	bne.n	80119c4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801197a:	4618      	mov	r0, r3
 801197c:	f7fe fd0a 	bl	8010394 <move_window>
 8011980:	4603      	mov	r3, r0
 8011982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801198a:	3a01      	subs	r2, #1
 801198c:	60da      	str	r2, [r3, #12]
 801198e:	e019      	b.n	80119c4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011994:	2b00      	cmp	r3, #0
 8011996:	d115      	bne.n	80119c4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011998:	7ebb      	ldrb	r3, [r7, #26]
 801199a:	f003 0310 	and.w	r3, r3, #16
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d003      	beq.n	80119aa <f_open+0x1ba>
					res = FR_NO_FILE;
 80119a2:	2304      	movs	r3, #4
 80119a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80119a8:	e00c      	b.n	80119c4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80119aa:	79fb      	ldrb	r3, [r7, #7]
 80119ac:	f003 0302 	and.w	r3, r3, #2
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d007      	beq.n	80119c4 <f_open+0x1d4>
 80119b4:	7ebb      	ldrb	r3, [r7, #26]
 80119b6:	f003 0301 	and.w	r3, r3, #1
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d002      	beq.n	80119c4 <f_open+0x1d4>
						res = FR_DENIED;
 80119be:	2307      	movs	r3, #7
 80119c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80119c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d128      	bne.n	8011a1e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80119cc:	79fb      	ldrb	r3, [r7, #7]
 80119ce:	f003 0308 	and.w	r3, r3, #8
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d003      	beq.n	80119de <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80119d6:	79fb      	ldrb	r3, [r7, #7]
 80119d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119dc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80119e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80119ec:	79fb      	ldrb	r3, [r7, #7]
 80119ee:	f023 0301 	bic.w	r3, r3, #1
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	bf14      	ite	ne
 80119f6:	2301      	movne	r3, #1
 80119f8:	2300      	moveq	r3, #0
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	461a      	mov	r2, r3
 80119fe:	f107 0314 	add.w	r3, r7, #20
 8011a02:	4611      	mov	r1, r2
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7fe fb93 	bl	8010130 <inc_lock>
 8011a0a:	4602      	mov	r2, r0
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	691b      	ldr	r3, [r3, #16]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d102      	bne.n	8011a1e <f_open+0x22e>
 8011a18:	2302      	movs	r3, #2
 8011a1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011a1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	f040 8095 	bne.w	8011b52 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a2c:	4611      	mov	r1, r2
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7ff f9af 	bl	8010d92 <ld_clust>
 8011a34:	4602      	mov	r2, r0
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a3c:	331c      	adds	r3, #28
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7fe fa10 	bl	800fe64 <ld_dword>
 8011a44:	4602      	mov	r2, r0
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011a50:	693a      	ldr	r2, [r7, #16]
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	88da      	ldrh	r2, [r3, #6]
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	79fa      	ldrb	r2, [r7, #7]
 8011a62:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	2200      	movs	r2, #0
 8011a68:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	2200      	movs	r2, #0
 8011a74:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	3330      	adds	r3, #48	; 0x30
 8011a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a7e:	2100      	movs	r1, #0
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7fe fa7a 	bl	800ff7a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011a86:	79fb      	ldrb	r3, [r7, #7]
 8011a88:	f003 0320 	and.w	r3, r3, #32
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d060      	beq.n	8011b52 <f_open+0x362>
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	68db      	ldr	r3, [r3, #12]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d05c      	beq.n	8011b52 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	68da      	ldr	r2, [r3, #12]
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011aa0:	693b      	ldr	r3, [r7, #16]
 8011aa2:	895b      	ldrh	r3, [r3, #10]
 8011aa4:	025b      	lsls	r3, r3, #9
 8011aa6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	689b      	ldr	r3, [r3, #8]
 8011aac:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	68db      	ldr	r3, [r3, #12]
 8011ab2:	657b      	str	r3, [r7, #84]	; 0x54
 8011ab4:	e016      	b.n	8011ae4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7fe fd25 	bl	801050a <get_fat>
 8011ac0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ac4:	2b01      	cmp	r3, #1
 8011ac6:	d802      	bhi.n	8011ace <f_open+0x2de>
 8011ac8:	2302      	movs	r3, #2
 8011aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ad4:	d102      	bne.n	8011adc <f_open+0x2ec>
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011adc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ae0:	1ad3      	subs	r3, r2, r3
 8011ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8011ae4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d103      	bne.n	8011af4 <f_open+0x304>
 8011aec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d8e0      	bhi.n	8011ab6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011af8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011afa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d127      	bne.n	8011b52 <f_open+0x362>
 8011b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d022      	beq.n	8011b52 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7fe fcdb 	bl	80104cc <clust2sect>
 8011b16:	6478      	str	r0, [r7, #68]	; 0x44
 8011b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d103      	bne.n	8011b26 <f_open+0x336>
						res = FR_INT_ERR;
 8011b1e:	2302      	movs	r3, #2
 8011b20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011b24:	e015      	b.n	8011b52 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b28:	0a5a      	lsrs	r2, r3, #9
 8011b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b2c:	441a      	add	r2, r3
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	7858      	ldrb	r0, [r3, #1]
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	6a1a      	ldr	r2, [r3, #32]
 8011b40:	2301      	movs	r3, #1
 8011b42:	f7fe f919 	bl	800fd78 <disk_read>
 8011b46:	4603      	mov	r3, r0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d002      	beq.n	8011b52 <f_open+0x362>
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d002      	beq.n	8011b60 <f_open+0x370>
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011b60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3760      	adds	r7, #96	; 0x60
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b08c      	sub	sp, #48	; 0x30
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	607a      	str	r2, [r7, #4]
 8011b78:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	2200      	movs	r2, #0
 8011b82:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	f107 0210 	add.w	r2, r7, #16
 8011b8a:	4611      	mov	r1, r2
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7ff fdb3 	bl	80116f8 <validate>
 8011b92:	4603      	mov	r3, r0
 8011b94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d107      	bne.n	8011bb0 <f_write+0x44>
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	7d5b      	ldrb	r3, [r3, #21]
 8011ba4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d002      	beq.n	8011bb6 <f_write+0x4a>
 8011bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bb4:	e14b      	b.n	8011e4e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	7d1b      	ldrb	r3, [r3, #20]
 8011bba:	f003 0302 	and.w	r3, r3, #2
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d101      	bne.n	8011bc6 <f_write+0x5a>
 8011bc2:	2307      	movs	r3, #7
 8011bc4:	e143      	b.n	8011e4e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	699a      	ldr	r2, [r3, #24]
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	441a      	add	r2, r3
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	699b      	ldr	r3, [r3, #24]
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	f080 812d 	bcs.w	8011e32 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	699b      	ldr	r3, [r3, #24]
 8011bdc:	43db      	mvns	r3, r3
 8011bde:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011be0:	e127      	b.n	8011e32 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	699b      	ldr	r3, [r3, #24]
 8011be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	f040 80e3 	bne.w	8011db6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	699b      	ldr	r3, [r3, #24]
 8011bf4:	0a5b      	lsrs	r3, r3, #9
 8011bf6:	693a      	ldr	r2, [r7, #16]
 8011bf8:	8952      	ldrh	r2, [r2, #10]
 8011bfa:	3a01      	subs	r2, #1
 8011bfc:	4013      	ands	r3, r2
 8011bfe:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011c00:	69bb      	ldr	r3, [r7, #24]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d143      	bne.n	8011c8e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	699b      	ldr	r3, [r3, #24]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d10c      	bne.n	8011c28 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	689b      	ldr	r3, [r3, #8]
 8011c12:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d11a      	bne.n	8011c50 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	2100      	movs	r1, #0
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fe fe64 	bl	80108ec <create_chain>
 8011c24:	62b8      	str	r0, [r7, #40]	; 0x28
 8011c26:	e013      	b.n	8011c50 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d007      	beq.n	8011c40 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	699b      	ldr	r3, [r3, #24]
 8011c34:	4619      	mov	r1, r3
 8011c36:	68f8      	ldr	r0, [r7, #12]
 8011c38:	f7fe fef0 	bl	8010a1c <clmt_clust>
 8011c3c:	62b8      	str	r0, [r7, #40]	; 0x28
 8011c3e:	e007      	b.n	8011c50 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011c40:	68fa      	ldr	r2, [r7, #12]
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	69db      	ldr	r3, [r3, #28]
 8011c46:	4619      	mov	r1, r3
 8011c48:	4610      	mov	r0, r2
 8011c4a:	f7fe fe4f 	bl	80108ec <create_chain>
 8011c4e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	f000 80f2 	beq.w	8011e3c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c5a:	2b01      	cmp	r3, #1
 8011c5c:	d104      	bne.n	8011c68 <f_write+0xfc>
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	2202      	movs	r2, #2
 8011c62:	755a      	strb	r2, [r3, #21]
 8011c64:	2302      	movs	r3, #2
 8011c66:	e0f2      	b.n	8011e4e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c6e:	d104      	bne.n	8011c7a <f_write+0x10e>
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	2201      	movs	r2, #1
 8011c74:	755a      	strb	r2, [r3, #21]
 8011c76:	2301      	movs	r3, #1
 8011c78:	e0e9      	b.n	8011e4e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c7e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	689b      	ldr	r3, [r3, #8]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d102      	bne.n	8011c8e <f_write+0x122>
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c8c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	7d1b      	ldrb	r3, [r3, #20]
 8011c92:	b25b      	sxtb	r3, r3
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	da18      	bge.n	8011cca <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	7858      	ldrb	r0, [r3, #1]
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	6a1a      	ldr	r2, [r3, #32]
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	f7fe f886 	bl	800fdb8 <disk_write>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d004      	beq.n	8011cbc <f_write+0x150>
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2201      	movs	r2, #1
 8011cb6:	755a      	strb	r2, [r3, #21]
 8011cb8:	2301      	movs	r3, #1
 8011cba:	e0c8      	b.n	8011e4e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	7d1b      	ldrb	r3, [r3, #20]
 8011cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cc4:	b2da      	uxtb	r2, r3
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011cca:	693a      	ldr	r2, [r7, #16]
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	69db      	ldr	r3, [r3, #28]
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	4610      	mov	r0, r2
 8011cd4:	f7fe fbfa 	bl	80104cc <clust2sect>
 8011cd8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d104      	bne.n	8011cea <f_write+0x17e>
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2202      	movs	r2, #2
 8011ce4:	755a      	strb	r2, [r3, #21]
 8011ce6:	2302      	movs	r3, #2
 8011ce8:	e0b1      	b.n	8011e4e <f_write+0x2e2>
			sect += csect;
 8011cea:	697a      	ldr	r2, [r7, #20]
 8011cec:	69bb      	ldr	r3, [r7, #24]
 8011cee:	4413      	add	r3, r2
 8011cf0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	0a5b      	lsrs	r3, r3, #9
 8011cf6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011cf8:	6a3b      	ldr	r3, [r7, #32]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d03c      	beq.n	8011d78 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011cfe:	69ba      	ldr	r2, [r7, #24]
 8011d00:	6a3b      	ldr	r3, [r7, #32]
 8011d02:	4413      	add	r3, r2
 8011d04:	693a      	ldr	r2, [r7, #16]
 8011d06:	8952      	ldrh	r2, [r2, #10]
 8011d08:	4293      	cmp	r3, r2
 8011d0a:	d905      	bls.n	8011d18 <f_write+0x1ac>
					cc = fs->csize - csect;
 8011d0c:	693b      	ldr	r3, [r7, #16]
 8011d0e:	895b      	ldrh	r3, [r3, #10]
 8011d10:	461a      	mov	r2, r3
 8011d12:	69bb      	ldr	r3, [r7, #24]
 8011d14:	1ad3      	subs	r3, r2, r3
 8011d16:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d18:	693b      	ldr	r3, [r7, #16]
 8011d1a:	7858      	ldrb	r0, [r3, #1]
 8011d1c:	6a3b      	ldr	r3, [r7, #32]
 8011d1e:	697a      	ldr	r2, [r7, #20]
 8011d20:	69f9      	ldr	r1, [r7, #28]
 8011d22:	f7fe f849 	bl	800fdb8 <disk_write>
 8011d26:	4603      	mov	r3, r0
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d004      	beq.n	8011d36 <f_write+0x1ca>
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2201      	movs	r2, #1
 8011d30:	755a      	strb	r2, [r3, #21]
 8011d32:	2301      	movs	r3, #1
 8011d34:	e08b      	b.n	8011e4e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	6a1a      	ldr	r2, [r3, #32]
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	1ad3      	subs	r3, r2, r3
 8011d3e:	6a3a      	ldr	r2, [r7, #32]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d915      	bls.n	8011d70 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	6a1a      	ldr	r2, [r3, #32]
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	1ad3      	subs	r3, r2, r3
 8011d52:	025b      	lsls	r3, r3, #9
 8011d54:	69fa      	ldr	r2, [r7, #28]
 8011d56:	4413      	add	r3, r2
 8011d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d5c:	4619      	mov	r1, r3
 8011d5e:	f7fe f8eb 	bl	800ff38 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	7d1b      	ldrb	r3, [r3, #20]
 8011d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d6a:	b2da      	uxtb	r2, r3
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011d70:	6a3b      	ldr	r3, [r7, #32]
 8011d72:	025b      	lsls	r3, r3, #9
 8011d74:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011d76:	e03f      	b.n	8011df8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	6a1b      	ldr	r3, [r3, #32]
 8011d7c:	697a      	ldr	r2, [r7, #20]
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d016      	beq.n	8011db0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	699a      	ldr	r2, [r3, #24]
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	d210      	bcs.n	8011db0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	7858      	ldrb	r0, [r3, #1]
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d98:	2301      	movs	r3, #1
 8011d9a:	697a      	ldr	r2, [r7, #20]
 8011d9c:	f7fd ffec 	bl	800fd78 <disk_read>
 8011da0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d004      	beq.n	8011db0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	2201      	movs	r2, #1
 8011daa:	755a      	strb	r2, [r3, #21]
 8011dac:	2301      	movs	r3, #1
 8011dae:	e04e      	b.n	8011e4e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	697a      	ldr	r2, [r7, #20]
 8011db4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	699b      	ldr	r3, [r3, #24]
 8011dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dbe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011dc2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d901      	bls.n	8011dd0 <f_write+0x264>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	699b      	ldr	r3, [r3, #24]
 8011dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dde:	4413      	add	r3, r2
 8011de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011de2:	69f9      	ldr	r1, [r7, #28]
 8011de4:	4618      	mov	r0, r3
 8011de6:	f7fe f8a7 	bl	800ff38 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	7d1b      	ldrb	r3, [r3, #20]
 8011dee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011df2:	b2da      	uxtb	r2, r3
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011df8:	69fa      	ldr	r2, [r7, #28]
 8011dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfc:	4413      	add	r3, r2
 8011dfe:	61fb      	str	r3, [r7, #28]
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	699a      	ldr	r2, [r3, #24]
 8011e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e06:	441a      	add	r2, r3
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	619a      	str	r2, [r3, #24]
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	68da      	ldr	r2, [r3, #12]
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	699b      	ldr	r3, [r3, #24]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	bf38      	it	cc
 8011e18:	461a      	movcc	r2, r3
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	60da      	str	r2, [r3, #12]
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e24:	441a      	add	r2, r3
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	601a      	str	r2, [r3, #0]
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2e:	1ad3      	subs	r3, r2, r3
 8011e30:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	f47f aed4 	bne.w	8011be2 <f_write+0x76>
 8011e3a:	e000      	b.n	8011e3e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011e3c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	7d1b      	ldrb	r3, [r3, #20]
 8011e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e46:	b2da      	uxtb	r2, r3
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011e4c:	2300      	movs	r3, #0
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3730      	adds	r7, #48	; 0x30
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}

08011e56 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011e56:	b580      	push	{r7, lr}
 8011e58:	b086      	sub	sp, #24
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	f107 0208 	add.w	r2, r7, #8
 8011e64:	4611      	mov	r1, r2
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7ff fc46 	bl	80116f8 <validate>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011e70:	7dfb      	ldrb	r3, [r7, #23]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d168      	bne.n	8011f48 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	7d1b      	ldrb	r3, [r3, #20]
 8011e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d062      	beq.n	8011f48 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	7d1b      	ldrb	r3, [r3, #20]
 8011e86:	b25b      	sxtb	r3, r3
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	da15      	bge.n	8011eb8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	7858      	ldrb	r0, [r3, #1]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6a1a      	ldr	r2, [r3, #32]
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	f7fd ff8c 	bl	800fdb8 <disk_write>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d001      	beq.n	8011eaa <f_sync+0x54>
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	e04f      	b.n	8011f4a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	7d1b      	ldrb	r3, [r3, #20]
 8011eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011eb2:	b2da      	uxtb	r2, r3
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011eb8:	f7fa fee4 	bl	800cc84 <get_fattime>
 8011ebc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011ebe:	68ba      	ldr	r2, [r7, #8]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	4610      	mov	r0, r2
 8011ec8:	f7fe fa64 	bl	8010394 <move_window>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011ed0:	7dfb      	ldrb	r3, [r7, #23]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d138      	bne.n	8011f48 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eda:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	330b      	adds	r3, #11
 8011ee0:	781a      	ldrb	r2, [r3, #0]
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	330b      	adds	r3, #11
 8011ee6:	f042 0220 	orr.w	r2, r2, #32
 8011eea:	b2d2      	uxtb	r2, r2
 8011eec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	6818      	ldr	r0, [r3, #0]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	689b      	ldr	r3, [r3, #8]
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	68f9      	ldr	r1, [r7, #12]
 8011efa:	f7fe ff69 	bl	8010dd0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f103 021c 	add.w	r2, r3, #28
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	68db      	ldr	r3, [r3, #12]
 8011f08:	4619      	mov	r1, r3
 8011f0a:	4610      	mov	r0, r2
 8011f0c:	f7fd ffe8 	bl	800fee0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	3316      	adds	r3, #22
 8011f14:	6939      	ldr	r1, [r7, #16]
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7fd ffe2 	bl	800fee0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	3312      	adds	r3, #18
 8011f20:	2100      	movs	r1, #0
 8011f22:	4618      	mov	r0, r3
 8011f24:	f7fd ffc1 	bl	800feaa <st_word>
					fs->wflag = 1;
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	2201      	movs	r2, #1
 8011f2c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7fe fa5d 	bl	80103f0 <sync_fs>
 8011f36:	4603      	mov	r3, r0
 8011f38:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	7d1b      	ldrb	r3, [r3, #20]
 8011f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f42:	b2da      	uxtb	r2, r3
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3718      	adds	r7, #24
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}

08011f52 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011f52:	b580      	push	{r7, lr}
 8011f54:	b084      	sub	sp, #16
 8011f56:	af00      	add	r7, sp, #0
 8011f58:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f7ff ff7b 	bl	8011e56 <f_sync>
 8011f60:	4603      	mov	r3, r0
 8011f62:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011f64:	7bfb      	ldrb	r3, [r7, #15]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d118      	bne.n	8011f9c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f107 0208 	add.w	r2, r7, #8
 8011f70:	4611      	mov	r1, r2
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7ff fbc0 	bl	80116f8 <validate>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011f7c:	7bfb      	ldrb	r3, [r7, #15]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d10c      	bne.n	8011f9c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	691b      	ldr	r3, [r3, #16]
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7fe f960 	bl	801024c <dec_lock>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011f90:	7bfb      	ldrb	r3, [r7, #15]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d102      	bne.n	8011f9c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2200      	movs	r2, #0
 8011f9a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3710      	adds	r7, #16
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
	...

08011fa8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b087      	sub	sp, #28
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	60f8      	str	r0, [r7, #12]
 8011fb0:	60b9      	str	r1, [r7, #8]
 8011fb2:	4613      	mov	r3, r2
 8011fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011fbe:	4b1f      	ldr	r3, [pc, #124]	; (801203c <FATFS_LinkDriverEx+0x94>)
 8011fc0:	7a5b      	ldrb	r3, [r3, #9]
 8011fc2:	b2db      	uxtb	r3, r3
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d131      	bne.n	801202c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011fc8:	4b1c      	ldr	r3, [pc, #112]	; (801203c <FATFS_LinkDriverEx+0x94>)
 8011fca:	7a5b      	ldrb	r3, [r3, #9]
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	461a      	mov	r2, r3
 8011fd0:	4b1a      	ldr	r3, [pc, #104]	; (801203c <FATFS_LinkDriverEx+0x94>)
 8011fd2:	2100      	movs	r1, #0
 8011fd4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011fd6:	4b19      	ldr	r3, [pc, #100]	; (801203c <FATFS_LinkDriverEx+0x94>)
 8011fd8:	7a5b      	ldrb	r3, [r3, #9]
 8011fda:	b2db      	uxtb	r3, r3
 8011fdc:	4a17      	ldr	r2, [pc, #92]	; (801203c <FATFS_LinkDriverEx+0x94>)
 8011fde:	009b      	lsls	r3, r3, #2
 8011fe0:	4413      	add	r3, r2
 8011fe2:	68fa      	ldr	r2, [r7, #12]
 8011fe4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011fe6:	4b15      	ldr	r3, [pc, #84]	; (801203c <FATFS_LinkDriverEx+0x94>)
 8011fe8:	7a5b      	ldrb	r3, [r3, #9]
 8011fea:	b2db      	uxtb	r3, r3
 8011fec:	461a      	mov	r2, r3
 8011fee:	4b13      	ldr	r3, [pc, #76]	; (801203c <FATFS_LinkDriverEx+0x94>)
 8011ff0:	4413      	add	r3, r2
 8011ff2:	79fa      	ldrb	r2, [r7, #7]
 8011ff4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011ff6:	4b11      	ldr	r3, [pc, #68]	; (801203c <FATFS_LinkDriverEx+0x94>)
 8011ff8:	7a5b      	ldrb	r3, [r3, #9]
 8011ffa:	b2db      	uxtb	r3, r3
 8011ffc:	1c5a      	adds	r2, r3, #1
 8011ffe:	b2d1      	uxtb	r1, r2
 8012000:	4a0e      	ldr	r2, [pc, #56]	; (801203c <FATFS_LinkDriverEx+0x94>)
 8012002:	7251      	strb	r1, [r2, #9]
 8012004:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012006:	7dbb      	ldrb	r3, [r7, #22]
 8012008:	3330      	adds	r3, #48	; 0x30
 801200a:	b2da      	uxtb	r2, r3
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	3301      	adds	r3, #1
 8012014:	223a      	movs	r2, #58	; 0x3a
 8012016:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	3302      	adds	r3, #2
 801201c:	222f      	movs	r2, #47	; 0x2f
 801201e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	3303      	adds	r3, #3
 8012024:	2200      	movs	r2, #0
 8012026:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012028:	2300      	movs	r3, #0
 801202a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801202c:	7dfb      	ldrb	r3, [r7, #23]
}
 801202e:	4618      	mov	r0, r3
 8012030:	371c      	adds	r7, #28
 8012032:	46bd      	mov	sp, r7
 8012034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012038:	4770      	bx	lr
 801203a:	bf00      	nop
 801203c:	2400021c 	.word	0x2400021c

08012040 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801204a:	2200      	movs	r2, #0
 801204c:	6839      	ldr	r1, [r7, #0]
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f7ff ffaa 	bl	8011fa8 <FATFS_LinkDriverEx>
 8012054:	4603      	mov	r3, r0
}
 8012056:	4618      	mov	r0, r3
 8012058:	3708      	adds	r7, #8
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
	...

08012060 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012064:	2200      	movs	r2, #0
 8012066:	4913      	ldr	r1, [pc, #76]	; (80120b4 <MX_USB_DEVICE_Init+0x54>)
 8012068:	4813      	ldr	r0, [pc, #76]	; (80120b8 <MX_USB_DEVICE_Init+0x58>)
 801206a:	f7fc fd5e 	bl	800eb2a <USBD_Init>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d001      	beq.n	8012078 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012074:	f7ee ff98 	bl	8000fa8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8012078:	4910      	ldr	r1, [pc, #64]	; (80120bc <MX_USB_DEVICE_Init+0x5c>)
 801207a:	480f      	ldr	r0, [pc, #60]	; (80120b8 <MX_USB_DEVICE_Init+0x58>)
 801207c:	f7fc fd8b 	bl	800eb96 <USBD_RegisterClass>
 8012080:	4603      	mov	r3, r0
 8012082:	2b00      	cmp	r3, #0
 8012084:	d001      	beq.n	801208a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012086:	f7ee ff8f 	bl	8000fa8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801208a:	490d      	ldr	r1, [pc, #52]	; (80120c0 <MX_USB_DEVICE_Init+0x60>)
 801208c:	480a      	ldr	r0, [pc, #40]	; (80120b8 <MX_USB_DEVICE_Init+0x58>)
 801208e:	f7fb f935 	bl	800d2fc <USBD_MSC_RegisterStorage>
 8012092:	4603      	mov	r3, r0
 8012094:	2b00      	cmp	r3, #0
 8012096:	d001      	beq.n	801209c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012098:	f7ee ff86 	bl	8000fa8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801209c:	4806      	ldr	r0, [pc, #24]	; (80120b8 <MX_USB_DEVICE_Init+0x58>)
 801209e:	f7fc fd9b 	bl	800ebd8 <USBD_Start>
 80120a2:	4603      	mov	r3, r0
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d001      	beq.n	80120ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80120a8:	f7ee ff7e 	bl	8000fa8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80120ac:	f7f3 f8e4 	bl	8005278 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80120b0:	bf00      	nop
 80120b2:	bd80      	pop	{r7, pc}
 80120b4:	240000f8 	.word	0x240000f8
 80120b8:	24000ed8 	.word	0x24000ed8
 80120bc:	24000010 	.word	0x24000010
 80120c0:	24000148 	.word	0x24000148

080120c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120c4:	b480      	push	{r7}
 80120c6:	b083      	sub	sp, #12
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	4603      	mov	r3, r0
 80120cc:	6039      	str	r1, [r7, #0]
 80120ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	2212      	movs	r2, #18
 80120d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80120d6:	4b03      	ldr	r3, [pc, #12]	; (80120e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80120d8:	4618      	mov	r0, r3
 80120da:	370c      	adds	r7, #12
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr
 80120e4:	24000114 	.word	0x24000114

080120e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120e8:	b480      	push	{r7}
 80120ea:	b083      	sub	sp, #12
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	4603      	mov	r3, r0
 80120f0:	6039      	str	r1, [r7, #0]
 80120f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	2204      	movs	r2, #4
 80120f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80120fa:	4b03      	ldr	r3, [pc, #12]	; (8012108 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	370c      	adds	r7, #12
 8012100:	46bd      	mov	sp, r7
 8012102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012106:	4770      	bx	lr
 8012108:	24000128 	.word	0x24000128

0801210c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b082      	sub	sp, #8
 8012110:	af00      	add	r7, sp, #0
 8012112:	4603      	mov	r3, r0
 8012114:	6039      	str	r1, [r7, #0]
 8012116:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012118:	79fb      	ldrb	r3, [r7, #7]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d105      	bne.n	801212a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801211e:	683a      	ldr	r2, [r7, #0]
 8012120:	4907      	ldr	r1, [pc, #28]	; (8012140 <USBD_FS_ProductStrDescriptor+0x34>)
 8012122:	4808      	ldr	r0, [pc, #32]	; (8012144 <USBD_FS_ProductStrDescriptor+0x38>)
 8012124:	f7fd fd25 	bl	800fb72 <USBD_GetString>
 8012128:	e004      	b.n	8012134 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801212a:	683a      	ldr	r2, [r7, #0]
 801212c:	4904      	ldr	r1, [pc, #16]	; (8012140 <USBD_FS_ProductStrDescriptor+0x34>)
 801212e:	4805      	ldr	r0, [pc, #20]	; (8012144 <USBD_FS_ProductStrDescriptor+0x38>)
 8012130:	f7fd fd1f 	bl	800fb72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012134:	4b02      	ldr	r3, [pc, #8]	; (8012140 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012136:	4618      	mov	r0, r3
 8012138:	3708      	adds	r7, #8
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}
 801213e:	bf00      	nop
 8012140:	240011a8 	.word	0x240011a8
 8012144:	080133b8 	.word	0x080133b8

08012148 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	4603      	mov	r3, r0
 8012150:	6039      	str	r1, [r7, #0]
 8012152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012154:	683a      	ldr	r2, [r7, #0]
 8012156:	4904      	ldr	r1, [pc, #16]	; (8012168 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012158:	4804      	ldr	r0, [pc, #16]	; (801216c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801215a:	f7fd fd0a 	bl	800fb72 <USBD_GetString>
  return USBD_StrDesc;
 801215e:	4b02      	ldr	r3, [pc, #8]	; (8012168 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012160:	4618      	mov	r0, r3
 8012162:	3708      	adds	r7, #8
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}
 8012168:	240011a8 	.word	0x240011a8
 801216c:	080133cc 	.word	0x080133cc

08012170 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	4603      	mov	r3, r0
 8012178:	6039      	str	r1, [r7, #0]
 801217a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	221a      	movs	r2, #26
 8012180:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012182:	f000 f843 	bl	801220c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012186:	4b02      	ldr	r3, [pc, #8]	; (8012190 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012188:	4618      	mov	r0, r3
 801218a:	3708      	adds	r7, #8
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}
 8012190:	2400012c 	.word	0x2400012c

08012194 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b082      	sub	sp, #8
 8012198:	af00      	add	r7, sp, #0
 801219a:	4603      	mov	r3, r0
 801219c:	6039      	str	r1, [r7, #0]
 801219e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80121a0:	79fb      	ldrb	r3, [r7, #7]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d105      	bne.n	80121b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80121a6:	683a      	ldr	r2, [r7, #0]
 80121a8:	4907      	ldr	r1, [pc, #28]	; (80121c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80121aa:	4808      	ldr	r0, [pc, #32]	; (80121cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80121ac:	f7fd fce1 	bl	800fb72 <USBD_GetString>
 80121b0:	e004      	b.n	80121bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80121b2:	683a      	ldr	r2, [r7, #0]
 80121b4:	4904      	ldr	r1, [pc, #16]	; (80121c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80121b6:	4805      	ldr	r0, [pc, #20]	; (80121cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80121b8:	f7fd fcdb 	bl	800fb72 <USBD_GetString>
  }
  return USBD_StrDesc;
 80121bc:	4b02      	ldr	r3, [pc, #8]	; (80121c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3708      	adds	r7, #8
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}
 80121c6:	bf00      	nop
 80121c8:	240011a8 	.word	0x240011a8
 80121cc:	080133e0 	.word	0x080133e0

080121d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	4603      	mov	r3, r0
 80121d8:	6039      	str	r1, [r7, #0]
 80121da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80121dc:	79fb      	ldrb	r3, [r7, #7]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d105      	bne.n	80121ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80121e2:	683a      	ldr	r2, [r7, #0]
 80121e4:	4907      	ldr	r1, [pc, #28]	; (8012204 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80121e6:	4808      	ldr	r0, [pc, #32]	; (8012208 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80121e8:	f7fd fcc3 	bl	800fb72 <USBD_GetString>
 80121ec:	e004      	b.n	80121f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80121ee:	683a      	ldr	r2, [r7, #0]
 80121f0:	4904      	ldr	r1, [pc, #16]	; (8012204 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80121f2:	4805      	ldr	r0, [pc, #20]	; (8012208 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80121f4:	f7fd fcbd 	bl	800fb72 <USBD_GetString>
  }
  return USBD_StrDesc;
 80121f8:	4b02      	ldr	r3, [pc, #8]	; (8012204 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3708      	adds	r7, #8
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
 8012202:	bf00      	nop
 8012204:	240011a8 	.word	0x240011a8
 8012208:	080133ec 	.word	0x080133ec

0801220c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b084      	sub	sp, #16
 8012210:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012212:	4b0f      	ldr	r3, [pc, #60]	; (8012250 <Get_SerialNum+0x44>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012218:	4b0e      	ldr	r3, [pc, #56]	; (8012254 <Get_SerialNum+0x48>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801221e:	4b0e      	ldr	r3, [pc, #56]	; (8012258 <Get_SerialNum+0x4c>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012224:	68fa      	ldr	r2, [r7, #12]
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	4413      	add	r3, r2
 801222a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d009      	beq.n	8012246 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012232:	2208      	movs	r2, #8
 8012234:	4909      	ldr	r1, [pc, #36]	; (801225c <Get_SerialNum+0x50>)
 8012236:	68f8      	ldr	r0, [r7, #12]
 8012238:	f000 f814 	bl	8012264 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801223c:	2204      	movs	r2, #4
 801223e:	4908      	ldr	r1, [pc, #32]	; (8012260 <Get_SerialNum+0x54>)
 8012240:	68b8      	ldr	r0, [r7, #8]
 8012242:	f000 f80f 	bl	8012264 <IntToUnicode>
  }
}
 8012246:	bf00      	nop
 8012248:	3710      	adds	r7, #16
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	1ff1e800 	.word	0x1ff1e800
 8012254:	1ff1e804 	.word	0x1ff1e804
 8012258:	1ff1e808 	.word	0x1ff1e808
 801225c:	2400012e 	.word	0x2400012e
 8012260:	2400013e 	.word	0x2400013e

08012264 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012264:	b480      	push	{r7}
 8012266:	b087      	sub	sp, #28
 8012268:	af00      	add	r7, sp, #0
 801226a:	60f8      	str	r0, [r7, #12]
 801226c:	60b9      	str	r1, [r7, #8]
 801226e:	4613      	mov	r3, r2
 8012270:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012272:	2300      	movs	r3, #0
 8012274:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012276:	2300      	movs	r3, #0
 8012278:	75fb      	strb	r3, [r7, #23]
 801227a:	e027      	b.n	80122cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	0f1b      	lsrs	r3, r3, #28
 8012280:	2b09      	cmp	r3, #9
 8012282:	d80b      	bhi.n	801229c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	0f1b      	lsrs	r3, r3, #28
 8012288:	b2da      	uxtb	r2, r3
 801228a:	7dfb      	ldrb	r3, [r7, #23]
 801228c:	005b      	lsls	r3, r3, #1
 801228e:	4619      	mov	r1, r3
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	440b      	add	r3, r1
 8012294:	3230      	adds	r2, #48	; 0x30
 8012296:	b2d2      	uxtb	r2, r2
 8012298:	701a      	strb	r2, [r3, #0]
 801229a:	e00a      	b.n	80122b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	0f1b      	lsrs	r3, r3, #28
 80122a0:	b2da      	uxtb	r2, r3
 80122a2:	7dfb      	ldrb	r3, [r7, #23]
 80122a4:	005b      	lsls	r3, r3, #1
 80122a6:	4619      	mov	r1, r3
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	440b      	add	r3, r1
 80122ac:	3237      	adds	r2, #55	; 0x37
 80122ae:	b2d2      	uxtb	r2, r2
 80122b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	011b      	lsls	r3, r3, #4
 80122b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80122b8:	7dfb      	ldrb	r3, [r7, #23]
 80122ba:	005b      	lsls	r3, r3, #1
 80122bc:	3301      	adds	r3, #1
 80122be:	68ba      	ldr	r2, [r7, #8]
 80122c0:	4413      	add	r3, r2
 80122c2:	2200      	movs	r2, #0
 80122c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80122c6:	7dfb      	ldrb	r3, [r7, #23]
 80122c8:	3301      	adds	r3, #1
 80122ca:	75fb      	strb	r3, [r7, #23]
 80122cc:	7dfa      	ldrb	r2, [r7, #23]
 80122ce:	79fb      	ldrb	r3, [r7, #7]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d3d3      	bcc.n	801227c <IntToUnicode+0x18>
  }
}
 80122d4:	bf00      	nop
 80122d6:	371c      	adds	r7, #28
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr

080122e0 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	4603      	mov	r3, r0
 80122e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80122ea:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	370c      	adds	r7, #12
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr

080122f8 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b08e      	sub	sp, #56	; 0x38
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	4603      	mov	r3, r0
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	607a      	str	r2, [r7, #4]
 8012304:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8012306:	23ff      	movs	r3, #255	; 0xff
 8012308:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 801230c:	f107 0310 	add.w	r3, r7, #16
 8012310:	4619      	mov	r1, r3
 8012312:	480a      	ldr	r0, [pc, #40]	; (801233c <STORAGE_GetCapacity_FS+0x44>)
 8012314:	f7f6 fce6 	bl	8008ce4 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8012318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801231a:	1e5a      	subs	r2, r3, #1
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8012320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012322:	b29a      	uxth	r2, r3
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8012328:	2300      	movs	r3, #0
 801232a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 801232e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8012332:	4618      	mov	r0, r3
 8012334:	3738      	adds	r7, #56	; 0x38
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
 801233a:	bf00      	nop
 801233c:	24000564 	.word	0x24000564

08012340 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8012340:	b480      	push	{r7}
 8012342:	b083      	sub	sp, #12
 8012344:	af00      	add	r7, sp, #0
 8012346:	4603      	mov	r3, r0
 8012348:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801234a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801234c:	4618      	mov	r0, r3
 801234e:	370c      	adds	r7, #12
 8012350:	46bd      	mov	sp, r7
 8012352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012356:	4770      	bx	lr

08012358 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8012358:	b480      	push	{r7}
 801235a:	b083      	sub	sp, #12
 801235c:	af00      	add	r7, sp, #0
 801235e:	4603      	mov	r3, r0
 8012360:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8012362:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012364:	4618      	mov	r0, r3
 8012366:	370c      	adds	r7, #12
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr

08012370 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b088      	sub	sp, #32
 8012374:	af02      	add	r7, sp, #8
 8012376:	60b9      	str	r1, [r7, #8]
 8012378:	607a      	str	r2, [r7, #4]
 801237a:	461a      	mov	r2, r3
 801237c:	4603      	mov	r3, r0
 801237e:	73fb      	strb	r3, [r7, #15]
 8012380:	4613      	mov	r3, r2
 8012382:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8012384:	23ff      	movs	r3, #255	; 0xff
 8012386:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8012388:	89ba      	ldrh	r2, [r7, #12]
 801238a:	f04f 33ff 	mov.w	r3, #4294967295
 801238e:	9300      	str	r3, [sp, #0]
 8012390:	4613      	mov	r3, r2
 8012392:	687a      	ldr	r2, [r7, #4]
 8012394:	68b9      	ldr	r1, [r7, #8]
 8012396:	4809      	ldr	r0, [pc, #36]	; (80123bc <STORAGE_Read_FS+0x4c>)
 8012398:	f7f5 ff26 	bl	80081e8 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 801239c:	bf00      	nop
 801239e:	4807      	ldr	r0, [pc, #28]	; (80123bc <STORAGE_Read_FS+0x4c>)
 80123a0:	f7f6 fd76 	bl	8008e90 <HAL_SD_GetCardState>
 80123a4:	4603      	mov	r3, r0
 80123a6:	2b04      	cmp	r3, #4
 80123a8:	d1f9      	bne.n	801239e <STORAGE_Read_FS+0x2e>
	ret = 0;
 80123aa:	2300      	movs	r3, #0
 80123ac:	75fb      	strb	r3, [r7, #23]
	return ret;
 80123ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3718      	adds	r7, #24
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	24000564 	.word	0x24000564

080123c0 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b088      	sub	sp, #32
 80123c4:	af02      	add	r7, sp, #8
 80123c6:	60b9      	str	r1, [r7, #8]
 80123c8:	607a      	str	r2, [r7, #4]
 80123ca:	461a      	mov	r2, r3
 80123cc:	4603      	mov	r3, r0
 80123ce:	73fb      	strb	r3, [r7, #15]
 80123d0:	4613      	mov	r3, r2
 80123d2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 80123d4:	23ff      	movs	r3, #255	; 0xff
 80123d6:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80123d8:	89ba      	ldrh	r2, [r7, #12]
 80123da:	f04f 33ff 	mov.w	r3, #4294967295
 80123de:	9300      	str	r3, [sp, #0]
 80123e0:	4613      	mov	r3, r2
 80123e2:	687a      	ldr	r2, [r7, #4]
 80123e4:	68b9      	ldr	r1, [r7, #8]
 80123e6:	4809      	ldr	r0, [pc, #36]	; (801240c <STORAGE_Write_FS+0x4c>)
 80123e8:	f7f6 f888 	bl	80084fc <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80123ec:	bf00      	nop
 80123ee:	4807      	ldr	r0, [pc, #28]	; (801240c <STORAGE_Write_FS+0x4c>)
 80123f0:	f7f6 fd4e 	bl	8008e90 <HAL_SD_GetCardState>
 80123f4:	4603      	mov	r3, r0
 80123f6:	2b04      	cmp	r3, #4
 80123f8:	d1f9      	bne.n	80123ee <STORAGE_Write_FS+0x2e>
	ret = 0;
 80123fa:	2300      	movs	r3, #0
 80123fc:	75fb      	strb	r3, [r7, #23]
	return ret;
 80123fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8012402:	4618      	mov	r0, r3
 8012404:	3718      	adds	r7, #24
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
 801240a:	bf00      	nop
 801240c:	24000564 	.word	0x24000564

08012410 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8012410:	b480      	push	{r7}
 8012412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8012414:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012416:	4618      	mov	r0, r3
 8012418:	46bd      	mov	sp, r7
 801241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241e:	4770      	bx	lr

08012420 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b08a      	sub	sp, #40	; 0x28
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012428:	f107 0314 	add.w	r3, r7, #20
 801242c:	2200      	movs	r2, #0
 801242e:	601a      	str	r2, [r3, #0]
 8012430:	605a      	str	r2, [r3, #4]
 8012432:	609a      	str	r2, [r3, #8]
 8012434:	60da      	str	r2, [r3, #12]
 8012436:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	4a1e      	ldr	r2, [pc, #120]	; (80124b8 <HAL_PCD_MspInit+0x98>)
 801243e:	4293      	cmp	r3, r2
 8012440:	d136      	bne.n	80124b0 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012442:	4b1e      	ldr	r3, [pc, #120]	; (80124bc <HAL_PCD_MspInit+0x9c>)
 8012444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012448:	4a1c      	ldr	r2, [pc, #112]	; (80124bc <HAL_PCD_MspInit+0x9c>)
 801244a:	f043 0301 	orr.w	r3, r3, #1
 801244e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012452:	4b1a      	ldr	r3, [pc, #104]	; (80124bc <HAL_PCD_MspInit+0x9c>)
 8012454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012458:	f003 0301 	and.w	r3, r3, #1
 801245c:	613b      	str	r3, [r7, #16]
 801245e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012460:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012466:	2302      	movs	r3, #2
 8012468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801246a:	2300      	movs	r3, #0
 801246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801246e:	2300      	movs	r3, #0
 8012470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012472:	230a      	movs	r3, #10
 8012474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012476:	f107 0314 	add.w	r3, r7, #20
 801247a:	4619      	mov	r1, r3
 801247c:	4810      	ldr	r0, [pc, #64]	; (80124c0 <HAL_PCD_MspInit+0xa0>)
 801247e:	f7f1 fad5 	bl	8003a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012482:	4b0e      	ldr	r3, [pc, #56]	; (80124bc <HAL_PCD_MspInit+0x9c>)
 8012484:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012488:	4a0c      	ldr	r2, [pc, #48]	; (80124bc <HAL_PCD_MspInit+0x9c>)
 801248a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801248e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012492:	4b0a      	ldr	r3, [pc, #40]	; (80124bc <HAL_PCD_MspInit+0x9c>)
 8012494:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801249c:	60fb      	str	r3, [r7, #12]
 801249e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80124a0:	2200      	movs	r2, #0
 80124a2:	2100      	movs	r1, #0
 80124a4:	2065      	movs	r0, #101	; 0x65
 80124a6:	f7ef fa62 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80124aa:	2065      	movs	r0, #101	; 0x65
 80124ac:	f7ef fa79 	bl	80019a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80124b0:	bf00      	nop
 80124b2:	3728      	adds	r7, #40	; 0x28
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}
 80124b8:	40080000 	.word	0x40080000
 80124bc:	58024400 	.word	0x58024400
 80124c0:	58020000 	.word	0x58020000

080124c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b082      	sub	sp, #8
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80124d8:	4619      	mov	r1, r3
 80124da:	4610      	mov	r0, r2
 80124dc:	f7fc fbc7 	bl	800ec6e <USBD_LL_SetupStage>
}
 80124e0:	bf00      	nop
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	460b      	mov	r3, r1
 80124f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80124fa:	78fa      	ldrb	r2, [r7, #3]
 80124fc:	6879      	ldr	r1, [r7, #4]
 80124fe:	4613      	mov	r3, r2
 8012500:	00db      	lsls	r3, r3, #3
 8012502:	1a9b      	subs	r3, r3, r2
 8012504:	009b      	lsls	r3, r3, #2
 8012506:	440b      	add	r3, r1
 8012508:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801250c:	681a      	ldr	r2, [r3, #0]
 801250e:	78fb      	ldrb	r3, [r7, #3]
 8012510:	4619      	mov	r1, r3
 8012512:	f7fc fbff 	bl	800ed14 <USBD_LL_DataOutStage>
}
 8012516:	bf00      	nop
 8012518:	3708      	adds	r7, #8
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}

0801251e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801251e:	b580      	push	{r7, lr}
 8012520:	b082      	sub	sp, #8
 8012522:	af00      	add	r7, sp, #0
 8012524:	6078      	str	r0, [r7, #4]
 8012526:	460b      	mov	r3, r1
 8012528:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012530:	78fa      	ldrb	r2, [r7, #3]
 8012532:	6879      	ldr	r1, [r7, #4]
 8012534:	4613      	mov	r3, r2
 8012536:	00db      	lsls	r3, r3, #3
 8012538:	1a9b      	subs	r3, r3, r2
 801253a:	009b      	lsls	r3, r3, #2
 801253c:	440b      	add	r3, r1
 801253e:	3348      	adds	r3, #72	; 0x48
 8012540:	681a      	ldr	r2, [r3, #0]
 8012542:	78fb      	ldrb	r3, [r7, #3]
 8012544:	4619      	mov	r1, r3
 8012546:	f7fc fc48 	bl	800edda <USBD_LL_DataInStage>
}
 801254a:	bf00      	nop
 801254c:	3708      	adds	r7, #8
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}

08012552 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012552:	b580      	push	{r7, lr}
 8012554:	b082      	sub	sp, #8
 8012556:	af00      	add	r7, sp, #0
 8012558:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012560:	4618      	mov	r0, r3
 8012562:	f7fc fd4c 	bl	800effe <USBD_LL_SOF>
}
 8012566:	bf00      	nop
 8012568:	3708      	adds	r7, #8
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}

0801256e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801256e:	b580      	push	{r7, lr}
 8012570:	b084      	sub	sp, #16
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012576:	2301      	movs	r3, #1
 8012578:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	68db      	ldr	r3, [r3, #12]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d102      	bne.n	8012588 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012582:	2300      	movs	r3, #0
 8012584:	73fb      	strb	r3, [r7, #15]
 8012586:	e008      	b.n	801259a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	68db      	ldr	r3, [r3, #12]
 801258c:	2b02      	cmp	r3, #2
 801258e:	d102      	bne.n	8012596 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012590:	2301      	movs	r3, #1
 8012592:	73fb      	strb	r3, [r7, #15]
 8012594:	e001      	b.n	801259a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012596:	f7ee fd07 	bl	8000fa8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80125a0:	7bfa      	ldrb	r2, [r7, #15]
 80125a2:	4611      	mov	r1, r2
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7fc fcef 	bl	800ef88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fc fca8 	bl	800ef06 <USBD_LL_Reset>
}
 80125b6:	bf00      	nop
 80125b8:	3710      	adds	r7, #16
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}
	...

080125c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7fc fcea 	bl	800efa8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	687a      	ldr	r2, [r7, #4]
 80125e0:	6812      	ldr	r2, [r2, #0]
 80125e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80125e6:	f043 0301 	orr.w	r3, r3, #1
 80125ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6a1b      	ldr	r3, [r3, #32]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d005      	beq.n	8012600 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80125f4:	4b04      	ldr	r3, [pc, #16]	; (8012608 <HAL_PCD_SuspendCallback+0x48>)
 80125f6:	691b      	ldr	r3, [r3, #16]
 80125f8:	4a03      	ldr	r2, [pc, #12]	; (8012608 <HAL_PCD_SuspendCallback+0x48>)
 80125fa:	f043 0306 	orr.w	r3, r3, #6
 80125fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012600:	bf00      	nop
 8012602:	3708      	adds	r7, #8
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}
 8012608:	e000ed00 	.word	0xe000ed00

0801260c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801261a:	4618      	mov	r0, r3
 801261c:	f7fc fcd9 	bl	800efd2 <USBD_LL_Resume>
}
 8012620:	bf00      	nop
 8012622:	3708      	adds	r7, #8
 8012624:	46bd      	mov	sp, r7
 8012626:	bd80      	pop	{r7, pc}

08012628 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b082      	sub	sp, #8
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	460b      	mov	r3, r1
 8012632:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801263a:	78fa      	ldrb	r2, [r7, #3]
 801263c:	4611      	mov	r1, r2
 801263e:	4618      	mov	r0, r3
 8012640:	f7fc fd04 	bl	800f04c <USBD_LL_IsoOUTIncomplete>
}
 8012644:	bf00      	nop
 8012646:	3708      	adds	r7, #8
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	460b      	mov	r3, r1
 8012656:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801265e:	78fa      	ldrb	r2, [r7, #3]
 8012660:	4611      	mov	r1, r2
 8012662:	4618      	mov	r0, r3
 8012664:	f7fc fce5 	bl	800f032 <USBD_LL_IsoINIncomplete>
}
 8012668:	bf00      	nop
 801266a:	3708      	adds	r7, #8
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b082      	sub	sp, #8
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801267e:	4618      	mov	r0, r3
 8012680:	f7fc fcf1 	bl	800f066 <USBD_LL_DevConnected>
}
 8012684:	bf00      	nop
 8012686:	3708      	adds	r7, #8
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}

0801268c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b082      	sub	sp, #8
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801269a:	4618      	mov	r0, r3
 801269c:	f7fc fcee 	bl	800f07c <USBD_LL_DevDisconnected>
}
 80126a0:	bf00      	nop
 80126a2:	3708      	adds	r7, #8
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}

080126a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	781b      	ldrb	r3, [r3, #0]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d13e      	bne.n	8012736 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80126b8:	4a21      	ldr	r2, [pc, #132]	; (8012740 <USBD_LL_Init+0x98>)
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	4a1f      	ldr	r2, [pc, #124]	; (8012740 <USBD_LL_Init+0x98>)
 80126c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80126c8:	4b1d      	ldr	r3, [pc, #116]	; (8012740 <USBD_LL_Init+0x98>)
 80126ca:	4a1e      	ldr	r2, [pc, #120]	; (8012744 <USBD_LL_Init+0x9c>)
 80126cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80126ce:	4b1c      	ldr	r3, [pc, #112]	; (8012740 <USBD_LL_Init+0x98>)
 80126d0:	2209      	movs	r2, #9
 80126d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80126d4:	4b1a      	ldr	r3, [pc, #104]	; (8012740 <USBD_LL_Init+0x98>)
 80126d6:	2202      	movs	r2, #2
 80126d8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80126da:	4b19      	ldr	r3, [pc, #100]	; (8012740 <USBD_LL_Init+0x98>)
 80126dc:	2200      	movs	r2, #0
 80126de:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80126e0:	4b17      	ldr	r3, [pc, #92]	; (8012740 <USBD_LL_Init+0x98>)
 80126e2:	2202      	movs	r2, #2
 80126e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80126e6:	4b16      	ldr	r3, [pc, #88]	; (8012740 <USBD_LL_Init+0x98>)
 80126e8:	2200      	movs	r2, #0
 80126ea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80126ec:	4b14      	ldr	r3, [pc, #80]	; (8012740 <USBD_LL_Init+0x98>)
 80126ee:	2200      	movs	r2, #0
 80126f0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80126f2:	4b13      	ldr	r3, [pc, #76]	; (8012740 <USBD_LL_Init+0x98>)
 80126f4:	2200      	movs	r2, #0
 80126f6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80126f8:	4b11      	ldr	r3, [pc, #68]	; (8012740 <USBD_LL_Init+0x98>)
 80126fa:	2200      	movs	r2, #0
 80126fc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80126fe:	4b10      	ldr	r3, [pc, #64]	; (8012740 <USBD_LL_Init+0x98>)
 8012700:	2200      	movs	r2, #0
 8012702:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012704:	4b0e      	ldr	r3, [pc, #56]	; (8012740 <USBD_LL_Init+0x98>)
 8012706:	2200      	movs	r2, #0
 8012708:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801270a:	480d      	ldr	r0, [pc, #52]	; (8012740 <USBD_LL_Init+0x98>)
 801270c:	f7f1 fb72 	bl	8003df4 <HAL_PCD_Init>
 8012710:	4603      	mov	r3, r0
 8012712:	2b00      	cmp	r3, #0
 8012714:	d001      	beq.n	801271a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012716:	f7ee fc47 	bl	8000fa8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801271a:	2180      	movs	r1, #128	; 0x80
 801271c:	4808      	ldr	r0, [pc, #32]	; (8012740 <USBD_LL_Init+0x98>)
 801271e:	f7f2 fd30 	bl	8005182 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012722:	2240      	movs	r2, #64	; 0x40
 8012724:	2100      	movs	r1, #0
 8012726:	4806      	ldr	r0, [pc, #24]	; (8012740 <USBD_LL_Init+0x98>)
 8012728:	f7f2 fce4 	bl	80050f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801272c:	2280      	movs	r2, #128	; 0x80
 801272e:	2101      	movs	r1, #1
 8012730:	4803      	ldr	r0, [pc, #12]	; (8012740 <USBD_LL_Init+0x98>)
 8012732:	f7f2 fcdf 	bl	80050f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012736:	2300      	movs	r3, #0
}
 8012738:	4618      	mov	r0, r3
 801273a:	3708      	adds	r7, #8
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}
 8012740:	240013a8 	.word	0x240013a8
 8012744:	40080000 	.word	0x40080000

08012748 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b084      	sub	sp, #16
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012750:	2300      	movs	r3, #0
 8012752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012754:	2300      	movs	r3, #0
 8012756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801275e:	4618      	mov	r0, r3
 8012760:	f7f1 fc6c 	bl	800403c <HAL_PCD_Start>
 8012764:	4603      	mov	r3, r0
 8012766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012768:	7bfb      	ldrb	r3, [r7, #15]
 801276a:	4618      	mov	r0, r3
 801276c:	f000 f94a 	bl	8012a04 <USBD_Get_USB_Status>
 8012770:	4603      	mov	r3, r0
 8012772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012774:	7bbb      	ldrb	r3, [r7, #14]
}
 8012776:	4618      	mov	r0, r3
 8012778:	3710      	adds	r7, #16
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}

0801277e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801277e:	b580      	push	{r7, lr}
 8012780:	b084      	sub	sp, #16
 8012782:	af00      	add	r7, sp, #0
 8012784:	6078      	str	r0, [r7, #4]
 8012786:	4608      	mov	r0, r1
 8012788:	4611      	mov	r1, r2
 801278a:	461a      	mov	r2, r3
 801278c:	4603      	mov	r3, r0
 801278e:	70fb      	strb	r3, [r7, #3]
 8012790:	460b      	mov	r3, r1
 8012792:	70bb      	strb	r3, [r7, #2]
 8012794:	4613      	mov	r3, r2
 8012796:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012798:	2300      	movs	r3, #0
 801279a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801279c:	2300      	movs	r3, #0
 801279e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80127a6:	78bb      	ldrb	r3, [r7, #2]
 80127a8:	883a      	ldrh	r2, [r7, #0]
 80127aa:	78f9      	ldrb	r1, [r7, #3]
 80127ac:	f7f2 f87d 	bl	80048aa <HAL_PCD_EP_Open>
 80127b0:	4603      	mov	r3, r0
 80127b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127b4:	7bfb      	ldrb	r3, [r7, #15]
 80127b6:	4618      	mov	r0, r3
 80127b8:	f000 f924 	bl	8012a04 <USBD_Get_USB_Status>
 80127bc:	4603      	mov	r3, r0
 80127be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3710      	adds	r7, #16
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}

080127ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127ca:	b580      	push	{r7, lr}
 80127cc:	b084      	sub	sp, #16
 80127ce:	af00      	add	r7, sp, #0
 80127d0:	6078      	str	r0, [r7, #4]
 80127d2:	460b      	mov	r3, r1
 80127d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127d6:	2300      	movs	r3, #0
 80127d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127da:	2300      	movs	r3, #0
 80127dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80127e4:	78fa      	ldrb	r2, [r7, #3]
 80127e6:	4611      	mov	r1, r2
 80127e8:	4618      	mov	r0, r3
 80127ea:	f7f2 f8c6 	bl	800497a <HAL_PCD_EP_Close>
 80127ee:	4603      	mov	r3, r0
 80127f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127f2:	7bfb      	ldrb	r3, [r7, #15]
 80127f4:	4618      	mov	r0, r3
 80127f6:	f000 f905 	bl	8012a04 <USBD_Get_USB_Status>
 80127fa:	4603      	mov	r3, r0
 80127fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8012800:	4618      	mov	r0, r3
 8012802:	3710      	adds	r7, #16
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}

08012808 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b084      	sub	sp, #16
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	460b      	mov	r3, r1
 8012812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012814:	2300      	movs	r3, #0
 8012816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012818:	2300      	movs	r3, #0
 801281a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012822:	78fa      	ldrb	r2, [r7, #3]
 8012824:	4611      	mov	r1, r2
 8012826:	4618      	mov	r0, r3
 8012828:	f7f2 fa58 	bl	8004cdc <HAL_PCD_EP_Flush>
 801282c:	4603      	mov	r3, r0
 801282e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012830:	7bfb      	ldrb	r3, [r7, #15]
 8012832:	4618      	mov	r0, r3
 8012834:	f000 f8e6 	bl	8012a04 <USBD_Get_USB_Status>
 8012838:	4603      	mov	r3, r0
 801283a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801283c:	7bbb      	ldrb	r3, [r7, #14]
}
 801283e:	4618      	mov	r0, r3
 8012840:	3710      	adds	r7, #16
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}

08012846 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012846:	b580      	push	{r7, lr}
 8012848:	b084      	sub	sp, #16
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
 801284e:	460b      	mov	r3, r1
 8012850:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012852:	2300      	movs	r3, #0
 8012854:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012856:	2300      	movs	r3, #0
 8012858:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012860:	78fa      	ldrb	r2, [r7, #3]
 8012862:	4611      	mov	r1, r2
 8012864:	4618      	mov	r0, r3
 8012866:	f7f2 f97f 	bl	8004b68 <HAL_PCD_EP_SetStall>
 801286a:	4603      	mov	r3, r0
 801286c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801286e:	7bfb      	ldrb	r3, [r7, #15]
 8012870:	4618      	mov	r0, r3
 8012872:	f000 f8c7 	bl	8012a04 <USBD_Get_USB_Status>
 8012876:	4603      	mov	r3, r0
 8012878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801287a:	7bbb      	ldrb	r3, [r7, #14]
}
 801287c:	4618      	mov	r0, r3
 801287e:	3710      	adds	r7, #16
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}

08012884 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b084      	sub	sp, #16
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	460b      	mov	r3, r1
 801288e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012890:	2300      	movs	r3, #0
 8012892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012894:	2300      	movs	r3, #0
 8012896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801289e:	78fa      	ldrb	r2, [r7, #3]
 80128a0:	4611      	mov	r1, r2
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7f2 f9c4 	bl	8004c30 <HAL_PCD_EP_ClrStall>
 80128a8:	4603      	mov	r3, r0
 80128aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128ac:	7bfb      	ldrb	r3, [r7, #15]
 80128ae:	4618      	mov	r0, r3
 80128b0:	f000 f8a8 	bl	8012a04 <USBD_Get_USB_Status>
 80128b4:	4603      	mov	r3, r0
 80128b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3710      	adds	r7, #16
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}

080128c2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80128c2:	b480      	push	{r7}
 80128c4:	b085      	sub	sp, #20
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	6078      	str	r0, [r7, #4]
 80128ca:	460b      	mov	r3, r1
 80128cc:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80128d4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80128d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	da0b      	bge.n	80128f6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80128de:	78fb      	ldrb	r3, [r7, #3]
 80128e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80128e4:	68f9      	ldr	r1, [r7, #12]
 80128e6:	4613      	mov	r3, r2
 80128e8:	00db      	lsls	r3, r3, #3
 80128ea:	1a9b      	subs	r3, r3, r2
 80128ec:	009b      	lsls	r3, r3, #2
 80128ee:	440b      	add	r3, r1
 80128f0:	333e      	adds	r3, #62	; 0x3e
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	e00b      	b.n	801290e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80128f6:	78fb      	ldrb	r3, [r7, #3]
 80128f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80128fc:	68f9      	ldr	r1, [r7, #12]
 80128fe:	4613      	mov	r3, r2
 8012900:	00db      	lsls	r3, r3, #3
 8012902:	1a9b      	subs	r3, r3, r2
 8012904:	009b      	lsls	r3, r3, #2
 8012906:	440b      	add	r3, r1
 8012908:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801290c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801290e:	4618      	mov	r0, r3
 8012910:	3714      	adds	r7, #20
 8012912:	46bd      	mov	sp, r7
 8012914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012918:	4770      	bx	lr

0801291a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801291a:	b580      	push	{r7, lr}
 801291c:	b084      	sub	sp, #16
 801291e:	af00      	add	r7, sp, #0
 8012920:	6078      	str	r0, [r7, #4]
 8012922:	460b      	mov	r3, r1
 8012924:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012926:	2300      	movs	r3, #0
 8012928:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801292a:	2300      	movs	r3, #0
 801292c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012934:	78fa      	ldrb	r2, [r7, #3]
 8012936:	4611      	mov	r1, r2
 8012938:	4618      	mov	r0, r3
 801293a:	f7f1 ff91 	bl	8004860 <HAL_PCD_SetAddress>
 801293e:	4603      	mov	r3, r0
 8012940:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012942:	7bfb      	ldrb	r3, [r7, #15]
 8012944:	4618      	mov	r0, r3
 8012946:	f000 f85d 	bl	8012a04 <USBD_Get_USB_Status>
 801294a:	4603      	mov	r3, r0
 801294c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801294e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012950:	4618      	mov	r0, r3
 8012952:	3710      	adds	r7, #16
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b086      	sub	sp, #24
 801295c:	af00      	add	r7, sp, #0
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	607a      	str	r2, [r7, #4]
 8012962:	603b      	str	r3, [r7, #0]
 8012964:	460b      	mov	r3, r1
 8012966:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012968:	2300      	movs	r3, #0
 801296a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801296c:	2300      	movs	r3, #0
 801296e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012976:	7af9      	ldrb	r1, [r7, #11]
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	687a      	ldr	r2, [r7, #4]
 801297c:	f7f2 f8aa 	bl	8004ad4 <HAL_PCD_EP_Transmit>
 8012980:	4603      	mov	r3, r0
 8012982:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012984:	7dfb      	ldrb	r3, [r7, #23]
 8012986:	4618      	mov	r0, r3
 8012988:	f000 f83c 	bl	8012a04 <USBD_Get_USB_Status>
 801298c:	4603      	mov	r3, r0
 801298e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012990:	7dbb      	ldrb	r3, [r7, #22]
}
 8012992:	4618      	mov	r0, r3
 8012994:	3718      	adds	r7, #24
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}

0801299a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801299a:	b580      	push	{r7, lr}
 801299c:	b086      	sub	sp, #24
 801299e:	af00      	add	r7, sp, #0
 80129a0:	60f8      	str	r0, [r7, #12]
 80129a2:	607a      	str	r2, [r7, #4]
 80129a4:	603b      	str	r3, [r7, #0]
 80129a6:	460b      	mov	r3, r1
 80129a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129aa:	2300      	movs	r3, #0
 80129ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129ae:	2300      	movs	r3, #0
 80129b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80129b8:	7af9      	ldrb	r1, [r7, #11]
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	687a      	ldr	r2, [r7, #4]
 80129be:	f7f2 f826 	bl	8004a0e <HAL_PCD_EP_Receive>
 80129c2:	4603      	mov	r3, r0
 80129c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129c6:	7dfb      	ldrb	r3, [r7, #23]
 80129c8:	4618      	mov	r0, r3
 80129ca:	f000 f81b 	bl	8012a04 <USBD_Get_USB_Status>
 80129ce:	4603      	mov	r3, r0
 80129d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80129d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3718      	adds	r7, #24
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}

080129dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b082      	sub	sp, #8
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	460b      	mov	r3, r1
 80129e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80129ee:	78fa      	ldrb	r2, [r7, #3]
 80129f0:	4611      	mov	r1, r2
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7f2 f856 	bl	8004aa4 <HAL_PCD_EP_GetRxCount>
 80129f8:	4603      	mov	r3, r0
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	3708      	adds	r7, #8
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}
	...

08012a04 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012a04:	b480      	push	{r7}
 8012a06:	b085      	sub	sp, #20
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012a12:	79fb      	ldrb	r3, [r7, #7]
 8012a14:	2b03      	cmp	r3, #3
 8012a16:	d817      	bhi.n	8012a48 <USBD_Get_USB_Status+0x44>
 8012a18:	a201      	add	r2, pc, #4	; (adr r2, 8012a20 <USBD_Get_USB_Status+0x1c>)
 8012a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a1e:	bf00      	nop
 8012a20:	08012a31 	.word	0x08012a31
 8012a24:	08012a37 	.word	0x08012a37
 8012a28:	08012a3d 	.word	0x08012a3d
 8012a2c:	08012a43 	.word	0x08012a43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012a30:	2300      	movs	r3, #0
 8012a32:	73fb      	strb	r3, [r7, #15]
    break;
 8012a34:	e00b      	b.n	8012a4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012a36:	2303      	movs	r3, #3
 8012a38:	73fb      	strb	r3, [r7, #15]
    break;
 8012a3a:	e008      	b.n	8012a4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8012a40:	e005      	b.n	8012a4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012a42:	2303      	movs	r3, #3
 8012a44:	73fb      	strb	r3, [r7, #15]
    break;
 8012a46:	e002      	b.n	8012a4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012a48:	2303      	movs	r3, #3
 8012a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8012a4c:	bf00      	nop
  }
  return usb_status;
 8012a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	3714      	adds	r7, #20
 8012a54:	46bd      	mov	sp, r7
 8012a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5a:	4770      	bx	lr

08012a5c <__errno>:
 8012a5c:	4b01      	ldr	r3, [pc, #4]	; (8012a64 <__errno+0x8>)
 8012a5e:	6818      	ldr	r0, [r3, #0]
 8012a60:	4770      	bx	lr
 8012a62:	bf00      	nop
 8012a64:	24000168 	.word	0x24000168

08012a68 <__libc_init_array>:
 8012a68:	b570      	push	{r4, r5, r6, lr}
 8012a6a:	4e0d      	ldr	r6, [pc, #52]	; (8012aa0 <__libc_init_array+0x38>)
 8012a6c:	4c0d      	ldr	r4, [pc, #52]	; (8012aa4 <__libc_init_array+0x3c>)
 8012a6e:	1ba4      	subs	r4, r4, r6
 8012a70:	10a4      	asrs	r4, r4, #2
 8012a72:	2500      	movs	r5, #0
 8012a74:	42a5      	cmp	r5, r4
 8012a76:	d109      	bne.n	8012a8c <__libc_init_array+0x24>
 8012a78:	4e0b      	ldr	r6, [pc, #44]	; (8012aa8 <__libc_init_array+0x40>)
 8012a7a:	4c0c      	ldr	r4, [pc, #48]	; (8012aac <__libc_init_array+0x44>)
 8012a7c:	f000 fc38 	bl	80132f0 <_init>
 8012a80:	1ba4      	subs	r4, r4, r6
 8012a82:	10a4      	asrs	r4, r4, #2
 8012a84:	2500      	movs	r5, #0
 8012a86:	42a5      	cmp	r5, r4
 8012a88:	d105      	bne.n	8012a96 <__libc_init_array+0x2e>
 8012a8a:	bd70      	pop	{r4, r5, r6, pc}
 8012a8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012a90:	4798      	blx	r3
 8012a92:	3501      	adds	r5, #1
 8012a94:	e7ee      	b.n	8012a74 <__libc_init_array+0xc>
 8012a96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012a9a:	4798      	blx	r3
 8012a9c:	3501      	adds	r5, #1
 8012a9e:	e7f2      	b.n	8012a86 <__libc_init_array+0x1e>
 8012aa0:	08013520 	.word	0x08013520
 8012aa4:	08013520 	.word	0x08013520
 8012aa8:	08013520 	.word	0x08013520
 8012aac:	08013524 	.word	0x08013524

08012ab0 <malloc>:
 8012ab0:	4b02      	ldr	r3, [pc, #8]	; (8012abc <malloc+0xc>)
 8012ab2:	4601      	mov	r1, r0
 8012ab4:	6818      	ldr	r0, [r3, #0]
 8012ab6:	f000 b86d 	b.w	8012b94 <_malloc_r>
 8012aba:	bf00      	nop
 8012abc:	24000168 	.word	0x24000168

08012ac0 <free>:
 8012ac0:	4b02      	ldr	r3, [pc, #8]	; (8012acc <free+0xc>)
 8012ac2:	4601      	mov	r1, r0
 8012ac4:	6818      	ldr	r0, [r3, #0]
 8012ac6:	f000 b817 	b.w	8012af8 <_free_r>
 8012aca:	bf00      	nop
 8012acc:	24000168 	.word	0x24000168

08012ad0 <memcpy>:
 8012ad0:	b510      	push	{r4, lr}
 8012ad2:	1e43      	subs	r3, r0, #1
 8012ad4:	440a      	add	r2, r1
 8012ad6:	4291      	cmp	r1, r2
 8012ad8:	d100      	bne.n	8012adc <memcpy+0xc>
 8012ada:	bd10      	pop	{r4, pc}
 8012adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ae4:	e7f7      	b.n	8012ad6 <memcpy+0x6>

08012ae6 <memset>:
 8012ae6:	4402      	add	r2, r0
 8012ae8:	4603      	mov	r3, r0
 8012aea:	4293      	cmp	r3, r2
 8012aec:	d100      	bne.n	8012af0 <memset+0xa>
 8012aee:	4770      	bx	lr
 8012af0:	f803 1b01 	strb.w	r1, [r3], #1
 8012af4:	e7f9      	b.n	8012aea <memset+0x4>
	...

08012af8 <_free_r>:
 8012af8:	b538      	push	{r3, r4, r5, lr}
 8012afa:	4605      	mov	r5, r0
 8012afc:	2900      	cmp	r1, #0
 8012afe:	d045      	beq.n	8012b8c <_free_r+0x94>
 8012b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b04:	1f0c      	subs	r4, r1, #4
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	bfb8      	it	lt
 8012b0a:	18e4      	addlt	r4, r4, r3
 8012b0c:	f000 f8cc 	bl	8012ca8 <__malloc_lock>
 8012b10:	4a1f      	ldr	r2, [pc, #124]	; (8012b90 <_free_r+0x98>)
 8012b12:	6813      	ldr	r3, [r2, #0]
 8012b14:	4610      	mov	r0, r2
 8012b16:	b933      	cbnz	r3, 8012b26 <_free_r+0x2e>
 8012b18:	6063      	str	r3, [r4, #4]
 8012b1a:	6014      	str	r4, [r2, #0]
 8012b1c:	4628      	mov	r0, r5
 8012b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b22:	f000 b8c2 	b.w	8012caa <__malloc_unlock>
 8012b26:	42a3      	cmp	r3, r4
 8012b28:	d90c      	bls.n	8012b44 <_free_r+0x4c>
 8012b2a:	6821      	ldr	r1, [r4, #0]
 8012b2c:	1862      	adds	r2, r4, r1
 8012b2e:	4293      	cmp	r3, r2
 8012b30:	bf04      	itt	eq
 8012b32:	681a      	ldreq	r2, [r3, #0]
 8012b34:	685b      	ldreq	r3, [r3, #4]
 8012b36:	6063      	str	r3, [r4, #4]
 8012b38:	bf04      	itt	eq
 8012b3a:	1852      	addeq	r2, r2, r1
 8012b3c:	6022      	streq	r2, [r4, #0]
 8012b3e:	6004      	str	r4, [r0, #0]
 8012b40:	e7ec      	b.n	8012b1c <_free_r+0x24>
 8012b42:	4613      	mov	r3, r2
 8012b44:	685a      	ldr	r2, [r3, #4]
 8012b46:	b10a      	cbz	r2, 8012b4c <_free_r+0x54>
 8012b48:	42a2      	cmp	r2, r4
 8012b4a:	d9fa      	bls.n	8012b42 <_free_r+0x4a>
 8012b4c:	6819      	ldr	r1, [r3, #0]
 8012b4e:	1858      	adds	r0, r3, r1
 8012b50:	42a0      	cmp	r0, r4
 8012b52:	d10b      	bne.n	8012b6c <_free_r+0x74>
 8012b54:	6820      	ldr	r0, [r4, #0]
 8012b56:	4401      	add	r1, r0
 8012b58:	1858      	adds	r0, r3, r1
 8012b5a:	4282      	cmp	r2, r0
 8012b5c:	6019      	str	r1, [r3, #0]
 8012b5e:	d1dd      	bne.n	8012b1c <_free_r+0x24>
 8012b60:	6810      	ldr	r0, [r2, #0]
 8012b62:	6852      	ldr	r2, [r2, #4]
 8012b64:	605a      	str	r2, [r3, #4]
 8012b66:	4401      	add	r1, r0
 8012b68:	6019      	str	r1, [r3, #0]
 8012b6a:	e7d7      	b.n	8012b1c <_free_r+0x24>
 8012b6c:	d902      	bls.n	8012b74 <_free_r+0x7c>
 8012b6e:	230c      	movs	r3, #12
 8012b70:	602b      	str	r3, [r5, #0]
 8012b72:	e7d3      	b.n	8012b1c <_free_r+0x24>
 8012b74:	6820      	ldr	r0, [r4, #0]
 8012b76:	1821      	adds	r1, r4, r0
 8012b78:	428a      	cmp	r2, r1
 8012b7a:	bf04      	itt	eq
 8012b7c:	6811      	ldreq	r1, [r2, #0]
 8012b7e:	6852      	ldreq	r2, [r2, #4]
 8012b80:	6062      	str	r2, [r4, #4]
 8012b82:	bf04      	itt	eq
 8012b84:	1809      	addeq	r1, r1, r0
 8012b86:	6021      	streq	r1, [r4, #0]
 8012b88:	605c      	str	r4, [r3, #4]
 8012b8a:	e7c7      	b.n	8012b1c <_free_r+0x24>
 8012b8c:	bd38      	pop	{r3, r4, r5, pc}
 8012b8e:	bf00      	nop
 8012b90:	24000228 	.word	0x24000228

08012b94 <_malloc_r>:
 8012b94:	b570      	push	{r4, r5, r6, lr}
 8012b96:	1ccd      	adds	r5, r1, #3
 8012b98:	f025 0503 	bic.w	r5, r5, #3
 8012b9c:	3508      	adds	r5, #8
 8012b9e:	2d0c      	cmp	r5, #12
 8012ba0:	bf38      	it	cc
 8012ba2:	250c      	movcc	r5, #12
 8012ba4:	2d00      	cmp	r5, #0
 8012ba6:	4606      	mov	r6, r0
 8012ba8:	db01      	blt.n	8012bae <_malloc_r+0x1a>
 8012baa:	42a9      	cmp	r1, r5
 8012bac:	d903      	bls.n	8012bb6 <_malloc_r+0x22>
 8012bae:	230c      	movs	r3, #12
 8012bb0:	6033      	str	r3, [r6, #0]
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	bd70      	pop	{r4, r5, r6, pc}
 8012bb6:	f000 f877 	bl	8012ca8 <__malloc_lock>
 8012bba:	4a21      	ldr	r2, [pc, #132]	; (8012c40 <_malloc_r+0xac>)
 8012bbc:	6814      	ldr	r4, [r2, #0]
 8012bbe:	4621      	mov	r1, r4
 8012bc0:	b991      	cbnz	r1, 8012be8 <_malloc_r+0x54>
 8012bc2:	4c20      	ldr	r4, [pc, #128]	; (8012c44 <_malloc_r+0xb0>)
 8012bc4:	6823      	ldr	r3, [r4, #0]
 8012bc6:	b91b      	cbnz	r3, 8012bd0 <_malloc_r+0x3c>
 8012bc8:	4630      	mov	r0, r6
 8012bca:	f000 f83d 	bl	8012c48 <_sbrk_r>
 8012bce:	6020      	str	r0, [r4, #0]
 8012bd0:	4629      	mov	r1, r5
 8012bd2:	4630      	mov	r0, r6
 8012bd4:	f000 f838 	bl	8012c48 <_sbrk_r>
 8012bd8:	1c43      	adds	r3, r0, #1
 8012bda:	d124      	bne.n	8012c26 <_malloc_r+0x92>
 8012bdc:	230c      	movs	r3, #12
 8012bde:	6033      	str	r3, [r6, #0]
 8012be0:	4630      	mov	r0, r6
 8012be2:	f000 f862 	bl	8012caa <__malloc_unlock>
 8012be6:	e7e4      	b.n	8012bb2 <_malloc_r+0x1e>
 8012be8:	680b      	ldr	r3, [r1, #0]
 8012bea:	1b5b      	subs	r3, r3, r5
 8012bec:	d418      	bmi.n	8012c20 <_malloc_r+0x8c>
 8012bee:	2b0b      	cmp	r3, #11
 8012bf0:	d90f      	bls.n	8012c12 <_malloc_r+0x7e>
 8012bf2:	600b      	str	r3, [r1, #0]
 8012bf4:	50cd      	str	r5, [r1, r3]
 8012bf6:	18cc      	adds	r4, r1, r3
 8012bf8:	4630      	mov	r0, r6
 8012bfa:	f000 f856 	bl	8012caa <__malloc_unlock>
 8012bfe:	f104 000b 	add.w	r0, r4, #11
 8012c02:	1d23      	adds	r3, r4, #4
 8012c04:	f020 0007 	bic.w	r0, r0, #7
 8012c08:	1ac3      	subs	r3, r0, r3
 8012c0a:	d0d3      	beq.n	8012bb4 <_malloc_r+0x20>
 8012c0c:	425a      	negs	r2, r3
 8012c0e:	50e2      	str	r2, [r4, r3]
 8012c10:	e7d0      	b.n	8012bb4 <_malloc_r+0x20>
 8012c12:	428c      	cmp	r4, r1
 8012c14:	684b      	ldr	r3, [r1, #4]
 8012c16:	bf16      	itet	ne
 8012c18:	6063      	strne	r3, [r4, #4]
 8012c1a:	6013      	streq	r3, [r2, #0]
 8012c1c:	460c      	movne	r4, r1
 8012c1e:	e7eb      	b.n	8012bf8 <_malloc_r+0x64>
 8012c20:	460c      	mov	r4, r1
 8012c22:	6849      	ldr	r1, [r1, #4]
 8012c24:	e7cc      	b.n	8012bc0 <_malloc_r+0x2c>
 8012c26:	1cc4      	adds	r4, r0, #3
 8012c28:	f024 0403 	bic.w	r4, r4, #3
 8012c2c:	42a0      	cmp	r0, r4
 8012c2e:	d005      	beq.n	8012c3c <_malloc_r+0xa8>
 8012c30:	1a21      	subs	r1, r4, r0
 8012c32:	4630      	mov	r0, r6
 8012c34:	f000 f808 	bl	8012c48 <_sbrk_r>
 8012c38:	3001      	adds	r0, #1
 8012c3a:	d0cf      	beq.n	8012bdc <_malloc_r+0x48>
 8012c3c:	6025      	str	r5, [r4, #0]
 8012c3e:	e7db      	b.n	8012bf8 <_malloc_r+0x64>
 8012c40:	24000228 	.word	0x24000228
 8012c44:	2400022c 	.word	0x2400022c

08012c48 <_sbrk_r>:
 8012c48:	b538      	push	{r3, r4, r5, lr}
 8012c4a:	4c06      	ldr	r4, [pc, #24]	; (8012c64 <_sbrk_r+0x1c>)
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	4605      	mov	r5, r0
 8012c50:	4608      	mov	r0, r1
 8012c52:	6023      	str	r3, [r4, #0]
 8012c54:	f7ee fc04 	bl	8001460 <_sbrk>
 8012c58:	1c43      	adds	r3, r0, #1
 8012c5a:	d102      	bne.n	8012c62 <_sbrk_r+0x1a>
 8012c5c:	6823      	ldr	r3, [r4, #0]
 8012c5e:	b103      	cbz	r3, 8012c62 <_sbrk_r+0x1a>
 8012c60:	602b      	str	r3, [r5, #0]
 8012c62:	bd38      	pop	{r3, r4, r5, pc}
 8012c64:	240017b0 	.word	0x240017b0

08012c68 <siprintf>:
 8012c68:	b40e      	push	{r1, r2, r3}
 8012c6a:	b500      	push	{lr}
 8012c6c:	b09c      	sub	sp, #112	; 0x70
 8012c6e:	ab1d      	add	r3, sp, #116	; 0x74
 8012c70:	9002      	str	r0, [sp, #8]
 8012c72:	9006      	str	r0, [sp, #24]
 8012c74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012c78:	4809      	ldr	r0, [pc, #36]	; (8012ca0 <siprintf+0x38>)
 8012c7a:	9107      	str	r1, [sp, #28]
 8012c7c:	9104      	str	r1, [sp, #16]
 8012c7e:	4909      	ldr	r1, [pc, #36]	; (8012ca4 <siprintf+0x3c>)
 8012c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c84:	9105      	str	r1, [sp, #20]
 8012c86:	6800      	ldr	r0, [r0, #0]
 8012c88:	9301      	str	r3, [sp, #4]
 8012c8a:	a902      	add	r1, sp, #8
 8012c8c:	f000 f868 	bl	8012d60 <_svfiprintf_r>
 8012c90:	9b02      	ldr	r3, [sp, #8]
 8012c92:	2200      	movs	r2, #0
 8012c94:	701a      	strb	r2, [r3, #0]
 8012c96:	b01c      	add	sp, #112	; 0x70
 8012c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c9c:	b003      	add	sp, #12
 8012c9e:	4770      	bx	lr
 8012ca0:	24000168 	.word	0x24000168
 8012ca4:	ffff0208 	.word	0xffff0208

08012ca8 <__malloc_lock>:
 8012ca8:	4770      	bx	lr

08012caa <__malloc_unlock>:
 8012caa:	4770      	bx	lr

08012cac <__ssputs_r>:
 8012cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cb0:	688e      	ldr	r6, [r1, #8]
 8012cb2:	429e      	cmp	r6, r3
 8012cb4:	4682      	mov	sl, r0
 8012cb6:	460c      	mov	r4, r1
 8012cb8:	4690      	mov	r8, r2
 8012cba:	4699      	mov	r9, r3
 8012cbc:	d837      	bhi.n	8012d2e <__ssputs_r+0x82>
 8012cbe:	898a      	ldrh	r2, [r1, #12]
 8012cc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012cc4:	d031      	beq.n	8012d2a <__ssputs_r+0x7e>
 8012cc6:	6825      	ldr	r5, [r4, #0]
 8012cc8:	6909      	ldr	r1, [r1, #16]
 8012cca:	1a6f      	subs	r7, r5, r1
 8012ccc:	6965      	ldr	r5, [r4, #20]
 8012cce:	2302      	movs	r3, #2
 8012cd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012cd4:	fb95 f5f3 	sdiv	r5, r5, r3
 8012cd8:	f109 0301 	add.w	r3, r9, #1
 8012cdc:	443b      	add	r3, r7
 8012cde:	429d      	cmp	r5, r3
 8012ce0:	bf38      	it	cc
 8012ce2:	461d      	movcc	r5, r3
 8012ce4:	0553      	lsls	r3, r2, #21
 8012ce6:	d530      	bpl.n	8012d4a <__ssputs_r+0x9e>
 8012ce8:	4629      	mov	r1, r5
 8012cea:	f7ff ff53 	bl	8012b94 <_malloc_r>
 8012cee:	4606      	mov	r6, r0
 8012cf0:	b950      	cbnz	r0, 8012d08 <__ssputs_r+0x5c>
 8012cf2:	230c      	movs	r3, #12
 8012cf4:	f8ca 3000 	str.w	r3, [sl]
 8012cf8:	89a3      	ldrh	r3, [r4, #12]
 8012cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cfe:	81a3      	strh	r3, [r4, #12]
 8012d00:	f04f 30ff 	mov.w	r0, #4294967295
 8012d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d08:	463a      	mov	r2, r7
 8012d0a:	6921      	ldr	r1, [r4, #16]
 8012d0c:	f7ff fee0 	bl	8012ad0 <memcpy>
 8012d10:	89a3      	ldrh	r3, [r4, #12]
 8012d12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d1a:	81a3      	strh	r3, [r4, #12]
 8012d1c:	6126      	str	r6, [r4, #16]
 8012d1e:	6165      	str	r5, [r4, #20]
 8012d20:	443e      	add	r6, r7
 8012d22:	1bed      	subs	r5, r5, r7
 8012d24:	6026      	str	r6, [r4, #0]
 8012d26:	60a5      	str	r5, [r4, #8]
 8012d28:	464e      	mov	r6, r9
 8012d2a:	454e      	cmp	r6, r9
 8012d2c:	d900      	bls.n	8012d30 <__ssputs_r+0x84>
 8012d2e:	464e      	mov	r6, r9
 8012d30:	4632      	mov	r2, r6
 8012d32:	4641      	mov	r1, r8
 8012d34:	6820      	ldr	r0, [r4, #0]
 8012d36:	f000 fa93 	bl	8013260 <memmove>
 8012d3a:	68a3      	ldr	r3, [r4, #8]
 8012d3c:	1b9b      	subs	r3, r3, r6
 8012d3e:	60a3      	str	r3, [r4, #8]
 8012d40:	6823      	ldr	r3, [r4, #0]
 8012d42:	441e      	add	r6, r3
 8012d44:	6026      	str	r6, [r4, #0]
 8012d46:	2000      	movs	r0, #0
 8012d48:	e7dc      	b.n	8012d04 <__ssputs_r+0x58>
 8012d4a:	462a      	mov	r2, r5
 8012d4c:	f000 faa1 	bl	8013292 <_realloc_r>
 8012d50:	4606      	mov	r6, r0
 8012d52:	2800      	cmp	r0, #0
 8012d54:	d1e2      	bne.n	8012d1c <__ssputs_r+0x70>
 8012d56:	6921      	ldr	r1, [r4, #16]
 8012d58:	4650      	mov	r0, sl
 8012d5a:	f7ff fecd 	bl	8012af8 <_free_r>
 8012d5e:	e7c8      	b.n	8012cf2 <__ssputs_r+0x46>

08012d60 <_svfiprintf_r>:
 8012d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d64:	461d      	mov	r5, r3
 8012d66:	898b      	ldrh	r3, [r1, #12]
 8012d68:	061f      	lsls	r7, r3, #24
 8012d6a:	b09d      	sub	sp, #116	; 0x74
 8012d6c:	4680      	mov	r8, r0
 8012d6e:	460c      	mov	r4, r1
 8012d70:	4616      	mov	r6, r2
 8012d72:	d50f      	bpl.n	8012d94 <_svfiprintf_r+0x34>
 8012d74:	690b      	ldr	r3, [r1, #16]
 8012d76:	b96b      	cbnz	r3, 8012d94 <_svfiprintf_r+0x34>
 8012d78:	2140      	movs	r1, #64	; 0x40
 8012d7a:	f7ff ff0b 	bl	8012b94 <_malloc_r>
 8012d7e:	6020      	str	r0, [r4, #0]
 8012d80:	6120      	str	r0, [r4, #16]
 8012d82:	b928      	cbnz	r0, 8012d90 <_svfiprintf_r+0x30>
 8012d84:	230c      	movs	r3, #12
 8012d86:	f8c8 3000 	str.w	r3, [r8]
 8012d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d8e:	e0c8      	b.n	8012f22 <_svfiprintf_r+0x1c2>
 8012d90:	2340      	movs	r3, #64	; 0x40
 8012d92:	6163      	str	r3, [r4, #20]
 8012d94:	2300      	movs	r3, #0
 8012d96:	9309      	str	r3, [sp, #36]	; 0x24
 8012d98:	2320      	movs	r3, #32
 8012d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d9e:	2330      	movs	r3, #48	; 0x30
 8012da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012da4:	9503      	str	r5, [sp, #12]
 8012da6:	f04f 0b01 	mov.w	fp, #1
 8012daa:	4637      	mov	r7, r6
 8012dac:	463d      	mov	r5, r7
 8012dae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012db2:	b10b      	cbz	r3, 8012db8 <_svfiprintf_r+0x58>
 8012db4:	2b25      	cmp	r3, #37	; 0x25
 8012db6:	d13e      	bne.n	8012e36 <_svfiprintf_r+0xd6>
 8012db8:	ebb7 0a06 	subs.w	sl, r7, r6
 8012dbc:	d00b      	beq.n	8012dd6 <_svfiprintf_r+0x76>
 8012dbe:	4653      	mov	r3, sl
 8012dc0:	4632      	mov	r2, r6
 8012dc2:	4621      	mov	r1, r4
 8012dc4:	4640      	mov	r0, r8
 8012dc6:	f7ff ff71 	bl	8012cac <__ssputs_r>
 8012dca:	3001      	adds	r0, #1
 8012dcc:	f000 80a4 	beq.w	8012f18 <_svfiprintf_r+0x1b8>
 8012dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dd2:	4453      	add	r3, sl
 8012dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8012dd6:	783b      	ldrb	r3, [r7, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	f000 809d 	beq.w	8012f18 <_svfiprintf_r+0x1b8>
 8012dde:	2300      	movs	r3, #0
 8012de0:	f04f 32ff 	mov.w	r2, #4294967295
 8012de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012de8:	9304      	str	r3, [sp, #16]
 8012dea:	9307      	str	r3, [sp, #28]
 8012dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012df0:	931a      	str	r3, [sp, #104]	; 0x68
 8012df2:	462f      	mov	r7, r5
 8012df4:	2205      	movs	r2, #5
 8012df6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012dfa:	4850      	ldr	r0, [pc, #320]	; (8012f3c <_svfiprintf_r+0x1dc>)
 8012dfc:	f7ed fa70 	bl	80002e0 <memchr>
 8012e00:	9b04      	ldr	r3, [sp, #16]
 8012e02:	b9d0      	cbnz	r0, 8012e3a <_svfiprintf_r+0xda>
 8012e04:	06d9      	lsls	r1, r3, #27
 8012e06:	bf44      	itt	mi
 8012e08:	2220      	movmi	r2, #32
 8012e0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012e0e:	071a      	lsls	r2, r3, #28
 8012e10:	bf44      	itt	mi
 8012e12:	222b      	movmi	r2, #43	; 0x2b
 8012e14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012e18:	782a      	ldrb	r2, [r5, #0]
 8012e1a:	2a2a      	cmp	r2, #42	; 0x2a
 8012e1c:	d015      	beq.n	8012e4a <_svfiprintf_r+0xea>
 8012e1e:	9a07      	ldr	r2, [sp, #28]
 8012e20:	462f      	mov	r7, r5
 8012e22:	2000      	movs	r0, #0
 8012e24:	250a      	movs	r5, #10
 8012e26:	4639      	mov	r1, r7
 8012e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e2c:	3b30      	subs	r3, #48	; 0x30
 8012e2e:	2b09      	cmp	r3, #9
 8012e30:	d94d      	bls.n	8012ece <_svfiprintf_r+0x16e>
 8012e32:	b1b8      	cbz	r0, 8012e64 <_svfiprintf_r+0x104>
 8012e34:	e00f      	b.n	8012e56 <_svfiprintf_r+0xf6>
 8012e36:	462f      	mov	r7, r5
 8012e38:	e7b8      	b.n	8012dac <_svfiprintf_r+0x4c>
 8012e3a:	4a40      	ldr	r2, [pc, #256]	; (8012f3c <_svfiprintf_r+0x1dc>)
 8012e3c:	1a80      	subs	r0, r0, r2
 8012e3e:	fa0b f000 	lsl.w	r0, fp, r0
 8012e42:	4318      	orrs	r0, r3
 8012e44:	9004      	str	r0, [sp, #16]
 8012e46:	463d      	mov	r5, r7
 8012e48:	e7d3      	b.n	8012df2 <_svfiprintf_r+0x92>
 8012e4a:	9a03      	ldr	r2, [sp, #12]
 8012e4c:	1d11      	adds	r1, r2, #4
 8012e4e:	6812      	ldr	r2, [r2, #0]
 8012e50:	9103      	str	r1, [sp, #12]
 8012e52:	2a00      	cmp	r2, #0
 8012e54:	db01      	blt.n	8012e5a <_svfiprintf_r+0xfa>
 8012e56:	9207      	str	r2, [sp, #28]
 8012e58:	e004      	b.n	8012e64 <_svfiprintf_r+0x104>
 8012e5a:	4252      	negs	r2, r2
 8012e5c:	f043 0302 	orr.w	r3, r3, #2
 8012e60:	9207      	str	r2, [sp, #28]
 8012e62:	9304      	str	r3, [sp, #16]
 8012e64:	783b      	ldrb	r3, [r7, #0]
 8012e66:	2b2e      	cmp	r3, #46	; 0x2e
 8012e68:	d10c      	bne.n	8012e84 <_svfiprintf_r+0x124>
 8012e6a:	787b      	ldrb	r3, [r7, #1]
 8012e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8012e6e:	d133      	bne.n	8012ed8 <_svfiprintf_r+0x178>
 8012e70:	9b03      	ldr	r3, [sp, #12]
 8012e72:	1d1a      	adds	r2, r3, #4
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	9203      	str	r2, [sp, #12]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	bfb8      	it	lt
 8012e7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e80:	3702      	adds	r7, #2
 8012e82:	9305      	str	r3, [sp, #20]
 8012e84:	4d2e      	ldr	r5, [pc, #184]	; (8012f40 <_svfiprintf_r+0x1e0>)
 8012e86:	7839      	ldrb	r1, [r7, #0]
 8012e88:	2203      	movs	r2, #3
 8012e8a:	4628      	mov	r0, r5
 8012e8c:	f7ed fa28 	bl	80002e0 <memchr>
 8012e90:	b138      	cbz	r0, 8012ea2 <_svfiprintf_r+0x142>
 8012e92:	2340      	movs	r3, #64	; 0x40
 8012e94:	1b40      	subs	r0, r0, r5
 8012e96:	fa03 f000 	lsl.w	r0, r3, r0
 8012e9a:	9b04      	ldr	r3, [sp, #16]
 8012e9c:	4303      	orrs	r3, r0
 8012e9e:	3701      	adds	r7, #1
 8012ea0:	9304      	str	r3, [sp, #16]
 8012ea2:	7839      	ldrb	r1, [r7, #0]
 8012ea4:	4827      	ldr	r0, [pc, #156]	; (8012f44 <_svfiprintf_r+0x1e4>)
 8012ea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012eaa:	2206      	movs	r2, #6
 8012eac:	1c7e      	adds	r6, r7, #1
 8012eae:	f7ed fa17 	bl	80002e0 <memchr>
 8012eb2:	2800      	cmp	r0, #0
 8012eb4:	d038      	beq.n	8012f28 <_svfiprintf_r+0x1c8>
 8012eb6:	4b24      	ldr	r3, [pc, #144]	; (8012f48 <_svfiprintf_r+0x1e8>)
 8012eb8:	bb13      	cbnz	r3, 8012f00 <_svfiprintf_r+0x1a0>
 8012eba:	9b03      	ldr	r3, [sp, #12]
 8012ebc:	3307      	adds	r3, #7
 8012ebe:	f023 0307 	bic.w	r3, r3, #7
 8012ec2:	3308      	adds	r3, #8
 8012ec4:	9303      	str	r3, [sp, #12]
 8012ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ec8:	444b      	add	r3, r9
 8012eca:	9309      	str	r3, [sp, #36]	; 0x24
 8012ecc:	e76d      	b.n	8012daa <_svfiprintf_r+0x4a>
 8012ece:	fb05 3202 	mla	r2, r5, r2, r3
 8012ed2:	2001      	movs	r0, #1
 8012ed4:	460f      	mov	r7, r1
 8012ed6:	e7a6      	b.n	8012e26 <_svfiprintf_r+0xc6>
 8012ed8:	2300      	movs	r3, #0
 8012eda:	3701      	adds	r7, #1
 8012edc:	9305      	str	r3, [sp, #20]
 8012ede:	4619      	mov	r1, r3
 8012ee0:	250a      	movs	r5, #10
 8012ee2:	4638      	mov	r0, r7
 8012ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ee8:	3a30      	subs	r2, #48	; 0x30
 8012eea:	2a09      	cmp	r2, #9
 8012eec:	d903      	bls.n	8012ef6 <_svfiprintf_r+0x196>
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d0c8      	beq.n	8012e84 <_svfiprintf_r+0x124>
 8012ef2:	9105      	str	r1, [sp, #20]
 8012ef4:	e7c6      	b.n	8012e84 <_svfiprintf_r+0x124>
 8012ef6:	fb05 2101 	mla	r1, r5, r1, r2
 8012efa:	2301      	movs	r3, #1
 8012efc:	4607      	mov	r7, r0
 8012efe:	e7f0      	b.n	8012ee2 <_svfiprintf_r+0x182>
 8012f00:	ab03      	add	r3, sp, #12
 8012f02:	9300      	str	r3, [sp, #0]
 8012f04:	4622      	mov	r2, r4
 8012f06:	4b11      	ldr	r3, [pc, #68]	; (8012f4c <_svfiprintf_r+0x1ec>)
 8012f08:	a904      	add	r1, sp, #16
 8012f0a:	4640      	mov	r0, r8
 8012f0c:	f3af 8000 	nop.w
 8012f10:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012f14:	4681      	mov	r9, r0
 8012f16:	d1d6      	bne.n	8012ec6 <_svfiprintf_r+0x166>
 8012f18:	89a3      	ldrh	r3, [r4, #12]
 8012f1a:	065b      	lsls	r3, r3, #25
 8012f1c:	f53f af35 	bmi.w	8012d8a <_svfiprintf_r+0x2a>
 8012f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f22:	b01d      	add	sp, #116	; 0x74
 8012f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f28:	ab03      	add	r3, sp, #12
 8012f2a:	9300      	str	r3, [sp, #0]
 8012f2c:	4622      	mov	r2, r4
 8012f2e:	4b07      	ldr	r3, [pc, #28]	; (8012f4c <_svfiprintf_r+0x1ec>)
 8012f30:	a904      	add	r1, sp, #16
 8012f32:	4640      	mov	r0, r8
 8012f34:	f000 f882 	bl	801303c <_printf_i>
 8012f38:	e7ea      	b.n	8012f10 <_svfiprintf_r+0x1b0>
 8012f3a:	bf00      	nop
 8012f3c:	080134e4 	.word	0x080134e4
 8012f40:	080134ea 	.word	0x080134ea
 8012f44:	080134ee 	.word	0x080134ee
 8012f48:	00000000 	.word	0x00000000
 8012f4c:	08012cad 	.word	0x08012cad

08012f50 <_printf_common>:
 8012f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f54:	4691      	mov	r9, r2
 8012f56:	461f      	mov	r7, r3
 8012f58:	688a      	ldr	r2, [r1, #8]
 8012f5a:	690b      	ldr	r3, [r1, #16]
 8012f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012f60:	4293      	cmp	r3, r2
 8012f62:	bfb8      	it	lt
 8012f64:	4613      	movlt	r3, r2
 8012f66:	f8c9 3000 	str.w	r3, [r9]
 8012f6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012f6e:	4606      	mov	r6, r0
 8012f70:	460c      	mov	r4, r1
 8012f72:	b112      	cbz	r2, 8012f7a <_printf_common+0x2a>
 8012f74:	3301      	adds	r3, #1
 8012f76:	f8c9 3000 	str.w	r3, [r9]
 8012f7a:	6823      	ldr	r3, [r4, #0]
 8012f7c:	0699      	lsls	r1, r3, #26
 8012f7e:	bf42      	ittt	mi
 8012f80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012f84:	3302      	addmi	r3, #2
 8012f86:	f8c9 3000 	strmi.w	r3, [r9]
 8012f8a:	6825      	ldr	r5, [r4, #0]
 8012f8c:	f015 0506 	ands.w	r5, r5, #6
 8012f90:	d107      	bne.n	8012fa2 <_printf_common+0x52>
 8012f92:	f104 0a19 	add.w	sl, r4, #25
 8012f96:	68e3      	ldr	r3, [r4, #12]
 8012f98:	f8d9 2000 	ldr.w	r2, [r9]
 8012f9c:	1a9b      	subs	r3, r3, r2
 8012f9e:	42ab      	cmp	r3, r5
 8012fa0:	dc28      	bgt.n	8012ff4 <_printf_common+0xa4>
 8012fa2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012fa6:	6822      	ldr	r2, [r4, #0]
 8012fa8:	3300      	adds	r3, #0
 8012faa:	bf18      	it	ne
 8012fac:	2301      	movne	r3, #1
 8012fae:	0692      	lsls	r2, r2, #26
 8012fb0:	d42d      	bmi.n	801300e <_printf_common+0xbe>
 8012fb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012fb6:	4639      	mov	r1, r7
 8012fb8:	4630      	mov	r0, r6
 8012fba:	47c0      	blx	r8
 8012fbc:	3001      	adds	r0, #1
 8012fbe:	d020      	beq.n	8013002 <_printf_common+0xb2>
 8012fc0:	6823      	ldr	r3, [r4, #0]
 8012fc2:	68e5      	ldr	r5, [r4, #12]
 8012fc4:	f8d9 2000 	ldr.w	r2, [r9]
 8012fc8:	f003 0306 	and.w	r3, r3, #6
 8012fcc:	2b04      	cmp	r3, #4
 8012fce:	bf08      	it	eq
 8012fd0:	1aad      	subeq	r5, r5, r2
 8012fd2:	68a3      	ldr	r3, [r4, #8]
 8012fd4:	6922      	ldr	r2, [r4, #16]
 8012fd6:	bf0c      	ite	eq
 8012fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012fdc:	2500      	movne	r5, #0
 8012fde:	4293      	cmp	r3, r2
 8012fe0:	bfc4      	itt	gt
 8012fe2:	1a9b      	subgt	r3, r3, r2
 8012fe4:	18ed      	addgt	r5, r5, r3
 8012fe6:	f04f 0900 	mov.w	r9, #0
 8012fea:	341a      	adds	r4, #26
 8012fec:	454d      	cmp	r5, r9
 8012fee:	d11a      	bne.n	8013026 <_printf_common+0xd6>
 8012ff0:	2000      	movs	r0, #0
 8012ff2:	e008      	b.n	8013006 <_printf_common+0xb6>
 8012ff4:	2301      	movs	r3, #1
 8012ff6:	4652      	mov	r2, sl
 8012ff8:	4639      	mov	r1, r7
 8012ffa:	4630      	mov	r0, r6
 8012ffc:	47c0      	blx	r8
 8012ffe:	3001      	adds	r0, #1
 8013000:	d103      	bne.n	801300a <_printf_common+0xba>
 8013002:	f04f 30ff 	mov.w	r0, #4294967295
 8013006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801300a:	3501      	adds	r5, #1
 801300c:	e7c3      	b.n	8012f96 <_printf_common+0x46>
 801300e:	18e1      	adds	r1, r4, r3
 8013010:	1c5a      	adds	r2, r3, #1
 8013012:	2030      	movs	r0, #48	; 0x30
 8013014:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013018:	4422      	add	r2, r4
 801301a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801301e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013022:	3302      	adds	r3, #2
 8013024:	e7c5      	b.n	8012fb2 <_printf_common+0x62>
 8013026:	2301      	movs	r3, #1
 8013028:	4622      	mov	r2, r4
 801302a:	4639      	mov	r1, r7
 801302c:	4630      	mov	r0, r6
 801302e:	47c0      	blx	r8
 8013030:	3001      	adds	r0, #1
 8013032:	d0e6      	beq.n	8013002 <_printf_common+0xb2>
 8013034:	f109 0901 	add.w	r9, r9, #1
 8013038:	e7d8      	b.n	8012fec <_printf_common+0x9c>
	...

0801303c <_printf_i>:
 801303c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013040:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013044:	460c      	mov	r4, r1
 8013046:	7e09      	ldrb	r1, [r1, #24]
 8013048:	b085      	sub	sp, #20
 801304a:	296e      	cmp	r1, #110	; 0x6e
 801304c:	4617      	mov	r7, r2
 801304e:	4606      	mov	r6, r0
 8013050:	4698      	mov	r8, r3
 8013052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013054:	f000 80b3 	beq.w	80131be <_printf_i+0x182>
 8013058:	d822      	bhi.n	80130a0 <_printf_i+0x64>
 801305a:	2963      	cmp	r1, #99	; 0x63
 801305c:	d036      	beq.n	80130cc <_printf_i+0x90>
 801305e:	d80a      	bhi.n	8013076 <_printf_i+0x3a>
 8013060:	2900      	cmp	r1, #0
 8013062:	f000 80b9 	beq.w	80131d8 <_printf_i+0x19c>
 8013066:	2958      	cmp	r1, #88	; 0x58
 8013068:	f000 8083 	beq.w	8013172 <_printf_i+0x136>
 801306c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013070:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013074:	e032      	b.n	80130dc <_printf_i+0xa0>
 8013076:	2964      	cmp	r1, #100	; 0x64
 8013078:	d001      	beq.n	801307e <_printf_i+0x42>
 801307a:	2969      	cmp	r1, #105	; 0x69
 801307c:	d1f6      	bne.n	801306c <_printf_i+0x30>
 801307e:	6820      	ldr	r0, [r4, #0]
 8013080:	6813      	ldr	r3, [r2, #0]
 8013082:	0605      	lsls	r5, r0, #24
 8013084:	f103 0104 	add.w	r1, r3, #4
 8013088:	d52a      	bpl.n	80130e0 <_printf_i+0xa4>
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	6011      	str	r1, [r2, #0]
 801308e:	2b00      	cmp	r3, #0
 8013090:	da03      	bge.n	801309a <_printf_i+0x5e>
 8013092:	222d      	movs	r2, #45	; 0x2d
 8013094:	425b      	negs	r3, r3
 8013096:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801309a:	486f      	ldr	r0, [pc, #444]	; (8013258 <_printf_i+0x21c>)
 801309c:	220a      	movs	r2, #10
 801309e:	e039      	b.n	8013114 <_printf_i+0xd8>
 80130a0:	2973      	cmp	r1, #115	; 0x73
 80130a2:	f000 809d 	beq.w	80131e0 <_printf_i+0x1a4>
 80130a6:	d808      	bhi.n	80130ba <_printf_i+0x7e>
 80130a8:	296f      	cmp	r1, #111	; 0x6f
 80130aa:	d020      	beq.n	80130ee <_printf_i+0xb2>
 80130ac:	2970      	cmp	r1, #112	; 0x70
 80130ae:	d1dd      	bne.n	801306c <_printf_i+0x30>
 80130b0:	6823      	ldr	r3, [r4, #0]
 80130b2:	f043 0320 	orr.w	r3, r3, #32
 80130b6:	6023      	str	r3, [r4, #0]
 80130b8:	e003      	b.n	80130c2 <_printf_i+0x86>
 80130ba:	2975      	cmp	r1, #117	; 0x75
 80130bc:	d017      	beq.n	80130ee <_printf_i+0xb2>
 80130be:	2978      	cmp	r1, #120	; 0x78
 80130c0:	d1d4      	bne.n	801306c <_printf_i+0x30>
 80130c2:	2378      	movs	r3, #120	; 0x78
 80130c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80130c8:	4864      	ldr	r0, [pc, #400]	; (801325c <_printf_i+0x220>)
 80130ca:	e055      	b.n	8013178 <_printf_i+0x13c>
 80130cc:	6813      	ldr	r3, [r2, #0]
 80130ce:	1d19      	adds	r1, r3, #4
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	6011      	str	r1, [r2, #0]
 80130d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80130d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80130dc:	2301      	movs	r3, #1
 80130de:	e08c      	b.n	80131fa <_printf_i+0x1be>
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	6011      	str	r1, [r2, #0]
 80130e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80130e8:	bf18      	it	ne
 80130ea:	b21b      	sxthne	r3, r3
 80130ec:	e7cf      	b.n	801308e <_printf_i+0x52>
 80130ee:	6813      	ldr	r3, [r2, #0]
 80130f0:	6825      	ldr	r5, [r4, #0]
 80130f2:	1d18      	adds	r0, r3, #4
 80130f4:	6010      	str	r0, [r2, #0]
 80130f6:	0628      	lsls	r0, r5, #24
 80130f8:	d501      	bpl.n	80130fe <_printf_i+0xc2>
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	e002      	b.n	8013104 <_printf_i+0xc8>
 80130fe:	0668      	lsls	r0, r5, #25
 8013100:	d5fb      	bpl.n	80130fa <_printf_i+0xbe>
 8013102:	881b      	ldrh	r3, [r3, #0]
 8013104:	4854      	ldr	r0, [pc, #336]	; (8013258 <_printf_i+0x21c>)
 8013106:	296f      	cmp	r1, #111	; 0x6f
 8013108:	bf14      	ite	ne
 801310a:	220a      	movne	r2, #10
 801310c:	2208      	moveq	r2, #8
 801310e:	2100      	movs	r1, #0
 8013110:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013114:	6865      	ldr	r5, [r4, #4]
 8013116:	60a5      	str	r5, [r4, #8]
 8013118:	2d00      	cmp	r5, #0
 801311a:	f2c0 8095 	blt.w	8013248 <_printf_i+0x20c>
 801311e:	6821      	ldr	r1, [r4, #0]
 8013120:	f021 0104 	bic.w	r1, r1, #4
 8013124:	6021      	str	r1, [r4, #0]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d13d      	bne.n	80131a6 <_printf_i+0x16a>
 801312a:	2d00      	cmp	r5, #0
 801312c:	f040 808e 	bne.w	801324c <_printf_i+0x210>
 8013130:	4665      	mov	r5, ip
 8013132:	2a08      	cmp	r2, #8
 8013134:	d10b      	bne.n	801314e <_printf_i+0x112>
 8013136:	6823      	ldr	r3, [r4, #0]
 8013138:	07db      	lsls	r3, r3, #31
 801313a:	d508      	bpl.n	801314e <_printf_i+0x112>
 801313c:	6923      	ldr	r3, [r4, #16]
 801313e:	6862      	ldr	r2, [r4, #4]
 8013140:	429a      	cmp	r2, r3
 8013142:	bfde      	ittt	le
 8013144:	2330      	movle	r3, #48	; 0x30
 8013146:	f805 3c01 	strble.w	r3, [r5, #-1]
 801314a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801314e:	ebac 0305 	sub.w	r3, ip, r5
 8013152:	6123      	str	r3, [r4, #16]
 8013154:	f8cd 8000 	str.w	r8, [sp]
 8013158:	463b      	mov	r3, r7
 801315a:	aa03      	add	r2, sp, #12
 801315c:	4621      	mov	r1, r4
 801315e:	4630      	mov	r0, r6
 8013160:	f7ff fef6 	bl	8012f50 <_printf_common>
 8013164:	3001      	adds	r0, #1
 8013166:	d14d      	bne.n	8013204 <_printf_i+0x1c8>
 8013168:	f04f 30ff 	mov.w	r0, #4294967295
 801316c:	b005      	add	sp, #20
 801316e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013172:	4839      	ldr	r0, [pc, #228]	; (8013258 <_printf_i+0x21c>)
 8013174:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013178:	6813      	ldr	r3, [r2, #0]
 801317a:	6821      	ldr	r1, [r4, #0]
 801317c:	1d1d      	adds	r5, r3, #4
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	6015      	str	r5, [r2, #0]
 8013182:	060a      	lsls	r2, r1, #24
 8013184:	d50b      	bpl.n	801319e <_printf_i+0x162>
 8013186:	07ca      	lsls	r2, r1, #31
 8013188:	bf44      	itt	mi
 801318a:	f041 0120 	orrmi.w	r1, r1, #32
 801318e:	6021      	strmi	r1, [r4, #0]
 8013190:	b91b      	cbnz	r3, 801319a <_printf_i+0x15e>
 8013192:	6822      	ldr	r2, [r4, #0]
 8013194:	f022 0220 	bic.w	r2, r2, #32
 8013198:	6022      	str	r2, [r4, #0]
 801319a:	2210      	movs	r2, #16
 801319c:	e7b7      	b.n	801310e <_printf_i+0xd2>
 801319e:	064d      	lsls	r5, r1, #25
 80131a0:	bf48      	it	mi
 80131a2:	b29b      	uxthmi	r3, r3
 80131a4:	e7ef      	b.n	8013186 <_printf_i+0x14a>
 80131a6:	4665      	mov	r5, ip
 80131a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80131ac:	fb02 3311 	mls	r3, r2, r1, r3
 80131b0:	5cc3      	ldrb	r3, [r0, r3]
 80131b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80131b6:	460b      	mov	r3, r1
 80131b8:	2900      	cmp	r1, #0
 80131ba:	d1f5      	bne.n	80131a8 <_printf_i+0x16c>
 80131bc:	e7b9      	b.n	8013132 <_printf_i+0xf6>
 80131be:	6813      	ldr	r3, [r2, #0]
 80131c0:	6825      	ldr	r5, [r4, #0]
 80131c2:	6961      	ldr	r1, [r4, #20]
 80131c4:	1d18      	adds	r0, r3, #4
 80131c6:	6010      	str	r0, [r2, #0]
 80131c8:	0628      	lsls	r0, r5, #24
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	d501      	bpl.n	80131d2 <_printf_i+0x196>
 80131ce:	6019      	str	r1, [r3, #0]
 80131d0:	e002      	b.n	80131d8 <_printf_i+0x19c>
 80131d2:	066a      	lsls	r2, r5, #25
 80131d4:	d5fb      	bpl.n	80131ce <_printf_i+0x192>
 80131d6:	8019      	strh	r1, [r3, #0]
 80131d8:	2300      	movs	r3, #0
 80131da:	6123      	str	r3, [r4, #16]
 80131dc:	4665      	mov	r5, ip
 80131de:	e7b9      	b.n	8013154 <_printf_i+0x118>
 80131e0:	6813      	ldr	r3, [r2, #0]
 80131e2:	1d19      	adds	r1, r3, #4
 80131e4:	6011      	str	r1, [r2, #0]
 80131e6:	681d      	ldr	r5, [r3, #0]
 80131e8:	6862      	ldr	r2, [r4, #4]
 80131ea:	2100      	movs	r1, #0
 80131ec:	4628      	mov	r0, r5
 80131ee:	f7ed f877 	bl	80002e0 <memchr>
 80131f2:	b108      	cbz	r0, 80131f8 <_printf_i+0x1bc>
 80131f4:	1b40      	subs	r0, r0, r5
 80131f6:	6060      	str	r0, [r4, #4]
 80131f8:	6863      	ldr	r3, [r4, #4]
 80131fa:	6123      	str	r3, [r4, #16]
 80131fc:	2300      	movs	r3, #0
 80131fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013202:	e7a7      	b.n	8013154 <_printf_i+0x118>
 8013204:	6923      	ldr	r3, [r4, #16]
 8013206:	462a      	mov	r2, r5
 8013208:	4639      	mov	r1, r7
 801320a:	4630      	mov	r0, r6
 801320c:	47c0      	blx	r8
 801320e:	3001      	adds	r0, #1
 8013210:	d0aa      	beq.n	8013168 <_printf_i+0x12c>
 8013212:	6823      	ldr	r3, [r4, #0]
 8013214:	079b      	lsls	r3, r3, #30
 8013216:	d413      	bmi.n	8013240 <_printf_i+0x204>
 8013218:	68e0      	ldr	r0, [r4, #12]
 801321a:	9b03      	ldr	r3, [sp, #12]
 801321c:	4298      	cmp	r0, r3
 801321e:	bfb8      	it	lt
 8013220:	4618      	movlt	r0, r3
 8013222:	e7a3      	b.n	801316c <_printf_i+0x130>
 8013224:	2301      	movs	r3, #1
 8013226:	464a      	mov	r2, r9
 8013228:	4639      	mov	r1, r7
 801322a:	4630      	mov	r0, r6
 801322c:	47c0      	blx	r8
 801322e:	3001      	adds	r0, #1
 8013230:	d09a      	beq.n	8013168 <_printf_i+0x12c>
 8013232:	3501      	adds	r5, #1
 8013234:	68e3      	ldr	r3, [r4, #12]
 8013236:	9a03      	ldr	r2, [sp, #12]
 8013238:	1a9b      	subs	r3, r3, r2
 801323a:	42ab      	cmp	r3, r5
 801323c:	dcf2      	bgt.n	8013224 <_printf_i+0x1e8>
 801323e:	e7eb      	b.n	8013218 <_printf_i+0x1dc>
 8013240:	2500      	movs	r5, #0
 8013242:	f104 0919 	add.w	r9, r4, #25
 8013246:	e7f5      	b.n	8013234 <_printf_i+0x1f8>
 8013248:	2b00      	cmp	r3, #0
 801324a:	d1ac      	bne.n	80131a6 <_printf_i+0x16a>
 801324c:	7803      	ldrb	r3, [r0, #0]
 801324e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013252:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013256:	e76c      	b.n	8013132 <_printf_i+0xf6>
 8013258:	080134f5 	.word	0x080134f5
 801325c:	08013506 	.word	0x08013506

08013260 <memmove>:
 8013260:	4288      	cmp	r0, r1
 8013262:	b510      	push	{r4, lr}
 8013264:	eb01 0302 	add.w	r3, r1, r2
 8013268:	d807      	bhi.n	801327a <memmove+0x1a>
 801326a:	1e42      	subs	r2, r0, #1
 801326c:	4299      	cmp	r1, r3
 801326e:	d00a      	beq.n	8013286 <memmove+0x26>
 8013270:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013274:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013278:	e7f8      	b.n	801326c <memmove+0xc>
 801327a:	4283      	cmp	r3, r0
 801327c:	d9f5      	bls.n	801326a <memmove+0xa>
 801327e:	1881      	adds	r1, r0, r2
 8013280:	1ad2      	subs	r2, r2, r3
 8013282:	42d3      	cmn	r3, r2
 8013284:	d100      	bne.n	8013288 <memmove+0x28>
 8013286:	bd10      	pop	{r4, pc}
 8013288:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801328c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013290:	e7f7      	b.n	8013282 <memmove+0x22>

08013292 <_realloc_r>:
 8013292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013294:	4607      	mov	r7, r0
 8013296:	4614      	mov	r4, r2
 8013298:	460e      	mov	r6, r1
 801329a:	b921      	cbnz	r1, 80132a6 <_realloc_r+0x14>
 801329c:	4611      	mov	r1, r2
 801329e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80132a2:	f7ff bc77 	b.w	8012b94 <_malloc_r>
 80132a6:	b922      	cbnz	r2, 80132b2 <_realloc_r+0x20>
 80132a8:	f7ff fc26 	bl	8012af8 <_free_r>
 80132ac:	4625      	mov	r5, r4
 80132ae:	4628      	mov	r0, r5
 80132b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132b2:	f000 f814 	bl	80132de <_malloc_usable_size_r>
 80132b6:	42a0      	cmp	r0, r4
 80132b8:	d20f      	bcs.n	80132da <_realloc_r+0x48>
 80132ba:	4621      	mov	r1, r4
 80132bc:	4638      	mov	r0, r7
 80132be:	f7ff fc69 	bl	8012b94 <_malloc_r>
 80132c2:	4605      	mov	r5, r0
 80132c4:	2800      	cmp	r0, #0
 80132c6:	d0f2      	beq.n	80132ae <_realloc_r+0x1c>
 80132c8:	4631      	mov	r1, r6
 80132ca:	4622      	mov	r2, r4
 80132cc:	f7ff fc00 	bl	8012ad0 <memcpy>
 80132d0:	4631      	mov	r1, r6
 80132d2:	4638      	mov	r0, r7
 80132d4:	f7ff fc10 	bl	8012af8 <_free_r>
 80132d8:	e7e9      	b.n	80132ae <_realloc_r+0x1c>
 80132da:	4635      	mov	r5, r6
 80132dc:	e7e7      	b.n	80132ae <_realloc_r+0x1c>

080132de <_malloc_usable_size_r>:
 80132de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80132e2:	1f18      	subs	r0, r3, #4
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	bfbc      	itt	lt
 80132e8:	580b      	ldrlt	r3, [r1, r0]
 80132ea:	18c0      	addlt	r0, r0, r3
 80132ec:	4770      	bx	lr
	...

080132f0 <_init>:
 80132f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132f2:	bf00      	nop
 80132f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132f6:	bc08      	pop	{r3}
 80132f8:	469e      	mov	lr, r3
 80132fa:	4770      	bx	lr

080132fc <_fini>:
 80132fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132fe:	bf00      	nop
 8013300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013302:	bc08      	pop	{r3}
 8013304:	469e      	mov	lr, r3
 8013306:	4770      	bx	lr


Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a470  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  0801a710  0801a710  0002a710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b0a4  0801b0a4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801b0a4  0801b0a4  0002b0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b0ac  0801b0ac  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b0ac  0801b0ac  0002b0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b0b0  0801b0b0  0002b0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  0801b0b4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022d0  240001e0  0801b290  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240024b0  0801b290  000324b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a05d  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b2c  00000000  00000000  0007a267  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00081d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  000841b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000430f0  00000000  00000000  000862e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002816c  00000000  00000000  000c93d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00178689  00000000  00000000  000f153c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00269bc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f80  00000000  00000000  00269c40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a6f8 	.word	0x0801a6f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0801a6f8 	.word	0x0801a6f8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f006 fb78 	bl	8006db0 <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f006 fbe6 	bl	8006e9c <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f003 fa7f 	bl	8003bd8 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f006 fc2e 	bl	8006f3c <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f003 fa77 	bl	8003bd8 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f006 fdae 	bl	8007250 <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f003 fa6d 	bl	8003bd8 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f006 fbf9 	bl	8006ef6 <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b91      	ldr	r3, [pc, #580]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000718:	4a91      	ldr	r2, [pc, #580]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f006 fc39 	bl	8006f94 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	f040 8114 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
			      {
					uint32_t time = HAL_GetTick();
 800072a:	f003 ff3d 	bl	80045a8 <HAL_GetTick>
 800072e:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000730:	2101      	movs	r1, #1
 8000732:	488c      	ldr	r0, [pc, #560]	; (8000964 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000734:	f007 fc77 	bl	8008026 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000738:	488b      	ldr	r0, [pc, #556]	; (8000968 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 800073a:	f018 ffbb 	bl	80196b4 <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 800073e:	4b88      	ldr	r3, [pc, #544]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d17f      	bne.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						CanFrame.id = RxHeader.Identifier;
 8000746:	4b86      	ldr	r3, [pc, #536]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a88      	ldr	r2, [pc, #544]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800074c:	6013      	str	r3, [r2, #0]
						switch(RxHeader.DataLength/65536){
 800074e:	4b84      	ldr	r3, [pc, #528]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	3b01      	subs	r3, #1
 8000756:	2b0e      	cmp	r3, #14
 8000758:	d85c      	bhi.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
 800075a:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <HAL_FDCAN_RxFifo0Callback+0x54>)
 800075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000760:	0800079d 	.word	0x0800079d
 8000764:	080007a5 	.word	0x080007a5
 8000768:	080007ad 	.word	0x080007ad
 800076c:	080007b5 	.word	0x080007b5
 8000770:	080007bd 	.word	0x080007bd
 8000774:	080007c5 	.word	0x080007c5
 8000778:	080007cd 	.word	0x080007cd
 800077c:	080007d5 	.word	0x080007d5
 8000780:	080007dd 	.word	0x080007dd
 8000784:	080007e5 	.word	0x080007e5
 8000788:	080007ed 	.word	0x080007ed
 800078c:	080007f5 	.word	0x080007f5
 8000790:	080007fd 	.word	0x080007fd
 8000794:	08000805 	.word	0x08000805
 8000798:	0800080d 	.word	0x0800080d
							case 1:
								CanFrame.length = 1;
 800079c:	4b73      	ldr	r3, [pc, #460]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800079e:	2201      	movs	r2, #1
 80007a0:	715a      	strb	r2, [r3, #5]
								break;
 80007a2:	e037      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 2:
								CanFrame.length = 2;
 80007a4:	4b71      	ldr	r3, [pc, #452]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	715a      	strb	r2, [r3, #5]
								break;
 80007aa:	e033      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 3:
								CanFrame.length = 3;
 80007ac:	4b6f      	ldr	r3, [pc, #444]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	715a      	strb	r2, [r3, #5]
								break;
 80007b2:	e02f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 4:
								CanFrame.length = 4;
 80007b4:	4b6d      	ldr	r3, [pc, #436]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	715a      	strb	r2, [r3, #5]
								break;
 80007ba:	e02b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 5:
								CanFrame.length = 5;
 80007bc:	4b6b      	ldr	r3, [pc, #428]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007be:	2205      	movs	r2, #5
 80007c0:	715a      	strb	r2, [r3, #5]
								break;
 80007c2:	e027      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 6:
								CanFrame.length = 6;
 80007c4:	4b69      	ldr	r3, [pc, #420]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007c6:	2206      	movs	r2, #6
 80007c8:	715a      	strb	r2, [r3, #5]
								break;
 80007ca:	e023      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 7:
								CanFrame.length = 7;
 80007cc:	4b67      	ldr	r3, [pc, #412]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	715a      	strb	r2, [r3, #5]
								break;
 80007d2:	e01f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 8:
								CanFrame.length = 8;
 80007d4:	4b65      	ldr	r3, [pc, #404]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	715a      	strb	r2, [r3, #5]
								break;
 80007da:	e01b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 9:
								CanFrame.length = 12;
 80007dc:	4b63      	ldr	r3, [pc, #396]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007de:	220c      	movs	r2, #12
 80007e0:	715a      	strb	r2, [r3, #5]
								break;
 80007e2:	e017      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 10:
								CanFrame.length = 16;
 80007e4:	4b61      	ldr	r3, [pc, #388]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	715a      	strb	r2, [r3, #5]
								break;
 80007ea:	e013      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 11:
								CanFrame.length = 20;
 80007ec:	4b5f      	ldr	r3, [pc, #380]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ee:	2214      	movs	r2, #20
 80007f0:	715a      	strb	r2, [r3, #5]
								break;
 80007f2:	e00f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 12:
								CanFrame.length = 24;
 80007f4:	4b5d      	ldr	r3, [pc, #372]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007f6:	2218      	movs	r2, #24
 80007f8:	715a      	strb	r2, [r3, #5]
								break;
 80007fa:	e00b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 13:
								CanFrame.length = 32;
 80007fc:	4b5b      	ldr	r3, [pc, #364]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007fe:	2220      	movs	r2, #32
 8000800:	715a      	strb	r2, [r3, #5]
								break;
 8000802:	e007      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 14:
								CanFrame.length = 48;
 8000804:	4b59      	ldr	r3, [pc, #356]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	715a      	strb	r2, [r3, #5]
								break;
 800080a:	e003      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 15:
								CanFrame.length = 64;
 800080c:	4b57      	ldr	r3, [pc, #348]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800080e:	2240      	movs	r2, #64	; 0x40
 8000810:	715a      	strb	r2, [r3, #5]
								break;
 8000812:	bf00      	nop
						}
						CanFrame.time = time;
 8000814:	4a55      	ldr	r2, [pc, #340]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 800081a:	4b55      	ldr	r3, [pc, #340]	; (8000970 <HAL_FDCAN_RxFifo0Callback+0x264>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
						memcpy(CanFrame.data.bytes, RxData, CanFrame.length);
 8000820:	4b52      	ldr	r3, [pc, #328]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	461a      	mov	r2, r3
 8000826:	494d      	ldr	r1, [pc, #308]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000828:	4852      	ldr	r0, [pc, #328]	; (8000974 <HAL_FDCAN_RxFifo0Callback+0x268>)
 800082a:	f018 fe13 	bl	8019454 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000836:	d103      	bne.n	8000840 <HAL_FDCAN_RxFifo0Callback+0x134>
							CanFrame.extended = 1;
 8000838:	4b4c      	ldr	r3, [pc, #304]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800083a:	2201      	movs	r2, #1
 800083c:	711a      	strb	r2, [r3, #4]
 800083e:	e002      	b.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						}
						else{
							CanFrame.extended = 0;
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000842:	2200      	movs	r2, #0
 8000844:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 8000846:	4b46      	ldr	r3, [pc, #280]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800084e:	f040 8080 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
						CanFDFrame.id = RxHeader.Identifier;
 8000852:	4b43      	ldr	r3, [pc, #268]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a48      	ldr	r2, [pc, #288]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000858:	6013      	str	r3, [r2, #0]

						switch(RxHeader.DataLength/65536){
 800085a:	4b41      	ldr	r3, [pc, #260]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	3b01      	subs	r3, #1
 8000862:	2b0e      	cmp	r3, #14
 8000864:	d85c      	bhi.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <HAL_FDCAN_RxFifo0Callback+0x160>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	080008a9 	.word	0x080008a9
 8000870:	080008b1 	.word	0x080008b1
 8000874:	080008b9 	.word	0x080008b9
 8000878:	080008c1 	.word	0x080008c1
 800087c:	080008c9 	.word	0x080008c9
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008d9 	.word	0x080008d9
 8000888:	080008e1 	.word	0x080008e1
 800088c:	080008e9 	.word	0x080008e9
 8000890:	080008f1 	.word	0x080008f1
 8000894:	080008f9 	.word	0x080008f9
 8000898:	08000901 	.word	0x08000901
 800089c:	08000909 	.word	0x08000909
 80008a0:	08000911 	.word	0x08000911
 80008a4:	08000919 	.word	0x08000919
							case 1:
								CanFDFrame.length = 1;
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	609a      	str	r2, [r3, #8]
								break;
 80008ae:	e037      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 2:
								CanFDFrame.length = 2;
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	609a      	str	r2, [r3, #8]
								break;
 80008b6:	e033      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 3:
								CanFDFrame.length = 3;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	609a      	str	r2, [r3, #8]
								break;
 80008be:	e02f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 4:
								CanFDFrame.length = 4;
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	609a      	str	r2, [r3, #8]
								break;
 80008c6:	e02b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 5:
								CanFDFrame.length = 5;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ca:	2205      	movs	r2, #5
 80008cc:	609a      	str	r2, [r3, #8]
								break;
 80008ce:	e027      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 6:
								CanFDFrame.length = 6;
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	609a      	str	r2, [r3, #8]
								break;
 80008d6:	e023      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 7:
								CanFDFrame.length = 7;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008da:	2207      	movs	r2, #7
 80008dc:	609a      	str	r2, [r3, #8]
								break;
 80008de:	e01f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 8:
								CanFDFrame.length = 8;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	609a      	str	r2, [r3, #8]
								break;
 80008e6:	e01b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 9:
								CanFDFrame.length = 12;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	609a      	str	r2, [r3, #8]
								break;
 80008ee:	e017      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 10:
								CanFDFrame.length = 16;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008f2:	2210      	movs	r2, #16
 80008f4:	609a      	str	r2, [r3, #8]
								break;
 80008f6:	e013      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 11:
								CanFDFrame.length = 20;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008fa:	2214      	movs	r2, #20
 80008fc:	609a      	str	r2, [r3, #8]
								break;
 80008fe:	e00f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 12:
								CanFDFrame.length = 24;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000902:	2218      	movs	r2, #24
 8000904:	609a      	str	r2, [r3, #8]
								break;
 8000906:	e00b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 13:
								CanFDFrame.length = 32;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800090a:	2220      	movs	r2, #32
 800090c:	609a      	str	r2, [r3, #8]
								break;
 800090e:	e007      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 14:
								CanFDFrame.length = 48;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	609a      	str	r2, [r3, #8]
								break;
 8000916:	e003      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 15:
								CanFDFrame.length = 64;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	609a      	str	r2, [r3, #8]
								break;
 800091e:	bf00      	nop
						}

						CanFDFrame.time = time;
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_FDCAN_RxFifo0Callback+0x270>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
						memcpy(CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	461a      	mov	r2, r3
 8000932:	490a      	ldr	r1, [pc, #40]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000936:	f018 fd8d 	bl	8019454 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000942:	d103      	bne.n	800094c <HAL_FDCAN_RxFifo0Callback+0x240>
							CanFDFrame.extended = 1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000946:	2201      	movs	r2, #1
 8000948:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 800094a:	e002      	b.n	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
							CanFDFrame.extended = 0;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800094e:	2200      	movs	r2, #0
 8000950:	711a      	strb	r2, [r3, #4]
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	24001000 	.word	0x24001000
 8000960:	24001090 	.word	0x24001090
 8000964:	58020400 	.word	0x58020400
 8000968:	0801a710 	.word	0x0801a710
 800096c:	240010b8 	.word	0x240010b8
 8000970:	24000200 	.word	0x24000200
 8000974:	240010c8 	.word	0x240010c8
 8000978:	24001040 	.word	0x24001040
 800097c:	240001fc 	.word	0x240001fc
 8000980:	24001050 	.word	0x24001050

08000984 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09e      	sub	sp, #120	; 0x78
 8000988:	af02      	add	r7, sp, #8
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000990:	68b8      	ldr	r0, [r7, #8]
 8000992:	f7ff fca5 	bl	80002e0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	2b03      	cmp	r3, #3
 800099a:	d001      	beq.n	80009a0 <gps_msg_config+0x1c>
 800099c:	2301      	movs	r3, #1
 800099e:	e052      	b.n	8000a46 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80009a0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <gps_msg_config+0xcc>)
 80009ac:	211f      	movs	r1, #31
 80009ae:	f018 fe99 	bl	80196e4 <sniprintf>

	int checksum_int = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80009ba:	e00b      	b.n	80009d4 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80009bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ca:	4053      	eors	r3, r2
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009d0:	3301      	adds	r3, #1
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80009d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <gps_msg_config+0x64>
 80009e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e4:	2b1f      	cmp	r3, #31
 80009e6:	dde9      	ble.n	80009bc <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80009e8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80009ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <gps_msg_config+0xd0>)
 80009f0:	2107      	movs	r1, #7
 80009f2:	f018 fe77 	bl	80196e4 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80009f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009fa:	f107 0014 	add.w	r0, r7, #20
 80009fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4613      	mov	r3, r2
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <gps_msg_config+0xd4>)
 8000a08:	2129      	movs	r1, #41	; 0x29
 8000a0a:	f018 fe6b 	bl	80196e4 <sniprintf>
	printf("\n\rSending: ");
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <gps_msg_config+0xd8>)
 8000a10:	f018 fddc 	bl	80195cc <iprintf>
	printf("%s", messagetosend);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <gps_msg_config+0xdc>)
 8000a1c:	f018 fdd6 	bl	80195cc <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fc5b 	bl	80002e0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f107 0114 	add.w	r1, r7, #20
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f00f f89e 	bl	800fb76 <HAL_UART_Transmit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <gps_msg_config+0xc0>
		Error_Handler();
 8000a40:	f003 f8ca 	bl	8003bd8 <Error_Handler>
	}
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3770      	adds	r7, #112	; 0x70
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	0801a724 	.word	0x0801a724
 8000a54:	0801a73c 	.word	0x0801a73c
 8000a58:	0801a744 	.word	0x0801a744
 8000a5c:	0801a74c 	.word	0x0801a74c
 8000a60:	0801a758 	.word	0x0801a758

08000a64 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	461a      	mov	r2, r3
 8000a72:	4603      	mov	r3, r0
 8000a74:	817b      	strh	r3, [r7, #10]
 8000a76:	460b      	mov	r3, r1
 8000a78:	813b      	strh	r3, [r7, #8]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 8000a7e:	2306      	movs	r3, #6
 8000a80:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000a82:	23b5      	movs	r3, #181	; 0xb5
 8000a84:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000a86:	2362      	movs	r3, #98	; 0x62
 8000a88:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000a92:	8bfb      	ldrh	r3, [r7, #30]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000a9c:	897b      	ldrh	r3, [r7, #10]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000aa6:	893b      	ldrh	r3, [r7, #8]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	e013      	b.n	8000af4 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ada:	4413      	add	r3, r2
 8000adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8000ae0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ae8:	4413      	add	r3, r2
 8000aea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	3301      	adds	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	2b0b      	cmp	r3, #11
 8000af8:	dde8      	ble.n	8000acc <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000afe:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8000b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b04:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000b06:	f107 0110 	add.w	r1, r7, #16
 8000b0a:	2364      	movs	r3, #100	; 0x64
 8000b0c:	220e      	movs	r2, #14
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f00f f831 	bl	800fb76 <HAL_UART_Transmit>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <gps_rate_config+0xbe>
				Error_Handler();
 8000b1a:	f003 f85d 	bl	8003bd8 <Error_Handler>
				return 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <gps_rate_config+0xc0>
			}
		return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	24000204 	.word	0x24000204

08000b4c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <NRF24_DelayMicroSeconds+0x38>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <NRF24_DelayMicroSeconds+0x3c>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9a      	lsrs	r2, r3, #18
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	fb02 f303 	mul.w	r3, r2, r3
 8000b6a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000b6c:	bf00      	nop
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	60fa      	str	r2, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1fa      	bne.n	8000b6e <NRF24_DelayMicroSeconds+0x22>
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	24000010 	.word	0x24000010
 8000b88:	165e9f81 	.word	0x165e9f81

08000b8c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <NRF24_csn+0x20>
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <NRF24_csn+0x38>)
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <NRF24_csn+0x3c>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f007 fa25 	bl	8007ff4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000baa:	e007      	b.n	8000bbc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <NRF24_csn+0x38>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <NRF24_csn+0x3c>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f007 fa1c 	bl	8007ff4 <HAL_GPIO_WritePin>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24000210 	.word	0x24000210
 8000bc8:	24000214 	.word	0x24000214

08000bcc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d008      	beq.n	8000bec <NRF24_ce+0x20>
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <NRF24_ce+0x38>)
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <NRF24_ce+0x3c>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	f007 fa05 	bl	8007ff4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000bea:	e007      	b.n	8000bfc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <NRF24_ce+0x38>)
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <NRF24_ce+0x3c>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f007 f9fc 	bl	8007ff4 <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	24000210 	.word	0x24000210
 8000c08:	24000216 	.word	0x24000216

08000c0c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff ffb8 	bl	8000b8c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 031f 	and.w	r3, r3, #31
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c26:	f107 010c 	add.w	r1, r7, #12
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	480a      	ldr	r0, [pc, #40]	; (8000c58 <NRF24_read_register+0x4c>)
 8000c30:	f00d ff98 	bl	800eb64 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	1c59      	adds	r1, r3, #1
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <NRF24_read_register+0x4c>)
 8000c40:	f00e f982 	bl	800ef48 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff ff9f 	bl	8000b8c <NRF24_csn>
	return retData;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000218 	.word	0x24000218

08000c5c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff ff8d 	bl	8000b8c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 031f 	and.w	r3, r3, #31
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c7c:	f107 010c 	add.w	r1, r7, #12
 8000c80:	2364      	movs	r3, #100	; 0x64
 8000c82:	2201      	movs	r2, #1
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <NRF24_read_registerN+0x4c>)
 8000c86:	f00d ff6d 	bl	800eb64 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	2364      	movs	r3, #100	; 0x64
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <NRF24_read_registerN+0x4c>)
 8000c94:	f00e f958 	bl	800ef48 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff ff77 	bl	8000b8c <NRF24_csn>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	24000218 	.word	0x24000218

08000cac <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff65 	bl	8000b8c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000cd0:	f107 010c 	add.w	r1, r7, #12
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <NRF24_write_register+0x40>)
 8000cda:	f00d ff43 	bl	800eb64 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff ff54 	bl	8000b8c <NRF24_csn>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	24000218 	.word	0x24000218

08000cf0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ff43 	bl	8000b8c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f043 0320 	orr.w	r3, r3, #32
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000d10:	f107 010c 	add.w	r1, r7, #12
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	2201      	movs	r2, #1
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <NRF24_write_registerN+0x4c>)
 8000d1a:	f00d ff23 	bl	800eb64 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	2364      	movs	r3, #100	; 0x64
 8000d24:	6839      	ldr	r1, [r7, #0]
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <NRF24_write_registerN+0x4c>)
 8000d28:	f00d ff1c 	bl	800eb64 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff ff2d 	bl	8000b8c <NRF24_csn>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000218 	.word	0x24000218

08000d40 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff1d 	bl	8000b8c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000d52:	23a0      	movs	r3, #160	; 0xa0
 8000d54:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000d56:	f107 010f 	add.w	r1, r7, #15
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <NRF24_write_payload+0x40>)
 8000d60:	f00d ff00 	bl	800eb64 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	2364      	movs	r3, #100	; 0x64
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <NRF24_write_payload+0x40>)
 8000d6e:	f00d fef9 	bl	800eb64 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ff0a 	bl	8000b8c <NRF24_csn>
}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	24000218 	.word	0x24000218

08000d84 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000d88:	21ff      	movs	r1, #255	; 0xff
 8000d8a:	20e1      	movs	r0, #225	; 0xe1
 8000d8c:	f7ff ff8e 	bl	8000cac <NRF24_write_register>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000d98:	21ff      	movs	r1, #255	; 0xff
 8000d9a:	20e2      	movs	r0, #226	; 0xe2
 8000d9c:	f7ff ff86 	bl	8000cac <NRF24_write_register>
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000daa:	2007      	movs	r0, #7
 8000dac:	f7ff ff2e 	bl	8000c0c <NRF24_read_register>
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000dd4:	4b66      	ldr	r3, [pc, #408]	; (8000f70 <NRF24_begin+0x1b0>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2288      	movs	r2, #136	; 0x88
 8000dde:	4619      	mov	r1, r3
 8000de0:	f018 fb38 	bl	8019454 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000de4:	4a63      	ldr	r2, [pc, #396]	; (8000f74 <NRF24_begin+0x1b4>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000dea:	4a63      	ldr	r2, [pc, #396]	; (8000f78 <NRF24_begin+0x1b8>)
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000df0:	4a62      	ldr	r2, [pc, #392]	; (8000f7c <NRF24_begin+0x1bc>)
 8000df2:	883b      	ldrh	r3, [r7, #0]
 8000df4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fec8 	bl	8000b8c <NRF24_csn>
	NRF24_ce(0);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fee5 	bl	8000bcc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000e02:	2005      	movs	r0, #5
 8000e04:	f003 fbdc 	bl	80045c0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000e08:	2108      	movs	r1, #8
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff ff4e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000e10:	213f      	movs	r1, #63	; 0x3f
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff ff4a 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000e18:	2103      	movs	r1, #3
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f7ff ff46 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000e20:	2103      	movs	r1, #3
 8000e22:	2003      	movs	r0, #3
 8000e24:	f7ff ff42 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000e28:	2103      	movs	r1, #3
 8000e2a:	2004      	movs	r0, #4
 8000e2c:	f7ff ff3e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000e30:	2102      	movs	r1, #2
 8000e32:	2005      	movs	r0, #5
 8000e34:	f7ff ff3a 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000e38:	210f      	movs	r1, #15
 8000e3a:	2006      	movs	r0, #6
 8000e3c:	f7ff ff36 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000e40:	210e      	movs	r1, #14
 8000e42:	2007      	movs	r0, #7
 8000e44:	f7ff ff32 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2008      	movs	r0, #8
 8000e4c:	f7ff ff2e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000e50:	2100      	movs	r1, #0
 8000e52:	2009      	movs	r0, #9
 8000e54:	f7ff ff2a 	bl	8000cac <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000e58:	23e7      	movs	r3, #231	; 0xe7
 8000e5a:	733b      	strb	r3, [r7, #12]
 8000e5c:	23e7      	movs	r3, #231	; 0xe7
 8000e5e:	72fb      	strb	r3, [r7, #11]
 8000e60:	23e7      	movs	r3, #231	; 0xe7
 8000e62:	72bb      	strb	r3, [r7, #10]
 8000e64:	23e7      	movs	r3, #231	; 0xe7
 8000e66:	727b      	strb	r3, [r7, #9]
 8000e68:	23e7      	movs	r3, #231	; 0xe7
 8000e6a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	2205      	movs	r2, #5
 8000e72:	4619      	mov	r1, r3
 8000e74:	200a      	movs	r0, #10
 8000e76:	f7ff ff3b 	bl	8000cf0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000e7a:	23c2      	movs	r3, #194	; 0xc2
 8000e7c:	733b      	strb	r3, [r7, #12]
 8000e7e:	23c2      	movs	r3, #194	; 0xc2
 8000e80:	72fb      	strb	r3, [r7, #11]
 8000e82:	23c2      	movs	r3, #194	; 0xc2
 8000e84:	72bb      	strb	r3, [r7, #10]
 8000e86:	23c2      	movs	r3, #194	; 0xc2
 8000e88:	727b      	strb	r3, [r7, #9]
 8000e8a:	23c2      	movs	r3, #194	; 0xc2
 8000e8c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	2205      	movs	r2, #5
 8000e94:	4619      	mov	r1, r3
 8000e96:	200b      	movs	r0, #11
 8000e98:	f7ff ff2a 	bl	8000cf0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000e9c:	21c3      	movs	r1, #195	; 0xc3
 8000e9e:	200c      	movs	r0, #12
 8000ea0:	f7ff ff04 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000ea4:	21c4      	movs	r1, #196	; 0xc4
 8000ea6:	200d      	movs	r0, #13
 8000ea8:	f7ff ff00 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000eac:	21c5      	movs	r1, #197	; 0xc5
 8000eae:	200e      	movs	r0, #14
 8000eb0:	f7ff fefc 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000eb4:	21c6      	movs	r1, #198	; 0xc6
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f7ff fef8 	bl	8000cac <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000ebc:	23e7      	movs	r3, #231	; 0xe7
 8000ebe:	733b      	strb	r3, [r7, #12]
 8000ec0:	23e7      	movs	r3, #231	; 0xe7
 8000ec2:	72fb      	strb	r3, [r7, #11]
 8000ec4:	23e7      	movs	r3, #231	; 0xe7
 8000ec6:	72bb      	strb	r3, [r7, #10]
 8000ec8:	23e7      	movs	r3, #231	; 0xe7
 8000eca:	727b      	strb	r3, [r7, #9]
 8000ecc:	23e7      	movs	r3, #231	; 0xe7
 8000ece:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f7ff ff09 	bl	8000cf0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2011      	movs	r0, #17
 8000ee2:	f7ff fee3 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2012      	movs	r0, #18
 8000eea:	f7ff fedf 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2013      	movs	r0, #19
 8000ef2:	f7ff fedb 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2014      	movs	r0, #20
 8000efa:	f7ff fed7 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000efe:	2100      	movs	r1, #0
 8000f00:	2015      	movs	r0, #21
 8000f02:	f7ff fed3 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000f06:	2100      	movs	r1, #0
 8000f08:	2016      	movs	r0, #22
 8000f0a:	f7ff fecf 	bl	8000cac <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000f0e:	f000 fa89 	bl	8001424 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000f12:	2100      	movs	r1, #0
 8000f14:	201c      	movs	r0, #28
 8000f16:	f7ff fec9 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	201d      	movs	r0, #29
 8000f1e:	f7ff fec5 	bl	8000cac <NRF24_write_register>
	printRadioSettings();
 8000f22:	f000 fa99 	bl	8001458 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000f26:	210f      	movs	r1, #15
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f000 f8ad 	bl	8001088 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 f927 	bl	8001182 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 f95d 	bl	80011f4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f000 f9a0 	bl	8001280 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000f40:	f000 f8f2 	bl	8001128 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000f44:	2020      	movs	r0, #32
 8000f46:	f000 f8cf 	bl	80010e8 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000f4a:	f000 fa62 	bl	8001412 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000f4e:	204c      	movs	r0, #76	; 0x4c
 8000f50:	f000 f8b5 	bl	80010be <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000f54:	f7ff ff16 	bl	8000d84 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f58:	f7ff ff1c 	bl	8000d94 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000f5c:	f000 f9b8 	bl	80012d0 <NRF24_powerDown>
	
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6a:	b002      	add	sp, #8
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	24000218 	.word	0x24000218
 8000f74:	24000210 	.word	0x24000210
 8000f78:	24000214 	.word	0x24000214
 8000f7c:	24000216 	.word	0x24000216

08000f80 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fe21 	bl	8000bcc <NRF24_ce>
	NRF24_flush_tx();
 8000f8a:	f7ff fefb 	bl	8000d84 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f8e:	f7ff ff01 	bl	8000d94 <NRF24_flush_rx>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000fa4:	f000 fa35 	bl	8001412 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	4619      	mov	r1, r3
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f9ce 	bl	800134e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000fb2:	f003 faf9 	bl	80045a8 <HAL_GetTick>
 8000fb6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000fb8:	230a      	movs	r3, #10
 8000fba:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000fbc:	f107 030d 	add.w	r3, r7, #13
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2008      	movs	r0, #8
 8000fc6:	f7ff fe49 	bl	8000c5c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000fca:	f7ff feeb 	bl	8000da4 <NRF24_get_status>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d107      	bne.n	8000fec <NRF24_write+0x54>
 8000fdc:	f003 fae4 	bl	80045a8 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8e7      	bhi.n	8000fbc <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000fec:	f107 010b 	add.w	r1, r7, #11
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <NRF24_write+0x90>)
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f9d8 	bl	80013ac <NRF24_whatHappened>
	retStatus = tx_ok;
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <NRF24_write+0x90>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001008:	f000 f886 	bl	8001118 <NRF24_getDynamicPayloadSize>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <NRF24_write+0x94>)
 8001012:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8001014:	f000 f80c 	bl	8001030 <NRF24_available>
	NRF24_flush_tx();
 8001018:	f7ff feb4 	bl	8000d84 <NRF24_flush_tx>
	return retStatus;
 800101c:	7bbb      	ldrb	r3, [r7, #14]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24000208 	.word	0x24000208
 800102c:	24000209 	.word	0x24000209

08001030 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f95a 	bl	80012ee <NRF24_availablePipe>
 800103a:	4603      	mov	r3, r0
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd80      	pop	{r7, pc}

08001040 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800104a:	463b      	mov	r3, r7
 800104c:	2205      	movs	r2, #5
 800104e:	4619      	mov	r1, r3
 8001050:	200a      	movs	r0, #10
 8001052:	f7ff fe4d 	bl	8000cf0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001056:	463b      	mov	r3, r7
 8001058:	2205      	movs	r2, #5
 800105a:	4619      	mov	r1, r3
 800105c:	2010      	movs	r0, #16
 800105e:	f7ff fe47 	bl	8000cf0 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8001062:	2320      	movs	r3, #32
 8001064:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <NRF24_openWritingPipe+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	4293      	cmp	r3, r2
 800106e:	bf28      	it	cs
 8001070:	4613      	movcs	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	2011      	movs	r0, #17
 8001078:	f7ff fe18 	bl	8000cac <NRF24_write_register>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2400020a 	.word	0x2400020a

08001088 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	b25a      	sxtb	r2, r3
 800109e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4619      	mov	r1, r3
 80010b0:	2004      	movs	r0, #4
 80010b2:	f7ff fdfb 	bl	8000cac <NRF24_write_register>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80010c8:	237f      	movs	r3, #127	; 0x7f
 80010ca:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	4293      	cmp	r3, r2
 80010d2:	bf28      	it	cs
 80010d4:	4613      	movcs	r3, r2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	2005      	movs	r0, #5
 80010dc:	f7ff fde6 	bl	8000cac <NRF24_write_register>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80010f2:	2320      	movs	r3, #32
 80010f4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	bf28      	it	cs
 80010fe:	4613      	movcs	r3, r2
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <NRF24_setPayloadSize+0x2c>)
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2400020a 	.word	0x2400020a

08001118 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800111c:	2060      	movs	r0, #96	; 0x60
 800111e:	f7ff fd75 	bl	8000c0c <NRF24_read_register>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	bd80      	pop	{r7, pc}

08001128 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800112c:	201d      	movs	r0, #29
 800112e:	f7ff fd6d 	bl	8000c0c <NRF24_read_register>
 8001132:	4603      	mov	r3, r0
 8001134:	f023 0304 	bic.w	r3, r3, #4
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4619      	mov	r1, r3
 800113c:	201d      	movs	r0, #29
 800113e:	f7ff fdb5 	bl	8000cac <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8001142:	2100      	movs	r1, #0
 8001144:	201c      	movs	r0, #28
 8001146:	f7ff fdb1 	bl	8000cac <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800114a:	4b02      	ldr	r3, [pc, #8]	; (8001154 <NRF24_disableDynamicPayloads+0x2c>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2400020b 	.word	0x2400020b

08001158 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001168:	213f      	movs	r1, #63	; 0x3f
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fd9e 	bl	8000cac <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001170:	e003      	b.n	800117a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001172:	2100      	movs	r1, #0
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fd99 	bl	8000cac <NRF24_write_register>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800118c:	2006      	movs	r0, #6
 800118e:	f7ff fd3d 	bl	8000c0c <NRF24_read_register>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	f023 0306 	bic.w	r3, r3, #6
 800119c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d104      	bne.n	80011ae <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	f043 0306 	orr.w	r3, r3, #6
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e019      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d104      	bne.n	80011be <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e011      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d104      	bne.n	80011ce <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e009      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d103      	bne.n	80011e2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	f043 0306 	orr.w	r3, r3, #6
 80011e0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	4619      	mov	r1, r3
 80011e6:	2006      	movs	r0, #6
 80011e8:	f7ff fd60 	bl	8000cac <NRF24_write_register>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001202:	2006      	movs	r0, #6
 8001204:	f7ff fd02 	bl	8000c0c <NRF24_read_register>
 8001208:	4603      	mov	r3, r0
 800120a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <NRF24_setDataRate+0x88>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001218:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d107      	bne.n	8001230 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <NRF24_setDataRate+0x88>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	73bb      	strb	r3, [r7, #14]
 800122e:	e00d      	b.n	800124c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d107      	bne.n	8001246 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <NRF24_setDataRate+0x88>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	73bb      	strb	r3, [r7, #14]
 8001244:	e002      	b.n	800124c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <NRF24_setDataRate+0x88>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	4619      	mov	r1, r3
 8001250:	2006      	movs	r0, #6
 8001252:	f7ff fd2b 	bl	8000cac <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001256:	2006      	movs	r0, #6
 8001258:	f7ff fcd8 	bl	8000c0c <NRF24_read_register>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	4293      	cmp	r3, r2
 8001264:	d102      	bne.n	800126c <NRF24_setDataRate+0x78>
  {
    result = true;
 8001266:	2301      	movs	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	e002      	b.n	8001272 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <NRF24_setDataRate+0x88>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2400020c 	.word	0x2400020c

08001280 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fcbe 	bl	8000c0c <NRF24_read_register>
 8001290:	4603      	mov	r3, r0
 8001292:	f023 030c 	bic.w	r3, r3, #12
 8001296:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00f      	beq.n	80012be <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d104      	bne.n	80012ae <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e007      	b.n	80012be <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	4619      	mov	r1, r3
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fcf2 	bl	8000cac <NRF24_write_register>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff fc99 	bl	8000c0c <NRF24_read_register>
 80012da:	4603      	mov	r3, r0
 80012dc:	f023 0302 	bic.w	r3, r3, #2
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fce1 	bl	8000cac <NRF24_write_register>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}

080012ee <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80012f6:	f7ff fd55 	bl	8000da4 <NRF24_get_status>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf14      	ite	ne
 8001308:	2301      	movne	r3, #1
 800130a:	2300      	moveq	r3, #0
 800130c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800130e:	7bbb      	ldrb	r3, [r7, #14]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d017      	beq.n	8001344 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	085b      	lsrs	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800132a:	2140      	movs	r1, #64	; 0x40
 800132c:	2007      	movs	r0, #7
 800132e:	f7ff fcbd 	bl	8000cac <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800133c:	2120      	movs	r1, #32
 800133e:	2007      	movs	r0, #7
 8001340:	f7ff fcb4 	bl	8000cac <NRF24_write_register>
    }
  }
  return result;
 8001344:	7bbb      	ldrb	r3, [r7, #14]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fc36 	bl	8000bcc <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fc53 	bl	8000c0c <NRF24_read_register>
 8001366:	4603      	mov	r3, r0
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4619      	mov	r1, r3
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff fc98 	bl	8000cac <NRF24_write_register>
  NRF24_ce(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fc25 	bl	8000bcc <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8001382:	2096      	movs	r0, #150	; 0x96
 8001384:	f7ff fbe2 	bl	8000b4c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	4619      	mov	r1, r3
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fcd7 	bl	8000d40 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fc1a 	bl	8000bcc <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001398:	200f      	movs	r0, #15
 800139a:	f7ff fbd7 	bl	8000b4c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fc14 	bl	8000bcc <NRF24_ce>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80013b8:	f7ff fcf4 	bl	8000da4 <NRF24_get_status>
 80013bc:	4603      	mov	r3, r0
 80013be:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80013c6:	2170      	movs	r1, #112	; 0x70
 80013c8:	2007      	movs	r0, #7
 80013ca:	f7ff fc6f 	bl	8000cac <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf14      	ite	ne
 80013d8:	2301      	movne	r3, #1
 80013da:	2300      	moveq	r3, #0
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
 80013f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf14      	ite	ne
 8001400:	2301      	movne	r3, #1
 8001402:	2300      	moveq	r3, #0
 8001404:	b2da      	uxtb	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	701a      	strb	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001416:	2170      	movs	r1, #112	; 0x70
 8001418:	2007      	movs	r0, #7
 800141a:	f7ff fc47 	bl	8000cac <NRF24_write_register>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fbae 	bl	8000b8c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001430:	2350      	movs	r3, #80	; 0x50
 8001432:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001434:	2373      	movs	r3, #115	; 0x73
 8001436:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001438:	1d39      	adds	r1, r7, #4
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	2202      	movs	r2, #2
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <NRF24_ACTIVATE_cmd+0x30>)
 8001440:	f00d fb90 	bl	800eb64 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fba1 	bl	8000b8c <NRF24_csn>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	24000218 	.word	0x24000218

08001458 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	b0a1      	sub	sp, #132	; 0x84
 800145c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4ab6      	ldr	r2, [pc, #728]	; (800173c <printRadioSettings+0x2e4>)
 8001464:	461c      	mov	r4, r3
 8001466:	4615      	mov	r5, r2
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001474:	682b      	ldr	r3, [r5, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	8022      	strh	r2, [r4, #0]
 800147a:	3402      	adds	r4, #2
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48aa      	ldr	r0, [pc, #680]	; (8001740 <printRadioSettings+0x2e8>)
 8001496:	f00e fb6e 	bl	800fb76 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fbb6 	bl	8000c0c <NRF24_read_register>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80014a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d020      	beq.n	80014f4 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80014b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <printRadioSettings+0x7e>
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4aa0      	ldr	r2, [pc, #640]	; (8001744 <printRadioSettings+0x2ec>)
 80014c4:	461c      	mov	r4, r3
 80014c6:	4615      	mov	r5, r2
 80014c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014d4:	e017      	b.n	8001506 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4a9b      	ldr	r2, [pc, #620]	; (8001748 <printRadioSettings+0x2f0>)
 80014dc:	461c      	mov	r4, r3
 80014de:	4615      	mov	r5, r2
 80014e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e8:	c403      	stmia	r4!, {r0, r1}
 80014ea:	8022      	strh	r2, [r4, #0]
 80014ec:	3402      	adds	r4, #2
 80014ee:	0c13      	lsrs	r3, r2, #16
 80014f0:	7023      	strb	r3, [r4, #0]
 80014f2:	e008      	b.n	8001506 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	4a94      	ldr	r2, [pc, #592]	; (800174c <printRadioSettings+0x2f4>)
 80014fa:	461c      	mov	r4, r3
 80014fc:	4615      	mov	r5, r2
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fee8 	bl	80002e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f107 0108 	add.w	r1, r7, #8
 8001518:	230a      	movs	r3, #10
 800151a:	4889      	ldr	r0, [pc, #548]	; (8001740 <printRadioSettings+0x2e8>)
 800151c:	f00e fb2b 	bl	800fb76 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fb73 	bl	8000c0c <NRF24_read_register>
 8001526:	4603      	mov	r3, r0
 8001528:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800152c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001530:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001534:	2b00      	cmp	r3, #0
 8001536:	bfcc      	ite	gt
 8001538:	2301      	movgt	r3, #1
 800153a:	2300      	movle	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001540:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001544:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001548:	2b00      	cmp	r3, #0
 800154a:	bfcc      	ite	gt
 800154c:	2301      	movgt	r3, #1
 800154e:	2300      	movle	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001554:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001558:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800155c:	2b00      	cmp	r3, #0
 800155e:	bfcc      	ite	gt
 8001560:	2301      	movgt	r3, #1
 8001562:	2300      	movle	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001568:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800156c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001570:	2b00      	cmp	r3, #0
 8001572:	bfcc      	ite	gt
 8001574:	2301      	movgt	r3, #1
 8001576:	2300      	movle	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800157c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001580:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001584:	2b00      	cmp	r3, #0
 8001586:	bfcc      	ite	gt
 8001588:	2301      	movgt	r3, #1
 800158a:	2300      	movle	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001590:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001594:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001598:	2b00      	cmp	r3, #0
 800159a:	bfcc      	ite	gt
 800159c:	2301      	movgt	r3, #1
 800159e:	2300      	movle	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f107 0008 	add.w	r0, r7, #8
 80015a6:	9303      	str	r3, [sp, #12]
 80015a8:	9402      	str	r4, [sp, #8]
 80015aa:	9101      	str	r1, [sp, #4]
 80015ac:	9200      	str	r2, [sp, #0]
 80015ae:	4633      	mov	r3, r6
 80015b0:	462a      	mov	r2, r5
 80015b2:	4967      	ldr	r1, [pc, #412]	; (8001750 <printRadioSettings+0x2f8>)
 80015b4:	f018 f8ca 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fe8f 	bl	80002e0 <strlen>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f107 0108 	add.w	r1, r7, #8
 80015ca:	230a      	movs	r3, #10
 80015cc:	485c      	ldr	r0, [pc, #368]	; (8001740 <printRadioSettings+0x2e8>)
 80015ce:	f00e fad2 	bl	800fb76 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7ff fb1a 	bl	8000c0c <NRF24_read_register>
 80015d8:	4603      	mov	r3, r0
 80015da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015e2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bfcc      	ite	gt
 80015ea:	2301      	movgt	r3, #1
 80015ec:	2300      	movle	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015f6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bfcc      	ite	gt
 80015fe:	2301      	movgt	r3, #1
 8001600:	2300      	movle	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001606:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800160a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800160e:	2b00      	cmp	r3, #0
 8001610:	bfcc      	ite	gt
 8001612:	2301      	movgt	r3, #1
 8001614:	2300      	movle	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800161a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001622:	2b00      	cmp	r3, #0
 8001624:	bfcc      	ite	gt
 8001626:	2301      	movgt	r3, #1
 8001628:	2300      	movle	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800162e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001632:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001636:	2b00      	cmp	r3, #0
 8001638:	bfcc      	ite	gt
 800163a:	2301      	movgt	r3, #1
 800163c:	2300      	movle	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001642:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001646:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800164a:	2b00      	cmp	r3, #0
 800164c:	bfcc      	ite	gt
 800164e:	2301      	movgt	r3, #1
 8001650:	2300      	movle	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f107 0008 	add.w	r0, r7, #8
 8001658:	9303      	str	r3, [sp, #12]
 800165a:	9402      	str	r4, [sp, #8]
 800165c:	9101      	str	r1, [sp, #4]
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	4633      	mov	r3, r6
 8001662:	462a      	mov	r2, r5
 8001664:	493b      	ldr	r1, [pc, #236]	; (8001754 <printRadioSettings+0x2fc>)
 8001666:	f018 f871 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fe36 	bl	80002e0 <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	f107 0108 	add.w	r1, r7, #8
 800167c:	230a      	movs	r3, #10
 800167e:	4830      	ldr	r0, [pc, #192]	; (8001740 <printRadioSettings+0x2e8>)
 8001680:	f00e fa79 	bl	800fb76 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001684:	2003      	movs	r0, #3
 8001686:	f7ff fac1 	bl	8000c0c <NRF24_read_register>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001694:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001698:	3302      	adds	r3, #2
 800169a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800169e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	492c      	ldr	r1, [pc, #176]	; (8001758 <printRadioSettings+0x300>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f018 f84f 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fe14 	bl	80002e0 <strlen>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f107 0108 	add.w	r1, r7, #8
 80016c0:	230a      	movs	r3, #10
 80016c2:	481f      	ldr	r0, [pc, #124]	; (8001740 <printRadioSettings+0x2e8>)
 80016c4:	f00e fa57 	bl	800fb76 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80016c8:	2005      	movs	r0, #5
 80016ca:	f7ff fa9f 	bl	8000c0c <NRF24_read_register>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80016d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	491e      	ldr	r1, [pc, #120]	; (800175c <printRadioSettings+0x304>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f018 f832 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fdf7 	bl	80002e0 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f107 0108 	add.w	r1, r7, #8
 80016fa:	230a      	movs	r3, #10
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <printRadioSettings+0x2e8>)
 80016fe:	f00e fa3a 	bl	800fb76 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001702:	2006      	movs	r0, #6
 8001704:	f7ff fa82 	bl	8000c0c <NRF24_read_register>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800170e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d024      	beq.n	8001764 <printRadioSettings+0x30c>
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <printRadioSettings+0x308>)
 8001720:	461c      	mov	r4, r3
 8001722:	4615      	mov	r5, r2
 8001724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001728:	e895 0003 	ldmia.w	r5, {r0, r1}
 800172c:	6020      	str	r0, [r4, #0]
 800172e:	3404      	adds	r4, #4
 8001730:	8021      	strh	r1, [r4, #0]
 8001732:	3402      	adds	r4, #2
 8001734:	0c0b      	lsrs	r3, r1, #16
 8001736:	7023      	strb	r3, [r4, #0]
 8001738:	e023      	b.n	8001782 <printRadioSettings+0x32a>
 800173a:	bf00      	nop
 800173c:	0801a764 	.word	0x0801a764
 8001740:	240002a0 	.word	0x240002a0
 8001744:	0801a798 	.word	0x0801a798
 8001748:	0801a7b4 	.word	0x0801a7b4
 800174c:	0801a7d0 	.word	0x0801a7d0
 8001750:	0801a7e4 	.word	0x0801a7e4
 8001754:	0801a828 	.word	0x0801a828
 8001758:	0801a874 	.word	0x0801a874
 800175c:	0801a890 	.word	0x0801a890
 8001760:	0801a8a4 	.word	0x0801a8a4
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	4a29      	ldr	r2, [pc, #164]	; (8001810 <printRadioSettings+0x3b8>)
 800176a:	461c      	mov	r4, r3
 800176c:	4615      	mov	r5, r2
 800176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001772:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001776:	6020      	str	r0, [r4, #0]
 8001778:	3404      	adds	r4, #4
 800177a:	8021      	strh	r1, [r4, #0]
 800177c:	3402      	adds	r4, #2
 800177e:	0c0b      	lsrs	r3, r1, #16
 8001780:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fdaa 	bl	80002e0 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	f107 0108 	add.w	r1, r7, #8
 8001794:	230a      	movs	r3, #10
 8001796:	481f      	ldr	r0, [pc, #124]	; (8001814 <printRadioSettings+0x3bc>)
 8001798:	f00e f9ed 	bl	800fb76 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800179c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017a0:	f003 0306 	and.w	r3, r3, #6
 80017a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80017a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80017b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <printRadioSettings+0x376>
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <printRadioSettings+0x3c0>)
 80017c0:	461c      	mov	r4, r3
 80017c2:	4615      	mov	r5, r2
 80017c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c8:	682b      	ldr	r3, [r5, #0]
 80017ca:	6023      	str	r3, [r4, #0]
 80017cc:	e037      	b.n	800183e <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80017ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d109      	bne.n	80017ea <printRadioSettings+0x392>
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <printRadioSettings+0x3c4>)
 80017dc:	461c      	mov	r4, r3
 80017de:	4615      	mov	r5, r2
 80017e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	6023      	str	r3, [r4, #0]
 80017e8:	e029      	b.n	800183e <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80017ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d118      	bne.n	8001824 <printRadioSettings+0x3cc>
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <printRadioSettings+0x3c8>)
 80017f8:	461c      	mov	r4, r3
 80017fa:	4615      	mov	r5, r2
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	8022      	strh	r2, [r4, #0]
 8001806:	3402      	adds	r4, #2
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	7023      	strb	r3, [r4, #0]
 800180c:	e017      	b.n	800183e <printRadioSettings+0x3e6>
 800180e:	bf00      	nop
 8001810:	0801a8bc 	.word	0x0801a8bc
 8001814:	240002a0 	.word	0x240002a0
 8001818:	0801a8d4 	.word	0x0801a8d4
 800181c:	0801a8e8 	.word	0x0801a8e8
 8001820:	0801a8fc 	.word	0x0801a8fc
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001824:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001828:	2b03      	cmp	r3, #3
 800182a:	d108      	bne.n	800183e <printRadioSettings+0x3e6>
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	4ad7      	ldr	r2, [pc, #860]	; (8001b90 <printRadioSettings+0x738>)
 8001832:	461c      	mov	r4, r3
 8001834:	4615      	mov	r5, r2
 8001836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fd4c 	bl	80002e0 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	f107 0108 	add.w	r1, r7, #8
 8001850:	230a      	movs	r3, #10
 8001852:	48d0      	ldr	r0, [pc, #832]	; (8001b94 <printRadioSettings+0x73c>)
 8001854:	f00e f98f 	bl	800fb76 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001858:	463b      	mov	r3, r7
 800185a:	2205      	movs	r2, #5
 800185c:	4619      	mov	r1, r3
 800185e:	200a      	movs	r0, #10
 8001860:	f7ff f9fc 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001864:	793b      	ldrb	r3, [r7, #4]
 8001866:	461c      	mov	r4, r3
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	461d      	mov	r5, r3
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	787a      	ldrb	r2, [r7, #1]
 8001870:	7839      	ldrb	r1, [r7, #0]
 8001872:	f107 0008 	add.w	r0, r7, #8
 8001876:	9102      	str	r1, [sp, #8]
 8001878:	9201      	str	r2, [sp, #4]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	462b      	mov	r3, r5
 800187e:	4622      	mov	r2, r4
 8001880:	49c5      	ldr	r1, [pc, #788]	; (8001b98 <printRadioSettings+0x740>)
 8001882:	f017 ff63 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fd28 	bl	80002e0 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	f107 0108 	add.w	r1, r7, #8
 8001898:	230a      	movs	r3, #10
 800189a:	48be      	ldr	r0, [pc, #760]	; (8001b94 <printRadioSettings+0x73c>)
 800189c:	f00e f96b 	bl	800fb76 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80018a0:	463b      	mov	r3, r7
 80018a2:	2205      	movs	r2, #5
 80018a4:	4619      	mov	r1, r3
 80018a6:	200b      	movs	r0, #11
 80018a8:	f7ff f9d8 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018ac:	793b      	ldrb	r3, [r7, #4]
 80018ae:	461c      	mov	r4, r3
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	461d      	mov	r5, r3
 80018b4:	78bb      	ldrb	r3, [r7, #2]
 80018b6:	787a      	ldrb	r2, [r7, #1]
 80018b8:	7839      	ldrb	r1, [r7, #0]
 80018ba:	f107 0008 	add.w	r0, r7, #8
 80018be:	9102      	str	r1, [sp, #8]
 80018c0:	9201      	str	r2, [sp, #4]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	462b      	mov	r3, r5
 80018c6:	4622      	mov	r2, r4
 80018c8:	49b4      	ldr	r1, [pc, #720]	; (8001b9c <printRadioSettings+0x744>)
 80018ca:	f017 ff3f 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd04 	bl	80002e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f107 0108 	add.w	r1, r7, #8
 80018e0:	230a      	movs	r3, #10
 80018e2:	48ac      	ldr	r0, [pc, #688]	; (8001b94 <printRadioSettings+0x73c>)
 80018e4:	f00e f947 	bl	800fb76 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80018e8:	463b      	mov	r3, r7
 80018ea:	2201      	movs	r2, #1
 80018ec:	4619      	mov	r1, r3
 80018ee:	200c      	movs	r0, #12
 80018f0:	f7ff f9b4 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018f4:	783b      	ldrb	r3, [r7, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	49a8      	ldr	r1, [pc, #672]	; (8001ba0 <printRadioSettings+0x748>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f017 ff24 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fce9 	bl	80002e0 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f107 0108 	add.w	r1, r7, #8
 8001916:	230a      	movs	r3, #10
 8001918:	489e      	ldr	r0, [pc, #632]	; (8001b94 <printRadioSettings+0x73c>)
 800191a:	f00e f92c 	bl	800fb76 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800191e:	463b      	mov	r3, r7
 8001920:	2201      	movs	r2, #1
 8001922:	4619      	mov	r1, r3
 8001924:	200d      	movs	r0, #13
 8001926:	f7ff f999 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800192a:	783b      	ldrb	r3, [r7, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	499c      	ldr	r1, [pc, #624]	; (8001ba4 <printRadioSettings+0x74c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f017 ff09 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fcce 	bl	80002e0 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	f107 0108 	add.w	r1, r7, #8
 800194c:	230a      	movs	r3, #10
 800194e:	4891      	ldr	r0, [pc, #580]	; (8001b94 <printRadioSettings+0x73c>)
 8001950:	f00e f911 	bl	800fb76 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001954:	463b      	mov	r3, r7
 8001956:	2201      	movs	r2, #1
 8001958:	4619      	mov	r1, r3
 800195a:	200e      	movs	r0, #14
 800195c:	f7ff f97e 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001960:	783b      	ldrb	r3, [r7, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	498f      	ldr	r1, [pc, #572]	; (8001ba8 <printRadioSettings+0x750>)
 800196a:	4618      	mov	r0, r3
 800196c:	f017 feee 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fcb3 	bl	80002e0 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	230a      	movs	r3, #10
 8001984:	4883      	ldr	r0, [pc, #524]	; (8001b94 <printRadioSettings+0x73c>)
 8001986:	f00e f8f6 	bl	800fb76 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800198a:	463b      	mov	r3, r7
 800198c:	2201      	movs	r2, #1
 800198e:	4619      	mov	r1, r3
 8001990:	200f      	movs	r0, #15
 8001992:	f7ff f963 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001996:	783b      	ldrb	r3, [r7, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4983      	ldr	r1, [pc, #524]	; (8001bac <printRadioSettings+0x754>)
 80019a0:	4618      	mov	r0, r3
 80019a2:	f017 fed3 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fc98 	bl	80002e0 <strlen>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f107 0108 	add.w	r1, r7, #8
 80019b8:	230a      	movs	r3, #10
 80019ba:	4876      	ldr	r0, [pc, #472]	; (8001b94 <printRadioSettings+0x73c>)
 80019bc:	f00e f8db 	bl	800fb76 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80019c0:	463b      	mov	r3, r7
 80019c2:	2205      	movs	r2, #5
 80019c4:	4619      	mov	r1, r3
 80019c6:	2010      	movs	r0, #16
 80019c8:	f7ff f948 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80019cc:	793b      	ldrb	r3, [r7, #4]
 80019ce:	461c      	mov	r4, r3
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	461d      	mov	r5, r3
 80019d4:	78bb      	ldrb	r3, [r7, #2]
 80019d6:	787a      	ldrb	r2, [r7, #1]
 80019d8:	7839      	ldrb	r1, [r7, #0]
 80019da:	f107 0008 	add.w	r0, r7, #8
 80019de:	9102      	str	r1, [sp, #8]
 80019e0:	9201      	str	r2, [sp, #4]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	462b      	mov	r3, r5
 80019e6:	4622      	mov	r2, r4
 80019e8:	4971      	ldr	r1, [pc, #452]	; (8001bb0 <printRadioSettings+0x758>)
 80019ea:	f017 feaf 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fc74 	bl	80002e0 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f107 0108 	add.w	r1, r7, #8
 8001a00:	230a      	movs	r3, #10
 8001a02:	4864      	ldr	r0, [pc, #400]	; (8001b94 <printRadioSettings+0x73c>)
 8001a04:	f00e f8b7 	bl	800fb76 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001a08:	2011      	movs	r0, #17
 8001a0a:	f7ff f8ff 	bl	8000c0c <NRF24_read_register>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	4964      	ldr	r1, [pc, #400]	; (8001bb4 <printRadioSettings+0x75c>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f017 fe92 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fc57 	bl	80002e0 <strlen>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	f107 0108 	add.w	r1, r7, #8
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	4855      	ldr	r0, [pc, #340]	; (8001b94 <printRadioSettings+0x73c>)
 8001a3e:	f00e f89a 	bl	800fb76 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001a42:	2012      	movs	r0, #18
 8001a44:	f7ff f8e2 	bl	8000c0c <NRF24_read_register>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4957      	ldr	r1, [pc, #348]	; (8001bb8 <printRadioSettings+0x760>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f017 fe75 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fc3a 	bl	80002e0 <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f107 0108 	add.w	r1, r7, #8
 8001a74:	230a      	movs	r3, #10
 8001a76:	4847      	ldr	r0, [pc, #284]	; (8001b94 <printRadioSettings+0x73c>)
 8001a78:	f00e f87d 	bl	800fb76 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001a7c:	2013      	movs	r0, #19
 8001a7e:	f7ff f8c5 	bl	8000c0c <NRF24_read_register>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4949      	ldr	r1, [pc, #292]	; (8001bbc <printRadioSettings+0x764>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f017 fe58 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fc1d 	bl	80002e0 <strlen>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	f107 0108 	add.w	r1, r7, #8
 8001aae:	230a      	movs	r3, #10
 8001ab0:	4838      	ldr	r0, [pc, #224]	; (8001b94 <printRadioSettings+0x73c>)
 8001ab2:	f00e f860 	bl	800fb76 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001ab6:	2014      	movs	r0, #20
 8001ab8:	f7ff f8a8 	bl	8000c0c <NRF24_read_register>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ac2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	493c      	ldr	r1, [pc, #240]	; (8001bc0 <printRadioSettings+0x768>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f017 fe3b 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fc00 	bl	80002e0 <strlen>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f107 0108 	add.w	r1, r7, #8
 8001ae8:	230a      	movs	r3, #10
 8001aea:	482a      	ldr	r0, [pc, #168]	; (8001b94 <printRadioSettings+0x73c>)
 8001aec:	f00e f843 	bl	800fb76 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001af0:	2015      	movs	r0, #21
 8001af2:	f7ff f88b 	bl	8000c0c <NRF24_read_register>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001afc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	492e      	ldr	r1, [pc, #184]	; (8001bc4 <printRadioSettings+0x76c>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f017 fe1e 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fbe3 	bl	80002e0 <strlen>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f107 0108 	add.w	r1, r7, #8
 8001b22:	230a      	movs	r3, #10
 8001b24:	481b      	ldr	r0, [pc, #108]	; (8001b94 <printRadioSettings+0x73c>)
 8001b26:	f00e f826 	bl	800fb76 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001b2a:	2016      	movs	r0, #22
 8001b2c:	f7ff f86e 	bl	8000c0c <NRF24_read_register>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4921      	ldr	r1, [pc, #132]	; (8001bc8 <printRadioSettings+0x770>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f017 fe01 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fbc6 	bl	80002e0 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f107 0108 	add.w	r1, r7, #8
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <printRadioSettings+0x73c>)
 8001b60:	f00e f809 	bl	800fb76 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001b64:	201c      	movs	r0, #28
 8001b66:	f7ff f851 	bl	8000c0c <NRF24_read_register>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b74:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bfcc      	ite	gt
 8001b7c:	2301      	movgt	r3, #1
 8001b7e:	2300      	movle	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	e01e      	b.n	8001bcc <printRadioSettings+0x774>
 8001b8e:	bf00      	nop
 8001b90:	0801a910 	.word	0x0801a910
 8001b94:	240002a0 	.word	0x240002a0
 8001b98:	0801a924 	.word	0x0801a924
 8001b9c:	0801a954 	.word	0x0801a954
 8001ba0:	0801a984 	.word	0x0801a984
 8001ba4:	0801a9ac 	.word	0x0801a9ac
 8001ba8:	0801a9d4 	.word	0x0801a9d4
 8001bac:	0801a9fc 	.word	0x0801a9fc
 8001bb0:	0801aa24 	.word	0x0801aa24
 8001bb4:	0801aa50 	.word	0x0801aa50
 8001bb8:	0801aa6c 	.word	0x0801aa6c
 8001bbc:	0801aa88 	.word	0x0801aa88
 8001bc0:	0801aaa4 	.word	0x0801aaa4
 8001bc4:	0801aac0 	.word	0x0801aac0
 8001bc8:	0801aadc 	.word	0x0801aadc
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bfcc      	ite	gt
 8001bd0:	2301      	movgt	r3, #1
 8001bd2:	2300      	movle	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bdc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bfcc      	ite	gt
 8001be4:	2301      	movgt	r3, #1
 8001be6:	2300      	movle	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bf0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bfcc      	ite	gt
 8001bf8:	2301      	movgt	r3, #1
 8001bfa:	2300      	movle	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c04:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bfcc      	ite	gt
 8001c0c:	2301      	movgt	r3, #1
 8001c0e:	2300      	movle	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c18:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bfcc      	ite	gt
 8001c20:	2301      	movgt	r3, #1
 8001c22:	2300      	movle	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f107 0008 	add.w	r0, r7, #8
 8001c2a:	9303      	str	r3, [sp, #12]
 8001c2c:	9402      	str	r4, [sp, #8]
 8001c2e:	9101      	str	r1, [sp, #4]
 8001c30:	9200      	str	r2, [sp, #0]
 8001c32:	4633      	mov	r3, r6
 8001c34:	462a      	mov	r2, r5
 8001c36:	494a      	ldr	r1, [pc, #296]	; (8001d60 <printRadioSettings+0x908>)
 8001c38:	f017 fd88 	bl	801974c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fb4d 	bl	80002e0 <strlen>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	f107 0108 	add.w	r1, r7, #8
 8001c4e:	230a      	movs	r3, #10
 8001c50:	4844      	ldr	r0, [pc, #272]	; (8001d64 <printRadioSettings+0x90c>)
 8001c52:	f00d ff90 	bl	800fb76 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001c56:	201d      	movs	r0, #29
 8001c58:	f7fe ffd8 	bl	8000c0c <NRF24_read_register>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001c62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <printRadioSettings+0x830>
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4a3d      	ldr	r2, [pc, #244]	; (8001d68 <printRadioSettings+0x910>)
 8001c74:	461c      	mov	r4, r3
 8001c76:	4615      	mov	r5, r2
 8001c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c80:	6020      	str	r0, [r4, #0]
 8001c82:	3404      	adds	r4, #4
 8001c84:	8021      	strh	r1, [r4, #0]
 8001c86:	e00e      	b.n	8001ca6 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	4a37      	ldr	r2, [pc, #220]	; (8001d6c <printRadioSettings+0x914>)
 8001c8e:	461c      	mov	r4, r3
 8001c90:	4615      	mov	r5, r2
 8001c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c9a:	6020      	str	r0, [r4, #0]
 8001c9c:	3404      	adds	r4, #4
 8001c9e:	8021      	strh	r1, [r4, #0]
 8001ca0:	3402      	adds	r4, #2
 8001ca2:	0c0b      	lsrs	r3, r1, #16
 8001ca4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fb18 	bl	80002e0 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f107 0108 	add.w	r1, r7, #8
 8001cb8:	230a      	movs	r3, #10
 8001cba:	482a      	ldr	r0, [pc, #168]	; (8001d64 <printRadioSettings+0x90c>)
 8001cbc:	f00d ff5b 	bl	800fb76 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001cc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <printRadioSettings+0x88c>
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <printRadioSettings+0x918>)
 8001cd2:	461c      	mov	r4, r3
 8001cd4:	4615      	mov	r5, r2
 8001cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cde:	c403      	stmia	r4!, {r0, r1}
 8001ce0:	8022      	strh	r2, [r4, #0]
 8001ce2:	e00d      	b.n	8001d00 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <printRadioSettings+0x91c>)
 8001cea:	461c      	mov	r4, r3
 8001cec:	4615      	mov	r5, r2
 8001cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cf6:	c403      	stmia	r4!, {r0, r1}
 8001cf8:	8022      	strh	r2, [r4, #0]
 8001cfa:	3402      	adds	r4, #2
 8001cfc:	0c13      	lsrs	r3, r2, #16
 8001cfe:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe faeb 	bl	80002e0 <strlen>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	f107 0108 	add.w	r1, r7, #8
 8001d12:	230a      	movs	r3, #10
 8001d14:	4813      	ldr	r0, [pc, #76]	; (8001d64 <printRadioSettings+0x90c>)
 8001d16:	f00d ff2e 	bl	800fb76 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <printRadioSettings+0x920>)
 8001d20:	461c      	mov	r4, r3
 8001d22:	4615      	mov	r5, r2
 8001d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	8022      	strh	r2, [r4, #0]
 8001d36:	3402      	adds	r4, #2
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe facd 	bl	80002e0 <strlen>
 8001d46:	4603      	mov	r3, r0
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	f107 0108 	add.w	r1, r7, #8
 8001d4e:	230a      	movs	r3, #10
 8001d50:	4804      	ldr	r0, [pc, #16]	; (8001d64 <printRadioSettings+0x90c>)
 8001d52:	f00d ff10 	bl	800fb76 <HAL_UART_Transmit>
}
 8001d56:	bf00      	nop
 8001d58:	3774      	adds	r7, #116	; 0x74
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	0801aaf8 	.word	0x0801aaf8
 8001d64:	240002a0 	.word	0x240002a0
 8001d68:	0801ab44 	.word	0x0801ab44
 8001d6c:	0801ab5c 	.word	0x0801ab5c
 8001d70:	0801ab74 	.word	0x0801ab74
 8001d74:	0801ab90 	.word	0x0801ab90
 8001d78:	0801a764 	.word	0x0801a764

08001d7c <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	dd03      	ble.n	8001d94 <WriteToBuff+0x18>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d92:	db01      	blt.n	8001d98 <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 8001d94:	2303      	movs	r3, #3
 8001d96:	e089      	b.n	8001eac <WriteToBuff+0x130>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <WriteToBuff+0x138>)
 8001d9a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da2:	d238      	bcs.n	8001e16 <WriteToBuff+0x9a>
 8001da4:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <WriteToBuff+0x138>)
 8001da6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db2:	d330      	bcc.n	8001e16 <WriteToBuff+0x9a>
    DataBuffer.counter = Bufflength;
 8001db4:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <WriteToBuff+0x138>)
 8001db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <WriteToBuff+0x138>)
 8001dc0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001dc4:	4a3b      	ldr	r2, [pc, #236]	; (8001eb4 <WriteToBuff+0x138>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f017 fb41 	bl	8019454 <memcpy>
    DataBuffer.counter += len;
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <WriteToBuff+0x138>)
 8001dd4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a35      	ldr	r2, [pc, #212]	; (8001eb4 <WriteToBuff+0x138>)
 8001dde:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <WriteToBuff+0x13c>)
 8001de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de8:	4932      	ldr	r1, [pc, #200]	; (8001eb4 <WriteToBuff+0x138>)
 8001dea:	4834      	ldr	r0, [pc, #208]	; (8001ebc <WriteToBuff+0x140>)
 8001dec:	f016 fb81 	bl	80184f2 <f_write>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <WriteToBuff+0x96>

      memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear next buffer after writing
 8001df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4830      	ldr	r0, [pc, #192]	; (8001ec0 <WriteToBuff+0x144>)
 8001dfe:	f017 fb34 	bl	801946a <memset>
    	f_sync(&myFILE);
 8001e02:	482e      	ldr	r0, [pc, #184]	; (8001ebc <WriteToBuff+0x140>)
 8001e04:	f016 fcea 	bl	80187dc <f_sync>
      printf("Buffer 1 has been written\n");
 8001e08:	482e      	ldr	r0, [pc, #184]	; (8001ec4 <WriteToBuff+0x148>)
 8001e0a:	f017 fc53 	bl	80196b4 <puts>
      return 1; //buffer 1 has been written
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e04c      	b.n	8001eac <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001e12:	2304      	movs	r3, #4
 8001e14:	e04a      	b.n	8001eac <WriteToBuff+0x130>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 8001e16:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <WriteToBuff+0x138>)
 8001e18:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e24:	d32f      	bcc.n	8001e86 <WriteToBuff+0x10a>
    DataBuffer.counter = 0;
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <WriteToBuff+0x138>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <WriteToBuff+0x138>)
 8001e30:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <WriteToBuff+0x138>)
 8001e36:	4413      	add	r3, r2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f017 fb09 	bl	8019454 <memcpy>
    DataBuffer.counter += len;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <WriteToBuff+0x138>)
 8001e44:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <WriteToBuff+0x138>)
 8001e4e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <WriteToBuff+0x13c>)
 8001e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e58:	4919      	ldr	r1, [pc, #100]	; (8001ec0 <WriteToBuff+0x144>)
 8001e5a:	4818      	ldr	r0, [pc, #96]	; (8001ebc <WriteToBuff+0x140>)
 8001e5c:	f016 fb49 	bl	80184f2 <f_write>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <WriteToBuff+0x106>
      memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear next buffer after writing
 8001e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <WriteToBuff+0x138>)
 8001e6e:	f017 fafc 	bl	801946a <memset>
    	f_sync(&myFILE);
 8001e72:	4812      	ldr	r0, [pc, #72]	; (8001ebc <WriteToBuff+0x140>)
 8001e74:	f016 fcb2 	bl	80187dc <f_sync>
      printf("Buffer 2 has been written\n");
 8001e78:	4813      	ldr	r0, [pc, #76]	; (8001ec8 <WriteToBuff+0x14c>)
 8001e7a:	f017 fc1b 	bl	80196b4 <puts>
      return 2; //buffer 2 has been written
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e014      	b.n	8001eac <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001e82:	2304      	movs	r3, #4
 8001e84:	e012      	b.n	8001eac <WriteToBuff+0x130>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <WriteToBuff+0x138>)
 8001e88:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e8c:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <WriteToBuff+0x138>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f017 fadd 	bl	8019454 <memcpy>
  DataBuffer.counter += len;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <WriteToBuff+0x138>)
 8001e9c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <WriteToBuff+0x138>)
 8001ea6:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2400032c 	.word	0x2400032c
 8001eb8:	240010d0 	.word	0x240010d0
 8001ebc:	24000b98 	.word	0x24000b98
 8001ec0:	2400072c 	.word	0x2400072c
 8001ec4:	0801aca8 	.word	0x0801aca8
 8001ec8:	0801acc4 	.word	0x0801acc4

08001ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed0:	f5ad 5def 	sub.w	sp, sp, #7648	; 0x1de0
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed8:	f002 fae0 	bl	800449c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001edc:	f001 fa0c 	bl	80032f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee0:	f001 fd6c 	bl	80039bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001ee4:	f001 fd4a 	bl	800397c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001ee8:	f001 fc38 	bl	800375c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001eec:	f011 f978 	bl	80131e0 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001ef0:	f016 fd78 	bl	80189e4 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001ef4:	f001 fb0a 	bl	800350c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001ef8:	f001 fb6e 	bl	80035d8 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001efc:	f001 fca6 	bl	800384c <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001f00:	f001 fcf0 	bl	80038e4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001f04:	f001 fc4c 	bl	80037a0 <MX_SPI1_Init>
  MX_RTC_Init();
 8001f08:	f001 fbca 	bl	80036a0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(1000);//NEEDED FOR USB MASS STORAGE TO WORK
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	489f      	ldr	r0, [pc, #636]	; (800218c <main+0x2c0>)
 8001f10:	f006 f889 	bl	8008026 <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001f14:	4c9e      	ldr	r4, [pc, #632]	; (8002190 <main+0x2c4>)
 8001f16:	4668      	mov	r0, sp
 8001f18:	1d23      	adds	r3, r4, #4
 8001f1a:	2284      	movs	r2, #132	; 0x84
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f017 fa99 	bl	8019454 <memcpy>
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	2102      	movs	r1, #2
 8001f28:	489a      	ldr	r0, [pc, #616]	; (8002194 <main+0x2c8>)
 8001f2a:	f7fe ff49 	bl	8000dc0 <NRF24_begin>
    //nrf24_DebugUART_Init(huart3);



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001f2e:	f7ff f827 	bl	8000f80 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001f32:	4b99      	ldr	r3, [pc, #612]	; (8002198 <main+0x2cc>)
 8001f34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	f7ff f880 	bl	8001040 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff f909 	bl	8001158 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001f46:	202a      	movs	r0, #42	; 0x2a
 8001f48:	f7ff f8b9 	bl	80010be <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001f4c:	2020      	movs	r0, #32
 8001f4e:	f7ff f8cb 	bl	80010e8 <NRF24_setPayloadSize>

    printRadioSettings();
 8001f52:	f7ff fa81 	bl	8001458 <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001f56:	4891      	ldr	r0, [pc, #580]	; (800219c <main+0x2d0>)
 8001f58:	f017 fbac 	bl	80196b4 <puts>
  FDCAN_Config(&hfdcan1);
 8001f5c:	4890      	ldr	r0, [pc, #576]	; (80021a0 <main+0x2d4>)
 8001f5e:	f7fe fb97 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001f62:	2246      	movs	r2, #70	; 0x46
 8001f64:	498f      	ldr	r1, [pc, #572]	; (80021a4 <main+0x2d8>)
 8001f66:	4890      	ldr	r0, [pc, #576]	; (80021a8 <main+0x2dc>)
 8001f68:	f00d fe9c 	bl	800fca4 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8001f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f70:	f002 fb26 	bl	80045c0 <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001f74:	2364      	movs	r3, #100	; 0x64
 8001f76:	f641 5226 	movw	r2, #7462	; 0x1d26
 8001f7a:	443a      	add	r2, r7
 8001f7c:	8013      	strh	r3, [r2, #0]
  uint16_t navRate = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f641 5224 	movw	r2, #7460	; 0x1d24
 8001f84:	443a      	add	r2, r7
 8001f86:	8013      	strh	r3, [r2, #0]
  uint16_t timeRef = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f641 5222 	movw	r2, #7458	; 0x1d22
 8001f8e:	443a      	add	r2, r7
 8001f90:	8013      	strh	r3, [r2, #0]
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001f92:	f641 5322 	movw	r3, #7458	; 0x1d22
 8001f96:	443b      	add	r3, r7
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	f641 5224 	movw	r2, #7460	; 0x1d24
 8001f9e:	443a      	add	r2, r7
 8001fa0:	8812      	ldrh	r2, [r2, #0]
 8001fa2:	f641 5126 	movw	r1, #7462	; 0x1d26
 8001fa6:	4439      	add	r1, r7
 8001fa8:	8809      	ldrh	r1, [r1, #0]
 8001faa:	487f      	ldr	r0, [pc, #508]	; (80021a8 <main+0x2dc>)
 8001fac:	f7fe fd5a 	bl	8000a64 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	497e      	ldr	r1, [pc, #504]	; (80021ac <main+0x2e0>)
 8001fb4:	487c      	ldr	r0, [pc, #496]	; (80021a8 <main+0x2dc>)
 8001fb6:	f7fe fce5 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	497c      	ldr	r1, [pc, #496]	; (80021b0 <main+0x2e4>)
 8001fbe:	487a      	ldr	r0, [pc, #488]	; (80021a8 <main+0x2dc>)
 8001fc0:	f7fe fce0 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	497b      	ldr	r1, [pc, #492]	; (80021b4 <main+0x2e8>)
 8001fc8:	4877      	ldr	r0, [pc, #476]	; (80021a8 <main+0x2dc>)
 8001fca:	f7fe fcdb 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4979      	ldr	r1, [pc, #484]	; (80021b8 <main+0x2ec>)
 8001fd2:	4875      	ldr	r0, [pc, #468]	; (80021a8 <main+0x2dc>)
 8001fd4:	f7fe fcd6 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001fd8:	2200      	movs	r2, #0
 8001fda:	4978      	ldr	r1, [pc, #480]	; (80021bc <main+0x2f0>)
 8001fdc:	4872      	ldr	r0, [pc, #456]	; (80021a8 <main+0x2dc>)
 8001fde:	f7fe fcd1 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4976      	ldr	r1, [pc, #472]	; (80021c0 <main+0x2f4>)
 8001fe6:	4870      	ldr	r0, [pc, #448]	; (80021a8 <main+0x2dc>)
 8001fe8:	f7fe fccc 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	4975      	ldr	r1, [pc, #468]	; (80021c4 <main+0x2f8>)
 8001ff0:	486d      	ldr	r0, [pc, #436]	; (80021a8 <main+0x2dc>)
 8001ff2:	f7fe fcc7 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4973      	ldr	r1, [pc, #460]	; (80021c8 <main+0x2fc>)
 8001ffa:	486b      	ldr	r0, [pc, #428]	; (80021a8 <main+0x2dc>)
 8001ffc:	f7fe fcc2 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8002000:	2200      	movs	r2, #0
 8002002:	4972      	ldr	r1, [pc, #456]	; (80021cc <main+0x300>)
 8002004:	4868      	ldr	r0, [pc, #416]	; (80021a8 <main+0x2dc>)
 8002006:	f7fe fcbd 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 800200a:	2200      	movs	r2, #0
 800200c:	4970      	ldr	r1, [pc, #448]	; (80021d0 <main+0x304>)
 800200e:	4866      	ldr	r0, [pc, #408]	; (80021a8 <main+0x2dc>)
 8002010:	f7fe fcb8 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8002014:	2200      	movs	r2, #0
 8002016:	496f      	ldr	r1, [pc, #444]	; (80021d4 <main+0x308>)
 8002018:	4863      	ldr	r0, [pc, #396]	; (80021a8 <main+0x2dc>)
 800201a:	f7fe fcb3 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 800201e:	2200      	movs	r2, #0
 8002020:	496d      	ldr	r1, [pc, #436]	; (80021d8 <main+0x30c>)
 8002022:	4861      	ldr	r0, [pc, #388]	; (80021a8 <main+0x2dc>)
 8002024:	f7fe fcae 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8002028:	2200      	movs	r2, #0
 800202a:	496c      	ldr	r1, [pc, #432]	; (80021dc <main+0x310>)
 800202c:	485e      	ldr	r0, [pc, #376]	; (80021a8 <main+0x2dc>)
 800202e:	f7fe fca9 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8002032:	2200      	movs	r2, #0
 8002034:	496a      	ldr	r1, [pc, #424]	; (80021e0 <main+0x314>)
 8002036:	485c      	ldr	r0, [pc, #368]	; (80021a8 <main+0x2dc>)
 8002038:	f7fe fca4 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 800203c:	2200      	movs	r2, #0
 800203e:	4969      	ldr	r1, [pc, #420]	; (80021e4 <main+0x318>)
 8002040:	4859      	ldr	r0, [pc, #356]	; (80021a8 <main+0x2dc>)
 8002042:	f7fe fc9f 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8002046:	2201      	movs	r2, #1
 8002048:	4967      	ldr	r1, [pc, #412]	; (80021e8 <main+0x31c>)
 800204a:	4857      	ldr	r0, [pc, #348]	; (80021a8 <main+0x2dc>)
 800204c:	f7fe fc9a 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8002050:	2200      	movs	r2, #0
 8002052:	4966      	ldr	r1, [pc, #408]	; (80021ec <main+0x320>)
 8002054:	4854      	ldr	r0, [pc, #336]	; (80021a8 <main+0x2dc>)
 8002056:	f7fe fc95 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 800205a:	2200      	movs	r2, #0
 800205c:	4964      	ldr	r1, [pc, #400]	; (80021f0 <main+0x324>)
 800205e:	4852      	ldr	r0, [pc, #328]	; (80021a8 <main+0x2dc>)
 8002060:	f7fe fc90 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8002064:	2200      	movs	r2, #0
 8002066:	4963      	ldr	r1, [pc, #396]	; (80021f4 <main+0x328>)
 8002068:	484f      	ldr	r0, [pc, #316]	; (80021a8 <main+0x2dc>)
 800206a:	f7fe fc8b 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 800206e:	2200      	movs	r2, #0
 8002070:	4961      	ldr	r1, [pc, #388]	; (80021f8 <main+0x32c>)
 8002072:	484d      	ldr	r0, [pc, #308]	; (80021a8 <main+0x2dc>)
 8002074:	f7fe fc86 	bl	8000984 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8002078:	2201      	movs	r2, #1
 800207a:	4960      	ldr	r1, [pc, #384]	; (80021fc <main+0x330>)
 800207c:	4860      	ldr	r0, [pc, #384]	; (8002200 <main+0x334>)
 800207e:	f015 fef5 	bl	8017e6c <f_mount>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 814d 	bne.w	8002324 <main+0x458>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char Filename[20] = "test";
 800208a:	4a5e      	ldr	r2, [pc, #376]	; (8002204 <main+0x338>)
 800208c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002090:	443b      	add	r3, r7
 8002092:	441a      	add	r2, r3
 8002094:	495c      	ldr	r1, [pc, #368]	; (8002208 <main+0x33c>)
 8002096:	4613      	mov	r3, r2
 8002098:	c903      	ldmia	r1, {r0, r1}
 800209a:	6018      	str	r0, [r3, #0]
 800209c:	3304      	adds	r3, #4
 800209e:	7019      	strb	r1, [r3, #0]
 80020a0:	1d53      	adds	r3, r2, #5
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	f8c3 200b 	str.w	r2, [r3, #11]
      char FilePath[150];
      char ConfigPath[] ="Config.csv\0";
 80020ae:	4b57      	ldr	r3, [pc, #348]	; (800220c <main+0x340>)
 80020b0:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020b4:	443a      	add	r2, r7
 80020b6:	4413      	add	r3, r2
 80020b8:	4a55      	ldr	r2, [pc, #340]	; (8002210 <main+0x344>)
 80020ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80020bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 80020c0:	4b52      	ldr	r3, [pc, #328]	; (800220c <main+0x340>)
 80020c2:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020c6:	443a      	add	r2, r7
 80020c8:	4413      	add	r3, r2
 80020ca:	2201      	movs	r2, #1
 80020cc:	4619      	mov	r1, r3
 80020ce:	4851      	ldr	r0, [pc, #324]	; (8002214 <main+0x348>)
 80020d0:	f015 ff12 	bl	8017ef8 <f_open>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	f040 80a6 	bne.w	8002228 <main+0x35c>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 80020dc:	4b4b      	ldr	r3, [pc, #300]	; (800220c <main+0x340>)
 80020de:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020e2:	443a      	add	r2, r7
 80020e4:	4413      	add	r3, r2
 80020e6:	220a      	movs	r2, #10
 80020e8:	4619      	mov	r1, r3
 80020ea:	484a      	ldr	r0, [pc, #296]	; (8002214 <main+0x348>)
 80020ec:	f015 ff04 	bl	8017ef8 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 80020f0:	4b49      	ldr	r3, [pc, #292]	; (8002218 <main+0x34c>)
 80020f2:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020f6:	443a      	add	r2, r7
 80020f8:	4413      	add	r3, r2
 80020fa:	4a48      	ldr	r2, [pc, #288]	; (800221c <main+0x350>)
 80020fc:	461c      	mov	r4, r3
 80020fe:	4615      	mov	r5, r2
 8002100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002108:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800210c:	c403      	stmia	r4!, {r0, r1}
 800210e:	8022      	strh	r2, [r4, #0]
 8002110:	3402      	adds	r4, #2
 8002112:	0c13      	lsrs	r3, r2, #16
 8002114:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8002116:	4b40      	ldr	r3, [pc, #256]	; (8002218 <main+0x34c>)
 8002118:	f641 5270 	movw	r2, #7536	; 0x1d70
 800211c:	443a      	add	r2, r7
 800211e:	4413      	add	r3, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f8dd 	bl	80002e0 <strlen>
 8002126:	4602      	mov	r2, r0
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <main+0x34c>)
 800212a:	f641 5170 	movw	r1, #7536	; 0x1d70
 800212e:	4439      	add	r1, r7
 8002130:	440b      	add	r3, r1
 8002132:	4413      	add	r3, r2
 8002134:	4a3a      	ldr	r2, [pc, #232]	; (8002220 <main+0x354>)
 8002136:	4614      	mov	r4, r2
 8002138:	469c      	mov	ip, r3
 800213a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800213e:	4665      	mov	r5, ip
 8002140:	4626      	mov	r6, r4
 8002142:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002144:	6028      	str	r0, [r5, #0]
 8002146:	6069      	str	r1, [r5, #4]
 8002148:	60aa      	str	r2, [r5, #8]
 800214a:	60eb      	str	r3, [r5, #12]
 800214c:	3410      	adds	r4, #16
 800214e:	f10c 0c10 	add.w	ip, ip, #16
 8002152:	4574      	cmp	r4, lr
 8002154:	d1f3      	bne.n	800213e <main+0x272>
 8002156:	4662      	mov	r2, ip
 8002158:	4623      	mov	r3, r4
 800215a:	cb03      	ldmia	r3!, {r0, r1}
 800215c:	6010      	str	r0, [r2, #0]
 800215e:	6051      	str	r1, [r2, #4]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8002164:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <main+0x34c>)
 8002166:	f641 5270 	movw	r2, #7536	; 0x1d70
 800216a:	443a      	add	r2, r7
 800216c:	4413      	add	r3, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f8b6 	bl	80002e0 <strlen>
 8002174:	4602      	mov	r2, r0
 8002176:	4928      	ldr	r1, [pc, #160]	; (8002218 <main+0x34c>)
 8002178:	f641 5370 	movw	r3, #7536	; 0x1d70
 800217c:	443b      	add	r3, r7
 800217e:	4419      	add	r1, r3
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <main+0x358>)
 8002182:	4824      	ldr	r0, [pc, #144]	; (8002214 <main+0x348>)
 8002184:	f016 f9b5 	bl	80184f2 <f_write>
 8002188:	e060      	b.n	800224c <main+0x380>
 800218a:	bf00      	nop
 800218c:	58020400 	.word	0x58020400
 8002190:	24001640 	.word	0x24001640
 8002194:	58020000 	.word	0x58020000
 8002198:	24000000 	.word	0x24000000
 800219c:	0801ace0 	.word	0x0801ace0
 80021a0:	24001514 	.word	0x24001514
 80021a4:	24001304 	.word	0x24001304
 80021a8:	240013c4 	.word	0x240013c4
 80021ac:	0801acec 	.word	0x0801acec
 80021b0:	0801acf0 	.word	0x0801acf0
 80021b4:	0801acf4 	.word	0x0801acf4
 80021b8:	0801acf8 	.word	0x0801acf8
 80021bc:	0801acfc 	.word	0x0801acfc
 80021c0:	0801ad00 	.word	0x0801ad00
 80021c4:	0801ad04 	.word	0x0801ad04
 80021c8:	0801ad08 	.word	0x0801ad08
 80021cc:	0801ad0c 	.word	0x0801ad0c
 80021d0:	0801ad10 	.word	0x0801ad10
 80021d4:	0801ad14 	.word	0x0801ad14
 80021d8:	0801ad18 	.word	0x0801ad18
 80021dc:	0801ad1c 	.word	0x0801ad1c
 80021e0:	0801ad20 	.word	0x0801ad20
 80021e4:	0801ad24 	.word	0x0801ad24
 80021e8:	0801ad28 	.word	0x0801ad28
 80021ec:	0801ad2c 	.word	0x0801ad2c
 80021f0:	0801ad30 	.word	0x0801ad30
 80021f4:	0801ad34 	.word	0x0801ad34
 80021f8:	0801ad38 	.word	0x0801ad38
 80021fc:	24001770 	.word	0x24001770
 8002200:	24000dd0 	.word	0x24000dd0
 8002204:	ffffe744 	.word	0xffffe744
 8002208:	0801ae00 	.word	0x0801ae00
 800220c:	ffffe738 	.word	0xffffe738
 8002210:	0801ae14 	.word	0x0801ae14
 8002214:	240010d4 	.word	0x240010d4
 8002218:	ffffe328 	.word	0xffffe328
 800221c:	0801ad3c 	.word	0x0801ad3c
 8002220:	0801ad68 	.word	0x0801ad68
 8002224:	24000dcc 	.word	0x24000dcc
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8002228:	4bb7      	ldr	r3, [pc, #732]	; (8002508 <main+0x63c>)
 800222a:	f641 5270 	movw	r2, #7536	; 0x1d70
 800222e:	443a      	add	r2, r7
 8002230:	4413      	add	r3, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f854 	bl	80002e0 <strlen>
 8002238:	4602      	mov	r2, r0
 800223a:	49b3      	ldr	r1, [pc, #716]	; (8002508 <main+0x63c>)
 800223c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002240:	443b      	add	r3, r7
 8002242:	4419      	add	r1, r3
 8002244:	4bb1      	ldr	r3, [pc, #708]	; (800250c <main+0x640>)
 8002246:	48b2      	ldr	r0, [pc, #712]	; (8002510 <main+0x644>)
 8002248:	f016 f814 	bl	8018274 <f_read>
      }
      f_close(&Config);
 800224c:	48b0      	ldr	r0, [pc, #704]	; (8002510 <main+0x644>)
 800224e:	f016 fb43 	bl	80188d8 <f_close>
      //MAKE NEW FILE INCREMENTED BY 1
      
      strcpy(FilePath,Filename);
 8002252:	4ab0      	ldr	r2, [pc, #704]	; (8002514 <main+0x648>)
 8002254:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002258:	443b      	add	r3, r7
 800225a:	441a      	add	r2, r3
 800225c:	4bae      	ldr	r3, [pc, #696]	; (8002518 <main+0x64c>)
 800225e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002262:	4439      	add	r1, r7
 8002264:	440b      	add	r3, r1
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f017 fa8f 	bl	801978c <strcpy>
      int FilePathLen = strlen(Filename);
 800226e:	4ba9      	ldr	r3, [pc, #676]	; (8002514 <main+0x648>)
 8002270:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002274:	443a      	add	r2, r7
 8002276:	4413      	add	r3, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f831 	bl	80002e0 <strlen>
 800227e:	4603      	mov	r3, r0
 8002280:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002284:	443a      	add	r2, r7
 8002286:	6013      	str	r3, [r2, #0]
      sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 8002288:	f641 531c 	movw	r3, #7452	; 0x1d1c
 800228c:	443b      	add	r3, r7
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4ba1      	ldr	r3, [pc, #644]	; (8002518 <main+0x64c>)
 8002292:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002296:	4439      	add	r1, r7
 8002298:	440b      	add	r3, r1
 800229a:	1898      	adds	r0, r3, r2
 800229c:	4b9f      	ldr	r3, [pc, #636]	; (800251c <main+0x650>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	499f      	ldr	r1, [pc, #636]	; (8002520 <main+0x654>)
 80022a4:	f017 fa52 	bl	801974c <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 80022a8:	e025      	b.n	80022f6 <main+0x42a>
    	  f_close(&myFILE);
 80022aa:	489e      	ldr	r0, [pc, #632]	; (8002524 <main+0x658>)
 80022ac:	f016 fb14 	bl	80188d8 <f_close>
        fileNum++;
 80022b0:	4b9a      	ldr	r3, [pc, #616]	; (800251c <main+0x650>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4a99      	ldr	r2, [pc, #612]	; (800251c <main+0x650>)
 80022b8:	6013      	str	r3, [r2, #0]
        strcpy(FilePath,Filename);
 80022ba:	4a96      	ldr	r2, [pc, #600]	; (8002514 <main+0x648>)
 80022bc:	f641 5370 	movw	r3, #7536	; 0x1d70
 80022c0:	443b      	add	r3, r7
 80022c2:	441a      	add	r2, r3
 80022c4:	4b94      	ldr	r3, [pc, #592]	; (8002518 <main+0x64c>)
 80022c6:	f641 5170 	movw	r1, #7536	; 0x1d70
 80022ca:	4439      	add	r1, r7
 80022cc:	440b      	add	r3, r1
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f017 fa5b 	bl	801978c <strcpy>
        sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 80022d6:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80022da:	443b      	add	r3, r7
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b8e      	ldr	r3, [pc, #568]	; (8002518 <main+0x64c>)
 80022e0:	f641 5170 	movw	r1, #7536	; 0x1d70
 80022e4:	4439      	add	r1, r7
 80022e6:	440b      	add	r3, r1
 80022e8:	1898      	adds	r0, r3, r2
 80022ea:	4b8c      	ldr	r3, [pc, #560]	; (800251c <main+0x650>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	498b      	ldr	r1, [pc, #556]	; (8002520 <main+0x654>)
 80022f2:	f017 fa2b 	bl	801974c <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 80022f6:	4b88      	ldr	r3, [pc, #544]	; (8002518 <main+0x64c>)
 80022f8:	f641 5270 	movw	r2, #7536	; 0x1d70
 80022fc:	443a      	add	r2, r7
 80022fe:	4413      	add	r3, r2
 8002300:	2201      	movs	r2, #1
 8002302:	4619      	mov	r1, r3
 8002304:	4887      	ldr	r0, [pc, #540]	; (8002524 <main+0x658>)
 8002306:	f015 fdf7 	bl	8017ef8 <f_open>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0cc      	beq.n	80022aa <main+0x3de>
      }
      f_open(&myFILE, FilePath, FA_WRITE | FA_CREATE_ALWAYS);
 8002310:	4b81      	ldr	r3, [pc, #516]	; (8002518 <main+0x64c>)
 8002312:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002316:	443a      	add	r2, r7
 8002318:	4413      	add	r3, r2
 800231a:	220a      	movs	r2, #10
 800231c:	4619      	mov	r1, r3
 800231e:	4881      	ldr	r0, [pc, #516]	; (8002524 <main+0x658>)
 8002320:	f015 fdea 	bl	8017ef8 <f_open>
  extern int GPS_flag;
  extern int FDCAN_Flag;
  extern int CAN_Flag;


  CAN_FD_FRAME FDBuffer[50] = {0};
 8002324:	4b80      	ldr	r3, [pc, #512]	; (8002528 <main+0x65c>)
 8002326:	f641 5270 	movw	r2, #7536	; 0x1d70
 800232a:	443a      	add	r2, r7
 800232c:	4413      	add	r3, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002334:	461a      	mov	r2, r3
 8002336:	2100      	movs	r1, #0
 8002338:	f017 f897 	bl	801946a <memset>
  CAN_FRAME Buffer[50] = {0};
 800233c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8002340:	4618      	mov	r0, r3
 8002342:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002346:	461a      	mov	r2, r3
 8002348:	2100      	movs	r1, #0
 800234a:	f017 f88e 	bl	801946a <memset>
  uint32_t Tele_IDs[50] = {0};
 800234e:	4b77      	ldr	r3, [pc, #476]	; (800252c <main+0x660>)
 8002350:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002354:	443a      	add	r2, r7
 8002356:	4413      	add	r3, r2
 8002358:	4618      	mov	r0, r3
 800235a:	23c8      	movs	r3, #200	; 0xc8
 800235c:	461a      	mov	r2, r3
 800235e:	2100      	movs	r1, #0
 8002360:	f017 f883 	bl	801946a <memset>
  Tele_IDs[0] = 0x321;
 8002364:	4b71      	ldr	r3, [pc, #452]	; (800252c <main+0x660>)
 8002366:	f641 5270 	movw	r2, #7536	; 0x1d70
 800236a:	443a      	add	r2, r7
 800236c:	4413      	add	r3, r2
 800236e:	f240 3221 	movw	r2, #801	; 0x321
 8002372:	601a      	str	r2, [r3, #0]

  sTime.SecondFraction = 999;
 8002374:	4b6e      	ldr	r3, [pc, #440]	; (8002530 <main+0x664>)
 8002376:	f240 32e7 	movw	r2, #999	; 0x3e7
 800237a:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 800237c:	f002 f914 	bl	80045a8 <HAL_GetTick>
 8002380:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002384:	443b      	add	r3, r7
 8002386:	6018      	str	r0, [r3, #0]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002388:	2200      	movs	r2, #0
 800238a:	4969      	ldr	r1, [pc, #420]	; (8002530 <main+0x664>)
 800238c:	4869      	ldr	r0, [pc, #420]	; (8002534 <main+0x668>)
 800238e:	f00a f96d 	bl	800c66c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002392:	2200      	movs	r2, #0
 8002394:	4968      	ldr	r1, [pc, #416]	; (8002538 <main+0x66c>)
 8002396:	4867      	ldr	r0, [pc, #412]	; (8002534 <main+0x668>)
 8002398:	f00a fa4c 	bl	800c834 <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 800239c:	4b64      	ldr	r3, [pc, #400]	; (8002530 <main+0x664>)
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	f641 5318 	movw	r3, #7448	; 0x1d18
 80023a4:	443b      	add	r3, r7
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b64      	ldr	r3, [pc, #400]	; (800253c <main+0x670>)
 80023aa:	fba3 0302 	umull	r0, r3, r3, r2
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023b4:	fb00 f303 	mul.w	r3, r0, r3
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	1acb      	subs	r3, r1, r3
 80023bc:	4a5c      	ldr	r2, [pc, #368]	; (8002530 <main+0x664>)
 80023be:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 80023c0:	f641 5318 	movw	r3, #7448	; 0x1d18
 80023c4:	443b      	add	r3, r7
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a5c      	ldr	r2, [pc, #368]	; (800253c <main+0x670>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	099b      	lsrs	r3, r3, #6
 80023d0:	f641 5218 	movw	r2, #7448	; 0x1d18
 80023d4:	443a      	add	r2, r7
 80023d6:	6013      	str	r3, [r2, #0]
  sTime.Seconds -= LocalTime % 60;
 80023d8:	4b55      	ldr	r3, [pc, #340]	; (8002530 <main+0x664>)
 80023da:	7898      	ldrb	r0, [r3, #2]
 80023dc:	f641 5318 	movw	r3, #7448	; 0x1d18
 80023e0:	443b      	add	r3, r7
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	4b56      	ldr	r3, [pc, #344]	; (8002540 <main+0x674>)
 80023e6:	fba3 2301 	umull	r2, r3, r3, r1
 80023ea:	095a      	lsrs	r2, r3, #5
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	1aca      	subs	r2, r1, r3
 80023f6:	b2d3      	uxtb	r3, r2
 80023f8:	1ac3      	subs	r3, r0, r3
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <main+0x664>)
 80023fe:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 8002400:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002404:	443b      	add	r3, r7
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a4d      	ldr	r2, [pc, #308]	; (8002540 <main+0x674>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002414:	443a      	add	r2, r7
 8002416:	6013      	str	r3, [r2, #0]
  sTime.Minutes -= LocalTime % 60;
 8002418:	4b45      	ldr	r3, [pc, #276]	; (8002530 <main+0x664>)
 800241a:	7858      	ldrb	r0, [r3, #1]
 800241c:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002420:	443b      	add	r3, r7
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	4b46      	ldr	r3, [pc, #280]	; (8002540 <main+0x674>)
 8002426:	fba3 2301 	umull	r2, r3, r3, r1
 800242a:	095a      	lsrs	r2, r3, #5
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	1aca      	subs	r2, r1, r3
 8002436:	b2d3      	uxtb	r3, r2
 8002438:	1ac3      	subs	r3, r0, r3
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <main+0x664>)
 800243e:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 8002440:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002444:	443b      	add	r3, r7
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a3d      	ldr	r2, [pc, #244]	; (8002540 <main+0x674>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002454:	443a      	add	r2, r7
 8002456:	6013      	str	r3, [r2, #0]
  sTime.Hours -= LocalTime % 60;
 8002458:	4b35      	ldr	r3, [pc, #212]	; (8002530 <main+0x664>)
 800245a:	7818      	ldrb	r0, [r3, #0]
 800245c:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002460:	443b      	add	r3, r7
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <main+0x674>)
 8002466:	fba3 2301 	umull	r2, r3, r3, r1
 800246a:	095a      	lsrs	r2, r3, #5
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	1aca      	subs	r2, r1, r3
 8002476:	b2d3      	uxtb	r3, r2
 8002478:	1ac3      	subs	r3, r0, r3
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <main+0x664>)
 800247e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[400];
  int CW = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	f641 526c 	movw	r2, #7532	; 0x1d6c
 8002486:	443a      	add	r2, r7
 8002488:	6013      	str	r3, [r2, #0]
  char CanFDWrite[400];
  int CFDW = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002490:	443a      	add	r2, r7
 8002492:	6013      	str	r3, [r2, #0]
  int AllowedTele = 1;
 8002494:	2301      	movs	r3, #1
 8002496:	f641 5264 	movw	r2, #7524	; 0x1d64
 800249a:	443a      	add	r2, r7
 800249c:	6013      	str	r3, [r2, #0]
  int BuffIndex = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 80024a4:	6013      	str	r3, [r2, #0]
  int Txcnt = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80024ac:	443a      	add	r2, r7
 80024ae:	6013      	str	r3, [r2, #0]
  int TxDataSpace = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f641 5214 	movw	r2, #7444	; 0x1d14
 80024b6:	443a      	add	r2, r7
 80024b8:	6013      	str	r3, [r2, #0]
  uint32_t LoopTime = 10; //time a loop should take (this is aguess should test avg time)
 80024ba:	230a      	movs	r3, #10
 80024bc:	f641 5210 	movw	r2, #7440	; 0x1d10
 80024c0:	443a      	add	r2, r7
 80024c2:	6013      	str	r3, [r2, #0]
  uint32_t StartTime = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f641 520c 	movw	r2, #7436	; 0x1d0c
 80024ca:	443a      	add	r2, r7
 80024cc:	6013      	str	r3, [r2, #0]
  uint32_t EndTime = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f641 5208 	movw	r2, #7432	; 0x1d08
 80024d4:	443a      	add	r2, r7
 80024d6:	6013      	str	r3, [r2, #0]
  uint32_t radiodelay = 1000;
 80024d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024dc:	f641 5204 	movw	r2, #7428	; 0x1d04
 80024e0:	443a      	add	r2, r7
 80024e2:	6013      	str	r3, [r2, #0]
  uint32_t r_start = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f641 5258 	movw	r2, #7512	; 0x1d58
 80024ea:	443a      	add	r2, r7
 80024ec:	6013      	str	r3, [r2, #0]
  uint32_t r_end = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80024f4:	6013      	str	r3, [r2, #0]
  r_start = HAL_GetTick();
 80024f6:	f002 f857 	bl	80045a8 <HAL_GetTick>
 80024fa:	f641 5358 	movw	r3, #7512	; 0x1d58
 80024fe:	443b      	add	r3, r7
 8002500:	6018      	str	r0, [r3, #0]

  while (end_flag){
 8002502:	f000 bedd 	b.w	80032c0 <main+0x13f4>
 8002506:	bf00      	nop
 8002508:	ffffe328 	.word	0xffffe328
 800250c:	24000dc8 	.word	0x24000dc8
 8002510:	240010d4 	.word	0x240010d4
 8002514:	ffffe744 	.word	0xffffe744
 8002518:	ffffe290 	.word	0xffffe290
 800251c:	2400000c 	.word	0x2400000c
 8002520:	0801ada4 	.word	0x0801ada4
 8002524:	24000b98 	.word	0x24000b98
 8002528:	ffffeff0 	.word	0xffffeff0
 800252c:	ffffea78 	.word	0xffffea78
 8002530:	24000b30 	.word	0x24000b30
 8002534:	240014f0 	.word	0x240014f0
 8002538:	24000b44 	.word	0x24000b44
 800253c:	10624dd3 	.word	0x10624dd3
 8002540:	88888889 	.word	0x88888889
    StartTime = HAL_GetTick();
 8002544:	f002 f830 	bl	80045a8 <HAL_GetTick>
 8002548:	f641 530c 	movw	r3, #7436	; 0x1d0c
 800254c:	443b      	add	r3, r7
 800254e:	6018      	str	r0, [r3, #0]
	  if(GPS_flag){
 8002550:	4b96      	ldr	r3, [pc, #600]	; (80027ac <main+0x8e0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <main+0x69a>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 8002558:	2146      	movs	r1, #70	; 0x46
 800255a:	4895      	ldr	r0, [pc, #596]	; (80027b0 <main+0x8e4>)
 800255c:	f7ff fc0e 	bl	8001d7c <WriteToBuff>
		  GPS_flag=0;
 8002560:	4b92      	ldr	r3, [pc, #584]	; (80027ac <main+0x8e0>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
	  }
	  
    r_end = HAL_GetTick();
 8002566:	f002 f81f 	bl	80045a8 <HAL_GetTick>
 800256a:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800256e:	6018      	str	r0, [r3, #0]
    if(r_start - r_end > radiodelay){
 8002570:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002574:	443b      	add	r3, r7
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f641 5204 	movw	r2, #7428	; 0x1d04
 8002584:	443a      	add	r2, r7
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	f080 8280 	bcs.w	8002a8e <main+0xbc2>
      r_start = HAL_GetTick();
 800258e:	f002 f80b 	bl	80045a8 <HAL_GetTick>
 8002592:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002596:	443b      	add	r3, r7
 8002598:	6018      	str	r0, [r3, #0]
      for(int i = 0; i < AllowedTele; i++){
 800259a:	2300      	movs	r3, #0
 800259c:	f641 5254 	movw	r2, #7508	; 0x1d54
 80025a0:	443a      	add	r2, r7
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	e268      	b.n	8002a78 <main+0xbac>
        //make packet (Time ID data)
        Txcnt = sprintf(myTxData,"%u %x ",FDBuffer[BuffIndex].time, FDBuffer[BuffIndex].id);
 80025a6:	4a83      	ldr	r2, [pc, #524]	; (80027b4 <main+0x8e8>)
 80025a8:	f641 5370 	movw	r3, #7536	; 0x1d70
 80025ac:	443b      	add	r3, r7
 80025ae:	441a      	add	r2, r3
 80025b0:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	460b      	mov	r3, r1
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	4413      	add	r3, r2
 80025c0:	330c      	adds	r3, #12
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	4a7b      	ldr	r2, [pc, #492]	; (80027b4 <main+0x8e8>)
 80025c6:	f641 5370 	movw	r3, #7536	; 0x1d70
 80025ca:	443b      	add	r3, r7
 80025cc:	441a      	add	r2, r3
 80025ce:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	460b      	mov	r3, r1
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	4413      	add	r3, r2
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4602      	mov	r2, r0
 80025e2:	4975      	ldr	r1, [pc, #468]	; (80027b8 <main+0x8ec>)
 80025e4:	4875      	ldr	r0, [pc, #468]	; (80027bc <main+0x8f0>)
 80025e6:	f017 f8b1 	bl	801974c <siprintf>
 80025ea:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80025ee:	443b      	add	r3, r7
 80025f0:	6018      	str	r0, [r3, #0]
        TxDataSpace = 32 - Txcnt;
 80025f2:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80025f6:	443b      	add	r3, r7
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f1c3 0320 	rsb	r3, r3, #32
 80025fe:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002602:	443a      	add	r2, r7
 8002604:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].length > TxDataSpace){
 8002606:	4a6b      	ldr	r2, [pc, #428]	; (80027b4 <main+0x8e8>)
 8002608:	f641 5370 	movw	r3, #7536	; 0x1d70
 800260c:	443b      	add	r3, r7
 800260e:	441a      	add	r2, r3
 8002610:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	460b      	mov	r3, r1
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	4413      	add	r3, r2
 8002620:	3308      	adds	r3, #8
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002628:	443b      	add	r3, r7
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	f240 81ad 	bls.w	800298c <main+0xac0>
          for(int i = 0; i < TxDataSpace; i++){
 8002632:	2300      	movs	r3, #0
 8002634:	f641 5250 	movw	r2, #7504	; 0x1d50
 8002638:	443a      	add	r2, r7
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e030      	b.n	80026a0 <main+0x7d4>
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 800263e:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002642:	443b      	add	r3, r7
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a5d      	ldr	r2, [pc, #372]	; (80027bc <main+0x8f0>)
 8002648:	1898      	adds	r0, r3, r2
 800264a:	4a5a      	ldr	r2, [pc, #360]	; (80027b4 <main+0x8e8>)
 800264c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002650:	443b      	add	r3, r7
 8002652:	441a      	add	r2, r3
 8002654:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002658:	6819      	ldr	r1, [r3, #0]
 800265a:	460b      	mov	r3, r1
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	441a      	add	r2, r3
 8002664:	f641 5350 	movw	r3, #7504	; 0x1d50
 8002668:	443b      	add	r3, r7
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4413      	add	r3, r2
 800266e:	3310      	adds	r3, #16
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4952      	ldr	r1, [pc, #328]	; (80027c0 <main+0x8f4>)
 8002676:	f017 f869 	bl	801974c <siprintf>
 800267a:	4602      	mov	r2, r0
 800267c:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002680:	443b      	add	r3, r7
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4413      	add	r3, r2
 8002686:	f641 525c 	movw	r2, #7516	; 0x1d5c
 800268a:	443a      	add	r2, r7
 800268c:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < TxDataSpace; i++){
 800268e:	f641 5350 	movw	r3, #7504	; 0x1d50
 8002692:	443b      	add	r3, r7
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	f641 5250 	movw	r2, #7504	; 0x1d50
 800269c:	443a      	add	r2, r7
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	f641 5350 	movw	r3, #7504	; 0x1d50
 80026a4:	443b      	add	r3, r7
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	f641 5314 	movw	r3, #7444	; 0x1d14
 80026ac:	443b      	add	r3, r7
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	dbc4      	blt.n	800263e <main+0x772>
          }
          NRF24_write(myTxData, 32);
 80026b4:	2120      	movs	r1, #32
 80026b6:	4841      	ldr	r0, [pc, #260]	; (80027bc <main+0x8f0>)
 80026b8:	f7fe fc6e 	bl	8000f98 <NRF24_write>
          Txcnt = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80026c2:	443a      	add	r2, r7
 80026c4:	6013      	str	r3, [r2, #0]
          if(FDBuffer[BuffIndex].length - TxDataSpace > 32){
 80026c6:	4a3b      	ldr	r2, [pc, #236]	; (80027b4 <main+0x8e8>)
 80026c8:	f641 5370 	movw	r3, #7536	; 0x1d70
 80026cc:	443b      	add	r3, r7
 80026ce:	441a      	add	r2, r3
 80026d0:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	460b      	mov	r3, r1
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	4413      	add	r3, r2
 80026e0:	3308      	adds	r3, #8
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	f641 5314 	movw	r3, #7444	; 0x1d14
 80026e8:	443b      	add	r3, r7
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	f240 80cb 	bls.w	800288a <main+0x9be>
            for(int i = 0; i < 32; i++){
 80026f4:	2300      	movs	r3, #0
 80026f6:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80026fa:	443a      	add	r2, r7
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e036      	b.n	800276e <main+0x8a2>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 8002700:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002704:	443b      	add	r3, r7
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2c      	ldr	r2, [pc, #176]	; (80027bc <main+0x8f0>)
 800270a:	189c      	adds	r4, r3, r2
 800270c:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002710:	443b      	add	r3, r7
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002718:	443b      	add	r3, r7
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	18d0      	adds	r0, r2, r3
 800271e:	4a25      	ldr	r2, [pc, #148]	; (80027b4 <main+0x8e8>)
 8002720:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002724:	443b      	add	r3, r7
 8002726:	441a      	add	r2, r3
 8002728:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	460b      	mov	r3, r1
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	4413      	add	r3, r2
 8002738:	4403      	add	r3, r0
 800273a:	3310      	adds	r3, #16
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	491f      	ldr	r1, [pc, #124]	; (80027c0 <main+0x8f4>)
 8002742:	4620      	mov	r0, r4
 8002744:	f017 f802 	bl	801974c <siprintf>
 8002748:	4602      	mov	r2, r0
 800274a:	f641 535c 	movw	r3, #7516	; 0x1d5c
 800274e:	443b      	add	r3, r7
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4413      	add	r3, r2
 8002754:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002758:	443a      	add	r2, r7
 800275a:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < 32; i++){
 800275c:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002760:	443b      	add	r3, r7
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800276a:	443a      	add	r2, r7
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002772:	443b      	add	r3, r7
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b1f      	cmp	r3, #31
 8002778:	ddc2      	ble.n	8002700 <main+0x834>
            }
            Txcnt = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002780:	443a      	add	r2, r7
 8002782:	6013      	str	r3, [r2, #0]
            i++;
 8002784:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002788:	443b      	add	r3, r7
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002792:	443a      	add	r2, r7
 8002794:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 8002796:	2120      	movs	r1, #32
 8002798:	4808      	ldr	r0, [pc, #32]	; (80027bc <main+0x8f0>)
 800279a:	f7fe fbfd 	bl	8000f98 <NRF24_write>
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 800279e:	2300      	movs	r3, #0
 80027a0:	f641 5248 	movw	r2, #7496	; 0x1d48
 80027a4:	443a      	add	r2, r7
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	e045      	b.n	8002836 <main+0x96a>
 80027aa:	bf00      	nop
 80027ac:	24000204 	.word	0x24000204
 80027b0:	24001304 	.word	0x24001304
 80027b4:	ffffeff0 	.word	0xffffeff0
 80027b8:	0801adac 	.word	0x0801adac
 80027bc:	24001450 	.word	0x24001450
 80027c0:	0801adb4 	.word	0x0801adb4
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace + 32]);
 80027c4:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80027c8:	443b      	add	r3, r7
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a72      	ldr	r2, [pc, #456]	; (8002998 <main+0xacc>)
 80027ce:	189c      	adds	r4, r3, r2
 80027d0:	f641 5348 	movw	r3, #7496	; 0x1d48
 80027d4:	443b      	add	r3, r7
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	f641 5314 	movw	r3, #7444	; 0x1d14
 80027dc:	443b      	add	r3, r7
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	f103 0020 	add.w	r0, r3, #32
 80027e6:	4a6d      	ldr	r2, [pc, #436]	; (800299c <main+0xad0>)
 80027e8:	f641 5370 	movw	r3, #7536	; 0x1d70
 80027ec:	443b      	add	r3, r7
 80027ee:	441a      	add	r2, r3
 80027f0:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80027f4:	6819      	ldr	r1, [r3, #0]
 80027f6:	460b      	mov	r3, r1
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	4413      	add	r3, r2
 8002800:	4403      	add	r3, r0
 8002802:	3310      	adds	r3, #16
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	4965      	ldr	r1, [pc, #404]	; (80029a0 <main+0xad4>)
 800280a:	4620      	mov	r0, r4
 800280c:	f016 ff9e 	bl	801974c <siprintf>
 8002810:	4602      	mov	r2, r0
 8002812:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002816:	443b      	add	r3, r7
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4413      	add	r3, r2
 800281c:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002820:	443a      	add	r2, r7
 8002822:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 8002824:	f641 5348 	movw	r3, #7496	; 0x1d48
 8002828:	443b      	add	r3, r7
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	f641 5248 	movw	r2, #7496	; 0x1d48
 8002832:	443a      	add	r2, r7
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4a59      	ldr	r2, [pc, #356]	; (800299c <main+0xad0>)
 8002838:	f641 5370 	movw	r3, #7536	; 0x1d70
 800283c:	443b      	add	r3, r7
 800283e:	441a      	add	r2, r3
 8002840:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	460b      	mov	r3, r1
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	4413      	add	r3, r2
 8002850:	3308      	adds	r3, #8
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002858:	443b      	add	r3, r7
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f103 0220 	add.w	r2, r3, #32
 8002862:	f641 5348 	movw	r3, #7496	; 0x1d48
 8002866:	443b      	add	r3, r7
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d8aa      	bhi.n	80027c4 <main+0x8f8>
            }
            i++;
 800286e:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002872:	443b      	add	r3, r7
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3301      	adds	r3, #1
 8002878:	f641 5254 	movw	r2, #7508	; 0x1d54
 800287c:	443a      	add	r2, r7
 800287e:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 8002880:	2120      	movs	r1, #32
 8002882:	4845      	ldr	r0, [pc, #276]	; (8002998 <main+0xacc>)
 8002884:	f7fe fb88 	bl	8000f98 <NRF24_write>
 8002888:	e0d2      	b.n	8002a30 <main+0xb64>
          }else{
            Txcnt = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002890:	443a      	add	r2, r7
 8002892:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 8002894:	2300      	movs	r3, #0
 8002896:	f641 5244 	movw	r2, #7492	; 0x1d44
 800289a:	443a      	add	r2, r7
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e036      	b.n	800290e <main+0xa42>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 80028a0:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80028a4:	443b      	add	r3, r7
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3b      	ldr	r2, [pc, #236]	; (8002998 <main+0xacc>)
 80028aa:	189c      	adds	r4, r3, r2
 80028ac:	f641 5344 	movw	r3, #7492	; 0x1d44
 80028b0:	443b      	add	r3, r7
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	f641 5314 	movw	r3, #7444	; 0x1d14
 80028b8:	443b      	add	r3, r7
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	18d0      	adds	r0, r2, r3
 80028be:	4a37      	ldr	r2, [pc, #220]	; (800299c <main+0xad0>)
 80028c0:	f641 5370 	movw	r3, #7536	; 0x1d70
 80028c4:	443b      	add	r3, r7
 80028c6:	441a      	add	r2, r3
 80028c8:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	460b      	mov	r3, r1
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	4413      	add	r3, r2
 80028d8:	4403      	add	r3, r0
 80028da:	3310      	adds	r3, #16
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	492f      	ldr	r1, [pc, #188]	; (80029a0 <main+0xad4>)
 80028e2:	4620      	mov	r0, r4
 80028e4:	f016 ff32 	bl	801974c <siprintf>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80028ee:	443b      	add	r3, r7
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80028f8:	443a      	add	r2, r7
 80028fa:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 80028fc:	f641 5344 	movw	r3, #7492	; 0x1d44
 8002900:	443b      	add	r3, r7
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	f641 5244 	movw	r2, #7492	; 0x1d44
 800290a:	443a      	add	r2, r7
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4a23      	ldr	r2, [pc, #140]	; (800299c <main+0xad0>)
 8002910:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002914:	443b      	add	r3, r7
 8002916:	441a      	add	r2, r3
 8002918:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800291c:	6819      	ldr	r1, [r3, #0]
 800291e:	460b      	mov	r3, r1
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	4413      	add	r3, r2
 8002928:	3308      	adds	r3, #8
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002930:	443b      	add	r3, r7
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	1ad2      	subs	r2, r2, r3
 8002936:	f641 5344 	movw	r3, #7492	; 0x1d44
 800293a:	443b      	add	r3, r7
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d8ae      	bhi.n	80028a0 <main+0x9d4>
            }
            i++;
 8002942:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002946:	443b      	add	r3, r7
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002950:	443a      	add	r2, r7
 8002952:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, FDBuffer[BuffIndex].length - TxDataSpace);
 8002954:	4a11      	ldr	r2, [pc, #68]	; (800299c <main+0xad0>)
 8002956:	f641 5370 	movw	r3, #7536	; 0x1d70
 800295a:	443b      	add	r3, r7
 800295c:	441a      	add	r2, r3
 800295e:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	460b      	mov	r3, r1
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	4413      	add	r3, r2
 800296e:	3308      	adds	r3, #8
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002978:	443b      	add	r3, r7
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4619      	mov	r1, r3
 8002984:	4804      	ldr	r0, [pc, #16]	; (8002998 <main+0xacc>)
 8002986:	f7fe fb07 	bl	8000f98 <NRF24_write>
 800298a:	e051      	b.n	8002a30 <main+0xb64>
          }
        }
        else{
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 800298c:	2300      	movs	r3, #0
 800298e:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	e034      	b.n	8002a00 <main+0xb34>
 8002996:	bf00      	nop
 8002998:	24001450 	.word	0x24001450
 800299c:	ffffeff0 	.word	0xffffeff0
 80029a0:	0801adb4 	.word	0x0801adb4
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 80029a4:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80029a8:	443b      	add	r3, r7
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4aac      	ldr	r2, [pc, #688]	; (8002c60 <main+0xd94>)
 80029ae:	1898      	adds	r0, r3, r2
 80029b0:	4aac      	ldr	r2, [pc, #688]	; (8002c64 <main+0xd98>)
 80029b2:	f641 5370 	movw	r3, #7536	; 0x1d70
 80029b6:	443b      	add	r3, r7
 80029b8:	441a      	add	r2, r3
 80029ba:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	460b      	mov	r3, r1
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	441a      	add	r2, r3
 80029ca:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	3310      	adds	r3, #16
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	49a3      	ldr	r1, [pc, #652]	; (8002c68 <main+0xd9c>)
 80029da:	f016 feb7 	bl	801974c <siprintf>
 80029de:	4602      	mov	r2, r0
 80029e0:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80029e4:	443b      	add	r3, r7
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80029ee:	443a      	add	r2, r7
 80029f0:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 80029f2:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4a98      	ldr	r2, [pc, #608]	; (8002c64 <main+0xd98>)
 8002a02:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a06:	443b      	add	r3, r7
 8002a08:	441a      	add	r2, r3
 8002a0a:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	460b      	mov	r3, r1
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	4413      	add	r3, r2
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d8bd      	bhi.n	80029a4 <main+0xad8>
          }
          NRF24_write(myTxData, 32);//FDBuffer[BuffIndex].length + (32 - TxDataSpace)
 8002a28:	2120      	movs	r1, #32
 8002a2a:	488d      	ldr	r0, [pc, #564]	; (8002c60 <main+0xd94>)
 8002a2c:	f7fe fab4 	bl	8000f98 <NRF24_write>
        }
        BuffIndex++;
 8002a30:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002a3c:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].id == 0){
 8002a3e:	4a89      	ldr	r2, [pc, #548]	; (8002c64 <main+0xd98>)
 8002a40:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a44:	443b      	add	r3, r7
 8002a46:	441a      	add	r2, r3
 8002a48:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	4413      	add	r3, r2
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d103      	bne.n	8002a66 <main+0xb9a>
          BuffIndex = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002a64:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < AllowedTele; i++){
 8002a66:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002a6a:	443b      	add	r3, r7
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002a74:	443a      	add	r2, r7
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002a7c:	443b      	add	r3, r7
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002a84:	443b      	add	r3, r7
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	f6ff ad8c 	blt.w	80025a6 <main+0x6da>


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/

	  if(FDCAN_Flag){
 8002a8e:	4b77      	ldr	r3, [pc, #476]	; (8002c6c <main+0xda0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 81ed 	beq.w	8002e72 <main+0xfa6>

		  RTC_TimeTypeDef lTime = sTime;
 8002a98:	4b75      	ldr	r3, [pc, #468]	; (8002c70 <main+0xda4>)
 8002a9a:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002a9e:	443a      	add	r2, r7
 8002aa0:	4413      	add	r3, r2
 8002aa2:	4a74      	ldr	r2, [pc, #464]	; (8002c74 <main+0xda8>)
 8002aa4:	461c      	mov	r4, r3
 8002aa6:	4615      	mov	r5, r2
 8002aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 8002ab0:	4b71      	ldr	r3, [pc, #452]	; (8002c78 <main+0xdac>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002ab8:	443a      	add	r2, r7
 8002aba:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002abc:	4b6c      	ldr	r3, [pc, #432]	; (8002c70 <main+0xda4>)
 8002abe:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ac2:	443a      	add	r2, r7
 8002ac4:	4413      	add	r3, r2
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002acc:	443b      	add	r3, r7
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b6a      	ldr	r3, [pc, #424]	; (8002c7c <main+0xdb0>)
 8002ad2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ad6:	099b      	lsrs	r3, r3, #6
 8002ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002adc:	fb00 f303 	mul.w	r3, r0, r3
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	18ca      	adds	r2, r1, r3
 8002ae4:	4b62      	ldr	r3, [pc, #392]	; (8002c70 <main+0xda4>)
 8002ae6:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002aea:	4439      	add	r1, r7
 8002aec:	440b      	add	r3, r1
 8002aee:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002af0:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002af4:	443b      	add	r3, r7
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a60      	ldr	r2, [pc, #384]	; (8002c7c <main+0xdb0>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	099b      	lsrs	r3, r3, #6
 8002b00:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002b04:	443a      	add	r2, r7
 8002b06:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <main+0xda4>)
 8002b0a:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002b0e:	443a      	add	r2, r7
 8002b10:	4413      	add	r3, r2
 8002b12:	7898      	ldrb	r0, [r3, #2]
 8002b14:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b18:	443b      	add	r3, r7
 8002b1a:	6819      	ldr	r1, [r3, #0]
 8002b1c:	4b58      	ldr	r3, [pc, #352]	; (8002c80 <main+0xdb4>)
 8002b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b22:	095a      	lsrs	r2, r3, #5
 8002b24:	4613      	mov	r3, r2
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	1aca      	subs	r2, r1, r3
 8002b2e:	b2d3      	uxtb	r3, r2
 8002b30:	4403      	add	r3, r0
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	4b4e      	ldr	r3, [pc, #312]	; (8002c70 <main+0xda4>)
 8002b36:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002b3a:	4439      	add	r1, r7
 8002b3c:	440b      	add	r3, r1
 8002b3e:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002b40:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b44:	443b      	add	r3, r7
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a4d      	ldr	r2, [pc, #308]	; (8002c80 <main+0xdb4>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002b54:	443a      	add	r2, r7
 8002b56:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8002b58:	4b45      	ldr	r3, [pc, #276]	; (8002c70 <main+0xda4>)
 8002b5a:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002b5e:	443a      	add	r2, r7
 8002b60:	4413      	add	r3, r2
 8002b62:	7858      	ldrb	r0, [r3, #1]
 8002b64:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b68:	443b      	add	r3, r7
 8002b6a:	6819      	ldr	r1, [r3, #0]
 8002b6c:	4b44      	ldr	r3, [pc, #272]	; (8002c80 <main+0xdb4>)
 8002b6e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b72:	095a      	lsrs	r2, r3, #5
 8002b74:	4613      	mov	r3, r2
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	1aca      	subs	r2, r1, r3
 8002b7e:	b2d3      	uxtb	r3, r2
 8002b80:	4403      	add	r3, r0
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	4b3a      	ldr	r3, [pc, #232]	; (8002c70 <main+0xda4>)
 8002b86:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002b8a:	4439      	add	r1, r7
 8002b8c:	440b      	add	r3, r1
 8002b8e:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002b90:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b94:	443b      	add	r3, r7
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a39      	ldr	r2, [pc, #228]	; (8002c80 <main+0xdb4>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002ba4:	443a      	add	r2, r7
 8002ba6:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8002ba8:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <main+0xda4>)
 8002baa:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002bae:	443a      	add	r2, r7
 8002bb0:	4413      	add	r3, r2
 8002bb2:	7818      	ldrb	r0, [r3, #0]
 8002bb4:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002bb8:	443b      	add	r3, r7
 8002bba:	6819      	ldr	r1, [r3, #0]
 8002bbc:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <main+0xdb4>)
 8002bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002bc2:	095a      	lsrs	r2, r3, #5
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	1aca      	subs	r2, r1, r3
 8002bce:	b2d3      	uxtb	r3, r2
 8002bd0:	4403      	add	r3, r0
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <main+0xda4>)
 8002bd6:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002bda:	4439      	add	r1, r7
 8002bdc:	440b      	add	r3, r1
 8002bde:	701a      	strb	r2, [r3, #0]
      //Write to SD Card
		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002be0:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <main+0xdb8>)
 8002be2:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002be4:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002be6:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <main+0xdb8>)
 8002be8:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bea:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <main+0xdb8>)
 8002bee:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bf0:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <main+0xda4>)
 8002bf4:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002bf8:	443a      	add	r2, r7
 8002bfa:	4413      	add	r3, r2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bfe:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <main+0xda4>)
 8002c02:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c06:	443a      	add	r2, r7
 8002c08:	4413      	add	r3, r2
 8002c0a:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c0c:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <main+0xda4>)
 8002c10:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c14:	443a      	add	r2, r7
 8002c16:	4413      	add	r3, r2
 8002c18:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c1a:	461e      	mov	r6, r3
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <main+0xda4>)
 8002c1e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c22:	443a      	add	r2, r7
 8002c24:	4413      	add	r3, r2
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <main+0xdac>)
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	4816      	ldr	r0, [pc, #88]	; (8002c88 <main+0xdbc>)
 8002c2e:	f641 5870 	movw	r8, #7536	; 0x1d70
 8002c32:	44b8      	add	r8, r7
 8002c34:	4440      	add	r0, r8
 8002c36:	9205      	str	r2, [sp, #20]
 8002c38:	9304      	str	r3, [sp, #16]
 8002c3a:	9603      	str	r6, [sp, #12]
 8002c3c:	9502      	str	r5, [sp, #8]
 8002c3e:	9401      	str	r4, [sp, #4]
 8002c40:	9100      	str	r1, [sp, #0]
 8002c42:	4673      	mov	r3, lr
 8002c44:	4662      	mov	r2, ip
 8002c46:	4911      	ldr	r1, [pc, #68]	; (8002c8c <main+0xdc0>)
 8002c48:	f016 fd80 	bl	801974c <siprintf>
 8002c4c:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002c50:	443b      	add	r3, r7
 8002c52:	6018      	str	r0, [r3, #0]
				  CanFDFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002c54:	2300      	movs	r3, #0
 8002c56:	f641 523c 	movw	r2, #7484	; 0x1d3c
 8002c5a:	443a      	add	r2, r7
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e040      	b.n	8002ce2 <main+0xe16>
 8002c60:	24001450 	.word	0x24001450
 8002c64:	ffffeff0 	.word	0xffffeff0
 8002c68:	0801adb4 	.word	0x0801adb4
 8002c6c:	240001fc 	.word	0x240001fc
 8002c70:	ffffe724 	.word	0xffffe724
 8002c74:	24000b30 	.word	0x24000b30
 8002c78:	24001040 	.word	0x24001040
 8002c7c:	10624dd3 	.word	0x10624dd3
 8002c80:	88888889 	.word	0x88888889
 8002c84:	24000b44 	.word	0x24000b44
 8002c88:	ffffe758 	.word	0xffffe758
 8002c8c:	0801adb8 	.word	0x0801adb8
			  CFDW += sprintf(CanFDWrite + CFDW, "%c", CanFDFrame.data.bytes[i]);
 8002c90:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002c94:	443b      	add	r3, r7
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b5e      	ldr	r3, [pc, #376]	; (8002e14 <main+0xf48>)
 8002c9a:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002c9e:	4439      	add	r1, r7
 8002ca0:	440b      	add	r3, r1
 8002ca2:	1898      	adds	r0, r3, r2
 8002ca4:	4a5c      	ldr	r2, [pc, #368]	; (8002e18 <main+0xf4c>)
 8002ca6:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002caa:	443b      	add	r3, r7
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	3310      	adds	r3, #16
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4959      	ldr	r1, [pc, #356]	; (8002e1c <main+0xf50>)
 8002cb8:	f016 fd48 	bl	801974c <siprintf>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002cc2:	443b      	add	r3, r7
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002ccc:	443a      	add	r2, r7
 8002cce:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002cd0:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002cd4:	443b      	add	r3, r7
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f641 523c 	movw	r2, #7484	; 0x1d3c
 8002cde:	443a      	add	r2, r7
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b4d      	ldr	r3, [pc, #308]	; (8002e18 <main+0xf4c>)
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002cea:	443b      	add	r3, r7
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d8ce      	bhi.n	8002c90 <main+0xdc4>
		  }
		  CFDW += sprintf(CanFDWrite + CFDW, "\n\r");
 8002cf2:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002cf6:	443b      	add	r3, r7
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <main+0xf48>)
 8002cfc:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002d00:	4439      	add	r1, r7
 8002d02:	440b      	add	r3, r1
 8002d04:	4413      	add	r3, r2
 8002d06:	4a46      	ldr	r2, [pc, #280]	; (8002e20 <main+0xf54>)
 8002d08:	8811      	ldrh	r1, [r2, #0]
 8002d0a:	7892      	ldrb	r2, [r2, #2]
 8002d0c:	8019      	strh	r1, [r3, #0]
 8002d0e:	709a      	strb	r2, [r3, #2]
 8002d10:	2202      	movs	r2, #2
 8002d12:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d16:	443b      	add	r3, r7
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002d20:	443a      	add	r2, r7
 8002d22:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanFDWrite, CFDW);
 8002d24:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <main+0xf48>)
 8002d26:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002d2a:	443a      	add	r2, r7
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002d32:	443a      	add	r2, r7
 8002d34:	6811      	ldr	r1, [r2, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff f820 	bl	8001d7c <WriteToBuff>

      //Write to telemetry buffer
      
      for(int i = 0; i <50; i++){
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002d42:	443a      	add	r2, r7
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e089      	b.n	8002e5c <main+0xf90>
        if(CanFDFrame.id == Tele_IDs[i]){ //check if frame should be checked
 8002d48:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <main+0xf4c>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <main+0xf58>)
 8002d4e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002d52:	4439      	add	r1, r7
 8002d54:	440b      	add	r3, r1
 8002d56:	f641 5138 	movw	r1, #7480	; 0x1d38
 8002d5a:	4439      	add	r1, r7
 8002d5c:	6809      	ldr	r1, [r1, #0]
 8002d5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d171      	bne.n	8002e4a <main+0xf7e>
          for(int j = 0; j < 50; j++){
 8002d66:	2300      	movs	r3, #0
 8002d68:	f641 5234 	movw	r2, #7476	; 0x1d34
 8002d6c:	443a      	add	r2, r7
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	e065      	b.n	8002e3e <main+0xf72>
            if(FDBuffer[j].id == CanFDFrame.id){
 8002d72:	4a2d      	ldr	r2, [pc, #180]	; (8002e28 <main+0xf5c>)
 8002d74:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002d78:	443b      	add	r3, r7
 8002d7a:	441a      	add	r2, r3
 8002d7c:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002d80:	443b      	add	r3, r7
 8002d82:	6819      	ldr	r1, [r3, #0]
 8002d84:	460b      	mov	r3, r1
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	4413      	add	r3, r2
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b21      	ldr	r3, [pc, #132]	; (8002e18 <main+0xf4c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d115      	bne.n	8002dc4 <main+0xef8>
              FDBuffer[j] = CanFDFrame;
 8002d98:	4a23      	ldr	r2, [pc, #140]	; (8002e28 <main+0xf5c>)
 8002d9a:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002d9e:	443b      	add	r3, r7
 8002da0:	441a      	add	r2, r3
 8002da2:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002da6:	443b      	add	r3, r7
 8002da8:	6819      	ldr	r1, [r3, #0]
 8002daa:	460b      	mov	r3, r1
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	4413      	add	r3, r2
 8002db4:	4a18      	ldr	r2, [pc, #96]	; (8002e18 <main+0xf4c>)
 8002db6:	4618      	mov	r0, r3
 8002db8:	4611      	mov	r1, r2
 8002dba:	2350      	movs	r3, #80	; 0x50
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f016 fb49 	bl	8019454 <memcpy>
              goto TeleDoneFD;
 8002dc2:	e053      	b.n	8002e6c <main+0xfa0>
            }
            if(FDBuffer[j].id == 0){
 8002dc4:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <main+0xf5c>)
 8002dc6:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002dca:	443b      	add	r3, r7
 8002dcc:	441a      	add	r2, r3
 8002dce:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002dd2:	443b      	add	r3, r7
 8002dd4:	6819      	ldr	r1, [r3, #0]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4413      	add	r3, r2
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d122      	bne.n	8002e2c <main+0xf60>
              FDBuffer[j] = CanFDFrame;
 8002de6:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <main+0xf5c>)
 8002de8:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002dec:	443b      	add	r3, r7
 8002dee:	441a      	add	r2, r3
 8002df0:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002df4:	443b      	add	r3, r7
 8002df6:	6819      	ldr	r1, [r3, #0]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	4413      	add	r3, r2
 8002e02:	4a05      	ldr	r2, [pc, #20]	; (8002e18 <main+0xf4c>)
 8002e04:	4618      	mov	r0, r3
 8002e06:	4611      	mov	r1, r2
 8002e08:	2350      	movs	r3, #80	; 0x50
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f016 fb22 	bl	8019454 <memcpy>
              goto TeleDoneFD;
 8002e10:	e02c      	b.n	8002e6c <main+0xfa0>
 8002e12:	bf00      	nop
 8002e14:	ffffe758 	.word	0xffffe758
 8002e18:	24001040 	.word	0x24001040
 8002e1c:	0801adb4 	.word	0x0801adb4
 8002e20:	0801add4 	.word	0x0801add4
 8002e24:	ffffea78 	.word	0xffffea78
 8002e28:	ffffeff0 	.word	0xffffeff0
          for(int j = 0; j < 50; j++){
 8002e2c:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e30:	443b      	add	r3, r7
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	f641 5234 	movw	r2, #7476	; 0x1d34
 8002e3a:	443a      	add	r2, r7
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e42:	443b      	add	r3, r7
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b31      	cmp	r3, #49	; 0x31
 8002e48:	dd93      	ble.n	8002d72 <main+0xea6>
      for(int i = 0; i <50; i++){
 8002e4a:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002e4e:	443b      	add	r3, r7
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3301      	adds	r3, #1
 8002e54:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002e58:	443a      	add	r2, r7
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002e60:	443b      	add	r3, r7
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b31      	cmp	r3, #49	; 0x31
 8002e66:	f77f af6f 	ble.w	8002d48 <main+0xe7c>
            }
          }
        }
      }
TeleDoneFD:
 8002e6a:	bf00      	nop
		  FDCAN_Flag = 0;
 8002e6c:	4bae      	ldr	r3, [pc, #696]	; (8003128 <main+0x125c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 8002e72:	4bae      	ldr	r3, [pc, #696]	; (800312c <main+0x1260>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 81df 	beq.w	800323a <main+0x136e>

		  RTC_TimeTypeDef lTime = sTime;
 8002e7c:	4bac      	ldr	r3, [pc, #688]	; (8003130 <main+0x1264>)
 8002e7e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002e82:	443a      	add	r2, r7
 8002e84:	4413      	add	r3, r2
 8002e86:	4aab      	ldr	r2, [pc, #684]	; (8003134 <main+0x1268>)
 8002e88:	461c      	mov	r4, r3
 8002e8a:	4615      	mov	r5, r2
 8002e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e90:	682b      	ldr	r3, [r5, #0]
 8002e92:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 8002e94:	4ba8      	ldr	r3, [pc, #672]	; (8003138 <main+0x126c>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002e9c:	443a      	add	r2, r7
 8002e9e:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002ea0:	4ba3      	ldr	r3, [pc, #652]	; (8003130 <main+0x1264>)
 8002ea2:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ea6:	443a      	add	r2, r7
 8002ea8:	4413      	add	r3, r2
 8002eaa:	6859      	ldr	r1, [r3, #4]
 8002eac:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002eb0:	443b      	add	r3, r7
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4ba1      	ldr	r3, [pc, #644]	; (800313c <main+0x1270>)
 8002eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eba:	099b      	lsrs	r3, r3, #6
 8002ebc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ec0:	fb00 f303 	mul.w	r3, r0, r3
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	18ca      	adds	r2, r1, r3
 8002ec8:	4b99      	ldr	r3, [pc, #612]	; (8003130 <main+0x1264>)
 8002eca:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002ece:	4439      	add	r1, r7
 8002ed0:	440b      	add	r3, r1
 8002ed2:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002ed4:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002ed8:	443b      	add	r3, r7
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a97      	ldr	r2, [pc, #604]	; (800313c <main+0x1270>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	099b      	lsrs	r3, r3, #6
 8002ee4:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002ee8:	443a      	add	r2, r7
 8002eea:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8002eec:	4b90      	ldr	r3, [pc, #576]	; (8003130 <main+0x1264>)
 8002eee:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ef2:	443a      	add	r2, r7
 8002ef4:	4413      	add	r3, r2
 8002ef6:	7898      	ldrb	r0, [r3, #2]
 8002ef8:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002efc:	443b      	add	r3, r7
 8002efe:	6819      	ldr	r1, [r3, #0]
 8002f00:	4b8f      	ldr	r3, [pc, #572]	; (8003140 <main+0x1274>)
 8002f02:	fba3 2301 	umull	r2, r3, r3, r1
 8002f06:	095a      	lsrs	r2, r3, #5
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	1aca      	subs	r2, r1, r3
 8002f12:	b2d3      	uxtb	r3, r2
 8002f14:	4403      	add	r3, r0
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	4b85      	ldr	r3, [pc, #532]	; (8003130 <main+0x1264>)
 8002f1a:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002f1e:	4439      	add	r1, r7
 8002f20:	440b      	add	r3, r1
 8002f22:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002f24:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f28:	443b      	add	r3, r7
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a84      	ldr	r2, [pc, #528]	; (8003140 <main+0x1274>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002f38:	443a      	add	r2, r7
 8002f3a:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8002f3c:	4b7c      	ldr	r3, [pc, #496]	; (8003130 <main+0x1264>)
 8002f3e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002f42:	443a      	add	r2, r7
 8002f44:	4413      	add	r3, r2
 8002f46:	7858      	ldrb	r0, [r3, #1]
 8002f48:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f4c:	443b      	add	r3, r7
 8002f4e:	6819      	ldr	r1, [r3, #0]
 8002f50:	4b7b      	ldr	r3, [pc, #492]	; (8003140 <main+0x1274>)
 8002f52:	fba3 2301 	umull	r2, r3, r3, r1
 8002f56:	095a      	lsrs	r2, r3, #5
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	1aca      	subs	r2, r1, r3
 8002f62:	b2d3      	uxtb	r3, r2
 8002f64:	4403      	add	r3, r0
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	4b71      	ldr	r3, [pc, #452]	; (8003130 <main+0x1264>)
 8002f6a:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002f6e:	4439      	add	r1, r7
 8002f70:	440b      	add	r3, r1
 8002f72:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002f74:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f78:	443b      	add	r3, r7
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a70      	ldr	r2, [pc, #448]	; (8003140 <main+0x1274>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002f88:	443a      	add	r2, r7
 8002f8a:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8002f8c:	4b68      	ldr	r3, [pc, #416]	; (8003130 <main+0x1264>)
 8002f8e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002f92:	443a      	add	r2, r7
 8002f94:	4413      	add	r3, r2
 8002f96:	7818      	ldrb	r0, [r3, #0]
 8002f98:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f9c:	443b      	add	r3, r7
 8002f9e:	6819      	ldr	r1, [r3, #0]
 8002fa0:	4b67      	ldr	r3, [pc, #412]	; (8003140 <main+0x1274>)
 8002fa2:	fba3 2301 	umull	r2, r3, r3, r1
 8002fa6:	095a      	lsrs	r2, r3, #5
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	1aca      	subs	r2, r1, r3
 8002fb2:	b2d3      	uxtb	r3, r2
 8002fb4:	4403      	add	r3, r0
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	4b5d      	ldr	r3, [pc, #372]	; (8003130 <main+0x1264>)
 8002fba:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002fbe:	4439      	add	r1, r7
 8002fc0:	440b      	add	r3, r1
 8002fc2:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fc4:	4b5f      	ldr	r3, [pc, #380]	; (8003144 <main+0x1278>)
 8002fc6:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002fc8:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fca:	4b5e      	ldr	r3, [pc, #376]	; (8003144 <main+0x1278>)
 8002fcc:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002fce:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fd0:	4b5c      	ldr	r3, [pc, #368]	; (8003144 <main+0x1278>)
 8002fd2:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002fd4:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fd6:	4b56      	ldr	r3, [pc, #344]	; (8003130 <main+0x1264>)
 8002fd8:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002fdc:	443a      	add	r2, r7
 8002fde:	4413      	add	r3, r2
 8002fe0:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002fe2:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fe4:	4b52      	ldr	r3, [pc, #328]	; (8003130 <main+0x1264>)
 8002fe6:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002fea:	443a      	add	r2, r7
 8002fec:	4413      	add	r3, r2
 8002fee:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002ff0:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002ff2:	4b4f      	ldr	r3, [pc, #316]	; (8003130 <main+0x1264>)
 8002ff4:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ff8:	443a      	add	r2, r7
 8002ffa:	4413      	add	r3, r2
 8002ffc:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002ffe:	461e      	mov	r6, r3
 8003000:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <main+0x1264>)
 8003002:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003006:	443a      	add	r2, r7
 8003008:	4413      	add	r3, r2
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4a4a      	ldr	r2, [pc, #296]	; (8003138 <main+0x126c>)
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	484d      	ldr	r0, [pc, #308]	; (8003148 <main+0x127c>)
 8003012:	f641 5870 	movw	r8, #7536	; 0x1d70
 8003016:	44b8      	add	r8, r7
 8003018:	4440      	add	r0, r8
 800301a:	9205      	str	r2, [sp, #20]
 800301c:	9304      	str	r3, [sp, #16]
 800301e:	9603      	str	r6, [sp, #12]
 8003020:	9502      	str	r5, [sp, #8]
 8003022:	9401      	str	r4, [sp, #4]
 8003024:	9100      	str	r1, [sp, #0]
 8003026:	4673      	mov	r3, lr
 8003028:	4662      	mov	r2, ip
 800302a:	4948      	ldr	r1, [pc, #288]	; (800314c <main+0x1280>)
 800302c:	f016 fb8e 	bl	801974c <siprintf>
 8003030:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003034:	443b      	add	r3, r7
 8003036:	6018      	str	r0, [r3, #0]
				  CanFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8003038:	2300      	movs	r3, #0
 800303a:	f641 5230 	movw	r2, #7472	; 0x1d30
 800303e:	443a      	add	r2, r7
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e028      	b.n	8003096 <main+0x11ca>
			  CW += sprintf(CanWrite + CW, "%c", CanFrame.data.bytes[i]);
 8003044:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003048:	443b      	add	r3, r7
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b3e      	ldr	r3, [pc, #248]	; (8003148 <main+0x127c>)
 800304e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8003052:	4439      	add	r1, r7
 8003054:	440b      	add	r3, r1
 8003056:	1898      	adds	r0, r3, r2
 8003058:	4a37      	ldr	r2, [pc, #220]	; (8003138 <main+0x126c>)
 800305a:	f641 5330 	movw	r3, #7472	; 0x1d30
 800305e:	443b      	add	r3, r7
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4413      	add	r3, r2
 8003064:	3310      	adds	r3, #16
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	4939      	ldr	r1, [pc, #228]	; (8003150 <main+0x1284>)
 800306c:	f016 fb6e 	bl	801974c <siprintf>
 8003070:	4602      	mov	r2, r0
 8003072:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003076:	443b      	add	r3, r7
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4413      	add	r3, r2
 800307c:	f641 526c 	movw	r2, #7532	; 0x1d6c
 8003080:	443a      	add	r2, r7
 8003082:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 8003084:	f641 5330 	movw	r3, #7472	; 0x1d30
 8003088:	443b      	add	r3, r7
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	f641 5230 	movw	r2, #7472	; 0x1d30
 8003092:	443a      	add	r2, r7
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <main+0x1288>)
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	f641 5330 	movw	r3, #7472	; 0x1d30
 800309e:	443b      	add	r3, r7
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d8ce      	bhi.n	8003044 <main+0x1178>
		  }
		  CW += sprintf(CanWrite + CW, "\n\r");
 80030a6:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80030aa:	443b      	add	r3, r7
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <main+0x127c>)
 80030b0:	f641 5170 	movw	r1, #7536	; 0x1d70
 80030b4:	4439      	add	r1, r7
 80030b6:	440b      	add	r3, r1
 80030b8:	4413      	add	r3, r2
 80030ba:	4a27      	ldr	r2, [pc, #156]	; (8003158 <main+0x128c>)
 80030bc:	8811      	ldrh	r1, [r2, #0]
 80030be:	7892      	ldrb	r2, [r2, #2]
 80030c0:	8019      	strh	r1, [r3, #0]
 80030c2:	709a      	strb	r2, [r3, #2]
 80030c4:	2202      	movs	r2, #2
 80030c6:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80030ca:	443b      	add	r3, r7
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4413      	add	r3, r2
 80030d0:	f641 526c 	movw	r2, #7532	; 0x1d6c
 80030d4:	443a      	add	r2, r7
 80030d6:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanWrite, CW);
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <main+0x127c>)
 80030da:	f641 5270 	movw	r2, #7536	; 0x1d70
 80030de:	443a      	add	r2, r7
 80030e0:	4413      	add	r3, r2
 80030e2:	f641 526c 	movw	r2, #7532	; 0x1d6c
 80030e6:	443a      	add	r2, r7
 80030e8:	6811      	ldr	r1, [r2, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fe46 	bl	8001d7c <WriteToBuff>

      for(int i = 0; i <50; i++){
 80030f0:	2300      	movs	r3, #0
 80030f2:	f641 522c 	movw	r2, #7468	; 0x1d2c
 80030f6:	443a      	add	r2, r7
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e091      	b.n	8003220 <main+0x1354>
        if(CanFrame.id == Tele_IDs[i]){ //check if frame should be checked
 80030fc:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <main+0x126c>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b16      	ldr	r3, [pc, #88]	; (800315c <main+0x1290>)
 8003102:	f641 5170 	movw	r1, #7536	; 0x1d70
 8003106:	4439      	add	r1, r7
 8003108:	440b      	add	r3, r1
 800310a:	f641 512c 	movw	r1, #7468	; 0x1d2c
 800310e:	4439      	add	r1, r7
 8003110:	6809      	ldr	r1, [r1, #0]
 8003112:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003116:	429a      	cmp	r2, r3
 8003118:	d179      	bne.n	800320e <main+0x1342>
          for(int j = 0; j < 50; j++){
 800311a:	2300      	movs	r3, #0
 800311c:	f641 5228 	movw	r2, #7464	; 0x1d28
 8003120:	443a      	add	r2, r7
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	e06d      	b.n	8003202 <main+0x1336>
 8003126:	bf00      	nop
 8003128:	240001fc 	.word	0x240001fc
 800312c:	24000200 	.word	0x24000200
 8003130:	ffffe710 	.word	0xffffe710
 8003134:	24000b30 	.word	0x24000b30
 8003138:	240010b8 	.word	0x240010b8
 800313c:	10624dd3 	.word	0x10624dd3
 8003140:	88888889 	.word	0x88888889
 8003144:	24000b44 	.word	0x24000b44
 8003148:	ffffe8e8 	.word	0xffffe8e8
 800314c:	0801adb8 	.word	0x0801adb8
 8003150:	0801adb4 	.word	0x0801adb4
 8003154:	24001040 	.word	0x24001040
 8003158:	0801add4 	.word	0x0801add4
 800315c:	ffffea78 	.word	0xffffea78
            if(Buffer[j].id == CanFrame.id){
 8003160:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8003164:	f641 5328 	movw	r3, #7464	; 0x1d28
 8003168:	443b      	add	r3, r7
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b5a      	ldr	r3, [pc, #360]	; (80032e4 <main+0x1418>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d114      	bne.n	80031aa <main+0x12de>
              Buffer[j] = CanFrame;     //if its already in the buffer replace it
 8003180:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8003184:	f641 5328 	movw	r3, #7464	; 0x1d28
 8003188:	443b      	add	r3, r7
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	440b      	add	r3, r1
 8003196:	4a53      	ldr	r2, [pc, #332]	; (80032e4 <main+0x1418>)
 8003198:	461c      	mov	r4, r3
 800319a:	4615      	mov	r5, r2
 800319c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800319e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031a4:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 80031a8:	e044      	b.n	8003234 <main+0x1368>
            }
            if(Buffer[j].id == 0){
 80031aa:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80031ae:	f641 5328 	movw	r3, #7464	; 0x1d28
 80031b2:	443b      	add	r3, r7
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	440b      	add	r3, r1
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d114      	bne.n	80031f0 <main+0x1324>
              Buffer[j] = CanFrame;     //if you get to the end of the defined packets withoout finding anything add the packet on the end
 80031c6:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80031ca:	f641 5328 	movw	r3, #7464	; 0x1d28
 80031ce:	443b      	add	r3, r7
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	440b      	add	r3, r1
 80031dc:	4a41      	ldr	r2, [pc, #260]	; (80032e4 <main+0x1418>)
 80031de:	461c      	mov	r4, r3
 80031e0:	4615      	mov	r5, r2
 80031e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031ea:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 80031ee:	e021      	b.n	8003234 <main+0x1368>
          for(int j = 0; j < 50; j++){
 80031f0:	f641 5328 	movw	r3, #7464	; 0x1d28
 80031f4:	443b      	add	r3, r7
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	f641 5228 	movw	r2, #7464	; 0x1d28
 80031fe:	443a      	add	r2, r7
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	f641 5328 	movw	r3, #7464	; 0x1d28
 8003206:	443b      	add	r3, r7
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b31      	cmp	r3, #49	; 0x31
 800320c:	dda8      	ble.n	8003160 <main+0x1294>
      for(int i = 0; i <50; i++){
 800320e:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003212:	443b      	add	r3, r7
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	f641 522c 	movw	r2, #7468	; 0x1d2c
 800321c:	443a      	add	r2, r7
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003224:	443b      	add	r3, r7
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b31      	cmp	r3, #49	; 0x31
 800322a:	f77f af67 	ble.w	80030fc <main+0x1230>
            }
          }
        }
      }
      printf("couldnt track, id buffer too full :(");
 800322e:	482e      	ldr	r0, [pc, #184]	; (80032e8 <main+0x141c>)
 8003230:	f016 f9cc 	bl	80195cc <iprintf>
TeleDone:
		  CAN_Flag = 0;
 8003234:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <main+0x1420>)
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
	  }
	  //WriteToBuff(A, 2);
	  //HAL_Delay(1000);
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    /* USER CODE END WHILE */
    EndTime = HAL_GetTick();
 800323a:	f001 f9b5 	bl	80045a8 <HAL_GetTick>
 800323e:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003242:	443b      	add	r3, r7
 8003244:	6018      	str	r0, [r3, #0]
    if(StartTime - EndTime > LoopTime + 5){
 8003246:	f641 530c 	movw	r3, #7436	; 0x1d0c
 800324a:	443b      	add	r3, r7
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003252:	443b      	add	r3, r7
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	1ad2      	subs	r2, r2, r3
 8003258:	f641 5310 	movw	r3, #7440	; 0x1d10
 800325c:	443b      	add	r3, r7
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3305      	adds	r3, #5
 8003262:	429a      	cmp	r2, r3
 8003264:	d909      	bls.n	800327a <main+0x13ae>
      AllowedTele--;
 8003266:	f641 5364 	movw	r3, #7524	; 0x1d64
 800326a:	443b      	add	r3, r7
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3b01      	subs	r3, #1
 8003270:	f641 5264 	movw	r2, #7524	; 0x1d64
 8003274:	443a      	add	r2, r7
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	e017      	b.n	80032aa <main+0x13de>
    }else if(StartTime - EndTime < LoopTime){
 800327a:	f641 530c 	movw	r3, #7436	; 0x1d0c
 800327e:	443b      	add	r3, r7
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003286:	443b      	add	r3, r7
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f641 5210 	movw	r2, #7440	; 0x1d10
 8003290:	443a      	add	r2, r7
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d908      	bls.n	80032aa <main+0x13de>
      AllowedTele++;
 8003298:	f641 5364 	movw	r3, #7524	; 0x1d64
 800329c:	443b      	add	r3, r7
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	f641 5264 	movw	r2, #7524	; 0x1d64
 80032a6:	443a      	add	r2, r7
 80032a8:	6013      	str	r3, [r2, #0]
    }if (AllowedTele<1){
 80032aa:	f641 5364 	movw	r3, #7524	; 0x1d64
 80032ae:	443b      	add	r3, r7
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	dc04      	bgt.n	80032c0 <main+0x13f4>
    	AllowedTele = 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f641 5264 	movw	r2, #7524	; 0x1d64
 80032bc:	443a      	add	r2, r7
 80032be:	6013      	str	r3, [r2, #0]
  while (end_flag){
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <main+0x1424>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f47f a93d 	bne.w	8002544 <main+0x678>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80032ca:	2101      	movs	r1, #1
 80032cc:	4809      	ldr	r0, [pc, #36]	; (80032f4 <main+0x1428>)
 80032ce:	f004 feaa 	bl	8008026 <HAL_GPIO_TogglePin>
 80032d2:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	f507 57eb 	add.w	r7, r7, #7520	; 0x1d60
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032e2:	bf00      	nop
 80032e4:	240010b8 	.word	0x240010b8
 80032e8:	0801add8 	.word	0x0801add8
 80032ec:	24000200 	.word	0x24000200
 80032f0:	24000008 	.word	0x24000008
 80032f4:	58020400 	.word	0x58020400

080032f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b0cc      	sub	sp, #304	; 0x130
 80032fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003302:	224c      	movs	r2, #76	; 0x4c
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f016 f8af 	bl	801946a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800330c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003310:	2220      	movs	r2, #32
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f016 f8a8 	bl	801946a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800331a:	f107 0308 	add.w	r3, r7, #8
 800331e:	4618      	mov	r0, r3
 8003320:	23bc      	movs	r3, #188	; 0xbc
 8003322:	461a      	mov	r2, r3
 8003324:	2100      	movs	r1, #0
 8003326:	f016 f8a0 	bl	801946a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800332a:	2002      	movs	r0, #2
 800332c:	f006 f976 	bl	800961c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	4b71      	ldr	r3, [pc, #452]	; (80034fc <SystemClock_Config+0x204>)
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	4a70      	ldr	r2, [pc, #448]	; (80034fc <SystemClock_Config+0x204>)
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003342:	4b6e      	ldr	r3, [pc, #440]	; (80034fc <SystemClock_Config+0x204>)
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	f003 0201 	and.w	r2, r3, #1
 800334a:	1d3b      	adds	r3, r7, #4
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	4b6c      	ldr	r3, [pc, #432]	; (8003500 <SystemClock_Config+0x208>)
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	4a6b      	ldr	r2, [pc, #428]	; (8003500 <SystemClock_Config+0x208>)
 8003354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003358:	6193      	str	r3, [r2, #24]
 800335a:	4b69      	ldr	r3, [pc, #420]	; (8003500 <SystemClock_Config+0x208>)
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8003362:	1d3b      	adds	r3, r7, #4
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800336a:	bf00      	nop
 800336c:	4b64      	ldr	r3, [pc, #400]	; (8003500 <SystemClock_Config+0x208>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003378:	d1f8      	bne.n	800336c <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800337a:	f006 f8b5 	bl	80094e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 800337e:	f001 f941 	bl	8004604 <HAL_GetREVID>
 8003382:	4b60      	ldr	r3, [pc, #384]	; (8003504 <SystemClock_Config+0x20c>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a5f      	ldr	r2, [pc, #380]	; (8003504 <SystemClock_Config+0x20c>)
 8003388:	f043 0318 	orr.w	r3, r3, #24
 800338c:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800338e:	4b5d      	ldr	r3, [pc, #372]	; (8003504 <SystemClock_Config+0x20c>)
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	f023 0303 	bic.w	r3, r3, #3
 8003396:	4a5b      	ldr	r2, [pc, #364]	; (8003504 <SystemClock_Config+0x20c>)
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 800339e:	2325      	movs	r3, #37	; 0x25
 80033a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033b8:	2302      	movs	r3, #2
 80033ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033be:	2302      	movs	r3, #2
 80033c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80033c4:	2302      	movs	r3, #2
 80033c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 80033ca:	2340      	movs	r3, #64	; 0x40
 80033cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80033d0:	2302      	movs	r3, #2
 80033d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80033d6:	230a      	movs	r3, #10
 80033d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80033dc:	2302      	movs	r3, #2
 80033de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80033e2:	230c      	movs	r3, #12
 80033e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033f8:	4618      	mov	r0, r3
 80033fa:	f006 f99d 	bl	8009738 <HAL_RCC_OscConfig>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8003404:	f000 fbe8 	bl	8003bd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003408:	233f      	movs	r3, #63	; 0x3f
 800340a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800340e:	2303      	movs	r3, #3
 8003410:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003414:	2300      	movs	r3, #0
 8003416:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800341a:	2308      	movs	r3, #8
 800341c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003420:	2340      	movs	r3, #64	; 0x40
 8003422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003426:	2340      	movs	r3, #64	; 0x40
 8003428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800342c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003430:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003434:	2340      	movs	r3, #64	; 0x40
 8003436:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800343a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800343e:	2102      	movs	r1, #2
 8003440:	4618      	mov	r0, r3
 8003442:	f006 fd89 	bl	8009f58 <HAL_RCC_ClockConfig>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <SystemClock_Config+0x158>
  {
    Error_Handler();
 800344c:	f000 fbc4 	bl	8003bd8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8003450:	f107 0308 	add.w	r3, r7, #8
 8003454:	4a2c      	ldr	r2, [pc, #176]	; (8003508 <SystemClock_Config+0x210>)
 8003456:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003458:	f107 0308 	add.w	r3, r7, #8
 800345c:	2202      	movs	r2, #2
 800345e:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8003460:	f107 0308 	add.w	r3, r7, #8
 8003464:	220c      	movs	r2, #12
 8003466:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8003468:	f107 0308 	add.w	r3, r7, #8
 800346c:	2203      	movs	r2, #3
 800346e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003470:	f107 0308 	add.w	r3, r7, #8
 8003474:	2202      	movs	r2, #2
 8003476:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8003478:	f107 0308 	add.w	r3, r7, #8
 800347c:	2203      	movs	r2, #3
 800347e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003480:	f107 0308 	add.w	r3, r7, #8
 8003484:	22c0      	movs	r2, #192	; 0xc0
 8003486:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003488:	f107 0308 	add.w	r3, r7, #8
 800348c:	2220      	movs	r2, #32
 800348e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003490:	f107 0308 	add.w	r3, r7, #8
 8003494:	2200      	movs	r2, #0
 8003496:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8003498:	f107 0308 	add.w	r3, r7, #8
 800349c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034a0:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80034a2:	f107 0308 	add.w	r3, r7, #8
 80034a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034aa:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80034ac:	f107 0308 	add.w	r3, r7, #8
 80034b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b4:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034b6:	f107 0308 	add.w	r3, r7, #8
 80034ba:	2200      	movs	r2, #0
 80034bc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80034be:	f107 0308 	add.w	r3, r7, #8
 80034c2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80034c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80034ca:	f107 0308 	add.w	r3, r7, #8
 80034ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034d6:	f107 0308 	add.w	r3, r7, #8
 80034da:	4618      	mov	r0, r3
 80034dc:	f007 f8ec 	bl	800a6b8 <HAL_RCCEx_PeriphCLKConfig>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 80034e6:	f000 fb77 	bl	8003bd8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80034ea:	f006 feeb 	bl	800a2c4 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80034ee:	f006 f8cf 	bl	8009690 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80034f2:	bf00      	nop
 80034f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	58000400 	.word	0x58000400
 8003500:	58024800 	.word	0x58024800
 8003504:	58024400 	.word	0x58024400
 8003508:	00459002 	.word	0x00459002

0800350c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003510:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003512:	4a30      	ldr	r2, [pc, #192]	; (80035d4 <MX_FDCAN1_Init+0xc8>)
 8003514:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003516:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003518:	f44f 7240 	mov.w	r2, #768	; 0x300
 800351c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800351e:	4b2c      	ldr	r3, [pc, #176]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003520:	2200      	movs	r2, #0
 8003522:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003524:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003526:	2200      	movs	r2, #0
 8003528:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800352a:	4b29      	ldr	r3, [pc, #164]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 800352c:	2200      	movs	r2, #0
 800352e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003530:	4b27      	ldr	r3, [pc, #156]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003532:	2200      	movs	r2, #0
 8003534:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003536:	4b26      	ldr	r3, [pc, #152]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003538:	2201      	movs	r2, #1
 800353a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 23;
 800353c:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 800353e:	2217      	movs	r2, #23
 8003540:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8003542:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003544:	2238      	movs	r2, #56	; 0x38
 8003546:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 23;
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 800354a:	2217      	movs	r2, #23
 800354c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003550:	2201      	movs	r2, #1
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8003554:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003556:	2205      	movs	r2, #5
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 800355c:	220a      	movs	r2, #10
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8003560:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003562:	2205      	movs	r2, #5
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003566:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003568:	2200      	movs	r2, #0
 800356a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 800356c:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 800356e:	2202      	movs	r2, #2
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 8003572:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003574:	2202      	movs	r2, #2
 8003576:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8003578:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 800357a:	2240      	movs	r2, #64	; 0x40
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800357e:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003580:	2212      	movs	r2, #18
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003586:	2200      	movs	r2, #0
 8003588:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800358a:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 800358c:	2204      	movs	r2, #4
 800358e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003592:	2200      	movs	r2, #0
 8003594:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003596:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 8003598:	2204      	movs	r2, #4
 800359a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 800359e:	2200      	movs	r2, #0
 80035a0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80035a8:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 80035b6:	2204      	movs	r2, #4
 80035b8:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80035ba:	4805      	ldr	r0, [pc, #20]	; (80035d0 <MX_FDCAN1_Init+0xc4>)
 80035bc:	f003 fa16 	bl	80069ec <HAL_FDCAN_Init>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80035c6:	f000 fb07 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	24001514 	.word	0x24001514
 80035d4:	4000a000 	.word	0x4000a000

080035d8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80035dc:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 80035de:	4a2f      	ldr	r2, [pc, #188]	; (800369c <MX_FDCAN2_Init+0xc4>)
 80035e0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80035e2:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80035e8:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80035ee:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80035f4:	4b28      	ldr	r3, [pc, #160]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80035fa:	4b27      	ldr	r3, [pc, #156]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8003600:	4b25      	ldr	r3, [pc, #148]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003602:	2201      	movs	r2, #1
 8003604:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003608:	2201      	movs	r2, #1
 800360a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800360c:	4b22      	ldr	r3, [pc, #136]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 800360e:	2202      	movs	r2, #2
 8003610:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8003612:	4b21      	ldr	r3, [pc, #132]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003614:	2202      	movs	r2, #2
 8003616:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8003618:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 800361a:	2201      	movs	r2, #1
 800361c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800361e:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003620:	2201      	movs	r2, #1
 8003622:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8003624:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003626:	2201      	movs	r2, #1
 8003628:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800362a:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 800362c:	2201      	movs	r2, #1
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003632:	2200      	movs	r2, #0
 8003634:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8003636:	4b18      	ldr	r3, [pc, #96]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003638:	2200      	movs	r2, #0
 800363a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 800363e:	2200      	movs	r2, #0
 8003640:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003644:	2200      	movs	r2, #0
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003648:	4b13      	ldr	r3, [pc, #76]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 800364a:	2204      	movs	r2, #4
 800364c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003650:	2200      	movs	r2, #0
 8003652:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003654:	4b10      	ldr	r3, [pc, #64]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003656:	2204      	movs	r2, #4
 8003658:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800365a:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 800365c:	2200      	movs	r2, #0
 800365e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003662:	2204      	movs	r2, #4
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8003666:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003668:	2200      	movs	r2, #0
 800366a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800366c:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 800366e:	2200      	movs	r2, #0
 8003670:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003674:	2200      	movs	r2, #0
 8003676:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003678:	4b07      	ldr	r3, [pc, #28]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 800367a:	2200      	movs	r2, #0
 800367c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003680:	2204      	movs	r2, #4
 8003682:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003684:	4804      	ldr	r0, [pc, #16]	; (8003698 <MX_FDCAN2_Init+0xc0>)
 8003686:	f003 f9b1 	bl	80069ec <HAL_FDCAN_Init>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8003690:	f000 faa2 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8003694:	bf00      	nop
 8003696:	bd80      	pop	{r7, pc}
 8003698:	240016c8 	.word	0x240016c8
 800369c:	4000a400 	.word	0x4000a400

080036a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80036a6:	1d3b      	adds	r3, r7, #4
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80036b4:	2300      	movs	r3, #0
 80036b6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036b8:	4b26      	ldr	r3, [pc, #152]	; (8003754 <MX_RTC_Init+0xb4>)
 80036ba:	4a27      	ldr	r2, [pc, #156]	; (8003758 <MX_RTC_Init+0xb8>)
 80036bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036be:	4b25      	ldr	r3, [pc, #148]	; (8003754 <MX_RTC_Init+0xb4>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 80036c4:	4b23      	ldr	r3, [pc, #140]	; (8003754 <MX_RTC_Init+0xb4>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 80036ca:	4b22      	ldr	r3, [pc, #136]	; (8003754 <MX_RTC_Init+0xb4>)
 80036cc:	f244 0204 	movw	r2, #16388	; 0x4004
 80036d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <MX_RTC_Init+0xb4>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036d8:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <MX_RTC_Init+0xb4>)
 80036da:	2200      	movs	r2, #0
 80036dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <MX_RTC_Init+0xb4>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <MX_RTC_Init+0xb4>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036ea:	481a      	ldr	r0, [pc, #104]	; (8003754 <MX_RTC_Init+0xb4>)
 80036ec:	f008 fea8 	bl	800c440 <HAL_RTC_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80036f6:	f000 fa6f 	bl	8003bd8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800370e:	1d3b      	adds	r3, r7, #4
 8003710:	2200      	movs	r2, #0
 8003712:	4619      	mov	r1, r3
 8003714:	480f      	ldr	r0, [pc, #60]	; (8003754 <MX_RTC_Init+0xb4>)
 8003716:	f008 ff0b 	bl	800c530 <HAL_RTC_SetTime>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003720:	f000 fa5a 	bl	8003bd8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003724:	2301      	movs	r3, #1
 8003726:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003728:	2301      	movs	r3, #1
 800372a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800372c:	2301      	movs	r3, #1
 800372e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003734:	463b      	mov	r3, r7
 8003736:	2200      	movs	r2, #0
 8003738:	4619      	mov	r1, r3
 800373a:	4806      	ldr	r0, [pc, #24]	; (8003754 <MX_RTC_Init+0xb4>)
 800373c:	f008 fff2 	bl	800c724 <HAL_RTC_SetDate>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003746:	f000 fa47 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800374a:	bf00      	nop
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	240014f0 	.word	0x240014f0
 8003758:	58004000 	.word	0x58004000

0800375c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <MX_SDMMC1_SD_Init+0x3c>)
 8003762:	4a0e      	ldr	r2, [pc, #56]	; (800379c <MX_SDMMC1_SD_Init+0x40>)
 8003764:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003766:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <MX_SDMMC1_SD_Init+0x3c>)
 8003768:	2200      	movs	r2, #0
 800376a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <MX_SDMMC1_SD_Init+0x3c>)
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <MX_SDMMC1_SD_Init+0x3c>)
 8003774:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003778:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800377a:	4b07      	ldr	r3, [pc, #28]	; (8003798 <MX_SDMMC1_SD_Init+0x3c>)
 800377c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003780:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <MX_SDMMC1_SD_Init+0x3c>)
 8003784:	2200      	movs	r2, #0
 8003786:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <MX_SDMMC1_SD_Init+0x3c>)
 800378a:	2201      	movs	r2, #1
 800378c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	24001470 	.word	0x24001470
 800379c:	52007000 	.word	0x52007000

080037a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037a6:	4a28      	ldr	r2, [pc, #160]	; (8003848 <MX_SPI1_Init+0xa8>)
 80037a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037aa:	4b26      	ldr	r3, [pc, #152]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80037b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037b8:	4b22      	ldr	r3, [pc, #136]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037ba:	2207      	movs	r2, #7
 80037bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037be:	4b21      	ldr	r3, [pc, #132]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037c4:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80037d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80037d2:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037d4:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80037d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037da:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037e0:	4b18      	ldr	r3, [pc, #96]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e6:	4b17      	ldr	r3, [pc, #92]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80037ec:	4b15      	ldr	r3, [pc, #84]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80037f2:	4b14      	ldr	r3, [pc, #80]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037f8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <MX_SPI1_Init+0xa4>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003800:	4b10      	ldr	r3, [pc, #64]	; (8003844 <MX_SPI1_Init+0xa4>)
 8003802:	2200      	movs	r2, #0
 8003804:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003806:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <MX_SPI1_Init+0xa4>)
 8003808:	2200      	movs	r2, #0
 800380a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <MX_SPI1_Init+0xa4>)
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003812:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <MX_SPI1_Init+0xa4>)
 8003814:	2200      	movs	r2, #0
 8003816:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <MX_SPI1_Init+0xa4>)
 800381a:	2200      	movs	r2, #0
 800381c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <MX_SPI1_Init+0xa4>)
 8003820:	2200      	movs	r2, #0
 8003822:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <MX_SPI1_Init+0xa4>)
 8003826:	2200      	movs	r2, #0
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <MX_SPI1_Init+0xa4>)
 800382c:	2200      	movs	r2, #0
 800382e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003830:	4804      	ldr	r0, [pc, #16]	; (8003844 <MX_SPI1_Init+0xa4>)
 8003832:	f00b f89f 	bl	800e974 <HAL_SPI_Init>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800383c:	f000 f9cc 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003840:	bf00      	nop
 8003842:	bd80      	pop	{r7, pc}
 8003844:	24001640 	.word	0x24001640
 8003848:	40013000 	.word	0x40013000

0800384c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8003850:	4b22      	ldr	r3, [pc, #136]	; (80038dc <MX_UART8_Init+0x90>)
 8003852:	4a23      	ldr	r2, [pc, #140]	; (80038e0 <MX_UART8_Init+0x94>)
 8003854:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8003856:	4b21      	ldr	r3, [pc, #132]	; (80038dc <MX_UART8_Init+0x90>)
 8003858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800385c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800385e:	4b1f      	ldr	r3, [pc, #124]	; (80038dc <MX_UART8_Init+0x90>)
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <MX_UART8_Init+0x90>)
 8003866:	2200      	movs	r2, #0
 8003868:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800386a:	4b1c      	ldr	r3, [pc, #112]	; (80038dc <MX_UART8_Init+0x90>)
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8003870:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <MX_UART8_Init+0x90>)
 8003872:	220c      	movs	r2, #12
 8003874:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003876:	4b19      	ldr	r3, [pc, #100]	; (80038dc <MX_UART8_Init+0x90>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800387c:	4b17      	ldr	r3, [pc, #92]	; (80038dc <MX_UART8_Init+0x90>)
 800387e:	2200      	movs	r2, #0
 8003880:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003882:	4b16      	ldr	r3, [pc, #88]	; (80038dc <MX_UART8_Init+0x90>)
 8003884:	2200      	movs	r2, #0
 8003886:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003888:	4b14      	ldr	r3, [pc, #80]	; (80038dc <MX_UART8_Init+0x90>)
 800388a:	2200      	movs	r2, #0
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800388e:	4b13      	ldr	r3, [pc, #76]	; (80038dc <MX_UART8_Init+0x90>)
 8003890:	2200      	movs	r2, #0
 8003892:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003894:	4811      	ldr	r0, [pc, #68]	; (80038dc <MX_UART8_Init+0x90>)
 8003896:	f00c f91e 	bl	800fad6 <HAL_UART_Init>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80038a0:	f000 f99a 	bl	8003bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038a4:	2100      	movs	r1, #0
 80038a6:	480d      	ldr	r0, [pc, #52]	; (80038dc <MX_UART8_Init+0x90>)
 80038a8:	f00d faae 	bl	8010e08 <HAL_UARTEx_SetTxFifoThreshold>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80038b2:	f000 f991 	bl	8003bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038b6:	2100      	movs	r1, #0
 80038b8:	4808      	ldr	r0, [pc, #32]	; (80038dc <MX_UART8_Init+0x90>)
 80038ba:	f00d fae3 	bl	8010e84 <HAL_UARTEx_SetRxFifoThreshold>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80038c4:	f000 f988 	bl	8003bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80038c8:	4804      	ldr	r0, [pc, #16]	; (80038dc <MX_UART8_Init+0x90>)
 80038ca:	f00d fa64 	bl	8010d96 <HAL_UARTEx_DisableFifoMode>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80038d4:	f000 f980 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80038d8:	bf00      	nop
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	240015b4 	.word	0x240015b4
 80038e0:	40007c00 	.word	0x40007c00

080038e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80038e8:	4b22      	ldr	r3, [pc, #136]	; (8003974 <MX_USART3_UART_Init+0x90>)
 80038ea:	4a23      	ldr	r2, [pc, #140]	; (8003978 <MX_USART3_UART_Init+0x94>)
 80038ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80038ee:	4b21      	ldr	r3, [pc, #132]	; (8003974 <MX_USART3_UART_Init+0x90>)
 80038f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80038f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80038f6:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <MX_USART3_UART_Init+0x90>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <MX_USART3_UART_Init+0x90>)
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003902:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <MX_USART3_UART_Init+0x90>)
 8003904:	2200      	movs	r2, #0
 8003906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003908:	4b1a      	ldr	r3, [pc, #104]	; (8003974 <MX_USART3_UART_Init+0x90>)
 800390a:	220c      	movs	r2, #12
 800390c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800390e:	4b19      	ldr	r3, [pc, #100]	; (8003974 <MX_USART3_UART_Init+0x90>)
 8003910:	2200      	movs	r2, #0
 8003912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003914:	4b17      	ldr	r3, [pc, #92]	; (8003974 <MX_USART3_UART_Init+0x90>)
 8003916:	2200      	movs	r2, #0
 8003918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <MX_USART3_UART_Init+0x90>)
 800391c:	2200      	movs	r2, #0
 800391e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003920:	4b14      	ldr	r3, [pc, #80]	; (8003974 <MX_USART3_UART_Init+0x90>)
 8003922:	2200      	movs	r2, #0
 8003924:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003926:	4b13      	ldr	r3, [pc, #76]	; (8003974 <MX_USART3_UART_Init+0x90>)
 8003928:	2200      	movs	r2, #0
 800392a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800392c:	4811      	ldr	r0, [pc, #68]	; (8003974 <MX_USART3_UART_Init+0x90>)
 800392e:	f00c f8d2 	bl	800fad6 <HAL_UART_Init>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003938:	f000 f94e 	bl	8003bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800393c:	2100      	movs	r1, #0
 800393e:	480d      	ldr	r0, [pc, #52]	; (8003974 <MX_USART3_UART_Init+0x90>)
 8003940:	f00d fa62 	bl	8010e08 <HAL_UARTEx_SetTxFifoThreshold>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800394a:	f000 f945 	bl	8003bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800394e:	2100      	movs	r1, #0
 8003950:	4808      	ldr	r0, [pc, #32]	; (8003974 <MX_USART3_UART_Init+0x90>)
 8003952:	f00d fa97 	bl	8010e84 <HAL_UARTEx_SetRxFifoThreshold>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800395c:	f000 f93c 	bl	8003bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003960:	4804      	ldr	r0, [pc, #16]	; (8003974 <MX_USART3_UART_Init+0x90>)
 8003962:	f00d fa18 	bl	8010d96 <HAL_UARTEx_DisableFifoMode>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800396c:	f000 f934 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003970:	bf00      	nop
 8003972:	bd80      	pop	{r7, pc}
 8003974:	240013c4 	.word	0x240013c4
 8003978:	40004800 	.word	0x40004800

0800397c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003982:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <MX_DMA_Init+0x3c>)
 8003984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003988:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <MX_DMA_Init+0x3c>)
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <MX_DMA_Init+0x3c>)
 8003994:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80039a0:	2200      	movs	r2, #0
 80039a2:	2100      	movs	r1, #0
 80039a4:	200c      	movs	r0, #12
 80039a6:	f000 ff14 	bl	80047d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80039aa:	200c      	movs	r0, #12
 80039ac:	f000 ff2b 	bl	8004806 <HAL_NVIC_EnableIRQ>

}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	58024400 	.word	0x58024400

080039bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08c      	sub	sp, #48	; 0x30
 80039c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c2:	f107 031c 	add.w	r3, r7, #28
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	609a      	str	r2, [r3, #8]
 80039ce:	60da      	str	r2, [r3, #12]
 80039d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039d2:	4b6d      	ldr	r3, [pc, #436]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 80039d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039d8:	4a6b      	ldr	r2, [pc, #428]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 80039da:	f043 0310 	orr.w	r3, r3, #16
 80039de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039e2:	4b69      	ldr	r3, [pc, #420]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 80039e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039f0:	4b65      	ldr	r3, [pc, #404]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 80039f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f6:	4a64      	ldr	r2, [pc, #400]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 80039f8:	f043 0304 	orr.w	r3, r3, #4
 80039fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a00:	4b61      	ldr	r3, [pc, #388]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 8003a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a0e:	4b5e      	ldr	r3, [pc, #376]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 8003a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a14:	4a5c      	ldr	r2, [pc, #368]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 8003a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a1e:	4b5a      	ldr	r3, [pc, #360]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 8003a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2c:	4b56      	ldr	r3, [pc, #344]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 8003a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a32:	4a55      	ldr	r2, [pc, #340]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a3c:	4b52      	ldr	r3, [pc, #328]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 8003a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a4a:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 8003a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a50:	4a4d      	ldr	r2, [pc, #308]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 8003a52:	f043 0302 	orr.w	r3, r3, #2
 8003a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a5a:	4b4b      	ldr	r3, [pc, #300]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 8003a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a68:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 8003a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a6e:	4a46      	ldr	r2, [pc, #280]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 8003a70:	f043 0308 	orr.w	r3, r3, #8
 8003a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a78:	4b43      	ldr	r3, [pc, #268]	; (8003b88 <MX_GPIO_Init+0x1cc>)
 8003a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8003a86:	2200      	movs	r2, #0
 8003a88:	210c      	movs	r1, #12
 8003a8a:	4840      	ldr	r0, [pc, #256]	; (8003b8c <MX_GPIO_Init+0x1d0>)
 8003a8c:	f004 fab2 	bl	8007ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8003a90:	2200      	movs	r2, #0
 8003a92:	2103      	movs	r1, #3
 8003a94:	483e      	ldr	r0, [pc, #248]	; (8003b90 <MX_GPIO_Init+0x1d4>)
 8003a96:	f004 faad 	bl	8007ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	483d      	ldr	r0, [pc, #244]	; (8003b94 <MX_GPIO_Init+0x1d8>)
 8003aa0:	f004 faa8 	bl	8007ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003aaa:	483b      	ldr	r0, [pc, #236]	; (8003b98 <MX_GPIO_Init+0x1dc>)
 8003aac:	f004 faa2 	bl	8007ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ac0:	f107 031c 	add.w	r3, r7, #28
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4831      	ldr	r0, [pc, #196]	; (8003b8c <MX_GPIO_Init+0x1d0>)
 8003ac8:	f004 f8cc 	bl	8007c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8003acc:	2303      	movs	r3, #3
 8003ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003adc:	f107 031c 	add.w	r3, r7, #28
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	482b      	ldr	r0, [pc, #172]	; (8003b90 <MX_GPIO_Init+0x1d4>)
 8003ae4:	f004 f8be 	bl	8007c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8003ae8:	2304      	movs	r3, #4
 8003aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <MX_GPIO_Init+0x1e0>)
 8003aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003af4:	f107 031c 	add.w	r3, r7, #28
 8003af8:	4619      	mov	r1, r3
 8003afa:	4825      	ldr	r0, [pc, #148]	; (8003b90 <MX_GPIO_Init+0x1d4>)
 8003afc:	f004 f8b2 	bl	8007c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003b00:	2301      	movs	r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b04:	2301      	movs	r3, #1
 8003b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003b10:	f107 031c 	add.w	r3, r7, #28
 8003b14:	4619      	mov	r1, r3
 8003b16:	481f      	ldr	r0, [pc, #124]	; (8003b94 <MX_GPIO_Init+0x1d8>)
 8003b18:	f004 f8a4 	bl	8007c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8003b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b22:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <MX_GPIO_Init+0x1e0>)
 8003b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8003b2a:	f107 031c 	add.w	r3, r7, #28
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4816      	ldr	r0, [pc, #88]	; (8003b8c <MX_GPIO_Init+0x1d0>)
 8003b32:	f004 f897 	bl	8007c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8003b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8003b48:	f107 031c 	add.w	r3, r7, #28
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4812      	ldr	r0, [pc, #72]	; (8003b98 <MX_GPIO_Init+0x1dc>)
 8003b50:	f004 f888 	bl	8007c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8003b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8003b62:	f107 031c 	add.w	r3, r7, #28
 8003b66:	4619      	mov	r1, r3
 8003b68:	4809      	ldr	r0, [pc, #36]	; (8003b90 <MX_GPIO_Init+0x1d4>)
 8003b6a:	f004 f87b 	bl	8007c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2100      	movs	r1, #0
 8003b72:	2017      	movs	r0, #23
 8003b74:	f000 fe2d 	bl	80047d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b78:	2017      	movs	r0, #23
 8003b7a:	f000 fe44 	bl	8004806 <HAL_NVIC_EnableIRQ>

}
 8003b7e:	bf00      	nop
 8003b80:	3730      	adds	r7, #48	; 0x30
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	58024400 	.word	0x58024400
 8003b8c:	58021000 	.word	0x58021000
 8003b90:	58020000 	.word	0x58020000
 8003b94:	58020400 	.word	0x58020400
 8003b98:	58020c00 	.word	0x58020c00
 8003b9c:	11110000 	.word	0x11110000

08003ba0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 8003baa:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <HAL_GPIO_EXTI_Callback+0x1c>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]

}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	24000008 	.word	0x24000008

08003bc0 <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <HAL_PWR_PVDCallback+0x14>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	24000008 	.word	0x24000008

08003bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bdc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8003bde:	4802      	ldr	r0, [pc, #8]	; (8003be8 <Error_Handler+0x10>)
 8003be0:	f015 fd68 	bl	80196b4 <puts>
 8003be4:	e7fb      	b.n	8003bde <Error_Handler+0x6>
 8003be6:	bf00      	nop
 8003be8:	0801ae20 	.word	0x0801ae20

08003bec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003bf4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003bf8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d013      	beq.n	8003c2c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003c04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c08:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003c0c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00b      	beq.n	8003c2c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003c14:	e000      	b.n	8003c18 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003c16:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003c18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f9      	beq.n	8003c16 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003c22:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003c2c:	687b      	ldr	r3, [r7, #4]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b086      	sub	sp, #24
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
  int i=0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	e009      	b.n	8003c64 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	60ba      	str	r2, [r7, #8]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff ffc7 	bl	8003bec <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	dbf1      	blt.n	8003c50 <_write+0x16>
  return len;
 8003c6c:	687b      	ldr	r3, [r7, #4]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8003c7e:	f107 0308 	add.w	r3, r7, #8
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <HAL_MspInit+0x60>)
 8003c8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <HAL_MspInit+0x60>)
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c98:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <HAL_MspInit+0x60>)
 8003c9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	607b      	str	r3, [r7, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2100      	movs	r1, #0
 8003caa:	2001      	movs	r0, #1
 8003cac:	f000 fd91 	bl	80047d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	f000 fda8 	bl	8004806 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8003cb6:	23c0      	movs	r3, #192	; 0xc0
 8003cb8:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8003cba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003cbe:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003cc0:	f107 0308 	add.w	r3, r7, #8
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f005 fc1f 	bl	8009508 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8003cca:	f005 fc97 	bl	80095fc <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	58024400 	.word	0x58024400

08003cdc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	; 0x30
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce4:	f107 031c 	add.w	r3, r7, #28
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a48      	ldr	r2, [pc, #288]	; (8003e1c <HAL_FDCAN_MspInit+0x140>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d14e      	bne.n	8003d9c <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003cfe:	4b48      	ldr	r3, [pc, #288]	; (8003e20 <HAL_FDCAN_MspInit+0x144>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3301      	adds	r3, #1
 8003d04:	4a46      	ldr	r2, [pc, #280]	; (8003e20 <HAL_FDCAN_MspInit+0x144>)
 8003d06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003d08:	4b45      	ldr	r3, [pc, #276]	; (8003e20 <HAL_FDCAN_MspInit+0x144>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d10e      	bne.n	8003d2e <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003d10:	4b44      	ldr	r3, [pc, #272]	; (8003e24 <HAL_FDCAN_MspInit+0x148>)
 8003d12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d16:	4a43      	ldr	r2, [pc, #268]	; (8003e24 <HAL_FDCAN_MspInit+0x148>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d20:	4b40      	ldr	r3, [pc, #256]	; (8003e24 <HAL_FDCAN_MspInit+0x148>)
 8003d22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2e:	4b3d      	ldr	r3, [pc, #244]	; (8003e24 <HAL_FDCAN_MspInit+0x148>)
 8003d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d34:	4a3b      	ldr	r2, [pc, #236]	; (8003e24 <HAL_FDCAN_MspInit+0x148>)
 8003d36:	f043 0302 	orr.w	r3, r3, #2
 8003d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d3e:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <HAL_FDCAN_MspInit+0x148>)
 8003d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d52:	2302      	movs	r3, #2
 8003d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003d5e:	2309      	movs	r3, #9
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d62:	f107 031c 	add.w	r3, r7, #28
 8003d66:	4619      	mov	r1, r3
 8003d68:	482f      	ldr	r0, [pc, #188]	; (8003e28 <HAL_FDCAN_MspInit+0x14c>)
 8003d6a:	f003 ff7b 	bl	8007c64 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8003d6e:	2040      	movs	r0, #64	; 0x40
 8003d70:	f004 f98e 	bl	8008090 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8003d74:	2080      	movs	r0, #128	; 0x80
 8003d76:	f004 f98b 	bl	8008090 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	2013      	movs	r0, #19
 8003d80:	f000 fd27 	bl	80047d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003d84:	2013      	movs	r0, #19
 8003d86:	f000 fd3e 	bl	8004806 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	2015      	movs	r0, #21
 8003d90:	f000 fd1f 	bl	80047d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8003d94:	2015      	movs	r0, #21
 8003d96:	f000 fd36 	bl	8004806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8003d9a:	e03b      	b.n	8003e14 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a22      	ldr	r2, [pc, #136]	; (8003e2c <HAL_FDCAN_MspInit+0x150>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d136      	bne.n	8003e14 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003da6:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <HAL_FDCAN_MspInit+0x144>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3301      	adds	r3, #1
 8003dac:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <HAL_FDCAN_MspInit+0x144>)
 8003dae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003db0:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <HAL_FDCAN_MspInit+0x144>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d10e      	bne.n	8003dd6 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003db8:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <HAL_FDCAN_MspInit+0x148>)
 8003dba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003dbe:	4a19      	ldr	r2, [pc, #100]	; (8003e24 <HAL_FDCAN_MspInit+0x148>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003dc8:	4b16      	ldr	r3, [pc, #88]	; (8003e24 <HAL_FDCAN_MspInit+0x148>)
 8003dca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <HAL_FDCAN_MspInit+0x148>)
 8003dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ddc:	4a11      	ldr	r2, [pc, #68]	; (8003e24 <HAL_FDCAN_MspInit+0x148>)
 8003dde:	f043 0302 	orr.w	r3, r3, #2
 8003de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003de6:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <HAL_FDCAN_MspInit+0x148>)
 8003de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003df4:	2360      	movs	r3, #96	; 0x60
 8003df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e00:	2300      	movs	r3, #0
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003e04:	2309      	movs	r3, #9
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e08:	f107 031c 	add.w	r3, r7, #28
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4806      	ldr	r0, [pc, #24]	; (8003e28 <HAL_FDCAN_MspInit+0x14c>)
 8003e10:	f003 ff28 	bl	8007c64 <HAL_GPIO_Init>
}
 8003e14:	bf00      	nop
 8003e16:	3730      	adds	r7, #48	; 0x30
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	4000a000 	.word	0x4000a000
 8003e20:	24000b48 	.word	0x24000b48
 8003e24:	58024400 	.word	0x58024400
 8003e28:	58020400 	.word	0x58020400
 8003e2c:	4000a400 	.word	0x4000a400

08003e30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a07      	ldr	r2, [pc, #28]	; (8003e5c <HAL_RTC_MspInit+0x2c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d105      	bne.n	8003e4e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <HAL_RTC_MspInit+0x30>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	4a06      	ldr	r2, [pc, #24]	; (8003e60 <HAL_RTC_MspInit+0x30>)
 8003e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e4c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	58004000 	.word	0x58004000
 8003e60:	58024400 	.word	0x58024400

08003e64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e6c:	f107 0314 	add.w	r3, r7, #20
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	60da      	str	r2, [r3, #12]
 8003e7a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2e      	ldr	r2, [pc, #184]	; (8003f3c <HAL_SD_MspInit+0xd8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d155      	bne.n	8003f32 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003e86:	4b2e      	ldr	r3, [pc, #184]	; (8003f40 <HAL_SD_MspInit+0xdc>)
 8003e88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003e8c:	4a2c      	ldr	r2, [pc, #176]	; (8003f40 <HAL_SD_MspInit+0xdc>)
 8003e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e92:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003e96:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <HAL_SD_MspInit+0xdc>)
 8003e98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ea4:	4b26      	ldr	r3, [pc, #152]	; (8003f40 <HAL_SD_MspInit+0xdc>)
 8003ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eaa:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <HAL_SD_MspInit+0xdc>)
 8003eac:	f043 0304 	orr.w	r3, r3, #4
 8003eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003eb4:	4b22      	ldr	r3, [pc, #136]	; (8003f40 <HAL_SD_MspInit+0xdc>)
 8003eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ec2:	4b1f      	ldr	r3, [pc, #124]	; (8003f40 <HAL_SD_MspInit+0xdc>)
 8003ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ec8:	4a1d      	ldr	r2, [pc, #116]	; (8003f40 <HAL_SD_MspInit+0xdc>)
 8003eca:	f043 0308 	orr.w	r3, r3, #8
 8003ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ed2:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <HAL_SD_MspInit+0xdc>)
 8003ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003ee0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003ee4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003ef2:	230c      	movs	r3, #12
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ef6:	f107 0314 	add.w	r3, r7, #20
 8003efa:	4619      	mov	r1, r3
 8003efc:	4811      	ldr	r0, [pc, #68]	; (8003f44 <HAL_SD_MspInit+0xe0>)
 8003efe:	f003 feb1 	bl	8007c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f02:	2304      	movs	r3, #4
 8003f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f06:	2302      	movs	r3, #2
 8003f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003f12:	230c      	movs	r3, #12
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f16:	f107 0314 	add.w	r3, r7, #20
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	480a      	ldr	r0, [pc, #40]	; (8003f48 <HAL_SD_MspInit+0xe4>)
 8003f1e:	f003 fea1 	bl	8007c64 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003f22:	2200      	movs	r2, #0
 8003f24:	2100      	movs	r1, #0
 8003f26:	2031      	movs	r0, #49	; 0x31
 8003f28:	f000 fc53 	bl	80047d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003f2c:	2031      	movs	r0, #49	; 0x31
 8003f2e:	f000 fc6a 	bl	8004806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003f32:	bf00      	nop
 8003f34:	3728      	adds	r7, #40	; 0x28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	52007000 	.word	0x52007000
 8003f40:	58024400 	.word	0x58024400
 8003f44:	58020800 	.word	0x58020800
 8003f48:	58020c00 	.word	0x58020c00

08003f4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08a      	sub	sp, #40	; 0x28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f54:	f107 0314 	add.w	r3, r7, #20
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1a      	ldr	r2, [pc, #104]	; (8003fd4 <HAL_SPI_MspInit+0x88>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d12d      	bne.n	8003fca <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f6e:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <HAL_SPI_MspInit+0x8c>)
 8003f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f74:	4a18      	ldr	r2, [pc, #96]	; (8003fd8 <HAL_SPI_MspInit+0x8c>)
 8003f76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f7e:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <HAL_SPI_MspInit+0x8c>)
 8003f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_SPI_MspInit+0x8c>)
 8003f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f92:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <HAL_SPI_MspInit+0x8c>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <HAL_SPI_MspInit+0x8c>)
 8003f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003faa:	23e0      	movs	r3, #224	; 0xe0
 8003fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fba:	2305      	movs	r3, #5
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fbe:	f107 0314 	add.w	r3, r7, #20
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4805      	ldr	r0, [pc, #20]	; (8003fdc <HAL_SPI_MspInit+0x90>)
 8003fc6:	f003 fe4d 	bl	8007c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003fca:	bf00      	nop
 8003fcc:	3728      	adds	r7, #40	; 0x28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40013000 	.word	0x40013000
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	58020000 	.word	0x58020000

08003fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08c      	sub	sp, #48	; 0x30
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe8:	f107 031c 	add.w	r3, r7, #28
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a4b      	ldr	r2, [pc, #300]	; (800412c <HAL_UART_MspInit+0x14c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d12e      	bne.n	8004060 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8004002:	4b4b      	ldr	r3, [pc, #300]	; (8004130 <HAL_UART_MspInit+0x150>)
 8004004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004008:	4a49      	ldr	r2, [pc, #292]	; (8004130 <HAL_UART_MspInit+0x150>)
 800400a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800400e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004012:	4b47      	ldr	r3, [pc, #284]	; (8004130 <HAL_UART_MspInit+0x150>)
 8004014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004020:	4b43      	ldr	r3, [pc, #268]	; (8004130 <HAL_UART_MspInit+0x150>)
 8004022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004026:	4a42      	ldr	r2, [pc, #264]	; (8004130 <HAL_UART_MspInit+0x150>)
 8004028:	f043 0310 	orr.w	r3, r3, #16
 800402c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004030:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <HAL_UART_MspInit+0x150>)
 8004032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800403e:	2303      	movs	r3, #3
 8004040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004042:	2302      	movs	r3, #2
 8004044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004046:	2300      	movs	r3, #0
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404a:	2300      	movs	r3, #0
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800404e:	2308      	movs	r3, #8
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004052:	f107 031c 	add.w	r3, r7, #28
 8004056:	4619      	mov	r1, r3
 8004058:	4836      	ldr	r0, [pc, #216]	; (8004134 <HAL_UART_MspInit+0x154>)
 800405a:	f003 fe03 	bl	8007c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800405e:	e061      	b.n	8004124 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a34      	ldr	r2, [pc, #208]	; (8004138 <HAL_UART_MspInit+0x158>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d15c      	bne.n	8004124 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 800406a:	4b31      	ldr	r3, [pc, #196]	; (8004130 <HAL_UART_MspInit+0x150>)
 800406c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004070:	4a2f      	ldr	r2, [pc, #188]	; (8004130 <HAL_UART_MspInit+0x150>)
 8004072:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004076:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800407a:	4b2d      	ldr	r3, [pc, #180]	; (8004130 <HAL_UART_MspInit+0x150>)
 800407c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004088:	4b29      	ldr	r3, [pc, #164]	; (8004130 <HAL_UART_MspInit+0x150>)
 800408a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800408e:	4a28      	ldr	r2, [pc, #160]	; (8004130 <HAL_UART_MspInit+0x150>)
 8004090:	f043 0308 	orr.w	r3, r3, #8
 8004094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_UART_MspInit+0x150>)
 800409a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ac:	2302      	movs	r3, #2
 80040ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040b8:	2307      	movs	r3, #7
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040bc:	f107 031c 	add.w	r3, r7, #28
 80040c0:	4619      	mov	r1, r3
 80040c2:	481e      	ldr	r0, [pc, #120]	; (800413c <HAL_UART_MspInit+0x15c>)
 80040c4:	f003 fdce 	bl	8007c64 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80040c8:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <HAL_UART_MspInit+0x160>)
 80040ca:	4a1e      	ldr	r2, [pc, #120]	; (8004144 <HAL_UART_MspInit+0x164>)
 80040cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80040ce:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <HAL_UART_MspInit+0x160>)
 80040d0:	222d      	movs	r2, #45	; 0x2d
 80040d2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040d4:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_UART_MspInit+0x160>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040da:	4b19      	ldr	r3, [pc, #100]	; (8004140 <HAL_UART_MspInit+0x160>)
 80040dc:	2200      	movs	r2, #0
 80040de:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040e0:	4b17      	ldr	r3, [pc, #92]	; (8004140 <HAL_UART_MspInit+0x160>)
 80040e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040e6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <HAL_UART_MspInit+0x160>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040ee:	4b14      	ldr	r3, [pc, #80]	; (8004140 <HAL_UART_MspInit+0x160>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80040f4:	4b12      	ldr	r3, [pc, #72]	; (8004140 <HAL_UART_MspInit+0x160>)
 80040f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040fa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <HAL_UART_MspInit+0x160>)
 80040fe:	2200      	movs	r2, #0
 8004100:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004102:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <HAL_UART_MspInit+0x160>)
 8004104:	2200      	movs	r2, #0
 8004106:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004108:	480d      	ldr	r0, [pc, #52]	; (8004140 <HAL_UART_MspInit+0x160>)
 800410a:	f000 fb97 	bl	800483c <HAL_DMA_Init>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8004114:	f7ff fd60 	bl	8003bd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a09      	ldr	r2, [pc, #36]	; (8004140 <HAL_UART_MspInit+0x160>)
 800411c:	679a      	str	r2, [r3, #120]	; 0x78
 800411e:	4a08      	ldr	r2, [pc, #32]	; (8004140 <HAL_UART_MspInit+0x160>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004124:	bf00      	nop
 8004126:	3730      	adds	r7, #48	; 0x30
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40007c00 	.word	0x40007c00
 8004130:	58024400 	.word	0x58024400
 8004134:	58021000 	.word	0x58021000
 8004138:	40004800 	.word	0x40004800
 800413c:	58020c00 	.word	0x58020c00
 8004140:	2400134c 	.word	0x2400134c
 8004144:	40020028 	.word	0x40020028

08004148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800414c:	f006 fa98 	bl	800a680 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004150:	e7fe      	b.n	8004150 <NMI_Handler+0x8>

08004152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004156:	e7fe      	b.n	8004156 <HardFault_Handler+0x4>

08004158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800415c:	e7fe      	b.n	800415c <MemManage_Handler+0x4>

0800415e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800415e:	b480      	push	{r7}
 8004160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004162:	e7fe      	b.n	8004162 <BusFault_Handler+0x4>

08004164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004168:	e7fe      	b.n	8004168 <UsageFault_Handler+0x4>

0800416a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800416a:	b480      	push	{r7}
 800416c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004198:	f000 f9f2 	bl	8004580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800419c:	bf00      	nop
 800419e:	bd80      	pop	{r7, pc}

080041a0 <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 80041a4:	f005 fa84 	bl	80096b0 <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 80041a8:	bf00      	nop
 80041aa:	bd80      	pop	{r7, pc}

080041ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80041b0:	4802      	ldr	r0, [pc, #8]	; (80041bc <DMA1_Stream1_IRQHandler+0x10>)
 80041b2:	f001 f909 	bl	80053c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	2400134c 	.word	0x2400134c

080041c0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80041c4:	4802      	ldr	r0, [pc, #8]	; (80041d0 <FDCAN1_IT0_IRQHandler+0x10>)
 80041c6:	f003 f8bd 	bl	8007344 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	24001514 	.word	0x24001514

080041d4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80041d8:	4802      	ldr	r0, [pc, #8]	; (80041e4 <FDCAN1_IT1_IRQHandler+0x10>)
 80041da:	f003 f8b3 	bl	8007344 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	24001514 	.word	0x24001514

080041e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80041ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80041f0:	f003 ff34 	bl	800805c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80041f4:	bf00      	nop
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80041fc:	4802      	ldr	r0, [pc, #8]	; (8004208 <SDMMC1_IRQHandler+0x10>)
 80041fe:	f009 f9c1 	bl	800d584 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	24001470 	.word	0x24001470

0800420c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004210:	4802      	ldr	r0, [pc, #8]	; (800421c <OTG_FS_IRQHandler+0x10>)
 8004212:	f004 f8b8 	bl	8008386 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	240020a4 	.word	0x240020a4

08004220 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	e00a      	b.n	8004248 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004232:	f3af 8000 	nop.w
 8004236:	4601      	mov	r1, r0
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	60ba      	str	r2, [r7, #8]
 800423e:	b2ca      	uxtb	r2, r1
 8004240:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	3301      	adds	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	dbf0      	blt.n	8004232 <_read+0x12>
	}

return len;
 8004250:	687b      	ldr	r3, [r7, #4]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <_close>:
	}
	return len;
}

int _close(int file)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
	return -1;
 8004262:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004282:	605a      	str	r2, [r3, #4]
	return 0;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <_isatty>:

int _isatty(int file)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
	return 1;
 800429a:	2301      	movs	r3, #1
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
	return 0;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <_sbrk+0x5c>)
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <_sbrk+0x60>)
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042d8:	4b13      	ldr	r3, [pc, #76]	; (8004328 <_sbrk+0x64>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <_sbrk+0x64>)
 80042e2:	4a12      	ldr	r2, [pc, #72]	; (800432c <_sbrk+0x68>)
 80042e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <_sbrk+0x64>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d207      	bcs.n	8004304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042f4:	f015 f874 	bl	80193e0 <__errno>
 80042f8:	4602      	mov	r2, r0
 80042fa:	230c      	movs	r3, #12
 80042fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	e009      	b.n	8004318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <_sbrk+0x64>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800430a:	4b07      	ldr	r3, [pc, #28]	; (8004328 <_sbrk+0x64>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4413      	add	r3, r2
 8004312:	4a05      	ldr	r2, [pc, #20]	; (8004328 <_sbrk+0x64>)
 8004314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	24080000 	.word	0x24080000
 8004324:	00000400 	.word	0x00000400
 8004328:	24000b4c 	.word	0x24000b4c
 800432c:	240024b0 	.word	0x240024b0

08004330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004334:	4b39      	ldr	r3, [pc, #228]	; (800441c <SystemInit+0xec>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	4a38      	ldr	r2, [pc, #224]	; (800441c <SystemInit+0xec>)
 800433c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004344:	4b36      	ldr	r3, [pc, #216]	; (8004420 <SystemInit+0xf0>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	2b06      	cmp	r3, #6
 800434e:	d807      	bhi.n	8004360 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004350:	4b33      	ldr	r3, [pc, #204]	; (8004420 <SystemInit+0xf0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f023 030f 	bic.w	r3, r3, #15
 8004358:	4a31      	ldr	r2, [pc, #196]	; (8004420 <SystemInit+0xf0>)
 800435a:	f043 0307 	orr.w	r3, r3, #7
 800435e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004360:	4b30      	ldr	r3, [pc, #192]	; (8004424 <SystemInit+0xf4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2f      	ldr	r2, [pc, #188]	; (8004424 <SystemInit+0xf4>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800436c:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <SystemInit+0xf4>)
 800436e:	2200      	movs	r2, #0
 8004370:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004372:	4b2c      	ldr	r3, [pc, #176]	; (8004424 <SystemInit+0xf4>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	492b      	ldr	r1, [pc, #172]	; (8004424 <SystemInit+0xf4>)
 8004378:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <SystemInit+0xf8>)
 800437a:	4013      	ands	r3, r2
 800437c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800437e:	4b28      	ldr	r3, [pc, #160]	; (8004420 <SystemInit+0xf0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	2b07      	cmp	r3, #7
 8004388:	d907      	bls.n	800439a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800438a:	4b25      	ldr	r3, [pc, #148]	; (8004420 <SystemInit+0xf0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 030f 	bic.w	r3, r3, #15
 8004392:	4a23      	ldr	r2, [pc, #140]	; (8004420 <SystemInit+0xf0>)
 8004394:	f043 0307 	orr.w	r3, r3, #7
 8004398:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800439a:	4b22      	ldr	r3, [pc, #136]	; (8004424 <SystemInit+0xf4>)
 800439c:	2200      	movs	r2, #0
 800439e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80043a0:	4b20      	ldr	r3, [pc, #128]	; (8004424 <SystemInit+0xf4>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80043a6:	4b1f      	ldr	r3, [pc, #124]	; (8004424 <SystemInit+0xf4>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80043ac:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <SystemInit+0xf4>)
 80043ae:	4a1f      	ldr	r2, [pc, #124]	; (800442c <SystemInit+0xfc>)
 80043b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80043b2:	4b1c      	ldr	r3, [pc, #112]	; (8004424 <SystemInit+0xf4>)
 80043b4:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <SystemInit+0x100>)
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <SystemInit+0xf4>)
 80043ba:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <SystemInit+0x104>)
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80043be:	4b19      	ldr	r3, [pc, #100]	; (8004424 <SystemInit+0xf4>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80043c4:	4b17      	ldr	r3, [pc, #92]	; (8004424 <SystemInit+0xf4>)
 80043c6:	4a1b      	ldr	r2, [pc, #108]	; (8004434 <SystemInit+0x104>)
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80043ca:	4b16      	ldr	r3, [pc, #88]	; (8004424 <SystemInit+0xf4>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80043d0:	4b14      	ldr	r3, [pc, #80]	; (8004424 <SystemInit+0xf4>)
 80043d2:	4a18      	ldr	r2, [pc, #96]	; (8004434 <SystemInit+0x104>)
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80043d6:	4b13      	ldr	r3, [pc, #76]	; (8004424 <SystemInit+0xf4>)
 80043d8:	2200      	movs	r2, #0
 80043da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80043dc:	4b11      	ldr	r3, [pc, #68]	; (8004424 <SystemInit+0xf4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a10      	ldr	r2, [pc, #64]	; (8004424 <SystemInit+0xf4>)
 80043e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <SystemInit+0xf4>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80043ee:	4b12      	ldr	r3, [pc, #72]	; (8004438 <SystemInit+0x108>)
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <SystemInit+0x10c>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043fa:	d202      	bcs.n	8004402 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80043fc:	4b10      	ldr	r3, [pc, #64]	; (8004440 <SystemInit+0x110>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004402:	4b10      	ldr	r3, [pc, #64]	; (8004444 <SystemInit+0x114>)
 8004404:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004408:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800440a:	4b04      	ldr	r3, [pc, #16]	; (800441c <SystemInit+0xec>)
 800440c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004410:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004412:	bf00      	nop
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	e000ed00 	.word	0xe000ed00
 8004420:	52002000 	.word	0x52002000
 8004424:	58024400 	.word	0x58024400
 8004428:	eaf6ed7f 	.word	0xeaf6ed7f
 800442c:	02020200 	.word	0x02020200
 8004430:	01ff0000 	.word	0x01ff0000
 8004434:	01010280 	.word	0x01010280
 8004438:	5c001000 	.word	0x5c001000
 800443c:	ffff0000 	.word	0xffff0000
 8004440:	51008108 	.word	0x51008108
 8004444:	52004000 	.word	0x52004000

08004448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004480 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800444c:	f7ff ff70 	bl	8004330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004450:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004452:	e003      	b.n	800445c <LoopCopyDataInit>

08004454 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8004456:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004458:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800445a:	3104      	adds	r1, #4

0800445c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800445c:	480a      	ldr	r0, [pc, #40]	; (8004488 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800445e:	4b0b      	ldr	r3, [pc, #44]	; (800448c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8004460:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004462:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004464:	d3f6      	bcc.n	8004454 <CopyDataInit>
  ldr  r2, =_sbss
 8004466:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004468:	e002      	b.n	8004470 <LoopFillZerobss>

0800446a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800446a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800446c:	f842 3b04 	str.w	r3, [r2], #4

08004470 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8004472:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004474:	d3f9      	bcc.n	800446a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004476:	f014 ffb9 	bl	80193ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800447a:	f7fd fd27 	bl	8001ecc <main>
  bx  lr    
 800447e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004480:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004484:	0801b0b4 	.word	0x0801b0b4
  ldr  r0, =_sdata
 8004488:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800448c:	240001dc 	.word	0x240001dc
  ldr  r2, =_sbss
 8004490:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 8004494:	240024b0 	.word	0x240024b0

08004498 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004498:	e7fe      	b.n	8004498 <ADC3_IRQHandler>
	...

0800449c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044a2:	2003      	movs	r0, #3
 80044a4:	f000 f98a 	bl	80047bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044a8:	f005 ff1c 	bl	800a2e4 <HAL_RCC_GetSysClockFreq>
 80044ac:	4601      	mov	r1, r0
 80044ae:	4b15      	ldr	r3, [pc, #84]	; (8004504 <HAL_Init+0x68>)
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	4a13      	ldr	r2, [pc, #76]	; (8004508 <HAL_Init+0x6c>)
 80044ba:	5cd3      	ldrb	r3, [r2, r3]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	fa21 f303 	lsr.w	r3, r1, r3
 80044c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044c6:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <HAL_Init+0x68>)
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	4a0e      	ldr	r2, [pc, #56]	; (8004508 <HAL_Init+0x6c>)
 80044d0:	5cd3      	ldrb	r3, [r2, r3]
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
 80044dc:	4a0b      	ldr	r2, [pc, #44]	; (800450c <HAL_Init+0x70>)
 80044de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044e0:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <HAL_Init+0x74>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044e6:	2000      	movs	r0, #0
 80044e8:	f000 f814 	bl	8004514 <HAL_InitTick>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e002      	b.n	80044fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80044f6:	f7ff fbbf 	bl	8003c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	58024400 	.word	0x58024400
 8004508:	0801af14 	.word	0x0801af14
 800450c:	24000014 	.word	0x24000014
 8004510:	24000010 	.word	0x24000010

08004514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800451c:	4b15      	ldr	r3, [pc, #84]	; (8004574 <HAL_InitTick+0x60>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e021      	b.n	800456c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004528:	4b13      	ldr	r3, [pc, #76]	; (8004578 <HAL_InitTick+0x64>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b11      	ldr	r3, [pc, #68]	; (8004574 <HAL_InitTick+0x60>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	4619      	mov	r1, r3
 8004532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004536:	fbb3 f3f1 	udiv	r3, r3, r1
 800453a:	fbb2 f3f3 	udiv	r3, r2, r3
 800453e:	4618      	mov	r0, r3
 8004540:	f000 f96f 	bl	8004822 <HAL_SYSTICK_Config>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e00e      	b.n	800456c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b0f      	cmp	r3, #15
 8004552:	d80a      	bhi.n	800456a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004554:	2200      	movs	r2, #0
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	f000 f939 	bl	80047d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004560:	4a06      	ldr	r2, [pc, #24]	; (800457c <HAL_InitTick+0x68>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	e000      	b.n	800456c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	2400001c 	.word	0x2400001c
 8004578:	24000010 	.word	0x24000010
 800457c:	24000018 	.word	0x24000018

08004580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_IncTick+0x20>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_IncTick+0x24>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4413      	add	r3, r2
 8004590:	4a04      	ldr	r2, [pc, #16]	; (80045a4 <HAL_IncTick+0x24>)
 8004592:	6013      	str	r3, [r2, #0]
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	2400001c 	.word	0x2400001c
 80045a4:	24001768 	.word	0x24001768

080045a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  return uwTick;
 80045ac:	4b03      	ldr	r3, [pc, #12]	; (80045bc <HAL_GetTick+0x14>)
 80045ae:	681b      	ldr	r3, [r3, #0]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	24001768 	.word	0x24001768

080045c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045c8:	f7ff ffee 	bl	80045a8 <HAL_GetTick>
 80045cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d005      	beq.n	80045e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045da:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_Delay+0x40>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045e6:	bf00      	nop
 80045e8:	f7ff ffde 	bl	80045a8 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d8f7      	bhi.n	80045e8 <HAL_Delay+0x28>
  {
  }
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	2400001c 	.word	0x2400001c

08004604 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004608:	4b03      	ldr	r3, [pc, #12]	; (8004618 <HAL_GetREVID+0x14>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	0c1b      	lsrs	r3, r3, #16
}
 800460e:	4618      	mov	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	5c001000 	.word	0x5c001000

0800461c <__NVIC_SetPriorityGrouping>:
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <__NVIC_SetPriorityGrouping+0x40>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004638:	4013      	ands	r3, r2
 800463a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <__NVIC_SetPriorityGrouping+0x44>)
 8004646:	4313      	orrs	r3, r2
 8004648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800464a:	4a04      	ldr	r2, [pc, #16]	; (800465c <__NVIC_SetPriorityGrouping+0x40>)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	60d3      	str	r3, [r2, #12]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	e000ed00 	.word	0xe000ed00
 8004660:	05fa0000 	.word	0x05fa0000

08004664 <__NVIC_GetPriorityGrouping>:
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <__NVIC_GetPriorityGrouping+0x18>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	0a1b      	lsrs	r3, r3, #8
 800466e:	f003 0307 	and.w	r3, r3, #7
}
 8004672:	4618      	mov	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	e000ed00 	.word	0xe000ed00

08004680 <__NVIC_EnableIRQ>:
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800468a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800468e:	2b00      	cmp	r3, #0
 8004690:	db0b      	blt.n	80046aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	f003 021f 	and.w	r2, r3, #31
 8004698:	4907      	ldr	r1, [pc, #28]	; (80046b8 <__NVIC_EnableIRQ+0x38>)
 800469a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2001      	movs	r0, #1
 80046a2:	fa00 f202 	lsl.w	r2, r0, r2
 80046a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	e000e100 	.word	0xe000e100

080046bc <__NVIC_SetPriority>:
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	6039      	str	r1, [r7, #0]
 80046c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	db0a      	blt.n	80046e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	490c      	ldr	r1, [pc, #48]	; (8004708 <__NVIC_SetPriority+0x4c>)
 80046d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046da:	0112      	lsls	r2, r2, #4
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	440b      	add	r3, r1
 80046e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046e4:	e00a      	b.n	80046fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4908      	ldr	r1, [pc, #32]	; (800470c <__NVIC_SetPriority+0x50>)
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	3b04      	subs	r3, #4
 80046f4:	0112      	lsls	r2, r2, #4
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	440b      	add	r3, r1
 80046fa:	761a      	strb	r2, [r3, #24]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	e000e100 	.word	0xe000e100
 800470c:	e000ed00 	.word	0xe000ed00

08004710 <NVIC_EncodePriority>:
{
 8004710:	b480      	push	{r7}
 8004712:	b089      	sub	sp, #36	; 0x24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f1c3 0307 	rsb	r3, r3, #7
 800472a:	2b04      	cmp	r3, #4
 800472c:	bf28      	it	cs
 800472e:	2304      	movcs	r3, #4
 8004730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3304      	adds	r3, #4
 8004736:	2b06      	cmp	r3, #6
 8004738:	d902      	bls.n	8004740 <NVIC_EncodePriority+0x30>
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3b03      	subs	r3, #3
 800473e:	e000      	b.n	8004742 <NVIC_EncodePriority+0x32>
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004744:	f04f 32ff 	mov.w	r2, #4294967295
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43da      	mvns	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	401a      	ands	r2, r3
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004758:	f04f 31ff 	mov.w	r1, #4294967295
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	43d9      	mvns	r1, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004768:	4313      	orrs	r3, r2
}
 800476a:	4618      	mov	r0, r3
 800476c:	3724      	adds	r7, #36	; 0x24
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <SysTick_Config>:
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3b01      	subs	r3, #1
 8004784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004788:	d301      	bcc.n	800478e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800478a:	2301      	movs	r3, #1
 800478c:	e00f      	b.n	80047ae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800478e:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <SysTick_Config+0x40>)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004796:	210f      	movs	r1, #15
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	f7ff ff8e 	bl	80046bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <SysTick_Config+0x40>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047a6:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <SysTick_Config+0x40>)
 80047a8:	2207      	movs	r2, #7
 80047aa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	e000e010 	.word	0xe000e010

080047bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff ff29 	bl	800461c <__NVIC_SetPriorityGrouping>
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b086      	sub	sp, #24
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	4603      	mov	r3, r0
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
 80047de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047e0:	f7ff ff40 	bl	8004664 <__NVIC_GetPriorityGrouping>
 80047e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	6978      	ldr	r0, [r7, #20]
 80047ec:	f7ff ff90 	bl	8004710 <NVIC_EncodePriority>
 80047f0:	4602      	mov	r2, r0
 80047f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047f6:	4611      	mov	r1, r2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff ff5f 	bl	80046bc <__NVIC_SetPriority>
}
 80047fe:	bf00      	nop
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	4603      	mov	r3, r0
 800480e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff ff33 	bl	8004680 <__NVIC_EnableIRQ>
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff ffa4 	bl	8004778 <SysTick_Config>
 8004830:	4603      	mov	r3, r0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004844:	f7ff feb0 	bl	80045a8 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e316      	b.n	8004e82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a66      	ldr	r2, [pc, #408]	; (80049f4 <HAL_DMA_Init+0x1b8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d04a      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a65      	ldr	r2, [pc, #404]	; (80049f8 <HAL_DMA_Init+0x1bc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d045      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a63      	ldr	r2, [pc, #396]	; (80049fc <HAL_DMA_Init+0x1c0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d040      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a62      	ldr	r2, [pc, #392]	; (8004a00 <HAL_DMA_Init+0x1c4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d03b      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a60      	ldr	r2, [pc, #384]	; (8004a04 <HAL_DMA_Init+0x1c8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d036      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a5f      	ldr	r2, [pc, #380]	; (8004a08 <HAL_DMA_Init+0x1cc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d031      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a5d      	ldr	r2, [pc, #372]	; (8004a0c <HAL_DMA_Init+0x1d0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d02c      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a5c      	ldr	r2, [pc, #368]	; (8004a10 <HAL_DMA_Init+0x1d4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d027      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a5a      	ldr	r2, [pc, #360]	; (8004a14 <HAL_DMA_Init+0x1d8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d022      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a59      	ldr	r2, [pc, #356]	; (8004a18 <HAL_DMA_Init+0x1dc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d01d      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a57      	ldr	r2, [pc, #348]	; (8004a1c <HAL_DMA_Init+0x1e0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d018      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a56      	ldr	r2, [pc, #344]	; (8004a20 <HAL_DMA_Init+0x1e4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d013      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a54      	ldr	r2, [pc, #336]	; (8004a24 <HAL_DMA_Init+0x1e8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00e      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a53      	ldr	r2, [pc, #332]	; (8004a28 <HAL_DMA_Init+0x1ec>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d009      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a51      	ldr	r2, [pc, #324]	; (8004a2c <HAL_DMA_Init+0x1f0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d004      	beq.n	80048f4 <HAL_DMA_Init+0xb8>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a50      	ldr	r2, [pc, #320]	; (8004a30 <HAL_DMA_Init+0x1f4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d101      	bne.n	80048f8 <HAL_DMA_Init+0xbc>
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <HAL_DMA_Init+0xbe>
 80048f8:	2300      	movs	r3, #0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 813b 	beq.w	8004b76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a37      	ldr	r2, [pc, #220]	; (80049f4 <HAL_DMA_Init+0x1b8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d04a      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a36      	ldr	r2, [pc, #216]	; (80049f8 <HAL_DMA_Init+0x1bc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d045      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a34      	ldr	r2, [pc, #208]	; (80049fc <HAL_DMA_Init+0x1c0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d040      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a33      	ldr	r2, [pc, #204]	; (8004a00 <HAL_DMA_Init+0x1c4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d03b      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a31      	ldr	r2, [pc, #196]	; (8004a04 <HAL_DMA_Init+0x1c8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d036      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a30      	ldr	r2, [pc, #192]	; (8004a08 <HAL_DMA_Init+0x1cc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d031      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a2e      	ldr	r2, [pc, #184]	; (8004a0c <HAL_DMA_Init+0x1d0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d02c      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a2d      	ldr	r2, [pc, #180]	; (8004a10 <HAL_DMA_Init+0x1d4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d027      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2b      	ldr	r2, [pc, #172]	; (8004a14 <HAL_DMA_Init+0x1d8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d022      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <HAL_DMA_Init+0x1dc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d01d      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a28      	ldr	r2, [pc, #160]	; (8004a1c <HAL_DMA_Init+0x1e0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d018      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a27      	ldr	r2, [pc, #156]	; (8004a20 <HAL_DMA_Init+0x1e4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a25      	ldr	r2, [pc, #148]	; (8004a24 <HAL_DMA_Init+0x1e8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00e      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a24      	ldr	r2, [pc, #144]	; (8004a28 <HAL_DMA_Init+0x1ec>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d009      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a22      	ldr	r2, [pc, #136]	; (8004a2c <HAL_DMA_Init+0x1f0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_DMA_Init+0x174>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a21      	ldr	r2, [pc, #132]	; (8004a30 <HAL_DMA_Init+0x1f4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d108      	bne.n	80049c2 <HAL_DMA_Init+0x186>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0201 	bic.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	e007      	b.n	80049d2 <HAL_DMA_Init+0x196>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0201 	bic.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049d2:	e02f      	b.n	8004a34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049d4:	f7ff fde8 	bl	80045a8 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b05      	cmp	r3, #5
 80049e0:	d928      	bls.n	8004a34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2203      	movs	r2, #3
 80049ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e246      	b.n	8004e82 <HAL_DMA_Init+0x646>
 80049f4:	40020010 	.word	0x40020010
 80049f8:	40020028 	.word	0x40020028
 80049fc:	40020040 	.word	0x40020040
 8004a00:	40020058 	.word	0x40020058
 8004a04:	40020070 	.word	0x40020070
 8004a08:	40020088 	.word	0x40020088
 8004a0c:	400200a0 	.word	0x400200a0
 8004a10:	400200b8 	.word	0x400200b8
 8004a14:	40020410 	.word	0x40020410
 8004a18:	40020428 	.word	0x40020428
 8004a1c:	40020440 	.word	0x40020440
 8004a20:	40020458 	.word	0x40020458
 8004a24:	40020470 	.word	0x40020470
 8004a28:	40020488 	.word	0x40020488
 8004a2c:	400204a0 	.word	0x400204a0
 8004a30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1c8      	bne.n	80049d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4b83      	ldr	r3, [pc, #524]	; (8004c5c <HAL_DMA_Init+0x420>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004a5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d107      	bne.n	8004a98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	4313      	orrs	r3, r2
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004a98:	4b71      	ldr	r3, [pc, #452]	; (8004c60 <HAL_DMA_Init+0x424>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b71      	ldr	r3, [pc, #452]	; (8004c64 <HAL_DMA_Init+0x428>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa4:	d328      	bcc.n	8004af8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b28      	cmp	r3, #40	; 0x28
 8004aac:	d903      	bls.n	8004ab6 <HAL_DMA_Init+0x27a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ab4:	d917      	bls.n	8004ae6 <HAL_DMA_Init+0x2aa>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b3e      	cmp	r3, #62	; 0x3e
 8004abc:	d903      	bls.n	8004ac6 <HAL_DMA_Init+0x28a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b42      	cmp	r3, #66	; 0x42
 8004ac4:	d90f      	bls.n	8004ae6 <HAL_DMA_Init+0x2aa>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b46      	cmp	r3, #70	; 0x46
 8004acc:	d903      	bls.n	8004ad6 <HAL_DMA_Init+0x29a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b48      	cmp	r3, #72	; 0x48
 8004ad4:	d907      	bls.n	8004ae6 <HAL_DMA_Init+0x2aa>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b4e      	cmp	r3, #78	; 0x4e
 8004adc:	d905      	bls.n	8004aea <HAL_DMA_Init+0x2ae>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b52      	cmp	r3, #82	; 0x52
 8004ae4:	d801      	bhi.n	8004aea <HAL_DMA_Init+0x2ae>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <HAL_DMA_Init+0x2b0>
 8004aea:	2300      	movs	r3, #0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004af6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f023 0307 	bic.w	r3, r3, #7
 8004b0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d117      	bne.n	8004b52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00e      	beq.n	8004b52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f001 fdcf 	bl	80066d8 <DMA_CheckFifoParam>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2240      	movs	r2, #64	; 0x40
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e197      	b.n	8004e82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f001 fd0a 	bl	8006574 <DMA_CalcBaseAndBitshift>
 8004b60:	4603      	mov	r3, r0
 8004b62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	223f      	movs	r2, #63	; 0x3f
 8004b6e:	409a      	lsls	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	e0cd      	b.n	8004d12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a3b      	ldr	r2, [pc, #236]	; (8004c68 <HAL_DMA_Init+0x42c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d022      	beq.n	8004bc6 <HAL_DMA_Init+0x38a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a39      	ldr	r2, [pc, #228]	; (8004c6c <HAL_DMA_Init+0x430>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d01d      	beq.n	8004bc6 <HAL_DMA_Init+0x38a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a38      	ldr	r2, [pc, #224]	; (8004c70 <HAL_DMA_Init+0x434>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d018      	beq.n	8004bc6 <HAL_DMA_Init+0x38a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a36      	ldr	r2, [pc, #216]	; (8004c74 <HAL_DMA_Init+0x438>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d013      	beq.n	8004bc6 <HAL_DMA_Init+0x38a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a35      	ldr	r2, [pc, #212]	; (8004c78 <HAL_DMA_Init+0x43c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00e      	beq.n	8004bc6 <HAL_DMA_Init+0x38a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a33      	ldr	r2, [pc, #204]	; (8004c7c <HAL_DMA_Init+0x440>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d009      	beq.n	8004bc6 <HAL_DMA_Init+0x38a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a32      	ldr	r2, [pc, #200]	; (8004c80 <HAL_DMA_Init+0x444>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d004      	beq.n	8004bc6 <HAL_DMA_Init+0x38a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a30      	ldr	r2, [pc, #192]	; (8004c84 <HAL_DMA_Init+0x448>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d101      	bne.n	8004bca <HAL_DMA_Init+0x38e>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <HAL_DMA_Init+0x390>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8097 	beq.w	8004d00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a24      	ldr	r2, [pc, #144]	; (8004c68 <HAL_DMA_Init+0x42c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d021      	beq.n	8004c20 <HAL_DMA_Init+0x3e4>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a22      	ldr	r2, [pc, #136]	; (8004c6c <HAL_DMA_Init+0x430>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01c      	beq.n	8004c20 <HAL_DMA_Init+0x3e4>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a21      	ldr	r2, [pc, #132]	; (8004c70 <HAL_DMA_Init+0x434>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d017      	beq.n	8004c20 <HAL_DMA_Init+0x3e4>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1f      	ldr	r2, [pc, #124]	; (8004c74 <HAL_DMA_Init+0x438>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d012      	beq.n	8004c20 <HAL_DMA_Init+0x3e4>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1e      	ldr	r2, [pc, #120]	; (8004c78 <HAL_DMA_Init+0x43c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00d      	beq.n	8004c20 <HAL_DMA_Init+0x3e4>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <HAL_DMA_Init+0x440>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d008      	beq.n	8004c20 <HAL_DMA_Init+0x3e4>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <HAL_DMA_Init+0x444>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <HAL_DMA_Init+0x3e4>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a19      	ldr	r2, [pc, #100]	; (8004c84 <HAL_DMA_Init+0x448>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <HAL_DMA_Init+0x44c>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d020      	beq.n	8004c8c <HAL_DMA_Init+0x450>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b80      	cmp	r3, #128	; 0x80
 8004c50:	d102      	bne.n	8004c58 <HAL_DMA_Init+0x41c>
 8004c52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c56:	e01a      	b.n	8004c8e <HAL_DMA_Init+0x452>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e018      	b.n	8004c8e <HAL_DMA_Init+0x452>
 8004c5c:	fe10803f 	.word	0xfe10803f
 8004c60:	5c001000 	.word	0x5c001000
 8004c64:	ffff0000 	.word	0xffff0000
 8004c68:	58025408 	.word	0x58025408
 8004c6c:	5802541c 	.word	0x5802541c
 8004c70:	58025430 	.word	0x58025430
 8004c74:	58025444 	.word	0x58025444
 8004c78:	58025458 	.word	0x58025458
 8004c7c:	5802546c 	.word	0x5802546c
 8004c80:	58025480 	.word	0x58025480
 8004c84:	58025494 	.word	0x58025494
 8004c88:	fffe000f 	.word	0xfffe000f
 8004c8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	68d2      	ldr	r2, [r2, #12]
 8004c92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ca4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cbc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4b6e      	ldr	r3, [pc, #440]	; (8004e8c <HAL_DMA_Init+0x650>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	4a6e      	ldr	r2, [pc, #440]	; (8004e90 <HAL_DMA_Init+0x654>)
 8004cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	009a      	lsls	r2, r3, #2
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f001 fc45 	bl	8006574 <DMA_CalcBaseAndBitshift>
 8004cea:	4603      	mov	r3, r0
 8004cec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf2:	f003 031f 	and.w	r3, r3, #31
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	409a      	lsls	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	605a      	str	r2, [r3, #4]
 8004cfe:	e008      	b.n	8004d12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2240      	movs	r2, #64	; 0x40
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2203      	movs	r2, #3
 8004d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e0b7      	b.n	8004e82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a5f      	ldr	r2, [pc, #380]	; (8004e94 <HAL_DMA_Init+0x658>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d072      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a5d      	ldr	r2, [pc, #372]	; (8004e98 <HAL_DMA_Init+0x65c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d06d      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a5c      	ldr	r2, [pc, #368]	; (8004e9c <HAL_DMA_Init+0x660>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d068      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a5a      	ldr	r2, [pc, #360]	; (8004ea0 <HAL_DMA_Init+0x664>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d063      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a59      	ldr	r2, [pc, #356]	; (8004ea4 <HAL_DMA_Init+0x668>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d05e      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a57      	ldr	r2, [pc, #348]	; (8004ea8 <HAL_DMA_Init+0x66c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d059      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a56      	ldr	r2, [pc, #344]	; (8004eac <HAL_DMA_Init+0x670>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d054      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a54      	ldr	r2, [pc, #336]	; (8004eb0 <HAL_DMA_Init+0x674>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d04f      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a53      	ldr	r2, [pc, #332]	; (8004eb4 <HAL_DMA_Init+0x678>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d04a      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a51      	ldr	r2, [pc, #324]	; (8004eb8 <HAL_DMA_Init+0x67c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d045      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a50      	ldr	r2, [pc, #320]	; (8004ebc <HAL_DMA_Init+0x680>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d040      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a4e      	ldr	r2, [pc, #312]	; (8004ec0 <HAL_DMA_Init+0x684>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d03b      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a4d      	ldr	r2, [pc, #308]	; (8004ec4 <HAL_DMA_Init+0x688>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d036      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a4b      	ldr	r2, [pc, #300]	; (8004ec8 <HAL_DMA_Init+0x68c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d031      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a4a      	ldr	r2, [pc, #296]	; (8004ecc <HAL_DMA_Init+0x690>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d02c      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a48      	ldr	r2, [pc, #288]	; (8004ed0 <HAL_DMA_Init+0x694>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d027      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a47      	ldr	r2, [pc, #284]	; (8004ed4 <HAL_DMA_Init+0x698>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d022      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a45      	ldr	r2, [pc, #276]	; (8004ed8 <HAL_DMA_Init+0x69c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d01d      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a44      	ldr	r2, [pc, #272]	; (8004edc <HAL_DMA_Init+0x6a0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d018      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a42      	ldr	r2, [pc, #264]	; (8004ee0 <HAL_DMA_Init+0x6a4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a41      	ldr	r2, [pc, #260]	; (8004ee4 <HAL_DMA_Init+0x6a8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00e      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a3f      	ldr	r2, [pc, #252]	; (8004ee8 <HAL_DMA_Init+0x6ac>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d009      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a3e      	ldr	r2, [pc, #248]	; (8004eec <HAL_DMA_Init+0x6b0>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d004      	beq.n	8004e02 <HAL_DMA_Init+0x5c6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a3c      	ldr	r2, [pc, #240]	; (8004ef0 <HAL_DMA_Init+0x6b4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d101      	bne.n	8004e06 <HAL_DMA_Init+0x5ca>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <HAL_DMA_Init+0x5cc>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d032      	beq.n	8004e72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f001 fcdf 	bl	80067d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b80      	cmp	r3, #128	; 0x80
 8004e18:	d102      	bne.n	8004e20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d010      	beq.n	8004e60 <HAL_DMA_Init+0x624>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d80c      	bhi.n	8004e60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f001 fd5c 	bl	8006904 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e5c:	605a      	str	r2, [r3, #4]
 8004e5e:	e008      	b.n	8004e72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	a7fdabf8 	.word	0xa7fdabf8
 8004e90:	cccccccd 	.word	0xcccccccd
 8004e94:	40020010 	.word	0x40020010
 8004e98:	40020028 	.word	0x40020028
 8004e9c:	40020040 	.word	0x40020040
 8004ea0:	40020058 	.word	0x40020058
 8004ea4:	40020070 	.word	0x40020070
 8004ea8:	40020088 	.word	0x40020088
 8004eac:	400200a0 	.word	0x400200a0
 8004eb0:	400200b8 	.word	0x400200b8
 8004eb4:	40020410 	.word	0x40020410
 8004eb8:	40020428 	.word	0x40020428
 8004ebc:	40020440 	.word	0x40020440
 8004ec0:	40020458 	.word	0x40020458
 8004ec4:	40020470 	.word	0x40020470
 8004ec8:	40020488 	.word	0x40020488
 8004ecc:	400204a0 	.word	0x400204a0
 8004ed0:	400204b8 	.word	0x400204b8
 8004ed4:	58025408 	.word	0x58025408
 8004ed8:	5802541c 	.word	0x5802541c
 8004edc:	58025430 	.word	0x58025430
 8004ee0:	58025444 	.word	0x58025444
 8004ee4:	58025458 	.word	0x58025458
 8004ee8:	5802546c 	.word	0x5802546c
 8004eec:	58025480 	.word	0x58025480
 8004ef0:	58025494 	.word	0x58025494

08004ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e226      	b.n	800535e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <HAL_DMA_Start_IT+0x2a>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e21f      	b.n	800535e <HAL_DMA_Start_IT+0x46a>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	f040 820a 	bne.w	8005348 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a68      	ldr	r2, [pc, #416]	; (80050e8 <HAL_DMA_Start_IT+0x1f4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d04a      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a66      	ldr	r2, [pc, #408]	; (80050ec <HAL_DMA_Start_IT+0x1f8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d045      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a65      	ldr	r2, [pc, #404]	; (80050f0 <HAL_DMA_Start_IT+0x1fc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d040      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a63      	ldr	r2, [pc, #396]	; (80050f4 <HAL_DMA_Start_IT+0x200>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d03b      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a62      	ldr	r2, [pc, #392]	; (80050f8 <HAL_DMA_Start_IT+0x204>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d036      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a60      	ldr	r2, [pc, #384]	; (80050fc <HAL_DMA_Start_IT+0x208>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d031      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a5f      	ldr	r2, [pc, #380]	; (8005100 <HAL_DMA_Start_IT+0x20c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d02c      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a5d      	ldr	r2, [pc, #372]	; (8005104 <HAL_DMA_Start_IT+0x210>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d027      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a5c      	ldr	r2, [pc, #368]	; (8005108 <HAL_DMA_Start_IT+0x214>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d022      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a5a      	ldr	r2, [pc, #360]	; (800510c <HAL_DMA_Start_IT+0x218>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01d      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a59      	ldr	r2, [pc, #356]	; (8005110 <HAL_DMA_Start_IT+0x21c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d018      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a57      	ldr	r2, [pc, #348]	; (8005114 <HAL_DMA_Start_IT+0x220>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a56      	ldr	r2, [pc, #344]	; (8005118 <HAL_DMA_Start_IT+0x224>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a54      	ldr	r2, [pc, #336]	; (800511c <HAL_DMA_Start_IT+0x228>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d009      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a53      	ldr	r2, [pc, #332]	; (8005120 <HAL_DMA_Start_IT+0x22c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <HAL_DMA_Start_IT+0xee>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a51      	ldr	r2, [pc, #324]	; (8005124 <HAL_DMA_Start_IT+0x230>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d108      	bne.n	8004ff4 <HAL_DMA_Start_IT+0x100>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0201 	bic.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e007      	b.n	8005004 <HAL_DMA_Start_IT+0x110>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0201 	bic.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f001 f906 	bl	800621c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a34      	ldr	r2, [pc, #208]	; (80050e8 <HAL_DMA_Start_IT+0x1f4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d04a      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a33      	ldr	r2, [pc, #204]	; (80050ec <HAL_DMA_Start_IT+0x1f8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d045      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a31      	ldr	r2, [pc, #196]	; (80050f0 <HAL_DMA_Start_IT+0x1fc>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d040      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a30      	ldr	r2, [pc, #192]	; (80050f4 <HAL_DMA_Start_IT+0x200>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d03b      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a2e      	ldr	r2, [pc, #184]	; (80050f8 <HAL_DMA_Start_IT+0x204>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d036      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a2d      	ldr	r2, [pc, #180]	; (80050fc <HAL_DMA_Start_IT+0x208>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d031      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a2b      	ldr	r2, [pc, #172]	; (8005100 <HAL_DMA_Start_IT+0x20c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d02c      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2a      	ldr	r2, [pc, #168]	; (8005104 <HAL_DMA_Start_IT+0x210>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d027      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a28      	ldr	r2, [pc, #160]	; (8005108 <HAL_DMA_Start_IT+0x214>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d022      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a27      	ldr	r2, [pc, #156]	; (800510c <HAL_DMA_Start_IT+0x218>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d01d      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a25      	ldr	r2, [pc, #148]	; (8005110 <HAL_DMA_Start_IT+0x21c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d018      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a24      	ldr	r2, [pc, #144]	; (8005114 <HAL_DMA_Start_IT+0x220>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a22      	ldr	r2, [pc, #136]	; (8005118 <HAL_DMA_Start_IT+0x224>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00e      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a21      	ldr	r2, [pc, #132]	; (800511c <HAL_DMA_Start_IT+0x228>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d009      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <HAL_DMA_Start_IT+0x22c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <HAL_DMA_Start_IT+0x1bc>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1e      	ldr	r2, [pc, #120]	; (8005124 <HAL_DMA_Start_IT+0x230>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d101      	bne.n	80050b4 <HAL_DMA_Start_IT+0x1c0>
 80050b0:	2301      	movs	r3, #1
 80050b2:	e000      	b.n	80050b6 <HAL_DMA_Start_IT+0x1c2>
 80050b4:	2300      	movs	r3, #0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d036      	beq.n	8005128 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f023 021e 	bic.w	r2, r3, #30
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0216 	orr.w	r2, r2, #22
 80050cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d03e      	beq.n	8005154 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0208 	orr.w	r2, r2, #8
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e035      	b.n	8005154 <HAL_DMA_Start_IT+0x260>
 80050e8:	40020010 	.word	0x40020010
 80050ec:	40020028 	.word	0x40020028
 80050f0:	40020040 	.word	0x40020040
 80050f4:	40020058 	.word	0x40020058
 80050f8:	40020070 	.word	0x40020070
 80050fc:	40020088 	.word	0x40020088
 8005100:	400200a0 	.word	0x400200a0
 8005104:	400200b8 	.word	0x400200b8
 8005108:	40020410 	.word	0x40020410
 800510c:	40020428 	.word	0x40020428
 8005110:	40020440 	.word	0x40020440
 8005114:	40020458 	.word	0x40020458
 8005118:	40020470 	.word	0x40020470
 800511c:	40020488 	.word	0x40020488
 8005120:	400204a0 	.word	0x400204a0
 8005124:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 020e 	bic.w	r2, r3, #14
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 020a 	orr.w	r2, r2, #10
 800513a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0204 	orr.w	r2, r2, #4
 8005152:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a83      	ldr	r2, [pc, #524]	; (8005368 <HAL_DMA_Start_IT+0x474>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d072      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a82      	ldr	r2, [pc, #520]	; (800536c <HAL_DMA_Start_IT+0x478>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d06d      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a80      	ldr	r2, [pc, #512]	; (8005370 <HAL_DMA_Start_IT+0x47c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d068      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a7f      	ldr	r2, [pc, #508]	; (8005374 <HAL_DMA_Start_IT+0x480>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d063      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a7d      	ldr	r2, [pc, #500]	; (8005378 <HAL_DMA_Start_IT+0x484>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d05e      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a7c      	ldr	r2, [pc, #496]	; (800537c <HAL_DMA_Start_IT+0x488>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d059      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a7a      	ldr	r2, [pc, #488]	; (8005380 <HAL_DMA_Start_IT+0x48c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d054      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a79      	ldr	r2, [pc, #484]	; (8005384 <HAL_DMA_Start_IT+0x490>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d04f      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a77      	ldr	r2, [pc, #476]	; (8005388 <HAL_DMA_Start_IT+0x494>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d04a      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a76      	ldr	r2, [pc, #472]	; (800538c <HAL_DMA_Start_IT+0x498>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d045      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a74      	ldr	r2, [pc, #464]	; (8005390 <HAL_DMA_Start_IT+0x49c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d040      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a73      	ldr	r2, [pc, #460]	; (8005394 <HAL_DMA_Start_IT+0x4a0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d03b      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a71      	ldr	r2, [pc, #452]	; (8005398 <HAL_DMA_Start_IT+0x4a4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d036      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a70      	ldr	r2, [pc, #448]	; (800539c <HAL_DMA_Start_IT+0x4a8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d031      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a6e      	ldr	r2, [pc, #440]	; (80053a0 <HAL_DMA_Start_IT+0x4ac>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d02c      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a6d      	ldr	r2, [pc, #436]	; (80053a4 <HAL_DMA_Start_IT+0x4b0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d027      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a6b      	ldr	r2, [pc, #428]	; (80053a8 <HAL_DMA_Start_IT+0x4b4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d022      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a6a      	ldr	r2, [pc, #424]	; (80053ac <HAL_DMA_Start_IT+0x4b8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d01d      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a68      	ldr	r2, [pc, #416]	; (80053b0 <HAL_DMA_Start_IT+0x4bc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d018      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a67      	ldr	r2, [pc, #412]	; (80053b4 <HAL_DMA_Start_IT+0x4c0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d013      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a65      	ldr	r2, [pc, #404]	; (80053b8 <HAL_DMA_Start_IT+0x4c4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00e      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a64      	ldr	r2, [pc, #400]	; (80053bc <HAL_DMA_Start_IT+0x4c8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d009      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a62      	ldr	r2, [pc, #392]	; (80053c0 <HAL_DMA_Start_IT+0x4cc>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_DMA_Start_IT+0x350>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a61      	ldr	r2, [pc, #388]	; (80053c4 <HAL_DMA_Start_IT+0x4d0>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d101      	bne.n	8005248 <HAL_DMA_Start_IT+0x354>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <HAL_DMA_Start_IT+0x356>
 8005248:	2300      	movs	r3, #0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01a      	beq.n	8005284 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800526a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005270:	2b00      	cmp	r3, #0
 8005272:	d007      	beq.n	8005284 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005282:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a37      	ldr	r2, [pc, #220]	; (8005368 <HAL_DMA_Start_IT+0x474>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d04a      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a36      	ldr	r2, [pc, #216]	; (800536c <HAL_DMA_Start_IT+0x478>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d045      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a34      	ldr	r2, [pc, #208]	; (8005370 <HAL_DMA_Start_IT+0x47c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d040      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a33      	ldr	r2, [pc, #204]	; (8005374 <HAL_DMA_Start_IT+0x480>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d03b      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a31      	ldr	r2, [pc, #196]	; (8005378 <HAL_DMA_Start_IT+0x484>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d036      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a30      	ldr	r2, [pc, #192]	; (800537c <HAL_DMA_Start_IT+0x488>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d031      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2e      	ldr	r2, [pc, #184]	; (8005380 <HAL_DMA_Start_IT+0x48c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d02c      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a2d      	ldr	r2, [pc, #180]	; (8005384 <HAL_DMA_Start_IT+0x490>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d027      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a2b      	ldr	r2, [pc, #172]	; (8005388 <HAL_DMA_Start_IT+0x494>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d022      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a2a      	ldr	r2, [pc, #168]	; (800538c <HAL_DMA_Start_IT+0x498>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d01d      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a28      	ldr	r2, [pc, #160]	; (8005390 <HAL_DMA_Start_IT+0x49c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d018      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a27      	ldr	r2, [pc, #156]	; (8005394 <HAL_DMA_Start_IT+0x4a0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a25      	ldr	r2, [pc, #148]	; (8005398 <HAL_DMA_Start_IT+0x4a4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00e      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a24      	ldr	r2, [pc, #144]	; (800539c <HAL_DMA_Start_IT+0x4a8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d009      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a22      	ldr	r2, [pc, #136]	; (80053a0 <HAL_DMA_Start_IT+0x4ac>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_DMA_Start_IT+0x430>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a21      	ldr	r2, [pc, #132]	; (80053a4 <HAL_DMA_Start_IT+0x4b0>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d108      	bne.n	8005336 <HAL_DMA_Start_IT+0x442>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	e012      	b.n	800535c <HAL_DMA_Start_IT+0x468>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e009      	b.n	800535c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005356:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800535c:	7dfb      	ldrb	r3, [r7, #23]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40020010 	.word	0x40020010
 800536c:	40020028 	.word	0x40020028
 8005370:	40020040 	.word	0x40020040
 8005374:	40020058 	.word	0x40020058
 8005378:	40020070 	.word	0x40020070
 800537c:	40020088 	.word	0x40020088
 8005380:	400200a0 	.word	0x400200a0
 8005384:	400200b8 	.word	0x400200b8
 8005388:	40020410 	.word	0x40020410
 800538c:	40020428 	.word	0x40020428
 8005390:	40020440 	.word	0x40020440
 8005394:	40020458 	.word	0x40020458
 8005398:	40020470 	.word	0x40020470
 800539c:	40020488 	.word	0x40020488
 80053a0:	400204a0 	.word	0x400204a0
 80053a4:	400204b8 	.word	0x400204b8
 80053a8:	58025408 	.word	0x58025408
 80053ac:	5802541c 	.word	0x5802541c
 80053b0:	58025430 	.word	0x58025430
 80053b4:	58025444 	.word	0x58025444
 80053b8:	58025458 	.word	0x58025458
 80053bc:	5802546c 	.word	0x5802546c
 80053c0:	58025480 	.word	0x58025480
 80053c4:	58025494 	.word	0x58025494

080053c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	; 0x28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053d4:	4b67      	ldr	r3, [pc, #412]	; (8005574 <HAL_DMA_IRQHandler+0x1ac>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a67      	ldr	r2, [pc, #412]	; (8005578 <HAL_DMA_IRQHandler+0x1b0>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	0a9b      	lsrs	r3, r3, #10
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a5f      	ldr	r2, [pc, #380]	; (800557c <HAL_DMA_IRQHandler+0x1b4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d04a      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a5d      	ldr	r2, [pc, #372]	; (8005580 <HAL_DMA_IRQHandler+0x1b8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d045      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a5c      	ldr	r2, [pc, #368]	; (8005584 <HAL_DMA_IRQHandler+0x1bc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d040      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a5a      	ldr	r2, [pc, #360]	; (8005588 <HAL_DMA_IRQHandler+0x1c0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d03b      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a59      	ldr	r2, [pc, #356]	; (800558c <HAL_DMA_IRQHandler+0x1c4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d036      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a57      	ldr	r2, [pc, #348]	; (8005590 <HAL_DMA_IRQHandler+0x1c8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d031      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a56      	ldr	r2, [pc, #344]	; (8005594 <HAL_DMA_IRQHandler+0x1cc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d02c      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a54      	ldr	r2, [pc, #336]	; (8005598 <HAL_DMA_IRQHandler+0x1d0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d027      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a53      	ldr	r2, [pc, #332]	; (800559c <HAL_DMA_IRQHandler+0x1d4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d022      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a51      	ldr	r2, [pc, #324]	; (80055a0 <HAL_DMA_IRQHandler+0x1d8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d01d      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a50      	ldr	r2, [pc, #320]	; (80055a4 <HAL_DMA_IRQHandler+0x1dc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a4e      	ldr	r2, [pc, #312]	; (80055a8 <HAL_DMA_IRQHandler+0x1e0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a4d      	ldr	r2, [pc, #308]	; (80055ac <HAL_DMA_IRQHandler+0x1e4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a4b      	ldr	r2, [pc, #300]	; (80055b0 <HAL_DMA_IRQHandler+0x1e8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a4a      	ldr	r2, [pc, #296]	; (80055b4 <HAL_DMA_IRQHandler+0x1ec>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a48      	ldr	r2, [pc, #288]	; (80055b8 <HAL_DMA_IRQHandler+0x1f0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d101      	bne.n	800549e <HAL_DMA_IRQHandler+0xd6>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <HAL_DMA_IRQHandler+0xd8>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 842b 	beq.w	8005cfc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	2208      	movs	r2, #8
 80054b0:	409a      	lsls	r2, r3
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	4013      	ands	r3, r2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80a2 	beq.w	8005600 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2e      	ldr	r2, [pc, #184]	; (800557c <HAL_DMA_IRQHandler+0x1b4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d04a      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <HAL_DMA_IRQHandler+0x1b8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d045      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a2b      	ldr	r2, [pc, #172]	; (8005584 <HAL_DMA_IRQHandler+0x1bc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d040      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2a      	ldr	r2, [pc, #168]	; (8005588 <HAL_DMA_IRQHandler+0x1c0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d03b      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a28      	ldr	r2, [pc, #160]	; (800558c <HAL_DMA_IRQHandler+0x1c4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d036      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a27      	ldr	r2, [pc, #156]	; (8005590 <HAL_DMA_IRQHandler+0x1c8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d031      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a25      	ldr	r2, [pc, #148]	; (8005594 <HAL_DMA_IRQHandler+0x1cc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d02c      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a24      	ldr	r2, [pc, #144]	; (8005598 <HAL_DMA_IRQHandler+0x1d0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d027      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a22      	ldr	r2, [pc, #136]	; (800559c <HAL_DMA_IRQHandler+0x1d4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d022      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a21      	ldr	r2, [pc, #132]	; (80055a0 <HAL_DMA_IRQHandler+0x1d8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d01d      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <HAL_DMA_IRQHandler+0x1dc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d018      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1e      	ldr	r2, [pc, #120]	; (80055a8 <HAL_DMA_IRQHandler+0x1e0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d013      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <HAL_DMA_IRQHandler+0x1e4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00e      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <HAL_DMA_IRQHandler+0x1e8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d009      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a19      	ldr	r2, [pc, #100]	; (80055b4 <HAL_DMA_IRQHandler+0x1ec>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d004      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <HAL_DMA_IRQHandler+0x1f0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d12f      	bne.n	80055bc <HAL_DMA_IRQHandler+0x1f4>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	bf14      	ite	ne
 800556a:	2301      	movne	r3, #1
 800556c:	2300      	moveq	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	e02e      	b.n	80055d0 <HAL_DMA_IRQHandler+0x208>
 8005572:	bf00      	nop
 8005574:	24000010 	.word	0x24000010
 8005578:	1b4e81b5 	.word	0x1b4e81b5
 800557c:	40020010 	.word	0x40020010
 8005580:	40020028 	.word	0x40020028
 8005584:	40020040 	.word	0x40020040
 8005588:	40020058 	.word	0x40020058
 800558c:	40020070 	.word	0x40020070
 8005590:	40020088 	.word	0x40020088
 8005594:	400200a0 	.word	0x400200a0
 8005598:	400200b8 	.word	0x400200b8
 800559c:	40020410 	.word	0x40020410
 80055a0:	40020428 	.word	0x40020428
 80055a4:	40020440 	.word	0x40020440
 80055a8:	40020458 	.word	0x40020458
 80055ac:	40020470 	.word	0x40020470
 80055b0:	40020488 	.word	0x40020488
 80055b4:	400204a0 	.word	0x400204a0
 80055b8:	400204b8 	.word	0x400204b8
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bf14      	ite	ne
 80055ca:	2301      	movne	r3, #1
 80055cc:	2300      	moveq	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d015      	beq.n	8005600 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0204 	bic.w	r2, r2, #4
 80055e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	2208      	movs	r2, #8
 80055ee:	409a      	lsls	r2, r3
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f8:	f043 0201 	orr.w	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	fa22 f303 	lsr.w	r3, r2, r3
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d06e      	beq.n	80056f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a69      	ldr	r2, [pc, #420]	; (80057c0 <HAL_DMA_IRQHandler+0x3f8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d04a      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a67      	ldr	r2, [pc, #412]	; (80057c4 <HAL_DMA_IRQHandler+0x3fc>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d045      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a66      	ldr	r2, [pc, #408]	; (80057c8 <HAL_DMA_IRQHandler+0x400>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d040      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a64      	ldr	r2, [pc, #400]	; (80057cc <HAL_DMA_IRQHandler+0x404>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d03b      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a63      	ldr	r2, [pc, #396]	; (80057d0 <HAL_DMA_IRQHandler+0x408>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d036      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a61      	ldr	r2, [pc, #388]	; (80057d4 <HAL_DMA_IRQHandler+0x40c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d031      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a60      	ldr	r2, [pc, #384]	; (80057d8 <HAL_DMA_IRQHandler+0x410>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d02c      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a5e      	ldr	r2, [pc, #376]	; (80057dc <HAL_DMA_IRQHandler+0x414>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d027      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a5d      	ldr	r2, [pc, #372]	; (80057e0 <HAL_DMA_IRQHandler+0x418>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d022      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a5b      	ldr	r2, [pc, #364]	; (80057e4 <HAL_DMA_IRQHandler+0x41c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01d      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a5a      	ldr	r2, [pc, #360]	; (80057e8 <HAL_DMA_IRQHandler+0x420>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d018      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a58      	ldr	r2, [pc, #352]	; (80057ec <HAL_DMA_IRQHandler+0x424>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a57      	ldr	r2, [pc, #348]	; (80057f0 <HAL_DMA_IRQHandler+0x428>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00e      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a55      	ldr	r2, [pc, #340]	; (80057f4 <HAL_DMA_IRQHandler+0x42c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d009      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a54      	ldr	r2, [pc, #336]	; (80057f8 <HAL_DMA_IRQHandler+0x430>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d004      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a52      	ldr	r2, [pc, #328]	; (80057fc <HAL_DMA_IRQHandler+0x434>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d10a      	bne.n	80056cc <HAL_DMA_IRQHandler+0x304>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bf14      	ite	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2300      	moveq	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	e003      	b.n	80056d4 <HAL_DMA_IRQHandler+0x30c>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00d      	beq.n	80056f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2201      	movs	r2, #1
 80056e2:	409a      	lsls	r2, r3
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ec:	f043 0202 	orr.w	r2, r3, #2
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f8:	f003 031f 	and.w	r3, r3, #31
 80056fc:	2204      	movs	r2, #4
 80056fe:	409a      	lsls	r2, r3
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	4013      	ands	r3, r2
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 808f 	beq.w	8005828 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a2c      	ldr	r2, [pc, #176]	; (80057c0 <HAL_DMA_IRQHandler+0x3f8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d04a      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a2a      	ldr	r2, [pc, #168]	; (80057c4 <HAL_DMA_IRQHandler+0x3fc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d045      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a29      	ldr	r2, [pc, #164]	; (80057c8 <HAL_DMA_IRQHandler+0x400>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d040      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a27      	ldr	r2, [pc, #156]	; (80057cc <HAL_DMA_IRQHandler+0x404>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d03b      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a26      	ldr	r2, [pc, #152]	; (80057d0 <HAL_DMA_IRQHandler+0x408>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d036      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a24      	ldr	r2, [pc, #144]	; (80057d4 <HAL_DMA_IRQHandler+0x40c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d031      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a23      	ldr	r2, [pc, #140]	; (80057d8 <HAL_DMA_IRQHandler+0x410>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d02c      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a21      	ldr	r2, [pc, #132]	; (80057dc <HAL_DMA_IRQHandler+0x414>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d027      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a20      	ldr	r2, [pc, #128]	; (80057e0 <HAL_DMA_IRQHandler+0x418>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d022      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1e      	ldr	r2, [pc, #120]	; (80057e4 <HAL_DMA_IRQHandler+0x41c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d01d      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1d      	ldr	r2, [pc, #116]	; (80057e8 <HAL_DMA_IRQHandler+0x420>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d018      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1b      	ldr	r2, [pc, #108]	; (80057ec <HAL_DMA_IRQHandler+0x424>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1a      	ldr	r2, [pc, #104]	; (80057f0 <HAL_DMA_IRQHandler+0x428>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00e      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a18      	ldr	r2, [pc, #96]	; (80057f4 <HAL_DMA_IRQHandler+0x42c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d009      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a17      	ldr	r2, [pc, #92]	; (80057f8 <HAL_DMA_IRQHandler+0x430>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a15      	ldr	r2, [pc, #84]	; (80057fc <HAL_DMA_IRQHandler+0x434>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d12a      	bne.n	8005800 <HAL_DMA_IRQHandler+0x438>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bf14      	ite	ne
 80057b8:	2301      	movne	r3, #1
 80057ba:	2300      	moveq	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	e023      	b.n	8005808 <HAL_DMA_IRQHandler+0x440>
 80057c0:	40020010 	.word	0x40020010
 80057c4:	40020028 	.word	0x40020028
 80057c8:	40020040 	.word	0x40020040
 80057cc:	40020058 	.word	0x40020058
 80057d0:	40020070 	.word	0x40020070
 80057d4:	40020088 	.word	0x40020088
 80057d8:	400200a0 	.word	0x400200a0
 80057dc:	400200b8 	.word	0x400200b8
 80057e0:	40020410 	.word	0x40020410
 80057e4:	40020428 	.word	0x40020428
 80057e8:	40020440 	.word	0x40020440
 80057ec:	40020458 	.word	0x40020458
 80057f0:	40020470 	.word	0x40020470
 80057f4:	40020488 	.word	0x40020488
 80057f8:	400204a0 	.word	0x400204a0
 80057fc:	400204b8 	.word	0x400204b8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2300      	movs	r3, #0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00d      	beq.n	8005828 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	2204      	movs	r2, #4
 8005816:	409a      	lsls	r2, r3
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	f043 0204 	orr.w	r2, r3, #4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	2210      	movs	r2, #16
 8005832:	409a      	lsls	r2, r3
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	4013      	ands	r3, r2
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 80a6 	beq.w	800598a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a85      	ldr	r2, [pc, #532]	; (8005a58 <HAL_DMA_IRQHandler+0x690>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d04a      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a83      	ldr	r2, [pc, #524]	; (8005a5c <HAL_DMA_IRQHandler+0x694>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d045      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a82      	ldr	r2, [pc, #520]	; (8005a60 <HAL_DMA_IRQHandler+0x698>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d040      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a80      	ldr	r2, [pc, #512]	; (8005a64 <HAL_DMA_IRQHandler+0x69c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d03b      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a7f      	ldr	r2, [pc, #508]	; (8005a68 <HAL_DMA_IRQHandler+0x6a0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d036      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a7d      	ldr	r2, [pc, #500]	; (8005a6c <HAL_DMA_IRQHandler+0x6a4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d031      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a7c      	ldr	r2, [pc, #496]	; (8005a70 <HAL_DMA_IRQHandler+0x6a8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d02c      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a7a      	ldr	r2, [pc, #488]	; (8005a74 <HAL_DMA_IRQHandler+0x6ac>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d027      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a79      	ldr	r2, [pc, #484]	; (8005a78 <HAL_DMA_IRQHandler+0x6b0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d022      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a77      	ldr	r2, [pc, #476]	; (8005a7c <HAL_DMA_IRQHandler+0x6b4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01d      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a76      	ldr	r2, [pc, #472]	; (8005a80 <HAL_DMA_IRQHandler+0x6b8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d018      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a74      	ldr	r2, [pc, #464]	; (8005a84 <HAL_DMA_IRQHandler+0x6bc>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d013      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a73      	ldr	r2, [pc, #460]	; (8005a88 <HAL_DMA_IRQHandler+0x6c0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00e      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a71      	ldr	r2, [pc, #452]	; (8005a8c <HAL_DMA_IRQHandler+0x6c4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d009      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a70      	ldr	r2, [pc, #448]	; (8005a90 <HAL_DMA_IRQHandler+0x6c8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d004      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a6e      	ldr	r2, [pc, #440]	; (8005a94 <HAL_DMA_IRQHandler+0x6cc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d10a      	bne.n	80058f4 <HAL_DMA_IRQHandler+0x52c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bf14      	ite	ne
 80058ec:	2301      	movne	r3, #1
 80058ee:	2300      	moveq	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	e009      	b.n	8005908 <HAL_DMA_IRQHandler+0x540>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	bf14      	ite	ne
 8005902:	2301      	movne	r3, #1
 8005904:	2300      	moveq	r3, #0
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d03e      	beq.n	800598a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	2210      	movs	r2, #16
 8005916:	409a      	lsls	r2, r3
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d018      	beq.n	800595c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d108      	bne.n	800594a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d024      	beq.n	800598a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	4798      	blx	r3
 8005948:	e01f      	b.n	800598a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01b      	beq.n	800598a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	4798      	blx	r3
 800595a:	e016      	b.n	800598a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005966:	2b00      	cmp	r3, #0
 8005968:	d107      	bne.n	800597a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0208 	bic.w	r2, r2, #8
 8005978:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	2220      	movs	r2, #32
 8005994:	409a      	lsls	r2, r3
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	4013      	ands	r3, r2
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8110 	beq.w	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a2c      	ldr	r2, [pc, #176]	; (8005a58 <HAL_DMA_IRQHandler+0x690>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d04a      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a2b      	ldr	r2, [pc, #172]	; (8005a5c <HAL_DMA_IRQHandler+0x694>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d045      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a29      	ldr	r2, [pc, #164]	; (8005a60 <HAL_DMA_IRQHandler+0x698>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d040      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a28      	ldr	r2, [pc, #160]	; (8005a64 <HAL_DMA_IRQHandler+0x69c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d03b      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a26      	ldr	r2, [pc, #152]	; (8005a68 <HAL_DMA_IRQHandler+0x6a0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d036      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a25      	ldr	r2, [pc, #148]	; (8005a6c <HAL_DMA_IRQHandler+0x6a4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d031      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a23      	ldr	r2, [pc, #140]	; (8005a70 <HAL_DMA_IRQHandler+0x6a8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d02c      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a22      	ldr	r2, [pc, #136]	; (8005a74 <HAL_DMA_IRQHandler+0x6ac>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d027      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a20      	ldr	r2, [pc, #128]	; (8005a78 <HAL_DMA_IRQHandler+0x6b0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d022      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a1f      	ldr	r2, [pc, #124]	; (8005a7c <HAL_DMA_IRQHandler+0x6b4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d01d      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1d      	ldr	r2, [pc, #116]	; (8005a80 <HAL_DMA_IRQHandler+0x6b8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d018      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1c      	ldr	r2, [pc, #112]	; (8005a84 <HAL_DMA_IRQHandler+0x6bc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d013      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <HAL_DMA_IRQHandler+0x6c0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00e      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a19      	ldr	r2, [pc, #100]	; (8005a8c <HAL_DMA_IRQHandler+0x6c4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d009      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <HAL_DMA_IRQHandler+0x6c8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d004      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a16      	ldr	r2, [pc, #88]	; (8005a94 <HAL_DMA_IRQHandler+0x6cc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d12b      	bne.n	8005a98 <HAL_DMA_IRQHandler+0x6d0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bf14      	ite	ne
 8005a4e:	2301      	movne	r3, #1
 8005a50:	2300      	moveq	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	e02a      	b.n	8005aac <HAL_DMA_IRQHandler+0x6e4>
 8005a56:	bf00      	nop
 8005a58:	40020010 	.word	0x40020010
 8005a5c:	40020028 	.word	0x40020028
 8005a60:	40020040 	.word	0x40020040
 8005a64:	40020058 	.word	0x40020058
 8005a68:	40020070 	.word	0x40020070
 8005a6c:	40020088 	.word	0x40020088
 8005a70:	400200a0 	.word	0x400200a0
 8005a74:	400200b8 	.word	0x400200b8
 8005a78:	40020410 	.word	0x40020410
 8005a7c:	40020428 	.word	0x40020428
 8005a80:	40020440 	.word	0x40020440
 8005a84:	40020458 	.word	0x40020458
 8005a88:	40020470 	.word	0x40020470
 8005a8c:	40020488 	.word	0x40020488
 8005a90:	400204a0 	.word	0x400204a0
 8005a94:	400204b8 	.word	0x400204b8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bf14      	ite	ne
 8005aa6:	2301      	movne	r3, #1
 8005aa8:	2300      	moveq	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8087 	beq.w	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	2220      	movs	r2, #32
 8005abc:	409a      	lsls	r2, r3
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d139      	bne.n	8005b42 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0216 	bic.w	r2, r2, #22
 8005adc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695a      	ldr	r2, [r3, #20]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d103      	bne.n	8005afe <HAL_DMA_IRQHandler+0x736>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d007      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0208 	bic.w	r2, r2, #8
 8005b0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	223f      	movs	r2, #63	; 0x3f
 8005b18:	409a      	lsls	r2, r3
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 834a 	beq.w	80061cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
          }
          return;
 8005b40:	e344      	b.n	80061cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d018      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d108      	bne.n	8005b70 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d02c      	beq.n	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	4798      	blx	r3
 8005b6e:	e027      	b.n	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d023      	beq.n	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	4798      	blx	r3
 8005b80:	e01e      	b.n	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10f      	bne.n	8005bb0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0210 	bic.w	r2, r2, #16
 8005b9e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 8306 	beq.w	80061d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8088 	beq.w	8005ce8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a7a      	ldr	r2, [pc, #488]	; (8005dd0 <HAL_DMA_IRQHandler+0xa08>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d04a      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a79      	ldr	r2, [pc, #484]	; (8005dd4 <HAL_DMA_IRQHandler+0xa0c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d045      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a77      	ldr	r2, [pc, #476]	; (8005dd8 <HAL_DMA_IRQHandler+0xa10>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d040      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a76      	ldr	r2, [pc, #472]	; (8005ddc <HAL_DMA_IRQHandler+0xa14>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d03b      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a74      	ldr	r2, [pc, #464]	; (8005de0 <HAL_DMA_IRQHandler+0xa18>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d036      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a73      	ldr	r2, [pc, #460]	; (8005de4 <HAL_DMA_IRQHandler+0xa1c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d031      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a71      	ldr	r2, [pc, #452]	; (8005de8 <HAL_DMA_IRQHandler+0xa20>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d02c      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a70      	ldr	r2, [pc, #448]	; (8005dec <HAL_DMA_IRQHandler+0xa24>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d027      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a6e      	ldr	r2, [pc, #440]	; (8005df0 <HAL_DMA_IRQHandler+0xa28>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d022      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a6d      	ldr	r2, [pc, #436]	; (8005df4 <HAL_DMA_IRQHandler+0xa2c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d01d      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a6b      	ldr	r2, [pc, #428]	; (8005df8 <HAL_DMA_IRQHandler+0xa30>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d018      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a6a      	ldr	r2, [pc, #424]	; (8005dfc <HAL_DMA_IRQHandler+0xa34>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a68      	ldr	r2, [pc, #416]	; (8005e00 <HAL_DMA_IRQHandler+0xa38>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00e      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a67      	ldr	r2, [pc, #412]	; (8005e04 <HAL_DMA_IRQHandler+0xa3c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d009      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a65      	ldr	r2, [pc, #404]	; (8005e08 <HAL_DMA_IRQHandler+0xa40>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a64      	ldr	r2, [pc, #400]	; (8005e0c <HAL_DMA_IRQHandler+0xa44>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d108      	bne.n	8005c92 <HAL_DMA_IRQHandler+0x8ca>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0201 	bic.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	e007      	b.n	8005ca2 <HAL_DMA_IRQHandler+0x8da>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d307      	bcc.n	8005cbe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f2      	bne.n	8005ca2 <HAL_DMA_IRQHandler+0x8da>
 8005cbc:	e000      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005cbe:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d004      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2203      	movs	r2, #3
 8005cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005cde:	e003      	b.n	8005ce8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 8272 	beq.w	80061d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	4798      	blx	r3
 8005cfa:	e26c      	b.n	80061d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a43      	ldr	r2, [pc, #268]	; (8005e10 <HAL_DMA_IRQHandler+0xa48>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d022      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a42      	ldr	r2, [pc, #264]	; (8005e14 <HAL_DMA_IRQHandler+0xa4c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d01d      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a40      	ldr	r2, [pc, #256]	; (8005e18 <HAL_DMA_IRQHandler+0xa50>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d018      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a3f      	ldr	r2, [pc, #252]	; (8005e1c <HAL_DMA_IRQHandler+0xa54>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d013      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a3d      	ldr	r2, [pc, #244]	; (8005e20 <HAL_DMA_IRQHandler+0xa58>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00e      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a3c      	ldr	r2, [pc, #240]	; (8005e24 <HAL_DMA_IRQHandler+0xa5c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d009      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a3a      	ldr	r2, [pc, #232]	; (8005e28 <HAL_DMA_IRQHandler+0xa60>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a39      	ldr	r2, [pc, #228]	; (8005e2c <HAL_DMA_IRQHandler+0xa64>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d101      	bne.n	8005d50 <HAL_DMA_IRQHandler+0x988>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <HAL_DMA_IRQHandler+0x98a>
 8005d50:	2300      	movs	r3, #0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 823f 	beq.w	80061d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	2204      	movs	r2, #4
 8005d6a:	409a      	lsls	r2, r3
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80cd 	beq.w	8005f10 <HAL_DMA_IRQHandler+0xb48>
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 80c7 	beq.w	8005f10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	409a      	lsls	r2, r3
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d049      	beq.n	8005e30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8210 	beq.w	80061d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005db8:	e20a      	b.n	80061d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 8206 	beq.w	80061d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dcc:	e200      	b.n	80061d0 <HAL_DMA_IRQHandler+0xe08>
 8005dce:	bf00      	nop
 8005dd0:	40020010 	.word	0x40020010
 8005dd4:	40020028 	.word	0x40020028
 8005dd8:	40020040 	.word	0x40020040
 8005ddc:	40020058 	.word	0x40020058
 8005de0:	40020070 	.word	0x40020070
 8005de4:	40020088 	.word	0x40020088
 8005de8:	400200a0 	.word	0x400200a0
 8005dec:	400200b8 	.word	0x400200b8
 8005df0:	40020410 	.word	0x40020410
 8005df4:	40020428 	.word	0x40020428
 8005df8:	40020440 	.word	0x40020440
 8005dfc:	40020458 	.word	0x40020458
 8005e00:	40020470 	.word	0x40020470
 8005e04:	40020488 	.word	0x40020488
 8005e08:	400204a0 	.word	0x400204a0
 8005e0c:	400204b8 	.word	0x400204b8
 8005e10:	58025408 	.word	0x58025408
 8005e14:	5802541c 	.word	0x5802541c
 8005e18:	58025430 	.word	0x58025430
 8005e1c:	58025444 	.word	0x58025444
 8005e20:	58025458 	.word	0x58025458
 8005e24:	5802546c 	.word	0x5802546c
 8005e28:	58025480 	.word	0x58025480
 8005e2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d160      	bne.n	8005efc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a8c      	ldr	r2, [pc, #560]	; (8006070 <HAL_DMA_IRQHandler+0xca8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d04a      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a8a      	ldr	r2, [pc, #552]	; (8006074 <HAL_DMA_IRQHandler+0xcac>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d045      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a89      	ldr	r2, [pc, #548]	; (8006078 <HAL_DMA_IRQHandler+0xcb0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d040      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a87      	ldr	r2, [pc, #540]	; (800607c <HAL_DMA_IRQHandler+0xcb4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d03b      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a86      	ldr	r2, [pc, #536]	; (8006080 <HAL_DMA_IRQHandler+0xcb8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d036      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a84      	ldr	r2, [pc, #528]	; (8006084 <HAL_DMA_IRQHandler+0xcbc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d031      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a83      	ldr	r2, [pc, #524]	; (8006088 <HAL_DMA_IRQHandler+0xcc0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d02c      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a81      	ldr	r2, [pc, #516]	; (800608c <HAL_DMA_IRQHandler+0xcc4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d027      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a80      	ldr	r2, [pc, #512]	; (8006090 <HAL_DMA_IRQHandler+0xcc8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d022      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a7e      	ldr	r2, [pc, #504]	; (8006094 <HAL_DMA_IRQHandler+0xccc>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d01d      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a7d      	ldr	r2, [pc, #500]	; (8006098 <HAL_DMA_IRQHandler+0xcd0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d018      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a7b      	ldr	r2, [pc, #492]	; (800609c <HAL_DMA_IRQHandler+0xcd4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d013      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a7a      	ldr	r2, [pc, #488]	; (80060a0 <HAL_DMA_IRQHandler+0xcd8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00e      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a78      	ldr	r2, [pc, #480]	; (80060a4 <HAL_DMA_IRQHandler+0xcdc>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d009      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a77      	ldr	r2, [pc, #476]	; (80060a8 <HAL_DMA_IRQHandler+0xce0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d004      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a75      	ldr	r2, [pc, #468]	; (80060ac <HAL_DMA_IRQHandler+0xce4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d108      	bne.n	8005eec <HAL_DMA_IRQHandler+0xb24>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0208 	bic.w	r2, r2, #8
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	e007      	b.n	8005efc <HAL_DMA_IRQHandler+0xb34>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0204 	bic.w	r2, r2, #4
 8005efa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8165 	beq.w	80061d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f0e:	e15f      	b.n	80061d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2202      	movs	r2, #2
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80c5 	beq.w	80060b0 <HAL_DMA_IRQHandler+0xce8>
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80bf 	beq.w	80060b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f36:	f003 031f 	and.w	r3, r3, #31
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	409a      	lsls	r2, r3
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d018      	beq.n	8005f7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 813a 	beq.w	80061d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f68:	e134      	b.n	80061d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 8130 	beq.w	80061d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f7c:	e12a      	b.n	80061d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d168      	bne.n	800605a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a38      	ldr	r2, [pc, #224]	; (8006070 <HAL_DMA_IRQHandler+0xca8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d04a      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a37      	ldr	r2, [pc, #220]	; (8006074 <HAL_DMA_IRQHandler+0xcac>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d045      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a35      	ldr	r2, [pc, #212]	; (8006078 <HAL_DMA_IRQHandler+0xcb0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d040      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a34      	ldr	r2, [pc, #208]	; (800607c <HAL_DMA_IRQHandler+0xcb4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d03b      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a32      	ldr	r2, [pc, #200]	; (8006080 <HAL_DMA_IRQHandler+0xcb8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d036      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a31      	ldr	r2, [pc, #196]	; (8006084 <HAL_DMA_IRQHandler+0xcbc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d031      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2f      	ldr	r2, [pc, #188]	; (8006088 <HAL_DMA_IRQHandler+0xcc0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d02c      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2e      	ldr	r2, [pc, #184]	; (800608c <HAL_DMA_IRQHandler+0xcc4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d027      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a2c      	ldr	r2, [pc, #176]	; (8006090 <HAL_DMA_IRQHandler+0xcc8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d022      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a2b      	ldr	r2, [pc, #172]	; (8006094 <HAL_DMA_IRQHandler+0xccc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d01d      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a29      	ldr	r2, [pc, #164]	; (8006098 <HAL_DMA_IRQHandler+0xcd0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d018      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a28      	ldr	r2, [pc, #160]	; (800609c <HAL_DMA_IRQHandler+0xcd4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d013      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a26      	ldr	r2, [pc, #152]	; (80060a0 <HAL_DMA_IRQHandler+0xcd8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00e      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a25      	ldr	r2, [pc, #148]	; (80060a4 <HAL_DMA_IRQHandler+0xcdc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d009      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a23      	ldr	r2, [pc, #140]	; (80060a8 <HAL_DMA_IRQHandler+0xce0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <HAL_DMA_IRQHandler+0xc60>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a22      	ldr	r2, [pc, #136]	; (80060ac <HAL_DMA_IRQHandler+0xce4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d108      	bne.n	800603a <HAL_DMA_IRQHandler+0xc72>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0214 	bic.w	r2, r2, #20
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e007      	b.n	800604a <HAL_DMA_IRQHandler+0xc82>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 020a 	bic.w	r2, r2, #10
 8006048:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80b8 	beq.w	80061d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800606c:	e0b2      	b.n	80061d4 <HAL_DMA_IRQHandler+0xe0c>
 800606e:	bf00      	nop
 8006070:	40020010 	.word	0x40020010
 8006074:	40020028 	.word	0x40020028
 8006078:	40020040 	.word	0x40020040
 800607c:	40020058 	.word	0x40020058
 8006080:	40020070 	.word	0x40020070
 8006084:	40020088 	.word	0x40020088
 8006088:	400200a0 	.word	0x400200a0
 800608c:	400200b8 	.word	0x400200b8
 8006090:	40020410 	.word	0x40020410
 8006094:	40020428 	.word	0x40020428
 8006098:	40020440 	.word	0x40020440
 800609c:	40020458 	.word	0x40020458
 80060a0:	40020470 	.word	0x40020470
 80060a4:	40020488 	.word	0x40020488
 80060a8:	400204a0 	.word	0x400204a0
 80060ac:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b4:	f003 031f 	and.w	r3, r3, #31
 80060b8:	2208      	movs	r2, #8
 80060ba:	409a      	lsls	r2, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4013      	ands	r3, r2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8088 	beq.w	80061d6 <HAL_DMA_IRQHandler+0xe0e>
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 8082 	beq.w	80061d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a41      	ldr	r2, [pc, #260]	; (80061dc <HAL_DMA_IRQHandler+0xe14>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d04a      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a3f      	ldr	r2, [pc, #252]	; (80061e0 <HAL_DMA_IRQHandler+0xe18>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d045      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a3e      	ldr	r2, [pc, #248]	; (80061e4 <HAL_DMA_IRQHandler+0xe1c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d040      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a3c      	ldr	r2, [pc, #240]	; (80061e8 <HAL_DMA_IRQHandler+0xe20>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d03b      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a3b      	ldr	r2, [pc, #236]	; (80061ec <HAL_DMA_IRQHandler+0xe24>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d036      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a39      	ldr	r2, [pc, #228]	; (80061f0 <HAL_DMA_IRQHandler+0xe28>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d031      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a38      	ldr	r2, [pc, #224]	; (80061f4 <HAL_DMA_IRQHandler+0xe2c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d02c      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a36      	ldr	r2, [pc, #216]	; (80061f8 <HAL_DMA_IRQHandler+0xe30>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d027      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a35      	ldr	r2, [pc, #212]	; (80061fc <HAL_DMA_IRQHandler+0xe34>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d022      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a33      	ldr	r2, [pc, #204]	; (8006200 <HAL_DMA_IRQHandler+0xe38>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d01d      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a32      	ldr	r2, [pc, #200]	; (8006204 <HAL_DMA_IRQHandler+0xe3c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d018      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a30      	ldr	r2, [pc, #192]	; (8006208 <HAL_DMA_IRQHandler+0xe40>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a2f      	ldr	r2, [pc, #188]	; (800620c <HAL_DMA_IRQHandler+0xe44>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00e      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2d      	ldr	r2, [pc, #180]	; (8006210 <HAL_DMA_IRQHandler+0xe48>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d009      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2c      	ldr	r2, [pc, #176]	; (8006214 <HAL_DMA_IRQHandler+0xe4c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d004      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a2a      	ldr	r2, [pc, #168]	; (8006218 <HAL_DMA_IRQHandler+0xe50>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d108      	bne.n	8006184 <HAL_DMA_IRQHandler+0xdbc>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 021c 	bic.w	r2, r2, #28
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	e007      	b.n	8006194 <HAL_DMA_IRQHandler+0xdcc>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 020e 	bic.w	r2, r2, #14
 8006192:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006198:	f003 031f 	and.w	r3, r3, #31
 800619c:	2201      	movs	r2, #1
 800619e:	409a      	lsls	r2, r3
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	4798      	blx	r3
 80061ca:	e004      	b.n	80061d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80061cc:	bf00      	nop
 80061ce:	e002      	b.n	80061d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061d0:	bf00      	nop
 80061d2:	e000      	b.n	80061d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061d6:	3728      	adds	r7, #40	; 0x28
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40020010 	.word	0x40020010
 80061e0:	40020028 	.word	0x40020028
 80061e4:	40020040 	.word	0x40020040
 80061e8:	40020058 	.word	0x40020058
 80061ec:	40020070 	.word	0x40020070
 80061f0:	40020088 	.word	0x40020088
 80061f4:	400200a0 	.word	0x400200a0
 80061f8:	400200b8 	.word	0x400200b8
 80061fc:	40020410 	.word	0x40020410
 8006200:	40020428 	.word	0x40020428
 8006204:	40020440 	.word	0x40020440
 8006208:	40020458 	.word	0x40020458
 800620c:	40020470 	.word	0x40020470
 8006210:	40020488 	.word	0x40020488
 8006214:	400204a0 	.word	0x400204a0
 8006218:	400204b8 	.word	0x400204b8

0800621c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006234:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a84      	ldr	r2, [pc, #528]	; (800644c <DMA_SetConfig+0x230>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d072      	beq.n	8006326 <DMA_SetConfig+0x10a>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a82      	ldr	r2, [pc, #520]	; (8006450 <DMA_SetConfig+0x234>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d06d      	beq.n	8006326 <DMA_SetConfig+0x10a>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a81      	ldr	r2, [pc, #516]	; (8006454 <DMA_SetConfig+0x238>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d068      	beq.n	8006326 <DMA_SetConfig+0x10a>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a7f      	ldr	r2, [pc, #508]	; (8006458 <DMA_SetConfig+0x23c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d063      	beq.n	8006326 <DMA_SetConfig+0x10a>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a7e      	ldr	r2, [pc, #504]	; (800645c <DMA_SetConfig+0x240>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d05e      	beq.n	8006326 <DMA_SetConfig+0x10a>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a7c      	ldr	r2, [pc, #496]	; (8006460 <DMA_SetConfig+0x244>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d059      	beq.n	8006326 <DMA_SetConfig+0x10a>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a7b      	ldr	r2, [pc, #492]	; (8006464 <DMA_SetConfig+0x248>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d054      	beq.n	8006326 <DMA_SetConfig+0x10a>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a79      	ldr	r2, [pc, #484]	; (8006468 <DMA_SetConfig+0x24c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d04f      	beq.n	8006326 <DMA_SetConfig+0x10a>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a78      	ldr	r2, [pc, #480]	; (800646c <DMA_SetConfig+0x250>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d04a      	beq.n	8006326 <DMA_SetConfig+0x10a>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a76      	ldr	r2, [pc, #472]	; (8006470 <DMA_SetConfig+0x254>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d045      	beq.n	8006326 <DMA_SetConfig+0x10a>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a75      	ldr	r2, [pc, #468]	; (8006474 <DMA_SetConfig+0x258>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d040      	beq.n	8006326 <DMA_SetConfig+0x10a>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a73      	ldr	r2, [pc, #460]	; (8006478 <DMA_SetConfig+0x25c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d03b      	beq.n	8006326 <DMA_SetConfig+0x10a>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a72      	ldr	r2, [pc, #456]	; (800647c <DMA_SetConfig+0x260>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d036      	beq.n	8006326 <DMA_SetConfig+0x10a>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a70      	ldr	r2, [pc, #448]	; (8006480 <DMA_SetConfig+0x264>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d031      	beq.n	8006326 <DMA_SetConfig+0x10a>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a6f      	ldr	r2, [pc, #444]	; (8006484 <DMA_SetConfig+0x268>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d02c      	beq.n	8006326 <DMA_SetConfig+0x10a>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a6d      	ldr	r2, [pc, #436]	; (8006488 <DMA_SetConfig+0x26c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d027      	beq.n	8006326 <DMA_SetConfig+0x10a>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a6c      	ldr	r2, [pc, #432]	; (800648c <DMA_SetConfig+0x270>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d022      	beq.n	8006326 <DMA_SetConfig+0x10a>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a6a      	ldr	r2, [pc, #424]	; (8006490 <DMA_SetConfig+0x274>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d01d      	beq.n	8006326 <DMA_SetConfig+0x10a>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a69      	ldr	r2, [pc, #420]	; (8006494 <DMA_SetConfig+0x278>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d018      	beq.n	8006326 <DMA_SetConfig+0x10a>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a67      	ldr	r2, [pc, #412]	; (8006498 <DMA_SetConfig+0x27c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d013      	beq.n	8006326 <DMA_SetConfig+0x10a>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a66      	ldr	r2, [pc, #408]	; (800649c <DMA_SetConfig+0x280>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00e      	beq.n	8006326 <DMA_SetConfig+0x10a>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a64      	ldr	r2, [pc, #400]	; (80064a0 <DMA_SetConfig+0x284>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d009      	beq.n	8006326 <DMA_SetConfig+0x10a>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a63      	ldr	r2, [pc, #396]	; (80064a4 <DMA_SetConfig+0x288>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d004      	beq.n	8006326 <DMA_SetConfig+0x10a>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a61      	ldr	r2, [pc, #388]	; (80064a8 <DMA_SetConfig+0x28c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d101      	bne.n	800632a <DMA_SetConfig+0x10e>
 8006326:	2301      	movs	r3, #1
 8006328:	e000      	b.n	800632c <DMA_SetConfig+0x110>
 800632a:	2300      	movs	r3, #0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00d      	beq.n	800634c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006338:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800633e:	2b00      	cmp	r3, #0
 8006340:	d004      	beq.n	800634c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800634a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a3e      	ldr	r2, [pc, #248]	; (800644c <DMA_SetConfig+0x230>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d04a      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a3d      	ldr	r2, [pc, #244]	; (8006450 <DMA_SetConfig+0x234>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d045      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a3b      	ldr	r2, [pc, #236]	; (8006454 <DMA_SetConfig+0x238>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d040      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a3a      	ldr	r2, [pc, #232]	; (8006458 <DMA_SetConfig+0x23c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d03b      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a38      	ldr	r2, [pc, #224]	; (800645c <DMA_SetConfig+0x240>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d036      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a37      	ldr	r2, [pc, #220]	; (8006460 <DMA_SetConfig+0x244>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d031      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a35      	ldr	r2, [pc, #212]	; (8006464 <DMA_SetConfig+0x248>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d02c      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a34      	ldr	r2, [pc, #208]	; (8006468 <DMA_SetConfig+0x24c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d027      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a32      	ldr	r2, [pc, #200]	; (800646c <DMA_SetConfig+0x250>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d022      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a31      	ldr	r2, [pc, #196]	; (8006470 <DMA_SetConfig+0x254>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d01d      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a2f      	ldr	r2, [pc, #188]	; (8006474 <DMA_SetConfig+0x258>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d018      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a2e      	ldr	r2, [pc, #184]	; (8006478 <DMA_SetConfig+0x25c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d013      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a2c      	ldr	r2, [pc, #176]	; (800647c <DMA_SetConfig+0x260>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d00e      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a2b      	ldr	r2, [pc, #172]	; (8006480 <DMA_SetConfig+0x264>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d009      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a29      	ldr	r2, [pc, #164]	; (8006484 <DMA_SetConfig+0x268>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d004      	beq.n	80063ec <DMA_SetConfig+0x1d0>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a28      	ldr	r2, [pc, #160]	; (8006488 <DMA_SetConfig+0x26c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d101      	bne.n	80063f0 <DMA_SetConfig+0x1d4>
 80063ec:	2301      	movs	r3, #1
 80063ee:	e000      	b.n	80063f2 <DMA_SetConfig+0x1d6>
 80063f0:	2300      	movs	r3, #0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d05a      	beq.n	80064ac <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	223f      	movs	r2, #63	; 0x3f
 8006400:	409a      	lsls	r2, r3
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006414:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d108      	bne.n	8006438 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006436:	e087      	b.n	8006548 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	60da      	str	r2, [r3, #12]
}
 8006448:	e07e      	b.n	8006548 <DMA_SetConfig+0x32c>
 800644a:	bf00      	nop
 800644c:	40020010 	.word	0x40020010
 8006450:	40020028 	.word	0x40020028
 8006454:	40020040 	.word	0x40020040
 8006458:	40020058 	.word	0x40020058
 800645c:	40020070 	.word	0x40020070
 8006460:	40020088 	.word	0x40020088
 8006464:	400200a0 	.word	0x400200a0
 8006468:	400200b8 	.word	0x400200b8
 800646c:	40020410 	.word	0x40020410
 8006470:	40020428 	.word	0x40020428
 8006474:	40020440 	.word	0x40020440
 8006478:	40020458 	.word	0x40020458
 800647c:	40020470 	.word	0x40020470
 8006480:	40020488 	.word	0x40020488
 8006484:	400204a0 	.word	0x400204a0
 8006488:	400204b8 	.word	0x400204b8
 800648c:	58025408 	.word	0x58025408
 8006490:	5802541c 	.word	0x5802541c
 8006494:	58025430 	.word	0x58025430
 8006498:	58025444 	.word	0x58025444
 800649c:	58025458 	.word	0x58025458
 80064a0:	5802546c 	.word	0x5802546c
 80064a4:	58025480 	.word	0x58025480
 80064a8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a28      	ldr	r2, [pc, #160]	; (8006554 <DMA_SetConfig+0x338>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d022      	beq.n	80064fc <DMA_SetConfig+0x2e0>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a27      	ldr	r2, [pc, #156]	; (8006558 <DMA_SetConfig+0x33c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d01d      	beq.n	80064fc <DMA_SetConfig+0x2e0>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a25      	ldr	r2, [pc, #148]	; (800655c <DMA_SetConfig+0x340>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d018      	beq.n	80064fc <DMA_SetConfig+0x2e0>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a24      	ldr	r2, [pc, #144]	; (8006560 <DMA_SetConfig+0x344>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d013      	beq.n	80064fc <DMA_SetConfig+0x2e0>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a22      	ldr	r2, [pc, #136]	; (8006564 <DMA_SetConfig+0x348>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00e      	beq.n	80064fc <DMA_SetConfig+0x2e0>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a21      	ldr	r2, [pc, #132]	; (8006568 <DMA_SetConfig+0x34c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d009      	beq.n	80064fc <DMA_SetConfig+0x2e0>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1f      	ldr	r2, [pc, #124]	; (800656c <DMA_SetConfig+0x350>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d004      	beq.n	80064fc <DMA_SetConfig+0x2e0>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1e      	ldr	r2, [pc, #120]	; (8006570 <DMA_SetConfig+0x354>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d101      	bne.n	8006500 <DMA_SetConfig+0x2e4>
 80064fc:	2301      	movs	r3, #1
 80064fe:	e000      	b.n	8006502 <DMA_SetConfig+0x2e6>
 8006500:	2300      	movs	r3, #0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d020      	beq.n	8006548 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	2201      	movs	r2, #1
 8006510:	409a      	lsls	r2, r3
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d108      	bne.n	8006538 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	60da      	str	r2, [r3, #12]
}
 8006536:	e007      	b.n	8006548 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	60da      	str	r2, [r3, #12]
}
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	58025408 	.word	0x58025408
 8006558:	5802541c 	.word	0x5802541c
 800655c:	58025430 	.word	0x58025430
 8006560:	58025444 	.word	0x58025444
 8006564:	58025458 	.word	0x58025458
 8006568:	5802546c 	.word	0x5802546c
 800656c:	58025480 	.word	0x58025480
 8006570:	58025494 	.word	0x58025494

08006574 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a42      	ldr	r2, [pc, #264]	; (800668c <DMA_CalcBaseAndBitshift+0x118>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d04a      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a41      	ldr	r2, [pc, #260]	; (8006690 <DMA_CalcBaseAndBitshift+0x11c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d045      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a3f      	ldr	r2, [pc, #252]	; (8006694 <DMA_CalcBaseAndBitshift+0x120>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d040      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a3e      	ldr	r2, [pc, #248]	; (8006698 <DMA_CalcBaseAndBitshift+0x124>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d03b      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a3c      	ldr	r2, [pc, #240]	; (800669c <DMA_CalcBaseAndBitshift+0x128>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d036      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a3b      	ldr	r2, [pc, #236]	; (80066a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d031      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a39      	ldr	r2, [pc, #228]	; (80066a4 <DMA_CalcBaseAndBitshift+0x130>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d02c      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a38      	ldr	r2, [pc, #224]	; (80066a8 <DMA_CalcBaseAndBitshift+0x134>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d027      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a36      	ldr	r2, [pc, #216]	; (80066ac <DMA_CalcBaseAndBitshift+0x138>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d022      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a35      	ldr	r2, [pc, #212]	; (80066b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d01d      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a33      	ldr	r2, [pc, #204]	; (80066b4 <DMA_CalcBaseAndBitshift+0x140>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d018      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a32      	ldr	r2, [pc, #200]	; (80066b8 <DMA_CalcBaseAndBitshift+0x144>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d013      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a30      	ldr	r2, [pc, #192]	; (80066bc <DMA_CalcBaseAndBitshift+0x148>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00e      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a2f      	ldr	r2, [pc, #188]	; (80066c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d009      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a2d      	ldr	r2, [pc, #180]	; (80066c4 <DMA_CalcBaseAndBitshift+0x150>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d004      	beq.n	800661c <DMA_CalcBaseAndBitshift+0xa8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a2c      	ldr	r2, [pc, #176]	; (80066c8 <DMA_CalcBaseAndBitshift+0x154>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d101      	bne.n	8006620 <DMA_CalcBaseAndBitshift+0xac>
 800661c:	2301      	movs	r3, #1
 800661e:	e000      	b.n	8006622 <DMA_CalcBaseAndBitshift+0xae>
 8006620:	2300      	movs	r3, #0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d024      	beq.n	8006670 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	b2db      	uxtb	r3, r3
 800662c:	3b10      	subs	r3, #16
 800662e:	4a27      	ldr	r2, [pc, #156]	; (80066cc <DMA_CalcBaseAndBitshift+0x158>)
 8006630:	fba2 2303 	umull	r2, r3, r2, r3
 8006634:	091b      	lsrs	r3, r3, #4
 8006636:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	4a24      	ldr	r2, [pc, #144]	; (80066d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006640:	5cd3      	ldrb	r3, [r2, r3]
 8006642:	461a      	mov	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b03      	cmp	r3, #3
 800664c:	d908      	bls.n	8006660 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	4b1f      	ldr	r3, [pc, #124]	; (80066d4 <DMA_CalcBaseAndBitshift+0x160>)
 8006656:	4013      	ands	r3, r2
 8006658:	1d1a      	adds	r2, r3, #4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	659a      	str	r2, [r3, #88]	; 0x58
 800665e:	e00d      	b.n	800667c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <DMA_CalcBaseAndBitshift+0x160>)
 8006668:	4013      	ands	r3, r2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6593      	str	r3, [r2, #88]	; 0x58
 800666e:	e005      	b.n	800667c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	40020010 	.word	0x40020010
 8006690:	40020028 	.word	0x40020028
 8006694:	40020040 	.word	0x40020040
 8006698:	40020058 	.word	0x40020058
 800669c:	40020070 	.word	0x40020070
 80066a0:	40020088 	.word	0x40020088
 80066a4:	400200a0 	.word	0x400200a0
 80066a8:	400200b8 	.word	0x400200b8
 80066ac:	40020410 	.word	0x40020410
 80066b0:	40020428 	.word	0x40020428
 80066b4:	40020440 	.word	0x40020440
 80066b8:	40020458 	.word	0x40020458
 80066bc:	40020470 	.word	0x40020470
 80066c0:	40020488 	.word	0x40020488
 80066c4:	400204a0 	.word	0x400204a0
 80066c8:	400204b8 	.word	0x400204b8
 80066cc:	aaaaaaab 	.word	0xaaaaaaab
 80066d0:	0801af24 	.word	0x0801af24
 80066d4:	fffffc00 	.word	0xfffffc00

080066d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d120      	bne.n	800672e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d858      	bhi.n	80067a6 <DMA_CheckFifoParam+0xce>
 80066f4:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <DMA_CheckFifoParam+0x24>)
 80066f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fa:	bf00      	nop
 80066fc:	0800670d 	.word	0x0800670d
 8006700:	0800671f 	.word	0x0800671f
 8006704:	0800670d 	.word	0x0800670d
 8006708:	080067a7 	.word	0x080067a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d048      	beq.n	80067aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800671c:	e045      	b.n	80067aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006722:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006726:	d142      	bne.n	80067ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800672c:	e03f      	b.n	80067ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006736:	d123      	bne.n	8006780 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	2b03      	cmp	r3, #3
 800673e:	d838      	bhi.n	80067b2 <DMA_CheckFifoParam+0xda>
 8006740:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <DMA_CheckFifoParam+0x70>)
 8006742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006746:	bf00      	nop
 8006748:	08006759 	.word	0x08006759
 800674c:	0800675f 	.word	0x0800675f
 8006750:	08006759 	.word	0x08006759
 8006754:	08006771 	.word	0x08006771
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	73fb      	strb	r3, [r7, #15]
        break;
 800675c:	e030      	b.n	80067c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d025      	beq.n	80067b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800676e:	e022      	b.n	80067b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006778:	d11f      	bne.n	80067ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800677e:	e01c      	b.n	80067ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006784:	2b02      	cmp	r3, #2
 8006786:	d902      	bls.n	800678e <DMA_CheckFifoParam+0xb6>
 8006788:	2b03      	cmp	r3, #3
 800678a:	d003      	beq.n	8006794 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800678c:	e018      	b.n	80067c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	73fb      	strb	r3, [r7, #15]
        break;
 8006792:	e015      	b.n	80067c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00e      	beq.n	80067be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	73fb      	strb	r3, [r7, #15]
    break;
 80067a4:	e00b      	b.n	80067be <DMA_CheckFifoParam+0xe6>
        break;
 80067a6:	bf00      	nop
 80067a8:	e00a      	b.n	80067c0 <DMA_CheckFifoParam+0xe8>
        break;
 80067aa:	bf00      	nop
 80067ac:	e008      	b.n	80067c0 <DMA_CheckFifoParam+0xe8>
        break;
 80067ae:	bf00      	nop
 80067b0:	e006      	b.n	80067c0 <DMA_CheckFifoParam+0xe8>
        break;
 80067b2:	bf00      	nop
 80067b4:	e004      	b.n	80067c0 <DMA_CheckFifoParam+0xe8>
        break;
 80067b6:	bf00      	nop
 80067b8:	e002      	b.n	80067c0 <DMA_CheckFifoParam+0xe8>
        break;
 80067ba:	bf00      	nop
 80067bc:	e000      	b.n	80067c0 <DMA_CheckFifoParam+0xe8>
    break;
 80067be:	bf00      	nop
    }
  }

  return status;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop

080067d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a38      	ldr	r2, [pc, #224]	; (80068c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d022      	beq.n	800682e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a36      	ldr	r2, [pc, #216]	; (80068c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d01d      	beq.n	800682e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a35      	ldr	r2, [pc, #212]	; (80068cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d018      	beq.n	800682e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a33      	ldr	r2, [pc, #204]	; (80068d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d013      	beq.n	800682e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a32      	ldr	r2, [pc, #200]	; (80068d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00e      	beq.n	800682e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a30      	ldr	r2, [pc, #192]	; (80068d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d009      	beq.n	800682e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a2f      	ldr	r2, [pc, #188]	; (80068dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d004      	beq.n	800682e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a2d      	ldr	r2, [pc, #180]	; (80068e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d101      	bne.n	8006832 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006832:	2300      	movs	r3, #0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01a      	beq.n	800686e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	b2db      	uxtb	r3, r3
 800683e:	3b08      	subs	r3, #8
 8006840:	4a28      	ldr	r2, [pc, #160]	; (80068e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006842:	fba2 2303 	umull	r2, r3, r2, r3
 8006846:	091b      	lsrs	r3, r3, #4
 8006848:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4b26      	ldr	r3, [pc, #152]	; (80068e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	461a      	mov	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a24      	ldr	r2, [pc, #144]	; (80068ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800685c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	2201      	movs	r2, #1
 8006866:	409a      	lsls	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800686c:	e024      	b.n	80068b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	3b10      	subs	r3, #16
 8006876:	4a1e      	ldr	r2, [pc, #120]	; (80068f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006878:	fba2 2303 	umull	r2, r3, r2, r3
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4a1c      	ldr	r2, [pc, #112]	; (80068f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d806      	bhi.n	8006896 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	4a1b      	ldr	r2, [pc, #108]	; (80068f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d902      	bls.n	8006896 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3308      	adds	r3, #8
 8006894:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4b18      	ldr	r3, [pc, #96]	; (80068fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	461a      	mov	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a16      	ldr	r2, [pc, #88]	; (8006900 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80068a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 031f 	and.w	r3, r3, #31
 80068b0:	2201      	movs	r2, #1
 80068b2:	409a      	lsls	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068b8:	bf00      	nop
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	58025408 	.word	0x58025408
 80068c8:	5802541c 	.word	0x5802541c
 80068cc:	58025430 	.word	0x58025430
 80068d0:	58025444 	.word	0x58025444
 80068d4:	58025458 	.word	0x58025458
 80068d8:	5802546c 	.word	0x5802546c
 80068dc:	58025480 	.word	0x58025480
 80068e0:	58025494 	.word	0x58025494
 80068e4:	cccccccd 	.word	0xcccccccd
 80068e8:	16009600 	.word	0x16009600
 80068ec:	58025880 	.word	0x58025880
 80068f0:	aaaaaaab 	.word	0xaaaaaaab
 80068f4:	400204b8 	.word	0x400204b8
 80068f8:	4002040f 	.word	0x4002040f
 80068fc:	10008200 	.word	0x10008200
 8006900:	40020880 	.word	0x40020880

08006904 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d04a      	beq.n	80069b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b08      	cmp	r3, #8
 800691e:	d847      	bhi.n	80069b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a25      	ldr	r2, [pc, #148]	; (80069bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d022      	beq.n	8006970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a24      	ldr	r2, [pc, #144]	; (80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d01d      	beq.n	8006970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a22      	ldr	r2, [pc, #136]	; (80069c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d018      	beq.n	8006970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a21      	ldr	r2, [pc, #132]	; (80069c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d013      	beq.n	8006970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1f      	ldr	r2, [pc, #124]	; (80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00e      	beq.n	8006970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1e      	ldr	r2, [pc, #120]	; (80069d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d009      	beq.n	8006970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1c      	ldr	r2, [pc, #112]	; (80069d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1b      	ldr	r2, [pc, #108]	; (80069d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d101      	bne.n	8006974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006974:	2300      	movs	r3, #0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4b17      	ldr	r3, [pc, #92]	; (80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	461a      	mov	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800698c:	671a      	str	r2, [r3, #112]	; 0x70
 800698e:	e009      	b.n	80069a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	461a      	mov	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a11      	ldr	r2, [pc, #68]	; (80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	2201      	movs	r2, #1
 80069aa:	409a      	lsls	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80069b0:	bf00      	nop
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	58025408 	.word	0x58025408
 80069c0:	5802541c 	.word	0x5802541c
 80069c4:	58025430 	.word	0x58025430
 80069c8:	58025444 	.word	0x58025444
 80069cc:	58025458 	.word	0x58025458
 80069d0:	5802546c 	.word	0x5802546c
 80069d4:	58025480 	.word	0x58025480
 80069d8:	58025494 	.word	0x58025494
 80069dc:	1600963f 	.word	0x1600963f
 80069e0:	58025940 	.word	0x58025940
 80069e4:	1000823f 	.word	0x1000823f
 80069e8:	40020940 	.word	0x40020940

080069ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b098      	sub	sp, #96	; 0x60
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80069f4:	4a84      	ldr	r2, [pc, #528]	; (8006c08 <HAL_FDCAN_Init+0x21c>)
 80069f6:	f107 030c 	add.w	r3, r7, #12
 80069fa:	4611      	mov	r1, r2
 80069fc:	224c      	movs	r2, #76	; 0x4c
 80069fe:	4618      	mov	r0, r3
 8006a00:	f012 fd28 	bl	8019454 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e1ca      	b.n	8006da4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a7e      	ldr	r2, [pc, #504]	; (8006c0c <HAL_FDCAN_Init+0x220>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d106      	bne.n	8006a26 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006a20:	461a      	mov	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fd f94e 	bl	8003cdc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0210 	bic.w	r2, r2, #16
 8006a4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a50:	f7fd fdaa 	bl	80045a8 <HAL_GetTick>
 8006a54:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a56:	e014      	b.n	8006a82 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a58:	f7fd fda6 	bl	80045a8 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b0a      	cmp	r3, #10
 8006a64:	d90d      	bls.n	8006a82 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a6c:	f043 0201 	orr.w	r2, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2203      	movs	r2, #3
 8006a7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e190      	b.n	8006da4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f003 0308 	and.w	r3, r3, #8
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d0e3      	beq.n	8006a58 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006aa0:	f7fd fd82 	bl	80045a8 <HAL_GetTick>
 8006aa4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006aa6:	e014      	b.n	8006ad2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006aa8:	f7fd fd7e 	bl	80045a8 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b0a      	cmp	r3, #10
 8006ab4:	d90d      	bls.n	8006ad2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006abc:	f043 0201 	orr.w	r2, r3, #1
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2203      	movs	r2, #3
 8006aca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e168      	b.n	8006da4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0e3      	beq.n	8006aa8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699a      	ldr	r2, [r3, #24]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0202 	orr.w	r2, r2, #2
 8006aee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7c1b      	ldrb	r3, [r3, #16]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d108      	bne.n	8006b0a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b06:	619a      	str	r2, [r3, #24]
 8006b08:	e007      	b.n	8006b1a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699a      	ldr	r2, [r3, #24]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b18:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	7c5b      	ldrb	r3, [r3, #17]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d108      	bne.n	8006b34 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	699a      	ldr	r2, [r3, #24]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b30:	619a      	str	r2, [r3, #24]
 8006b32:	e007      	b.n	8006b44 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b42:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	7c9b      	ldrb	r3, [r3, #18]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d108      	bne.n	8006b5e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b5a:	619a      	str	r2, [r3, #24]
 8006b5c:	e007      	b.n	8006b6e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	699a      	ldr	r2, [r3, #24]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b6c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006b92:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0210 	bic.w	r2, r2, #16
 8006ba2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d108      	bne.n	8006bbe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0204 	orr.w	r2, r2, #4
 8006bba:	619a      	str	r2, [r3, #24]
 8006bbc:	e030      	b.n	8006c20 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d02c      	beq.n	8006c20 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d020      	beq.n	8006c10 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	699a      	ldr	r2, [r3, #24]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bdc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0210 	orr.w	r2, r2, #16
 8006bec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d114      	bne.n	8006c20 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699a      	ldr	r2, [r3, #24]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0220 	orr.w	r2, r2, #32
 8006c04:	619a      	str	r2, [r3, #24]
 8006c06:	e00b      	b.n	8006c20 <HAL_FDCAN_Init+0x234>
 8006c08:	0801ae30 	.word	0x0801ae30
 8006c0c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0220 	orr.w	r2, r2, #32
 8006c1e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c30:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c38:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c48:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c4a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c54:	d115      	bne.n	8006c82 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	3b01      	subs	r3, #1
 8006c62:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c64:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006c6e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	3b01      	subs	r3, #1
 8006c78:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006c7e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c80:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca8:	4413      	add	r3, r2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d012      	beq.n	8006cd4 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006cb6:	f023 0107 	bic.w	r1, r3, #7
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d012      	beq.n	8006d02 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006ce4:	f023 0107 	bic.w	r1, r3, #7
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d013      	beq.n	8006d32 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d12:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d20:	4413      	add	r3, r2
 8006d22:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d26:	011a      	lsls	r2, r3, #4
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d013      	beq.n	8006d62 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d42:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d50:	4413      	add	r3, r2
 8006d52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d56:	021a      	lsls	r2, r3, #8
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a11      	ldr	r2, [pc, #68]	; (8006dac <HAL_FDCAN_Init+0x3c0>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d107      	bne.n	8006d7c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f022 0203 	bic.w	r2, r2, #3
 8006d7a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fddf 	bl	8007958 <FDCAN_CalcultateRamBlockAddresses>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006da0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3760      	adds	r7, #96	; 0x60
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	4000a000 	.word	0x4000a000

08006db0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006dc0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d002      	beq.n	8006dce <HAL_FDCAN_ConfigFilter+0x1e>
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d157      	bne.n	8006e7e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d12b      	bne.n	8006e2e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2b07      	cmp	r3, #7
 8006ddc:	d10d      	bne.n	8006dfa <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8006dea:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006df0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8006df2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	e00e      	b.n	8006e18 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e06:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8006e0e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	e025      	b.n	8006e7a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	075a      	lsls	r2, r3, #29
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	2b07      	cmp	r3, #7
 8006e42:	d103      	bne.n	8006e4c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	e006      	b.n	8006e5a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	079a      	lsls	r2, r3, #30
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	4413      	add	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	3304      	adds	r3, #4
 8006e72:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e008      	b.n	8006e90 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e84:	f043 0202 	orr.w	r2, r3, #2
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
  }
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d110      	bne.n	8006ed8 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006ebe:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006ec4:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	e008      	b.n	8006eea <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ede:	f043 0204 	orr.w	r2, r3, #4
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
  }
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d109      	bne.n	8006f1e <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006f18:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e008      	b.n	8006f30 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f24:	f043 0204 	orr.w	r2, r3, #4
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
  }
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d111      	bne.n	8006f74 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0201 	bic.w	r2, r2, #1
 8006f66:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	e008      	b.n	8006f86 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f7a:	f043 0204 	orr.w	r2, r3, #4
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
  }
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
	...

08006f94 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b08b      	sub	sp, #44	; 0x2c
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006fac:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006fae:	7efb      	ldrb	r3, [r7, #27]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	f040 813b 	bne.w	800722c <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2b40      	cmp	r3, #64	; 0x40
 8006fba:	d145      	bne.n	8007048 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fc4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d109      	bne.n	8006fe0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fd2:	f043 0220 	orr.w	r2, r3, #32
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e12e      	b.n	800723e <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d109      	bne.n	8007004 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ff6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e11c      	b.n	800723e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800700c:	0e1b      	lsrs	r3, r3, #24
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b01      	cmp	r3, #1
 8007014:	d103      	bne.n	800701e <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007026:	0a1b      	lsrs	r3, r3, #8
 8007028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800702c:	69fa      	ldr	r2, [r7, #28]
 800702e:	4413      	add	r3, r2
 8007030:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703a:	69f9      	ldr	r1, [r7, #28]
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
 8007046:	e061      	b.n	800710c <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b41      	cmp	r3, #65	; 0x41
 800704c:	d145      	bne.n	80070da <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007056:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d109      	bne.n	8007072 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007064:	f043 0220 	orr.w	r2, r3, #32
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e0e5      	b.n	800723e <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800707a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007088:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e0d3      	b.n	800723e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800709e:	0e1b      	lsrs	r3, r3, #24
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d103      	bne.n	80070b0 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070b8:	0a1b      	lsrs	r3, r3, #8
 80070ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	4413      	add	r3, r2
 80070c2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070cc:	69f9      	ldr	r1, [r7, #28]
 80070ce:	fb01 f303 	mul.w	r3, r1, r3
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
 80070d8:	e018      	b.n	800710c <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d309      	bcc.n	80070f8 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070ea:	f043 0220 	orr.w	r2, r3, #32
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e0a2      	b.n	800723e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007100:	68b9      	ldr	r1, [r7, #8]
 8007102:	fb01 f303 	mul.w	r3, r1, r3
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d107      	bne.n	8007130 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	0c9b      	lsrs	r3, r3, #18
 8007126:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	e005      	b.n	800713c <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	3304      	adds	r3, #4
 8007158:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	b29a      	uxth	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	0e1b      	lsrs	r3, r3, #24
 800718e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	0fda      	lsrs	r2, r3, #31
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	3304      	adds	r3, #4
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80071aa:	2300      	movs	r3, #0
 80071ac:	623b      	str	r3, [r7, #32]
 80071ae:	e00a      	b.n	80071c6 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	441a      	add	r2, r3
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	440b      	add	r3, r1
 80071bc:	7812      	ldrb	r2, [r2, #0]
 80071be:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	3301      	adds	r3, #1
 80071c4:	623b      	str	r3, [r7, #32]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	0c1b      	lsrs	r3, r3, #16
 80071cc:	4a1f      	ldr	r2, [pc, #124]	; (800724c <HAL_FDCAN_GetRxMessage+0x2b8>)
 80071ce:	5cd3      	ldrb	r3, [r2, r3]
 80071d0:	461a      	mov	r2, r3
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d3eb      	bcc.n	80071b0 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	d105      	bne.n	80071ea <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80071e8:	e01e      	b.n	8007228 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b41      	cmp	r3, #65	; 0x41
 80071ee:	d105      	bne.n	80071fc <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80071fa:	e015      	b.n	8007228 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b1f      	cmp	r3, #31
 8007200:	d808      	bhi.n	8007214 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2101      	movs	r1, #1
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	fa01 f202 	lsl.w	r2, r1, r2
 800720e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007212:	e009      	b.n	8007228 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f003 021f 	and.w	r2, r3, #31
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2101      	movs	r1, #1
 8007220:	fa01 f202 	lsl.w	r2, r1, r2
 8007224:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	e008      	b.n	800723e <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007232:	f043 0208 	orr.w	r2, r3, #8
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
  }
}
 800723e:	4618      	mov	r0, r3
 8007240:	372c      	adds	r7, #44	; 0x2c
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	0801af2c 	.word	0x0801af2c

08007250 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007262:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007264:	7dfb      	ldrb	r3, [r7, #23]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d002      	beq.n	8007270 <HAL_FDCAN_ActivateNotification+0x20>
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d155      	bne.n	800731c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	4013      	ands	r3, r2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d108      	bne.n	8007290 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0201 	orr.w	r2, r2, #1
 800728c:	65da      	str	r2, [r3, #92]	; 0x5c
 800728e:	e014      	b.n	80072ba <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	4013      	ands	r3, r2
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	429a      	cmp	r2, r3
 800729e:	d108      	bne.n	80072b2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0202 	orr.w	r2, r2, #2
 80072ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80072b0:	e003      	b.n	80072ba <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2203      	movs	r2, #3
 80072b8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d009      	beq.n	80072d8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d009      	beq.n	80072f6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	4b0f      	ldr	r3, [pc, #60]	; (800733c <HAL_FDCAN_ActivateNotification+0xec>)
 8007300:	4013      	ands	r3, r2
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	6812      	ldr	r2, [r2, #0]
 8007306:	430b      	orrs	r3, r1
 8007308:	6553      	str	r3, [r2, #84]	; 0x54
 800730a:	4b0d      	ldr	r3, [pc, #52]	; (8007340 <HAL_FDCAN_ActivateNotification+0xf0>)
 800730c:	695a      	ldr	r2, [r3, #20]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	0f9b      	lsrs	r3, r3, #30
 8007312:	490b      	ldr	r1, [pc, #44]	; (8007340 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007314:	4313      	orrs	r3, r2
 8007316:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	e008      	b.n	800732e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007322:	f043 0202 	orr.w	r2, r3, #2
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
  }
}
 800732e:	4618      	mov	r0, r3
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	3fcfffff 	.word	0x3fcfffff
 8007340:	4000a800 	.word	0x4000a800

08007344 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b092      	sub	sp, #72	; 0x48
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800734c:	4b90      	ldr	r3, [pc, #576]	; (8007590 <HAL_FDCAN_IRQHandler+0x24c>)
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	079b      	lsls	r3, r3, #30
 8007352:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007354:	4b8e      	ldr	r3, [pc, #568]	; (8007590 <HAL_FDCAN_IRQHandler+0x24c>)
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	079b      	lsls	r3, r3, #30
 800735a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800735c:	4013      	ands	r3, r2
 800735e:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007366:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800736a:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007372:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007374:	4013      	ands	r3, r2
 8007376:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800738c:	4013      	ands	r3, r2
 800738e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800739a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073a4:	4013      	ands	r3, r2
 80073a6:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ae:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80073b2:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073bc:	4013      	ands	r3, r2
 80073be:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80073ca:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d4:	4013      	ands	r3, r2
 80073d6:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d011      	beq.n	800740a <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00a      	beq.n	800740a <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073fc:	651a      	str	r2, [r3, #80]	; 0x50
 80073fe:	4b64      	ldr	r3, [pc, #400]	; (8007590 <HAL_FDCAN_IRQHandler+0x24c>)
 8007400:	2200      	movs	r2, #0
 8007402:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fa5a 	bl	80078be <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01e      	beq.n	8007456 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800741e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007422:	2b00      	cmp	r3, #0
 8007424:	d017      	beq.n	8007456 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800742e:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800743a:	4013      	ands	r3, r2
 800743c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007446:	651a      	str	r2, [r3, #80]	; 0x50
 8007448:	4b51      	ldr	r3, [pc, #324]	; (8007590 <HAL_FDCAN_IRQHandler+0x24c>)
 800744a:	2200      	movs	r2, #0
 800744c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800744e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fa0b 	bl	800786c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00d      	beq.n	8007478 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007462:	4b4c      	ldr	r3, [pc, #304]	; (8007594 <HAL_FDCAN_IRQHandler+0x250>)
 8007464:	400b      	ands	r3, r1
 8007466:	6513      	str	r3, [r2, #80]	; 0x50
 8007468:	4a49      	ldr	r2, [pc, #292]	; (8007590 <HAL_FDCAN_IRQHandler+0x24c>)
 800746a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800746c:	0f9b      	lsrs	r3, r3, #30
 800746e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007470:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f9c4 	bl	8007800 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00d      	beq.n	800749a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007484:	4b43      	ldr	r3, [pc, #268]	; (8007594 <HAL_FDCAN_IRQHandler+0x250>)
 8007486:	400b      	ands	r3, r1
 8007488:	6513      	str	r3, [r2, #80]	; 0x50
 800748a:	4a41      	ldr	r2, [pc, #260]	; (8007590 <HAL_FDCAN_IRQHandler+0x24c>)
 800748c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800748e:	0f9b      	lsrs	r3, r3, #30
 8007490:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f9be 	bl	8007816 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00d      	beq.n	80074bc <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074a6:	4b3b      	ldr	r3, [pc, #236]	; (8007594 <HAL_FDCAN_IRQHandler+0x250>)
 80074a8:	400b      	ands	r3, r1
 80074aa:	6513      	str	r3, [r2, #80]	; 0x50
 80074ac:	4a38      	ldr	r2, [pc, #224]	; (8007590 <HAL_FDCAN_IRQHandler+0x24c>)
 80074ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b0:	0f9b      	lsrs	r3, r3, #30
 80074b2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80074b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7f9 f928 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00d      	beq.n	80074de <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074c8:	4b32      	ldr	r3, [pc, #200]	; (8007594 <HAL_FDCAN_IRQHandler+0x250>)
 80074ca:	400b      	ands	r3, r1
 80074cc:	6513      	str	r3, [r2, #80]	; 0x50
 80074ce:	4a30      	ldr	r2, [pc, #192]	; (8007590 <HAL_FDCAN_IRQHandler+0x24c>)
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	0f9b      	lsrs	r3, r3, #30
 80074d4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80074d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f9a7 	bl	800782c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d011      	beq.n	8007510 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007502:	651a      	str	r2, [r3, #80]	; 0x50
 8007504:	4b22      	ldr	r3, [pc, #136]	; (8007590 <HAL_FDCAN_IRQHandler+0x24c>)
 8007506:	2200      	movs	r2, #0
 8007508:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f999 	bl	8007842 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01e      	beq.n	800755c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007528:	2b00      	cmp	r3, #0
 800752a:	d017      	beq.n	800755c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800753e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007540:	4013      	ands	r3, r2
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800754c:	651a      	str	r2, [r3, #80]	; 0x50
 800754e:	4b10      	ldr	r3, [pc, #64]	; (8007590 <HAL_FDCAN_IRQHandler+0x24c>)
 8007550:	2200      	movs	r2, #0
 8007552:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f97d 	bl	8007856 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d016      	beq.n	8007598 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00f      	beq.n	8007598 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007580:	651a      	str	r2, [r3, #80]	; 0x50
 8007582:	4b03      	ldr	r3, [pc, #12]	; (8007590 <HAL_FDCAN_IRQHandler+0x24c>)
 8007584:	2200      	movs	r2, #0
 8007586:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f97a 	bl	8007882 <HAL_FDCAN_RxBufferNewMessageCallback>
 800758e:	e003      	b.n	8007598 <HAL_FDCAN_IRQHandler+0x254>
 8007590:	4000a800 	.word	0x4000a800
 8007594:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d011      	beq.n	80075ca <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00a      	beq.n	80075ca <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80075bc:	651a      	str	r2, [r3, #80]	; 0x50
 80075be:	4b8d      	ldr	r3, [pc, #564]	; (80077f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f966 	bl	8007896 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d011      	beq.n	80075fc <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80075ee:	651a      	str	r2, [r3, #80]	; 0x50
 80075f0:	4b80      	ldr	r3, [pc, #512]	; (80077f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f957 	bl	80078aa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d016      	beq.n	8007638 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00f      	beq.n	8007638 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007620:	651a      	str	r2, [r3, #80]	; 0x50
 8007622:	4b74      	ldr	r3, [pc, #464]	; (80077f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007624:	2200      	movs	r2, #0
 8007626:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800762e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00d      	beq.n	800765a <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007644:	4b6c      	ldr	r3, [pc, #432]	; (80077f8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007646:	400b      	ands	r3, r1
 8007648:	6513      	str	r3, [r2, #80]	; 0x50
 800764a:	4a6a      	ldr	r2, [pc, #424]	; (80077f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	0f9b      	lsrs	r3, r3, #30
 8007650:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f946 	bl	80078e6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800765a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765c:	2b00      	cmp	r3, #0
 800765e:	d011      	beq.n	8007684 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007666:	4b64      	ldr	r3, [pc, #400]	; (80077f8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007668:	400b      	ands	r3, r1
 800766a:	6513      	str	r3, [r2, #80]	; 0x50
 800766c:	4a61      	ldr	r2, [pc, #388]	; (80077f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800766e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007670:	0f9b      	lsrs	r3, r3, #30
 8007672:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800767a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a5c      	ldr	r2, [pc, #368]	; (80077fc <HAL_FDCAN_IRQHandler+0x4b8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	f040 80a6 	bne.w	80077dc <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 809e 	beq.w	80077dc <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	f003 030f 	and.w	r3, r3, #15
 80076aa:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b4:	4013      	ands	r3, r2
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076c2:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	6a3a      	ldr	r2, [r7, #32]
 80076cc:	4013      	ands	r3, r2
 80076ce:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80076da:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	69fa      	ldr	r2, [r7, #28]
 80076e4:	4013      	ands	r3, r2
 80076e6:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80076f2:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	4013      	ands	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800770a:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	4013      	ands	r3, r2
 8007716:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	2b00      	cmp	r3, #0
 800771c:	d007      	beq.n	800772e <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007724:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f8e7 	bl	80078fc <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d007      	beq.n	8007744 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	6a3a      	ldr	r2, [r7, #32]
 800773a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800773c:	6a39      	ldr	r1, [r7, #32]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f8e7 	bl	8007912 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d01b      	beq.n	800778a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	d014      	beq.n	800778a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007766:	0c1b      	lsrs	r3, r3, #16
 8007768:	b29b      	uxth	r3, r3
 800776a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007776:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2240      	movs	r2, #64	; 0x40
 800777e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	6939      	ldr	r1, [r7, #16]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f8cf 	bl	8007928 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d007      	beq.n	80077a0 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	69fa      	ldr	r2, [r7, #28]
 8007796:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007798:	69f9      	ldr	r1, [r7, #28]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f8d0 	bl	8007940 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f873 	bl	80078d2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80077ec:	bf00      	nop
 80077ee:	3748      	adds	r7, #72	; 0x48
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	4000a800 	.word	0x4000a800
 80077f8:	3fcfffff 	.word	0x3fcfffff
 80077fc:	4000a000 	.word	0x4000a000

08007800 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800780a:	bf00      	nop
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007816:	b480      	push	{r7}
 8007818:	b083      	sub	sp, #12
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800788a:	bf00      	nop
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
	...

08007958 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007964:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800796e:	4ba7      	ldr	r3, [pc, #668]	; (8007c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007970:	4013      	ands	r3, r2
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	0091      	lsls	r1, r2, #2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	6812      	ldr	r2, [r2, #0]
 800797a:	430b      	orrs	r3, r1
 800797c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007988:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	041a      	lsls	r2, r3, #16
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	4413      	add	r3, r2
 80079a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80079ae:	4b97      	ldr	r3, [pc, #604]	; (8007c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079b0:	4013      	ands	r3, r2
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	0091      	lsls	r1, r2, #2
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	6812      	ldr	r2, [r2, #0]
 80079ba:	430b      	orrs	r3, r1
 80079bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d0:	041a      	lsls	r2, r3, #16
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	4413      	add	r3, r2
 80079e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80079f0:	4b86      	ldr	r3, [pc, #536]	; (8007c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	0091      	lsls	r1, r2, #2
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6812      	ldr	r2, [r2, #0]
 80079fc:	430b      	orrs	r3, r1
 80079fe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a0a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	041a      	lsls	r2, r3, #16
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a26:	fb02 f303 	mul.w	r3, r2, r3
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007a38:	4b74      	ldr	r3, [pc, #464]	; (8007c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	0091      	lsls	r1, r2, #2
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	6812      	ldr	r2, [r2, #0]
 8007a44:	430b      	orrs	r3, r1
 8007a46:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a52:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5a:	041a      	lsls	r2, r3, #16
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007a6e:	fb02 f303 	mul.w	r3, r2, r3
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	4413      	add	r3, r2
 8007a76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007a80:	4b62      	ldr	r3, [pc, #392]	; (8007c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a82:	4013      	ands	r3, r2
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	0091      	lsls	r1, r2, #2
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6812      	ldr	r2, [r2, #0]
 8007a8c:	430b      	orrs	r3, r1
 8007a8e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007a9a:	fb02 f303 	mul.w	r3, r2, r3
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007aac:	4b57      	ldr	r3, [pc, #348]	; (8007c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007aae:	4013      	ands	r3, r2
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	0091      	lsls	r1, r2, #2
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6812      	ldr	r2, [r2, #0]
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ac6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ace:	041a      	lsls	r2, r3, #16
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007aee:	4b47      	ldr	r3, [pc, #284]	; (8007c0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007af0:	4013      	ands	r3, r2
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	0091      	lsls	r1, r2, #2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6812      	ldr	r2, [r2, #0]
 8007afa:	430b      	orrs	r3, r1
 8007afc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b08:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b10:	041a      	lsls	r2, r3, #16
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b24:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b2c:	061a      	lsls	r2, r3, #24
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b3c:	4b34      	ldr	r3, [pc, #208]	; (8007c10 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007b3e:	4413      	add	r3, r2
 8007b40:	009a      	lsls	r2, r3, #2
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	441a      	add	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	441a      	add	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007b72:	fb01 f303 	mul.w	r3, r1, r3
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	441a      	add	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007b8a:	fb01 f303 	mul.w	r3, r1, r3
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	441a      	add	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007ba2:	fb01 f303 	mul.w	r3, r1, r3
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	441a      	add	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	441a      	add	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007bd2:	fb01 f303 	mul.w	r3, r1, r3
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	441a      	add	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007bee:	fb01 f303 	mul.w	r3, r1, r3
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	441a      	add	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c02:	4a04      	ldr	r2, [pc, #16]	; (8007c14 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d915      	bls.n	8007c34 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007c08:	e006      	b.n	8007c18 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007c0a:	bf00      	nop
 8007c0c:	ffff0003 	.word	0xffff0003
 8007c10:	10002b00 	.word	0x10002b00
 8007c14:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c1e:	f043 0220 	orr.w	r2, r3, #32
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2203      	movs	r2, #3
 8007c2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e010      	b.n	8007c56 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c38:	60fb      	str	r3, [r7, #12]
 8007c3a:	e005      	b.n	8007c48 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3304      	adds	r3, #4
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d3f3      	bcc.n	8007c3c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop

08007c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b089      	sub	sp, #36	; 0x24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c72:	4b89      	ldr	r3, [pc, #548]	; (8007e98 <HAL_GPIO_Init+0x234>)
 8007c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c76:	e194      	b.n	8007fa2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	fa01 f303 	lsl.w	r3, r1, r3
 8007c84:	4013      	ands	r3, r2
 8007c86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8186 	beq.w	8007f9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d00b      	beq.n	8007cb0 <HAL_GPIO_Init+0x4c>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d007      	beq.n	8007cb0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ca4:	2b11      	cmp	r3, #17
 8007ca6:	d003      	beq.n	8007cb0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	2b12      	cmp	r3, #18
 8007cae:	d130      	bne.n	8007d12 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	2203      	movs	r2, #3
 8007cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	68da      	ldr	r2, [r3, #12]
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	005b      	lsls	r3, r3, #1
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	fa02 f303 	lsl.w	r3, r2, r3
 8007cee:	43db      	mvns	r3, r3
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	091b      	lsrs	r3, r3, #4
 8007cfc:	f003 0201 	and.w	r2, r3, #1
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	fa02 f303 	lsl.w	r3, r2, r3
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	43db      	mvns	r3, r3
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	4013      	ands	r3, r2
 8007d28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d003      	beq.n	8007d52 <HAL_GPIO_Init+0xee>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	2b12      	cmp	r3, #18
 8007d50:	d123      	bne.n	8007d9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	08da      	lsrs	r2, r3, #3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3208      	adds	r2, #8
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	f003 0307 	and.w	r3, r3, #7
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	220f      	movs	r2, #15
 8007d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6e:	43db      	mvns	r3, r3
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	4013      	ands	r3, r2
 8007d74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	691a      	ldr	r2, [r3, #16]
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	f003 0307 	and.w	r3, r3, #7
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	fa02 f303 	lsl.w	r3, r2, r3
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	08da      	lsrs	r2, r3, #3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3208      	adds	r2, #8
 8007d94:	69b9      	ldr	r1, [r7, #24]
 8007d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	2203      	movs	r2, #3
 8007da6:	fa02 f303 	lsl.w	r3, r2, r3
 8007daa:	43db      	mvns	r3, r3
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	4013      	ands	r3, r2
 8007db0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f003 0203 	and.w	r2, r3, #3
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	005b      	lsls	r3, r3, #1
 8007dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 80e0 	beq.w	8007f9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ddc:	4b2f      	ldr	r3, [pc, #188]	; (8007e9c <HAL_GPIO_Init+0x238>)
 8007dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007de2:	4a2e      	ldr	r2, [pc, #184]	; (8007e9c <HAL_GPIO_Init+0x238>)
 8007de4:	f043 0302 	orr.w	r3, r3, #2
 8007de8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007dec:	4b2b      	ldr	r3, [pc, #172]	; (8007e9c <HAL_GPIO_Init+0x238>)
 8007dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007dfa:	4a29      	ldr	r2, [pc, #164]	; (8007ea0 <HAL_GPIO_Init+0x23c>)
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	089b      	lsrs	r3, r3, #2
 8007e00:	3302      	adds	r3, #2
 8007e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	220f      	movs	r2, #15
 8007e12:	fa02 f303 	lsl.w	r3, r2, r3
 8007e16:	43db      	mvns	r3, r3
 8007e18:	69ba      	ldr	r2, [r7, #24]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a20      	ldr	r2, [pc, #128]	; (8007ea4 <HAL_GPIO_Init+0x240>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d052      	beq.n	8007ecc <HAL_GPIO_Init+0x268>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a1f      	ldr	r2, [pc, #124]	; (8007ea8 <HAL_GPIO_Init+0x244>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d031      	beq.n	8007e92 <HAL_GPIO_Init+0x22e>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a1e      	ldr	r2, [pc, #120]	; (8007eac <HAL_GPIO_Init+0x248>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d02b      	beq.n	8007e8e <HAL_GPIO_Init+0x22a>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a1d      	ldr	r2, [pc, #116]	; (8007eb0 <HAL_GPIO_Init+0x24c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d025      	beq.n	8007e8a <HAL_GPIO_Init+0x226>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a1c      	ldr	r2, [pc, #112]	; (8007eb4 <HAL_GPIO_Init+0x250>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d01f      	beq.n	8007e86 <HAL_GPIO_Init+0x222>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a1b      	ldr	r2, [pc, #108]	; (8007eb8 <HAL_GPIO_Init+0x254>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d019      	beq.n	8007e82 <HAL_GPIO_Init+0x21e>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a1a      	ldr	r2, [pc, #104]	; (8007ebc <HAL_GPIO_Init+0x258>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d013      	beq.n	8007e7e <HAL_GPIO_Init+0x21a>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a19      	ldr	r2, [pc, #100]	; (8007ec0 <HAL_GPIO_Init+0x25c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d00d      	beq.n	8007e7a <HAL_GPIO_Init+0x216>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a18      	ldr	r2, [pc, #96]	; (8007ec4 <HAL_GPIO_Init+0x260>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d007      	beq.n	8007e76 <HAL_GPIO_Init+0x212>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a17      	ldr	r2, [pc, #92]	; (8007ec8 <HAL_GPIO_Init+0x264>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d101      	bne.n	8007e72 <HAL_GPIO_Init+0x20e>
 8007e6e:	2309      	movs	r3, #9
 8007e70:	e02d      	b.n	8007ece <HAL_GPIO_Init+0x26a>
 8007e72:	230a      	movs	r3, #10
 8007e74:	e02b      	b.n	8007ece <HAL_GPIO_Init+0x26a>
 8007e76:	2308      	movs	r3, #8
 8007e78:	e029      	b.n	8007ece <HAL_GPIO_Init+0x26a>
 8007e7a:	2307      	movs	r3, #7
 8007e7c:	e027      	b.n	8007ece <HAL_GPIO_Init+0x26a>
 8007e7e:	2306      	movs	r3, #6
 8007e80:	e025      	b.n	8007ece <HAL_GPIO_Init+0x26a>
 8007e82:	2305      	movs	r3, #5
 8007e84:	e023      	b.n	8007ece <HAL_GPIO_Init+0x26a>
 8007e86:	2304      	movs	r3, #4
 8007e88:	e021      	b.n	8007ece <HAL_GPIO_Init+0x26a>
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e01f      	b.n	8007ece <HAL_GPIO_Init+0x26a>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	e01d      	b.n	8007ece <HAL_GPIO_Init+0x26a>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e01b      	b.n	8007ece <HAL_GPIO_Init+0x26a>
 8007e96:	bf00      	nop
 8007e98:	58000080 	.word	0x58000080
 8007e9c:	58024400 	.word	0x58024400
 8007ea0:	58000400 	.word	0x58000400
 8007ea4:	58020000 	.word	0x58020000
 8007ea8:	58020400 	.word	0x58020400
 8007eac:	58020800 	.word	0x58020800
 8007eb0:	58020c00 	.word	0x58020c00
 8007eb4:	58021000 	.word	0x58021000
 8007eb8:	58021400 	.word	0x58021400
 8007ebc:	58021800 	.word	0x58021800
 8007ec0:	58021c00 	.word	0x58021c00
 8007ec4:	58022000 	.word	0x58022000
 8007ec8:	58022400 	.word	0x58022400
 8007ecc:	2300      	movs	r3, #0
 8007ece:	69fa      	ldr	r2, [r7, #28]
 8007ed0:	f002 0203 	and.w	r2, r2, #3
 8007ed4:	0092      	lsls	r2, r2, #2
 8007ed6:	4093      	lsls	r3, r2
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ede:	4938      	ldr	r1, [pc, #224]	; (8007fc0 <HAL_GPIO_Init+0x35c>)
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	089b      	lsrs	r3, r3, #2
 8007ee4:	3302      	adds	r3, #2
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	43db      	mvns	r3, r3
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	43db      	mvns	r3, r3
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	4013      	ands	r3, r2
 8007f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	43db      	mvns	r3, r3
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	4013      	ands	r3, r2
 8007f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	43db      	mvns	r3, r3
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f47f ae63 	bne.w	8007c78 <HAL_GPIO_Init+0x14>
  }
}
 8007fb2:	bf00      	nop
 8007fb4:	3724      	adds	r7, #36	; 0x24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	58000400 	.word	0x58000400

08007fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691a      	ldr	r2, [r3, #16]
 8007fd4:	887b      	ldrh	r3, [r7, #2]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	73fb      	strb	r3, [r7, #15]
 8007fe0:	e001      	b.n	8007fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	807b      	strh	r3, [r7, #2]
 8008000:	4613      	mov	r3, r2
 8008002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008004:	787b      	ldrb	r3, [r7, #1]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800800a:	887a      	ldrh	r2, [r7, #2]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008010:	e003      	b.n	800801a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008012:	887b      	ldrh	r3, [r7, #2]
 8008014:	041a      	lsls	r2, r3, #16
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	619a      	str	r2, [r3, #24]
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	460b      	mov	r3, r1
 8008030:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	695a      	ldr	r2, [r3, #20]
 8008036:	887b      	ldrh	r3, [r7, #2]
 8008038:	401a      	ands	r2, r3
 800803a:	887b      	ldrh	r3, [r7, #2]
 800803c:	429a      	cmp	r2, r3
 800803e:	d104      	bne.n	800804a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008040:	887b      	ldrh	r3, [r7, #2]
 8008042:	041a      	lsls	r2, r3, #16
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008048:	e002      	b.n	8008050 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800804a:	887a      	ldrh	r2, [r7, #2]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	619a      	str	r2, [r3, #24]
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800806a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	4013      	ands	r3, r2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d008      	beq.n	8008088 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800807a:	88fb      	ldrh	r3, [r7, #6]
 800807c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008080:	88fb      	ldrh	r3, [r7, #6]
 8008082:	4618      	mov	r0, r3
 8008084:	f7fb fd8c 	bl	8003ba0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008098:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800809a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800809e:	4a0c      	ldr	r2, [pc, #48]	; (80080d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80080a0:	f043 0302 	orr.w	r3, r3, #2
 80080a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80080a8:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80080aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80080b6:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	4906      	ldr	r1, [pc, #24]	; (80080d4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4313      	orrs	r3, r2
 80080c0:	604b      	str	r3, [r1, #4]
}
 80080c2:	bf00      	nop
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	58024400 	.word	0x58024400
 80080d4:	58000400 	.word	0x58000400

080080d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80080d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080da:	b08f      	sub	sp, #60	; 0x3c
 80080dc:	af0a      	add	r7, sp, #40	; 0x28
 80080de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e116      	b.n	8008318 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d106      	bne.n	800810a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f010 fe4d 	bl	8018da4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2203      	movs	r2, #3
 800810e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4618      	mov	r0, r3
 800812a:	f009 fe52 	bl	8011dd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	687e      	ldr	r6, [r7, #4]
 8008136:	466d      	mov	r5, sp
 8008138:	f106 0410 	add.w	r4, r6, #16
 800813c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800813e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008144:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008148:	e885 0003 	stmia.w	r5, {r0, r1}
 800814c:	1d33      	adds	r3, r6, #4
 800814e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008150:	6838      	ldr	r0, [r7, #0]
 8008152:	f009 fd29 	bl	8011ba8 <USB_CoreInit>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e0d7      	b.n	8008318 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2100      	movs	r1, #0
 800816e:	4618      	mov	r0, r3
 8008170:	f009 fe40 	bl	8011df4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
 8008178:	e04a      	b.n	8008210 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800817a:	7bfa      	ldrb	r2, [r7, #15]
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	4613      	mov	r3, r2
 8008180:	00db      	lsls	r3, r3, #3
 8008182:	1a9b      	subs	r3, r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	440b      	add	r3, r1
 8008188:	333d      	adds	r3, #61	; 0x3d
 800818a:	2201      	movs	r2, #1
 800818c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800818e:	7bfa      	ldrb	r2, [r7, #15]
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	4613      	mov	r3, r2
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	1a9b      	subs	r3, r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	440b      	add	r3, r1
 800819c:	333c      	adds	r3, #60	; 0x3c
 800819e:	7bfa      	ldrb	r2, [r7, #15]
 80081a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80081a2:	7bfa      	ldrb	r2, [r7, #15]
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	b298      	uxth	r0, r3
 80081a8:	6879      	ldr	r1, [r7, #4]
 80081aa:	4613      	mov	r3, r2
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	1a9b      	subs	r3, r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	440b      	add	r3, r1
 80081b4:	3342      	adds	r3, #66	; 0x42
 80081b6:	4602      	mov	r2, r0
 80081b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80081ba:	7bfa      	ldrb	r2, [r7, #15]
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	333f      	adds	r3, #63	; 0x3f
 80081ca:	2200      	movs	r2, #0
 80081cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80081ce:	7bfa      	ldrb	r2, [r7, #15]
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	00db      	lsls	r3, r3, #3
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	3344      	adds	r3, #68	; 0x44
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80081e2:	7bfa      	ldrb	r2, [r7, #15]
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	4613      	mov	r3, r2
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	1a9b      	subs	r3, r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	440b      	add	r3, r1
 80081f0:	3348      	adds	r3, #72	; 0x48
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80081f6:	7bfa      	ldrb	r2, [r7, #15]
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	4613      	mov	r3, r2
 80081fc:	00db      	lsls	r3, r3, #3
 80081fe:	1a9b      	subs	r3, r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	440b      	add	r3, r1
 8008204:	3350      	adds	r3, #80	; 0x50
 8008206:	2200      	movs	r2, #0
 8008208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	3301      	adds	r3, #1
 800820e:	73fb      	strb	r3, [r7, #15]
 8008210:	7bfa      	ldrb	r2, [r7, #15]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	429a      	cmp	r2, r3
 8008218:	d3af      	bcc.n	800817a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]
 800821e:	e044      	b.n	80082aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008220:	7bfa      	ldrb	r2, [r7, #15]
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	4613      	mov	r3, r2
 8008226:	00db      	lsls	r3, r3, #3
 8008228:	1a9b      	subs	r3, r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	440b      	add	r3, r1
 800822e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008232:	2200      	movs	r2, #0
 8008234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008236:	7bfa      	ldrb	r2, [r7, #15]
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	4613      	mov	r3, r2
 800823c:	00db      	lsls	r3, r3, #3
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008248:	7bfa      	ldrb	r2, [r7, #15]
 800824a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800824c:	7bfa      	ldrb	r2, [r7, #15]
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	4613      	mov	r3, r2
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	1a9b      	subs	r3, r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	440b      	add	r3, r1
 800825a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800825e:	2200      	movs	r2, #0
 8008260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008262:	7bfa      	ldrb	r2, [r7, #15]
 8008264:	6879      	ldr	r1, [r7, #4]
 8008266:	4613      	mov	r3, r2
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	1a9b      	subs	r3, r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	440b      	add	r3, r1
 8008270:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008274:	2200      	movs	r2, #0
 8008276:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008278:	7bfa      	ldrb	r2, [r7, #15]
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	4613      	mov	r3, r2
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	1a9b      	subs	r3, r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	440b      	add	r3, r1
 8008286:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800828e:	7bfa      	ldrb	r2, [r7, #15]
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	00db      	lsls	r3, r3, #3
 8008296:	1a9b      	subs	r3, r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	440b      	add	r3, r1
 800829c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80082a0:	2200      	movs	r2, #0
 80082a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	3301      	adds	r3, #1
 80082a8:	73fb      	strb	r3, [r7, #15]
 80082aa:	7bfa      	ldrb	r2, [r7, #15]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d3b5      	bcc.n	8008220 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	603b      	str	r3, [r7, #0]
 80082ba:	687e      	ldr	r6, [r7, #4]
 80082bc:	466d      	mov	r5, sp
 80082be:	f106 0410 	add.w	r4, r6, #16
 80082c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80082ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80082d2:	1d33      	adds	r3, r6, #4
 80082d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082d6:	6838      	ldr	r0, [r7, #0]
 80082d8:	f009 fdb6 	bl	8011e48 <USB_DevInit>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2202      	movs	r2, #2
 80082e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e014      	b.n	8008318 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	2b01      	cmp	r3, #1
 8008304:	d102      	bne.n	800830c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 f8be 	bl	8009488 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4618      	mov	r0, r3
 8008312:	f00a fdf5 	bl	8012f00 <USB_DevDisconnect>

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008320 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008334:	2b01      	cmp	r3, #1
 8008336:	d101      	bne.n	800833c <HAL_PCD_Start+0x1c>
 8008338:	2302      	movs	r3, #2
 800833a:	e020      	b.n	800837e <HAL_PCD_Start+0x5e>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008348:	2b01      	cmp	r3, #1
 800834a:	d109      	bne.n	8008360 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008350:	2b01      	cmp	r3, #1
 8008352:	d005      	beq.n	8008360 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008358:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4618      	mov	r0, r3
 8008366:	f00a fdb3 	bl	8012ed0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4618      	mov	r0, r3
 8008370:	f009 fd1e 	bl	8011db0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008386:	b590      	push	{r4, r7, lr}
 8008388:	b08d      	sub	sp, #52	; 0x34
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4618      	mov	r0, r3
 800839e:	f00a fe5a 	bl	8013056 <USB_GetMode>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f040 83ca 	bne.w	8008b3e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f00a fdbe 	bl	8012f30 <USB_ReadInterrupts>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 83c0 	beq.w	8008b3c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f00a fdb5 	bl	8012f30 <USB_ReadInterrupts>
 80083c6:	4603      	mov	r3, r0
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d107      	bne.n	80083e0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	695a      	ldr	r2, [r3, #20]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f002 0202 	and.w	r2, r2, #2
 80083de:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f00a fda3 	bl	8012f30 <USB_ReadInterrupts>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f003 0310 	and.w	r3, r3, #16
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	d161      	bne.n	80084b8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699a      	ldr	r2, [r3, #24]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0210 	bic.w	r2, r2, #16
 8008402:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	f003 020f 	and.w	r2, r3, #15
 8008410:	4613      	mov	r3, r2
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	1a9b      	subs	r3, r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	4413      	add	r3, r2
 8008420:	3304      	adds	r3, #4
 8008422:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	0c5b      	lsrs	r3, r3, #17
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	2b02      	cmp	r3, #2
 800842e:	d124      	bne.n	800847a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008436:	4013      	ands	r3, r2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d035      	beq.n	80084a8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	091b      	lsrs	r3, r3, #4
 8008444:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800844a:	b29b      	uxth	r3, r3
 800844c:	461a      	mov	r2, r3
 800844e:	6a38      	ldr	r0, [r7, #32]
 8008450:	f00a fc1b 	bl	8012c8a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	091b      	lsrs	r3, r3, #4
 800845c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008460:	441a      	add	r2, r3
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	091b      	lsrs	r3, r3, #4
 800846e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008472:	441a      	add	r2, r3
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	619a      	str	r2, [r3, #24]
 8008478:	e016      	b.n	80084a8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	0c5b      	lsrs	r3, r3, #17
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	2b06      	cmp	r3, #6
 8008484:	d110      	bne.n	80084a8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800848c:	2208      	movs	r2, #8
 800848e:	4619      	mov	r1, r3
 8008490:	6a38      	ldr	r0, [r7, #32]
 8008492:	f00a fbfa 	bl	8012c8a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	091b      	lsrs	r3, r3, #4
 800849e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084a2:	441a      	add	r2, r3
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	699a      	ldr	r2, [r3, #24]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0210 	orr.w	r2, r2, #16
 80084b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f00a fd37 	bl	8012f30 <USB_ReadInterrupts>
 80084c2:	4603      	mov	r3, r0
 80084c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80084cc:	d16e      	bne.n	80085ac <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f00a fd3d 	bl	8012f56 <USB_ReadDevAllOutEpInterrupt>
 80084dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80084de:	e062      	b.n	80085a6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d057      	beq.n	800859a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f0:	b2d2      	uxtb	r2, r2
 80084f2:	4611      	mov	r1, r2
 80084f4:	4618      	mov	r0, r3
 80084f6:	f00a fd62 	bl	8012fbe <USB_ReadDevOutEPInterrupt>
 80084fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00c      	beq.n	8008520 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008512:	461a      	mov	r2, r3
 8008514:	2301      	movs	r3, #1
 8008516:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fe0a 	bl	8009134 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	f003 0308 	and.w	r3, r3, #8
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00c      	beq.n	8008544 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008536:	461a      	mov	r2, r3
 8008538:	2308      	movs	r3, #8
 800853a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800853c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 ff04 	bl	800934c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	f003 0310 	and.w	r3, r3, #16
 800854a:	2b00      	cmp	r3, #0
 800854c:	d008      	beq.n	8008560 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855a:	461a      	mov	r2, r3
 800855c:	2310      	movs	r3, #16
 800855e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	f003 0320 	and.w	r3, r3, #32
 8008566:	2b00      	cmp	r3, #0
 8008568:	d008      	beq.n	800857c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	015a      	lsls	r2, r3, #5
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	4413      	add	r3, r2
 8008572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008576:	461a      	mov	r2, r3
 8008578:	2320      	movs	r3, #32
 800857a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d009      	beq.n	800859a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	4413      	add	r3, r2
 800858e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008592:	461a      	mov	r2, r3
 8008594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008598:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	3301      	adds	r3, #1
 800859e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	085b      	lsrs	r3, r3, #1
 80085a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d199      	bne.n	80084e0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f00a fcbd 	bl	8012f30 <USB_ReadInterrupts>
 80085b6:	4603      	mov	r3, r0
 80085b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085c0:	f040 80c0 	bne.w	8008744 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f00a fcde 	bl	8012f8a <USB_ReadDevAllInEpInterrupt>
 80085ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80085d4:	e0b2      	b.n	800873c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80085d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 80a7 	beq.w	8008730 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e8:	b2d2      	uxtb	r2, r2
 80085ea:	4611      	mov	r1, r2
 80085ec:	4618      	mov	r0, r3
 80085ee:	f00a fd04 	bl	8012ffa <USB_ReadDevInEPInterrupt>
 80085f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d057      	beq.n	80086ae <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	f003 030f 	and.w	r3, r3, #15
 8008604:	2201      	movs	r2, #1
 8008606:	fa02 f303 	lsl.w	r3, r2, r3
 800860a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	43db      	mvns	r3, r3
 8008618:	69f9      	ldr	r1, [r7, #28]
 800861a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800861e:	4013      	ands	r3, r2
 8008620:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862e:	461a      	mov	r2, r3
 8008630:	2301      	movs	r3, #1
 8008632:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d132      	bne.n	80086a2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008640:	4613      	mov	r3, r2
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	1a9b      	subs	r3, r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	440b      	add	r3, r1
 800864a:	3348      	adds	r3, #72	; 0x48
 800864c:	6819      	ldr	r1, [r3, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008652:	4613      	mov	r3, r2
 8008654:	00db      	lsls	r3, r3, #3
 8008656:	1a9b      	subs	r3, r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4403      	add	r3, r0
 800865c:	3344      	adds	r3, #68	; 0x44
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4419      	add	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008666:	4613      	mov	r3, r2
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	1a9b      	subs	r3, r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4403      	add	r3, r0
 8008670:	3348      	adds	r3, #72	; 0x48
 8008672:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	2b00      	cmp	r3, #0
 8008678:	d113      	bne.n	80086a2 <HAL_PCD_IRQHandler+0x31c>
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800867e:	4613      	mov	r3, r2
 8008680:	00db      	lsls	r3, r3, #3
 8008682:	1a9b      	subs	r3, r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	440b      	add	r3, r1
 8008688:	3350      	adds	r3, #80	; 0x50
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d108      	bne.n	80086a2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6818      	ldr	r0, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800869a:	461a      	mov	r2, r3
 800869c:	2101      	movs	r1, #1
 800869e:	f00a fd0d 	bl	80130bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f010 fbfa 	bl	8018ea2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f003 0308 	and.w	r3, r3, #8
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d008      	beq.n	80086ca <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c4:	461a      	mov	r2, r3
 80086c6:	2308      	movs	r3, #8
 80086c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f003 0310 	and.w	r3, r3, #16
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d008      	beq.n	80086e6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e0:	461a      	mov	r2, r3
 80086e2:	2310      	movs	r3, #16
 80086e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d008      	beq.n	8008702 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fc:	461a      	mov	r2, r3
 80086fe:	2340      	movs	r3, #64	; 0x40
 8008700:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d008      	beq.n	800871e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	4413      	add	r3, r2
 8008714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008718:	461a      	mov	r2, r3
 800871a:	2302      	movs	r3, #2
 800871c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008724:	2b00      	cmp	r3, #0
 8008726:	d003      	beq.n	8008730 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fc75 	bl	800901a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	3301      	adds	r3, #1
 8008734:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	085b      	lsrs	r3, r3, #1
 800873a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	2b00      	cmp	r3, #0
 8008740:	f47f af49 	bne.w	80085d6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4618      	mov	r0, r3
 800874a:	f00a fbf1 	bl	8012f30 <USB_ReadInterrupts>
 800874e:	4603      	mov	r3, r0
 8008750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008758:	d122      	bne.n	80087a0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008768:	f023 0301 	bic.w	r3, r3, #1
 800876c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008774:	2b01      	cmp	r3, #1
 8008776:	d108      	bne.n	800878a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008780:	2100      	movs	r1, #0
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fea4 	bl	80094d0 <HAL_PCDEx_LPM_Callback>
 8008788:	e002      	b.n	8008790 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f010 fc00 	bl	8018f90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	695a      	ldr	r2, [r3, #20]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800879e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f00a fbc3 	bl	8012f30 <USB_ReadInterrupts>
 80087aa:	4603      	mov	r3, r0
 80087ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b4:	d112      	bne.n	80087dc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d102      	bne.n	80087cc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f010 fbbc 	bl	8018f44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	695a      	ldr	r2, [r3, #20]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80087da:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f00a fba5 	bl	8012f30 <USB_ReadInterrupts>
 80087e6:	4603      	mov	r3, r0
 80087e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087f0:	d121      	bne.n	8008836 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	695a      	ldr	r2, [r3, #20]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008800:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008808:	2b00      	cmp	r3, #0
 800880a:	d111      	bne.n	8008830 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881a:	089b      	lsrs	r3, r3, #2
 800881c:	f003 020f 	and.w	r2, r3, #15
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008826:	2101      	movs	r1, #1
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fe51 	bl	80094d0 <HAL_PCDEx_LPM_Callback>
 800882e:	e002      	b.n	8008836 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f010 fb87 	bl	8018f44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f00a fb78 	bl	8012f30 <USB_ReadInterrupts>
 8008840:	4603      	mov	r3, r0
 8008842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800884a:	f040 80c7 	bne.w	80089dc <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	69fa      	ldr	r2, [r7, #28]
 8008858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800885c:	f023 0301 	bic.w	r3, r3, #1
 8008860:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2110      	movs	r1, #16
 8008868:	4618      	mov	r0, r3
 800886a:	f009 fc4b 	bl	8012104 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800886e:	2300      	movs	r3, #0
 8008870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008872:	e056      	b.n	8008922 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	4413      	add	r3, r2
 800887c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008880:	461a      	mov	r2, r3
 8008882:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008886:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	69fa      	ldr	r2, [r7, #28]
 800889c:	440a      	add	r2, r1
 800889e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088a6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80088a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088b8:	0151      	lsls	r1, r2, #5
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	440a      	add	r2, r1
 80088be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80088c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d4:	461a      	mov	r2, r3
 80088d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80088dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ec:	0151      	lsls	r1, r2, #5
 80088ee:	69fa      	ldr	r2, [r7, #28]
 80088f0:	440a      	add	r2, r1
 80088f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800890c:	0151      	lsls	r1, r2, #5
 800890e:	69fa      	ldr	r2, [r7, #28]
 8008910:	440a      	add	r2, r1
 8008912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008916:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800891a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891e:	3301      	adds	r3, #1
 8008920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008928:	429a      	cmp	r2, r3
 800892a:	d3a3      	bcc.n	8008874 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	69fa      	ldr	r2, [r7, #28]
 8008936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800893a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800893e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008944:	2b00      	cmp	r3, #0
 8008946:	d016      	beq.n	8008976 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008952:	69fa      	ldr	r2, [r7, #28]
 8008954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008958:	f043 030b 	orr.w	r3, r3, #11
 800895c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800896e:	f043 030b 	orr.w	r3, r3, #11
 8008972:	6453      	str	r3, [r2, #68]	; 0x44
 8008974:	e015      	b.n	80089a2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897c:	695a      	ldr	r2, [r3, #20]
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008984:	4619      	mov	r1, r3
 8008986:	f242 032b 	movw	r3, #8235	; 0x202b
 800898a:	4313      	orrs	r3, r2
 800898c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	69fa      	ldr	r2, [r7, #28]
 8008998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800899c:	f043 030b 	orr.w	r3, r3, #11
 80089a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	69fa      	ldr	r2, [r7, #28]
 80089ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80089b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6818      	ldr	r0, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80089c6:	461a      	mov	r2, r3
 80089c8:	f00a fb78 	bl	80130bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	695a      	ldr	r2, [r3, #20]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80089da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f00a faa5 	bl	8012f30 <USB_ReadInterrupts>
 80089e6:	4603      	mov	r3, r0
 80089e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089f0:	d124      	bne.n	8008a3c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f00a fb3c 	bl	8013074 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f009 fbe0 	bl	80121c6 <USB_GetDevSpeed>
 8008a06:	4603      	mov	r3, r0
 8008a08:	461a      	mov	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681c      	ldr	r4, [r3, #0]
 8008a12:	f001 fdd9 	bl	800a5c8 <HAL_RCC_GetHCLKFreq>
 8008a16:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	461a      	mov	r2, r3
 8008a20:	4620      	mov	r0, r4
 8008a22:	f009 f923 	bl	8011c6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f010 fa63 	bl	8018ef2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	695a      	ldr	r2, [r3, #20]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f00a fa75 	bl	8012f30 <USB_ReadInterrupts>
 8008a46:	4603      	mov	r3, r0
 8008a48:	f003 0308 	and.w	r3, r3, #8
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d10a      	bne.n	8008a66 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f010 fa40 	bl	8018ed6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	695a      	ldr	r2, [r3, #20]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f002 0208 	and.w	r2, r2, #8
 8008a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f00a fa60 	bl	8012f30 <USB_ReadInterrupts>
 8008a70:	4603      	mov	r3, r0
 8008a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a7a:	d10f      	bne.n	8008a9c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f010 faa2 	bl	8018fd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	695a      	ldr	r2, [r3, #20]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f00a fa45 	bl	8012f30 <USB_ReadInterrupts>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ab0:	d10f      	bne.n	8008ad2 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f010 fa75 	bl	8018fac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	695a      	ldr	r2, [r3, #20]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f00a fa2a 	bl	8012f30 <USB_ReadInterrupts>
 8008adc:	4603      	mov	r3, r0
 8008ade:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae6:	d10a      	bne.n	8008afe <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f010 fa83 	bl	8018ff4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	695a      	ldr	r2, [r3, #20]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f00a fa14 	bl	8012f30 <USB_ReadInterrupts>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	f003 0304 	and.w	r3, r3, #4
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	d115      	bne.n	8008b3e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f010 fa73 	bl	8019010 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6859      	ldr	r1, [r3, #4]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
 8008b3a:	e000      	b.n	8008b3e <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008b3c:	bf00      	nop
    }
  }
}
 8008b3e:	3734      	adds	r7, #52	; 0x34
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd90      	pop	{r4, r7, pc}

08008b44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d101      	bne.n	8008b5e <HAL_PCD_SetAddress+0x1a>
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	e013      	b.n	8008b86 <HAL_PCD_SetAddress+0x42>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	78fa      	ldrb	r2, [r7, #3]
 8008b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	4611      	mov	r1, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f00a f984 	bl	8012e84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	4608      	mov	r0, r1
 8008b98:	4611      	mov	r1, r2
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	70fb      	strb	r3, [r7, #3]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	803b      	strh	r3, [r7, #0]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	da0f      	bge.n	8008bd4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bb4:	78fb      	ldrb	r3, [r7, #3]
 8008bb6:	f003 020f 	and.w	r2, r3, #15
 8008bba:	4613      	mov	r3, r2
 8008bbc:	00db      	lsls	r3, r3, #3
 8008bbe:	1a9b      	subs	r3, r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	3338      	adds	r3, #56	; 0x38
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	3304      	adds	r3, #4
 8008bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	705a      	strb	r2, [r3, #1]
 8008bd2:	e00f      	b.n	8008bf4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bd4:	78fb      	ldrb	r3, [r7, #3]
 8008bd6:	f003 020f 	and.w	r2, r3, #15
 8008bda:	4613      	mov	r3, r2
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	1a9b      	subs	r3, r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	4413      	add	r3, r2
 8008bea:	3304      	adds	r3, #4
 8008bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008bf4:	78fb      	ldrb	r3, [r7, #3]
 8008bf6:	f003 030f 	and.w	r3, r3, #15
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008c00:	883a      	ldrh	r2, [r7, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	78ba      	ldrb	r2, [r7, #2]
 8008c0a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	785b      	ldrb	r3, [r3, #1]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d004      	beq.n	8008c1e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008c1e:	78bb      	ldrb	r3, [r7, #2]
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d102      	bne.n	8008c2a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d101      	bne.n	8008c38 <HAL_PCD_EP_Open+0xaa>
 8008c34:	2302      	movs	r3, #2
 8008c36:	e00e      	b.n	8008c56 <HAL_PCD_EP_Open+0xc8>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68f9      	ldr	r1, [r7, #12]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f009 fae2 	bl	8012210 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008c54:	7afb      	ldrb	r3, [r7, #11]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	460b      	mov	r3, r1
 8008c68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	da0f      	bge.n	8008c92 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c72:	78fb      	ldrb	r3, [r7, #3]
 8008c74:	f003 020f 	and.w	r2, r3, #15
 8008c78:	4613      	mov	r3, r2
 8008c7a:	00db      	lsls	r3, r3, #3
 8008c7c:	1a9b      	subs	r3, r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	3338      	adds	r3, #56	; 0x38
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	4413      	add	r3, r2
 8008c86:	3304      	adds	r3, #4
 8008c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	705a      	strb	r2, [r3, #1]
 8008c90:	e00f      	b.n	8008cb2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c92:	78fb      	ldrb	r3, [r7, #3]
 8008c94:	f003 020f 	and.w	r2, r3, #15
 8008c98:	4613      	mov	r3, r2
 8008c9a:	00db      	lsls	r3, r3, #3
 8008c9c:	1a9b      	subs	r3, r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	3304      	adds	r3, #4
 8008caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008cb2:	78fb      	ldrb	r3, [r7, #3]
 8008cb4:	f003 030f 	and.w	r3, r3, #15
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d101      	bne.n	8008ccc <HAL_PCD_EP_Close+0x6e>
 8008cc8:	2302      	movs	r3, #2
 8008cca:	e00e      	b.n	8008cea <HAL_PCD_EP_Close+0x8c>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68f9      	ldr	r1, [r7, #12]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f009 fb20 	bl	8012320 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b086      	sub	sp, #24
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	60f8      	str	r0, [r7, #12]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	603b      	str	r3, [r7, #0]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d02:	7afb      	ldrb	r3, [r7, #11]
 8008d04:	f003 020f 	and.w	r2, r3, #15
 8008d08:	4613      	mov	r3, r2
 8008d0a:	00db      	lsls	r3, r3, #3
 8008d0c:	1a9b      	subs	r3, r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	4413      	add	r3, r2
 8008d18:	3304      	adds	r3, #4
 8008d1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2200      	movs	r2, #0
 8008d32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d34:	7afb      	ldrb	r3, [r7, #11]
 8008d36:	f003 030f 	and.w	r3, r3, #15
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d102      	bne.n	8008d4e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d4e:	7afb      	ldrb	r3, [r7, #11]
 8008d50:	f003 030f 	and.w	r3, r3, #15
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d109      	bne.n	8008d6c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6818      	ldr	r0, [r3, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	461a      	mov	r2, r3
 8008d64:	6979      	ldr	r1, [r7, #20]
 8008d66:	f009 fe03 	bl	8012970 <USB_EP0StartXfer>
 8008d6a:	e008      	b.n	8008d7e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6818      	ldr	r0, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	461a      	mov	r2, r3
 8008d78:	6979      	ldr	r1, [r7, #20]
 8008d7a:	f009 fbad 	bl	80124d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	f003 020f 	and.w	r2, r3, #15
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	1a9b      	subs	r3, r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	440b      	add	r3, r1
 8008da6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008daa:	681b      	ldr	r3, [r3, #0]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
 8008dca:	f003 020f 	and.w	r2, r3, #15
 8008dce:	4613      	mov	r3, r2
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	1a9b      	subs	r3, r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	3338      	adds	r3, #56	; 0x38
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4413      	add	r3, r2
 8008ddc:	3304      	adds	r3, #4
 8008dde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	2200      	movs	r2, #0
 8008df0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2201      	movs	r2, #1
 8008df6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008df8:	7afb      	ldrb	r3, [r7, #11]
 8008dfa:	f003 030f 	and.w	r3, r3, #15
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d102      	bne.n	8008e12 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e12:	7afb      	ldrb	r3, [r7, #11]
 8008e14:	f003 030f 	and.w	r3, r3, #15
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d109      	bne.n	8008e30 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	461a      	mov	r2, r3
 8008e28:	6979      	ldr	r1, [r7, #20]
 8008e2a:	f009 fda1 	bl	8012970 <USB_EP0StartXfer>
 8008e2e:	e008      	b.n	8008e42 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	6979      	ldr	r1, [r7, #20]
 8008e3e:	f009 fb4b 	bl	80124d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008e58:	78fb      	ldrb	r3, [r7, #3]
 8008e5a:	f003 020f 	and.w	r2, r3, #15
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d901      	bls.n	8008e6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e050      	b.n	8008f0c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	da0f      	bge.n	8008e92 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	f003 020f 	and.w	r2, r3, #15
 8008e78:	4613      	mov	r3, r2
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	1a9b      	subs	r3, r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	3338      	adds	r3, #56	; 0x38
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	4413      	add	r3, r2
 8008e86:	3304      	adds	r3, #4
 8008e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	705a      	strb	r2, [r3, #1]
 8008e90:	e00d      	b.n	8008eae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008e92:	78fa      	ldrb	r2, [r7, #3]
 8008e94:	4613      	mov	r3, r2
 8008e96:	00db      	lsls	r3, r3, #3
 8008e98:	1a9b      	subs	r3, r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	f003 030f 	and.w	r3, r3, #15
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d101      	bne.n	8008ece <HAL_PCD_EP_SetStall+0x82>
 8008eca:	2302      	movs	r3, #2
 8008ecc:	e01e      	b.n	8008f0c <HAL_PCD_EP_SetStall+0xc0>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68f9      	ldr	r1, [r7, #12]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f009 fefd 	bl	8012cdc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008ee2:	78fb      	ldrb	r3, [r7, #3]
 8008ee4:	f003 030f 	and.w	r3, r3, #15
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10a      	bne.n	8008f02 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6818      	ldr	r0, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	b2d9      	uxtb	r1, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008efc:	461a      	mov	r2, r3
 8008efe:	f00a f8dd 	bl	80130bc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	f003 020f 	and.w	r2, r3, #15
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d901      	bls.n	8008f32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e042      	b.n	8008fb8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da0f      	bge.n	8008f5a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	f003 020f 	and.w	r2, r3, #15
 8008f40:	4613      	mov	r3, r2
 8008f42:	00db      	lsls	r3, r3, #3
 8008f44:	1a9b      	subs	r3, r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	3338      	adds	r3, #56	; 0x38
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	3304      	adds	r3, #4
 8008f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	705a      	strb	r2, [r3, #1]
 8008f58:	e00f      	b.n	8008f7a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	f003 020f 	and.w	r2, r3, #15
 8008f60:	4613      	mov	r3, r2
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	1a9b      	subs	r3, r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	4413      	add	r3, r2
 8008f70:	3304      	adds	r3, #4
 8008f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	f003 030f 	and.w	r3, r3, #15
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d101      	bne.n	8008f9a <HAL_PCD_EP_ClrStall+0x86>
 8008f96:	2302      	movs	r3, #2
 8008f98:	e00e      	b.n	8008fb8 <HAL_PCD_EP_ClrStall+0xa4>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68f9      	ldr	r1, [r7, #12]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f009 ff05 	bl	8012db8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d101      	bne.n	8008fda <HAL_PCD_EP_Flush+0x1a>
 8008fd6:	2302      	movs	r3, #2
 8008fd8:	e01b      	b.n	8009012 <HAL_PCD_EP_Flush+0x52>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8008fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	da09      	bge.n	8008ffe <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	78fb      	ldrb	r3, [r7, #3]
 8008ff0:	f003 030f 	and.w	r3, r3, #15
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	f009 f884 	bl	8012104 <USB_FlushTxFifo>
 8008ffc:	e004      	b.n	8009008 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4618      	mov	r0, r3
 8009004:	f009 f8a4 	bl	8012150 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b08a      	sub	sp, #40	; 0x28
 800901e:	af02      	add	r7, sp, #8
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	4613      	mov	r3, r2
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	1a9b      	subs	r3, r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	3338      	adds	r3, #56	; 0x38
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	4413      	add	r3, r2
 800903e:	3304      	adds	r3, #4
 8009040:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	699a      	ldr	r2, [r3, #24]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	429a      	cmp	r2, r3
 800904c:	d901      	bls.n	8009052 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e06c      	b.n	800912c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	695a      	ldr	r2, [r3, #20]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	69fa      	ldr	r2, [r7, #28]
 8009064:	429a      	cmp	r2, r3
 8009066:	d902      	bls.n	800906e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	3303      	adds	r3, #3
 8009072:	089b      	lsrs	r3, r3, #2
 8009074:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009076:	e02b      	b.n	80090d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	695a      	ldr	r2, [r3, #20]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	69fa      	ldr	r2, [r7, #28]
 800908a:	429a      	cmp	r2, r3
 800908c:	d902      	bls.n	8009094 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	3303      	adds	r3, #3
 8009098:	089b      	lsrs	r3, r3, #2
 800909a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	68d9      	ldr	r1, [r3, #12]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	4603      	mov	r3, r0
 80090b2:	6978      	ldr	r0, [r7, #20]
 80090b4:	f009 fdb4 	bl	8012c20 <USB_WritePacket>

    ep->xfer_buff  += len;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	68da      	ldr	r2, [r3, #12]
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	441a      	add	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	699a      	ldr	r2, [r3, #24]
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	441a      	add	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	b29b      	uxth	r3, r3
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d809      	bhi.n	80090fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	699a      	ldr	r2, [r3, #24]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d203      	bcs.n	80090fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1be      	bne.n	8009078 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	695a      	ldr	r2, [r3, #20]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	429a      	cmp	r2, r3
 8009104:	d811      	bhi.n	800912a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	f003 030f 	and.w	r3, r3, #15
 800910c:	2201      	movs	r2, #1
 800910e:	fa02 f303 	lsl.w	r3, r2, r3
 8009112:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	43db      	mvns	r3, r3
 8009120:	6939      	ldr	r1, [r7, #16]
 8009122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009126:	4013      	ands	r3, r2
 8009128:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3720      	adds	r7, #32
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	333c      	adds	r3, #60	; 0x3c
 800914c:	3304      	adds	r3, #4
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	015a      	lsls	r2, r3, #5
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	4413      	add	r3, r2
 800915a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	2b01      	cmp	r3, #1
 8009168:	f040 80a0 	bne.w	80092ac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d015      	beq.n	80091a2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4a72      	ldr	r2, [pc, #456]	; (8009344 <PCD_EP_OutXfrComplete_int+0x210>)
 800917a:	4293      	cmp	r3, r2
 800917c:	f240 80dd 	bls.w	800933a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 80d7 	beq.w	800933a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009198:	461a      	mov	r2, r3
 800919a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800919e:	6093      	str	r3, [r2, #8]
 80091a0:	e0cb      	b.n	800933a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f003 0320 	and.w	r3, r3, #32
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d009      	beq.n	80091c0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	015a      	lsls	r2, r3, #5
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	4413      	add	r3, r2
 80091b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b8:	461a      	mov	r2, r3
 80091ba:	2320      	movs	r3, #32
 80091bc:	6093      	str	r3, [r2, #8]
 80091be:	e0bc      	b.n	800933a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f040 80b7 	bne.w	800933a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4a5d      	ldr	r2, [pc, #372]	; (8009344 <PCD_EP_OutXfrComplete_int+0x210>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d90f      	bls.n	80091f4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00a      	beq.n	80091f4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ea:	461a      	mov	r2, r3
 80091ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091f0:	6093      	str	r3, [r2, #8]
 80091f2:	e0a2      	b.n	800933a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	4613      	mov	r3, r2
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	1a9b      	subs	r3, r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	440b      	add	r3, r1
 8009202:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009206:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	0159      	lsls	r1, r3, #5
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	440b      	add	r3, r1
 8009210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800921a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	4613      	mov	r3, r2
 8009222:	00db      	lsls	r3, r3, #3
 8009224:	1a9b      	subs	r3, r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4403      	add	r3, r0
 800922a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800922e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	4613      	mov	r3, r2
 8009236:	00db      	lsls	r3, r3, #3
 8009238:	1a9b      	subs	r3, r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	440b      	add	r3, r1
 800923e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009242:	6819      	ldr	r1, [r3, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	4613      	mov	r3, r2
 800924a:	00db      	lsls	r3, r3, #3
 800924c:	1a9b      	subs	r3, r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4403      	add	r3, r0
 8009252:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4419      	add	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	4613      	mov	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	1a9b      	subs	r3, r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4403      	add	r3, r0
 8009268:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800926c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d114      	bne.n	800929e <PCD_EP_OutXfrComplete_int+0x16a>
 8009274:	6879      	ldr	r1, [r7, #4]
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	4613      	mov	r3, r2
 800927a:	00db      	lsls	r3, r3, #3
 800927c:	1a9b      	subs	r3, r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	440b      	add	r3, r1
 8009282:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d108      	bne.n	800929e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6818      	ldr	r0, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009296:	461a      	mov	r2, r3
 8009298:	2101      	movs	r1, #1
 800929a:	f009 ff0f 	bl	80130bc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f00f fde1 	bl	8018e6c <HAL_PCD_DataOutStageCallback>
 80092aa:	e046      	b.n	800933a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4a26      	ldr	r2, [pc, #152]	; (8009348 <PCD_EP_OutXfrComplete_int+0x214>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d124      	bne.n	80092fe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ca:	461a      	mov	r2, r3
 80092cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092d0:	6093      	str	r3, [r2, #8]
 80092d2:	e032      	b.n	800933a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d008      	beq.n	80092f0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ea:	461a      	mov	r2, r3
 80092ec:	2320      	movs	r3, #32
 80092ee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	4619      	mov	r1, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f00f fdb8 	bl	8018e6c <HAL_PCD_DataOutStageCallback>
 80092fc:	e01d      	b.n	800933a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d114      	bne.n	800932e <PCD_EP_OutXfrComplete_int+0x1fa>
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	4613      	mov	r3, r2
 800930a:	00db      	lsls	r3, r3, #3
 800930c:	1a9b      	subs	r3, r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	440b      	add	r3, r1
 8009312:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d108      	bne.n	800932e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6818      	ldr	r0, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009326:	461a      	mov	r2, r3
 8009328:	2100      	movs	r1, #0
 800932a:	f009 fec7 	bl	80130bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f00f fd99 	bl	8018e6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	4f54300a 	.word	0x4f54300a
 8009348:	4f54310a 	.word	0x4f54310a

0800934c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	333c      	adds	r3, #60	; 0x3c
 8009364:	3304      	adds	r3, #4
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4a15      	ldr	r2, [pc, #84]	; (80093d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d90e      	bls.n	80093a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009388:	2b00      	cmp	r3, #0
 800938a:	d009      	beq.n	80093a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009398:	461a      	mov	r2, r3
 800939a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800939e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f00f fd51 	bl	8018e48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	4a0a      	ldr	r2, [pc, #40]	; (80093d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d90c      	bls.n	80093c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d108      	bne.n	80093c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80093c0:	461a      	mov	r2, r3
 80093c2:	2101      	movs	r1, #1
 80093c4:	f009 fe7a 	bl	80130bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3718      	adds	r7, #24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	4f54300a 	.word	0x4f54300a

080093d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70fb      	strb	r3, [r7, #3]
 80093e4:	4613      	mov	r3, r2
 80093e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d107      	bne.n	8009406 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80093f6:	883b      	ldrh	r3, [r7, #0]
 80093f8:	0419      	lsls	r1, r3, #16
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	430a      	orrs	r2, r1
 8009402:	629a      	str	r2, [r3, #40]	; 0x28
 8009404:	e028      	b.n	8009458 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940c:	0c1b      	lsrs	r3, r3, #16
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	4413      	add	r3, r2
 8009412:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009414:	2300      	movs	r3, #0
 8009416:	73fb      	strb	r3, [r7, #15]
 8009418:	e00d      	b.n	8009436 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	3340      	adds	r3, #64	; 0x40
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	0c1b      	lsrs	r3, r3, #16
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	4413      	add	r3, r2
 800942e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009430:	7bfb      	ldrb	r3, [r7, #15]
 8009432:	3301      	adds	r3, #1
 8009434:	73fb      	strb	r3, [r7, #15]
 8009436:	7bfa      	ldrb	r2, [r7, #15]
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	3b01      	subs	r3, #1
 800943c:	429a      	cmp	r2, r3
 800943e:	d3ec      	bcc.n	800941a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009440:	883b      	ldrh	r3, [r7, #0]
 8009442:	0418      	lsls	r0, r3, #16
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6819      	ldr	r1, [r3, #0]
 8009448:	78fb      	ldrb	r3, [r7, #3]
 800944a:	3b01      	subs	r3, #1
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	4302      	orrs	r2, r0
 8009450:	3340      	adds	r3, #64	; 0x40
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	440b      	add	r3, r1
 8009456:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009466:	b480      	push	{r7}
 8009468:	b083      	sub	sp, #12
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	460b      	mov	r3, r1
 8009470:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	887a      	ldrh	r2, [r7, #2]
 8009478:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094b6:	4b05      	ldr	r3, [pc, #20]	; (80094cc <HAL_PCDEx_ActivateLPM+0x44>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	10000003 	.word	0x10000003

080094d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80094e8:	b480      	push	{r7}
 80094ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80094ec:	4b05      	ldr	r3, [pc, #20]	; (8009504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a04      	ldr	r2, [pc, #16]	; (8009504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80094f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094f6:	6013      	str	r3, [r2, #0]
}
 80094f8:	bf00      	nop
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	58024800 	.word	0x58024800

08009508 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d069      	beq.n	80095ea <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8009516:	4b38      	ldr	r3, [pc, #224]	; (80095f8 <HAL_PWR_ConfigPVD+0xf0>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4935      	ldr	r1, [pc, #212]	; (80095f8 <HAL_PWR_ConfigPVD+0xf0>)
 8009524:	4313      	orrs	r3, r2
 8009526:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8009528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800952c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009538:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 800953c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009544:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800954c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 8009550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800955a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800955e:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 8009560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800956a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800956e:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d009      	beq.n	8009590 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 800957c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800958c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d009      	beq.n	80095b0 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 800959c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d007      	beq.n	80095cc <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 80095bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095ca:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f003 0302 	and.w	r3, r3, #2
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d009      	beq.n	80095ec <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 80095d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095e6:	6053      	str	r3, [r2, #4]
 80095e8:	e000      	b.n	80095ec <HAL_PWR_ConfigPVD+0xe4>
    return;
 80095ea:	bf00      	nop
  }
}
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	58024800 	.word	0x58024800

080095fc <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 80095fc:	b480      	push	{r7}
 80095fe:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8009600:	4b05      	ldr	r3, [pc, #20]	; (8009618 <HAL_PWR_EnablePVD+0x1c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a04      	ldr	r2, [pc, #16]	; (8009618 <HAL_PWR_EnablePVD+0x1c>)
 8009606:	f043 0310 	orr.w	r3, r3, #16
 800960a:	6013      	str	r3, [r2, #0]
}
 800960c:	bf00      	nop
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	58024800 	.word	0x58024800

0800961c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009624:	4b19      	ldr	r3, [pc, #100]	; (800968c <HAL_PWREx_ConfigSupply+0x70>)
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	f003 0304 	and.w	r3, r3, #4
 800962c:	2b04      	cmp	r3, #4
 800962e:	d00a      	beq.n	8009646 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009630:	4b16      	ldr	r3, [pc, #88]	; (800968c <HAL_PWREx_ConfigSupply+0x70>)
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	f003 0307 	and.w	r3, r3, #7
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	429a      	cmp	r2, r3
 800963c:	d001      	beq.n	8009642 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e01f      	b.n	8009682 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	e01d      	b.n	8009682 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009646:	4b11      	ldr	r3, [pc, #68]	; (800968c <HAL_PWREx_ConfigSupply+0x70>)
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	f023 0207 	bic.w	r2, r3, #7
 800964e:	490f      	ldr	r1, [pc, #60]	; (800968c <HAL_PWREx_ConfigSupply+0x70>)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4313      	orrs	r3, r2
 8009654:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009656:	f7fa ffa7 	bl	80045a8 <HAL_GetTick>
 800965a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800965c:	e009      	b.n	8009672 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800965e:	f7fa ffa3 	bl	80045a8 <HAL_GetTick>
 8009662:	4602      	mov	r2, r0
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800966c:	d901      	bls.n	8009672 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e007      	b.n	8009682 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009672:	4b06      	ldr	r3, [pc, #24]	; (800968c <HAL_PWREx_ConfigSupply+0x70>)
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800967a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800967e:	d1ee      	bne.n	800965e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	58024800 	.word	0x58024800

08009690 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009690:	b480      	push	{r7}
 8009692:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009694:	4b05      	ldr	r3, [pc, #20]	; (80096ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	4a04      	ldr	r2, [pc, #16]	; (80096ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800969a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800969e:	60d3      	str	r3, [r2, #12]
}
 80096a0:	bf00      	nop
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	58024800 	.word	0x58024800

080096b0 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 80096b4:	4b1b      	ldr	r3, [pc, #108]	; (8009724 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0310 	and.w	r3, r3, #16
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d014      	beq.n	80096ea <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 80096c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d0:	d10b      	bne.n	80096ea <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 80096d2:	f7fa fa75 	bl	8003bc0 <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 80096d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80096e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 80096ea:	4b0e      	ldr	r3, [pc, #56]	; (8009724 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d014      	beq.n	8009720 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 80096f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009706:	d10b      	bne.n	8009720 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8009708:	f000 f80e 	bl	8009728 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 800970c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800971c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 8009720:	bf00      	nop
 8009722:	bd80      	pop	{r7, pc}
 8009724:	58024800 	.word	0x58024800

08009728 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8009728:	b480      	push	{r7}
 800972a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 800972c:	bf00      	nop
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
	...

08009738 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08c      	sub	sp, #48	; 0x30
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e3ff      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 8087 	beq.w	8009866 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009758:	4b99      	ldr	r3, [pc, #612]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009760:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009762:	4b97      	ldr	r3, [pc, #604]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009766:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976a:	2b10      	cmp	r3, #16
 800976c:	d007      	beq.n	800977e <HAL_RCC_OscConfig+0x46>
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	2b18      	cmp	r3, #24
 8009772:	d110      	bne.n	8009796 <HAL_RCC_OscConfig+0x5e>
 8009774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009776:	f003 0303 	and.w	r3, r3, #3
 800977a:	2b02      	cmp	r3, #2
 800977c:	d10b      	bne.n	8009796 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800977e:	4b90      	ldr	r3, [pc, #576]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d06c      	beq.n	8009864 <HAL_RCC_OscConfig+0x12c>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d168      	bne.n	8009864 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e3d9      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800979e:	d106      	bne.n	80097ae <HAL_RCC_OscConfig+0x76>
 80097a0:	4b87      	ldr	r3, [pc, #540]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a86      	ldr	r2, [pc, #536]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	e02e      	b.n	800980c <HAL_RCC_OscConfig+0xd4>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10c      	bne.n	80097d0 <HAL_RCC_OscConfig+0x98>
 80097b6:	4b82      	ldr	r3, [pc, #520]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a81      	ldr	r2, [pc, #516]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	4b7f      	ldr	r3, [pc, #508]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a7e      	ldr	r2, [pc, #504]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097cc:	6013      	str	r3, [r2, #0]
 80097ce:	e01d      	b.n	800980c <HAL_RCC_OscConfig+0xd4>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097d8:	d10c      	bne.n	80097f4 <HAL_RCC_OscConfig+0xbc>
 80097da:	4b79      	ldr	r3, [pc, #484]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a78      	ldr	r2, [pc, #480]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097e4:	6013      	str	r3, [r2, #0]
 80097e6:	4b76      	ldr	r3, [pc, #472]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a75      	ldr	r2, [pc, #468]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	e00b      	b.n	800980c <HAL_RCC_OscConfig+0xd4>
 80097f4:	4b72      	ldr	r3, [pc, #456]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a71      	ldr	r2, [pc, #452]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80097fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097fe:	6013      	str	r3, [r2, #0]
 8009800:	4b6f      	ldr	r3, [pc, #444]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a6e      	ldr	r2, [pc, #440]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800980a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d013      	beq.n	800983c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009814:	f7fa fec8 	bl	80045a8 <HAL_GetTick>
 8009818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800981a:	e008      	b.n	800982e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800981c:	f7fa fec4 	bl	80045a8 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2b64      	cmp	r3, #100	; 0x64
 8009828:	d901      	bls.n	800982e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e38d      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800982e:	4b64      	ldr	r3, [pc, #400]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0f0      	beq.n	800981c <HAL_RCC_OscConfig+0xe4>
 800983a:	e014      	b.n	8009866 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800983c:	f7fa feb4 	bl	80045a8 <HAL_GetTick>
 8009840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009842:	e008      	b.n	8009856 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009844:	f7fa feb0 	bl	80045a8 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	2b64      	cmp	r3, #100	; 0x64
 8009850:	d901      	bls.n	8009856 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009852:	2303      	movs	r3, #3
 8009854:	e379      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009856:	4b5a      	ldr	r3, [pc, #360]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1f0      	bne.n	8009844 <HAL_RCC_OscConfig+0x10c>
 8009862:	e000      	b.n	8009866 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0302 	and.w	r3, r3, #2
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 80ae 	beq.w	80099d0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009874:	4b52      	ldr	r3, [pc, #328]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800987c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800987e:	4b50      	ldr	r3, [pc, #320]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009882:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d007      	beq.n	800989a <HAL_RCC_OscConfig+0x162>
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	2b18      	cmp	r3, #24
 800988e:	d13a      	bne.n	8009906 <HAL_RCC_OscConfig+0x1ce>
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	f003 0303 	and.w	r3, r3, #3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d135      	bne.n	8009906 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800989a:	4b49      	ldr	r3, [pc, #292]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 0304 	and.w	r3, r3, #4
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d005      	beq.n	80098b2 <HAL_RCC_OscConfig+0x17a>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e34b      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098b2:	f7fa fea7 	bl	8004604 <HAL_GetREVID>
 80098b6:	4602      	mov	r2, r0
 80098b8:	f241 0303 	movw	r3, #4099	; 0x1003
 80098bc:	429a      	cmp	r2, r3
 80098be:	d817      	bhi.n	80098f0 <HAL_RCC_OscConfig+0x1b8>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	2b40      	cmp	r3, #64	; 0x40
 80098c6:	d108      	bne.n	80098da <HAL_RCC_OscConfig+0x1a2>
 80098c8:	4b3d      	ldr	r3, [pc, #244]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80098d0:	4a3b      	ldr	r2, [pc, #236]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80098d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098d6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098d8:	e07a      	b.n	80099d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098da:	4b39      	ldr	r3, [pc, #228]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	031b      	lsls	r3, r3, #12
 80098e8:	4935      	ldr	r1, [pc, #212]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80098ea:	4313      	orrs	r3, r2
 80098ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098ee:	e06f      	b.n	80099d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098f0:	4b33      	ldr	r3, [pc, #204]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	061b      	lsls	r3, r3, #24
 80098fe:	4930      	ldr	r1, [pc, #192]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009900:	4313      	orrs	r3, r2
 8009902:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009904:	e064      	b.n	80099d0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d045      	beq.n	800999a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800990e:	4b2c      	ldr	r3, [pc, #176]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f023 0219 	bic.w	r2, r3, #25
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	4929      	ldr	r1, [pc, #164]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 800991c:	4313      	orrs	r3, r2
 800991e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009920:	f7fa fe42 	bl	80045a8 <HAL_GetTick>
 8009924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009926:	e008      	b.n	800993a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009928:	f7fa fe3e 	bl	80045a8 <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	2b02      	cmp	r3, #2
 8009934:	d901      	bls.n	800993a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	e307      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800993a:	4b21      	ldr	r3, [pc, #132]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0304 	and.w	r3, r3, #4
 8009942:	2b00      	cmp	r3, #0
 8009944:	d0f0      	beq.n	8009928 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009946:	f7fa fe5d 	bl	8004604 <HAL_GetREVID>
 800994a:	4602      	mov	r2, r0
 800994c:	f241 0303 	movw	r3, #4099	; 0x1003
 8009950:	429a      	cmp	r2, r3
 8009952:	d817      	bhi.n	8009984 <HAL_RCC_OscConfig+0x24c>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	2b40      	cmp	r3, #64	; 0x40
 800995a:	d108      	bne.n	800996e <HAL_RCC_OscConfig+0x236>
 800995c:	4b18      	ldr	r3, [pc, #96]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009964:	4a16      	ldr	r2, [pc, #88]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800996a:	6053      	str	r3, [r2, #4]
 800996c:	e030      	b.n	80099d0 <HAL_RCC_OscConfig+0x298>
 800996e:	4b14      	ldr	r3, [pc, #80]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	031b      	lsls	r3, r3, #12
 800997c:	4910      	ldr	r1, [pc, #64]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 800997e:	4313      	orrs	r3, r2
 8009980:	604b      	str	r3, [r1, #4]
 8009982:	e025      	b.n	80099d0 <HAL_RCC_OscConfig+0x298>
 8009984:	4b0e      	ldr	r3, [pc, #56]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	061b      	lsls	r3, r3, #24
 8009992:	490b      	ldr	r1, [pc, #44]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 8009994:	4313      	orrs	r3, r2
 8009996:	604b      	str	r3, [r1, #4]
 8009998:	e01a      	b.n	80099d0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800999a:	4b09      	ldr	r3, [pc, #36]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a08      	ldr	r2, [pc, #32]	; (80099c0 <HAL_RCC_OscConfig+0x288>)
 80099a0:	f023 0301 	bic.w	r3, r3, #1
 80099a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a6:	f7fa fdff 	bl	80045a8 <HAL_GetTick>
 80099aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099ac:	e00a      	b.n	80099c4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099ae:	f7fa fdfb 	bl	80045a8 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d903      	bls.n	80099c4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e2c4      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
 80099c0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099c4:	4ba4      	ldr	r3, [pc, #656]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0304 	and.w	r3, r3, #4
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1ee      	bne.n	80099ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0310 	and.w	r3, r3, #16
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 80a9 	beq.w	8009b30 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099de:	4b9e      	ldr	r3, [pc, #632]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099e8:	4b9b      	ldr	r3, [pc, #620]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 80099ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	2b08      	cmp	r3, #8
 80099f2:	d007      	beq.n	8009a04 <HAL_RCC_OscConfig+0x2cc>
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	2b18      	cmp	r3, #24
 80099f8:	d13a      	bne.n	8009a70 <HAL_RCC_OscConfig+0x338>
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	f003 0303 	and.w	r3, r3, #3
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d135      	bne.n	8009a70 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a04:	4b94      	ldr	r3, [pc, #592]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <HAL_RCC_OscConfig+0x2e4>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	69db      	ldr	r3, [r3, #28]
 8009a14:	2b80      	cmp	r3, #128	; 0x80
 8009a16:	d001      	beq.n	8009a1c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e296      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a1c:	f7fa fdf2 	bl	8004604 <HAL_GetREVID>
 8009a20:	4602      	mov	r2, r0
 8009a22:	f241 0303 	movw	r3, #4099	; 0x1003
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d817      	bhi.n	8009a5a <HAL_RCC_OscConfig+0x322>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	2b20      	cmp	r3, #32
 8009a30:	d108      	bne.n	8009a44 <HAL_RCC_OscConfig+0x30c>
 8009a32:	4b89      	ldr	r3, [pc, #548]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a3a:	4a87      	ldr	r2, [pc, #540]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009a3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a42:	e075      	b.n	8009b30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a44:	4b84      	ldr	r3, [pc, #528]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	069b      	lsls	r3, r3, #26
 8009a52:	4981      	ldr	r1, [pc, #516]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a58:	e06a      	b.n	8009b30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a5a:	4b7f      	ldr	r3, [pc, #508]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	061b      	lsls	r3, r3, #24
 8009a68:	497b      	ldr	r1, [pc, #492]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a6e:	e05f      	b.n	8009b30 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	69db      	ldr	r3, [r3, #28]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d042      	beq.n	8009afe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009a78:	4b77      	ldr	r3, [pc, #476]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a76      	ldr	r2, [pc, #472]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a84:	f7fa fd90 	bl	80045a8 <HAL_GetTick>
 8009a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a8a:	e008      	b.n	8009a9e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009a8c:	f7fa fd8c 	bl	80045a8 <HAL_GetTick>
 8009a90:	4602      	mov	r2, r0
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d901      	bls.n	8009a9e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e255      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a9e:	4b6e      	ldr	r3, [pc, #440]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d0f0      	beq.n	8009a8c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009aaa:	f7fa fdab 	bl	8004604 <HAL_GetREVID>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	f241 0303 	movw	r3, #4099	; 0x1003
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d817      	bhi.n	8009ae8 <HAL_RCC_OscConfig+0x3b0>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	2b20      	cmp	r3, #32
 8009abe:	d108      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x39a>
 8009ac0:	4b65      	ldr	r3, [pc, #404]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009ac8:	4a63      	ldr	r2, [pc, #396]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009aca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ace:	6053      	str	r3, [r2, #4]
 8009ad0:	e02e      	b.n	8009b30 <HAL_RCC_OscConfig+0x3f8>
 8009ad2:	4b61      	ldr	r3, [pc, #388]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	069b      	lsls	r3, r3, #26
 8009ae0:	495d      	ldr	r1, [pc, #372]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	604b      	str	r3, [r1, #4]
 8009ae6:	e023      	b.n	8009b30 <HAL_RCC_OscConfig+0x3f8>
 8009ae8:	4b5b      	ldr	r3, [pc, #364]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a1b      	ldr	r3, [r3, #32]
 8009af4:	061b      	lsls	r3, r3, #24
 8009af6:	4958      	ldr	r1, [pc, #352]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60cb      	str	r3, [r1, #12]
 8009afc:	e018      	b.n	8009b30 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009afe:	4b56      	ldr	r3, [pc, #344]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a55      	ldr	r2, [pc, #340]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b0a:	f7fa fd4d 	bl	80045a8 <HAL_GetTick>
 8009b0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b10:	e008      	b.n	8009b24 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009b12:	f7fa fd49 	bl	80045a8 <HAL_GetTick>
 8009b16:	4602      	mov	r2, r0
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d901      	bls.n	8009b24 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e212      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b24:	4b4c      	ldr	r3, [pc, #304]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1f0      	bne.n	8009b12 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 0308 	and.w	r3, r3, #8
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d036      	beq.n	8009baa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d019      	beq.n	8009b78 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b44:	4b44      	ldr	r3, [pc, #272]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b48:	4a43      	ldr	r2, [pc, #268]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009b4a:	f043 0301 	orr.w	r3, r3, #1
 8009b4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b50:	f7fa fd2a 	bl	80045a8 <HAL_GetTick>
 8009b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b58:	f7fa fd26 	bl	80045a8 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e1ef      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b6a:	4b3b      	ldr	r3, [pc, #236]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0f0      	beq.n	8009b58 <HAL_RCC_OscConfig+0x420>
 8009b76:	e018      	b.n	8009baa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b78:	4b37      	ldr	r3, [pc, #220]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b7c:	4a36      	ldr	r2, [pc, #216]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009b7e:	f023 0301 	bic.w	r3, r3, #1
 8009b82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b84:	f7fa fd10 	bl	80045a8 <HAL_GetTick>
 8009b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b8a:	e008      	b.n	8009b9e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b8c:	f7fa fd0c 	bl	80045a8 <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d901      	bls.n	8009b9e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e1d5      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b9e:	4b2e      	ldr	r3, [pc, #184]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ba2:	f003 0302 	and.w	r3, r3, #2
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1f0      	bne.n	8009b8c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 0320 	and.w	r3, r3, #32
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d036      	beq.n	8009c24 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d019      	beq.n	8009bf2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009bbe:	4b26      	ldr	r3, [pc, #152]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a25      	ldr	r2, [pc, #148]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009bc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009bc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009bca:	f7fa fced 	bl	80045a8 <HAL_GetTick>
 8009bce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009bd0:	e008      	b.n	8009be4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009bd2:	f7fa fce9 	bl	80045a8 <HAL_GetTick>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d901      	bls.n	8009be4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e1b2      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009be4:	4b1c      	ldr	r3, [pc, #112]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0f0      	beq.n	8009bd2 <HAL_RCC_OscConfig+0x49a>
 8009bf0:	e018      	b.n	8009c24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009bf2:	4b19      	ldr	r3, [pc, #100]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a18      	ldr	r2, [pc, #96]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009bfe:	f7fa fcd3 	bl	80045a8 <HAL_GetTick>
 8009c02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c04:	e008      	b.n	8009c18 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009c06:	f7fa fccf 	bl	80045a8 <HAL_GetTick>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d901      	bls.n	8009c18 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009c14:	2303      	movs	r3, #3
 8009c16:	e198      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c18:	4b0f      	ldr	r3, [pc, #60]	; (8009c58 <HAL_RCC_OscConfig+0x520>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1f0      	bne.n	8009c06 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0304 	and.w	r3, r3, #4
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 8085 	beq.w	8009d3c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009c32:	4b0a      	ldr	r3, [pc, #40]	; (8009c5c <HAL_RCC_OscConfig+0x524>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a09      	ldr	r2, [pc, #36]	; (8009c5c <HAL_RCC_OscConfig+0x524>)
 8009c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c3e:	f7fa fcb3 	bl	80045a8 <HAL_GetTick>
 8009c42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c44:	e00c      	b.n	8009c60 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009c46:	f7fa fcaf 	bl	80045a8 <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	2b64      	cmp	r3, #100	; 0x64
 8009c52:	d905      	bls.n	8009c60 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e178      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
 8009c58:	58024400 	.word	0x58024400
 8009c5c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c60:	4b96      	ldr	r3, [pc, #600]	; (8009ebc <HAL_RCC_OscConfig+0x784>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d0ec      	beq.n	8009c46 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d106      	bne.n	8009c82 <HAL_RCC_OscConfig+0x54a>
 8009c74:	4b92      	ldr	r3, [pc, #584]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c78:	4a91      	ldr	r2, [pc, #580]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009c7a:	f043 0301 	orr.w	r3, r3, #1
 8009c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c80:	e02d      	b.n	8009cde <HAL_RCC_OscConfig+0x5a6>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10c      	bne.n	8009ca4 <HAL_RCC_OscConfig+0x56c>
 8009c8a:	4b8d      	ldr	r3, [pc, #564]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c8e:	4a8c      	ldr	r2, [pc, #560]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009c90:	f023 0301 	bic.w	r3, r3, #1
 8009c94:	6713      	str	r3, [r2, #112]	; 0x70
 8009c96:	4b8a      	ldr	r3, [pc, #552]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9a:	4a89      	ldr	r2, [pc, #548]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009c9c:	f023 0304 	bic.w	r3, r3, #4
 8009ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8009ca2:	e01c      	b.n	8009cde <HAL_RCC_OscConfig+0x5a6>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	2b05      	cmp	r3, #5
 8009caa:	d10c      	bne.n	8009cc6 <HAL_RCC_OscConfig+0x58e>
 8009cac:	4b84      	ldr	r3, [pc, #528]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb0:	4a83      	ldr	r2, [pc, #524]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009cb2:	f043 0304 	orr.w	r3, r3, #4
 8009cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8009cb8:	4b81      	ldr	r3, [pc, #516]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cbc:	4a80      	ldr	r2, [pc, #512]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009cbe:	f043 0301 	orr.w	r3, r3, #1
 8009cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8009cc4:	e00b      	b.n	8009cde <HAL_RCC_OscConfig+0x5a6>
 8009cc6:	4b7e      	ldr	r3, [pc, #504]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cca:	4a7d      	ldr	r2, [pc, #500]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009ccc:	f023 0301 	bic.w	r3, r3, #1
 8009cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8009cd2:	4b7b      	ldr	r3, [pc, #492]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd6:	4a7a      	ldr	r2, [pc, #488]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009cd8:	f023 0304 	bic.w	r3, r3, #4
 8009cdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d015      	beq.n	8009d12 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ce6:	f7fa fc5f 	bl	80045a8 <HAL_GetTick>
 8009cea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cec:	e00a      	b.n	8009d04 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cee:	f7fa fc5b 	bl	80045a8 <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d901      	bls.n	8009d04 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e122      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d04:	4b6e      	ldr	r3, [pc, #440]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d0ee      	beq.n	8009cee <HAL_RCC_OscConfig+0x5b6>
 8009d10:	e014      	b.n	8009d3c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d12:	f7fa fc49 	bl	80045a8 <HAL_GetTick>
 8009d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d18:	e00a      	b.n	8009d30 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d1a:	f7fa fc45 	bl	80045a8 <HAL_GetTick>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d901      	bls.n	8009d30 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e10c      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d30:	4b63      	ldr	r3, [pc, #396]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d34:	f003 0302 	and.w	r3, r3, #2
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1ee      	bne.n	8009d1a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 8101 	beq.w	8009f48 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009d46:	4b5e      	ldr	r3, [pc, #376]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d4e:	2b18      	cmp	r3, #24
 8009d50:	f000 80bc 	beq.w	8009ecc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	f040 8095 	bne.w	8009e88 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d5e:	4b58      	ldr	r3, [pc, #352]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a57      	ldr	r2, [pc, #348]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d6a:	f7fa fc1d 	bl	80045a8 <HAL_GetTick>
 8009d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d70:	e008      	b.n	8009d84 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d72:	f7fa fc19 	bl	80045a8 <HAL_GetTick>
 8009d76:	4602      	mov	r2, r0
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d901      	bls.n	8009d84 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e0e2      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d84:	4b4e      	ldr	r3, [pc, #312]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1f0      	bne.n	8009d72 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d90:	4b4b      	ldr	r3, [pc, #300]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d94:	4b4b      	ldr	r3, [pc, #300]	; (8009ec4 <HAL_RCC_OscConfig+0x78c>)
 8009d96:	4013      	ands	r3, r2
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009da0:	0112      	lsls	r2, r2, #4
 8009da2:	430a      	orrs	r2, r1
 8009da4:	4946      	ldr	r1, [pc, #280]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	628b      	str	r3, [r1, #40]	; 0x28
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dae:	3b01      	subs	r3, #1
 8009db0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db8:	3b01      	subs	r3, #1
 8009dba:	025b      	lsls	r3, r3, #9
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	431a      	orrs	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	041b      	lsls	r3, r3, #16
 8009dc8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	061b      	lsls	r3, r3, #24
 8009dd6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009dda:	4939      	ldr	r1, [pc, #228]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009de0:	4b37      	ldr	r3, [pc, #220]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de4:	4a36      	ldr	r2, [pc, #216]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009de6:	f023 0301 	bic.w	r3, r3, #1
 8009dea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009dec:	4b34      	ldr	r3, [pc, #208]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009df0:	4b35      	ldr	r3, [pc, #212]	; (8009ec8 <HAL_RCC_OscConfig+0x790>)
 8009df2:	4013      	ands	r3, r2
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009df8:	00d2      	lsls	r2, r2, #3
 8009dfa:	4931      	ldr	r1, [pc, #196]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009e00:	4b2f      	ldr	r3, [pc, #188]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e04:	f023 020c 	bic.w	r2, r3, #12
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0c:	492c      	ldr	r1, [pc, #176]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009e12:	4b2b      	ldr	r3, [pc, #172]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e16:	f023 0202 	bic.w	r2, r3, #2
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e1e:	4928      	ldr	r1, [pc, #160]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e20:	4313      	orrs	r3, r2
 8009e22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e24:	4b26      	ldr	r3, [pc, #152]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e28:	4a25      	ldr	r2, [pc, #148]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e30:	4b23      	ldr	r3, [pc, #140]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e34:	4a22      	ldr	r2, [pc, #136]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e3c:	4b20      	ldr	r3, [pc, #128]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e40:	4a1f      	ldr	r2, [pc, #124]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009e48:	4b1d      	ldr	r3, [pc, #116]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4c:	4a1c      	ldr	r2, [pc, #112]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e4e:	f043 0301 	orr.w	r3, r3, #1
 8009e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e54:	4b1a      	ldr	r3, [pc, #104]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a19      	ldr	r2, [pc, #100]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e60:	f7fa fba2 	bl	80045a8 <HAL_GetTick>
 8009e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e66:	e008      	b.n	8009e7a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e68:	f7fa fb9e 	bl	80045a8 <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d901      	bls.n	8009e7a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e067      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e7a:	4b11      	ldr	r3, [pc, #68]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0f0      	beq.n	8009e68 <HAL_RCC_OscConfig+0x730>
 8009e86:	e05f      	b.n	8009f48 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e88:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a0c      	ldr	r2, [pc, #48]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e94:	f7fa fb88 	bl	80045a8 <HAL_GetTick>
 8009e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e9a:	e008      	b.n	8009eae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e9c:	f7fa fb84 	bl	80045a8 <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d901      	bls.n	8009eae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e04d      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009eae:	4b04      	ldr	r3, [pc, #16]	; (8009ec0 <HAL_RCC_OscConfig+0x788>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1f0      	bne.n	8009e9c <HAL_RCC_OscConfig+0x764>
 8009eba:	e045      	b.n	8009f48 <HAL_RCC_OscConfig+0x810>
 8009ebc:	58024800 	.word	0x58024800
 8009ec0:	58024400 	.word	0x58024400
 8009ec4:	fffffc0c 	.word	0xfffffc0c
 8009ec8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009ecc:	4b21      	ldr	r3, [pc, #132]	; (8009f54 <HAL_RCC_OscConfig+0x81c>)
 8009ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009ed2:	4b20      	ldr	r3, [pc, #128]	; (8009f54 <HAL_RCC_OscConfig+0x81c>)
 8009ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d031      	beq.n	8009f44 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f003 0203 	and.w	r2, r3, #3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d12a      	bne.n	8009f44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	091b      	lsrs	r3, r3, #4
 8009ef2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d122      	bne.n	8009f44 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f08:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d11a      	bne.n	8009f44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	0a5b      	lsrs	r3, r3, #9
 8009f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f1a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d111      	bne.n	8009f44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	0c1b      	lsrs	r3, r3, #16
 8009f24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d108      	bne.n	8009f44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	0e1b      	lsrs	r3, r3, #24
 8009f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d001      	beq.n	8009f48 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e000      	b.n	8009f4a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3730      	adds	r7, #48	; 0x30
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	58024400 	.word	0x58024400

08009f58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d101      	bne.n	8009f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e19c      	b.n	800a2a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f6c:	4b8a      	ldr	r3, [pc, #552]	; (800a198 <HAL_RCC_ClockConfig+0x240>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 030f 	and.w	r3, r3, #15
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d910      	bls.n	8009f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f7a:	4b87      	ldr	r3, [pc, #540]	; (800a198 <HAL_RCC_ClockConfig+0x240>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f023 020f 	bic.w	r2, r3, #15
 8009f82:	4985      	ldr	r1, [pc, #532]	; (800a198 <HAL_RCC_ClockConfig+0x240>)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f8a:	4b83      	ldr	r3, [pc, #524]	; (800a198 <HAL_RCC_ClockConfig+0x240>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 030f 	and.w	r3, r3, #15
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d001      	beq.n	8009f9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e184      	b.n	800a2a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0304 	and.w	r3, r3, #4
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d010      	beq.n	8009fca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	691a      	ldr	r2, [r3, #16]
 8009fac:	4b7b      	ldr	r3, [pc, #492]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d908      	bls.n	8009fca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fb8:	4b78      	ldr	r3, [pc, #480]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 8009fba:	699b      	ldr	r3, [r3, #24]
 8009fbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	4975      	ldr	r1, [pc, #468]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0308 	and.w	r3, r3, #8
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d010      	beq.n	8009ff8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	695a      	ldr	r2, [r3, #20]
 8009fda:	4b70      	ldr	r3, [pc, #448]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 8009fdc:	69db      	ldr	r3, [r3, #28]
 8009fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d908      	bls.n	8009ff8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009fe6:	4b6d      	ldr	r3, [pc, #436]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	695b      	ldr	r3, [r3, #20]
 8009ff2:	496a      	ldr	r1, [pc, #424]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 0310 	and.w	r3, r3, #16
 800a000:	2b00      	cmp	r3, #0
 800a002:	d010      	beq.n	800a026 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	699a      	ldr	r2, [r3, #24]
 800a008:	4b64      	ldr	r3, [pc, #400]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a010:	429a      	cmp	r2, r3
 800a012:	d908      	bls.n	800a026 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a014:	4b61      	ldr	r3, [pc, #388]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	495e      	ldr	r1, [pc, #376]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a022:	4313      	orrs	r3, r2
 800a024:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 0320 	and.w	r3, r3, #32
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d010      	beq.n	800a054 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	69da      	ldr	r2, [r3, #28]
 800a036:	4b59      	ldr	r3, [pc, #356]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a03e:	429a      	cmp	r2, r3
 800a040:	d908      	bls.n	800a054 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a042:	4b56      	ldr	r3, [pc, #344]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	69db      	ldr	r3, [r3, #28]
 800a04e:	4953      	ldr	r1, [pc, #332]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a050:	4313      	orrs	r3, r2
 800a052:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0302 	and.w	r3, r3, #2
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d010      	beq.n	800a082 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	68da      	ldr	r2, [r3, #12]
 800a064:	4b4d      	ldr	r3, [pc, #308]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	f003 030f 	and.w	r3, r3, #15
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d908      	bls.n	800a082 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a070:	4b4a      	ldr	r3, [pc, #296]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	f023 020f 	bic.w	r2, r3, #15
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	4947      	ldr	r1, [pc, #284]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a07e:	4313      	orrs	r3, r2
 800a080:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d055      	beq.n	800a13a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a08e:	4b43      	ldr	r3, [pc, #268]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	4940      	ldr	r1, [pc, #256]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a09c:	4313      	orrs	r3, r2
 800a09e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d107      	bne.n	800a0b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0a8:	4b3c      	ldr	r3, [pc, #240]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d121      	bne.n	800a0f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e0f6      	b.n	800a2a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	d107      	bne.n	800a0d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0c0:	4b36      	ldr	r3, [pc, #216]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d115      	bne.n	800a0f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e0ea      	b.n	800a2a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d107      	bne.n	800a0e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0d8:	4b30      	ldr	r3, [pc, #192]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d109      	bne.n	800a0f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e0de      	b.n	800a2a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0e8:	4b2c      	ldr	r3, [pc, #176]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0304 	and.w	r3, r3, #4
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d101      	bne.n	800a0f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e0d6      	b.n	800a2a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a0f8:	4b28      	ldr	r3, [pc, #160]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	f023 0207 	bic.w	r2, r3, #7
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	4925      	ldr	r1, [pc, #148]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a106:	4313      	orrs	r3, r2
 800a108:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a10a:	f7fa fa4d 	bl	80045a8 <HAL_GetTick>
 800a10e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a110:	e00a      	b.n	800a128 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a112:	f7fa fa49 	bl	80045a8 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a120:	4293      	cmp	r3, r2
 800a122:	d901      	bls.n	800a128 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	e0be      	b.n	800a2a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a128:	4b1c      	ldr	r3, [pc, #112]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	00db      	lsls	r3, r3, #3
 800a136:	429a      	cmp	r2, r3
 800a138:	d1eb      	bne.n	800a112 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d010      	beq.n	800a168 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68da      	ldr	r2, [r3, #12]
 800a14a:	4b14      	ldr	r3, [pc, #80]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	f003 030f 	and.w	r3, r3, #15
 800a152:	429a      	cmp	r2, r3
 800a154:	d208      	bcs.n	800a168 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a156:	4b11      	ldr	r3, [pc, #68]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	f023 020f 	bic.w	r2, r3, #15
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	490e      	ldr	r1, [pc, #56]	; (800a19c <HAL_RCC_ClockConfig+0x244>)
 800a164:	4313      	orrs	r3, r2
 800a166:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a168:	4b0b      	ldr	r3, [pc, #44]	; (800a198 <HAL_RCC_ClockConfig+0x240>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 030f 	and.w	r3, r3, #15
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	429a      	cmp	r2, r3
 800a174:	d214      	bcs.n	800a1a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a176:	4b08      	ldr	r3, [pc, #32]	; (800a198 <HAL_RCC_ClockConfig+0x240>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f023 020f 	bic.w	r2, r3, #15
 800a17e:	4906      	ldr	r1, [pc, #24]	; (800a198 <HAL_RCC_ClockConfig+0x240>)
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	4313      	orrs	r3, r2
 800a184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a186:	4b04      	ldr	r3, [pc, #16]	; (800a198 <HAL_RCC_ClockConfig+0x240>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 030f 	and.w	r3, r3, #15
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	429a      	cmp	r2, r3
 800a192:	d005      	beq.n	800a1a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	e086      	b.n	800a2a6 <HAL_RCC_ClockConfig+0x34e>
 800a198:	52002000 	.word	0x52002000
 800a19c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0304 	and.w	r3, r3, #4
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d010      	beq.n	800a1ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	691a      	ldr	r2, [r3, #16]
 800a1b0:	4b3f      	ldr	r3, [pc, #252]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d208      	bcs.n	800a1ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1bc:	4b3c      	ldr	r3, [pc, #240]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	4939      	ldr	r1, [pc, #228]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0308 	and.w	r3, r3, #8
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d010      	beq.n	800a1fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	695a      	ldr	r2, [r3, #20]
 800a1de:	4b34      	ldr	r3, [pc, #208]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d208      	bcs.n	800a1fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1ea:	4b31      	ldr	r3, [pc, #196]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	492e      	ldr	r1, [pc, #184]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 0310 	and.w	r3, r3, #16
 800a204:	2b00      	cmp	r3, #0
 800a206:	d010      	beq.n	800a22a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	699a      	ldr	r2, [r3, #24]
 800a20c:	4b28      	ldr	r3, [pc, #160]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a20e:	69db      	ldr	r3, [r3, #28]
 800a210:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a214:	429a      	cmp	r2, r3
 800a216:	d208      	bcs.n	800a22a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a218:	4b25      	ldr	r3, [pc, #148]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	4922      	ldr	r1, [pc, #136]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a226:	4313      	orrs	r3, r2
 800a228:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 0320 	and.w	r3, r3, #32
 800a232:	2b00      	cmp	r3, #0
 800a234:	d010      	beq.n	800a258 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	69da      	ldr	r2, [r3, #28]
 800a23a:	4b1d      	ldr	r3, [pc, #116]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a242:	429a      	cmp	r2, r3
 800a244:	d208      	bcs.n	800a258 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a246:	4b1a      	ldr	r3, [pc, #104]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	4917      	ldr	r1, [pc, #92]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a254:	4313      	orrs	r3, r2
 800a256:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a258:	f000 f844 	bl	800a2e4 <HAL_RCC_GetSysClockFreq>
 800a25c:	4601      	mov	r1, r0
 800a25e:	4b14      	ldr	r3, [pc, #80]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	0a1b      	lsrs	r3, r3, #8
 800a264:	f003 030f 	and.w	r3, r3, #15
 800a268:	4a12      	ldr	r2, [pc, #72]	; (800a2b4 <HAL_RCC_ClockConfig+0x35c>)
 800a26a:	5cd3      	ldrb	r3, [r2, r3]
 800a26c:	f003 031f 	and.w	r3, r3, #31
 800a270:	fa21 f303 	lsr.w	r3, r1, r3
 800a274:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a276:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <HAL_RCC_ClockConfig+0x358>)
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	f003 030f 	and.w	r3, r3, #15
 800a27e:	4a0d      	ldr	r2, [pc, #52]	; (800a2b4 <HAL_RCC_ClockConfig+0x35c>)
 800a280:	5cd3      	ldrb	r3, [r2, r3]
 800a282:	f003 031f 	and.w	r3, r3, #31
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	fa22 f303 	lsr.w	r3, r2, r3
 800a28c:	4a0a      	ldr	r2, [pc, #40]	; (800a2b8 <HAL_RCC_ClockConfig+0x360>)
 800a28e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a290:	4a0a      	ldr	r2, [pc, #40]	; (800a2bc <HAL_RCC_ClockConfig+0x364>)
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a296:	4b0a      	ldr	r3, [pc, #40]	; (800a2c0 <HAL_RCC_ClockConfig+0x368>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fa f93a 	bl	8004514 <HAL_InitTick>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	58024400 	.word	0x58024400
 800a2b4:	0801af14 	.word	0x0801af14
 800a2b8:	24000014 	.word	0x24000014
 800a2bc:	24000010 	.word	0x24000010
 800a2c0:	24000018 	.word	0x24000018

0800a2c4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a2c8:	4b05      	ldr	r3, [pc, #20]	; (800a2e0 <HAL_RCC_EnableCSS+0x1c>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a04      	ldr	r2, [pc, #16]	; (800a2e0 <HAL_RCC_EnableCSS+0x1c>)
 800a2ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2d2:	6013      	str	r3, [r2, #0]
}
 800a2d4:	bf00      	nop
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	58024400 	.word	0x58024400

0800a2e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b089      	sub	sp, #36	; 0x24
 800a2e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2ea:	4baf      	ldr	r3, [pc, #700]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2f2:	2b18      	cmp	r3, #24
 800a2f4:	f200 814e 	bhi.w	800a594 <HAL_RCC_GetSysClockFreq+0x2b0>
 800a2f8:	a201      	add	r2, pc, #4	; (adr r2, 800a300 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fe:	bf00      	nop
 800a300:	0800a365 	.word	0x0800a365
 800a304:	0800a595 	.word	0x0800a595
 800a308:	0800a595 	.word	0x0800a595
 800a30c:	0800a595 	.word	0x0800a595
 800a310:	0800a595 	.word	0x0800a595
 800a314:	0800a595 	.word	0x0800a595
 800a318:	0800a595 	.word	0x0800a595
 800a31c:	0800a595 	.word	0x0800a595
 800a320:	0800a38b 	.word	0x0800a38b
 800a324:	0800a595 	.word	0x0800a595
 800a328:	0800a595 	.word	0x0800a595
 800a32c:	0800a595 	.word	0x0800a595
 800a330:	0800a595 	.word	0x0800a595
 800a334:	0800a595 	.word	0x0800a595
 800a338:	0800a595 	.word	0x0800a595
 800a33c:	0800a595 	.word	0x0800a595
 800a340:	0800a391 	.word	0x0800a391
 800a344:	0800a595 	.word	0x0800a595
 800a348:	0800a595 	.word	0x0800a595
 800a34c:	0800a595 	.word	0x0800a595
 800a350:	0800a595 	.word	0x0800a595
 800a354:	0800a595 	.word	0x0800a595
 800a358:	0800a595 	.word	0x0800a595
 800a35c:	0800a595 	.word	0x0800a595
 800a360:	0800a397 	.word	0x0800a397
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a364:	4b90      	ldr	r3, [pc, #576]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 0320 	and.w	r3, r3, #32
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d009      	beq.n	800a384 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a370:	4b8d      	ldr	r3, [pc, #564]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	08db      	lsrs	r3, r3, #3
 800a376:	f003 0303 	and.w	r3, r3, #3
 800a37a:	4a8c      	ldr	r2, [pc, #560]	; (800a5ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a37c:	fa22 f303 	lsr.w	r3, r2, r3
 800a380:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a382:	e10a      	b.n	800a59a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a384:	4b89      	ldr	r3, [pc, #548]	; (800a5ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a386:	61bb      	str	r3, [r7, #24]
    break;
 800a388:	e107      	b.n	800a59a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a38a:	4b89      	ldr	r3, [pc, #548]	; (800a5b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a38c:	61bb      	str	r3, [r7, #24]
    break;
 800a38e:	e104      	b.n	800a59a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a390:	4b88      	ldr	r3, [pc, #544]	; (800a5b4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800a392:	61bb      	str	r3, [r7, #24]
    break;
 800a394:	e101      	b.n	800a59a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a396:	4b84      	ldr	r3, [pc, #528]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a39a:	f003 0303 	and.w	r3, r3, #3
 800a39e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a3a0:	4b81      	ldr	r3, [pc, #516]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a4:	091b      	lsrs	r3, r3, #4
 800a3a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a3ac:	4b7e      	ldr	r3, [pc, #504]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b0:	f003 0301 	and.w	r3, r3, #1
 800a3b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a3b6:	4b7c      	ldr	r3, [pc, #496]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ba:	08db      	lsrs	r3, r3, #3
 800a3bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	fb02 f303 	mul.w	r3, r2, r3
 800a3c6:	ee07 3a90 	vmov	s15, r3
 800a3ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f000 80da 	beq.w	800a58e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d05a      	beq.n	800a496 <HAL_RCC_GetSysClockFreq+0x1b2>
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d302      	bcc.n	800a3ea <HAL_RCC_GetSysClockFreq+0x106>
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d078      	beq.n	800a4da <HAL_RCC_GetSysClockFreq+0x1f6>
 800a3e8:	e099      	b.n	800a51e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3ea:	4b6f      	ldr	r3, [pc, #444]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f003 0320 	and.w	r3, r3, #32
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d02d      	beq.n	800a452 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3f6:	4b6c      	ldr	r3, [pc, #432]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	08db      	lsrs	r3, r3, #3
 800a3fc:	f003 0303 	and.w	r3, r3, #3
 800a400:	4a6a      	ldr	r2, [pc, #424]	; (800a5ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a402:	fa22 f303 	lsr.w	r3, r2, r3
 800a406:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	ee07 3a90 	vmov	s15, r3
 800a40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	ee07 3a90 	vmov	s15, r3
 800a418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a41c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a420:	4b61      	ldr	r3, [pc, #388]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a428:	ee07 3a90 	vmov	s15, r3
 800a42c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a430:	ed97 6a02 	vldr	s12, [r7, #8]
 800a434:	eddf 5a60 	vldr	s11, [pc, #384]	; 800a5b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a43c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a44c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a450:	e087      	b.n	800a562 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	ee07 3a90 	vmov	s15, r3
 800a458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a45c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800a5bc <HAL_RCC_GetSysClockFreq+0x2d8>
 800a460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a464:	4b50      	ldr	r3, [pc, #320]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a46c:	ee07 3a90 	vmov	s15, r3
 800a470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a474:	ed97 6a02 	vldr	s12, [r7, #8]
 800a478:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800a5b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a47c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a48c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a490:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a494:	e065      	b.n	800a562 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	ee07 3a90 	vmov	s15, r3
 800a49c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4a0:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a5c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800a4a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4a8:	4b3f      	ldr	r3, [pc, #252]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4b0:	ee07 3a90 	vmov	s15, r3
 800a4b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4b8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4bc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a5b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a4c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4d8:	e043      	b.n	800a562 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	ee07 3a90 	vmov	s15, r3
 800a4e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a5c4 <HAL_RCC_GetSysClockFreq+0x2e0>
 800a4e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4ec:	4b2e      	ldr	r3, [pc, #184]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4f4:	ee07 3a90 	vmov	s15, r3
 800a4f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4fc:	ed97 6a02 	vldr	s12, [r7, #8]
 800a500:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800a5b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a50c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a514:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a518:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a51c:	e021      	b.n	800a562 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	ee07 3a90 	vmov	s15, r3
 800a524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a528:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a5c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800a52c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a530:	4b1d      	ldr	r3, [pc, #116]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a538:	ee07 3a90 	vmov	s15, r3
 800a53c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a540:	ed97 6a02 	vldr	s12, [r7, #8]
 800a544:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800a5b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a54c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a55c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a560:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a562:	4b11      	ldr	r3, [pc, #68]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a566:	0a5b      	lsrs	r3, r3, #9
 800a568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a56c:	3301      	adds	r3, #1
 800a56e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	ee07 3a90 	vmov	s15, r3
 800a576:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a57a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a57e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a586:	ee17 3a90 	vmov	r3, s15
 800a58a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a58c:	e005      	b.n	800a59a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800a58e:	2300      	movs	r3, #0
 800a590:	61bb      	str	r3, [r7, #24]
    break;
 800a592:	e002      	b.n	800a59a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800a594:	4b06      	ldr	r3, [pc, #24]	; (800a5b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a596:	61bb      	str	r3, [r7, #24]
    break;
 800a598:	bf00      	nop
  }

  return sysclockfreq;
 800a59a:	69bb      	ldr	r3, [r7, #24]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3724      	adds	r7, #36	; 0x24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	58024400 	.word	0x58024400
 800a5ac:	03d09000 	.word	0x03d09000
 800a5b0:	003d0900 	.word	0x003d0900
 800a5b4:	017d7840 	.word	0x017d7840
 800a5b8:	46000000 	.word	0x46000000
 800a5bc:	4c742400 	.word	0x4c742400
 800a5c0:	4a742400 	.word	0x4a742400
 800a5c4:	4bbebc20 	.word	0x4bbebc20

0800a5c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a5ce:	f7ff fe89 	bl	800a2e4 <HAL_RCC_GetSysClockFreq>
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	4b10      	ldr	r3, [pc, #64]	; (800a618 <HAL_RCC_GetHCLKFreq+0x50>)
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	0a1b      	lsrs	r3, r3, #8
 800a5da:	f003 030f 	and.w	r3, r3, #15
 800a5de:	4a0f      	ldr	r2, [pc, #60]	; (800a61c <HAL_RCC_GetHCLKFreq+0x54>)
 800a5e0:	5cd3      	ldrb	r3, [r2, r3]
 800a5e2:	f003 031f 	and.w	r3, r3, #31
 800a5e6:	fa21 f303 	lsr.w	r3, r1, r3
 800a5ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5ec:	4b0a      	ldr	r3, [pc, #40]	; (800a618 <HAL_RCC_GetHCLKFreq+0x50>)
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	f003 030f 	and.w	r3, r3, #15
 800a5f4:	4a09      	ldr	r2, [pc, #36]	; (800a61c <HAL_RCC_GetHCLKFreq+0x54>)
 800a5f6:	5cd3      	ldrb	r3, [r2, r3]
 800a5f8:	f003 031f 	and.w	r3, r3, #31
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a602:	4a07      	ldr	r2, [pc, #28]	; (800a620 <HAL_RCC_GetHCLKFreq+0x58>)
 800a604:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a606:	4a07      	ldr	r2, [pc, #28]	; (800a624 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a60c:	4b04      	ldr	r3, [pc, #16]	; (800a620 <HAL_RCC_GetHCLKFreq+0x58>)
 800a60e:	681b      	ldr	r3, [r3, #0]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	58024400 	.word	0x58024400
 800a61c:	0801af14 	.word	0x0801af14
 800a620:	24000014 	.word	0x24000014
 800a624:	24000010 	.word	0x24000010

0800a628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a62c:	f7ff ffcc 	bl	800a5c8 <HAL_RCC_GetHCLKFreq>
 800a630:	4601      	mov	r1, r0
 800a632:	4b06      	ldr	r3, [pc, #24]	; (800a64c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a634:	69db      	ldr	r3, [r3, #28]
 800a636:	091b      	lsrs	r3, r3, #4
 800a638:	f003 0307 	and.w	r3, r3, #7
 800a63c:	4a04      	ldr	r2, [pc, #16]	; (800a650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a63e:	5cd3      	ldrb	r3, [r2, r3]
 800a640:	f003 031f 	and.w	r3, r3, #31
 800a644:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a648:	4618      	mov	r0, r3
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	58024400 	.word	0x58024400
 800a650:	0801af14 	.word	0x0801af14

0800a654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a658:	f7ff ffb6 	bl	800a5c8 <HAL_RCC_GetHCLKFreq>
 800a65c:	4601      	mov	r1, r0
 800a65e:	4b06      	ldr	r3, [pc, #24]	; (800a678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	0a1b      	lsrs	r3, r3, #8
 800a664:	f003 0307 	and.w	r3, r3, #7
 800a668:	4a04      	ldr	r2, [pc, #16]	; (800a67c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a66a:	5cd3      	ldrb	r3, [r2, r3]
 800a66c:	f003 031f 	and.w	r3, r3, #31
 800a670:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a674:	4618      	mov	r0, r3
 800a676:	bd80      	pop	{r7, pc}
 800a678:	58024400 	.word	0x58024400
 800a67c:	0801af14 	.word	0x0801af14

0800a680 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a684:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a68c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a690:	d105      	bne.n	800a69e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800a692:	f000 f809 	bl	800a6a8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a696:	4b03      	ldr	r3, [pc, #12]	; (800a6a4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a69c:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800a69e:	bf00      	nop
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	58024400 	.word	0x58024400

0800a6a8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800a6ac:	bf00      	nop
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
	...

0800a6b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d03d      	beq.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6dc:	d013      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a6de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6e2:	d802      	bhi.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d007      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a6e8:	e01f      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800a6ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6ee:	d013      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800a6f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6f4:	d01c      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800a6f6:	e018      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6f8:	4baf      	ldr	r3, [pc, #700]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fc:	4aae      	ldr	r2, [pc, #696]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a6fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a702:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a704:	e015      	b.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	3304      	adds	r3, #4
 800a70a:	2102      	movs	r1, #2
 800a70c:	4618      	mov	r0, r3
 800a70e:	f001 fd33 	bl	800c178 <RCCEx_PLL2_Config>
 800a712:	4603      	mov	r3, r0
 800a714:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a716:	e00c      	b.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3324      	adds	r3, #36	; 0x24
 800a71c:	2102      	movs	r1, #2
 800a71e:	4618      	mov	r0, r3
 800a720:	f001 fddc 	bl	800c2dc <RCCEx_PLL3_Config>
 800a724:	4603      	mov	r3, r0
 800a726:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a728:	e003      	b.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	75fb      	strb	r3, [r7, #23]
      break;
 800a72e:	e000      	b.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800a730:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a732:	7dfb      	ldrb	r3, [r7, #23]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d109      	bne.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a738:	4b9f      	ldr	r3, [pc, #636]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a73c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a744:	499c      	ldr	r1, [pc, #624]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a746:	4313      	orrs	r3, r2
 800a748:	650b      	str	r3, [r1, #80]	; 0x50
 800a74a:	e001      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a74c:	7dfb      	ldrb	r3, [r7, #23]
 800a74e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d03d      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a760:	2b04      	cmp	r3, #4
 800a762:	d826      	bhi.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800a764:	a201      	add	r2, pc, #4	; (adr r2, 800a76c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800a766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76a:	bf00      	nop
 800a76c:	0800a781 	.word	0x0800a781
 800a770:	0800a78f 	.word	0x0800a78f
 800a774:	0800a7a1 	.word	0x0800a7a1
 800a778:	0800a7b9 	.word	0x0800a7b9
 800a77c:	0800a7b9 	.word	0x0800a7b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a780:	4b8d      	ldr	r3, [pc, #564]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	4a8c      	ldr	r2, [pc, #560]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a78a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a78c:	e015      	b.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	3304      	adds	r3, #4
 800a792:	2100      	movs	r1, #0
 800a794:	4618      	mov	r0, r3
 800a796:	f001 fcef 	bl	800c178 <RCCEx_PLL2_Config>
 800a79a:	4603      	mov	r3, r0
 800a79c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a79e:	e00c      	b.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3324      	adds	r3, #36	; 0x24
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f001 fd98 	bl	800c2dc <RCCEx_PLL3_Config>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a7b0:	e003      	b.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a7b6:	e000      	b.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800a7b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d109      	bne.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a7c0:	4b7d      	ldr	r3, [pc, #500]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7c4:	f023 0207 	bic.w	r2, r3, #7
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7cc:	497a      	ldr	r1, [pc, #488]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	650b      	str	r3, [r1, #80]	; 0x50
 800a7d2:	e001      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7d4:	7dfb      	ldrb	r3, [r7, #23]
 800a7d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d03e      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e8:	2b80      	cmp	r3, #128	; 0x80
 800a7ea:	d01c      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800a7ec:	2b80      	cmp	r3, #128	; 0x80
 800a7ee:	d804      	bhi.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x142>
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d008      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a7f4:	2b40      	cmp	r3, #64	; 0x40
 800a7f6:	d00d      	beq.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a7f8:	e01e      	b.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a7fa:	2bc0      	cmp	r3, #192	; 0xc0
 800a7fc:	d01f      	beq.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800a7fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a802:	d01e      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a804:	e018      	b.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a806:	4b6c      	ldr	r3, [pc, #432]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80a:	4a6b      	ldr	r2, [pc, #428]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a80c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a810:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a812:	e017      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	3304      	adds	r3, #4
 800a818:	2100      	movs	r1, #0
 800a81a:	4618      	mov	r0, r3
 800a81c:	f001 fcac 	bl	800c178 <RCCEx_PLL2_Config>
 800a820:	4603      	mov	r3, r0
 800a822:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a824:	e00e      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3324      	adds	r3, #36	; 0x24
 800a82a:	2100      	movs	r1, #0
 800a82c:	4618      	mov	r0, r3
 800a82e:	f001 fd55 	bl	800c2dc <RCCEx_PLL3_Config>
 800a832:	4603      	mov	r3, r0
 800a834:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a836:	e005      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	75fb      	strb	r3, [r7, #23]
      break;
 800a83c:	e002      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a83e:	bf00      	nop
 800a840:	e000      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a842:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a844:	7dfb      	ldrb	r3, [r7, #23]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d109      	bne.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a84a:	4b5b      	ldr	r3, [pc, #364]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a84c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a84e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a856:	4958      	ldr	r1, [pc, #352]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a858:	4313      	orrs	r3, r2
 800a85a:	650b      	str	r3, [r1, #80]	; 0x50
 800a85c:	e001      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
 800a860:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d044      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a878:	d01f      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a87a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a87e:	d805      	bhi.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00a      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a888:	d00e      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800a88a:	e01f      	b.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x214>
 800a88c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a890:	d01f      	beq.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800a892:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a896:	d01e      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a898:	e018      	b.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a89a:	4b47      	ldr	r3, [pc, #284]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89e:	4a46      	ldr	r2, [pc, #280]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8a6:	e017      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f001 fc62 	bl	800c178 <RCCEx_PLL2_Config>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a8b8:	e00e      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3324      	adds	r3, #36	; 0x24
 800a8be:	2100      	movs	r1, #0
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f001 fd0b 	bl	800c2dc <RCCEx_PLL3_Config>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8ca:	e005      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a8d0:	e002      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a8d2:	bf00      	nop
 800a8d4:	e000      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a8d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10a      	bne.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a8de:	4b36      	ldr	r3, [pc, #216]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8e2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a8ec:	4932      	ldr	r1, [pc, #200]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	658b      	str	r3, [r1, #88]	; 0x58
 800a8f2:	e001      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8f4:	7dfb      	ldrb	r3, [r7, #23]
 800a8f6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a900:	2b00      	cmp	r3, #0
 800a902:	d044      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a90a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a90e:	d01f      	beq.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a910:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a914:	d805      	bhi.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00a      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800a91a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a91e:	d00e      	beq.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a920:	e01f      	b.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800a922:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a926:	d01f      	beq.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a928:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a92c:	d01e      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a92e:	e018      	b.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a930:	4b21      	ldr	r3, [pc, #132]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a934:	4a20      	ldr	r2, [pc, #128]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a93a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a93c:	e017      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	3304      	adds	r3, #4
 800a942:	2100      	movs	r1, #0
 800a944:	4618      	mov	r0, r3
 800a946:	f001 fc17 	bl	800c178 <RCCEx_PLL2_Config>
 800a94a:	4603      	mov	r3, r0
 800a94c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a94e:	e00e      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3324      	adds	r3, #36	; 0x24
 800a954:	2100      	movs	r1, #0
 800a956:	4618      	mov	r0, r3
 800a958:	f001 fcc0 	bl	800c2dc <RCCEx_PLL3_Config>
 800a95c:	4603      	mov	r3, r0
 800a95e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a960:	e005      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	75fb      	strb	r3, [r7, #23]
      break;
 800a966:	e002      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a968:	bf00      	nop
 800a96a:	e000      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a96c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a96e:	7dfb      	ldrb	r3, [r7, #23]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10a      	bne.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a974:	4b10      	ldr	r3, [pc, #64]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a978:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a982:	490d      	ldr	r1, [pc, #52]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a984:	4313      	orrs	r3, r2
 800a986:	658b      	str	r3, [r1, #88]	; 0x58
 800a988:	e001      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d035      	beq.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a99e:	2b10      	cmp	r3, #16
 800a9a0:	d00c      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x304>
 800a9a2:	2b10      	cmp	r3, #16
 800a9a4:	d802      	bhi.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d01b      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800a9aa:	e017      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a9ac:	2b20      	cmp	r3, #32
 800a9ae:	d00c      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x312>
 800a9b0:	2b30      	cmp	r3, #48	; 0x30
 800a9b2:	d018      	beq.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800a9b4:	e012      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a9b6:	bf00      	nop
 800a9b8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9bc:	4baf      	ldr	r3, [pc, #700]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	4aae      	ldr	r2, [pc, #696]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a9c8:	e00e      	b.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	2102      	movs	r1, #2
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f001 fbd1 	bl	800c178 <RCCEx_PLL2_Config>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a9da:	e005      	b.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	75fb      	strb	r3, [r7, #23]
      break;
 800a9e0:	e002      	b.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800a9e2:	bf00      	nop
 800a9e4:	e000      	b.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800a9e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9e8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d109      	bne.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a9ee:	4ba3      	ldr	r3, [pc, #652]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9fa:	49a0      	ldr	r1, [pc, #640]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aa00:	e001      	b.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa02:	7dfb      	ldrb	r3, [r7, #23]
 800aa04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d042      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa1a:	d01f      	beq.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800aa1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa20:	d805      	bhi.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00a      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x384>
 800aa26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa2a:	d00e      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800aa2c:	e01f      	b.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800aa2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa32:	d01f      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800aa34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa38:	d01e      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800aa3a:	e018      	b.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa3c:	4b8f      	ldr	r3, [pc, #572]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa40:	4a8e      	ldr	r2, [pc, #568]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa48:	e017      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	2100      	movs	r1, #0
 800aa50:	4618      	mov	r0, r3
 800aa52:	f001 fb91 	bl	800c178 <RCCEx_PLL2_Config>
 800aa56:	4603      	mov	r3, r0
 800aa58:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa5a:	e00e      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3324      	adds	r3, #36	; 0x24
 800aa60:	2100      	movs	r1, #0
 800aa62:	4618      	mov	r0, r3
 800aa64:	f001 fc3a 	bl	800c2dc <RCCEx_PLL3_Config>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa6c:	e005      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	75fb      	strb	r3, [r7, #23]
      break;
 800aa72:	e002      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800aa74:	bf00      	nop
 800aa76:	e000      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800aa78:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d109      	bne.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aa80:	4b7e      	ldr	r3, [pc, #504]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa84:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa8c:	497b      	ldr	r1, [pc, #492]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	650b      	str	r3, [r1, #80]	; 0x50
 800aa92:	e001      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa94:	7dfb      	ldrb	r3, [r7, #23]
 800aa96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d042      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaac:	d01b      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800aaae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aab2:	d805      	bhi.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d022      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x446>
 800aab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aabc:	d00a      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800aabe:	e01b      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800aac0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aac4:	d01d      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800aac6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aaca:	d01c      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800aacc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aad0:	d01b      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x452>
 800aad2:	e011      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3304      	adds	r3, #4
 800aad8:	2101      	movs	r1, #1
 800aada:	4618      	mov	r0, r3
 800aadc:	f001 fb4c 	bl	800c178 <RCCEx_PLL2_Config>
 800aae0:	4603      	mov	r3, r0
 800aae2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aae4:	e012      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	3324      	adds	r3, #36	; 0x24
 800aaea:	2101      	movs	r1, #1
 800aaec:	4618      	mov	r0, r3
 800aaee:	f001 fbf5 	bl	800c2dc <RCCEx_PLL3_Config>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aaf6:	e009      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	75fb      	strb	r3, [r7, #23]
      break;
 800aafc:	e006      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800aafe:	bf00      	nop
 800ab00:	e004      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab02:	bf00      	nop
 800ab04:	e002      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab06:	bf00      	nop
 800ab08:	e000      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d109      	bne.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ab12:	4b5a      	ldr	r3, [pc, #360]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab16:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab1e:	4957      	ldr	r1, [pc, #348]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab20:	4313      	orrs	r3, r2
 800ab22:	650b      	str	r3, [r1, #80]	; 0x50
 800ab24:	e001      	b.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab26:	7dfb      	ldrb	r3, [r7, #23]
 800ab28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d044      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab40:	d01b      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800ab42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab46:	d805      	bhi.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d022      	beq.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ab4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab50:	d00a      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800ab52:	e01b      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800ab54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab58:	d01d      	beq.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ab5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab5e:	d01c      	beq.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800ab60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ab64:	d01b      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ab66:	e011      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	3304      	adds	r3, #4
 800ab6c:	2101      	movs	r1, #1
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f001 fb02 	bl	800c178 <RCCEx_PLL2_Config>
 800ab74:	4603      	mov	r3, r0
 800ab76:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ab78:	e012      	b.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	3324      	adds	r3, #36	; 0x24
 800ab7e:	2101      	movs	r1, #1
 800ab80:	4618      	mov	r0, r3
 800ab82:	f001 fbab 	bl	800c2dc <RCCEx_PLL3_Config>
 800ab86:	4603      	mov	r3, r0
 800ab88:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ab8a:	e009      	b.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab90:	e006      	b.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800ab92:	bf00      	nop
 800ab94:	e004      	b.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800ab96:	bf00      	nop
 800ab98:	e002      	b.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800ab9a:	bf00      	nop
 800ab9c:	e000      	b.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800ab9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10a      	bne.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aba6:	4b35      	ldr	r3, [pc, #212]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abaa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800abb4:	4931      	ldr	r1, [pc, #196]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abb6:	4313      	orrs	r3, r2
 800abb8:	658b      	str	r3, [r1, #88]	; 0x58
 800abba:	e001      	b.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abbc:	7dfb      	ldrb	r3, [r7, #23]
 800abbe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d02d      	beq.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abd4:	d005      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800abd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abda:	d009      	beq.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d013      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800abe0:	e00f      	b.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abe2:	4b26      	ldr	r3, [pc, #152]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe6:	4a25      	ldr	r2, [pc, #148]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800abee:	e00c      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	3304      	adds	r3, #4
 800abf4:	2101      	movs	r1, #1
 800abf6:	4618      	mov	r0, r3
 800abf8:	f001 fabe 	bl	800c178 <RCCEx_PLL2_Config>
 800abfc:	4603      	mov	r3, r0
 800abfe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ac00:	e003      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	75fb      	strb	r3, [r7, #23]
      break;
 800ac06:	e000      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800ac08:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac0a:	7dfb      	ldrb	r3, [r7, #23]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d109      	bne.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ac10:	4b1a      	ldr	r3, [pc, #104]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac1c:	4917      	ldr	r1, [pc, #92]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	650b      	str	r3, [r1, #80]	; 0x50
 800ac22:	e001      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac24:	7dfb      	ldrb	r3, [r7, #23]
 800ac26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d035      	beq.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	d81b      	bhi.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ac3c:	a201      	add	r2, pc, #4	; (adr r2, 800ac44 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800ac3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac42:	bf00      	nop
 800ac44:	0800ac81 	.word	0x0800ac81
 800ac48:	0800ac55 	.word	0x0800ac55
 800ac4c:	0800ac63 	.word	0x0800ac63
 800ac50:	0800ac81 	.word	0x0800ac81
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac54:	4b09      	ldr	r3, [pc, #36]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	4a08      	ldr	r2, [pc, #32]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ac60:	e00f      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3304      	adds	r3, #4
 800ac66:	2102      	movs	r1, #2
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f001 fa85 	bl	800c178 <RCCEx_PLL2_Config>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ac72:	e006      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	75fb      	strb	r3, [r7, #23]
      break;
 800ac78:	e003      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800ac7a:	bf00      	nop
 800ac7c:	58024400 	.word	0x58024400
      break;
 800ac80:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d109      	bne.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ac88:	4bba      	ldr	r3, [pc, #744]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac8c:	f023 0203 	bic.w	r2, r3, #3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac94:	49b7      	ldr	r1, [pc, #732]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac96:	4313      	orrs	r3, r2
 800ac98:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ac9a:	e001      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac9c:	7dfb      	ldrb	r3, [r7, #23]
 800ac9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 8086 	beq.w	800adba <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800acae:	4bb2      	ldr	r3, [pc, #712]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4ab1      	ldr	r2, [pc, #708]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800acb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800acba:	f7f9 fc75 	bl	80045a8 <HAL_GetTick>
 800acbe:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acc0:	e009      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acc2:	f7f9 fc71 	bl	80045a8 <HAL_GetTick>
 800acc6:	4602      	mov	r2, r0
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	2b64      	cmp	r3, #100	; 0x64
 800acce:	d902      	bls.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800acd0:	2303      	movs	r3, #3
 800acd2:	75fb      	strb	r3, [r7, #23]
        break;
 800acd4:	e005      	b.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acd6:	4ba8      	ldr	r3, [pc, #672]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d0ef      	beq.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d166      	bne.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ace8:	4ba2      	ldr	r3, [pc, #648]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800acf2:	4053      	eors	r3, r2
 800acf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d013      	beq.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800acfc:	4b9d      	ldr	r3, [pc, #628]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad04:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ad06:	4b9b      	ldr	r3, [pc, #620]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad0a:	4a9a      	ldr	r2, [pc, #616]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad10:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ad12:	4b98      	ldr	r3, [pc, #608]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad16:	4a97      	ldr	r2, [pc, #604]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad1c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ad1e:	4a95      	ldr	r2, [pc, #596]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad2e:	d115      	bne.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad30:	f7f9 fc3a 	bl	80045a8 <HAL_GetTick>
 800ad34:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad36:	e00b      	b.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad38:	f7f9 fc36 	bl	80045a8 <HAL_GetTick>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d902      	bls.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	75fb      	strb	r3, [r7, #23]
            break;
 800ad4e:	e005      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad50:	4b88      	ldr	r3, [pc, #544]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad54:	f003 0302 	and.w	r3, r3, #2
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d0ed      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800ad5c:	7dfb      	ldrb	r3, [r7, #23]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d126      	bne.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad70:	d10d      	bne.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800ad72:	4b80      	ldr	r3, [pc, #512]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad80:	0919      	lsrs	r1, r3, #4
 800ad82:	4b7e      	ldr	r3, [pc, #504]	; (800af7c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ad84:	400b      	ands	r3, r1
 800ad86:	497b      	ldr	r1, [pc, #492]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	610b      	str	r3, [r1, #16]
 800ad8c:	e005      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800ad8e:	4b79      	ldr	r3, [pc, #484]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	4a78      	ldr	r2, [pc, #480]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad98:	6113      	str	r3, [r2, #16]
 800ad9a:	4b76      	ldr	r3, [pc, #472]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ada4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ada8:	4972      	ldr	r1, [pc, #456]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800adaa:	4313      	orrs	r3, r2
 800adac:	670b      	str	r3, [r1, #112]	; 0x70
 800adae:	e004      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
 800adb2:	75bb      	strb	r3, [r7, #22]
 800adb4:	e001      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb6:	7dfb      	ldrb	r3, [r7, #23]
 800adb8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 0301 	and.w	r3, r3, #1
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d07d      	beq.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adca:	2b28      	cmp	r3, #40	; 0x28
 800adcc:	d866      	bhi.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800adce:	a201      	add	r2, pc, #4	; (adr r2, 800add4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add4:	0800aea3 	.word	0x0800aea3
 800add8:	0800ae9d 	.word	0x0800ae9d
 800addc:	0800ae9d 	.word	0x0800ae9d
 800ade0:	0800ae9d 	.word	0x0800ae9d
 800ade4:	0800ae9d 	.word	0x0800ae9d
 800ade8:	0800ae9d 	.word	0x0800ae9d
 800adec:	0800ae9d 	.word	0x0800ae9d
 800adf0:	0800ae9d 	.word	0x0800ae9d
 800adf4:	0800ae79 	.word	0x0800ae79
 800adf8:	0800ae9d 	.word	0x0800ae9d
 800adfc:	0800ae9d 	.word	0x0800ae9d
 800ae00:	0800ae9d 	.word	0x0800ae9d
 800ae04:	0800ae9d 	.word	0x0800ae9d
 800ae08:	0800ae9d 	.word	0x0800ae9d
 800ae0c:	0800ae9d 	.word	0x0800ae9d
 800ae10:	0800ae9d 	.word	0x0800ae9d
 800ae14:	0800ae8b 	.word	0x0800ae8b
 800ae18:	0800ae9d 	.word	0x0800ae9d
 800ae1c:	0800ae9d 	.word	0x0800ae9d
 800ae20:	0800ae9d 	.word	0x0800ae9d
 800ae24:	0800ae9d 	.word	0x0800ae9d
 800ae28:	0800ae9d 	.word	0x0800ae9d
 800ae2c:	0800ae9d 	.word	0x0800ae9d
 800ae30:	0800ae9d 	.word	0x0800ae9d
 800ae34:	0800aea3 	.word	0x0800aea3
 800ae38:	0800ae9d 	.word	0x0800ae9d
 800ae3c:	0800ae9d 	.word	0x0800ae9d
 800ae40:	0800ae9d 	.word	0x0800ae9d
 800ae44:	0800ae9d 	.word	0x0800ae9d
 800ae48:	0800ae9d 	.word	0x0800ae9d
 800ae4c:	0800ae9d 	.word	0x0800ae9d
 800ae50:	0800ae9d 	.word	0x0800ae9d
 800ae54:	0800aea3 	.word	0x0800aea3
 800ae58:	0800ae9d 	.word	0x0800ae9d
 800ae5c:	0800ae9d 	.word	0x0800ae9d
 800ae60:	0800ae9d 	.word	0x0800ae9d
 800ae64:	0800ae9d 	.word	0x0800ae9d
 800ae68:	0800ae9d 	.word	0x0800ae9d
 800ae6c:	0800ae9d 	.word	0x0800ae9d
 800ae70:	0800ae9d 	.word	0x0800ae9d
 800ae74:	0800aea3 	.word	0x0800aea3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f001 f97a 	bl	800c178 <RCCEx_PLL2_Config>
 800ae84:	4603      	mov	r3, r0
 800ae86:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ae88:	e00c      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3324      	adds	r3, #36	; 0x24
 800ae8e:	2101      	movs	r1, #1
 800ae90:	4618      	mov	r0, r3
 800ae92:	f001 fa23 	bl	800c2dc <RCCEx_PLL3_Config>
 800ae96:	4603      	mov	r3, r0
 800ae98:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ae9a:	e003      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	75fb      	strb	r3, [r7, #23]
      break;
 800aea0:	e000      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800aea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aea4:	7dfb      	ldrb	r3, [r7, #23]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d109      	bne.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aeaa:	4b32      	ldr	r3, [pc, #200]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aeac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeb6:	492f      	ldr	r1, [pc, #188]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	654b      	str	r3, [r1, #84]	; 0x54
 800aebc:	e001      	b.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aebe:	7dfb      	ldrb	r3, [r7, #23]
 800aec0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 0302 	and.w	r3, r3, #2
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d037      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aed2:	2b05      	cmp	r3, #5
 800aed4:	d820      	bhi.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800aed6:	a201      	add	r2, pc, #4	; (adr r2, 800aedc <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800aed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aedc:	0800af1f 	.word	0x0800af1f
 800aee0:	0800aef5 	.word	0x0800aef5
 800aee4:	0800af07 	.word	0x0800af07
 800aee8:	0800af1f 	.word	0x0800af1f
 800aeec:	0800af1f 	.word	0x0800af1f
 800aef0:	0800af1f 	.word	0x0800af1f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3304      	adds	r3, #4
 800aef8:	2101      	movs	r1, #1
 800aefa:	4618      	mov	r0, r3
 800aefc:	f001 f93c 	bl	800c178 <RCCEx_PLL2_Config>
 800af00:	4603      	mov	r3, r0
 800af02:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800af04:	e00c      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	3324      	adds	r3, #36	; 0x24
 800af0a:	2101      	movs	r1, #1
 800af0c:	4618      	mov	r0, r3
 800af0e:	f001 f9e5 	bl	800c2dc <RCCEx_PLL3_Config>
 800af12:	4603      	mov	r3, r0
 800af14:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800af16:	e003      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	75fb      	strb	r3, [r7, #23]
      break;
 800af1c:	e000      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800af1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af20:	7dfb      	ldrb	r3, [r7, #23]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d109      	bne.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800af26:	4b13      	ldr	r3, [pc, #76]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800af28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af2a:	f023 0207 	bic.w	r2, r3, #7
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af32:	4910      	ldr	r1, [pc, #64]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800af34:	4313      	orrs	r3, r2
 800af36:	654b      	str	r3, [r1, #84]	; 0x54
 800af38:	e001      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af3a:	7dfb      	ldrb	r3, [r7, #23]
 800af3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0304 	and.w	r3, r3, #4
 800af46:	2b00      	cmp	r3, #0
 800af48:	d040      	beq.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af50:	2b05      	cmp	r3, #5
 800af52:	d827      	bhi.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800af54:	a201      	add	r2, pc, #4	; (adr r2, 800af5c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800af56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5a:	bf00      	nop
 800af5c:	0800afab 	.word	0x0800afab
 800af60:	0800af81 	.word	0x0800af81
 800af64:	0800af93 	.word	0x0800af93
 800af68:	0800afab 	.word	0x0800afab
 800af6c:	0800afab 	.word	0x0800afab
 800af70:	0800afab 	.word	0x0800afab
 800af74:	58024400 	.word	0x58024400
 800af78:	58024800 	.word	0x58024800
 800af7c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	3304      	adds	r3, #4
 800af84:	2101      	movs	r1, #1
 800af86:	4618      	mov	r0, r3
 800af88:	f001 f8f6 	bl	800c178 <RCCEx_PLL2_Config>
 800af8c:	4603      	mov	r3, r0
 800af8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800af90:	e00c      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3324      	adds	r3, #36	; 0x24
 800af96:	2101      	movs	r1, #1
 800af98:	4618      	mov	r0, r3
 800af9a:	f001 f99f 	bl	800c2dc <RCCEx_PLL3_Config>
 800af9e:	4603      	mov	r3, r0
 800afa0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800afa2:	e003      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	75fb      	strb	r3, [r7, #23]
      break;
 800afa8:	e000      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800afaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afac:	7dfb      	ldrb	r3, [r7, #23]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10a      	bne.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800afb2:	4bb2      	ldr	r3, [pc, #712]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800afb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afb6:	f023 0207 	bic.w	r2, r3, #7
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afc0:	49ae      	ldr	r1, [pc, #696]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800afc2:	4313      	orrs	r3, r2
 800afc4:	658b      	str	r3, [r1, #88]	; 0x58
 800afc6:	e001      	b.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afc8:	7dfb      	ldrb	r3, [r7, #23]
 800afca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 0320 	and.w	r3, r3, #32
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d044      	beq.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afe2:	d01b      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x964>
 800afe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afe8:	d805      	bhi.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800afea:	2b00      	cmp	r3, #0
 800afec:	d022      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800afee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aff2:	d00a      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x952>
 800aff4:	e01b      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800aff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800affa:	d01d      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800affc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b000:	d01c      	beq.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x984>
 800b002:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b006:	d01b      	beq.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800b008:	e011      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	3304      	adds	r3, #4
 800b00e:	2100      	movs	r1, #0
 800b010:	4618      	mov	r0, r3
 800b012:	f001 f8b1 	bl	800c178 <RCCEx_PLL2_Config>
 800b016:	4603      	mov	r3, r0
 800b018:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b01a:	e012      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	3324      	adds	r3, #36	; 0x24
 800b020:	2102      	movs	r1, #2
 800b022:	4618      	mov	r0, r3
 800b024:	f001 f95a 	bl	800c2dc <RCCEx_PLL3_Config>
 800b028:	4603      	mov	r3, r0
 800b02a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b02c:	e009      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	75fb      	strb	r3, [r7, #23]
      break;
 800b032:	e006      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b034:	bf00      	nop
 800b036:	e004      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b038:	bf00      	nop
 800b03a:	e002      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b03c:	bf00      	nop
 800b03e:	e000      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b040:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b042:	7dfb      	ldrb	r3, [r7, #23]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10a      	bne.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b048:	4b8c      	ldr	r3, [pc, #560]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b04c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b056:	4989      	ldr	r1, [pc, #548]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b058:	4313      	orrs	r3, r2
 800b05a:	654b      	str	r3, [r1, #84]	; 0x54
 800b05c:	e001      	b.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b05e:	7dfb      	ldrb	r3, [r7, #23]
 800b060:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d044      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b078:	d01b      	beq.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800b07a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b07e:	d805      	bhi.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800b080:	2b00      	cmp	r3, #0
 800b082:	d022      	beq.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b088:	d00a      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800b08a:	e01b      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800b08c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b090:	d01d      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800b092:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b096:	d01c      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800b098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b09c:	d01b      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800b09e:	e011      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	3304      	adds	r3, #4
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f001 f866 	bl	800c178 <RCCEx_PLL2_Config>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b0b0:	e012      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	3324      	adds	r3, #36	; 0x24
 800b0b6:	2102      	movs	r1, #2
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f001 f90f 	bl	800c2dc <RCCEx_PLL3_Config>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b0c2:	e009      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b0c8:	e006      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b0ca:	bf00      	nop
 800b0cc:	e004      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b0ce:	bf00      	nop
 800b0d0:	e002      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b0d2:	bf00      	nop
 800b0d4:	e000      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b0d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0d8:	7dfb      	ldrb	r3, [r7, #23]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10a      	bne.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b0de:	4b67      	ldr	r3, [pc, #412]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b0e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0ec:	4963      	ldr	r1, [pc, #396]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	658b      	str	r3, [r1, #88]	; 0x58
 800b0f2:	e001      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
 800b0f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b100:	2b00      	cmp	r3, #0
 800b102:	d044      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b10a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b10e:	d01b      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800b110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b114:	d805      	bhi.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800b116:	2b00      	cmp	r3, #0
 800b118:	d022      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b11a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b11e:	d00a      	beq.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b120:	e01b      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800b122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b126:	d01d      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b128:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b12c:	d01c      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800b12e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b132:	d01b      	beq.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800b134:	e011      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	3304      	adds	r3, #4
 800b13a:	2100      	movs	r1, #0
 800b13c:	4618      	mov	r0, r3
 800b13e:	f001 f81b 	bl	800c178 <RCCEx_PLL2_Config>
 800b142:	4603      	mov	r3, r0
 800b144:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b146:	e012      	b.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3324      	adds	r3, #36	; 0x24
 800b14c:	2102      	movs	r1, #2
 800b14e:	4618      	mov	r0, r3
 800b150:	f001 f8c4 	bl	800c2dc <RCCEx_PLL3_Config>
 800b154:	4603      	mov	r3, r0
 800b156:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b158:	e009      	b.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	75fb      	strb	r3, [r7, #23]
      break;
 800b15e:	e006      	b.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b160:	bf00      	nop
 800b162:	e004      	b.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b164:	bf00      	nop
 800b166:	e002      	b.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b168:	bf00      	nop
 800b16a:	e000      	b.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b16c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10a      	bne.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b174:	4b41      	ldr	r3, [pc, #260]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b178:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b182:	493e      	ldr	r1, [pc, #248]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b184:	4313      	orrs	r3, r2
 800b186:	658b      	str	r3, [r1, #88]	; 0x58
 800b188:	e001      	b.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b18a:	7dfb      	ldrb	r3, [r7, #23]
 800b18c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 0308 	and.w	r3, r3, #8
 800b196:	2b00      	cmp	r3, #0
 800b198:	d01a      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1a4:	d10a      	bne.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	3324      	adds	r3, #36	; 0x24
 800b1aa:	2102      	movs	r1, #2
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f001 f895 	bl	800c2dc <RCCEx_PLL3_Config>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d001      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b1bc:	4b2f      	ldr	r3, [pc, #188]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1ca:	492c      	ldr	r1, [pc, #176]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 0310 	and.w	r3, r3, #16
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d01a      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1e6:	d10a      	bne.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	3324      	adds	r3, #36	; 0x24
 800b1ec:	2102      	movs	r1, #2
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f001 f874 	bl	800c2dc <RCCEx_PLL3_Config>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b1fe:	4b1f      	ldr	r3, [pc, #124]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b202:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b20c:	491b      	ldr	r1, [pc, #108]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d032      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b228:	d00d      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800b22a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b22e:	d016      	beq.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800b230:	2b00      	cmp	r3, #0
 800b232:	d111      	bne.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	3304      	adds	r3, #4
 800b238:	2100      	movs	r1, #0
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 ff9c 	bl	800c178 <RCCEx_PLL2_Config>
 800b240:	4603      	mov	r3, r0
 800b242:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b244:	e00c      	b.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3324      	adds	r3, #36	; 0x24
 800b24a:	2102      	movs	r1, #2
 800b24c:	4618      	mov	r0, r3
 800b24e:	f001 f845 	bl	800c2dc <RCCEx_PLL3_Config>
 800b252:	4603      	mov	r3, r0
 800b254:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b256:	e003      	b.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	75fb      	strb	r3, [r7, #23]
      break;
 800b25c:	e000      	b.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800b25e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b260:	7dfb      	ldrb	r3, [r7, #23]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10c      	bne.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b266:	4b05      	ldr	r3, [pc, #20]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b26a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b274:	4901      	ldr	r1, [pc, #4]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b276:	4313      	orrs	r3, r2
 800b278:	658b      	str	r3, [r1, #88]	; 0x58
 800b27a:	e003      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800b27c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b280:	7dfb      	ldrb	r3, [r7, #23]
 800b282:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d02f      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b296:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b29a:	d00c      	beq.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b29c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2a0:	d015      	beq.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800b2a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2a6:	d10f      	bne.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2a8:	4b79      	ldr	r3, [pc, #484]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ac:	4a78      	ldr	r2, [pc, #480]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b2b4:	e00c      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	3324      	adds	r3, #36	; 0x24
 800b2ba:	2101      	movs	r1, #1
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f001 f80d 	bl	800c2dc <RCCEx_PLL3_Config>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b2c6:	e003      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b2cc:	e000      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800b2ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10a      	bne.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b2d6:	4b6e      	ldr	r3, [pc, #440]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2e4:	496a      	ldr	r1, [pc, #424]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	654b      	str	r3, [r1, #84]	; 0x54
 800b2ea:	e001      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
 800b2ee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d029      	beq.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b300:	2b00      	cmp	r3, #0
 800b302:	d003      	beq.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800b304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b308:	d007      	beq.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800b30a:	e00f      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b30c:	4b60      	ldr	r3, [pc, #384]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b310:	4a5f      	ldr	r2, [pc, #380]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b318:	e00b      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	3304      	adds	r3, #4
 800b31e:	2102      	movs	r1, #2
 800b320:	4618      	mov	r0, r3
 800b322:	f000 ff29 	bl	800c178 <RCCEx_PLL2_Config>
 800b326:	4603      	mov	r3, r0
 800b328:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b32a:	e002      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	75fb      	strb	r3, [r7, #23]
      break;
 800b330:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d109      	bne.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b338:	4b55      	ldr	r3, [pc, #340]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b33a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b33c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b344:	4952      	ldr	r1, [pc, #328]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b346:	4313      	orrs	r3, r2
 800b348:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b34a:	e001      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
 800b34e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00a      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3324      	adds	r3, #36	; 0x24
 800b360:	2102      	movs	r1, #2
 800b362:	4618      	mov	r0, r3
 800b364:	f000 ffba 	bl	800c2dc <RCCEx_PLL3_Config>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d02f      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b386:	d00c      	beq.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b38c:	d802      	bhi.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d011      	beq.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800b392:	e00d      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800b394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b398:	d00f      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800b39a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b39e:	d00e      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800b3a0:	e006      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3a2:	4b3b      	ldr	r3, [pc, #236]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a6:	4a3a      	ldr	r2, [pc, #232]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b3ae:	e007      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b4:	e004      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b3b6:	bf00      	nop
 800b3b8:	e002      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b3ba:	bf00      	nop
 800b3bc:	e000      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b3be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d109      	bne.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b3c6:	4b32      	ldr	r3, [pc, #200]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3d2:	492f      	ldr	r1, [pc, #188]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	654b      	str	r3, [r1, #84]	; 0x54
 800b3d8:	e001      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3da:	7dfb      	ldrb	r3, [r7, #23]
 800b3dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d008      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b3ea:	4b29      	ldr	r3, [pc, #164]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f6:	4926      	ldr	r1, [pc, #152]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d009      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b408:	4b21      	ldr	r3, [pc, #132]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b40a:	691b      	ldr	r3, [r3, #16]
 800b40c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b416:	491e      	ldr	r1, [pc, #120]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b418:	4313      	orrs	r3, r2
 800b41a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d008      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b428:	4b19      	ldr	r3, [pc, #100]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b42c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b434:	4916      	ldr	r1, [pc, #88]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b436:	4313      	orrs	r3, r2
 800b438:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00d      	beq.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b446:	4b12      	ldr	r3, [pc, #72]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	4a11      	ldr	r2, [pc, #68]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b44c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b450:	6113      	str	r3, [r2, #16]
 800b452:	4b0f      	ldr	r3, [pc, #60]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b454:	691a      	ldr	r2, [r3, #16]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b45c:	490c      	ldr	r1, [pc, #48]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b45e:	4313      	orrs	r3, r2
 800b460:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	da08      	bge.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b46a:	4b09      	ldr	r3, [pc, #36]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b46c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b46e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b476:	4906      	ldr	r1, [pc, #24]	; (800b490 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b478:	4313      	orrs	r3, r2
 800b47a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800b47c:	7dbb      	ldrb	r3, [r7, #22]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d101      	bne.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800b482:	2300      	movs	r3, #0
 800b484:	e000      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3718      	adds	r7, #24
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	58024400 	.word	0x58024400

0800b494 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b090      	sub	sp, #64	; 0x40
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4a2:	d150      	bne.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b4a4:	4ba1      	ldr	r3, [pc, #644]	; (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b4a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4a8:	f003 0307 	and.w	r3, r3, #7
 800b4ac:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	2b04      	cmp	r3, #4
 800b4b2:	d844      	bhi.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800b4b4:	a201      	add	r2, pc, #4	; (adr r2, 800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800b4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ba:	bf00      	nop
 800b4bc:	0800b4d1 	.word	0x0800b4d1
 800b4c0:	0800b4e1 	.word	0x0800b4e1
 800b4c4:	0800b4f1 	.word	0x0800b4f1
 800b4c8:	0800b539 	.word	0x0800b539
 800b4cc:	0800b501 	.word	0x0800b501
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f000 fd03 	bl	800bee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4de:	e241      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4e0:	f107 0318 	add.w	r3, r7, #24
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 fa63 	bl	800b9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4ee:	e239      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4f0:	f107 030c 	add.w	r3, r7, #12
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 fba7 	bl	800bc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4fe:	e231      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b500:	4b8a      	ldr	r3, [pc, #552]	; (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b504:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b508:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d102      	bne.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b510:	4b87      	ldr	r3, [pc, #540]	; (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b512:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b514:	e226      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b51c:	d102      	bne.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800b51e:	4b85      	ldr	r3, [pc, #532]	; (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b522:	e21f      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b52a:	d102      	bne.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800b52c:	4b82      	ldr	r3, [pc, #520]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b52e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b530:	e218      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b532:	2300      	movs	r3, #0
 800b534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b536:	e215      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b538:	4b80      	ldr	r3, [pc, #512]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b53a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b53c:	e212      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b53e:	2300      	movs	r3, #0
 800b540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b542:	bf00      	nop
 800b544:	e20e      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b54c:	d14f      	bne.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b54e:	4b77      	ldr	r3, [pc, #476]	; (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b552:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b556:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55a:	2b80      	cmp	r3, #128	; 0x80
 800b55c:	d01c      	beq.n	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b55e:	2b80      	cmp	r3, #128	; 0x80
 800b560:	d804      	bhi.n	800b56c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800b562:	2b00      	cmp	r3, #0
 800b564:	d008      	beq.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800b566:	2b40      	cmp	r3, #64	; 0x40
 800b568:	d00e      	beq.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800b56a:	e03c      	b.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800b56c:	2bc0      	cmp	r3, #192	; 0xc0
 800b56e:	d037      	beq.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800b570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b574:	d018      	beq.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800b576:	e036      	b.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 fcaf 	bl	800bee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b586:	e1ed      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b588:	f107 0318 	add.w	r3, r7, #24
 800b58c:	4618      	mov	r0, r3
 800b58e:	f000 fa0f 	bl	800b9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b596:	e1e5      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b598:	f107 030c 	add.w	r3, r7, #12
 800b59c:	4618      	mov	r0, r3
 800b59e:	f000 fb53 	bl	800bc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5a6:	e1dd      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b5a8:	4b60      	ldr	r3, [pc, #384]	; (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b5aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5b0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d102      	bne.n	800b5be <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b5b8:	4b5d      	ldr	r3, [pc, #372]	; (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b5bc:	e1d2      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5c4:	d102      	bne.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800b5c6:	4b5b      	ldr	r3, [pc, #364]	; (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5ca:	e1cb      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5d2:	d102      	bne.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800b5d4:	4b58      	ldr	r3, [pc, #352]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5d8:	e1c4      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5de:	e1c1      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b5e0:	4b56      	ldr	r3, [pc, #344]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5e4:	e1be      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5ea:	bf00      	nop
 800b5ec:	e1ba      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5f4:	d153      	bne.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b5f6:	4b4d      	ldr	r3, [pc, #308]	; (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5fa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b5fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b606:	d01f      	beq.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800b608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b60c:	d805      	bhi.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00a      	beq.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800b612:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b616:	d00f      	beq.n	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800b618:	e03d      	b.n	800b696 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800b61a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b61e:	d037      	beq.n	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800b620:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b624:	d018      	beq.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800b626:	e036      	b.n	800b696 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 fc57 	bl	800bee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b636:	e195      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b638:	f107 0318 	add.w	r3, r7, #24
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 f9b7 	bl	800b9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b646:	e18d      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b648:	f107 030c 	add.w	r3, r7, #12
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 fafb 	bl	800bc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b656:	e185      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b658:	4b34      	ldr	r3, [pc, #208]	; (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b65a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b65c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b660:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b664:	2b00      	cmp	r3, #0
 800b666:	d102      	bne.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b668:	4b31      	ldr	r3, [pc, #196]	; (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b66a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b66c:	e17a      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b674:	d102      	bne.n	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800b676:	4b2f      	ldr	r3, [pc, #188]	; (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b67a:	e173      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b67e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b682:	d102      	bne.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800b684:	4b2c      	ldr	r3, [pc, #176]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b688:	e16c      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b68a:	2300      	movs	r3, #0
 800b68c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b68e:	e169      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b690:	4b2a      	ldr	r3, [pc, #168]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b694:	e166      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b69a:	bf00      	nop
 800b69c:	e162      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6a4:	d15d      	bne.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b6a6:	4b21      	ldr	r3, [pc, #132]	; (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b6a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6aa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b6ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6b6:	d01f      	beq.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b6b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6bc:	d805      	bhi.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00a      	beq.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b6c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6c6:	d00f      	beq.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800b6c8:	e047      	b.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800b6ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b6ce:	d041      	beq.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800b6d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b6d4:	d018      	beq.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800b6d6:	e040      	b.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f000 fbff 	bl	800bee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6e6:	e13d      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6e8:	f107 0318 	add.w	r3, r7, #24
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 f95f 	bl	800b9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6f6:	e135      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6f8:	f107 030c 	add.w	r3, r7, #12
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 faa3 	bl	800bc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b706:	e12d      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b708:	4b08      	ldr	r3, [pc, #32]	; (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b70a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b70c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b710:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b714:	2b00      	cmp	r3, #0
 800b716:	d102      	bne.n	800b71e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b718:	4b05      	ldr	r3, [pc, #20]	; (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b71a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b71c:	e122      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b720:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b724:	d10c      	bne.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800b726:	4b03      	ldr	r3, [pc, #12]	; (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b728:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b72a:	e11b      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b72c:	58024400 	.word	0x58024400
 800b730:	03d09000 	.word	0x03d09000
 800b734:	003d0900 	.word	0x003d0900
 800b738:	017d7840 	.word	0x017d7840
 800b73c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b746:	d102      	bne.n	800b74e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800b748:	4b89      	ldr	r3, [pc, #548]	; (800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b74a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b74c:	e10a      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b752:	e107      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b754:	4b87      	ldr	r3, [pc, #540]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b758:	e104      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b75e:	bf00      	nop
 800b760:	e100      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b768:	d153      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b76a:	4b83      	ldr	r3, [pc, #524]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b76c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b76e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b772:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b77a:	d01f      	beq.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b77c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b780:	d805      	bhi.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00a      	beq.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800b786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b78a:	d00f      	beq.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800b78c:	e03d      	b.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800b78e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b792:	d037      	beq.n	800b804 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800b794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b798:	d018      	beq.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b79a:	e036      	b.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b79c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f000 fb9d 	bl	800bee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7aa:	e0db      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7ac:	f107 0318 	add.w	r3, r7, #24
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f000 f8fd 	bl	800b9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7ba:	e0d3      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7bc:	f107 030c 	add.w	r3, r7, #12
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f000 fa41 	bl	800bc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7ca:	e0cb      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b7cc:	4b6a      	ldr	r3, [pc, #424]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b7ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b7d4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d102      	bne.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b7dc:	4b67      	ldr	r3, [pc, #412]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b7de:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b7e0:	e0c0      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7e8:	d102      	bne.n	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800b7ea:	4b65      	ldr	r3, [pc, #404]	; (800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7ee:	e0b9      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7f6:	d102      	bne.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800b7f8:	4b5d      	ldr	r3, [pc, #372]	; (800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7fc:	e0b2      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b802:	e0af      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b804:	4b5b      	ldr	r3, [pc, #364]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b806:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b808:	e0ac      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b80e:	bf00      	nop
 800b810:	e0a8      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b818:	d13d      	bne.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b81a:	4b57      	ldr	r3, [pc, #348]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b81c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b81e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b822:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b82a:	d00c      	beq.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b82c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b830:	d011      	beq.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b832:	2b00      	cmp	r3, #0
 800b834:	d12b      	bne.n	800b88e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b836:	f107 0318 	add.w	r3, r7, #24
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 f8b8 	bl	800b9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b844:	e08e      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b846:	f107 030c 	add.w	r3, r7, #12
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 f9fc 	bl	800bc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b854:	e086      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b856:	4b48      	ldr	r3, [pc, #288]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b85a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b85e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b862:	2b00      	cmp	r3, #0
 800b864:	d102      	bne.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b866:	4b45      	ldr	r3, [pc, #276]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b868:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b86a:	e07b      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b86e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b872:	d102      	bne.n	800b87a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800b874:	4b42      	ldr	r3, [pc, #264]	; (800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b878:	e074      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b87c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b880:	d102      	bne.n	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800b882:	4b3b      	ldr	r3, [pc, #236]	; (800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b884:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b886:	e06d      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b888:	2300      	movs	r3, #0
 800b88a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b88c:	e06a      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b88e:	2300      	movs	r3, #0
 800b890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b892:	bf00      	nop
 800b894:	e066      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b89c:	d11f      	bne.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b89e:	4b36      	ldr	r3, [pc, #216]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8a6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d003      	beq.n	800b8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b8ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8b2:	d008      	beq.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800b8b4:	e00f      	b.n	800b8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f000 fb10 	bl	800bee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8c4:	e04e      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8c6:	f107 0318 	add.w	r3, r7, #24
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 f870 	bl	800b9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
 800b8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8d4:	e046      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8da:	bf00      	nop
 800b8dc:	e042      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8e4:	d13c      	bne.n	800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b8e6:	4b24      	ldr	r3, [pc, #144]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b8e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ea:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b8ee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8f6:	d01e      	beq.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800b8f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8fc:	d805      	bhi.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00d      	beq.n	800b91e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b906:	d00e      	beq.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800b908:	e026      	b.n	800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800b90a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b90e:	d01d      	beq.n	800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800b910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b914:	d01d      	beq.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b916:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b91a:	d014      	beq.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b91c:	e01c      	b.n	800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b91e:	f000 f831 	bl	800b984 <HAL_RCCEx_GetD3PCLK1Freq>
 800b922:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b924:	e01e      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b926:	f107 0318 	add.w	r3, r7, #24
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 f840 	bl	800b9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b934:	e016      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b936:	f107 030c 	add.w	r3, r7, #12
 800b93a:	4618      	mov	r0, r3
 800b93c:	f000 f984 	bl	800bc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b944:	e00e      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800b946:	4b0d      	ldr	r3, [pc, #52]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b948:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b94a:	e00b      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800b94c:	4b0c      	ldr	r3, [pc, #48]	; (800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b94e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b950:	e008      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800b952:	4b07      	ldr	r3, [pc, #28]	; (800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b956:	e005      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b958:	2300      	movs	r3, #0
 800b95a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b95c:	bf00      	nop
 800b95e:	e001      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800b960:	2300      	movs	r3, #0
 800b962:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b966:	4618      	mov	r0, r3
 800b968:	3740      	adds	r7, #64	; 0x40
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	017d7840 	.word	0x017d7840
 800b974:	00bb8000 	.word	0x00bb8000
 800b978:	58024400 	.word	0x58024400
 800b97c:	03d09000 	.word	0x03d09000
 800b980:	003d0900 	.word	0x003d0900

0800b984 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b988:	f7fe fe1e 	bl	800a5c8 <HAL_RCC_GetHCLKFreq>
 800b98c:	4601      	mov	r1, r0
 800b98e:	4b06      	ldr	r3, [pc, #24]	; (800b9a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	091b      	lsrs	r3, r3, #4
 800b994:	f003 0307 	and.w	r3, r3, #7
 800b998:	4a04      	ldr	r2, [pc, #16]	; (800b9ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b99a:	5cd3      	ldrb	r3, [r2, r3]
 800b99c:	f003 031f 	and.w	r3, r3, #31
 800b9a0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	58024400 	.word	0x58024400
 800b9ac:	0801af14 	.word	0x0801af14

0800b9b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b089      	sub	sp, #36	; 0x24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9b8:	4b9d      	ldr	r3, [pc, #628]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9bc:	f003 0303 	and.w	r3, r3, #3
 800b9c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b9c2:	4b9b      	ldr	r3, [pc, #620]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c6:	0b1b      	lsrs	r3, r3, #12
 800b9c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b9ce:	4b98      	ldr	r3, [pc, #608]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d2:	091b      	lsrs	r3, r3, #4
 800b9d4:	f003 0301 	and.w	r3, r3, #1
 800b9d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b9da:	4b95      	ldr	r3, [pc, #596]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9de:	08db      	lsrs	r3, r3, #3
 800b9e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9e4:	693a      	ldr	r2, [r7, #16]
 800b9e6:	fb02 f303 	mul.w	r3, r2, r3
 800b9ea:	ee07 3a90 	vmov	s15, r3
 800b9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 810a 	beq.w	800bc12 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d05a      	beq.n	800baba <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d302      	bcc.n	800ba0e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d078      	beq.n	800bafe <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800ba0c:	e099      	b.n	800bb42 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba0e:	4b88      	ldr	r3, [pc, #544]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 0320 	and.w	r3, r3, #32
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d02d      	beq.n	800ba76 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba1a:	4b85      	ldr	r3, [pc, #532]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	08db      	lsrs	r3, r3, #3
 800ba20:	f003 0303 	and.w	r3, r3, #3
 800ba24:	4a83      	ldr	r2, [pc, #524]	; (800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800ba26:	fa22 f303 	lsr.w	r3, r2, r3
 800ba2a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	ee07 3a90 	vmov	s15, r3
 800ba32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	ee07 3a90 	vmov	s15, r3
 800ba3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba44:	4b7a      	ldr	r3, [pc, #488]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba4c:	ee07 3a90 	vmov	s15, r3
 800ba50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba54:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba58:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bc38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ba5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba70:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ba74:	e087      	b.n	800bb86 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	ee07 3a90 	vmov	s15, r3
 800ba7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba80:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800ba84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba88:	4b69      	ldr	r3, [pc, #420]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba90:	ee07 3a90 	vmov	s15, r3
 800ba94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba98:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba9c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bc38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800baa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bab4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bab8:	e065      	b.n	800bb86 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	ee07 3a90 	vmov	s15, r3
 800bac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800bac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bacc:	4b58      	ldr	r3, [pc, #352]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bad4:	ee07 3a90 	vmov	s15, r3
 800bad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800badc:	ed97 6a03 	vldr	s12, [r7, #12]
 800bae0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bc38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bafc:	e043      	b.n	800bb86 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	ee07 3a90 	vmov	s15, r3
 800bb04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb08:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bc44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800bb0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb10:	4b47      	ldr	r3, [pc, #284]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb18:	ee07 3a90 	vmov	s15, r3
 800bb1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb20:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb24:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bc38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bb28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb40:	e021      	b.n	800bb86 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	ee07 3a90 	vmov	s15, r3
 800bb48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb4c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800bb50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb54:	4b36      	ldr	r3, [pc, #216]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb5c:	ee07 3a90 	vmov	s15, r3
 800bb60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb64:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb68:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bc38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bb6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb84:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bb86:	4b2a      	ldr	r3, [pc, #168]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8a:	0a5b      	lsrs	r3, r3, #9
 800bb8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb90:	ee07 3a90 	vmov	s15, r3
 800bb94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bba0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbac:	ee17 2a90 	vmov	r2, s15
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bbb4:	4b1e      	ldr	r3, [pc, #120]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bbb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb8:	0c1b      	lsrs	r3, r3, #16
 800bbba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbbe:	ee07 3a90 	vmov	s15, r3
 800bbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbce:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbda:	ee17 2a90 	vmov	r2, s15
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bbe2:	4b13      	ldr	r3, [pc, #76]	; (800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe6:	0e1b      	lsrs	r3, r3, #24
 800bbe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbec:	ee07 3a90 	vmov	s15, r3
 800bbf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbfc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc08:	ee17 2a90 	vmov	r2, s15
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bc10:	e008      	b.n	800bc24 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	609a      	str	r2, [r3, #8]
}
 800bc24:	bf00      	nop
 800bc26:	3724      	adds	r7, #36	; 0x24
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	58024400 	.word	0x58024400
 800bc34:	03d09000 	.word	0x03d09000
 800bc38:	46000000 	.word	0x46000000
 800bc3c:	4c742400 	.word	0x4c742400
 800bc40:	4a742400 	.word	0x4a742400
 800bc44:	4bbebc20 	.word	0x4bbebc20

0800bc48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b089      	sub	sp, #36	; 0x24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc50:	4b9d      	ldr	r3, [pc, #628]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc54:	f003 0303 	and.w	r3, r3, #3
 800bc58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bc5a:	4b9b      	ldr	r3, [pc, #620]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5e:	0d1b      	lsrs	r3, r3, #20
 800bc60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc66:	4b98      	ldr	r3, [pc, #608]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6a:	0a1b      	lsrs	r3, r3, #8
 800bc6c:	f003 0301 	and.w	r3, r3, #1
 800bc70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bc72:	4b95      	ldr	r3, [pc, #596]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc76:	08db      	lsrs	r3, r3, #3
 800bc78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc7c:	693a      	ldr	r2, [r7, #16]
 800bc7e:	fb02 f303 	mul.w	r3, r2, r3
 800bc82:	ee07 3a90 	vmov	s15, r3
 800bc86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f000 810a 	beq.w	800beaa <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d05a      	beq.n	800bd52 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d302      	bcc.n	800bca6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d078      	beq.n	800bd96 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800bca4:	e099      	b.n	800bdda <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bca6:	4b88      	ldr	r3, [pc, #544]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 0320 	and.w	r3, r3, #32
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d02d      	beq.n	800bd0e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bcb2:	4b85      	ldr	r3, [pc, #532]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	08db      	lsrs	r3, r3, #3
 800bcb8:	f003 0303 	and.w	r3, r3, #3
 800bcbc:	4a83      	ldr	r2, [pc, #524]	; (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800bcbe:	fa22 f303 	lsr.w	r3, r2, r3
 800bcc2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	ee07 3a90 	vmov	s15, r3
 800bcca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	ee07 3a90 	vmov	s15, r3
 800bcd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcdc:	4b7a      	ldr	r3, [pc, #488]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bcde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bce4:	ee07 3a90 	vmov	s15, r3
 800bce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcec:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcf0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bed0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bcf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd08:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bd0c:	e087      	b.n	800be1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	ee07 3a90 	vmov	s15, r3
 800bd14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd18:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bed4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800bd1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd20:	4b69      	ldr	r3, [pc, #420]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd28:	ee07 3a90 	vmov	s15, r3
 800bd2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd30:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd34:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bed0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bd38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd50:	e065      	b.n	800be1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	ee07 3a90 	vmov	s15, r3
 800bd58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd5c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800bd60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd64:	4b58      	ldr	r3, [pc, #352]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd6c:	ee07 3a90 	vmov	s15, r3
 800bd70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd74:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd78:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bed0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bd7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd94:	e043      	b.n	800be1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	ee07 3a90 	vmov	s15, r3
 800bd9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800bda4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda8:	4b47      	ldr	r3, [pc, #284]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdb0:	ee07 3a90 	vmov	s15, r3
 800bdb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdbc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bed0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bdc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdd8:	e021      	b.n	800be1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	ee07 3a90 	vmov	s15, r3
 800bde0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800bde8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdec:	4b36      	ldr	r3, [pc, #216]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bdee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdf4:	ee07 3a90 	vmov	s15, r3
 800bdf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdfc:	ed97 6a03 	vldr	s12, [r7, #12]
 800be00:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bed0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800be04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be1c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800be1e:	4b2a      	ldr	r3, [pc, #168]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be22:	0a5b      	lsrs	r3, r3, #9
 800be24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be28:	ee07 3a90 	vmov	s15, r3
 800be2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be38:	edd7 6a07 	vldr	s13, [r7, #28]
 800be3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be44:	ee17 2a90 	vmov	r2, s15
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800be4c:	4b1e      	ldr	r3, [pc, #120]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be50:	0c1b      	lsrs	r3, r3, #16
 800be52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be56:	ee07 3a90 	vmov	s15, r3
 800be5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be66:	edd7 6a07 	vldr	s13, [r7, #28]
 800be6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be72:	ee17 2a90 	vmov	r2, s15
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800be7a:	4b13      	ldr	r3, [pc, #76]	; (800bec8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7e:	0e1b      	lsrs	r3, r3, #24
 800be80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be84:	ee07 3a90 	vmov	s15, r3
 800be88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be90:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be94:	edd7 6a07 	vldr	s13, [r7, #28]
 800be98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bea0:	ee17 2a90 	vmov	r2, s15
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bea8:	e008      	b.n	800bebc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	609a      	str	r2, [r3, #8]
}
 800bebc:	bf00      	nop
 800bebe:	3724      	adds	r7, #36	; 0x24
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr
 800bec8:	58024400 	.word	0x58024400
 800becc:	03d09000 	.word	0x03d09000
 800bed0:	46000000 	.word	0x46000000
 800bed4:	4c742400 	.word	0x4c742400
 800bed8:	4a742400 	.word	0x4a742400
 800bedc:	4bbebc20 	.word	0x4bbebc20

0800bee0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b089      	sub	sp, #36	; 0x24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bee8:	4b9d      	ldr	r3, [pc, #628]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800beea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beec:	f003 0303 	and.w	r3, r3, #3
 800bef0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bef2:	4b9b      	ldr	r3, [pc, #620]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef6:	091b      	lsrs	r3, r3, #4
 800bef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800befc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800befe:	4b98      	ldr	r3, [pc, #608]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf02:	f003 0301 	and.w	r3, r3, #1
 800bf06:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bf08:	4b95      	ldr	r3, [pc, #596]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf0c:	08db      	lsrs	r3, r3, #3
 800bf0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf12:	693a      	ldr	r2, [r7, #16]
 800bf14:	fb02 f303 	mul.w	r3, r2, r3
 800bf18:	ee07 3a90 	vmov	s15, r3
 800bf1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf20:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f000 810a 	beq.w	800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d05a      	beq.n	800bfe8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d302      	bcc.n	800bf3c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800bf36:	2b02      	cmp	r3, #2
 800bf38:	d078      	beq.n	800c02c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800bf3a:	e099      	b.n	800c070 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf3c:	4b88      	ldr	r3, [pc, #544]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 0320 	and.w	r3, r3, #32
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d02d      	beq.n	800bfa4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf48:	4b85      	ldr	r3, [pc, #532]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	08db      	lsrs	r3, r3, #3
 800bf4e:	f003 0303 	and.w	r3, r3, #3
 800bf52:	4a84      	ldr	r2, [pc, #528]	; (800c164 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800bf54:	fa22 f303 	lsr.w	r3, r2, r3
 800bf58:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	ee07 3a90 	vmov	s15, r3
 800bf60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	ee07 3a90 	vmov	s15, r3
 800bf6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf72:	4b7b      	ldr	r3, [pc, #492]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf7a:	ee07 3a90 	vmov	s15, r3
 800bf7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf82:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf86:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c168 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800bf8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bfa2:	e087      	b.n	800c0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	ee07 3a90 	vmov	s15, r3
 800bfaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c16c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800bfb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfb6:	4b6a      	ldr	r3, [pc, #424]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bfb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfbe:	ee07 3a90 	vmov	s15, r3
 800bfc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c168 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800bfce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfe6:	e065      	b.n	800c0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	ee07 3a90 	vmov	s15, r3
 800bfee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800bff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bffa:	4b59      	ldr	r3, [pc, #356]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c002:	ee07 3a90 	vmov	s15, r3
 800c006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c00a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c00e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c168 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c02a:	e043      	b.n	800c0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	ee07 3a90 	vmov	s15, r3
 800c032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c036:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c174 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c03e:	4b48      	ldr	r3, [pc, #288]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c046:	ee07 3a90 	vmov	s15, r3
 800c04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c04e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c052:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c168 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c06a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c06e:	e021      	b.n	800c0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	ee07 3a90 	vmov	s15, r3
 800c076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c07a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c07e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c082:	4b37      	ldr	r3, [pc, #220]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c08a:	ee07 3a90 	vmov	s15, r3
 800c08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c092:	ed97 6a03 	vldr	s12, [r7, #12]
 800c096:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c168 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c09a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c09e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0b2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c0b4:	4b2a      	ldr	r3, [pc, #168]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b8:	0a5b      	lsrs	r3, r3, #9
 800c0ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0be:	ee07 3a90 	vmov	s15, r3
 800c0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0da:	ee17 2a90 	vmov	r2, s15
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c0e2:	4b1f      	ldr	r3, [pc, #124]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e6:	0c1b      	lsrs	r3, r3, #16
 800c0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0ec:	ee07 3a90 	vmov	s15, r3
 800c0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c108:	ee17 2a90 	vmov	r2, s15
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c110:	4b13      	ldr	r3, [pc, #76]	; (800c160 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c114:	0e1b      	lsrs	r3, r3, #24
 800c116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c11a:	ee07 3a90 	vmov	s15, r3
 800c11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c12a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c12e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c136:	ee17 2a90 	vmov	r2, s15
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c13e:	e008      	b.n	800c152 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	609a      	str	r2, [r3, #8]
}
 800c152:	bf00      	nop
 800c154:	3724      	adds	r7, #36	; 0x24
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	58024400 	.word	0x58024400
 800c164:	03d09000 	.word	0x03d09000
 800c168:	46000000 	.word	0x46000000
 800c16c:	4c742400 	.word	0x4c742400
 800c170:	4a742400 	.word	0x4a742400
 800c174:	4bbebc20 	.word	0x4bbebc20

0800c178 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c186:	4b53      	ldr	r3, [pc, #332]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c18a:	f003 0303 	and.w	r3, r3, #3
 800c18e:	2b03      	cmp	r3, #3
 800c190:	d101      	bne.n	800c196 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c192:	2301      	movs	r3, #1
 800c194:	e099      	b.n	800c2ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c196:	4b4f      	ldr	r3, [pc, #316]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a4e      	ldr	r2, [pc, #312]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c19c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c1a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1a2:	f7f8 fa01 	bl	80045a8 <HAL_GetTick>
 800c1a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1a8:	e008      	b.n	800c1bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c1aa:	f7f8 f9fd 	bl	80045a8 <HAL_GetTick>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d901      	bls.n	800c1bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c1b8:	2303      	movs	r3, #3
 800c1ba:	e086      	b.n	800c2ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1bc:	4b45      	ldr	r3, [pc, #276]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d1f0      	bne.n	800c1aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c1c8:	4b42      	ldr	r3, [pc, #264]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	031b      	lsls	r3, r3, #12
 800c1d6:	493f      	ldr	r1, [pc, #252]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	628b      	str	r3, [r1, #40]	; 0x28
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	025b      	lsls	r3, r3, #9
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	431a      	orrs	r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	68db      	ldr	r3, [r3, #12]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	041b      	lsls	r3, r3, #16
 800c1fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c1fe:	431a      	orrs	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	3b01      	subs	r3, #1
 800c206:	061b      	lsls	r3, r3, #24
 800c208:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c20c:	4931      	ldr	r1, [pc, #196]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c20e:	4313      	orrs	r3, r2
 800c210:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c212:	4b30      	ldr	r3, [pc, #192]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c216:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	695b      	ldr	r3, [r3, #20]
 800c21e:	492d      	ldr	r1, [pc, #180]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c220:	4313      	orrs	r3, r2
 800c222:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c224:	4b2b      	ldr	r3, [pc, #172]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c228:	f023 0220 	bic.w	r2, r3, #32
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	4928      	ldr	r1, [pc, #160]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c232:	4313      	orrs	r3, r2
 800c234:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c236:	4b27      	ldr	r3, [pc, #156]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23a:	4a26      	ldr	r2, [pc, #152]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c23c:	f023 0310 	bic.w	r3, r3, #16
 800c240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c242:	4b24      	ldr	r3, [pc, #144]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c246:	4b24      	ldr	r3, [pc, #144]	; (800c2d8 <RCCEx_PLL2_Config+0x160>)
 800c248:	4013      	ands	r3, r2
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	69d2      	ldr	r2, [r2, #28]
 800c24e:	00d2      	lsls	r2, r2, #3
 800c250:	4920      	ldr	r1, [pc, #128]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c252:	4313      	orrs	r3, r2
 800c254:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c256:	4b1f      	ldr	r3, [pc, #124]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c25a:	4a1e      	ldr	r2, [pc, #120]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c25c:	f043 0310 	orr.w	r3, r3, #16
 800c260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d106      	bne.n	800c276 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c268:	4b1a      	ldr	r3, [pc, #104]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26c:	4a19      	ldr	r2, [pc, #100]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c26e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c272:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c274:	e00f      	b.n	800c296 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d106      	bne.n	800c28a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c27c:	4b15      	ldr	r3, [pc, #84]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c280:	4a14      	ldr	r2, [pc, #80]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c286:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c288:	e005      	b.n	800c296 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c28a:	4b12      	ldr	r3, [pc, #72]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28e:	4a11      	ldr	r2, [pc, #68]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c290:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c294:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c296:	4b0f      	ldr	r3, [pc, #60]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a0e      	ldr	r2, [pc, #56]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c29c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c2a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2a2:	f7f8 f981 	bl	80045a8 <HAL_GetTick>
 800c2a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2a8:	e008      	b.n	800c2bc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c2aa:	f7f8 f97d 	bl	80045a8 <HAL_GetTick>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	1ad3      	subs	r3, r2, r3
 800c2b4:	2b02      	cmp	r3, #2
 800c2b6:	d901      	bls.n	800c2bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c2b8:	2303      	movs	r3, #3
 800c2ba:	e006      	b.n	800c2ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2bc:	4b05      	ldr	r3, [pc, #20]	; (800c2d4 <RCCEx_PLL2_Config+0x15c>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d0f0      	beq.n	800c2aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	58024400 	.word	0x58024400
 800c2d8:	ffff0007 	.word	0xffff0007

0800c2dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2ea:	4b53      	ldr	r3, [pc, #332]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ee:	f003 0303 	and.w	r3, r3, #3
 800c2f2:	2b03      	cmp	r3, #3
 800c2f4:	d101      	bne.n	800c2fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e099      	b.n	800c42e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c2fa:	4b4f      	ldr	r3, [pc, #316]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a4e      	ldr	r2, [pc, #312]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c306:	f7f8 f94f 	bl	80045a8 <HAL_GetTick>
 800c30a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c30c:	e008      	b.n	800c320 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c30e:	f7f8 f94b 	bl	80045a8 <HAL_GetTick>
 800c312:	4602      	mov	r2, r0
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d901      	bls.n	800c320 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c31c:	2303      	movs	r3, #3
 800c31e:	e086      	b.n	800c42e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c320:	4b45      	ldr	r3, [pc, #276]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1f0      	bne.n	800c30e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c32c:	4b42      	ldr	r3, [pc, #264]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c330:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	051b      	lsls	r3, r3, #20
 800c33a:	493f      	ldr	r1, [pc, #252]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c33c:	4313      	orrs	r3, r2
 800c33e:	628b      	str	r3, [r1, #40]	; 0x28
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	3b01      	subs	r3, #1
 800c346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	3b01      	subs	r3, #1
 800c350:	025b      	lsls	r3, r3, #9
 800c352:	b29b      	uxth	r3, r3
 800c354:	431a      	orrs	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	041b      	lsls	r3, r3, #16
 800c35e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c362:	431a      	orrs	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	3b01      	subs	r3, #1
 800c36a:	061b      	lsls	r3, r3, #24
 800c36c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c370:	4931      	ldr	r1, [pc, #196]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c372:	4313      	orrs	r3, r2
 800c374:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c376:	4b30      	ldr	r3, [pc, #192]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	492d      	ldr	r1, [pc, #180]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c384:	4313      	orrs	r3, r2
 800c386:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c388:	4b2b      	ldr	r3, [pc, #172]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	4928      	ldr	r1, [pc, #160]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c396:	4313      	orrs	r3, r2
 800c398:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c39a:	4b27      	ldr	r3, [pc, #156]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39e:	4a26      	ldr	r2, [pc, #152]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c3a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c3a6:	4b24      	ldr	r3, [pc, #144]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c3a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3aa:	4b24      	ldr	r3, [pc, #144]	; (800c43c <RCCEx_PLL3_Config+0x160>)
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	69d2      	ldr	r2, [r2, #28]
 800c3b2:	00d2      	lsls	r2, r2, #3
 800c3b4:	4920      	ldr	r1, [pc, #128]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c3ba:	4b1f      	ldr	r3, [pc, #124]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3be:	4a1e      	ldr	r2, [pc, #120]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c3c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d106      	bne.n	800c3da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c3cc:	4b1a      	ldr	r3, [pc, #104]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d0:	4a19      	ldr	r2, [pc, #100]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c3d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c3d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3d8:	e00f      	b.n	800c3fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d106      	bne.n	800c3ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c3e0:	4b15      	ldr	r3, [pc, #84]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e4:	4a14      	ldr	r2, [pc, #80]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c3e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c3ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3ec:	e005      	b.n	800c3fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c3ee:	4b12      	ldr	r3, [pc, #72]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f2:	4a11      	ldr	r2, [pc, #68]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c3f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c3f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c3fa:	4b0f      	ldr	r3, [pc, #60]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a0e      	ldr	r2, [pc, #56]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c406:	f7f8 f8cf 	bl	80045a8 <HAL_GetTick>
 800c40a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c40c:	e008      	b.n	800c420 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c40e:	f7f8 f8cb 	bl	80045a8 <HAL_GetTick>
 800c412:	4602      	mov	r2, r0
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d901      	bls.n	800c420 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c41c:	2303      	movs	r3, #3
 800c41e:	e006      	b.n	800c42e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c420:	4b05      	ldr	r3, [pc, #20]	; (800c438 <RCCEx_PLL3_Config+0x15c>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d0f0      	beq.n	800c40e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	58024400 	.word	0x58024400
 800c43c:	ffff0007 	.word	0xffff0007

0800c440 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c448:	2301      	movs	r3, #1
 800c44a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d067      	beq.n	800c522 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d106      	bne.n	800c46c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f7f7 fce2 	bl	8003e30 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2202      	movs	r2, #2
 800c470:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	22ca      	movs	r2, #202	; 0xca
 800c47a:	625a      	str	r2, [r3, #36]	; 0x24
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2253      	movs	r2, #83	; 0x53
 800c482:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fa49 	bl	800c91c <RTC_EnterInitMode>
 800c48a:	4603      	mov	r3, r0
 800c48c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800c48e:	7bfb      	ldrb	r3, [r7, #15]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d13b      	bne.n	800c50c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6899      	ldr	r1, [r3, #8]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	4b23      	ldr	r3, [pc, #140]	; (800c52c <HAL_RTC_Init+0xec>)
 800c4a0:	400b      	ands	r3, r1
 800c4a2:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6899      	ldr	r1, [r3, #8]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	685a      	ldr	r2, [r3, #4]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	691b      	ldr	r3, [r3, #16]
 800c4b2:	431a      	orrs	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	431a      	orrs	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	430a      	orrs	r2, r1
 800c4c0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	0419      	lsls	r1, r3, #16
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	68da      	ldr	r2, [r3, #12]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	430a      	orrs	r2, r1
 800c4d2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fa51 	bl	800c97c <RTC_ExitInitMode>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800c4de:	7bfb      	ldrb	r3, [r7, #15]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d113      	bne.n	800c50c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f022 0203 	bic.w	r2, r2, #3
 800c4f2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	69da      	ldr	r2, [r3, #28]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	695b      	ldr	r3, [r3, #20]
 800c502:	431a      	orrs	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	430a      	orrs	r2, r1
 800c50a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	22ff      	movs	r2, #255	; 0xff
 800c512:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800c514:	7bfb      	ldrb	r3, [r7, #15]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d103      	bne.n	800c522 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2201      	movs	r2, #1
 800c51e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c522:	7bfb      	ldrb	r3, [r7, #15]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	ff8fffbf 	.word	0xff8fffbf

0800c530 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c530:	b590      	push	{r4, r7, lr}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d101      	bne.n	800c54a <HAL_RTC_SetTime+0x1a>
 800c546:	2302      	movs	r3, #2
 800c548:	e089      	b.n	800c65e <HAL_RTC_SetTime+0x12e>
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2201      	movs	r2, #1
 800c54e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2202      	movs	r2, #2
 800c556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	22ca      	movs	r2, #202	; 0xca
 800c560:	625a      	str	r2, [r3, #36]	; 0x24
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2253      	movs	r2, #83	; 0x53
 800c568:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f000 f9d6 	bl	800c91c <RTC_EnterInitMode>
 800c570:	4603      	mov	r3, r0
 800c572:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c574:	7cfb      	ldrb	r3, [r7, #19]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d161      	bne.n	800c63e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d126      	bne.n	800c5ce <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d102      	bne.n	800c594 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	2200      	movs	r2, #0
 800c592:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	4618      	mov	r0, r3
 800c59a:	f000 fa2d 	bl	800c9f8 <RTC_ByteToBcd2>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	785b      	ldrb	r3, [r3, #1]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f000 fa26 	bl	800c9f8 <RTC_ByteToBcd2>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5b0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	789b      	ldrb	r3, [r3, #2]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f000 fa1e 	bl	800c9f8 <RTC_ByteToBcd2>
 800c5bc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c5be:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	78db      	ldrb	r3, [r3, #3]
 800c5c6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	617b      	str	r3, [r7, #20]
 800c5cc:	e018      	b.n	800c600 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d102      	bne.n	800c5e2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	785b      	ldrb	r3, [r3, #1]
 800c5ec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5ee:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c5f4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	78db      	ldrb	r3, [r3, #3]
 800c5fa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	6979      	ldr	r1, [r7, #20]
 800c606:	4b18      	ldr	r3, [pc, #96]	; (800c668 <HAL_RTC_SetTime+0x138>)
 800c608:	400b      	ands	r3, r1
 800c60a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	689a      	ldr	r2, [r3, #8]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c61a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6899      	ldr	r1, [r3, #8]
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	68da      	ldr	r2, [r3, #12]
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	431a      	orrs	r2, r3
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	430a      	orrs	r2, r1
 800c632:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f000 f9a1 	bl	800c97c <RTC_ExitInitMode>
 800c63a:	4603      	mov	r3, r0
 800c63c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	22ff      	movs	r2, #255	; 0xff
 800c644:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c646:	7cfb      	ldrb	r3, [r7, #19]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d103      	bne.n	800c654 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2201      	movs	r2, #1
 800c650:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2200      	movs	r2, #0
 800c658:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c65c:	7cfb      	ldrb	r3, [r7, #19]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	371c      	adds	r7, #28
 800c662:	46bd      	mov	sp, r7
 800c664:	bd90      	pop	{r4, r7, pc}
 800c666:	bf00      	nop
 800c668:	007f7f7f 	.word	0x007f7f7f

0800c66c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	4b22      	ldr	r3, [pc, #136]	; (800c720 <HAL_RTC_GetTime+0xb4>)
 800c698:	4013      	ands	r3, r2
 800c69a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	0c1b      	lsrs	r3, r3, #16
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6a6:	b2da      	uxtb	r2, r3
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	0a1b      	lsrs	r3, r3, #8
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6b6:	b2da      	uxtb	r2, r3
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6c4:	b2da      	uxtb	r2, r3
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	0d9b      	lsrs	r3, r3, #22
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d11a      	bne.n	800c716 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f000 f9a7 	bl	800ca38 <RTC_Bcd2ToByte>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	785b      	ldrb	r3, [r3, #1]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 f99e 	bl	800ca38 <RTC_Bcd2ToByte>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	461a      	mov	r2, r3
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	789b      	ldrb	r3, [r3, #2]
 800c708:	4618      	mov	r0, r3
 800c70a:	f000 f995 	bl	800ca38 <RTC_Bcd2ToByte>
 800c70e:	4603      	mov	r3, r0
 800c710:	461a      	mov	r2, r3
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3718      	adds	r7, #24
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	007f7f7f 	.word	0x007f7f7f

0800c724 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c724:	b590      	push	{r4, r7, lr}
 800c726:	b087      	sub	sp, #28
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c736:	2b01      	cmp	r3, #1
 800c738:	d101      	bne.n	800c73e <HAL_RTC_SetDate+0x1a>
 800c73a:	2302      	movs	r3, #2
 800c73c:	e073      	b.n	800c826 <HAL_RTC_SetDate+0x102>
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2201      	movs	r2, #1
 800c742:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2202      	movs	r2, #2
 800c74a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d10e      	bne.n	800c772 <HAL_RTC_SetDate+0x4e>
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	785b      	ldrb	r3, [r3, #1]
 800c758:	f003 0310 	and.w	r3, r3, #16
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d008      	beq.n	800c772 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	785b      	ldrb	r3, [r3, #1]
 800c764:	f023 0310 	bic.w	r3, r3, #16
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	330a      	adds	r3, #10
 800c76c:	b2da      	uxtb	r2, r3
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d11c      	bne.n	800c7b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	78db      	ldrb	r3, [r3, #3]
 800c77c:	4618      	mov	r0, r3
 800c77e:	f000 f93b 	bl	800c9f8 <RTC_ByteToBcd2>
 800c782:	4603      	mov	r3, r0
 800c784:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	785b      	ldrb	r3, [r3, #1]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 f934 	bl	800c9f8 <RTC_ByteToBcd2>
 800c790:	4603      	mov	r3, r0
 800c792:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c794:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	789b      	ldrb	r3, [r3, #2]
 800c79a:	4618      	mov	r0, r3
 800c79c:	f000 f92c 	bl	800c9f8 <RTC_ByteToBcd2>
 800c7a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c7a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	617b      	str	r3, [r7, #20]
 800c7b0:	e00e      	b.n	800c7d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	78db      	ldrb	r3, [r3, #3]
 800c7b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	785b      	ldrb	r3, [r3, #1]
 800c7bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c7be:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c7c0:	68ba      	ldr	r2, [r7, #8]
 800c7c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c7c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	22ca      	movs	r2, #202	; 0xca
 800c7d6:	625a      	str	r2, [r3, #36]	; 0x24
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2253      	movs	r2, #83	; 0x53
 800c7de:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f000 f89b 	bl	800c91c <RTC_EnterInitMode>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c7ea:	7cfb      	ldrb	r3, [r7, #19]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10a      	bne.n	800c806 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	6979      	ldr	r1, [r7, #20]
 800c7f6:	4b0e      	ldr	r3, [pc, #56]	; (800c830 <HAL_RTC_SetDate+0x10c>)
 800c7f8:	400b      	ands	r3, r1
 800c7fa:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f000 f8bd 	bl	800c97c <RTC_ExitInitMode>
 800c802:	4603      	mov	r3, r0
 800c804:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	22ff      	movs	r2, #255	; 0xff
 800c80c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c80e:	7cfb      	ldrb	r3, [r7, #19]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d103      	bne.n	800c81c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2201      	movs	r2, #1
 800c818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c824:	7cfb      	ldrb	r3, [r7, #19]


}
 800c826:	4618      	mov	r0, r3
 800c828:	371c      	adds	r7, #28
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd90      	pop	{r4, r7, pc}
 800c82e:	bf00      	nop
 800c830:	00ffff3f 	.word	0x00ffff3f

0800c834 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b086      	sub	sp, #24
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	685a      	ldr	r2, [r3, #4]
 800c846:	4b21      	ldr	r3, [pc, #132]	; (800c8cc <HAL_RTC_GetDate+0x98>)
 800c848:	4013      	ands	r3, r2
 800c84a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	0c1b      	lsrs	r3, r3, #16
 800c850:	b2da      	uxtb	r2, r3
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	0a1b      	lsrs	r3, r3, #8
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	f003 031f 	and.w	r3, r3, #31
 800c860:	b2da      	uxtb	r2, r3
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	0b5b      	lsrs	r3, r3, #13
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	f003 0307 	and.w	r3, r3, #7
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d11a      	bne.n	800c8c0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	78db      	ldrb	r3, [r3, #3]
 800c88e:	4618      	mov	r0, r3
 800c890:	f000 f8d2 	bl	800ca38 <RTC_Bcd2ToByte>
 800c894:	4603      	mov	r3, r0
 800c896:	461a      	mov	r2, r3
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	785b      	ldrb	r3, [r3, #1]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f000 f8c9 	bl	800ca38 <RTC_Bcd2ToByte>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	789b      	ldrb	r3, [r3, #2]
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 f8c0 	bl	800ca38 <RTC_Bcd2ToByte>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c8c0:	2300      	movs	r3, #0
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3718      	adds	r7, #24
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	00ffff3f 	.word	0x00ffff3f

0800c8d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68da      	ldr	r2, [r3, #12]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c8e6:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800c8e8:	f7f7 fe5e 	bl	80045a8 <HAL_GetTick>
 800c8ec:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c8ee:	e009      	b.n	800c904 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c8f0:	f7f7 fe5a 	bl	80045a8 <HAL_GetTick>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8fe:	d901      	bls.n	800c904 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800c900:	2303      	movs	r3, #3
 800c902:	e007      	b.n	800c914 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	f003 0320 	and.w	r3, r3, #32
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d0ee      	beq.n	800c8f0 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3710      	adds	r7, #16
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c924:	2300      	movs	r3, #0
 800c926:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c932:	2b00      	cmp	r3, #0
 800c934:	d11d      	bne.n	800c972 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f04f 32ff 	mov.w	r2, #4294967295
 800c93e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c940:	f7f7 fe32 	bl	80045a8 <HAL_GetTick>
 800c944:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c946:	e00d      	b.n	800c964 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c948:	f7f7 fe2e 	bl	80045a8 <HAL_GetTick>
 800c94c:	4602      	mov	r2, r0
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c956:	d905      	bls.n	800c964 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c958:	2303      	movs	r3, #3
 800c95a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2203      	movs	r2, #3
 800c960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d0ea      	beq.n	800c948 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800c972:	7bfb      	ldrb	r3, [r7, #15]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800c988:	4b1a      	ldr	r3, [pc, #104]	; (800c9f4 <RTC_ExitInitMode+0x78>)
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	4a19      	ldr	r2, [pc, #100]	; (800c9f4 <RTC_ExitInitMode+0x78>)
 800c98e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c992:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c994:	4b17      	ldr	r3, [pc, #92]	; (800c9f4 <RTC_ExitInitMode+0x78>)
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	f003 0320 	and.w	r3, r3, #32
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10c      	bne.n	800c9ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f7ff ff95 	bl	800c8d0 <HAL_RTC_WaitForSynchro>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01e      	beq.n	800c9ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2203      	movs	r2, #3
 800c9b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	73fb      	strb	r3, [r7, #15]
 800c9b8:	e017      	b.n	800c9ea <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c9ba:	4b0e      	ldr	r3, [pc, #56]	; (800c9f4 <RTC_ExitInitMode+0x78>)
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	4a0d      	ldr	r2, [pc, #52]	; (800c9f4 <RTC_ExitInitMode+0x78>)
 800c9c0:	f023 0320 	bic.w	r3, r3, #32
 800c9c4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f7ff ff82 	bl	800c8d0 <HAL_RTC_WaitForSynchro>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d005      	beq.n	800c9de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2203      	movs	r2, #3
 800c9d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c9da:	2303      	movs	r3, #3
 800c9dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c9de:	4b05      	ldr	r3, [pc, #20]	; (800c9f4 <RTC_ExitInitMode+0x78>)
 800c9e0:	689b      	ldr	r3, [r3, #8]
 800c9e2:	4a04      	ldr	r2, [pc, #16]	; (800c9f4 <RTC_ExitInitMode+0x78>)
 800c9e4:	f043 0320 	orr.w	r3, r3, #32
 800c9e8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	58004000 	.word	0x58004000

0800c9f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	4603      	mov	r3, r0
 800ca00:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ca02:	2300      	movs	r3, #0
 800ca04:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800ca06:	79fb      	ldrb	r3, [r7, #7]
 800ca08:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800ca0a:	e005      	b.n	800ca18 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800ca12:	7afb      	ldrb	r3, [r7, #11]
 800ca14:	3b0a      	subs	r3, #10
 800ca16:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800ca18:	7afb      	ldrb	r3, [r7, #11]
 800ca1a:	2b09      	cmp	r3, #9
 800ca1c:	d8f6      	bhi.n	800ca0c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	011b      	lsls	r3, r3, #4
 800ca24:	b2da      	uxtb	r2, r3
 800ca26:	7afb      	ldrb	r3, [r7, #11]
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	b2db      	uxtb	r3, r3
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3714      	adds	r7, #20
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	4603      	mov	r3, r0
 800ca40:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ca42:	79fb      	ldrb	r3, [r7, #7]
 800ca44:	091b      	lsrs	r3, r3, #4
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	461a      	mov	r2, r3
 800ca4a:	0092      	lsls	r2, r2, #2
 800ca4c:	4413      	add	r3, r2
 800ca4e:	005b      	lsls	r3, r3, #1
 800ca50:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ca52:	79fb      	ldrb	r3, [r7, #7]
 800ca54:	f003 030f 	and.w	r3, r3, #15
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	7bfb      	ldrb	r3, [r7, #15]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	b2db      	uxtb	r3, r3
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3714      	adds	r7, #20
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b08a      	sub	sp, #40	; 0x28
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d101      	bne.n	800ca7e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	e07c      	b.n	800cb78 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d10c      	bne.n	800caa4 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	699b      	ldr	r3, [r3, #24]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d102      	bne.n	800ca9e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2202      	movs	r2, #2
 800ca9c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7f7 f9e0 	bl	8003e64 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2203      	movs	r2, #3
 800caa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f867 	bl	800cb80 <HAL_SD_InitCard>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d001      	beq.n	800cabc <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800cab8:	2301      	movs	r3, #1
 800caba:	e05d      	b.n	800cb78 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cabc:	f107 0308 	add.w	r3, r7, #8
 800cac0:	4619      	mov	r1, r3
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f001 f8ce 	bl	800dc64 <HAL_SD_GetCardStatus>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e052      	b.n	800cb78 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cad2:	7e3b      	ldrb	r3, [r7, #24]
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cad8:	7e7b      	ldrb	r3, [r7, #25]
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d10a      	bne.n	800cafc <HAL_SD_Init+0x90>
 800cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d102      	bne.n	800caf2 <HAL_SD_Init+0x86>
 800caec:	6a3b      	ldr	r3, [r7, #32]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d004      	beq.n	800cafc <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800caf8:	65da      	str	r2, [r3, #92]	; 0x5c
 800cafa:	e00b      	b.n	800cb14 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d104      	bne.n	800cb0e <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb0a:	65da      	str	r2, [r3, #92]	; 0x5c
 800cb0c:	e002      	b.n	800cb14 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	4619      	mov	r1, r3
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f001 f984 	bl	800de28 <HAL_SD_ConfigWideBusOperation>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d001      	beq.n	800cb2a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e026      	b.n	800cb78 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cb2a:	f7f7 fd3d 	bl	80045a8 <HAL_GetTick>
 800cb2e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cb30:	e011      	b.n	800cb56 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800cb32:	f7f7 fd39 	bl	80045a8 <HAL_GetTick>
 800cb36:	4602      	mov	r2, r0
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	1ad3      	subs	r3, r2, r3
 800cb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb40:	d109      	bne.n	800cb56 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800cb52:	2303      	movs	r3, #3
 800cb54:	e010      	b.n	800cb78 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f001 fa10 	bl	800df7c <HAL_SD_GetCardState>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b04      	cmp	r3, #4
 800cb60:	d1e7      	bne.n	800cb32 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2201      	movs	r2, #1
 800cb72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3728      	adds	r7, #40	; 0x28
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cb80:	b5b0      	push	{r4, r5, r7, lr}
 800cb82:	b08e      	sub	sp, #56	; 0x38
 800cb84:	af04      	add	r7, sp, #16
 800cb86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cb90:	2300      	movs	r3, #0
 800cb92:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cb94:	2300      	movs	r3, #0
 800cb96:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cb98:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cb9c:	f7fe fc7a 	bl	800b494 <HAL_RCCEx_GetPeriphCLKFreq>
 800cba0:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba4:	0a1b      	lsrs	r3, r3, #8
 800cba6:	4a40      	ldr	r2, [pc, #256]	; (800cca8 <HAL_SD_InitCard+0x128>)
 800cba8:	fba2 2303 	umull	r2, r3, r2, r3
 800cbac:	091b      	lsrs	r3, r3, #4
 800cbae:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	699b      	ldr	r3, [r3, #24]
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	d107      	bne.n	800cbc8 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f042 0210 	orr.w	r2, r2, #16
 800cbc6:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681d      	ldr	r5, [r3, #0]
 800cbcc:	466c      	mov	r4, sp
 800cbce:	f107 0314 	add.w	r3, r7, #20
 800cbd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cbda:	f107 0308 	add.w	r3, r7, #8
 800cbde:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	f004 f9f5 	bl	8010fd0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f004 fa38 	bl	8011060 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	005b      	lsls	r3, r3, #1
 800cbf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbfa:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d008      	beq.n	800cc14 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800cc02:	4a2a      	ldr	r2, [pc, #168]	; (800ccac <HAL_SD_InitCard+0x12c>)
 800cc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7f7 fcd7 	bl	80045c0 <HAL_Delay>
 800cc12:	e002      	b.n	800cc1a <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800cc14:	2002      	movs	r0, #2
 800cc16:	f7f7 fcd3 	bl	80045c0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f001 fa8c 	bl	800e138 <SD_PowerON>
 800cc20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc22:	6a3b      	ldr	r3, [r7, #32]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00b      	beq.n	800cc40 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc34:	6a3b      	ldr	r3, [r7, #32]
 800cc36:	431a      	orrs	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e02e      	b.n	800cc9e <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f001 f9bb 	bl	800dfbc <SD_InitCard>
 800cc46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc48:	6a3b      	ldr	r3, [r7, #32]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00b      	beq.n	800cc66 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2201      	movs	r2, #1
 800cc52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc5a:	6a3b      	ldr	r3, [r7, #32]
 800cc5c:	431a      	orrs	r2, r3
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc62:	2301      	movs	r3, #1
 800cc64:	e01b      	b.n	800cc9e <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f004 fa8c 	bl	801118c <SDMMC_CmdBlockLength>
 800cc74:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc76:	6a3b      	ldr	r3, [r7, #32]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00f      	beq.n	800cc9c <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a0b      	ldr	r2, [pc, #44]	; (800ccb0 <HAL_SD_InitCard+0x130>)
 800cc82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc88:	6a3b      	ldr	r3, [r7, #32]
 800cc8a:	431a      	orrs	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2201      	movs	r2, #1
 800cc94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e000      	b.n	800cc9e <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3728      	adds	r7, #40	; 0x28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bdb0      	pop	{r4, r5, r7, pc}
 800cca6:	bf00      	nop
 800cca8:	014f8b59 	.word	0x014f8b59
 800ccac:	00012110 	.word	0x00012110
 800ccb0:	1fe00fff 	.word	0x1fe00fff

0800ccb4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b092      	sub	sp, #72	; 0x48
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	607a      	str	r2, [r7, #4]
 800ccc0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ccc2:	f7f7 fc71 	bl	80045a8 <HAL_GetTick>
 800ccc6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d107      	bne.n	800cce6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cce2:	2301      	movs	r3, #1
 800cce4:	e167      	b.n	800cfb6 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	f040 815a 	bne.w	800cfa8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ccfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	441a      	add	r2, r3
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d907      	bls.n	800cd18 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cd14:	2301      	movs	r3, #1
 800cd16:	e14e      	b.n	800cfb6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2203      	movs	r2, #3
 800cd1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2200      	movs	r2, #0
 800cd26:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d002      	beq.n	800cd36 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd32:	025b      	lsls	r3, r3, #9
 800cd34:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd36:	f04f 33ff 	mov.w	r3, #4294967295
 800cd3a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	025b      	lsls	r3, r3, #9
 800cd40:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cd42:	2390      	movs	r3, #144	; 0x90
 800cd44:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cd46:	2302      	movs	r3, #2
 800cd48:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f107 0214 	add.w	r2, r7, #20
 800cd5a:	4611      	mov	r1, r2
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f004 f9e9 	bl	8011134 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68da      	ldr	r2, [r3, #12]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd70:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d90a      	bls.n	800cd8e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2202      	movs	r2, #2
 800cd7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd84:	4618      	mov	r0, r3
 800cd86:	f004 fa47 	bl	8011218 <SDMMC_CmdReadMultiBlock>
 800cd8a:	6478      	str	r0, [r7, #68]	; 0x44
 800cd8c:	e009      	b.n	800cda2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2201      	movs	r2, #1
 800cd92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f004 fa19 	bl	80111d2 <SDMMC_CmdReadSingleBlock>
 800cda0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cda2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d012      	beq.n	800cdce <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a84      	ldr	r2, [pc, #528]	; (800cfc0 <HAL_SD_ReadBlocks+0x30c>)
 800cdae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdb6:	431a      	orrs	r2, r3
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e0f3      	b.n	800cfb6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cdd2:	e058      	b.n	800ce86 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d033      	beq.n	800ce4a <HAL_SD_ReadBlocks+0x196>
 800cde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cde4:	2b1f      	cmp	r3, #31
 800cde6:	d930      	bls.n	800ce4a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cde8:	2300      	movs	r3, #0
 800cdea:	643b      	str	r3, [r7, #64]	; 0x40
 800cdec:	e027      	b.n	800ce3e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f004 f916 	bl	8011024 <SDMMC_ReadFIFO>
 800cdf8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfc:	b2da      	uxtb	r2, r3
 800cdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce00:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce04:	3301      	adds	r3, #1
 800ce06:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	0a1b      	lsrs	r3, r3, #8
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce14:	3301      	adds	r3, #1
 800ce16:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800ce18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1a:	0c1b      	lsrs	r3, r3, #16
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce20:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce24:	3301      	adds	r3, #1
 800ce26:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800ce28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2a:	0e1b      	lsrs	r3, r3, #24
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce30:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce34:	3301      	adds	r3, #1
 800ce36:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800ce38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	643b      	str	r3, [r7, #64]	; 0x40
 800ce3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce40:	2b07      	cmp	r3, #7
 800ce42:	d9d4      	bls.n	800cdee <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800ce44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce46:	3b20      	subs	r3, #32
 800ce48:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ce4a:	f7f7 fbad 	bl	80045a8 <HAL_GetTick>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d902      	bls.n	800ce60 <HAL_SD_ReadBlocks+0x1ac>
 800ce5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d112      	bne.n	800ce86 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a56      	ldr	r2, [pc, #344]	; (800cfc0 <HAL_SD_ReadBlocks+0x30c>)
 800ce66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2201      	movs	r2, #1
 800ce78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800ce82:	2303      	movs	r3, #3
 800ce84:	e097      	b.n	800cfb6 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce8c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d09f      	beq.n	800cdd4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68da      	ldr	r2, [r3, #12]
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cea2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d022      	beq.n	800cef8 <HAL_SD_ReadBlocks+0x244>
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d91f      	bls.n	800cef8 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cebc:	2b03      	cmp	r3, #3
 800cebe:	d01b      	beq.n	800cef8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4618      	mov	r0, r3
 800cec6:	f004 fa11 	bl	80112ec <SDMMC_CmdStopTransfer>
 800ceca:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d012      	beq.n	800cef8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a3a      	ldr	r2, [pc, #232]	; (800cfc0 <HAL_SD_ReadBlocks+0x30c>)
 800ced8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cee0:	431a      	orrs	r2, r3
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2201      	movs	r2, #1
 800ceea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2200      	movs	r2, #0
 800cef2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800cef4:	2301      	movs	r3, #1
 800cef6:	e05e      	b.n	800cfb6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cefe:	f003 0308 	and.w	r3, r3, #8
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d012      	beq.n	800cf2c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a2d      	ldr	r2, [pc, #180]	; (800cfc0 <HAL_SD_ReadBlocks+0x30c>)
 800cf0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf12:	f043 0208 	orr.w	r2, r3, #8
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2200      	movs	r2, #0
 800cf26:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e044      	b.n	800cfb6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf32:	f003 0302 	and.w	r3, r3, #2
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d012      	beq.n	800cf60 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a20      	ldr	r2, [pc, #128]	; (800cfc0 <HAL_SD_ReadBlocks+0x30c>)
 800cf40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf46:	f043 0202 	orr.w	r2, r3, #2
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e02a      	b.n	800cfb6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf66:	f003 0320 	and.w	r3, r3, #32
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d012      	beq.n	800cf94 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a13      	ldr	r2, [pc, #76]	; (800cfc0 <HAL_SD_ReadBlocks+0x30c>)
 800cf74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7a:	f043 0220 	orr.w	r2, r3, #32
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	e010      	b.n	800cfb6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a0a      	ldr	r2, [pc, #40]	; (800cfc4 <HAL_SD_ReadBlocks+0x310>)
 800cf9a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	e006      	b.n	800cfb6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cfb4:	2301      	movs	r3, #1
  }
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3748      	adds	r7, #72	; 0x48
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	1fe00fff 	.word	0x1fe00fff
 800cfc4:	18000f3a 	.word	0x18000f3a

0800cfc8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b092      	sub	sp, #72	; 0x48
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	607a      	str	r2, [r7, #4]
 800cfd4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cfd6:	f7f7 fae7 	bl	80045a8 <HAL_GetTick>
 800cfda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d107      	bne.n	800cffa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cff6:	2301      	movs	r3, #1
 800cff8:	e16b      	b.n	800d2d2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d000:	b2db      	uxtb	r3, r3
 800d002:	2b01      	cmp	r3, #1
 800d004:	f040 815e 	bne.w	800d2c4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d00e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	441a      	add	r2, r3
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d018:	429a      	cmp	r2, r3
 800d01a:	d907      	bls.n	800d02c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d020:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d028:	2301      	movs	r3, #1
 800d02a:	e152      	b.n	800d2d2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2203      	movs	r2, #3
 800d030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2200      	movs	r2, #0
 800d03a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d040:	2b01      	cmp	r3, #1
 800d042:	d002      	beq.n	800d04a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d046:	025b      	lsls	r3, r3, #9
 800d048:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d04a:	f04f 33ff 	mov.w	r3, #4294967295
 800d04e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	025b      	lsls	r3, r3, #9
 800d054:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d056:	2390      	movs	r3, #144	; 0x90
 800d058:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d05a:	2300      	movs	r3, #0
 800d05c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d05e:	2300      	movs	r3, #0
 800d060:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d062:	2300      	movs	r3, #0
 800d064:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f107 0218 	add.w	r2, r7, #24
 800d06e:	4611      	mov	r1, r2
 800d070:	4618      	mov	r0, r3
 800d072:	f004 f85f 	bl	8011134 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68da      	ldr	r2, [r3, #12]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d084:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d90a      	bls.n	800d0a2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2220      	movs	r2, #32
 800d090:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d098:	4618      	mov	r0, r3
 800d09a:	f004 f903 	bl	80112a4 <SDMMC_CmdWriteMultiBlock>
 800d09e:	6478      	str	r0, [r7, #68]	; 0x44
 800d0a0:	e009      	b.n	800d0b6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2210      	movs	r2, #16
 800d0a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f004 f8d5 	bl	801125e <SDMMC_CmdWriteSingleBlock>
 800d0b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d012      	beq.n	800d0e2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a86      	ldr	r2, [pc, #536]	; (800d2dc <HAL_SD_WriteBlocks+0x314>)
 800d0c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0ca:	431a      	orrs	r2, r3
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e0f7      	b.n	800d2d2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d0e6:	e05c      	b.n	800d1a2 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d037      	beq.n	800d166 <HAL_SD_WriteBlocks+0x19e>
 800d0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0f8:	2b1f      	cmp	r3, #31
 800d0fa:	d934      	bls.n	800d166 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	643b      	str	r3, [r7, #64]	; 0x40
 800d100:	e02b      	b.n	800d15a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800d102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d10a:	3301      	adds	r3, #1
 800d10c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	021a      	lsls	r2, r3, #8
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	4313      	orrs	r3, r2
 800d118:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11c:	3301      	adds	r3, #1
 800d11e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	041a      	lsls	r2, r3, #16
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	4313      	orrs	r3, r2
 800d12a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12e:	3301      	adds	r3, #1
 800d130:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	061a      	lsls	r2, r3, #24
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d140:	3301      	adds	r3, #1
 800d142:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f107 0214 	add.w	r2, r7, #20
 800d14c:	4611      	mov	r1, r2
 800d14e:	4618      	mov	r0, r3
 800d150:	f003 ff75 	bl	801103e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d156:	3301      	adds	r3, #1
 800d158:	643b      	str	r3, [r7, #64]	; 0x40
 800d15a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d15c:	2b07      	cmp	r3, #7
 800d15e:	d9d0      	bls.n	800d102 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800d160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d162:	3b20      	subs	r3, #32
 800d164:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d166:	f7f7 fa1f 	bl	80045a8 <HAL_GetTick>
 800d16a:	4602      	mov	r2, r0
 800d16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16e:	1ad3      	subs	r3, r2, r3
 800d170:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d172:	429a      	cmp	r2, r3
 800d174:	d902      	bls.n	800d17c <HAL_SD_WriteBlocks+0x1b4>
 800d176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d112      	bne.n	800d1a2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a56      	ldr	r2, [pc, #344]	; (800d2dc <HAL_SD_WriteBlocks+0x314>)
 800d182:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d18a:	431a      	orrs	r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2200      	movs	r2, #0
 800d19c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	e097      	b.n	800d2d2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d09b      	beq.n	800d0e8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	68da      	ldr	r2, [r3, #12]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1be:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d022      	beq.n	800d214 <HAL_SD_WriteBlocks+0x24c>
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d91f      	bls.n	800d214 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d8:	2b03      	cmp	r3, #3
 800d1da:	d01b      	beq.n	800d214 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f004 f883 	bl	80112ec <SDMMC_CmdStopTransfer>
 800d1e6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d1e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d012      	beq.n	800d214 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4a3a      	ldr	r2, [pc, #232]	; (800d2dc <HAL_SD_WriteBlocks+0x314>)
 800d1f4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1fc:	431a      	orrs	r2, r3
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2201      	movs	r2, #1
 800d206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	e05e      	b.n	800d2d2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d21a:	f003 0308 	and.w	r3, r3, #8
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d012      	beq.n	800d248 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a2d      	ldr	r2, [pc, #180]	; (800d2dc <HAL_SD_WriteBlocks+0x314>)
 800d228:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d22e:	f043 0208 	orr.w	r2, r3, #8
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	e044      	b.n	800d2d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d24e:	f003 0302 	and.w	r3, r3, #2
 800d252:	2b00      	cmp	r3, #0
 800d254:	d012      	beq.n	800d27c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4a20      	ldr	r2, [pc, #128]	; (800d2dc <HAL_SD_WriteBlocks+0x314>)
 800d25c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d262:	f043 0202 	orr.w	r2, r3, #2
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2201      	movs	r2, #1
 800d26e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2200      	movs	r2, #0
 800d276:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d278:	2301      	movs	r3, #1
 800d27a:	e02a      	b.n	800d2d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d282:	f003 0310 	and.w	r3, r3, #16
 800d286:	2b00      	cmp	r3, #0
 800d288:	d012      	beq.n	800d2b0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4a13      	ldr	r2, [pc, #76]	; (800d2dc <HAL_SD_WriteBlocks+0x314>)
 800d290:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d296:	f043 0210 	orr.w	r2, r3, #16
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e010      	b.n	800d2d2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a0a      	ldr	r2, [pc, #40]	; (800d2e0 <HAL_SD_WriteBlocks+0x318>)
 800d2b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	e006      	b.n	800d2d2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d2d0:	2301      	movs	r3, #1
  }
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3748      	adds	r7, #72	; 0x48
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	1fe00fff 	.word	0x1fe00fff
 800d2e0:	18000f3a 	.word	0x18000f3a

0800d2e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b08c      	sub	sp, #48	; 0x30
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
 800d2f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d107      	bne.n	800d30c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d300:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d308:	2301      	movs	r3, #1
 800d30a:	e08d      	b.n	800d428 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d312:	b2db      	uxtb	r3, r3
 800d314:	2b01      	cmp	r3, #1
 800d316:	f040 8086 	bne.w	800d426 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2200      	movs	r2, #0
 800d31e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	441a      	add	r2, r3
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d907      	bls.n	800d33e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d332:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d33a:	2301      	movs	r3, #1
 800d33c:	e074      	b.n	800d428 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2203      	movs	r2, #3
 800d342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2200      	movs	r2, #0
 800d34c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	025a      	lsls	r2, r3, #9
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d360:	2b01      	cmp	r3, #1
 800d362:	d002      	beq.n	800d36a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d366:	025b      	lsls	r3, r3, #9
 800d368:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d36a:	f04f 33ff 	mov.w	r3, #4294967295
 800d36e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	025b      	lsls	r3, r3, #9
 800d374:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d376:	2390      	movs	r3, #144	; 0x90
 800d378:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d37a:	2302      	movs	r3, #2
 800d37c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d37e:	2300      	movs	r3, #0
 800d380:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d382:	2300      	movs	r3, #0
 800d384:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f107 0210 	add.w	r2, r7, #16
 800d38e:	4611      	mov	r1, r2
 800d390:	4618      	mov	r0, r3
 800d392:	f003 fecf 	bl	8011134 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	68da      	ldr	r2, [r3, #12]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3a4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	68ba      	ldr	r2, [r7, #8]
 800d3ac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d90a      	bls.n	800d3d2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2282      	movs	r2, #130	; 0x82
 800d3c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f003 ff25 	bl	8011218 <SDMMC_CmdReadMultiBlock>
 800d3ce:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3d0:	e009      	b.n	800d3e6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2281      	movs	r2, #129	; 0x81
 800d3d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f003 fef7 	bl	80111d2 <SDMMC_CmdReadSingleBlock>
 800d3e4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d012      	beq.n	800d412 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a0f      	ldr	r2, [pc, #60]	; (800d430 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d3f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	431a      	orrs	r2, r3
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2201      	movs	r2, #1
 800d404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	e00a      	b.n	800d428 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d420:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d422:	2300      	movs	r3, #0
 800d424:	e000      	b.n	800d428 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d426:	2302      	movs	r3, #2
  }
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3730      	adds	r7, #48	; 0x30
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	1fe00fff 	.word	0x1fe00fff

0800d434 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08c      	sub	sp, #48	; 0x30
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	60b9      	str	r1, [r7, #8]
 800d43e:	607a      	str	r2, [r7, #4]
 800d440:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d107      	bne.n	800d45c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d450:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	e08d      	b.n	800d578 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d462:	b2db      	uxtb	r3, r3
 800d464:	2b01      	cmp	r3, #1
 800d466:	f040 8086 	bne.w	800d576 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2200      	movs	r2, #0
 800d46e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	441a      	add	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d907      	bls.n	800d48e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d482:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d48a:	2301      	movs	r3, #1
 800d48c:	e074      	b.n	800d578 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2203      	movs	r2, #3
 800d492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2200      	movs	r2, #0
 800d49c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	68ba      	ldr	r2, [r7, #8]
 800d4a2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	025a      	lsls	r2, r3, #9
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d002      	beq.n	800d4ba <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	025b      	lsls	r3, r3, #9
 800d4b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d4be:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	025b      	lsls	r3, r3, #9
 800d4c4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d4c6:	2390      	movs	r3, #144	; 0x90
 800d4c8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f107 0210 	add.w	r2, r7, #16
 800d4de:	4611      	mov	r1, r2
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f003 fe27 	bl	8011134 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	68da      	ldr	r2, [r3, #12]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4f4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2201      	movs	r2, #1
 800d504:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d90a      	bls.n	800d522 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	22a0      	movs	r2, #160	; 0xa0
 800d510:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d518:	4618      	mov	r0, r3
 800d51a:	f003 fec3 	bl	80112a4 <SDMMC_CmdWriteMultiBlock>
 800d51e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d520:	e009      	b.n	800d536 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2290      	movs	r2, #144	; 0x90
 800d526:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d52e:	4618      	mov	r0, r3
 800d530:	f003 fe95 	bl	801125e <SDMMC_CmdWriteSingleBlock>
 800d534:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d012      	beq.n	800d562 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a0f      	ldr	r2, [pc, #60]	; (800d580 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d542:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54a:	431a      	orrs	r2, r3
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d55e:	2301      	movs	r3, #1
 800d560:	e00a      	b.n	800d578 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d570:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d572:	2300      	movs	r3, #0
 800d574:	e000      	b.n	800d578 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d576:	2302      	movs	r3, #2
  }
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3730      	adds	r7, #48	; 0x30
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	1fe00fff 	.word	0x1fe00fff

0800d584 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d590:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d008      	beq.n	800d5b2 <HAL_SD_IRQHandler+0x2e>
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f003 0308 	and.w	r3, r3, #8
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d003      	beq.n	800d5b2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f001 f92a 	bl	800e804 <SD_Read_IT>
 800d5b0:	e19a      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f000 80ac 	beq.w	800d71a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5ca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	4b9d      	ldr	r3, [pc, #628]	; (800d84c <HAL_SD_IRQHandler+0x2c8>)
 800d5d8:	400b      	ands	r3, r1
 800d5da:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d5ea:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	68da      	ldr	r2, [r3, #12]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5fa:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f003 0308 	and.w	r3, r3, #8
 800d602:	2b00      	cmp	r3, #0
 800d604:	d038      	beq.n	800d678 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f003 0302 	and.w	r3, r3, #2
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d104      	bne.n	800d61a <HAL_SD_IRQHandler+0x96>
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f003 0320 	and.w	r3, r3, #32
 800d616:	2b00      	cmp	r3, #0
 800d618:	d011      	beq.n	800d63e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4618      	mov	r0, r3
 800d620:	f003 fe64 	bl	80112ec <SDMMC_CmdStopTransfer>
 800d624:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d008      	beq.n	800d63e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	431a      	orrs	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 f959 	bl	800d8f0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a83      	ldr	r2, [pc, #524]	; (800d850 <HAL_SD_IRQHandler+0x2cc>)
 800d644:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2201      	movs	r2, #1
 800d64a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2200      	movs	r2, #0
 800d652:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f003 0301 	and.w	r3, r3, #1
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d104      	bne.n	800d668 <HAL_SD_IRQHandler+0xe4>
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f003 0302 	and.w	r3, r3, #2
 800d664:	2b00      	cmp	r3, #0
 800d666:	d003      	beq.n	800d670 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f005 fe55 	bl	8013318 <HAL_SD_RxCpltCallback>
 800d66e:	e13b      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f005 fe47 	bl	8013304 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d676:	e137      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f000 8132 	beq.w	800d8e8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2200      	movs	r2, #0
 800d68a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2200      	movs	r2, #0
 800d692:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2200      	movs	r2, #0
 800d69a:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f003 0302 	and.w	r3, r3, #2
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d104      	bne.n	800d6b0 <HAL_SD_IRQHandler+0x12c>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f003 0320 	and.w	r3, r3, #32
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d011      	beq.n	800d6d4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f003 fe19 	bl	80112ec <SDMMC_CmdStopTransfer>
 800d6ba:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d008      	beq.n	800d6d4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	431a      	orrs	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 f90e 	bl	800d8f0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f003 0310 	and.w	r3, r3, #16
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d104      	bne.n	800d6f6 <HAL_SD_IRQHandler+0x172>
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f003 0320 	and.w	r3, r3, #32
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d002      	beq.n	800d6fc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f005 fe04 	bl	8013304 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f003 0301 	and.w	r3, r3, #1
 800d702:	2b00      	cmp	r3, #0
 800d704:	d105      	bne.n	800d712 <HAL_SD_IRQHandler+0x18e>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f003 0302 	and.w	r3, r3, #2
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f000 80eb 	beq.w	800d8e8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f005 fe00 	bl	8013318 <HAL_SD_RxCpltCallback>
}
 800d718:	e0e6      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d724:	2b00      	cmp	r3, #0
 800d726:	d008      	beq.n	800d73a <HAL_SD_IRQHandler+0x1b6>
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f003 0308 	and.w	r3, r3, #8
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d003      	beq.n	800d73a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f001 f8ac 	bl	800e890 <SD_Write_IT>
 800d738:	e0d6      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d740:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 80a2 	beq.w	800d88e <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d750:	f003 0302 	and.w	r3, r3, #2
 800d754:	2b00      	cmp	r3, #0
 800d756:	d005      	beq.n	800d764 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75c:	f043 0202 	orr.w	r2, r3, #2
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d76a:	f003 0308 	and.w	r3, r3, #8
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d005      	beq.n	800d77e <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d776:	f043 0208 	orr.w	r2, r3, #8
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d784:	f003 0320 	and.w	r3, r3, #32
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d005      	beq.n	800d798 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d790:	f043 0220 	orr.w	r2, r3, #32
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d79e:	f003 0310 	and.w	r3, r3, #16
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d005      	beq.n	800d7b2 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7aa:	f043 0210 	orr.w	r2, r3, #16
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a26      	ldr	r2, [pc, #152]	; (800d850 <HAL_SD_IRQHandler+0x2cc>)
 800d7b8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d7c8:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	68da      	ldr	r2, [r3, #12]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d7d8:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d7e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	68da      	ldr	r2, [r3, #12]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d7f8:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4618      	mov	r0, r3
 800d800:	f003 fd74 	bl	80112ec <SDMMC_CmdStopTransfer>
 800d804:	4602      	mov	r2, r0
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80a:	431a      	orrs	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	68da      	ldr	r2, [r3, #12]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d81e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d828:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f003 0308 	and.w	r3, r3, #8
 800d830:	2b00      	cmp	r3, #0
 800d832:	d00f      	beq.n	800d854 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2200      	movs	r2, #0
 800d840:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 f854 	bl	800d8f0 <HAL_SD_ErrorCallback>
}
 800d848:	e04e      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
 800d84a:	bf00      	nop
 800d84c:	ffff3ec5 	.word	0xffff3ec5
 800d850:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d044      	beq.n	800d8e8 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d862:	2b00      	cmp	r3, #0
 800d864:	d040      	beq.n	800d8e8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d874:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2200      	movs	r2, #0
 800d87c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2201      	movs	r2, #1
 800d882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 f832 	bl	800d8f0 <HAL_SD_ErrorCallback>
}
 800d88c:	e02c      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d025      	beq.n	800d8e8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8a4:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8ac:	f003 0304 	and.w	r3, r3, #4
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10c      	bne.n	800d8ce <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f003 0320 	and.w	r3, r3, #32
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d003      	beq.n	800d8c6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f001 f84e 	bl	800e960 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d8c4:	e010      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f001 f836 	bl	800e938 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d8cc:	e00c      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	f003 0320 	and.w	r3, r3, #32
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d003      	beq.n	800d8e0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f001 f837 	bl	800e94c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d8de:	e003      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f001 f81f 	bl	800e924 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d8e6:	e7ff      	b.n	800d8e8 <HAL_SD_IRQHandler+0x364>
 800d8e8:	bf00      	nop
 800d8ea:	3710      	adds	r7, #16
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d8f8:	bf00      	nop
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	4603      	mov	r3, r0
 800d90c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800d90e:	bf00      	nop
 800d910:	370c      	adds	r7, #12
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr
	...

0800d91c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d92a:	0f9b      	lsrs	r3, r3, #30
 800d92c:	b2da      	uxtb	r2, r3
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d936:	0e9b      	lsrs	r3, r3, #26
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	f003 030f 	and.w	r3, r3, #15
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d948:	0e1b      	lsrs	r3, r3, #24
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	f003 0303 	and.w	r3, r3, #3
 800d950:	b2da      	uxtb	r2, r3
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d95a:	0c1b      	lsrs	r3, r3, #16
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d966:	0a1b      	lsrs	r3, r3, #8
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d972:	b2da      	uxtb	r2, r3
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d97c:	0d1b      	lsrs	r3, r3, #20
 800d97e:	b29a      	uxth	r2, r3
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d988:	0c1b      	lsrs	r3, r3, #16
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	f003 030f 	and.w	r3, r3, #15
 800d990:	b2da      	uxtb	r2, r3
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d99a:	0bdb      	lsrs	r3, r3, #15
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	f003 0301 	and.w	r3, r3, #1
 800d9a2:	b2da      	uxtb	r2, r3
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9ac:	0b9b      	lsrs	r3, r3, #14
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	f003 0301 	and.w	r3, r3, #1
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9be:	0b5b      	lsrs	r3, r3, #13
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	f003 0301 	and.w	r3, r3, #1
 800d9c6:	b2da      	uxtb	r2, r3
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9d0:	0b1b      	lsrs	r3, r3, #12
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	f003 0301 	and.w	r3, r3, #1
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d163      	bne.n	800dab4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9f0:	009a      	lsls	r2, r3, #2
 800d9f2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d9f6:	4013      	ands	r3, r2
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d9fc:	0f92      	lsrs	r2, r2, #30
 800d9fe:	431a      	orrs	r2, r3
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da08:	0edb      	lsrs	r3, r3, #27
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	f003 0307 	and.w	r3, r3, #7
 800da10:	b2da      	uxtb	r2, r3
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da1a:	0e1b      	lsrs	r3, r3, #24
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	f003 0307 	and.w	r3, r3, #7
 800da22:	b2da      	uxtb	r2, r3
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da2c:	0d5b      	lsrs	r3, r3, #21
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	f003 0307 	and.w	r3, r3, #7
 800da34:	b2da      	uxtb	r2, r3
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da3e:	0c9b      	lsrs	r3, r3, #18
 800da40:	b2db      	uxtb	r3, r3
 800da42:	f003 0307 	and.w	r3, r3, #7
 800da46:	b2da      	uxtb	r2, r3
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da50:	0bdb      	lsrs	r3, r3, #15
 800da52:	b2db      	uxtb	r3, r3
 800da54:	f003 0307 	and.w	r3, r3, #7
 800da58:	b2da      	uxtb	r2, r3
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	691b      	ldr	r3, [r3, #16]
 800da62:	1c5a      	adds	r2, r3, #1
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	7e1b      	ldrb	r3, [r3, #24]
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	f003 0307 	and.w	r3, r3, #7
 800da72:	3302      	adds	r3, #2
 800da74:	2201      	movs	r2, #1
 800da76:	fa02 f303 	lsl.w	r3, r2, r3
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800da7e:	fb02 f203 	mul.w	r2, r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	7a1b      	ldrb	r3, [r3, #8]
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	f003 030f 	and.w	r3, r3, #15
 800da90:	2201      	movs	r2, #1
 800da92:	409a      	lsls	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800daa0:	0a52      	lsrs	r2, r2, #9
 800daa2:	fb02 f203 	mul.w	r2, r2, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dab0:	659a      	str	r2, [r3, #88]	; 0x58
 800dab2:	e031      	b.n	800db18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d11d      	bne.n	800daf8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dac0:	041b      	lsls	r3, r3, #16
 800dac2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daca:	0c1b      	lsrs	r3, r3, #16
 800dacc:	431a      	orrs	r2, r3
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	691b      	ldr	r3, [r3, #16]
 800dad6:	3301      	adds	r3, #1
 800dad8:	029a      	lsls	r2, r3, #10
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800daec:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	659a      	str	r2, [r3, #88]	; 0x58
 800daf6:	e00f      	b.n	800db18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a58      	ldr	r2, [pc, #352]	; (800dc60 <HAL_SD_GetCardCSD+0x344>)
 800dafe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2201      	movs	r2, #1
 800db10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800db14:	2301      	movs	r3, #1
 800db16:	e09d      	b.n	800dc54 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db1c:	0b9b      	lsrs	r3, r3, #14
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	f003 0301 	and.w	r3, r3, #1
 800db24:	b2da      	uxtb	r2, r3
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db2e:	09db      	lsrs	r3, r3, #7
 800db30:	b2db      	uxtb	r3, r3
 800db32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db36:	b2da      	uxtb	r2, r3
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db40:	b2db      	uxtb	r3, r3
 800db42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db46:	b2da      	uxtb	r2, r3
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db50:	0fdb      	lsrs	r3, r3, #31
 800db52:	b2da      	uxtb	r2, r3
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db5c:	0f5b      	lsrs	r3, r3, #29
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	f003 0303 	and.w	r3, r3, #3
 800db64:	b2da      	uxtb	r2, r3
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db6e:	0e9b      	lsrs	r3, r3, #26
 800db70:	b2db      	uxtb	r3, r3
 800db72:	f003 0307 	and.w	r3, r3, #7
 800db76:	b2da      	uxtb	r2, r3
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db80:	0d9b      	lsrs	r3, r3, #22
 800db82:	b2db      	uxtb	r3, r3
 800db84:	f003 030f 	and.w	r3, r3, #15
 800db88:	b2da      	uxtb	r2, r3
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db92:	0d5b      	lsrs	r3, r3, #21
 800db94:	b2db      	uxtb	r3, r3
 800db96:	f003 0301 	and.w	r3, r3, #1
 800db9a:	b2da      	uxtb	r2, r3
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	2200      	movs	r2, #0
 800dba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbae:	0c1b      	lsrs	r3, r3, #16
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	f003 0301 	and.w	r3, r3, #1
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbc2:	0bdb      	lsrs	r3, r3, #15
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	f003 0301 	and.w	r3, r3, #1
 800dbca:	b2da      	uxtb	r2, r3
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbd6:	0b9b      	lsrs	r3, r3, #14
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	f003 0301 	and.w	r3, r3, #1
 800dbde:	b2da      	uxtb	r2, r3
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbea:	0b5b      	lsrs	r3, r3, #13
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	b2da      	uxtb	r2, r3
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbfe:	0b1b      	lsrs	r3, r3, #12
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	f003 0301 	and.w	r3, r3, #1
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc12:	0a9b      	lsrs	r3, r3, #10
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	f003 0303 	and.w	r3, r3, #3
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc26:	0a1b      	lsrs	r3, r3, #8
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	f003 0303 	and.w	r3, r3, #3
 800dc2e:	b2da      	uxtb	r2, r3
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc3a:	085b      	lsrs	r3, r3, #1
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc42:	b2da      	uxtb	r2, r3
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr
 800dc60:	1fe00fff 	.word	0x1fe00fff

0800dc64 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b094      	sub	sp, #80	; 0x50
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dc74:	f107 0308 	add.w	r3, r7, #8
 800dc78:	4619      	mov	r1, r3
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 fb64 	bl	800e348 <SD_SendSDStatus>
 800dc80:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d011      	beq.n	800dcac <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a4f      	ldr	r2, [pc, #316]	; (800ddcc <HAL_SD_GetCardStatus+0x168>)
 800dc8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc96:	431a      	orrs	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dca4:	2301      	movs	r3, #1
 800dca6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dcaa:	e070      	b.n	800dd8e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	099b      	lsrs	r3, r3, #6
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	f003 0303 	and.w	r3, r3, #3
 800dcb6:	b2da      	uxtb	r2, r3
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	095b      	lsrs	r3, r3, #5
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	f003 0301 	and.w	r3, r3, #1
 800dcc6:	b2da      	uxtb	r2, r3
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	0a1b      	lsrs	r3, r3, #8
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dcd6:	b29a      	uxth	r2, r3
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	0e1b      	lsrs	r3, r3, #24
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	4313      	orrs	r3, r2
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	061a      	lsls	r2, r3, #24
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	021b      	lsls	r3, r3, #8
 800dcee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dcf2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	0a1b      	lsrs	r3, r3, #8
 800dcf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dcfc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	0e1b      	lsrs	r3, r3, #24
 800dd02:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	b2da      	uxtb	r2, r3
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	0a1b      	lsrs	r3, r3, #8
 800dd14:	b2da      	uxtb	r2, r3
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	0d1b      	lsrs	r3, r3, #20
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	f003 030f 	and.w	r3, r3, #15
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	0c1b      	lsrs	r3, r3, #16
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd34:	b29a      	uxth	r2, r3
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	0a9b      	lsrs	r3, r3, #10
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd50:	b2da      	uxtb	r2, r3
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	0a1b      	lsrs	r3, r3, #8
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	f003 0303 	and.w	r3, r3, #3
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	091b      	lsrs	r3, r3, #4
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	f003 030f 	and.w	r3, r3, #15
 800dd70:	b2da      	uxtb	r2, r3
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	f003 030f 	and.w	r3, r3, #15
 800dd7e:	b2da      	uxtb	r2, r3
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dd84:	69bb      	ldr	r3, [r7, #24]
 800dd86:	0e1b      	lsrs	r3, r3, #24
 800dd88:	b2da      	uxtb	r2, r3
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd96:	4618      	mov	r0, r3
 800dd98:	f003 f9f8 	bl	801118c <SDMMC_CmdBlockLength>
 800dd9c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d00d      	beq.n	800ddc0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a08      	ldr	r2, [pc, #32]	; (800ddcc <HAL_SD_GetCardStatus+0x168>)
 800ddaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddb0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800ddc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3750      	adds	r7, #80	; 0x50
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	1fe00fff 	.word	0x1fe00fff

0800ddd0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800de1a:	2300      	movs	r3, #0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800de28:	b5b0      	push	{r4, r5, r7, lr}
 800de2a:	b08e      	sub	sp, #56	; 0x38
 800de2c:	af04      	add	r7, sp, #16
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800de32:	2300      	movs	r3, #0
 800de34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2203      	movs	r2, #3
 800de3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de44:	2b03      	cmp	r3, #3
 800de46:	d02e      	beq.n	800dea6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de4e:	d106      	bne.n	800de5e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	639a      	str	r2, [r3, #56]	; 0x38
 800de5c:	e029      	b.n	800deb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de64:	d10a      	bne.n	800de7c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fb66 	bl	800e538 <SD_WideBus_Enable>
 800de6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de72:	6a3b      	ldr	r3, [r7, #32]
 800de74:	431a      	orrs	r2, r3
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	639a      	str	r2, [r3, #56]	; 0x38
 800de7a:	e01a      	b.n	800deb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d10a      	bne.n	800de98 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 fba3 	bl	800e5ce <SD_WideBus_Disable>
 800de88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de8e:	6a3b      	ldr	r3, [r7, #32]
 800de90:	431a      	orrs	r2, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	639a      	str	r2, [r3, #56]	; 0x38
 800de96:	e00c      	b.n	800deb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	639a      	str	r2, [r3, #56]	; 0x38
 800dea4:	e005      	b.n	800deb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deaa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d007      	beq.n	800deca <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	4a2e      	ldr	r2, [pc, #184]	; (800df78 <HAL_SD_ConfigWideBusOperation+0x150>)
 800dec0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dec2:	2301      	movs	r3, #1
 800dec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dec8:	e034      	b.n	800df34 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	689b      	ldr	r3, [r3, #8]
 800ded4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	691b      	ldr	r3, [r3, #16]
 800dede:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	695b      	ldr	r3, [r3, #20]
 800dee4:	2b03      	cmp	r3, #3
 800dee6:	d903      	bls.n	800def0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	695b      	ldr	r3, [r3, #20]
 800deec:	61bb      	str	r3, [r7, #24]
 800deee:	e012      	b.n	800df16 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800def4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800def8:	d103      	bne.n	800df02 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	695b      	ldr	r3, [r3, #20]
 800defe:	61bb      	str	r3, [r7, #24]
 800df00:	e009      	b.n	800df16 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df0a:	d102      	bne.n	800df12 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800df0c:	2302      	movs	r3, #2
 800df0e:	61bb      	str	r3, [r7, #24]
 800df10:	e001      	b.n	800df16 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800df12:	2304      	movs	r3, #4
 800df14:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681d      	ldr	r5, [r3, #0]
 800df1a:	466c      	mov	r4, sp
 800df1c:	f107 0314 	add.w	r3, r7, #20
 800df20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df28:	f107 0308 	add.w	r3, r7, #8
 800df2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df2e:	4628      	mov	r0, r5
 800df30:	f003 f84e 	bl	8010fd0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df3c:	4618      	mov	r0, r3
 800df3e:	f003 f925 	bl	801118c <SDMMC_CmdBlockLength>
 800df42:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df44:	6a3b      	ldr	r3, [r7, #32]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d00c      	beq.n	800df64 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	4a0a      	ldr	r2, [pc, #40]	; (800df78 <HAL_SD_ConfigWideBusOperation+0x150>)
 800df50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df56:	6a3b      	ldr	r3, [r7, #32]
 800df58:	431a      	orrs	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800df5e:	2301      	movs	r3, #1
 800df60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2201      	movs	r2, #1
 800df68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800df6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800df70:	4618      	mov	r0, r3
 800df72:	3728      	adds	r7, #40	; 0x28
 800df74:	46bd      	mov	sp, r7
 800df76:	bdb0      	pop	{r4, r5, r7, pc}
 800df78:	1fe00fff 	.word	0x1fe00fff

0800df7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b086      	sub	sp, #24
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800df84:	2300      	movs	r3, #0
 800df86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800df88:	f107 030c 	add.w	r3, r7, #12
 800df8c:	4619      	mov	r1, r3
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 faaa 	bl	800e4e8 <SD_SendStatus>
 800df94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d005      	beq.n	800dfa8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	431a      	orrs	r2, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	0a5b      	lsrs	r3, r3, #9
 800dfac:	f003 030f 	and.w	r3, r3, #15
 800dfb0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dfb2:	693b      	ldr	r3, [r7, #16]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3718      	adds	r7, #24
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dfbc:	b590      	push	{r4, r7, lr}
 800dfbe:	b091      	sub	sp, #68	; 0x44
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f003 f858 	bl	8011082 <SDMMC_GetPowerState>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d102      	bne.n	800dfde <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dfd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dfdc:	e0a8      	b.n	800e130 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfe2:	2b03      	cmp	r3, #3
 800dfe4:	d02e      	beq.n	800e044 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	4618      	mov	r0, r3
 800dfec:	f003 faa4 	bl	8011538 <SDMMC_CmdSendCID>
 800dff0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d001      	beq.n	800dffc <SD_InitCard+0x40>
    {
      return errorstate;
 800dff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dffa:	e099      	b.n	800e130 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2100      	movs	r1, #0
 800e002:	4618      	mov	r0, r3
 800e004:	f003 f883 	bl	801110e <SDMMC_GetResponse>
 800e008:	4602      	mov	r2, r0
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2104      	movs	r1, #4
 800e014:	4618      	mov	r0, r3
 800e016:	f003 f87a 	bl	801110e <SDMMC_GetResponse>
 800e01a:	4602      	mov	r2, r0
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2108      	movs	r1, #8
 800e026:	4618      	mov	r0, r3
 800e028:	f003 f871 	bl	801110e <SDMMC_GetResponse>
 800e02c:	4602      	mov	r2, r0
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	210c      	movs	r1, #12
 800e038:	4618      	mov	r0, r3
 800e03a:	f003 f868 	bl	801110e <SDMMC_GetResponse>
 800e03e:	4602      	mov	r2, r0
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e048:	2b03      	cmp	r3, #3
 800e04a:	d00d      	beq.n	800e068 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f107 020e 	add.w	r2, r7, #14
 800e054:	4611      	mov	r1, r2
 800e056:	4618      	mov	r0, r3
 800e058:	f003 faad 	bl	80115b6 <SDMMC_CmdSetRelAdd>
 800e05c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e060:	2b00      	cmp	r3, #0
 800e062:	d001      	beq.n	800e068 <SD_InitCard+0xac>
    {
      return errorstate;
 800e064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e066:	e063      	b.n	800e130 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e06c:	2b03      	cmp	r3, #3
 800e06e:	d036      	beq.n	800e0de <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e070:	89fb      	ldrh	r3, [r7, #14]
 800e072:	461a      	mov	r2, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e080:	041b      	lsls	r3, r3, #16
 800e082:	4619      	mov	r1, r3
 800e084:	4610      	mov	r0, r2
 800e086:	f003 fa76 	bl	8011576 <SDMMC_CmdSendCSD>
 800e08a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d001      	beq.n	800e096 <SD_InitCard+0xda>
    {
      return errorstate;
 800e092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e094:	e04c      	b.n	800e130 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2100      	movs	r1, #0
 800e09c:	4618      	mov	r0, r3
 800e09e:	f003 f836 	bl	801110e <SDMMC_GetResponse>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2104      	movs	r1, #4
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f003 f82d 	bl	801110e <SDMMC_GetResponse>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2108      	movs	r1, #8
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f003 f824 	bl	801110e <SDMMC_GetResponse>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	210c      	movs	r1, #12
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f003 f81b 	bl	801110e <SDMMC_GetResponse>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	2104      	movs	r1, #4
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f003 f812 	bl	801110e <SDMMC_GetResponse>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	0d1a      	lsrs	r2, r3, #20
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e0f2:	f107 0310 	add.w	r3, r7, #16
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7ff fc0f 	bl	800d91c <HAL_SD_GetCardCSD>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d002      	beq.n	800e10a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e104:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e108:	e012      	b.n	800e130 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6819      	ldr	r1, [r3, #0]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e112:	041b      	lsls	r3, r3, #16
 800e114:	f04f 0400 	mov.w	r4, #0
 800e118:	461a      	mov	r2, r3
 800e11a:	4623      	mov	r3, r4
 800e11c:	4608      	mov	r0, r1
 800e11e:	f003 f921 	bl	8011364 <SDMMC_CmdSelDesel>
 800e122:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e126:	2b00      	cmp	r3, #0
 800e128:	d001      	beq.n	800e12e <SD_InitCard+0x172>
  {
    return errorstate;
 800e12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e12c:	e000      	b.n	800e130 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e12e:	2300      	movs	r3, #0
}
 800e130:	4618      	mov	r0, r3
 800e132:	3744      	adds	r7, #68	; 0x44
 800e134:	46bd      	mov	sp, r7
 800e136:	bd90      	pop	{r4, r7, pc}

0800e138 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b088      	sub	sp, #32
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e140:	2300      	movs	r3, #0
 800e142:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800e144:	2300      	movs	r3, #0
 800e146:	61fb      	str	r3, [r7, #28]
 800e148:	2300      	movs	r3, #0
 800e14a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800e14c:	f7f6 fa2c 	bl	80045a8 <HAL_GetTick>
 800e150:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4618      	mov	r0, r3
 800e158:	f003 f928 	bl	80113ac <SDMMC_CmdGoIdleState>
 800e15c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d001      	beq.n	800e168 <SD_PowerON+0x30>
  {
    return errorstate;
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	e0e9      	b.n	800e33c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4618      	mov	r0, r3
 800e16e:	f003 f93b 	bl	80113e8 <SDMMC_CmdOperCond>
 800e172:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d00d      	beq.n	800e196 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2200      	movs	r2, #0
 800e17e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4618      	mov	r0, r3
 800e186:	f003 f911 	bl	80113ac <SDMMC_CmdGoIdleState>
 800e18a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d004      	beq.n	800e19c <SD_PowerON+0x64>
    {
      return errorstate;
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	e0d2      	b.n	800e33c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2201      	movs	r2, #1
 800e19a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d137      	bne.n	800e214 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f003 f93c 	bl	8011428 <SDMMC_CmdAppCommand>
 800e1b0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d02d      	beq.n	800e214 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1bc:	e0be      	b.n	800e33c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	2100      	movs	r1, #0
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f003 f92f 	bl	8011428 <SDMMC_CmdAppCommand>
 800e1ca:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d001      	beq.n	800e1d6 <SD_PowerON+0x9e>
    {
      return errorstate;
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	e0b2      	b.n	800e33c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	495a      	ldr	r1, [pc, #360]	; (800e344 <SD_PowerON+0x20c>)
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f003 f946 	bl	801146e <SDMMC_CmdAppOperCommand>
 800e1e2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d002      	beq.n	800e1f0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1ee:	e0a5      	b.n	800e33c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f002 ff89 	bl	801110e <SDMMC_GetResponse>
 800e1fc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	0fdb      	lsrs	r3, r3, #31
 800e202:	2b01      	cmp	r3, #1
 800e204:	d101      	bne.n	800e20a <SD_PowerON+0xd2>
 800e206:	2301      	movs	r3, #1
 800e208:	e000      	b.n	800e20c <SD_PowerON+0xd4>
 800e20a:	2300      	movs	r3, #0
 800e20c:	61bb      	str	r3, [r7, #24]

    count++;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	3301      	adds	r3, #1
 800e212:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d802      	bhi.n	800e224 <SD_PowerON+0xec>
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d0cc      	beq.n	800e1be <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d902      	bls.n	800e234 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e22e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e232:	e083      	b.n	800e33c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e234:	69fb      	ldr	r3, [r7, #28]
 800e236:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d07d      	beq.n	800e33a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2201      	movs	r2, #1
 800e242:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	699b      	ldr	r3, [r3, #24]
 800e248:	2b02      	cmp	r3, #2
 800e24a:	d176      	bne.n	800e33a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e252:	2b00      	cmp	r3, #0
 800e254:	d071      	beq.n	800e33a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e25c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f042 0208 	orr.w	r2, r2, #8
 800e26c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4618      	mov	r0, r3
 800e274:	f003 fa06 	bl	8011684 <SDMMC_CmdVoltageSwitch>
 800e278:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d00c      	beq.n	800e29a <SD_PowerON+0x162>
        {
          return errorstate;
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	e05b      	b.n	800e33c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e284:	f7f6 f990 	bl	80045a8 <HAL_GetTick>
 800e288:	4602      	mov	r2, r0
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	1ad3      	subs	r3, r2, r3
 800e28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e292:	d102      	bne.n	800e29a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800e294:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e298:	e050      	b.n	800e33c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e2a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e2a8:	d1ec      	bne.n	800e284 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e2b2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e2be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2c2:	d002      	beq.n	800e2ca <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800e2c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e2c8:	e038      	b.n	800e33c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800e2ca:	2001      	movs	r0, #1
 800e2cc:	f7ff fb1a 	bl	800d904 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f042 0204 	orr.w	r2, r2, #4
 800e2de:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e2e0:	e00a      	b.n	800e2f8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2e2:	f7f6 f961 	bl	80045a8 <HAL_GetTick>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f0:	d102      	bne.n	800e2f8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800e2f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2f6:	e021      	b.n	800e33c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e306:	d1ec      	bne.n	800e2e2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e310:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e31c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e320:	d102      	bne.n	800e328 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e322:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e326:	e009      	b.n	800e33c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2213      	movs	r2, #19
 800e32e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f04f 32ff 	mov.w	r2, #4294967295
 800e338:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e33a:	2300      	movs	r3, #0
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3720      	adds	r7, #32
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	c1100000 	.word	0xc1100000

0800e348 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b08c      	sub	sp, #48	; 0x30
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e352:	f7f6 f929 	bl	80045a8 <HAL_GetTick>
 800e356:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2100      	movs	r1, #0
 800e362:	4618      	mov	r0, r3
 800e364:	f002 fed3 	bl	801110e <SDMMC_GetResponse>
 800e368:	4603      	mov	r3, r0
 800e36a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e36e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e372:	d102      	bne.n	800e37a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e378:	e0b0      	b.n	800e4dc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2140      	movs	r1, #64	; 0x40
 800e380:	4618      	mov	r0, r3
 800e382:	f002 ff03 	bl	801118c <SDMMC_CmdBlockLength>
 800e386:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e388:	6a3b      	ldr	r3, [r7, #32]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d005      	beq.n	800e39a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e396:	6a3b      	ldr	r3, [r7, #32]
 800e398:	e0a0      	b.n	800e4dc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3a2:	041b      	lsls	r3, r3, #16
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	4610      	mov	r0, r2
 800e3a8:	f003 f83e 	bl	8011428 <SDMMC_CmdAppCommand>
 800e3ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3ae:	6a3b      	ldr	r3, [r7, #32]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d005      	beq.n	800e3c0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e3bc:	6a3b      	ldr	r3, [r7, #32]
 800e3be:	e08d      	b.n	800e4dc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e3c6:	2340      	movs	r3, #64	; 0x40
 800e3c8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e3ca:	2360      	movs	r3, #96	; 0x60
 800e3cc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e3ce:	2302      	movs	r3, #2
 800e3d0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f107 0208 	add.w	r2, r7, #8
 800e3e2:	4611      	mov	r1, r2
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f002 fea5 	bl	8011134 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f003 f926 	bl	8011640 <SDMMC_CmdStatusRegister>
 800e3f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3f6:	6a3b      	ldr	r3, [r7, #32]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d02b      	beq.n	800e454 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e404:	6a3b      	ldr	r3, [r7, #32]
 800e406:	e069      	b.n	800e4dc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e40e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e412:	2b00      	cmp	r3, #0
 800e414:	d013      	beq.n	800e43e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800e416:	2300      	movs	r3, #0
 800e418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e41a:	e00d      	b.n	800e438 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4618      	mov	r0, r3
 800e422:	f002 fdff 	bl	8011024 <SDMMC_ReadFIFO>
 800e426:	4602      	mov	r2, r0
 800e428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42a:	601a      	str	r2, [r3, #0]
        pData++;
 800e42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42e:	3304      	adds	r3, #4
 800e430:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800e432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e434:	3301      	adds	r3, #1
 800e436:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43a:	2b07      	cmp	r3, #7
 800e43c:	d9ee      	bls.n	800e41c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e43e:	f7f6 f8b3 	bl	80045a8 <HAL_GetTick>
 800e442:	4602      	mov	r2, r0
 800e444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e446:	1ad3      	subs	r3, r2, r3
 800e448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e44c:	d102      	bne.n	800e454 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e44e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e452:	e043      	b.n	800e4dc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e45a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d0d2      	beq.n	800e408 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e468:	f003 0308 	and.w	r3, r3, #8
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e470:	2308      	movs	r3, #8
 800e472:	e033      	b.n	800e4dc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e47a:	f003 0302 	and.w	r3, r3, #2
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d001      	beq.n	800e486 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e482:	2302      	movs	r3, #2
 800e484:	e02a      	b.n	800e4dc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e48c:	f003 0320 	and.w	r3, r3, #32
 800e490:	2b00      	cmp	r3, #0
 800e492:	d017      	beq.n	800e4c4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e494:	2320      	movs	r3, #32
 800e496:	e021      	b.n	800e4dc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4618      	mov	r0, r3
 800e49e:	f002 fdc1 	bl	8011024 <SDMMC_ReadFIFO>
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a6:	601a      	str	r2, [r3, #0]
    pData++;
 800e4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4aa:	3304      	adds	r3, #4
 800e4ac:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4ae:	f7f6 f87b 	bl	80045a8 <HAL_GetTick>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b6:	1ad3      	subs	r3, r2, r3
 800e4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4bc:	d102      	bne.n	800e4c4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e4be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4c2:	e00b      	b.n	800e4dc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1e2      	bne.n	800e498 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4a03      	ldr	r2, [pc, #12]	; (800e4e4 <SD_SendSDStatus+0x19c>)
 800e4d8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e4da:	2300      	movs	r3, #0
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3730      	adds	r7, #48	; 0x30
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	18000f3a 	.word	0x18000f3a

0800e4e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d102      	bne.n	800e4fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e4f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e4fc:	e018      	b.n	800e530 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681a      	ldr	r2, [r3, #0]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e506:	041b      	lsls	r3, r3, #16
 800e508:	4619      	mov	r1, r3
 800e50a:	4610      	mov	r0, r2
 800e50c:	f003 f875 	bl	80115fa <SDMMC_CmdSendStatus>
 800e510:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d001      	beq.n	800e51c <SD_SendStatus+0x34>
  {
    return errorstate;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	e009      	b.n	800e530 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2100      	movs	r1, #0
 800e522:	4618      	mov	r0, r3
 800e524:	f002 fdf3 	bl	801110e <SDMMC_GetResponse>
 800e528:	4602      	mov	r2, r0
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e52e:	2300      	movs	r3, #0
}
 800e530:	4618      	mov	r0, r3
 800e532:	3710      	adds	r7, #16
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b086      	sub	sp, #24
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e540:	2300      	movs	r3, #0
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	2300      	movs	r3, #0
 800e546:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2100      	movs	r1, #0
 800e54e:	4618      	mov	r0, r3
 800e550:	f002 fddd 	bl	801110e <SDMMC_GetResponse>
 800e554:	4603      	mov	r3, r0
 800e556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e55a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e55e:	d102      	bne.n	800e566 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e564:	e02f      	b.n	800e5c6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e566:	f107 030c 	add.w	r3, r7, #12
 800e56a:	4619      	mov	r1, r3
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 f879 	bl	800e664 <SD_FindSCR>
 800e572:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d001      	beq.n	800e57e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	e023      	b.n	800e5c6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e584:	2b00      	cmp	r3, #0
 800e586:	d01c      	beq.n	800e5c2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e590:	041b      	lsls	r3, r3, #16
 800e592:	4619      	mov	r1, r3
 800e594:	4610      	mov	r0, r2
 800e596:	f002 ff47 	bl	8011428 <SDMMC_CmdAppCommand>
 800e59a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d001      	beq.n	800e5a6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	e00f      	b.n	800e5c6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	2102      	movs	r1, #2
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f002 ff7e 	bl	80114ae <SDMMC_CmdBusWidth>
 800e5b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	e003      	b.n	800e5c6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	e001      	b.n	800e5c6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3718      	adds	r7, #24
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}

0800e5ce <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b086      	sub	sp, #24
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	60fb      	str	r3, [r7, #12]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f002 fd92 	bl	801110e <SDMMC_GetResponse>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e5f4:	d102      	bne.n	800e5fc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e5f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5fa:	e02f      	b.n	800e65c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e5fc:	f107 030c 	add.w	r3, r7, #12
 800e600:	4619      	mov	r1, r3
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 f82e 	bl	800e664 <SD_FindSCR>
 800e608:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d001      	beq.n	800e614 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	e023      	b.n	800e65c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d01c      	beq.n	800e658 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681a      	ldr	r2, [r3, #0]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e626:	041b      	lsls	r3, r3, #16
 800e628:	4619      	mov	r1, r3
 800e62a:	4610      	mov	r0, r2
 800e62c:	f002 fefc 	bl	8011428 <SDMMC_CmdAppCommand>
 800e630:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d001      	beq.n	800e63c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	e00f      	b.n	800e65c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2100      	movs	r1, #0
 800e642:	4618      	mov	r0, r3
 800e644:	f002 ff33 	bl	80114ae <SDMMC_CmdBusWidth>
 800e648:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d001      	beq.n	800e654 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	e003      	b.n	800e65c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e654:	2300      	movs	r3, #0
 800e656:	e001      	b.n	800e65c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e658:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3718      	adds	r7, #24
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b08e      	sub	sp, #56	; 0x38
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e66e:	f7f5 ff9b 	bl	80045a8 <HAL_GetTick>
 800e672:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e674:	2300      	movs	r3, #0
 800e676:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e678:	2300      	movs	r3, #0
 800e67a:	60bb      	str	r3, [r7, #8]
 800e67c:	2300      	movs	r3, #0
 800e67e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2108      	movs	r1, #8
 800e68a:	4618      	mov	r0, r3
 800e68c:	f002 fd7e 	bl	801118c <SDMMC_CmdBlockLength>
 800e690:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e694:	2b00      	cmp	r3, #0
 800e696:	d001      	beq.n	800e69c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69a:	e0ad      	b.n	800e7f8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6a4:	041b      	lsls	r3, r3, #16
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	4610      	mov	r0, r2
 800e6aa:	f002 febd 	bl	8011428 <SDMMC_CmdAppCommand>
 800e6ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d001      	beq.n	800e6ba <SD_FindSCR+0x56>
  {
    return errorstate;
 800e6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b8:	e09e      	b.n	800e7f8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e6be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e6c0:	2308      	movs	r3, #8
 800e6c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e6c4:	2330      	movs	r3, #48	; 0x30
 800e6c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e6c8:	2302      	movs	r3, #2
 800e6ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f107 0210 	add.w	r2, r7, #16
 800e6dc:	4611      	mov	r1, r2
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f002 fd28 	bl	8011134 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f002 ff03 	bl	80114f4 <SDMMC_CmdSendSCR>
 800e6ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d027      	beq.n	800e746 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f8:	e07e      	b.n	800e7f8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e704:	2b00      	cmp	r3, #0
 800e706:	d113      	bne.n	800e730 <SD_FindSCR+0xcc>
 800e708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d110      	bne.n	800e730 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4618      	mov	r0, r3
 800e714:	f002 fc86 	bl	8011024 <SDMMC_ReadFIFO>
 800e718:	4603      	mov	r3, r0
 800e71a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	4618      	mov	r0, r3
 800e722:	f002 fc7f 	bl	8011024 <SDMMC_ReadFIFO>
 800e726:	4603      	mov	r3, r0
 800e728:	60fb      	str	r3, [r7, #12]
      index++;
 800e72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e72c:	3301      	adds	r3, #1
 800e72e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e730:	f7f5 ff3a 	bl	80045a8 <HAL_GetTick>
 800e734:	4602      	mov	r2, r0
 800e736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e738:	1ad3      	subs	r3, r2, r3
 800e73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e73e:	d102      	bne.n	800e746 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e740:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e744:	e058      	b.n	800e7f8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e74c:	f240 532a 	movw	r3, #1322	; 0x52a
 800e750:	4013      	ands	r3, r2
 800e752:	2b00      	cmp	r3, #0
 800e754:	d0d1      	beq.n	800e6fa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e75c:	f003 0308 	and.w	r3, r3, #8
 800e760:	2b00      	cmp	r3, #0
 800e762:	d005      	beq.n	800e770 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	2208      	movs	r2, #8
 800e76a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e76c:	2308      	movs	r3, #8
 800e76e:	e043      	b.n	800e7f8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e776:	f003 0302 	and.w	r3, r3, #2
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d005      	beq.n	800e78a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2202      	movs	r2, #2
 800e784:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e786:	2302      	movs	r3, #2
 800e788:	e036      	b.n	800e7f8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e790:	f003 0320 	and.w	r3, r3, #32
 800e794:	2b00      	cmp	r3, #0
 800e796:	d005      	beq.n	800e7a4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2220      	movs	r2, #32
 800e79e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e7a0:	2320      	movs	r3, #32
 800e7a2:	e029      	b.n	800e7f8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a15      	ldr	r2, [pc, #84]	; (800e800 <SD_FindSCR+0x19c>)
 800e7aa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	061a      	lsls	r2, r3, #24
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	021b      	lsls	r3, r3, #8
 800e7b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7b8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	0a1b      	lsrs	r3, r3, #8
 800e7be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	0e1b      	lsrs	r3, r3, #24
 800e7c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7cc:	601a      	str	r2, [r3, #0]
    scr++;
 800e7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d0:	3304      	adds	r3, #4
 800e7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	061a      	lsls	r2, r3, #24
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	021b      	lsls	r3, r3, #8
 800e7dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7e0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	0a1b      	lsrs	r3, r3, #8
 800e7e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e7ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	0e1b      	lsrs	r3, r3, #24
 800e7f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e7f6:	2300      	movs	r3, #0
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3738      	adds	r7, #56	; 0x38
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	18000f3a 	.word	0x18000f3a

0800e804 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b086      	sub	sp, #24
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e810:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e816:	2b1f      	cmp	r3, #31
 800e818:	d936      	bls.n	800e888 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e81a:	2300      	movs	r3, #0
 800e81c:	617b      	str	r3, [r7, #20]
 800e81e:	e027      	b.n	800e870 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4618      	mov	r0, r3
 800e826:	f002 fbfd 	bl	8011024 <SDMMC_ReadFIFO>
 800e82a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	b2da      	uxtb	r2, r3
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	3301      	adds	r3, #1
 800e838:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	0a1b      	lsrs	r3, r3, #8
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	3301      	adds	r3, #1
 800e848:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	0c1b      	lsrs	r3, r3, #16
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	3301      	adds	r3, #1
 800e858:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	0e1b      	lsrs	r3, r3, #24
 800e85e:	b2da      	uxtb	r2, r3
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	3301      	adds	r3, #1
 800e868:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	3301      	adds	r3, #1
 800e86e:	617b      	str	r3, [r7, #20]
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	2b07      	cmp	r3, #7
 800e874:	d9d4      	bls.n	800e820 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	693a      	ldr	r2, [r7, #16]
 800e87a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e880:	f1a3 0220 	sub.w	r2, r3, #32
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e888:	bf00      	nop
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b086      	sub	sp, #24
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6a1b      	ldr	r3, [r3, #32]
 800e89c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a2:	2b1f      	cmp	r3, #31
 800e8a4:	d93a      	bls.n	800e91c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	617b      	str	r3, [r7, #20]
 800e8aa:	e02b      	b.n	800e904 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	021a      	lsls	r2, r3, #8
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	041a      	lsls	r2, r3, #16
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	061a      	lsls	r2, r3, #24
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f107 020c 	add.w	r2, r7, #12
 800e8f6:	4611      	mov	r1, r2
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f002 fba0 	bl	801103e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	3301      	adds	r3, #1
 800e902:	617b      	str	r3, [r7, #20]
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	2b07      	cmp	r3, #7
 800e908:	d9d0      	bls.n	800e8ac <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	693a      	ldr	r2, [r7, #16]
 800e90e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e914:	f1a3 0220 	sub.w	r2, r3, #32
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e91c:	bf00      	nop
 800e91e:	3718      	adds	r7, #24
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e92c:	bf00      	nop
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e940:	bf00      	nop
 800e942:	370c      	adds	r7, #12
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr

0800e94c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e954:	bf00      	nop
 800e956:	370c      	adds	r7, #12
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e960:	b480      	push	{r7}
 800e962:	b083      	sub	sp, #12
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e968:	bf00      	nop
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800e97c:	2300      	movs	r3, #0
 800e97e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d101      	bne.n	800e98a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800e986:	2301      	movs	r3, #1
 800e988:	e0e2      	b.n	800eb50 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2200      	movs	r2, #0
 800e98e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a70      	ldr	r2, [pc, #448]	; (800eb58 <HAL_SPI_Init+0x1e4>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d00f      	beq.n	800e9ba <HAL_SPI_Init+0x46>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	4a6f      	ldr	r2, [pc, #444]	; (800eb5c <HAL_SPI_Init+0x1e8>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d00a      	beq.n	800e9ba <HAL_SPI_Init+0x46>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a6d      	ldr	r2, [pc, #436]	; (800eb60 <HAL_SPI_Init+0x1ec>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d005      	beq.n	800e9ba <HAL_SPI_Init+0x46>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	68db      	ldr	r3, [r3, #12]
 800e9b2:	2b0f      	cmp	r3, #15
 800e9b4:	d901      	bls.n	800e9ba <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	e0ca      	b.n	800eb50 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f001 f870 	bl	800faa0 <SPI_GetPacketSize>
 800e9c0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4a64      	ldr	r2, [pc, #400]	; (800eb58 <HAL_SPI_Init+0x1e4>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d00c      	beq.n	800e9e6 <HAL_SPI_Init+0x72>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a62      	ldr	r2, [pc, #392]	; (800eb5c <HAL_SPI_Init+0x1e8>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d007      	beq.n	800e9e6 <HAL_SPI_Init+0x72>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a61      	ldr	r2, [pc, #388]	; (800eb60 <HAL_SPI_Init+0x1ec>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d002      	beq.n	800e9e6 <HAL_SPI_Init+0x72>
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	2b08      	cmp	r3, #8
 800e9e4:	d811      	bhi.n	800ea0a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e9ea:	4a5b      	ldr	r2, [pc, #364]	; (800eb58 <HAL_SPI_Init+0x1e4>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d009      	beq.n	800ea04 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a59      	ldr	r2, [pc, #356]	; (800eb5c <HAL_SPI_Init+0x1e8>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d004      	beq.n	800ea04 <HAL_SPI_Init+0x90>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a58      	ldr	r2, [pc, #352]	; (800eb60 <HAL_SPI_Init+0x1ec>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d104      	bne.n	800ea0e <HAL_SPI_Init+0x9a>
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	2b10      	cmp	r3, #16
 800ea08:	d901      	bls.n	800ea0e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e0a0      	b.n	800eb50 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d106      	bne.n	800ea28 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7f5 fa92 	bl	8003f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2202      	movs	r2, #2
 800ea2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f022 0201 	bic.w	r2, r2, #1
 800ea3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	699b      	ldr	r3, [r3, #24]
 800ea44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ea48:	d110      	bne.n	800ea6c <HAL_SPI_Init+0xf8>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea52:	d10b      	bne.n	800ea6c <HAL_SPI_Init+0xf8>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d107      	bne.n	800ea6c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	681a      	ldr	r2, [r3, #0]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ea6a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	69da      	ldr	r2, [r3, #28]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea74:	431a      	orrs	r2, r3
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	431a      	orrs	r2, r3
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea7e:	ea42 0103 	orr.w	r1, r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	68da      	ldr	r2, [r3, #12]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	430a      	orrs	r2, r1
 800ea8c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea96:	431a      	orrs	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea9c:	431a      	orrs	r2, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	699b      	ldr	r3, [r3, #24]
 800eaa2:	431a      	orrs	r2, r3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	431a      	orrs	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	695b      	ldr	r3, [r3, #20]
 800eaae:	431a      	orrs	r2, r3
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6a1b      	ldr	r3, [r3, #32]
 800eab4:	431a      	orrs	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	431a      	orrs	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eac0:	431a      	orrs	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	689b      	ldr	r3, [r3, #8]
 800eac6:	431a      	orrs	r2, r3
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eacc:	ea42 0103 	orr.w	r1, r2, r3
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	430a      	orrs	r2, r1
 800eada:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d113      	bne.n	800eb0c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eaf6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	689b      	ldr	r3, [r3, #8]
 800eafe:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eb0a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f022 0201 	bic.w	r2, r2, #1
 800eb1a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00a      	beq.n	800eb3e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	68db      	ldr	r3, [r3, #12]
 800eb2e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	430a      	orrs	r2, r1
 800eb3c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	40013000 	.word	0x40013000
 800eb5c:	40003800 	.word	0x40003800
 800eb60:	40003c00 	.word	0x40003c00

0800eb64 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b08a      	sub	sp, #40	; 0x28
 800eb68:	af02      	add	r7, sp, #8
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	603b      	str	r3, [r7, #0]
 800eb70:	4613      	mov	r3, r2
 800eb72:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	3320      	adds	r3, #32
 800eb7a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	d101      	bne.n	800eb8e <HAL_SPI_Transmit+0x2a>
 800eb8a:	2302      	movs	r3, #2
 800eb8c:	e1d7      	b.n	800ef3e <HAL_SPI_Transmit+0x3da>
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2201      	movs	r2, #1
 800eb92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb96:	f7f5 fd07 	bl	80045a8 <HAL_GetTick>
 800eb9a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d007      	beq.n	800ebb8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800eba8:	2302      	movs	r3, #2
 800ebaa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ebb4:	7efb      	ldrb	r3, [r7, #27]
 800ebb6:	e1c2      	b.n	800ef3e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d002      	beq.n	800ebc4 <HAL_SPI_Transmit+0x60>
 800ebbe:	88fb      	ldrh	r3, [r7, #6]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d107      	bne.n	800ebd4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ebd0:	7efb      	ldrb	r3, [r7, #27]
 800ebd2:	e1b4      	b.n	800ef3e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2203      	movs	r2, #3
 800ebd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	68ba      	ldr	r2, [r7, #8]
 800ebe8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	88fa      	ldrh	r2, [r7, #6]
 800ebee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	88fa      	ldrh	r2, [r7, #6]
 800ebf6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2200      	movs	r2, #0
 800ec04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2200      	movs	r2, #0
 800ec14:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ec24:	d107      	bne.n	800ec36 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec34:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	685a      	ldr	r2, [r3, #4]
 800ec3c:	4b96      	ldr	r3, [pc, #600]	; (800ee98 <HAL_SPI_Transmit+0x334>)
 800ec3e:	4013      	ands	r3, r2
 800ec40:	88f9      	ldrh	r1, [r7, #6]
 800ec42:	68fa      	ldr	r2, [r7, #12]
 800ec44:	6812      	ldr	r2, [r2, #0]
 800ec46:	430b      	orrs	r3, r1
 800ec48:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f042 0201 	orr.w	r2, r2, #1
 800ec58:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec62:	d107      	bne.n	800ec74 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	68db      	ldr	r3, [r3, #12]
 800ec78:	2b0f      	cmp	r3, #15
 800ec7a:	d947      	bls.n	800ed0c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec7c:	e03f      	b.n	800ecfe <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	695b      	ldr	r3, [r3, #20]
 800ec84:	f003 0302 	and.w	r3, r3, #2
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d114      	bne.n	800ecb6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6812      	ldr	r2, [r2, #0]
 800ec96:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec9c:	1d1a      	adds	r2, r3, #4
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	3b01      	subs	r3, #1
 800ecac:	b29a      	uxth	r2, r3
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ecb4:	e023      	b.n	800ecfe <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ecb6:	f7f5 fc77 	bl	80045a8 <HAL_GetTick>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	1ad3      	subs	r3, r2, r3
 800ecc0:	683a      	ldr	r2, [r7, #0]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d803      	bhi.n	800ecce <HAL_SPI_Transmit+0x16a>
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eccc:	d102      	bne.n	800ecd4 <HAL_SPI_Transmit+0x170>
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d114      	bne.n	800ecfe <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	f000 fe15 	bl	800f904 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ece8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e11f      	b.n	800ef3e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1b9      	bne.n	800ec7e <HAL_SPI_Transmit+0x11a>
 800ed0a:	e0f2      	b.n	800eef2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	2b07      	cmp	r3, #7
 800ed12:	f240 80e7 	bls.w	800eee4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ed16:	e05d      	b.n	800edd4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	695b      	ldr	r3, [r3, #20]
 800ed1e:	f003 0302 	and.w	r3, r3, #2
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	d132      	bne.n	800ed8c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	2b01      	cmp	r3, #1
 800ed30:	d918      	bls.n	800ed64 <HAL_SPI_Transmit+0x200>
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d014      	beq.n	800ed64 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	6812      	ldr	r2, [r2, #0]
 800ed44:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed4a:	1d1a      	adds	r2, r3, #4
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	3b02      	subs	r3, #2
 800ed5a:	b29a      	uxth	r2, r3
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed62:	e037      	b.n	800edd4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed68:	881a      	ldrh	r2, [r3, #0]
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed72:	1c9a      	adds	r2, r3, #2
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	3b01      	subs	r3, #1
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed8a:	e023      	b.n	800edd4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed8c:	f7f5 fc0c 	bl	80045a8 <HAL_GetTick>
 800ed90:	4602      	mov	r2, r0
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	1ad3      	subs	r3, r2, r3
 800ed96:	683a      	ldr	r2, [r7, #0]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d803      	bhi.n	800eda4 <HAL_SPI_Transmit+0x240>
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda2:	d102      	bne.n	800edaa <HAL_SPI_Transmit+0x246>
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d114      	bne.n	800edd4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f000 fdaa 	bl	800f904 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800edd0:	2301      	movs	r3, #1
 800edd2:	e0b4      	b.n	800ef3e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edda:	b29b      	uxth	r3, r3
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d19b      	bne.n	800ed18 <HAL_SPI_Transmit+0x1b4>
 800ede0:	e087      	b.n	800eef2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	695b      	ldr	r3, [r3, #20]
 800ede8:	f003 0302 	and.w	r3, r3, #2
 800edec:	2b02      	cmp	r3, #2
 800edee:	d155      	bne.n	800ee9c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	2b03      	cmp	r3, #3
 800edfa:	d918      	bls.n	800ee2e <HAL_SPI_Transmit+0x2ca>
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee00:	2b40      	cmp	r3, #64	; 0x40
 800ee02:	d914      	bls.n	800ee2e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	6812      	ldr	r2, [r2, #0]
 800ee0e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee14:	1d1a      	adds	r2, r3, #4
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	3b04      	subs	r3, #4
 800ee24:	b29a      	uxth	r2, r3
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee2c:	e05a      	b.n	800eee4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	2b01      	cmp	r3, #1
 800ee38:	d917      	bls.n	800ee6a <HAL_SPI_Transmit+0x306>
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d013      	beq.n	800ee6a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee46:	881a      	ldrh	r2, [r3, #0]
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee50:	1c9a      	adds	r2, r3, #2
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	3b02      	subs	r3, #2
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee68:	e03c      	b.n	800eee4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	3320      	adds	r3, #32
 800ee74:	7812      	ldrb	r2, [r2, #0]
 800ee76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee7c:	1c5a      	adds	r2, r3, #1
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	b29a      	uxth	r2, r3
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee94:	e026      	b.n	800eee4 <HAL_SPI_Transmit+0x380>
 800ee96:	bf00      	nop
 800ee98:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee9c:	f7f5 fb84 	bl	80045a8 <HAL_GetTick>
 800eea0:	4602      	mov	r2, r0
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	1ad3      	subs	r3, r2, r3
 800eea6:	683a      	ldr	r2, [r7, #0]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d803      	bhi.n	800eeb4 <HAL_SPI_Transmit+0x350>
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeb2:	d102      	bne.n	800eeba <HAL_SPI_Transmit+0x356>
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d114      	bne.n	800eee4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f000 fd22 	bl	800f904 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eece:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2201      	movs	r2, #1
 800eedc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800eee0:	2301      	movs	r3, #1
 800eee2:	e02c      	b.n	800ef3e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	f47f af78 	bne.w	800ede2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	9300      	str	r3, [sp, #0]
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	2200      	movs	r2, #0
 800eefa:	2108      	movs	r1, #8
 800eefc:	68f8      	ldr	r0, [r7, #12]
 800eefe:	f000 fda1 	bl	800fa44 <SPI_WaitOnFlagUntilTimeout>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d007      	beq.n	800ef18 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef0e:	f043 0220 	orr.w	r2, r3, #32
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ef18:	68f8      	ldr	r0, [r7, #12]
 800ef1a:	f000 fcf3 	bl	800f904 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2200      	movs	r2, #0
 800ef22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2201      	movs	r2, #1
 800ef2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d001      	beq.n	800ef3c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	e000      	b.n	800ef3e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ef3c:	7efb      	ldrb	r3, [r7, #27]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3720      	adds	r7, #32
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop

0800ef48 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b08a      	sub	sp, #40	; 0x28
 800ef4c:	af02      	add	r7, sp, #8
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	603b      	str	r3, [r7, #0]
 800ef54:	4613      	mov	r3, r2
 800ef56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	3330      	adds	r3, #48	; 0x30
 800ef62:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef6c:	d112      	bne.n	800ef94 <HAL_SPI_Receive+0x4c>
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	689b      	ldr	r3, [r3, #8]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d10e      	bne.n	800ef94 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2204      	movs	r2, #4
 800ef7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ef7e:	88fa      	ldrh	r2, [r7, #6]
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	4613      	mov	r3, r2
 800ef86:	68ba      	ldr	r2, [r7, #8]
 800ef88:	68b9      	ldr	r1, [r7, #8]
 800ef8a:	68f8      	ldr	r0, [r7, #12]
 800ef8c:	f000 f9ce 	bl	800f32c <HAL_SPI_TransmitReceive>
 800ef90:	4603      	mov	r3, r0
 800ef92:	e1c7      	b.n	800f324 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d101      	bne.n	800efa2 <HAL_SPI_Receive+0x5a>
 800ef9e:	2302      	movs	r3, #2
 800efa0:	e1c0      	b.n	800f324 <HAL_SPI_Receive+0x3dc>
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2201      	movs	r2, #1
 800efa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800efaa:	f7f5 fafd 	bl	80045a8 <HAL_GetTick>
 800efae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d007      	beq.n	800efcc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800efbc:	2302      	movs	r3, #2
 800efbe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800efc8:	7ffb      	ldrb	r3, [r7, #31]
 800efca:	e1ab      	b.n	800f324 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d002      	beq.n	800efd8 <HAL_SPI_Receive+0x90>
 800efd2:	88fb      	ldrh	r3, [r7, #6]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d107      	bne.n	800efe8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800efd8:	2301      	movs	r3, #1
 800efda:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2200      	movs	r2, #0
 800efe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800efe4:	7ffb      	ldrb	r3, [r7, #31]
 800efe6:	e19d      	b.n	800f324 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2204      	movs	r2, #4
 800efec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2200      	movs	r2, #0
 800eff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	68ba      	ldr	r2, [r7, #8]
 800effc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	88fa      	ldrh	r2, [r7, #6]
 800f002:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	88fa      	ldrh	r2, [r7, #6]
 800f00a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2200      	movs	r2, #0
 800f012:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2200      	movs	r2, #0
 800f018:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2200      	movs	r2, #0
 800f020:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2200      	movs	r2, #0
 800f028:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2200      	movs	r2, #0
 800f02e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	689b      	ldr	r3, [r3, #8]
 800f034:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f038:	d107      	bne.n	800f04a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f048:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	685a      	ldr	r2, [r3, #4]
 800f050:	4b94      	ldr	r3, [pc, #592]	; (800f2a4 <HAL_SPI_Receive+0x35c>)
 800f052:	4013      	ands	r3, r2
 800f054:	88f9      	ldrh	r1, [r7, #6]
 800f056:	68fa      	ldr	r2, [r7, #12]
 800f058:	6812      	ldr	r2, [r2, #0]
 800f05a:	430b      	orrs	r3, r1
 800f05c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f042 0201 	orr.w	r2, r2, #1
 800f06c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f076:	d107      	bne.n	800f088 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f086:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	68db      	ldr	r3, [r3, #12]
 800f08c:	2b0f      	cmp	r3, #15
 800f08e:	d948      	bls.n	800f122 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f090:	e040      	b.n	800f114 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	695a      	ldr	r2, [r3, #20]
 800f098:	f248 0308 	movw	r3, #32776	; 0x8008
 800f09c:	4013      	ands	r3, r2
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d014      	beq.n	800f0cc <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f0ac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0b2:	1d1a      	adds	r2, r3, #4
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	b29a      	uxth	r2, r3
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f0ca:	e023      	b.n	800f114 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0cc:	f7f5 fa6c 	bl	80045a8 <HAL_GetTick>
 800f0d0:	4602      	mov	r2, r0
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	1ad3      	subs	r3, r2, r3
 800f0d6:	683a      	ldr	r2, [r7, #0]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d803      	bhi.n	800f0e4 <HAL_SPI_Receive+0x19c>
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0e2:	d102      	bne.n	800f0ea <HAL_SPI_Receive+0x1a2>
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d114      	bne.n	800f114 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0ea:	68f8      	ldr	r0, [r7, #12]
 800f0ec:	f000 fc0a 	bl	800f904 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2201      	movs	r2, #1
 800f10c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f110:	2301      	movs	r3, #1
 800f112:	e107      	b.n	800f324 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d1b8      	bne.n	800f092 <HAL_SPI_Receive+0x14a>
 800f120:	e0ed      	b.n	800f2fe <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	68db      	ldr	r3, [r3, #12]
 800f126:	2b07      	cmp	r3, #7
 800f128:	f240 80e2 	bls.w	800f2f0 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f12c:	e05b      	b.n	800f1e6 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	695b      	ldr	r3, [r3, #20]
 800f134:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d030      	beq.n	800f19e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	695b      	ldr	r3, [r3, #20]
 800f142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f146:	2b00      	cmp	r3, #0
 800f148:	d014      	beq.n	800f174 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f152:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f154:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f15a:	1d1a      	adds	r2, r3, #4
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f166:	b29b      	uxth	r3, r3
 800f168:	3b02      	subs	r3, #2
 800f16a:	b29a      	uxth	r2, r3
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f172:	e038      	b.n	800f1e6 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f178:	69ba      	ldr	r2, [r7, #24]
 800f17a:	8812      	ldrh	r2, [r2, #0]
 800f17c:	b292      	uxth	r2, r2
 800f17e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f184:	1c9a      	adds	r2, r3, #2
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f190:	b29b      	uxth	r3, r3
 800f192:	3b01      	subs	r3, #1
 800f194:	b29a      	uxth	r2, r3
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f19c:	e023      	b.n	800f1e6 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f19e:	f7f5 fa03 	bl	80045a8 <HAL_GetTick>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	683a      	ldr	r2, [r7, #0]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d803      	bhi.n	800f1b6 <HAL_SPI_Receive+0x26e>
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b4:	d102      	bne.n	800f1bc <HAL_SPI_Receive+0x274>
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d114      	bne.n	800f1e6 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f000 fba1 	bl	800f904 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	2201      	movs	r2, #1
 800f1de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	e09e      	b.n	800f324 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d19d      	bne.n	800f12e <HAL_SPI_Receive+0x1e6>
 800f1f2:	e084      	b.n	800f2fe <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	695b      	ldr	r3, [r3, #20]
 800f1fa:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d052      	beq.n	800f2a8 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	695b      	ldr	r3, [r3, #20]
 800f208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d014      	beq.n	800f23a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f218:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f21a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f220:	1d1a      	adds	r2, r3, #4
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	3b04      	subs	r3, #4
 800f230:	b29a      	uxth	r2, r3
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f238:	e05a      	b.n	800f2f0 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	695b      	ldr	r3, [r3, #20]
 800f240:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f248:	d914      	bls.n	800f274 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f24e:	69ba      	ldr	r2, [r7, #24]
 800f250:	8812      	ldrh	r2, [r2, #0]
 800f252:	b292      	uxth	r2, r2
 800f254:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f25a:	1c9a      	adds	r2, r3, #2
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f266:	b29b      	uxth	r3, r3
 800f268:	3b02      	subs	r3, #2
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f272:	e03d      	b.n	800f2f0 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f280:	7812      	ldrb	r2, [r2, #0]
 800f282:	b2d2      	uxtb	r2, r2
 800f284:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f28a:	1c5a      	adds	r2, r3, #1
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f296:	b29b      	uxth	r3, r3
 800f298:	3b01      	subs	r3, #1
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f2a2:	e025      	b.n	800f2f0 <HAL_SPI_Receive+0x3a8>
 800f2a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2a8:	f7f5 f97e 	bl	80045a8 <HAL_GetTick>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	1ad3      	subs	r3, r2, r3
 800f2b2:	683a      	ldr	r2, [r7, #0]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d803      	bhi.n	800f2c0 <HAL_SPI_Receive+0x378>
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2be:	d102      	bne.n	800f2c6 <HAL_SPI_Receive+0x37e>
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d114      	bne.n	800f2f0 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f000 fb1c 	bl	800f904 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e019      	b.n	800f324 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	f47f af7b 	bne.w	800f1f4 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f2fe:	68f8      	ldr	r0, [r7, #12]
 800f300:	f000 fb00 	bl	800f904 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2200      	movs	r2, #0
 800f308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2201      	movs	r2, #1
 800f310:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d001      	beq.n	800f322 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800f31e:	2301      	movs	r3, #1
 800f320:	e000      	b.n	800f324 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800f322:	7ffb      	ldrb	r3, [r7, #31]
}
 800f324:	4618      	mov	r0, r3
 800f326:	3720      	adds	r7, #32
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b08e      	sub	sp, #56	; 0x38
 800f330:	af02      	add	r7, sp, #8
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	607a      	str	r2, [r7, #4]
 800f338:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f33a:	2300      	movs	r3, #0
 800f33c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	3320      	adds	r3, #32
 800f346:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	3330      	adds	r3, #48	; 0x30
 800f34e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f356:	2b01      	cmp	r3, #1
 800f358:	d101      	bne.n	800f35e <HAL_SPI_TransmitReceive+0x32>
 800f35a:	2302      	movs	r3, #2
 800f35c:	e2ce      	b.n	800f8fc <HAL_SPI_TransmitReceive+0x5d0>
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2201      	movs	r2, #1
 800f362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f366:	f7f5 f91f 	bl	80045a8 <HAL_GetTick>
 800f36a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800f36c:	887b      	ldrh	r3, [r7, #2]
 800f36e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800f370:	887b      	ldrh	r3, [r7, #2]
 800f372:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f37a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f382:	7efb      	ldrb	r3, [r7, #27]
 800f384:	2b01      	cmp	r3, #1
 800f386:	d014      	beq.n	800f3b2 <HAL_SPI_TransmitReceive+0x86>
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f38e:	d106      	bne.n	800f39e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d102      	bne.n	800f39e <HAL_SPI_TransmitReceive+0x72>
 800f398:	7efb      	ldrb	r3, [r7, #27]
 800f39a:	2b04      	cmp	r3, #4
 800f39c:	d009      	beq.n	800f3b2 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800f39e:	2302      	movs	r3, #2
 800f3a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f3ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f3b0:	e2a4      	b.n	800f8fc <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d005      	beq.n	800f3c4 <HAL_SPI_TransmitReceive+0x98>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d002      	beq.n	800f3c4 <HAL_SPI_TransmitReceive+0x98>
 800f3be:	887b      	ldrh	r3, [r7, #2]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d109      	bne.n	800f3d8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f3d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f3d6:	e291      	b.n	800f8fc <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	2b04      	cmp	r3, #4
 800f3e2:	d003      	beq.n	800f3ec <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2205      	movs	r2, #5
 800f3e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	887a      	ldrh	r2, [r7, #2]
 800f3fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	887a      	ldrh	r2, [r7, #2]
 800f406:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	68ba      	ldr	r2, [r7, #8]
 800f40e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	887a      	ldrh	r2, [r7, #2]
 800f414:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	887a      	ldrh	r2, [r7, #2]
 800f41c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2200      	movs	r2, #0
 800f424:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2200      	movs	r2, #0
 800f42a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	685a      	ldr	r2, [r3, #4]
 800f432:	4b9f      	ldr	r3, [pc, #636]	; (800f6b0 <HAL_SPI_TransmitReceive+0x384>)
 800f434:	4013      	ands	r3, r2
 800f436:	8879      	ldrh	r1, [r7, #2]
 800f438:	68fa      	ldr	r2, [r7, #12]
 800f43a:	6812      	ldr	r2, [r2, #0]
 800f43c:	430b      	orrs	r3, r1
 800f43e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f042 0201 	orr.w	r2, r2, #1
 800f44e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f458:	d107      	bne.n	800f46a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f468:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	2b0f      	cmp	r3, #15
 800f470:	d970      	bls.n	800f554 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f472:	e068      	b.n	800f546 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	695b      	ldr	r3, [r3, #20]
 800f47a:	f003 0302 	and.w	r3, r3, #2
 800f47e:	2b02      	cmp	r3, #2
 800f480:	d11a      	bne.n	800f4b8 <HAL_SPI_TransmitReceive+0x18c>
 800f482:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f484:	2b00      	cmp	r3, #0
 800f486:	d017      	beq.n	800f4b8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	6812      	ldr	r2, [r2, #0]
 800f492:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f498:	1d1a      	adds	r2, r3, #4
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	695a      	ldr	r2, [r3, #20]
 800f4be:	f248 0308 	movw	r3, #32776	; 0x8008
 800f4c2:	4013      	ands	r3, r2
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d01a      	beq.n	800f4fe <HAL_SPI_TransmitReceive+0x1d2>
 800f4c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d017      	beq.n	800f4fe <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f4d8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4de:	1d1a      	adds	r2, r3, #4
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	3b01      	subs	r3, #1
 800f4ee:	b29a      	uxth	r2, r3
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f4fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4fe:	f7f5 f853 	bl	80045a8 <HAL_GetTick>
 800f502:	4602      	mov	r2, r0
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	1ad3      	subs	r3, r2, r3
 800f508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d803      	bhi.n	800f516 <HAL_SPI_TransmitReceive+0x1ea>
 800f50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f514:	d102      	bne.n	800f51c <HAL_SPI_TransmitReceive+0x1f0>
 800f516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d114      	bne.n	800f546 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f51c:	68f8      	ldr	r0, [r7, #12]
 800f51e:	f000 f9f1 	bl	800f904 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2200      	movs	r2, #0
 800f526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f530:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	2201      	movs	r2, #1
 800f53e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f542:	2301      	movs	r3, #1
 800f544:	e1da      	b.n	800f8fc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f546:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d193      	bne.n	800f474 <HAL_SPI_TransmitReceive+0x148>
 800f54c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d190      	bne.n	800f474 <HAL_SPI_TransmitReceive+0x148>
 800f552:	e1ac      	b.n	800f8ae <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	68db      	ldr	r3, [r3, #12]
 800f558:	2b07      	cmp	r3, #7
 800f55a:	f240 81a0 	bls.w	800f89e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f55e:	e0a9      	b.n	800f6b4 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	695b      	ldr	r3, [r3, #20]
 800f566:	f003 0302 	and.w	r3, r3, #2
 800f56a:	2b02      	cmp	r3, #2
 800f56c:	d139      	bne.n	800f5e2 <HAL_SPI_TransmitReceive+0x2b6>
 800f56e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f570:	2b00      	cmp	r3, #0
 800f572:	d036      	beq.n	800f5e2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f574:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f576:	2b01      	cmp	r3, #1
 800f578:	d91c      	bls.n	800f5b4 <HAL_SPI_TransmitReceive+0x288>
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d018      	beq.n	800f5b4 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	6812      	ldr	r2, [r2, #0]
 800f58c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f592:	1d1a      	adds	r2, r3, #4
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	3b02      	subs	r3, #2
 800f5a2:	b29a      	uxth	r2, r3
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f5b2:	e016      	b.n	800f5e2 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5b8:	881a      	ldrh	r2, [r3, #0]
 800f5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5c2:	1c9a      	adds	r2, r3, #2
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	3b01      	subs	r3, #1
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	695b      	ldr	r3, [r3, #20]
 800f5e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d03a      	beq.n	800f666 <HAL_SPI_TransmitReceive+0x33a>
 800f5f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d037      	beq.n	800f666 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	695b      	ldr	r3, [r3, #20]
 800f5fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f600:	2b00      	cmp	r3, #0
 800f602:	d018      	beq.n	800f636 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	681a      	ldr	r2, [r3, #0]
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f60c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f60e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f614:	1d1a      	adds	r2, r3, #4
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f620:	b29b      	uxth	r3, r3
 800f622:	3b02      	subs	r3, #2
 800f624:	b29a      	uxth	r2, r3
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f632:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f634:	e017      	b.n	800f666 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f63a:	6a3a      	ldr	r2, [r7, #32]
 800f63c:	8812      	ldrh	r2, [r2, #0]
 800f63e:	b292      	uxth	r2, r2
 800f640:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f646:	1c9a      	adds	r2, r3, #2
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f652:	b29b      	uxth	r3, r3
 800f654:	3b01      	subs	r3, #1
 800f656:	b29a      	uxth	r2, r3
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f664:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f666:	f7f4 ff9f 	bl	80045a8 <HAL_GetTick>
 800f66a:	4602      	mov	r2, r0
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	1ad3      	subs	r3, r2, r3
 800f670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f672:	429a      	cmp	r2, r3
 800f674:	d803      	bhi.n	800f67e <HAL_SPI_TransmitReceive+0x352>
 800f676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f67c:	d102      	bne.n	800f684 <HAL_SPI_TransmitReceive+0x358>
 800f67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f680:	2b00      	cmp	r3, #0
 800f682:	d117      	bne.n	800f6b4 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f000 f93d 	bl	800f904 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2200      	movs	r2, #0
 800f68e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f698:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	e126      	b.n	800f8fc <HAL_SPI_TransmitReceive+0x5d0>
 800f6ae:	bf00      	nop
 800f6b0:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f6b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	f47f af52 	bne.w	800f560 <HAL_SPI_TransmitReceive+0x234>
 800f6bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	f47f af4e 	bne.w	800f560 <HAL_SPI_TransmitReceive+0x234>
 800f6c4:	e0f3      	b.n	800f8ae <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	695b      	ldr	r3, [r3, #20]
 800f6cc:	f003 0302 	and.w	r3, r3, #2
 800f6d0:	2b02      	cmp	r3, #2
 800f6d2:	d15a      	bne.n	800f78a <HAL_SPI_TransmitReceive+0x45e>
 800f6d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d057      	beq.n	800f78a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f6da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6dc:	2b03      	cmp	r3, #3
 800f6de:	d91c      	bls.n	800f71a <HAL_SPI_TransmitReceive+0x3ee>
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6e4:	2b40      	cmp	r3, #64	; 0x40
 800f6e6:	d918      	bls.n	800f71a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	6812      	ldr	r2, [r2, #0]
 800f6f2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6f8:	1d1a      	adds	r2, r3, #4
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f704:	b29b      	uxth	r3, r3
 800f706:	3b04      	subs	r3, #4
 800f708:	b29a      	uxth	r2, r3
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f716:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f718:	e037      	b.n	800f78a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f71a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	d91b      	bls.n	800f758 <HAL_SPI_TransmitReceive+0x42c>
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f724:	2b00      	cmp	r3, #0
 800f726:	d017      	beq.n	800f758 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f72c:	881a      	ldrh	r2, [r3, #0]
 800f72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f730:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f736:	1c9a      	adds	r2, r3, #2
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f742:	b29b      	uxth	r3, r3
 800f744:	3b02      	subs	r3, #2
 800f746:	b29a      	uxth	r2, r3
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f754:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f756:	e018      	b.n	800f78a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	3320      	adds	r3, #32
 800f762:	7812      	ldrb	r2, [r2, #0]
 800f764:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f76a:	1c5a      	adds	r2, r3, #1
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f776:	b29b      	uxth	r3, r3
 800f778:	3b01      	subs	r3, #1
 800f77a:	b29a      	uxth	r2, r3
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f788:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	695b      	ldr	r3, [r3, #20]
 800f790:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f794:	2b00      	cmp	r3, #0
 800f796:	d05e      	beq.n	800f856 <HAL_SPI_TransmitReceive+0x52a>
 800f798:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d05b      	beq.n	800f856 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	695b      	ldr	r3, [r3, #20]
 800f7a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d018      	beq.n	800f7de <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f7b6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7bc:	1d1a      	adds	r2, r3, #4
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	3b04      	subs	r3, #4
 800f7cc:	b29a      	uxth	r2, r3
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f7dc:	e03b      	b.n	800f856 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	695b      	ldr	r3, [r3, #20]
 800f7e4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f7e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7ec:	d918      	bls.n	800f820 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7f2:	6a3a      	ldr	r2, [r7, #32]
 800f7f4:	8812      	ldrh	r2, [r2, #0]
 800f7f6:	b292      	uxth	r2, r2
 800f7f8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7fe:	1c9a      	adds	r2, r3, #2
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	3b02      	subs	r3, #2
 800f80e:	b29a      	uxth	r2, r3
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f81c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f81e:	e01a      	b.n	800f856 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f82c:	7812      	ldrb	r2, [r2, #0]
 800f82e:	b2d2      	uxtb	r2, r2
 800f830:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f836:	1c5a      	adds	r2, r3, #1
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f842:	b29b      	uxth	r3, r3
 800f844:	3b01      	subs	r3, #1
 800f846:	b29a      	uxth	r2, r3
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f854:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f856:	f7f4 fea7 	bl	80045a8 <HAL_GetTick>
 800f85a:	4602      	mov	r2, r0
 800f85c:	69fb      	ldr	r3, [r7, #28]
 800f85e:	1ad3      	subs	r3, r2, r3
 800f860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f862:	429a      	cmp	r2, r3
 800f864:	d803      	bhi.n	800f86e <HAL_SPI_TransmitReceive+0x542>
 800f866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f86c:	d102      	bne.n	800f874 <HAL_SPI_TransmitReceive+0x548>
 800f86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f870:	2b00      	cmp	r3, #0
 800f872:	d114      	bne.n	800f89e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f874:	68f8      	ldr	r0, [r7, #12]
 800f876:	f000 f845 	bl	800f904 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2200      	movs	r2, #0
 800f87e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f888:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2201      	movs	r2, #1
 800f896:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f89a:	2301      	movs	r3, #1
 800f89c:	e02e      	b.n	800f8fc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f89e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	f47f af10 	bne.w	800f6c6 <HAL_SPI_TransmitReceive+0x39a>
 800f8a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f47f af0c 	bne.w	800f6c6 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b0:	9300      	str	r3, [sp, #0]
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	2108      	movs	r1, #8
 800f8b8:	68f8      	ldr	r0, [r7, #12]
 800f8ba:	f000 f8c3 	bl	800fa44 <SPI_WaitOnFlagUntilTimeout>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d007      	beq.n	800f8d4 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8ca:	f043 0220 	orr.w	r2, r3, #32
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f8d4:	68f8      	ldr	r0, [r7, #12]
 800f8d6:	f000 f815 	bl	800f904 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d001      	beq.n	800f8f8 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e001      	b.n	800f8fc <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800f8f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3730      	adds	r7, #48	; 0x30
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f904:	b480      	push	{r7}
 800f906:	b085      	sub	sp, #20
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	695b      	ldr	r3, [r3, #20]
 800f912:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	699a      	ldr	r2, [r3, #24]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f042 0208 	orr.w	r2, r2, #8
 800f922:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	699a      	ldr	r2, [r3, #24]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f042 0210 	orr.w	r2, r2, #16
 800f932:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f022 0201 	bic.w	r2, r2, #1
 800f942:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	6919      	ldr	r1, [r3, #16]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681a      	ldr	r2, [r3, #0]
 800f94e:	4b3c      	ldr	r3, [pc, #240]	; (800fa40 <SPI_CloseTransfer+0x13c>)
 800f950:	400b      	ands	r3, r1
 800f952:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	689a      	ldr	r2, [r3, #8]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f962:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	2b04      	cmp	r3, #4
 800f96e:	d014      	beq.n	800f99a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f003 0320 	and.w	r3, r3, #32
 800f976:	2b00      	cmp	r3, #0
 800f978:	d00f      	beq.n	800f99a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f980:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	699a      	ldr	r2, [r3, #24]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f042 0220 	orr.w	r2, r2, #32
 800f998:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f9a0:	b2db      	uxtb	r3, r3
 800f9a2:	2b03      	cmp	r3, #3
 800f9a4:	d014      	beq.n	800f9d0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d00f      	beq.n	800f9d0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9b6:	f043 0204 	orr.w	r2, r3, #4
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	699a      	ldr	r2, [r3, #24]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f9ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d00f      	beq.n	800f9fa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9e0:	f043 0201 	orr.w	r2, r3, #1
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	699a      	ldr	r2, [r3, #24]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00f      	beq.n	800fa24 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa0a:	f043 0208 	orr.w	r2, r3, #8
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	699a      	ldr	r2, [r3, #24]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fa22:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800fa34:	bf00      	nop
 800fa36:	3714      	adds	r7, #20
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr
 800fa40:	fffffc90 	.word	0xfffffc90

0800fa44 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b084      	sub	sp, #16
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	60f8      	str	r0, [r7, #12]
 800fa4c:	60b9      	str	r1, [r7, #8]
 800fa4e:	603b      	str	r3, [r7, #0]
 800fa50:	4613      	mov	r3, r2
 800fa52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fa54:	e010      	b.n	800fa78 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa56:	f7f4 fda7 	bl	80045a8 <HAL_GetTick>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	69ba      	ldr	r2, [r7, #24]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d803      	bhi.n	800fa6e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa6c:	d102      	bne.n	800fa74 <SPI_WaitOnFlagUntilTimeout+0x30>
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d101      	bne.n	800fa78 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800fa74:	2303      	movs	r3, #3
 800fa76:	e00f      	b.n	800fa98 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	695a      	ldr	r2, [r3, #20]
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	4013      	ands	r3, r2
 800fa82:	68ba      	ldr	r2, [r7, #8]
 800fa84:	429a      	cmp	r2, r3
 800fa86:	bf0c      	ite	eq
 800fa88:	2301      	moveq	r3, #1
 800fa8a:	2300      	movne	r3, #0
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	461a      	mov	r2, r3
 800fa90:	79fb      	ldrb	r3, [r7, #7]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d0df      	beq.n	800fa56 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800fa96:	2300      	movs	r3, #0
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3710      	adds	r7, #16
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b085      	sub	sp, #20
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800faac:	095b      	lsrs	r3, r3, #5
 800faae:	3301      	adds	r3, #1
 800fab0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	68db      	ldr	r3, [r3, #12]
 800fab6:	3301      	adds	r3, #1
 800fab8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	3307      	adds	r3, #7
 800fabe:	08db      	lsrs	r3, r3, #3
 800fac0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	fb02 f303 	mul.w	r3, r2, r3
}
 800faca:	4618      	mov	r0, r3
 800facc:	3714      	adds	r7, #20
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr

0800fad6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fad6:	b580      	push	{r7, lr}
 800fad8:	b082      	sub	sp, #8
 800fada:	af00      	add	r7, sp, #0
 800fadc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d101      	bne.n	800fae8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fae4:	2301      	movs	r3, #1
 800fae6:	e042      	b.n	800fb6e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d106      	bne.n	800fb00 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f7f4 fa70 	bl	8003fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2224      	movs	r2, #36	; 0x24
 800fb04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f022 0201 	bic.w	r2, r2, #1
 800fb16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 f95f 	bl	800fddc <UART_SetConfig>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d101      	bne.n	800fb28 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800fb24:	2301      	movs	r3, #1
 800fb26:	e022      	b.n	800fb6e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d002      	beq.n	800fb36 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 ff03 	bl	801093c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	685a      	ldr	r2, [r3, #4]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fb44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	689a      	ldr	r2, [r3, #8]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fb54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	681a      	ldr	r2, [r3, #0]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	f042 0201 	orr.w	r2, r2, #1
 800fb64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f000 ff8a 	bl	8010a80 <UART_CheckIdleState>
 800fb6c:	4603      	mov	r3, r0
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b08a      	sub	sp, #40	; 0x28
 800fb7a:	af02      	add	r7, sp, #8
 800fb7c:	60f8      	str	r0, [r7, #12]
 800fb7e:	60b9      	str	r1, [r7, #8]
 800fb80:	603b      	str	r3, [r7, #0]
 800fb82:	4613      	mov	r3, r2
 800fb84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb8c:	2b20      	cmp	r3, #32
 800fb8e:	f040 8083 	bne.w	800fc98 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d002      	beq.n	800fb9e <HAL_UART_Transmit+0x28>
 800fb98:	88fb      	ldrh	r3, [r7, #6]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d101      	bne.n	800fba2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	e07b      	b.n	800fc9a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d101      	bne.n	800fbb0 <HAL_UART_Transmit+0x3a>
 800fbac:	2302      	movs	r3, #2
 800fbae:	e074      	b.n	800fc9a <HAL_UART_Transmit+0x124>
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2221      	movs	r2, #33	; 0x21
 800fbc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800fbc8:	f7f4 fcee 	bl	80045a8 <HAL_GetTick>
 800fbcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	88fa      	ldrh	r2, [r7, #6]
 800fbd2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	88fa      	ldrh	r2, [r7, #6]
 800fbda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	689b      	ldr	r3, [r3, #8]
 800fbe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbe6:	d108      	bne.n	800fbfa <HAL_UART_Transmit+0x84>
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d104      	bne.n	800fbfa <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	61bb      	str	r3, [r7, #24]
 800fbf8:	e003      	b.n	800fc02 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2200      	movs	r2, #0
 800fc06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800fc0a:	e02c      	b.n	800fc66 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	9300      	str	r3, [sp, #0]
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	2200      	movs	r2, #0
 800fc14:	2180      	movs	r1, #128	; 0x80
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f000 ff7a 	bl	8010b10 <UART_WaitOnFlagUntilTimeout>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d001      	beq.n	800fc26 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800fc22:	2303      	movs	r3, #3
 800fc24:	e039      	b.n	800fc9a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800fc26:	69fb      	ldr	r3, [r7, #28]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d10b      	bne.n	800fc44 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fc2c:	69bb      	ldr	r3, [r7, #24]
 800fc2e:	881b      	ldrh	r3, [r3, #0]
 800fc30:	461a      	mov	r2, r3
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fc3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fc3c:	69bb      	ldr	r3, [r7, #24]
 800fc3e:	3302      	adds	r3, #2
 800fc40:	61bb      	str	r3, [r7, #24]
 800fc42:	e007      	b.n	800fc54 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fc44:	69fb      	ldr	r3, [r7, #28]
 800fc46:	781a      	ldrb	r2, [r3, #0]
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	3301      	adds	r3, #1
 800fc52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	3b01      	subs	r3, #1
 800fc5e:	b29a      	uxth	r2, r3
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc6c:	b29b      	uxth	r3, r3
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d1cc      	bne.n	800fc0c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	9300      	str	r3, [sp, #0]
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	2140      	movs	r1, #64	; 0x40
 800fc7c:	68f8      	ldr	r0, [r7, #12]
 800fc7e:	f000 ff47 	bl	8010b10 <UART_WaitOnFlagUntilTimeout>
 800fc82:	4603      	mov	r3, r0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d001      	beq.n	800fc8c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800fc88:	2303      	movs	r3, #3
 800fc8a:	e006      	b.n	800fc9a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2220      	movs	r2, #32
 800fc90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800fc94:	2300      	movs	r3, #0
 800fc96:	e000      	b.n	800fc9a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800fc98:	2302      	movs	r3, #2
  }
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3720      	adds	r7, #32
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
	...

0800fca4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	4613      	mov	r3, r2
 800fcb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcb8:	2b20      	cmp	r3, #32
 800fcba:	d170      	bne.n	800fd9e <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d002      	beq.n	800fcc8 <HAL_UART_Receive_DMA+0x24>
 800fcc2:	88fb      	ldrh	r3, [r7, #6]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d101      	bne.n	800fccc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fcc8:	2301      	movs	r3, #1
 800fcca:	e069      	b.n	800fda0 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d101      	bne.n	800fcda <HAL_UART_Receive_DMA+0x36>
 800fcd6:	2302      	movs	r3, #2
 800fcd8:	e062      	b.n	800fda0 <HAL_UART_Receive_DMA+0xfc>
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	2201      	movs	r2, #1
 800fcde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	68ba      	ldr	r2, [r7, #8]
 800fce6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	88fa      	ldrh	r2, [r7, #6]
 800fcec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2222      	movs	r2, #34	; 0x22
 800fcfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d02c      	beq.n	800fd62 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd0c:	4a26      	ldr	r2, [pc, #152]	; (800fda8 <HAL_UART_Receive_DMA+0x104>)
 800fd0e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd14:	4a25      	ldr	r2, [pc, #148]	; (800fdac <HAL_UART_Receive_DMA+0x108>)
 800fd16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd1c:	4a24      	ldr	r2, [pc, #144]	; (800fdb0 <HAL_UART_Receive_DMA+0x10c>)
 800fd1e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd24:	2200      	movs	r2, #0
 800fd26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	3324      	adds	r3, #36	; 0x24
 800fd32:	4619      	mov	r1, r3
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd38:	461a      	mov	r2, r3
 800fd3a:	88fb      	ldrh	r3, [r7, #6]
 800fd3c:	f7f5 f8da 	bl	8004ef4 <HAL_DMA_Start_IT>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d00d      	beq.n	800fd62 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	2210      	movs	r2, #16
 800fd4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2200      	movs	r2, #0
 800fd52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2220      	movs	r2, #32
 800fd5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800fd5e:	2301      	movs	r3, #1
 800fd60:	e01e      	b.n	800fda0 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	2200      	movs	r2, #0
 800fd66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	681a      	ldr	r2, [r3, #0]
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fd78:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	689a      	ldr	r2, [r3, #8]
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f042 0201 	orr.w	r2, r2, #1
 800fd88:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	689a      	ldr	r2, [r3, #8]
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd98:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	e000      	b.n	800fda0 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800fd9e:	2302      	movs	r3, #2
  }
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3710      	adds	r7, #16
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	08010c95 	.word	0x08010c95
 800fdac:	08010cfb 	.word	0x08010cfb
 800fdb0:	08010d17 	.word	0x08010d17

0800fdb4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b083      	sub	sp, #12
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fdbc:	bf00      	nop
 800fdbe:	370c      	adds	r7, #12
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr

0800fdc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b083      	sub	sp, #12
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fdd0:	bf00      	nop
 800fdd2:	370c      	adds	r7, #12
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr

0800fddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fddc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800fde0:	b08e      	sub	sp, #56	; 0x38
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fde6:	2300      	movs	r3, #0
 800fde8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	689a      	ldr	r2, [r3, #8]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	691b      	ldr	r3, [r3, #16]
 800fdf4:	431a      	orrs	r2, r3
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	695b      	ldr	r3, [r3, #20]
 800fdfa:	431a      	orrs	r2, r3
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	69db      	ldr	r3, [r3, #28]
 800fe00:	4313      	orrs	r3, r2
 800fe02:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	4bc1      	ldr	r3, [pc, #772]	; (801011c <UART_SetConfig+0x340>)
 800fe16:	4013      	ands	r3, r2
 800fe18:	687a      	ldr	r2, [r7, #4]
 800fe1a:	6812      	ldr	r2, [r2, #0]
 800fe1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe1e:	430b      	orrs	r3, r1
 800fe20:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	68da      	ldr	r2, [r3, #12]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	430a      	orrs	r2, r1
 800fe36:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	699b      	ldr	r3, [r3, #24]
 800fe3c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	4ab7      	ldr	r2, [pc, #732]	; (8010120 <UART_SetConfig+0x344>)
 800fe44:	4293      	cmp	r3, r2
 800fe46:	d004      	beq.n	800fe52 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6a1b      	ldr	r3, [r3, #32]
 800fe4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	689a      	ldr	r2, [r3, #8]
 800fe58:	4bb2      	ldr	r3, [pc, #712]	; (8010124 <UART_SetConfig+0x348>)
 800fe5a:	4013      	ands	r3, r2
 800fe5c:	687a      	ldr	r2, [r7, #4]
 800fe5e:	6812      	ldr	r2, [r2, #0]
 800fe60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe62:	430b      	orrs	r3, r1
 800fe64:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe6c:	f023 010f 	bic.w	r1, r3, #15
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	430a      	orrs	r2, r1
 800fe7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	4aa9      	ldr	r2, [pc, #676]	; (8010128 <UART_SetConfig+0x34c>)
 800fe82:	4293      	cmp	r3, r2
 800fe84:	d177      	bne.n	800ff76 <UART_SetConfig+0x19a>
 800fe86:	4ba9      	ldr	r3, [pc, #676]	; (801012c <UART_SetConfig+0x350>)
 800fe88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fe8e:	2b28      	cmp	r3, #40	; 0x28
 800fe90:	d86c      	bhi.n	800ff6c <UART_SetConfig+0x190>
 800fe92:	a201      	add	r2, pc, #4	; (adr r2, 800fe98 <UART_SetConfig+0xbc>)
 800fe94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe98:	0800ff3d 	.word	0x0800ff3d
 800fe9c:	0800ff6d 	.word	0x0800ff6d
 800fea0:	0800ff6d 	.word	0x0800ff6d
 800fea4:	0800ff6d 	.word	0x0800ff6d
 800fea8:	0800ff6d 	.word	0x0800ff6d
 800feac:	0800ff6d 	.word	0x0800ff6d
 800feb0:	0800ff6d 	.word	0x0800ff6d
 800feb4:	0800ff6d 	.word	0x0800ff6d
 800feb8:	0800ff45 	.word	0x0800ff45
 800febc:	0800ff6d 	.word	0x0800ff6d
 800fec0:	0800ff6d 	.word	0x0800ff6d
 800fec4:	0800ff6d 	.word	0x0800ff6d
 800fec8:	0800ff6d 	.word	0x0800ff6d
 800fecc:	0800ff6d 	.word	0x0800ff6d
 800fed0:	0800ff6d 	.word	0x0800ff6d
 800fed4:	0800ff6d 	.word	0x0800ff6d
 800fed8:	0800ff4d 	.word	0x0800ff4d
 800fedc:	0800ff6d 	.word	0x0800ff6d
 800fee0:	0800ff6d 	.word	0x0800ff6d
 800fee4:	0800ff6d 	.word	0x0800ff6d
 800fee8:	0800ff6d 	.word	0x0800ff6d
 800feec:	0800ff6d 	.word	0x0800ff6d
 800fef0:	0800ff6d 	.word	0x0800ff6d
 800fef4:	0800ff6d 	.word	0x0800ff6d
 800fef8:	0800ff55 	.word	0x0800ff55
 800fefc:	0800ff6d 	.word	0x0800ff6d
 800ff00:	0800ff6d 	.word	0x0800ff6d
 800ff04:	0800ff6d 	.word	0x0800ff6d
 800ff08:	0800ff6d 	.word	0x0800ff6d
 800ff0c:	0800ff6d 	.word	0x0800ff6d
 800ff10:	0800ff6d 	.word	0x0800ff6d
 800ff14:	0800ff6d 	.word	0x0800ff6d
 800ff18:	0800ff5d 	.word	0x0800ff5d
 800ff1c:	0800ff6d 	.word	0x0800ff6d
 800ff20:	0800ff6d 	.word	0x0800ff6d
 800ff24:	0800ff6d 	.word	0x0800ff6d
 800ff28:	0800ff6d 	.word	0x0800ff6d
 800ff2c:	0800ff6d 	.word	0x0800ff6d
 800ff30:	0800ff6d 	.word	0x0800ff6d
 800ff34:	0800ff6d 	.word	0x0800ff6d
 800ff38:	0800ff65 	.word	0x0800ff65
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff42:	e233      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ff44:	2304      	movs	r3, #4
 800ff46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff4a:	e22f      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ff4c:	2308      	movs	r3, #8
 800ff4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff52:	e22b      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ff54:	2310      	movs	r3, #16
 800ff56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff5a:	e227      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ff5c:	2320      	movs	r3, #32
 800ff5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff62:	e223      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ff64:	2340      	movs	r3, #64	; 0x40
 800ff66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff6a:	e21f      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ff6c:	2380      	movs	r3, #128	; 0x80
 800ff6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff72:	bf00      	nop
 800ff74:	e21a      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	4a6d      	ldr	r2, [pc, #436]	; (8010130 <UART_SetConfig+0x354>)
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	d132      	bne.n	800ffe6 <UART_SetConfig+0x20a>
 800ff80:	4b6a      	ldr	r3, [pc, #424]	; (801012c <UART_SetConfig+0x350>)
 800ff82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff84:	f003 0307 	and.w	r3, r3, #7
 800ff88:	2b05      	cmp	r3, #5
 800ff8a:	d827      	bhi.n	800ffdc <UART_SetConfig+0x200>
 800ff8c:	a201      	add	r2, pc, #4	; (adr r2, 800ff94 <UART_SetConfig+0x1b8>)
 800ff8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff92:	bf00      	nop
 800ff94:	0800ffad 	.word	0x0800ffad
 800ff98:	0800ffb5 	.word	0x0800ffb5
 800ff9c:	0800ffbd 	.word	0x0800ffbd
 800ffa0:	0800ffc5 	.word	0x0800ffc5
 800ffa4:	0800ffcd 	.word	0x0800ffcd
 800ffa8:	0800ffd5 	.word	0x0800ffd5
 800ffac:	2300      	movs	r3, #0
 800ffae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffb2:	e1fb      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ffb4:	2304      	movs	r3, #4
 800ffb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffba:	e1f7      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ffbc:	2308      	movs	r3, #8
 800ffbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffc2:	e1f3      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ffc4:	2310      	movs	r3, #16
 800ffc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffca:	e1ef      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ffcc:	2320      	movs	r3, #32
 800ffce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffd2:	e1eb      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ffd4:	2340      	movs	r3, #64	; 0x40
 800ffd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffda:	e1e7      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ffdc:	2380      	movs	r3, #128	; 0x80
 800ffde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffe2:	bf00      	nop
 800ffe4:	e1e2      	b.n	80103ac <UART_SetConfig+0x5d0>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	4a52      	ldr	r2, [pc, #328]	; (8010134 <UART_SetConfig+0x358>)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d132      	bne.n	8010056 <UART_SetConfig+0x27a>
 800fff0:	4b4e      	ldr	r3, [pc, #312]	; (801012c <UART_SetConfig+0x350>)
 800fff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fff4:	f003 0307 	and.w	r3, r3, #7
 800fff8:	2b05      	cmp	r3, #5
 800fffa:	d827      	bhi.n	801004c <UART_SetConfig+0x270>
 800fffc:	a201      	add	r2, pc, #4	; (adr r2, 8010004 <UART_SetConfig+0x228>)
 800fffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010002:	bf00      	nop
 8010004:	0801001d 	.word	0x0801001d
 8010008:	08010025 	.word	0x08010025
 801000c:	0801002d 	.word	0x0801002d
 8010010:	08010035 	.word	0x08010035
 8010014:	0801003d 	.word	0x0801003d
 8010018:	08010045 	.word	0x08010045
 801001c:	2300      	movs	r3, #0
 801001e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010022:	e1c3      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010024:	2304      	movs	r3, #4
 8010026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801002a:	e1bf      	b.n	80103ac <UART_SetConfig+0x5d0>
 801002c:	2308      	movs	r3, #8
 801002e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010032:	e1bb      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010034:	2310      	movs	r3, #16
 8010036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801003a:	e1b7      	b.n	80103ac <UART_SetConfig+0x5d0>
 801003c:	2320      	movs	r3, #32
 801003e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010042:	e1b3      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010044:	2340      	movs	r3, #64	; 0x40
 8010046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801004a:	e1af      	b.n	80103ac <UART_SetConfig+0x5d0>
 801004c:	2380      	movs	r3, #128	; 0x80
 801004e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010052:	bf00      	nop
 8010054:	e1aa      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4a37      	ldr	r2, [pc, #220]	; (8010138 <UART_SetConfig+0x35c>)
 801005c:	4293      	cmp	r3, r2
 801005e:	d132      	bne.n	80100c6 <UART_SetConfig+0x2ea>
 8010060:	4b32      	ldr	r3, [pc, #200]	; (801012c <UART_SetConfig+0x350>)
 8010062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010064:	f003 0307 	and.w	r3, r3, #7
 8010068:	2b05      	cmp	r3, #5
 801006a:	d827      	bhi.n	80100bc <UART_SetConfig+0x2e0>
 801006c:	a201      	add	r2, pc, #4	; (adr r2, 8010074 <UART_SetConfig+0x298>)
 801006e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010072:	bf00      	nop
 8010074:	0801008d 	.word	0x0801008d
 8010078:	08010095 	.word	0x08010095
 801007c:	0801009d 	.word	0x0801009d
 8010080:	080100a5 	.word	0x080100a5
 8010084:	080100ad 	.word	0x080100ad
 8010088:	080100b5 	.word	0x080100b5
 801008c:	2300      	movs	r3, #0
 801008e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010092:	e18b      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010094:	2304      	movs	r3, #4
 8010096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801009a:	e187      	b.n	80103ac <UART_SetConfig+0x5d0>
 801009c:	2308      	movs	r3, #8
 801009e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100a2:	e183      	b.n	80103ac <UART_SetConfig+0x5d0>
 80100a4:	2310      	movs	r3, #16
 80100a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100aa:	e17f      	b.n	80103ac <UART_SetConfig+0x5d0>
 80100ac:	2320      	movs	r3, #32
 80100ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100b2:	e17b      	b.n	80103ac <UART_SetConfig+0x5d0>
 80100b4:	2340      	movs	r3, #64	; 0x40
 80100b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ba:	e177      	b.n	80103ac <UART_SetConfig+0x5d0>
 80100bc:	2380      	movs	r3, #128	; 0x80
 80100be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100c2:	bf00      	nop
 80100c4:	e172      	b.n	80103ac <UART_SetConfig+0x5d0>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	4a1c      	ldr	r2, [pc, #112]	; (801013c <UART_SetConfig+0x360>)
 80100cc:	4293      	cmp	r3, r2
 80100ce:	d144      	bne.n	801015a <UART_SetConfig+0x37e>
 80100d0:	4b16      	ldr	r3, [pc, #88]	; (801012c <UART_SetConfig+0x350>)
 80100d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100d4:	f003 0307 	and.w	r3, r3, #7
 80100d8:	2b05      	cmp	r3, #5
 80100da:	d839      	bhi.n	8010150 <UART_SetConfig+0x374>
 80100dc:	a201      	add	r2, pc, #4	; (adr r2, 80100e4 <UART_SetConfig+0x308>)
 80100de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100e2:	bf00      	nop
 80100e4:	080100fd 	.word	0x080100fd
 80100e8:	08010105 	.word	0x08010105
 80100ec:	0801010d 	.word	0x0801010d
 80100f0:	08010115 	.word	0x08010115
 80100f4:	08010141 	.word	0x08010141
 80100f8:	08010149 	.word	0x08010149
 80100fc:	2300      	movs	r3, #0
 80100fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010102:	e153      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010104:	2304      	movs	r3, #4
 8010106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801010a:	e14f      	b.n	80103ac <UART_SetConfig+0x5d0>
 801010c:	2308      	movs	r3, #8
 801010e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010112:	e14b      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010114:	2310      	movs	r3, #16
 8010116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801011a:	e147      	b.n	80103ac <UART_SetConfig+0x5d0>
 801011c:	cfff69f3 	.word	0xcfff69f3
 8010120:	58000c00 	.word	0x58000c00
 8010124:	11fff4ff 	.word	0x11fff4ff
 8010128:	40011000 	.word	0x40011000
 801012c:	58024400 	.word	0x58024400
 8010130:	40004400 	.word	0x40004400
 8010134:	40004800 	.word	0x40004800
 8010138:	40004c00 	.word	0x40004c00
 801013c:	40005000 	.word	0x40005000
 8010140:	2320      	movs	r3, #32
 8010142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010146:	e131      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010148:	2340      	movs	r3, #64	; 0x40
 801014a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801014e:	e12d      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010150:	2380      	movs	r3, #128	; 0x80
 8010152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010156:	bf00      	nop
 8010158:	e128      	b.n	80103ac <UART_SetConfig+0x5d0>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	4ab6      	ldr	r2, [pc, #728]	; (8010438 <UART_SetConfig+0x65c>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d178      	bne.n	8010256 <UART_SetConfig+0x47a>
 8010164:	4bb5      	ldr	r3, [pc, #724]	; (801043c <UART_SetConfig+0x660>)
 8010166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010168:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801016c:	2b28      	cmp	r3, #40	; 0x28
 801016e:	d86d      	bhi.n	801024c <UART_SetConfig+0x470>
 8010170:	a201      	add	r2, pc, #4	; (adr r2, 8010178 <UART_SetConfig+0x39c>)
 8010172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010176:	bf00      	nop
 8010178:	0801021d 	.word	0x0801021d
 801017c:	0801024d 	.word	0x0801024d
 8010180:	0801024d 	.word	0x0801024d
 8010184:	0801024d 	.word	0x0801024d
 8010188:	0801024d 	.word	0x0801024d
 801018c:	0801024d 	.word	0x0801024d
 8010190:	0801024d 	.word	0x0801024d
 8010194:	0801024d 	.word	0x0801024d
 8010198:	08010225 	.word	0x08010225
 801019c:	0801024d 	.word	0x0801024d
 80101a0:	0801024d 	.word	0x0801024d
 80101a4:	0801024d 	.word	0x0801024d
 80101a8:	0801024d 	.word	0x0801024d
 80101ac:	0801024d 	.word	0x0801024d
 80101b0:	0801024d 	.word	0x0801024d
 80101b4:	0801024d 	.word	0x0801024d
 80101b8:	0801022d 	.word	0x0801022d
 80101bc:	0801024d 	.word	0x0801024d
 80101c0:	0801024d 	.word	0x0801024d
 80101c4:	0801024d 	.word	0x0801024d
 80101c8:	0801024d 	.word	0x0801024d
 80101cc:	0801024d 	.word	0x0801024d
 80101d0:	0801024d 	.word	0x0801024d
 80101d4:	0801024d 	.word	0x0801024d
 80101d8:	08010235 	.word	0x08010235
 80101dc:	0801024d 	.word	0x0801024d
 80101e0:	0801024d 	.word	0x0801024d
 80101e4:	0801024d 	.word	0x0801024d
 80101e8:	0801024d 	.word	0x0801024d
 80101ec:	0801024d 	.word	0x0801024d
 80101f0:	0801024d 	.word	0x0801024d
 80101f4:	0801024d 	.word	0x0801024d
 80101f8:	0801023d 	.word	0x0801023d
 80101fc:	0801024d 	.word	0x0801024d
 8010200:	0801024d 	.word	0x0801024d
 8010204:	0801024d 	.word	0x0801024d
 8010208:	0801024d 	.word	0x0801024d
 801020c:	0801024d 	.word	0x0801024d
 8010210:	0801024d 	.word	0x0801024d
 8010214:	0801024d 	.word	0x0801024d
 8010218:	08010245 	.word	0x08010245
 801021c:	2301      	movs	r3, #1
 801021e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010222:	e0c3      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010224:	2304      	movs	r3, #4
 8010226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801022a:	e0bf      	b.n	80103ac <UART_SetConfig+0x5d0>
 801022c:	2308      	movs	r3, #8
 801022e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010232:	e0bb      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010234:	2310      	movs	r3, #16
 8010236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801023a:	e0b7      	b.n	80103ac <UART_SetConfig+0x5d0>
 801023c:	2320      	movs	r3, #32
 801023e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010242:	e0b3      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010244:	2340      	movs	r3, #64	; 0x40
 8010246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801024a:	e0af      	b.n	80103ac <UART_SetConfig+0x5d0>
 801024c:	2380      	movs	r3, #128	; 0x80
 801024e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010252:	bf00      	nop
 8010254:	e0aa      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	4a79      	ldr	r2, [pc, #484]	; (8010440 <UART_SetConfig+0x664>)
 801025c:	4293      	cmp	r3, r2
 801025e:	d132      	bne.n	80102c6 <UART_SetConfig+0x4ea>
 8010260:	4b76      	ldr	r3, [pc, #472]	; (801043c <UART_SetConfig+0x660>)
 8010262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010264:	f003 0307 	and.w	r3, r3, #7
 8010268:	2b05      	cmp	r3, #5
 801026a:	d827      	bhi.n	80102bc <UART_SetConfig+0x4e0>
 801026c:	a201      	add	r2, pc, #4	; (adr r2, 8010274 <UART_SetConfig+0x498>)
 801026e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010272:	bf00      	nop
 8010274:	0801028d 	.word	0x0801028d
 8010278:	08010295 	.word	0x08010295
 801027c:	0801029d 	.word	0x0801029d
 8010280:	080102a5 	.word	0x080102a5
 8010284:	080102ad 	.word	0x080102ad
 8010288:	080102b5 	.word	0x080102b5
 801028c:	2300      	movs	r3, #0
 801028e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010292:	e08b      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010294:	2304      	movs	r3, #4
 8010296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801029a:	e087      	b.n	80103ac <UART_SetConfig+0x5d0>
 801029c:	2308      	movs	r3, #8
 801029e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102a2:	e083      	b.n	80103ac <UART_SetConfig+0x5d0>
 80102a4:	2310      	movs	r3, #16
 80102a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102aa:	e07f      	b.n	80103ac <UART_SetConfig+0x5d0>
 80102ac:	2320      	movs	r3, #32
 80102ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102b2:	e07b      	b.n	80103ac <UART_SetConfig+0x5d0>
 80102b4:	2340      	movs	r3, #64	; 0x40
 80102b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ba:	e077      	b.n	80103ac <UART_SetConfig+0x5d0>
 80102bc:	2380      	movs	r3, #128	; 0x80
 80102be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102c2:	bf00      	nop
 80102c4:	e072      	b.n	80103ac <UART_SetConfig+0x5d0>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	4a5e      	ldr	r2, [pc, #376]	; (8010444 <UART_SetConfig+0x668>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d132      	bne.n	8010336 <UART_SetConfig+0x55a>
 80102d0:	4b5a      	ldr	r3, [pc, #360]	; (801043c <UART_SetConfig+0x660>)
 80102d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102d4:	f003 0307 	and.w	r3, r3, #7
 80102d8:	2b05      	cmp	r3, #5
 80102da:	d827      	bhi.n	801032c <UART_SetConfig+0x550>
 80102dc:	a201      	add	r2, pc, #4	; (adr r2, 80102e4 <UART_SetConfig+0x508>)
 80102de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102e2:	bf00      	nop
 80102e4:	080102fd 	.word	0x080102fd
 80102e8:	08010305 	.word	0x08010305
 80102ec:	0801030d 	.word	0x0801030d
 80102f0:	08010315 	.word	0x08010315
 80102f4:	0801031d 	.word	0x0801031d
 80102f8:	08010325 	.word	0x08010325
 80102fc:	2300      	movs	r3, #0
 80102fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010302:	e053      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010304:	2304      	movs	r3, #4
 8010306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801030a:	e04f      	b.n	80103ac <UART_SetConfig+0x5d0>
 801030c:	2308      	movs	r3, #8
 801030e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010312:	e04b      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010314:	2310      	movs	r3, #16
 8010316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801031a:	e047      	b.n	80103ac <UART_SetConfig+0x5d0>
 801031c:	2320      	movs	r3, #32
 801031e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010322:	e043      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010324:	2340      	movs	r3, #64	; 0x40
 8010326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801032a:	e03f      	b.n	80103ac <UART_SetConfig+0x5d0>
 801032c:	2380      	movs	r3, #128	; 0x80
 801032e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010332:	bf00      	nop
 8010334:	e03a      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a43      	ldr	r2, [pc, #268]	; (8010448 <UART_SetConfig+0x66c>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d132      	bne.n	80103a6 <UART_SetConfig+0x5ca>
 8010340:	4b3e      	ldr	r3, [pc, #248]	; (801043c <UART_SetConfig+0x660>)
 8010342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010344:	f003 0307 	and.w	r3, r3, #7
 8010348:	2b05      	cmp	r3, #5
 801034a:	d827      	bhi.n	801039c <UART_SetConfig+0x5c0>
 801034c:	a201      	add	r2, pc, #4	; (adr r2, 8010354 <UART_SetConfig+0x578>)
 801034e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010352:	bf00      	nop
 8010354:	0801036d 	.word	0x0801036d
 8010358:	08010375 	.word	0x08010375
 801035c:	0801037d 	.word	0x0801037d
 8010360:	08010385 	.word	0x08010385
 8010364:	0801038d 	.word	0x0801038d
 8010368:	08010395 	.word	0x08010395
 801036c:	2302      	movs	r3, #2
 801036e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010372:	e01b      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010374:	2304      	movs	r3, #4
 8010376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801037a:	e017      	b.n	80103ac <UART_SetConfig+0x5d0>
 801037c:	2308      	movs	r3, #8
 801037e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010382:	e013      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010384:	2310      	movs	r3, #16
 8010386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801038a:	e00f      	b.n	80103ac <UART_SetConfig+0x5d0>
 801038c:	2320      	movs	r3, #32
 801038e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010392:	e00b      	b.n	80103ac <UART_SetConfig+0x5d0>
 8010394:	2340      	movs	r3, #64	; 0x40
 8010396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801039a:	e007      	b.n	80103ac <UART_SetConfig+0x5d0>
 801039c:	2380      	movs	r3, #128	; 0x80
 801039e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103a2:	bf00      	nop
 80103a4:	e002      	b.n	80103ac <UART_SetConfig+0x5d0>
 80103a6:	2380      	movs	r3, #128	; 0x80
 80103a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a25      	ldr	r2, [pc, #148]	; (8010448 <UART_SetConfig+0x66c>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	f040 80b8 	bne.w	8010528 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80103b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80103bc:	2b08      	cmp	r3, #8
 80103be:	d019      	beq.n	80103f4 <UART_SetConfig+0x618>
 80103c0:	2b08      	cmp	r3, #8
 80103c2:	dc04      	bgt.n	80103ce <UART_SetConfig+0x5f2>
 80103c4:	2b02      	cmp	r3, #2
 80103c6:	d009      	beq.n	80103dc <UART_SetConfig+0x600>
 80103c8:	2b04      	cmp	r3, #4
 80103ca:	d00b      	beq.n	80103e4 <UART_SetConfig+0x608>
 80103cc:	e042      	b.n	8010454 <UART_SetConfig+0x678>
 80103ce:	2b20      	cmp	r3, #32
 80103d0:	d02b      	beq.n	801042a <UART_SetConfig+0x64e>
 80103d2:	2b40      	cmp	r3, #64	; 0x40
 80103d4:	d02c      	beq.n	8010430 <UART_SetConfig+0x654>
 80103d6:	2b10      	cmp	r3, #16
 80103d8:	d014      	beq.n	8010404 <UART_SetConfig+0x628>
 80103da:	e03b      	b.n	8010454 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80103dc:	f7fb fad2 	bl	800b984 <HAL_RCCEx_GetD3PCLK1Freq>
 80103e0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80103e2:	e03d      	b.n	8010460 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80103e4:	f107 0314 	add.w	r3, r7, #20
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7fb fae1 	bl	800b9b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80103ee:	69bb      	ldr	r3, [r7, #24]
 80103f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80103f2:	e035      	b.n	8010460 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103f4:	f107 0308 	add.w	r3, r7, #8
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7fb fc25 	bl	800bc48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010402:	e02d      	b.n	8010460 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010404:	4b0d      	ldr	r3, [pc, #52]	; (801043c <UART_SetConfig+0x660>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f003 0320 	and.w	r3, r3, #32
 801040c:	2b00      	cmp	r3, #0
 801040e:	d009      	beq.n	8010424 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010410:	4b0a      	ldr	r3, [pc, #40]	; (801043c <UART_SetConfig+0x660>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	08db      	lsrs	r3, r3, #3
 8010416:	f003 0303 	and.w	r3, r3, #3
 801041a:	4a0c      	ldr	r2, [pc, #48]	; (801044c <UART_SetConfig+0x670>)
 801041c:	fa22 f303 	lsr.w	r3, r2, r3
 8010420:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010422:	e01d      	b.n	8010460 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8010424:	4b09      	ldr	r3, [pc, #36]	; (801044c <UART_SetConfig+0x670>)
 8010426:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010428:	e01a      	b.n	8010460 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801042a:	4b09      	ldr	r3, [pc, #36]	; (8010450 <UART_SetConfig+0x674>)
 801042c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801042e:	e017      	b.n	8010460 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010434:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010436:	e013      	b.n	8010460 <UART_SetConfig+0x684>
 8010438:	40011400 	.word	0x40011400
 801043c:	58024400 	.word	0x58024400
 8010440:	40007800 	.word	0x40007800
 8010444:	40007c00 	.word	0x40007c00
 8010448:	58000c00 	.word	0x58000c00
 801044c:	03d09000 	.word	0x03d09000
 8010450:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8010454:	2300      	movs	r3, #0
 8010456:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010458:	2301      	movs	r3, #1
 801045a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801045e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010462:	2b00      	cmp	r3, #0
 8010464:	f000 824d 	beq.w	8010902 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801046c:	4aad      	ldr	r2, [pc, #692]	; (8010724 <UART_SetConfig+0x948>)
 801046e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010472:	461a      	mov	r2, r3
 8010474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010476:	fbb3 f3f2 	udiv	r3, r3, r2
 801047a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	685a      	ldr	r2, [r3, #4]
 8010480:	4613      	mov	r3, r2
 8010482:	005b      	lsls	r3, r3, #1
 8010484:	4413      	add	r3, r2
 8010486:	6a3a      	ldr	r2, [r7, #32]
 8010488:	429a      	cmp	r2, r3
 801048a:	d305      	bcc.n	8010498 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010492:	6a3a      	ldr	r2, [r7, #32]
 8010494:	429a      	cmp	r2, r3
 8010496:	d903      	bls.n	80104a0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8010498:	2301      	movs	r3, #1
 801049a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801049e:	e230      	b.n	8010902 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a2:	4618      	mov	r0, r3
 80104a4:	f04f 0100 	mov.w	r1, #0
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ac:	4a9d      	ldr	r2, [pc, #628]	; (8010724 <UART_SetConfig+0x948>)
 80104ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104b2:	b29b      	uxth	r3, r3
 80104b4:	f04f 0400 	mov.w	r4, #0
 80104b8:	461a      	mov	r2, r3
 80104ba:	4623      	mov	r3, r4
 80104bc:	f7ef ff68 	bl	8000390 <__aeabi_uldivmod>
 80104c0:	4603      	mov	r3, r0
 80104c2:	460c      	mov	r4, r1
 80104c4:	4619      	mov	r1, r3
 80104c6:	4622      	mov	r2, r4
 80104c8:	f04f 0300 	mov.w	r3, #0
 80104cc:	f04f 0400 	mov.w	r4, #0
 80104d0:	0214      	lsls	r4, r2, #8
 80104d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80104d6:	020b      	lsls	r3, r1, #8
 80104d8:	687a      	ldr	r2, [r7, #4]
 80104da:	6852      	ldr	r2, [r2, #4]
 80104dc:	0852      	lsrs	r2, r2, #1
 80104de:	4611      	mov	r1, r2
 80104e0:	f04f 0200 	mov.w	r2, #0
 80104e4:	eb13 0b01 	adds.w	fp, r3, r1
 80104e8:	eb44 0c02 	adc.w	ip, r4, r2
 80104ec:	4658      	mov	r0, fp
 80104ee:	4661      	mov	r1, ip
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	685b      	ldr	r3, [r3, #4]
 80104f4:	f04f 0400 	mov.w	r4, #0
 80104f8:	461a      	mov	r2, r3
 80104fa:	4623      	mov	r3, r4
 80104fc:	f7ef ff48 	bl	8000390 <__aeabi_uldivmod>
 8010500:	4603      	mov	r3, r0
 8010502:	460c      	mov	r4, r1
 8010504:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801050c:	d308      	bcc.n	8010520 <UART_SetConfig+0x744>
 801050e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010514:	d204      	bcs.n	8010520 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801051c:	60da      	str	r2, [r3, #12]
 801051e:	e1f0      	b.n	8010902 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8010520:	2301      	movs	r3, #1
 8010522:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010526:	e1ec      	b.n	8010902 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	69db      	ldr	r3, [r3, #28]
 801052c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010530:	f040 8100 	bne.w	8010734 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8010534:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010538:	2b40      	cmp	r3, #64	; 0x40
 801053a:	f200 80b7 	bhi.w	80106ac <UART_SetConfig+0x8d0>
 801053e:	a201      	add	r2, pc, #4	; (adr r2, 8010544 <UART_SetConfig+0x768>)
 8010540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010544:	08010649 	.word	0x08010649
 8010548:	08010651 	.word	0x08010651
 801054c:	080106ad 	.word	0x080106ad
 8010550:	080106ad 	.word	0x080106ad
 8010554:	08010659 	.word	0x08010659
 8010558:	080106ad 	.word	0x080106ad
 801055c:	080106ad 	.word	0x080106ad
 8010560:	080106ad 	.word	0x080106ad
 8010564:	08010669 	.word	0x08010669
 8010568:	080106ad 	.word	0x080106ad
 801056c:	080106ad 	.word	0x080106ad
 8010570:	080106ad 	.word	0x080106ad
 8010574:	080106ad 	.word	0x080106ad
 8010578:	080106ad 	.word	0x080106ad
 801057c:	080106ad 	.word	0x080106ad
 8010580:	080106ad 	.word	0x080106ad
 8010584:	08010679 	.word	0x08010679
 8010588:	080106ad 	.word	0x080106ad
 801058c:	080106ad 	.word	0x080106ad
 8010590:	080106ad 	.word	0x080106ad
 8010594:	080106ad 	.word	0x080106ad
 8010598:	080106ad 	.word	0x080106ad
 801059c:	080106ad 	.word	0x080106ad
 80105a0:	080106ad 	.word	0x080106ad
 80105a4:	080106ad 	.word	0x080106ad
 80105a8:	080106ad 	.word	0x080106ad
 80105ac:	080106ad 	.word	0x080106ad
 80105b0:	080106ad 	.word	0x080106ad
 80105b4:	080106ad 	.word	0x080106ad
 80105b8:	080106ad 	.word	0x080106ad
 80105bc:	080106ad 	.word	0x080106ad
 80105c0:	080106ad 	.word	0x080106ad
 80105c4:	0801069f 	.word	0x0801069f
 80105c8:	080106ad 	.word	0x080106ad
 80105cc:	080106ad 	.word	0x080106ad
 80105d0:	080106ad 	.word	0x080106ad
 80105d4:	080106ad 	.word	0x080106ad
 80105d8:	080106ad 	.word	0x080106ad
 80105dc:	080106ad 	.word	0x080106ad
 80105e0:	080106ad 	.word	0x080106ad
 80105e4:	080106ad 	.word	0x080106ad
 80105e8:	080106ad 	.word	0x080106ad
 80105ec:	080106ad 	.word	0x080106ad
 80105f0:	080106ad 	.word	0x080106ad
 80105f4:	080106ad 	.word	0x080106ad
 80105f8:	080106ad 	.word	0x080106ad
 80105fc:	080106ad 	.word	0x080106ad
 8010600:	080106ad 	.word	0x080106ad
 8010604:	080106ad 	.word	0x080106ad
 8010608:	080106ad 	.word	0x080106ad
 801060c:	080106ad 	.word	0x080106ad
 8010610:	080106ad 	.word	0x080106ad
 8010614:	080106ad 	.word	0x080106ad
 8010618:	080106ad 	.word	0x080106ad
 801061c:	080106ad 	.word	0x080106ad
 8010620:	080106ad 	.word	0x080106ad
 8010624:	080106ad 	.word	0x080106ad
 8010628:	080106ad 	.word	0x080106ad
 801062c:	080106ad 	.word	0x080106ad
 8010630:	080106ad 	.word	0x080106ad
 8010634:	080106ad 	.word	0x080106ad
 8010638:	080106ad 	.word	0x080106ad
 801063c:	080106ad 	.word	0x080106ad
 8010640:	080106ad 	.word	0x080106ad
 8010644:	080106a5 	.word	0x080106a5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010648:	f7f9 ffee 	bl	800a628 <HAL_RCC_GetPCLK1Freq>
 801064c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801064e:	e033      	b.n	80106b8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010650:	f7fa f800 	bl	800a654 <HAL_RCC_GetPCLK2Freq>
 8010654:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010656:	e02f      	b.n	80106b8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010658:	f107 0314 	add.w	r3, r7, #20
 801065c:	4618      	mov	r0, r3
 801065e:	f7fb f9a7 	bl	800b9b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010666:	e027      	b.n	80106b8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010668:	f107 0308 	add.w	r3, r7, #8
 801066c:	4618      	mov	r0, r3
 801066e:	f7fb faeb 	bl	800bc48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010676:	e01f      	b.n	80106b8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010678:	4b2b      	ldr	r3, [pc, #172]	; (8010728 <UART_SetConfig+0x94c>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f003 0320 	and.w	r3, r3, #32
 8010680:	2b00      	cmp	r3, #0
 8010682:	d009      	beq.n	8010698 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010684:	4b28      	ldr	r3, [pc, #160]	; (8010728 <UART_SetConfig+0x94c>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	08db      	lsrs	r3, r3, #3
 801068a:	f003 0303 	and.w	r3, r3, #3
 801068e:	4a27      	ldr	r2, [pc, #156]	; (801072c <UART_SetConfig+0x950>)
 8010690:	fa22 f303 	lsr.w	r3, r2, r3
 8010694:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010696:	e00f      	b.n	80106b8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8010698:	4b24      	ldr	r3, [pc, #144]	; (801072c <UART_SetConfig+0x950>)
 801069a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801069c:	e00c      	b.n	80106b8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801069e:	4b24      	ldr	r3, [pc, #144]	; (8010730 <UART_SetConfig+0x954>)
 80106a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106a2:	e009      	b.n	80106b8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80106a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80106a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106aa:	e005      	b.n	80106b8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80106ac:	2300      	movs	r3, #0
 80106ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80106b0:	2301      	movs	r3, #1
 80106b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80106b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80106b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	f000 8121 	beq.w	8010902 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106c4:	4a17      	ldr	r2, [pc, #92]	; (8010724 <UART_SetConfig+0x948>)
 80106c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106ca:	461a      	mov	r2, r3
 80106cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80106d2:	005a      	lsls	r2, r3, #1
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	085b      	lsrs	r3, r3, #1
 80106da:	441a      	add	r2, r3
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80106e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ea:	2b0f      	cmp	r3, #15
 80106ec:	d916      	bls.n	801071c <UART_SetConfig+0x940>
 80106ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106f4:	d212      	bcs.n	801071c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80106f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	f023 030f 	bic.w	r3, r3, #15
 80106fe:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010702:	085b      	lsrs	r3, r3, #1
 8010704:	b29b      	uxth	r3, r3
 8010706:	f003 0307 	and.w	r3, r3, #7
 801070a:	b29a      	uxth	r2, r3
 801070c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801070e:	4313      	orrs	r3, r2
 8010710:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010718:	60da      	str	r2, [r3, #12]
 801071a:	e0f2      	b.n	8010902 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 801071c:	2301      	movs	r3, #1
 801071e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010722:	e0ee      	b.n	8010902 <UART_SetConfig+0xb26>
 8010724:	0801af3c 	.word	0x0801af3c
 8010728:	58024400 	.word	0x58024400
 801072c:	03d09000 	.word	0x03d09000
 8010730:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8010734:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010738:	2b40      	cmp	r3, #64	; 0x40
 801073a:	f200 80b7 	bhi.w	80108ac <UART_SetConfig+0xad0>
 801073e:	a201      	add	r2, pc, #4	; (adr r2, 8010744 <UART_SetConfig+0x968>)
 8010740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010744:	08010849 	.word	0x08010849
 8010748:	08010851 	.word	0x08010851
 801074c:	080108ad 	.word	0x080108ad
 8010750:	080108ad 	.word	0x080108ad
 8010754:	08010859 	.word	0x08010859
 8010758:	080108ad 	.word	0x080108ad
 801075c:	080108ad 	.word	0x080108ad
 8010760:	080108ad 	.word	0x080108ad
 8010764:	08010869 	.word	0x08010869
 8010768:	080108ad 	.word	0x080108ad
 801076c:	080108ad 	.word	0x080108ad
 8010770:	080108ad 	.word	0x080108ad
 8010774:	080108ad 	.word	0x080108ad
 8010778:	080108ad 	.word	0x080108ad
 801077c:	080108ad 	.word	0x080108ad
 8010780:	080108ad 	.word	0x080108ad
 8010784:	08010879 	.word	0x08010879
 8010788:	080108ad 	.word	0x080108ad
 801078c:	080108ad 	.word	0x080108ad
 8010790:	080108ad 	.word	0x080108ad
 8010794:	080108ad 	.word	0x080108ad
 8010798:	080108ad 	.word	0x080108ad
 801079c:	080108ad 	.word	0x080108ad
 80107a0:	080108ad 	.word	0x080108ad
 80107a4:	080108ad 	.word	0x080108ad
 80107a8:	080108ad 	.word	0x080108ad
 80107ac:	080108ad 	.word	0x080108ad
 80107b0:	080108ad 	.word	0x080108ad
 80107b4:	080108ad 	.word	0x080108ad
 80107b8:	080108ad 	.word	0x080108ad
 80107bc:	080108ad 	.word	0x080108ad
 80107c0:	080108ad 	.word	0x080108ad
 80107c4:	0801089f 	.word	0x0801089f
 80107c8:	080108ad 	.word	0x080108ad
 80107cc:	080108ad 	.word	0x080108ad
 80107d0:	080108ad 	.word	0x080108ad
 80107d4:	080108ad 	.word	0x080108ad
 80107d8:	080108ad 	.word	0x080108ad
 80107dc:	080108ad 	.word	0x080108ad
 80107e0:	080108ad 	.word	0x080108ad
 80107e4:	080108ad 	.word	0x080108ad
 80107e8:	080108ad 	.word	0x080108ad
 80107ec:	080108ad 	.word	0x080108ad
 80107f0:	080108ad 	.word	0x080108ad
 80107f4:	080108ad 	.word	0x080108ad
 80107f8:	080108ad 	.word	0x080108ad
 80107fc:	080108ad 	.word	0x080108ad
 8010800:	080108ad 	.word	0x080108ad
 8010804:	080108ad 	.word	0x080108ad
 8010808:	080108ad 	.word	0x080108ad
 801080c:	080108ad 	.word	0x080108ad
 8010810:	080108ad 	.word	0x080108ad
 8010814:	080108ad 	.word	0x080108ad
 8010818:	080108ad 	.word	0x080108ad
 801081c:	080108ad 	.word	0x080108ad
 8010820:	080108ad 	.word	0x080108ad
 8010824:	080108ad 	.word	0x080108ad
 8010828:	080108ad 	.word	0x080108ad
 801082c:	080108ad 	.word	0x080108ad
 8010830:	080108ad 	.word	0x080108ad
 8010834:	080108ad 	.word	0x080108ad
 8010838:	080108ad 	.word	0x080108ad
 801083c:	080108ad 	.word	0x080108ad
 8010840:	080108ad 	.word	0x080108ad
 8010844:	080108a5 	.word	0x080108a5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010848:	f7f9 feee 	bl	800a628 <HAL_RCC_GetPCLK1Freq>
 801084c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801084e:	e033      	b.n	80108b8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010850:	f7f9 ff00 	bl	800a654 <HAL_RCC_GetPCLK2Freq>
 8010854:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010856:	e02f      	b.n	80108b8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010858:	f107 0314 	add.w	r3, r7, #20
 801085c:	4618      	mov	r0, r3
 801085e:	f7fb f8a7 	bl	800b9b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010862:	69bb      	ldr	r3, [r7, #24]
 8010864:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010866:	e027      	b.n	80108b8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010868:	f107 0308 	add.w	r3, r7, #8
 801086c:	4618      	mov	r0, r3
 801086e:	f7fb f9eb 	bl	800bc48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010876:	e01f      	b.n	80108b8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010878:	4b2c      	ldr	r3, [pc, #176]	; (801092c <UART_SetConfig+0xb50>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	f003 0320 	and.w	r3, r3, #32
 8010880:	2b00      	cmp	r3, #0
 8010882:	d009      	beq.n	8010898 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010884:	4b29      	ldr	r3, [pc, #164]	; (801092c <UART_SetConfig+0xb50>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	08db      	lsrs	r3, r3, #3
 801088a:	f003 0303 	and.w	r3, r3, #3
 801088e:	4a28      	ldr	r2, [pc, #160]	; (8010930 <UART_SetConfig+0xb54>)
 8010890:	fa22 f303 	lsr.w	r3, r2, r3
 8010894:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010896:	e00f      	b.n	80108b8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8010898:	4b25      	ldr	r3, [pc, #148]	; (8010930 <UART_SetConfig+0xb54>)
 801089a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801089c:	e00c      	b.n	80108b8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801089e:	4b25      	ldr	r3, [pc, #148]	; (8010934 <UART_SetConfig+0xb58>)
 80108a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108a2:	e009      	b.n	80108b8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80108a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108aa:	e005      	b.n	80108b8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80108ac:	2300      	movs	r3, #0
 80108ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80108b0:	2301      	movs	r3, #1
 80108b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80108b6:	bf00      	nop
    }

    if (pclk != 0U)
 80108b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d021      	beq.n	8010902 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c2:	4a1d      	ldr	r2, [pc, #116]	; (8010938 <UART_SetConfig+0xb5c>)
 80108c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108c8:	461a      	mov	r2, r3
 80108ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	685b      	ldr	r3, [r3, #4]
 80108d4:	085b      	lsrs	r3, r3, #1
 80108d6:	441a      	add	r2, r3
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	685b      	ldr	r3, [r3, #4]
 80108dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80108e0:	b29b      	uxth	r3, r3
 80108e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80108e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e6:	2b0f      	cmp	r3, #15
 80108e8:	d908      	bls.n	80108fc <UART_SetConfig+0xb20>
 80108ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108f0:	d204      	bcs.n	80108fc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108f8:	60da      	str	r2, [r3, #12]
 80108fa:	e002      	b.n	8010902 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80108fc:	2301      	movs	r3, #1
 80108fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2201      	movs	r2, #1
 8010906:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2201      	movs	r2, #1
 801090e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2200      	movs	r2, #0
 8010916:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 801091e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010922:	4618      	mov	r0, r3
 8010924:	3738      	adds	r7, #56	; 0x38
 8010926:	46bd      	mov	sp, r7
 8010928:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 801092c:	58024400 	.word	0x58024400
 8010930:	03d09000 	.word	0x03d09000
 8010934:	003d0900 	.word	0x003d0900
 8010938:	0801af3c 	.word	0x0801af3c

0801093c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010948:	f003 0301 	and.w	r3, r3, #1
 801094c:	2b00      	cmp	r3, #0
 801094e:	d00a      	beq.n	8010966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	430a      	orrs	r2, r1
 8010964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801096a:	f003 0302 	and.w	r3, r3, #2
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00a      	beq.n	8010988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	430a      	orrs	r2, r1
 8010986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801098c:	f003 0304 	and.w	r3, r3, #4
 8010990:	2b00      	cmp	r3, #0
 8010992:	d00a      	beq.n	80109aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	430a      	orrs	r2, r1
 80109a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109ae:	f003 0308 	and.w	r3, r3, #8
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00a      	beq.n	80109cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	430a      	orrs	r2, r1
 80109ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109d0:	f003 0310 	and.w	r3, r3, #16
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d00a      	beq.n	80109ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	689b      	ldr	r3, [r3, #8]
 80109de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	430a      	orrs	r2, r1
 80109ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109f2:	f003 0320 	and.w	r3, r3, #32
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00a      	beq.n	8010a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	689b      	ldr	r3, [r3, #8]
 8010a00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	430a      	orrs	r2, r1
 8010a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d01a      	beq.n	8010a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	430a      	orrs	r2, r1
 8010a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a3a:	d10a      	bne.n	8010a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	685b      	ldr	r3, [r3, #4]
 8010a42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	430a      	orrs	r2, r1
 8010a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d00a      	beq.n	8010a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	430a      	orrs	r2, r1
 8010a72:	605a      	str	r2, [r3, #4]
  }
}
 8010a74:	bf00      	nop
 8010a76:	370c      	adds	r7, #12
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr

08010a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b086      	sub	sp, #24
 8010a84:	af02      	add	r7, sp, #8
 8010a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8010a90:	f7f3 fd8a 	bl	80045a8 <HAL_GetTick>
 8010a94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f003 0308 	and.w	r3, r3, #8
 8010aa0:	2b08      	cmp	r3, #8
 8010aa2:	d10e      	bne.n	8010ac2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010aa8:	9300      	str	r3, [sp, #0]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2200      	movs	r2, #0
 8010aae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f000 f82c 	bl	8010b10 <UART_WaitOnFlagUntilTimeout>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d001      	beq.n	8010ac2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010abe:	2303      	movs	r3, #3
 8010ac0:	e022      	b.n	8010b08 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	f003 0304 	and.w	r3, r3, #4
 8010acc:	2b04      	cmp	r3, #4
 8010ace:	d10e      	bne.n	8010aee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ad0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010ad4:	9300      	str	r3, [sp, #0]
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f000 f816 	bl	8010b10 <UART_WaitOnFlagUntilTimeout>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d001      	beq.n	8010aee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010aea:	2303      	movs	r3, #3
 8010aec:	e00c      	b.n	8010b08 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2220      	movs	r2, #32
 8010af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2220      	movs	r2, #32
 8010afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2200      	movs	r2, #0
 8010b02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010b06:	2300      	movs	r3, #0
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3710      	adds	r7, #16
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	60f8      	str	r0, [r7, #12]
 8010b18:	60b9      	str	r1, [r7, #8]
 8010b1a:	603b      	str	r3, [r7, #0]
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b20:	e062      	b.n	8010be8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b22:	69bb      	ldr	r3, [r7, #24]
 8010b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b28:	d05e      	beq.n	8010be8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b2a:	f7f3 fd3d 	bl	80045a8 <HAL_GetTick>
 8010b2e:	4602      	mov	r2, r0
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	1ad3      	subs	r3, r2, r3
 8010b34:	69ba      	ldr	r2, [r7, #24]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d302      	bcc.n	8010b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8010b3a:	69bb      	ldr	r3, [r7, #24]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d11d      	bne.n	8010b7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b4e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	689a      	ldr	r2, [r3, #8]
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f022 0201 	bic.w	r2, r2, #1
 8010b5e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	2220      	movs	r2, #32
 8010b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2220      	movs	r2, #32
 8010b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2200      	movs	r2, #0
 8010b74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8010b78:	2303      	movs	r3, #3
 8010b7a:	e045      	b.n	8010c08 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	f003 0304 	and.w	r3, r3, #4
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d02e      	beq.n	8010be8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	69db      	ldr	r3, [r3, #28]
 8010b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b98:	d126      	bne.n	8010be8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010ba2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	689a      	ldr	r2, [r3, #8]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f022 0201 	bic.w	r2, r2, #1
 8010bc2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2220      	movs	r2, #32
 8010bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2220      	movs	r2, #32
 8010bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	2220      	movs	r2, #32
 8010bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2200      	movs	r2, #0
 8010be0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8010be4:	2303      	movs	r3, #3
 8010be6:	e00f      	b.n	8010c08 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	69da      	ldr	r2, [r3, #28]
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	4013      	ands	r3, r2
 8010bf2:	68ba      	ldr	r2, [r7, #8]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	bf0c      	ite	eq
 8010bf8:	2301      	moveq	r3, #1
 8010bfa:	2300      	movne	r3, #0
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	461a      	mov	r2, r3
 8010c00:	79fb      	ldrb	r3, [r7, #7]
 8010c02:	429a      	cmp	r2, r3
 8010c04:	d08d      	beq.n	8010b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c06:	2300      	movs	r3, #0
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3710      	adds	r7, #16
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010c10:	b480      	push	{r7}
 8010c12:	b083      	sub	sp, #12
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	681a      	ldr	r2, [r3, #0]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010c26:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	689a      	ldr	r2, [r3, #8]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010c36:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2220      	movs	r2, #32
 8010c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8010c40:	bf00      	nop
 8010c42:	370c      	adds	r7, #12
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b083      	sub	sp, #12
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010c62:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	6899      	ldr	r1, [r3, #8]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681a      	ldr	r2, [r3, #0]
 8010c6e:	4b08      	ldr	r3, [pc, #32]	; (8010c90 <UART_EndRxTransfer+0x44>)
 8010c70:	400b      	ands	r3, r1
 8010c72:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2220      	movs	r2, #32
 8010c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2200      	movs	r2, #0
 8010c80:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8010c82:	bf00      	nop
 8010c84:	370c      	adds	r7, #12
 8010c86:	46bd      	mov	sp, r7
 8010c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8c:	4770      	bx	lr
 8010c8e:	bf00      	nop
 8010c90:	effffffe 	.word	0xeffffffe

08010c94 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b084      	sub	sp, #16
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ca0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	69db      	ldr	r3, [r3, #28]
 8010ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010caa:	d01f      	beq.n	8010cec <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010cc2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	689a      	ldr	r2, [r3, #8]
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	f022 0201 	bic.w	r2, r2, #1
 8010cd2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	689a      	ldr	r2, [r3, #8]
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ce2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	2220      	movs	r2, #32
 8010ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010cec:	68f8      	ldr	r0, [r7, #12]
 8010cee:	f7ff f861 	bl	800fdb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010cf2:	bf00      	nop
 8010cf4:	3710      	adds	r7, #16
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}

08010cfa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b084      	sub	sp, #16
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010d08:	68f8      	ldr	r0, [r7, #12]
 8010d0a:	f7ef ff0f 	bl	8000b2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d0e:	bf00      	nop
 8010d10:	3710      	adds	r7, #16
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}

08010d16 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010d16:	b580      	push	{r7, lr}
 8010d18:	b086      	sub	sp, #24
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d22:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d2a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d32:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010d34:	697b      	ldr	r3, [r7, #20]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	689b      	ldr	r3, [r3, #8]
 8010d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d3e:	2b80      	cmp	r3, #128	; 0x80
 8010d40:	d109      	bne.n	8010d56 <UART_DMAError+0x40>
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	2b21      	cmp	r3, #33	; 0x21
 8010d46:	d106      	bne.n	8010d56 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010d50:	6978      	ldr	r0, [r7, #20]
 8010d52:	f7ff ff5d 	bl	8010c10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	689b      	ldr	r3, [r3, #8]
 8010d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d60:	2b40      	cmp	r3, #64	; 0x40
 8010d62:	d109      	bne.n	8010d78 <UART_DMAError+0x62>
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	2b22      	cmp	r3, #34	; 0x22
 8010d68:	d106      	bne.n	8010d78 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010d72:	6978      	ldr	r0, [r7, #20]
 8010d74:	f7ff ff6a 	bl	8010c4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d7e:	f043 0210 	orr.w	r2, r3, #16
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d88:	6978      	ldr	r0, [r7, #20]
 8010d8a:	f7ff f81d 	bl	800fdc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d8e:	bf00      	nop
 8010d90:	3718      	adds	r7, #24
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}

08010d96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010d96:	b480      	push	{r7}
 8010d98:	b085      	sub	sp, #20
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	d101      	bne.n	8010dac <HAL_UARTEx_DisableFifoMode+0x16>
 8010da8:	2302      	movs	r3, #2
 8010daa:	e027      	b.n	8010dfc <HAL_UARTEx_DisableFifoMode+0x66>
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2201      	movs	r2, #1
 8010db0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2224      	movs	r2, #36	; 0x24
 8010db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	681a      	ldr	r2, [r3, #0]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	f022 0201 	bic.w	r2, r2, #1
 8010dd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010dda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2200      	movs	r2, #0
 8010de0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	68fa      	ldr	r2, [r7, #12]
 8010de8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2220      	movs	r2, #32
 8010dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2200      	movs	r2, #0
 8010df6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010dfa:	2300      	movs	r3, #0
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3714      	adds	r7, #20
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr

08010e08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010e18:	2b01      	cmp	r3, #1
 8010e1a:	d101      	bne.n	8010e20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010e1c:	2302      	movs	r3, #2
 8010e1e:	e02d      	b.n	8010e7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2201      	movs	r2, #1
 8010e24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2224      	movs	r2, #36	; 0x24
 8010e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f022 0201 	bic.w	r2, r2, #1
 8010e46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	689b      	ldr	r3, [r3, #8]
 8010e4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	683a      	ldr	r2, [r7, #0]
 8010e58:	430a      	orrs	r2, r1
 8010e5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f000 f84f 	bl	8010f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	68fa      	ldr	r2, [r7, #12]
 8010e68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2220      	movs	r2, #32
 8010e6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2200      	movs	r2, #0
 8010e76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010e7a:	2300      	movs	r3, #0
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3710      	adds	r7, #16
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d101      	bne.n	8010e9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010e98:	2302      	movs	r3, #2
 8010e9a:	e02d      	b.n	8010ef8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2224      	movs	r2, #36	; 0x24
 8010ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f022 0201 	bic.w	r2, r2, #1
 8010ec2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	683a      	ldr	r2, [r7, #0]
 8010ed4:	430a      	orrs	r2, r1
 8010ed6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f000 f811 	bl	8010f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	68fa      	ldr	r2, [r7, #12]
 8010ee4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2220      	movs	r2, #32
 8010eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010ef6:	2300      	movs	r3, #0
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3710      	adds	r7, #16
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}

08010f00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010f00:	b480      	push	{r7}
 8010f02:	b089      	sub	sp, #36	; 0x24
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010f08:	4a2f      	ldr	r2, [pc, #188]	; (8010fc8 <UARTEx_SetNbDataToProcess+0xc8>)
 8010f0a:	f107 0314 	add.w	r3, r7, #20
 8010f0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f12:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8010f16:	4a2d      	ldr	r2, [pc, #180]	; (8010fcc <UARTEx_SetNbDataToProcess+0xcc>)
 8010f18:	f107 030c 	add.w	r3, r7, #12
 8010f1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f20:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d108      	bne.n	8010f3e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2201      	movs	r2, #1
 8010f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2201      	movs	r2, #1
 8010f38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010f3c:	e03d      	b.n	8010fba <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010f3e:	2310      	movs	r3, #16
 8010f40:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010f42:	2310      	movs	r3, #16
 8010f44:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	689b      	ldr	r3, [r3, #8]
 8010f4c:	0e5b      	lsrs	r3, r3, #25
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	f003 0307 	and.w	r3, r3, #7
 8010f54:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	689b      	ldr	r3, [r3, #8]
 8010f5c:	0f5b      	lsrs	r3, r3, #29
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	f003 0307 	and.w	r3, r3, #7
 8010f64:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8010f66:	7fbb      	ldrb	r3, [r7, #30]
 8010f68:	7f3a      	ldrb	r2, [r7, #28]
 8010f6a:	f107 0120 	add.w	r1, r7, #32
 8010f6e:	440a      	add	r2, r1
 8010f70:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010f74:	fb02 f303 	mul.w	r3, r2, r3
 8010f78:	7f3a      	ldrb	r2, [r7, #28]
 8010f7a:	f107 0120 	add.w	r1, r7, #32
 8010f7e:	440a      	add	r2, r1
 8010f80:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010f84:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f88:	b29a      	uxth	r2, r3
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8010f90:	7ffb      	ldrb	r3, [r7, #31]
 8010f92:	7f7a      	ldrb	r2, [r7, #29]
 8010f94:	f107 0120 	add.w	r1, r7, #32
 8010f98:	440a      	add	r2, r1
 8010f9a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010f9e:	fb02 f303 	mul.w	r3, r2, r3
 8010fa2:	7f7a      	ldrb	r2, [r7, #29]
 8010fa4:	f107 0120 	add.w	r1, r7, #32
 8010fa8:	440a      	add	r2, r1
 8010faa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010fae:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fb2:	b29a      	uxth	r2, r3
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010fba:	bf00      	nop
 8010fbc:	3724      	adds	r7, #36	; 0x24
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc4:	4770      	bx	lr
 8010fc6:	bf00      	nop
 8010fc8:	0801ae7c 	.word	0x0801ae7c
 8010fcc:	0801ae84 	.word	0x0801ae84

08010fd0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010fd0:	b084      	sub	sp, #16
 8010fd2:	b480      	push	{r7}
 8010fd4:	b085      	sub	sp, #20
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	6078      	str	r0, [r7, #4]
 8010fda:	f107 001c 	add.w	r0, r7, #28
 8010fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010fe6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8010fe8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010fea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8010fee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8010ff2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8010ff6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010ff8:	68fa      	ldr	r2, [r7, #12]
 8010ffa:	4313      	orrs	r3, r2
 8010ffc:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	685a      	ldr	r2, [r3, #4]
 8011002:	4b07      	ldr	r3, [pc, #28]	; (8011020 <SDMMC_Init+0x50>)
 8011004:	4013      	ands	r3, r2
 8011006:	68fa      	ldr	r2, [r7, #12]
 8011008:	431a      	orrs	r2, r3
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801100e:	2300      	movs	r3, #0
}
 8011010:	4618      	mov	r0, r3
 8011012:	3714      	adds	r7, #20
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	b004      	add	sp, #16
 801101c:	4770      	bx	lr
 801101e:	bf00      	nop
 8011020:	ffc02c00 	.word	0xffc02c00

08011024 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011024:	b480      	push	{r7}
 8011026:	b083      	sub	sp, #12
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011032:	4618      	mov	r0, r3
 8011034:	370c      	adds	r7, #12
 8011036:	46bd      	mov	sp, r7
 8011038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103c:	4770      	bx	lr

0801103e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801103e:	b480      	push	{r7}
 8011040:	b083      	sub	sp, #12
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
 8011046:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011052:	2300      	movs	r3, #0
}
 8011054:	4618      	mov	r0, r3
 8011056:	370c      	adds	r7, #12
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr

08011060 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011060:	b480      	push	{r7}
 8011062:	b083      	sub	sp, #12
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	f043 0203 	orr.w	r2, r3, #3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011074:	2300      	movs	r3, #0
}
 8011076:	4618      	mov	r0, r3
 8011078:	370c      	adds	r7, #12
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr

08011082 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011082:	b480      	push	{r7}
 8011084:	b083      	sub	sp, #12
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	f003 0303 	and.w	r3, r3, #3
}
 8011092:	4618      	mov	r0, r3
 8011094:	370c      	adds	r7, #12
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr
	...

080110a0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80110a0:	b480      	push	{r7}
 80110a2:	b085      	sub	sp, #20
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80110aa:	2300      	movs	r3, #0
 80110ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	681a      	ldr	r2, [r3, #0]
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80110c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80110ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110cc:	68fa      	ldr	r2, [r7, #12]
 80110ce:	4313      	orrs	r3, r2
 80110d0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	68da      	ldr	r2, [r3, #12]
 80110d6:	4b06      	ldr	r3, [pc, #24]	; (80110f0 <SDMMC_SendCommand+0x50>)
 80110d8:	4013      	ands	r3, r2
 80110da:	68fa      	ldr	r2, [r7, #12]
 80110dc:	431a      	orrs	r2, r3
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80110e2:	2300      	movs	r3, #0
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr
 80110f0:	fffee0c0 	.word	0xfffee0c0

080110f4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80110f4:	b480      	push	{r7}
 80110f6:	b083      	sub	sp, #12
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	691b      	ldr	r3, [r3, #16]
 8011100:	b2db      	uxtb	r3, r3
}
 8011102:	4618      	mov	r0, r3
 8011104:	370c      	adds	r7, #12
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr

0801110e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801110e:	b480      	push	{r7}
 8011110:	b085      	sub	sp, #20
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
 8011116:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	3314      	adds	r3, #20
 801111c:	461a      	mov	r2, r3
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	4413      	add	r3, r2
 8011122:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	681b      	ldr	r3, [r3, #0]
}
 8011128:	4618      	mov	r0, r3
 801112a:	3714      	adds	r7, #20
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr

08011134 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8011134:	b480      	push	{r7}
 8011136:	b085      	sub	sp, #20
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801113e:	2300      	movs	r3, #0
 8011140:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	681a      	ldr	r2, [r3, #0]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	685a      	ldr	r2, [r3, #4]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801115a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011160:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011166:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011168:	68fa      	ldr	r2, [r7, #12]
 801116a:	4313      	orrs	r3, r2
 801116c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011172:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	431a      	orrs	r2, r3
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801117e:	2300      	movs	r3, #0

}
 8011180:	4618      	mov	r0, r3
 8011182:	3714      	adds	r7, #20
 8011184:	46bd      	mov	sp, r7
 8011186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118a:	4770      	bx	lr

0801118c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b088      	sub	sp, #32
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801119a:	2310      	movs	r3, #16
 801119c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801119e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111a4:	2300      	movs	r3, #0
 80111a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111ae:	f107 0308 	add.w	r3, r7, #8
 80111b2:	4619      	mov	r1, r3
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f7ff ff73 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80111ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80111be:	2110      	movs	r1, #16
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f000 faaf 	bl	8011724 <SDMMC_GetCmdResp1>
 80111c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111c8:	69fb      	ldr	r3, [r7, #28]
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3720      	adds	r7, #32
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b088      	sub	sp, #32
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	6078      	str	r0, [r7, #4]
 80111da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80111e0:	2311      	movs	r3, #17
 80111e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111ea:	2300      	movs	r3, #0
 80111ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111f4:	f107 0308 	add.w	r3, r7, #8
 80111f8:	4619      	mov	r1, r3
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f7ff ff50 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011200:	f241 3288 	movw	r2, #5000	; 0x1388
 8011204:	2111      	movs	r1, #17
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f000 fa8c 	bl	8011724 <SDMMC_GetCmdResp1>
 801120c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801120e:	69fb      	ldr	r3, [r7, #28]
}
 8011210:	4618      	mov	r0, r3
 8011212:	3720      	adds	r7, #32
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b088      	sub	sp, #32
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011226:	2312      	movs	r3, #18
 8011228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801122a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801122e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011230:	2300      	movs	r3, #0
 8011232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011238:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801123a:	f107 0308 	add.w	r3, r7, #8
 801123e:	4619      	mov	r1, r3
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7ff ff2d 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011246:	f241 3288 	movw	r2, #5000	; 0x1388
 801124a:	2112      	movs	r1, #18
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f000 fa69 	bl	8011724 <SDMMC_GetCmdResp1>
 8011252:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011254:	69fb      	ldr	r3, [r7, #28]
}
 8011256:	4618      	mov	r0, r3
 8011258:	3720      	adds	r7, #32
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}

0801125e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801125e:	b580      	push	{r7, lr}
 8011260:	b088      	sub	sp, #32
 8011262:	af00      	add	r7, sp, #0
 8011264:	6078      	str	r0, [r7, #4]
 8011266:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801126c:	2318      	movs	r3, #24
 801126e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011274:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011276:	2300      	movs	r3, #0
 8011278:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801127a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801127e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011280:	f107 0308 	add.w	r3, r7, #8
 8011284:	4619      	mov	r1, r3
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f7ff ff0a 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801128c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011290:	2118      	movs	r1, #24
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f000 fa46 	bl	8011724 <SDMMC_GetCmdResp1>
 8011298:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801129a:	69fb      	ldr	r3, [r7, #28]
}
 801129c:	4618      	mov	r0, r3
 801129e:	3720      	adds	r7, #32
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b088      	sub	sp, #32
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80112b2:	2319      	movs	r3, #25
 80112b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112bc:	2300      	movs	r3, #0
 80112be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112c6:	f107 0308 	add.w	r3, r7, #8
 80112ca:	4619      	mov	r1, r3
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7ff fee7 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80112d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80112d6:	2119      	movs	r1, #25
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f000 fa23 	bl	8011724 <SDMMC_GetCmdResp1>
 80112de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112e0:	69fb      	ldr	r3, [r7, #28]
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3720      	adds	r7, #32
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
	...

080112ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b088      	sub	sp, #32
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80112f4:	2300      	movs	r3, #0
 80112f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80112f8:	230c      	movs	r3, #12
 80112fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011302:	2300      	movs	r3, #0
 8011304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801130a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	68db      	ldr	r3, [r3, #12]
 8011310:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011324:	f107 0308 	add.w	r3, r7, #8
 8011328:	4619      	mov	r1, r3
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f7ff feb8 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011330:	4a0b      	ldr	r2, [pc, #44]	; (8011360 <SDMMC_CmdStopTransfer+0x74>)
 8011332:	210c      	movs	r1, #12
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f000 f9f5 	bl	8011724 <SDMMC_GetCmdResp1>
 801133a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011348:	69fb      	ldr	r3, [r7, #28]
 801134a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801134e:	d101      	bne.n	8011354 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011350:	2300      	movs	r3, #0
 8011352:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011354:	69fb      	ldr	r3, [r7, #28]
}
 8011356:	4618      	mov	r0, r3
 8011358:	3720      	adds	r7, #32
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
 801135e:	bf00      	nop
 8011360:	05f5e100 	.word	0x05f5e100

08011364 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b08a      	sub	sp, #40	; 0x28
 8011368:	af00      	add	r7, sp, #0
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011374:	2307      	movs	r3, #7
 8011376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011378:	f44f 7380 	mov.w	r3, #256	; 0x100
 801137c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801137e:	2300      	movs	r3, #0
 8011380:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011386:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011388:	f107 0310 	add.w	r3, r7, #16
 801138c:	4619      	mov	r1, r3
 801138e:	68f8      	ldr	r0, [r7, #12]
 8011390:	f7ff fe86 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011394:	f241 3288 	movw	r2, #5000	; 0x1388
 8011398:	2107      	movs	r1, #7
 801139a:	68f8      	ldr	r0, [r7, #12]
 801139c:	f000 f9c2 	bl	8011724 <SDMMC_GetCmdResp1>
 80113a0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80113a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3728      	adds	r7, #40	; 0x28
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b088      	sub	sp, #32
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80113b4:	2300      	movs	r3, #0
 80113b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80113b8:	2300      	movs	r3, #0
 80113ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80113bc:	2300      	movs	r3, #0
 80113be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113c0:	2300      	movs	r3, #0
 80113c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113ca:	f107 0308 	add.w	r3, r7, #8
 80113ce:	4619      	mov	r1, r3
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f7ff fe65 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f000 f976 	bl	80116c8 <SDMMC_GetCmdError>
 80113dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113de:	69fb      	ldr	r3, [r7, #28]
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3720      	adds	r7, #32
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b088      	sub	sp, #32
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80113f0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80113f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80113f6:	2308      	movs	r3, #8
 80113f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80113fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011400:	2300      	movs	r3, #0
 8011402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011408:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801140a:	f107 0308 	add.w	r3, r7, #8
 801140e:	4619      	mov	r1, r3
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f7ff fe45 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f000 fb78 	bl	8011b0c <SDMMC_GetCmdResp7>
 801141c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801141e:	69fb      	ldr	r3, [r7, #28]
}
 8011420:	4618      	mov	r0, r3
 8011422:	3720      	adds	r7, #32
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b088      	sub	sp, #32
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
 8011430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011436:	2337      	movs	r3, #55	; 0x37
 8011438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801143a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801143e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011440:	2300      	movs	r3, #0
 8011442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011448:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801144a:	f107 0308 	add.w	r3, r7, #8
 801144e:	4619      	mov	r1, r3
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f7ff fe25 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011456:	f241 3288 	movw	r2, #5000	; 0x1388
 801145a:	2137      	movs	r1, #55	; 0x37
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f000 f961 	bl	8011724 <SDMMC_GetCmdResp1>
 8011462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011464:	69fb      	ldr	r3, [r7, #28]
}
 8011466:	4618      	mov	r0, r3
 8011468:	3720      	adds	r7, #32
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}

0801146e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801146e:	b580      	push	{r7, lr}
 8011470:	b088      	sub	sp, #32
 8011472:	af00      	add	r7, sp, #0
 8011474:	6078      	str	r0, [r7, #4]
 8011476:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801147c:	2329      	movs	r3, #41	; 0x29
 801147e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011486:	2300      	movs	r3, #0
 8011488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801148a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801148e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011490:	f107 0308 	add.w	r3, r7, #8
 8011494:	4619      	mov	r1, r3
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f7ff fe02 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	f000 fa7d 	bl	801199c <SDMMC_GetCmdResp3>
 80114a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114a4:	69fb      	ldr	r3, [r7, #28]
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3720      	adds	r7, #32
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}

080114ae <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80114ae:	b580      	push	{r7, lr}
 80114b0:	b088      	sub	sp, #32
 80114b2:	af00      	add	r7, sp, #0
 80114b4:	6078      	str	r0, [r7, #4]
 80114b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80114bc:	2306      	movs	r3, #6
 80114be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114c6:	2300      	movs	r3, #0
 80114c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114d0:	f107 0308 	add.w	r3, r7, #8
 80114d4:	4619      	mov	r1, r3
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f7ff fde2 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80114dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80114e0:	2106      	movs	r1, #6
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 f91e 	bl	8011724 <SDMMC_GetCmdResp1>
 80114e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114ea:	69fb      	ldr	r3, [r7, #28]
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3720      	adds	r7, #32
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b088      	sub	sp, #32
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80114fc:	2300      	movs	r3, #0
 80114fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011500:	2333      	movs	r3, #51	; 0x33
 8011502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801150a:	2300      	movs	r3, #0
 801150c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011512:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011514:	f107 0308 	add.w	r3, r7, #8
 8011518:	4619      	mov	r1, r3
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f7ff fdc0 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011520:	f241 3288 	movw	r2, #5000	; 0x1388
 8011524:	2133      	movs	r1, #51	; 0x33
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f000 f8fc 	bl	8011724 <SDMMC_GetCmdResp1>
 801152c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801152e:	69fb      	ldr	r3, [r7, #28]
}
 8011530:	4618      	mov	r0, r3
 8011532:	3720      	adds	r7, #32
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b088      	sub	sp, #32
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011540:	2300      	movs	r3, #0
 8011542:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011544:	2302      	movs	r3, #2
 8011546:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011548:	f44f 7340 	mov.w	r3, #768	; 0x300
 801154c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801154e:	2300      	movs	r3, #0
 8011550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011556:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011558:	f107 0308 	add.w	r3, r7, #8
 801155c:	4619      	mov	r1, r3
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f7ff fd9e 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f000 f9cf 	bl	8011908 <SDMMC_GetCmdResp2>
 801156a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801156c:	69fb      	ldr	r3, [r7, #28]
}
 801156e:	4618      	mov	r0, r3
 8011570:	3720      	adds	r7, #32
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}

08011576 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011576:	b580      	push	{r7, lr}
 8011578:	b088      	sub	sp, #32
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
 801157e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011584:	2309      	movs	r3, #9
 8011586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011588:	f44f 7340 	mov.w	r3, #768	; 0x300
 801158c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801158e:	2300      	movs	r3, #0
 8011590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011596:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011598:	f107 0308 	add.w	r3, r7, #8
 801159c:	4619      	mov	r1, r3
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f7ff fd7e 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f000 f9af 	bl	8011908 <SDMMC_GetCmdResp2>
 80115aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115ac:	69fb      	ldr	r3, [r7, #28]
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3720      	adds	r7, #32
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}

080115b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80115b6:	b580      	push	{r7, lr}
 80115b8:	b088      	sub	sp, #32
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	6078      	str	r0, [r7, #4]
 80115be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80115c0:	2300      	movs	r3, #0
 80115c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80115c4:	2303      	movs	r3, #3
 80115c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80115c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80115cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115ce:	2300      	movs	r3, #0
 80115d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115d8:	f107 0308 	add.w	r3, r7, #8
 80115dc:	4619      	mov	r1, r3
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f7ff fd5e 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80115e4:	683a      	ldr	r2, [r7, #0]
 80115e6:	2103      	movs	r1, #3
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f000 fa17 	bl	8011a1c <SDMMC_GetCmdResp6>
 80115ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115f0:	69fb      	ldr	r3, [r7, #28]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3720      	adds	r7, #32
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}

080115fa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80115fa:	b580      	push	{r7, lr}
 80115fc:	b088      	sub	sp, #32
 80115fe:	af00      	add	r7, sp, #0
 8011600:	6078      	str	r0, [r7, #4]
 8011602:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011608:	230d      	movs	r3, #13
 801160a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801160c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011612:	2300      	movs	r3, #0
 8011614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801161a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801161c:	f107 0308 	add.w	r3, r7, #8
 8011620:	4619      	mov	r1, r3
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f7ff fd3c 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011628:	f241 3288 	movw	r2, #5000	; 0x1388
 801162c:	210d      	movs	r1, #13
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f000 f878 	bl	8011724 <SDMMC_GetCmdResp1>
 8011634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011636:	69fb      	ldr	r3, [r7, #28]
}
 8011638:	4618      	mov	r0, r3
 801163a:	3720      	adds	r7, #32
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b088      	sub	sp, #32
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011648:	2300      	movs	r3, #0
 801164a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801164c:	230d      	movs	r3, #13
 801164e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011656:	2300      	movs	r3, #0
 8011658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801165a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801165e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011660:	f107 0308 	add.w	r3, r7, #8
 8011664:	4619      	mov	r1, r3
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f7ff fd1a 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801166c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011670:	210d      	movs	r1, #13
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f000 f856 	bl	8011724 <SDMMC_GetCmdResp1>
 8011678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801167a:	69fb      	ldr	r3, [r7, #28]
}
 801167c:	4618      	mov	r0, r3
 801167e:	3720      	adds	r7, #32
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b088      	sub	sp, #32
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 801168c:	2300      	movs	r3, #0
 801168e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8011690:	230b      	movs	r3, #11
 8011692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801169a:	2300      	movs	r3, #0
 801169c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801169e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116a4:	f107 0308 	add.w	r3, r7, #8
 80116a8:	4619      	mov	r1, r3
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f7ff fcf8 	bl	80110a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80116b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80116b4:	210b      	movs	r1, #11
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f000 f834 	bl	8011724 <SDMMC_GetCmdResp1>
 80116bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116be:	69fb      	ldr	r3, [r7, #28]
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	3720      	adds	r7, #32
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b085      	sub	sp, #20
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116d0:	4b11      	ldr	r3, [pc, #68]	; (8011718 <SDMMC_GetCmdError+0x50>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	4a11      	ldr	r2, [pc, #68]	; (801171c <SDMMC_GetCmdError+0x54>)
 80116d6:	fba2 2303 	umull	r2, r3, r2, r3
 80116da:	0a5b      	lsrs	r3, r3, #9
 80116dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80116e0:	fb02 f303 	mul.w	r3, r2, r3
 80116e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	1e5a      	subs	r2, r3, #1
 80116ea:	60fa      	str	r2, [r7, #12]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d102      	bne.n	80116f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80116f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80116f4:	e009      	b.n	801170a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d0f1      	beq.n	80116e6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	4a06      	ldr	r2, [pc, #24]	; (8011720 <SDMMC_GetCmdError+0x58>)
 8011706:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011708:	2300      	movs	r3, #0
}
 801170a:	4618      	mov	r0, r3
 801170c:	3714      	adds	r7, #20
 801170e:	46bd      	mov	sp, r7
 8011710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011714:	4770      	bx	lr
 8011716:	bf00      	nop
 8011718:	24000010 	.word	0x24000010
 801171c:	10624dd3 	.word	0x10624dd3
 8011720:	002000c5 	.word	0x002000c5

08011724 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b088      	sub	sp, #32
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	460b      	mov	r3, r1
 801172e:	607a      	str	r2, [r7, #4]
 8011730:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011732:	4b70      	ldr	r3, [pc, #448]	; (80118f4 <SDMMC_GetCmdResp1+0x1d0>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	4a70      	ldr	r2, [pc, #448]	; (80118f8 <SDMMC_GetCmdResp1+0x1d4>)
 8011738:	fba2 2303 	umull	r2, r3, r2, r3
 801173c:	0a5a      	lsrs	r2, r3, #9
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	fb02 f303 	mul.w	r3, r2, r3
 8011744:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	1e5a      	subs	r2, r3, #1
 801174a:	61fa      	str	r2, [r7, #28]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d102      	bne.n	8011756 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011754:	e0c9      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801175a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801175c:	69ba      	ldr	r2, [r7, #24]
 801175e:	4b67      	ldr	r3, [pc, #412]	; (80118fc <SDMMC_GetCmdResp1+0x1d8>)
 8011760:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011762:	2b00      	cmp	r3, #0
 8011764:	d0ef      	beq.n	8011746 <SDMMC_GetCmdResp1+0x22>
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801176c:	2b00      	cmp	r3, #0
 801176e:	d1ea      	bne.n	8011746 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011774:	f003 0304 	and.w	r3, r3, #4
 8011778:	2b00      	cmp	r3, #0
 801177a:	d004      	beq.n	8011786 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	2204      	movs	r2, #4
 8011780:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011782:	2304      	movs	r3, #4
 8011784:	e0b1      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801178a:	f003 0301 	and.w	r3, r3, #1
 801178e:	2b00      	cmp	r3, #0
 8011790:	d004      	beq.n	801179c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2201      	movs	r2, #1
 8011796:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011798:	2301      	movs	r3, #1
 801179a:	e0a6      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	4a58      	ldr	r2, [pc, #352]	; (8011900 <SDMMC_GetCmdResp1+0x1dc>)
 80117a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80117a2:	68f8      	ldr	r0, [r7, #12]
 80117a4:	f7ff fca6 	bl	80110f4 <SDMMC_GetCommandResponse>
 80117a8:	4603      	mov	r3, r0
 80117aa:	461a      	mov	r2, r3
 80117ac:	7afb      	ldrb	r3, [r7, #11]
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d001      	beq.n	80117b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117b2:	2301      	movs	r3, #1
 80117b4:	e099      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80117b6:	2100      	movs	r1, #0
 80117b8:	68f8      	ldr	r0, [r7, #12]
 80117ba:	f7ff fca8 	bl	801110e <SDMMC_GetResponse>
 80117be:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80117c0:	697a      	ldr	r2, [r7, #20]
 80117c2:	4b50      	ldr	r3, [pc, #320]	; (8011904 <SDMMC_GetCmdResp1+0x1e0>)
 80117c4:	4013      	ands	r3, r2
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d101      	bne.n	80117ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80117ca:	2300      	movs	r3, #0
 80117cc:	e08d      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	da02      	bge.n	80117da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80117d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80117d8:	e087      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d001      	beq.n	80117e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80117e4:	2340      	movs	r3, #64	; 0x40
 80117e6:	e080      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d001      	beq.n	80117f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80117f2:	2380      	movs	r3, #128	; 0x80
 80117f4:	e079      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d002      	beq.n	8011806 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011804:	e071      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801180c:	2b00      	cmp	r3, #0
 801180e:	d002      	beq.n	8011816 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011814:	e069      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801181c:	2b00      	cmp	r3, #0
 801181e:	d002      	beq.n	8011826 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011824:	e061      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801182c:	2b00      	cmp	r3, #0
 801182e:	d002      	beq.n	8011836 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011830:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011834:	e059      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801183c:	2b00      	cmp	r3, #0
 801183e:	d002      	beq.n	8011846 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011844:	e051      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801184c:	2b00      	cmp	r3, #0
 801184e:	d002      	beq.n	8011856 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011854:	e049      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801185c:	2b00      	cmp	r3, #0
 801185e:	d002      	beq.n	8011866 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011860:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011864:	e041      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801186c:	2b00      	cmp	r3, #0
 801186e:	d002      	beq.n	8011876 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011874:	e039      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801187c:	2b00      	cmp	r3, #0
 801187e:	d002      	beq.n	8011886 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011884:	e031      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801188c:	2b00      	cmp	r3, #0
 801188e:	d002      	beq.n	8011896 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011890:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011894:	e029      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801189c:	2b00      	cmp	r3, #0
 801189e:	d002      	beq.n	80118a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80118a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80118a4:	e021      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d002      	beq.n	80118b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80118b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80118b4:	e019      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d002      	beq.n	80118c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80118c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80118c4:	e011      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d002      	beq.n	80118d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80118d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80118d4:	e009      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	f003 0308 	and.w	r3, r3, #8
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d002      	beq.n	80118e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80118e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80118e4:	e001      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80118e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3720      	adds	r7, #32
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	24000010 	.word	0x24000010
 80118f8:	10624dd3 	.word	0x10624dd3
 80118fc:	00200045 	.word	0x00200045
 8011900:	002000c5 	.word	0x002000c5
 8011904:	fdffe008 	.word	0xfdffe008

08011908 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011908:	b480      	push	{r7}
 801190a:	b085      	sub	sp, #20
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011910:	4b1f      	ldr	r3, [pc, #124]	; (8011990 <SDMMC_GetCmdResp2+0x88>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	4a1f      	ldr	r2, [pc, #124]	; (8011994 <SDMMC_GetCmdResp2+0x8c>)
 8011916:	fba2 2303 	umull	r2, r3, r2, r3
 801191a:	0a5b      	lsrs	r3, r3, #9
 801191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011920:	fb02 f303 	mul.w	r3, r2, r3
 8011924:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	1e5a      	subs	r2, r3, #1
 801192a:	60fa      	str	r2, [r7, #12]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d102      	bne.n	8011936 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011934:	e026      	b.n	8011984 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801193a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011942:	2b00      	cmp	r3, #0
 8011944:	d0ef      	beq.n	8011926 <SDMMC_GetCmdResp2+0x1e>
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801194c:	2b00      	cmp	r3, #0
 801194e:	d1ea      	bne.n	8011926 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011954:	f003 0304 	and.w	r3, r3, #4
 8011958:	2b00      	cmp	r3, #0
 801195a:	d004      	beq.n	8011966 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2204      	movs	r2, #4
 8011960:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011962:	2304      	movs	r3, #4
 8011964:	e00e      	b.n	8011984 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801196a:	f003 0301 	and.w	r3, r3, #1
 801196e:	2b00      	cmp	r3, #0
 8011970:	d004      	beq.n	801197c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2201      	movs	r2, #1
 8011976:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011978:	2301      	movs	r3, #1
 801197a:	e003      	b.n	8011984 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	4a06      	ldr	r2, [pc, #24]	; (8011998 <SDMMC_GetCmdResp2+0x90>)
 8011980:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011982:	2300      	movs	r3, #0
}
 8011984:	4618      	mov	r0, r3
 8011986:	3714      	adds	r7, #20
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr
 8011990:	24000010 	.word	0x24000010
 8011994:	10624dd3 	.word	0x10624dd3
 8011998:	002000c5 	.word	0x002000c5

0801199c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801199c:	b480      	push	{r7}
 801199e:	b085      	sub	sp, #20
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80119a4:	4b1a      	ldr	r3, [pc, #104]	; (8011a10 <SDMMC_GetCmdResp3+0x74>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	4a1a      	ldr	r2, [pc, #104]	; (8011a14 <SDMMC_GetCmdResp3+0x78>)
 80119aa:	fba2 2303 	umull	r2, r3, r2, r3
 80119ae:	0a5b      	lsrs	r3, r3, #9
 80119b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80119b4:	fb02 f303 	mul.w	r3, r2, r3
 80119b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	1e5a      	subs	r2, r3, #1
 80119be:	60fa      	str	r2, [r7, #12]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d102      	bne.n	80119ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80119c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80119c8:	e01b      	b.n	8011a02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d0ef      	beq.n	80119ba <SDMMC_GetCmdResp3+0x1e>
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d1ea      	bne.n	80119ba <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119e8:	f003 0304 	and.w	r3, r3, #4
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d004      	beq.n	80119fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2204      	movs	r2, #4
 80119f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80119f6:	2304      	movs	r3, #4
 80119f8:	e003      	b.n	8011a02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	4a06      	ldr	r2, [pc, #24]	; (8011a18 <SDMMC_GetCmdResp3+0x7c>)
 80119fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011a00:	2300      	movs	r3, #0
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3714      	adds	r7, #20
 8011a06:	46bd      	mov	sp, r7
 8011a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0c:	4770      	bx	lr
 8011a0e:	bf00      	nop
 8011a10:	24000010 	.word	0x24000010
 8011a14:	10624dd3 	.word	0x10624dd3
 8011a18:	002000c5 	.word	0x002000c5

08011a1c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b088      	sub	sp, #32
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	60f8      	str	r0, [r7, #12]
 8011a24:	460b      	mov	r3, r1
 8011a26:	607a      	str	r2, [r7, #4]
 8011a28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011a2a:	4b35      	ldr	r3, [pc, #212]	; (8011b00 <SDMMC_GetCmdResp6+0xe4>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	4a35      	ldr	r2, [pc, #212]	; (8011b04 <SDMMC_GetCmdResp6+0xe8>)
 8011a30:	fba2 2303 	umull	r2, r3, r2, r3
 8011a34:	0a5b      	lsrs	r3, r3, #9
 8011a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a3a:	fb02 f303 	mul.w	r3, r2, r3
 8011a3e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	1e5a      	subs	r2, r3, #1
 8011a44:	61fa      	str	r2, [r7, #28]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d102      	bne.n	8011a50 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a4e:	e052      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a54:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a56:	69bb      	ldr	r3, [r7, #24]
 8011a58:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d0ef      	beq.n	8011a40 <SDMMC_GetCmdResp6+0x24>
 8011a60:	69bb      	ldr	r3, [r7, #24]
 8011a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d1ea      	bne.n	8011a40 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a6e:	f003 0304 	and.w	r3, r3, #4
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d004      	beq.n	8011a80 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	2204      	movs	r2, #4
 8011a7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a7c:	2304      	movs	r3, #4
 8011a7e:	e03a      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a84:	f003 0301 	and.w	r3, r3, #1
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d004      	beq.n	8011a96 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	2201      	movs	r2, #1
 8011a90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011a92:	2301      	movs	r3, #1
 8011a94:	e02f      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011a96:	68f8      	ldr	r0, [r7, #12]
 8011a98:	f7ff fb2c 	bl	80110f4 <SDMMC_GetCommandResponse>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	461a      	mov	r2, r3
 8011aa0:	7afb      	ldrb	r3, [r7, #11]
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d001      	beq.n	8011aaa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e025      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	4a16      	ldr	r2, [pc, #88]	; (8011b08 <SDMMC_GetCmdResp6+0xec>)
 8011aae:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011ab0:	2100      	movs	r1, #0
 8011ab2:	68f8      	ldr	r0, [r7, #12]
 8011ab4:	f7ff fb2b 	bl	801110e <SDMMC_GetResponse>
 8011ab8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d106      	bne.n	8011ad2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	0c1b      	lsrs	r3, r3, #16
 8011ac8:	b29a      	uxth	r2, r3
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	e011      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d002      	beq.n	8011ae2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011ae0:	e009      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d002      	beq.n	8011af2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011af0:	e001      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3720      	adds	r7, #32
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	24000010 	.word	0x24000010
 8011b04:	10624dd3 	.word	0x10624dd3
 8011b08:	002000c5 	.word	0x002000c5

08011b0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b085      	sub	sp, #20
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011b14:	4b22      	ldr	r3, [pc, #136]	; (8011ba0 <SDMMC_GetCmdResp7+0x94>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	4a22      	ldr	r2, [pc, #136]	; (8011ba4 <SDMMC_GetCmdResp7+0x98>)
 8011b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8011b1e:	0a5b      	lsrs	r3, r3, #9
 8011b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b24:	fb02 f303 	mul.w	r3, r2, r3
 8011b28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	1e5a      	subs	r2, r3, #1
 8011b2e:	60fa      	str	r2, [r7, #12]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d102      	bne.n	8011b3a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b38:	e02c      	b.n	8011b94 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d0ef      	beq.n	8011b2a <SDMMC_GetCmdResp7+0x1e>
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d1ea      	bne.n	8011b2a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b58:	f003 0304 	and.w	r3, r3, #4
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d004      	beq.n	8011b6a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2204      	movs	r2, #4
 8011b64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b66:	2304      	movs	r3, #4
 8011b68:	e014      	b.n	8011b94 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b6e:	f003 0301 	and.w	r3, r3, #1
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d004      	beq.n	8011b80 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2201      	movs	r2, #1
 8011b7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	e009      	b.n	8011b94 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d002      	beq.n	8011b92 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2240      	movs	r2, #64	; 0x40
 8011b90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011b92:	2300      	movs	r3, #0

}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3714      	adds	r7, #20
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9e:	4770      	bx	lr
 8011ba0:	24000010 	.word	0x24000010
 8011ba4:	10624dd3 	.word	0x10624dd3

08011ba8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011ba8:	b084      	sub	sp, #16
 8011baa:	b580      	push	{r7, lr}
 8011bac:	b084      	sub	sp, #16
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	6078      	str	r0, [r7, #4]
 8011bb2:	f107 001c 	add.w	r0, r7, #28
 8011bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbc:	2b01      	cmp	r3, #1
 8011bbe:	d120      	bne.n	8011c02 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	68da      	ldr	r2, [r3, #12]
 8011bd0:	4b25      	ldr	r3, [pc, #148]	; (8011c68 <USB_CoreInit+0xc0>)
 8011bd2:	4013      	ands	r3, r2
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011be6:	2b01      	cmp	r3, #1
 8011be8:	d105      	bne.n	8011bf6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	68db      	ldr	r3, [r3, #12]
 8011bee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f001 fabe 	bl	8013178 <USB_CoreReset>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	73fb      	strb	r3, [r7, #15]
 8011c00:	e01a      	b.n	8011c38 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f001 fab2 	bl	8013178 <USB_CoreReset>
 8011c14:	4603      	mov	r3, r0
 8011c16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d106      	bne.n	8011c2c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	639a      	str	r2, [r3, #56]	; 0x38
 8011c2a:	e005      	b.n	8011c38 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c3a:	2b01      	cmp	r3, #1
 8011c3c:	d10b      	bne.n	8011c56 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	689b      	ldr	r3, [r3, #8]
 8011c42:	f043 0206 	orr.w	r2, r3, #6
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	689b      	ldr	r3, [r3, #8]
 8011c4e:	f043 0220 	orr.w	r2, r3, #32
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c58:	4618      	mov	r0, r3
 8011c5a:	3710      	adds	r7, #16
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011c62:	b004      	add	sp, #16
 8011c64:	4770      	bx	lr
 8011c66:	bf00      	nop
 8011c68:	ffbdffbf 	.word	0xffbdffbf

08011c6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b087      	sub	sp, #28
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	4613      	mov	r3, r2
 8011c78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011c7a:	79fb      	ldrb	r3, [r7, #7]
 8011c7c:	2b02      	cmp	r3, #2
 8011c7e:	d165      	bne.n	8011d4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011c80:	68bb      	ldr	r3, [r7, #8]
 8011c82:	4a41      	ldr	r2, [pc, #260]	; (8011d88 <USB_SetTurnaroundTime+0x11c>)
 8011c84:	4293      	cmp	r3, r2
 8011c86:	d906      	bls.n	8011c96 <USB_SetTurnaroundTime+0x2a>
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	4a40      	ldr	r2, [pc, #256]	; (8011d8c <USB_SetTurnaroundTime+0x120>)
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	d802      	bhi.n	8011c96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011c90:	230f      	movs	r3, #15
 8011c92:	617b      	str	r3, [r7, #20]
 8011c94:	e062      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	4a3c      	ldr	r2, [pc, #240]	; (8011d8c <USB_SetTurnaroundTime+0x120>)
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d906      	bls.n	8011cac <USB_SetTurnaroundTime+0x40>
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	4a3b      	ldr	r2, [pc, #236]	; (8011d90 <USB_SetTurnaroundTime+0x124>)
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d802      	bhi.n	8011cac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011ca6:	230e      	movs	r3, #14
 8011ca8:	617b      	str	r3, [r7, #20]
 8011caa:	e057      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	4a38      	ldr	r2, [pc, #224]	; (8011d90 <USB_SetTurnaroundTime+0x124>)
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	d906      	bls.n	8011cc2 <USB_SetTurnaroundTime+0x56>
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	4a37      	ldr	r2, [pc, #220]	; (8011d94 <USB_SetTurnaroundTime+0x128>)
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d802      	bhi.n	8011cc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011cbc:	230d      	movs	r3, #13
 8011cbe:	617b      	str	r3, [r7, #20]
 8011cc0:	e04c      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	4a33      	ldr	r2, [pc, #204]	; (8011d94 <USB_SetTurnaroundTime+0x128>)
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d906      	bls.n	8011cd8 <USB_SetTurnaroundTime+0x6c>
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	4a32      	ldr	r2, [pc, #200]	; (8011d98 <USB_SetTurnaroundTime+0x12c>)
 8011cce:	4293      	cmp	r3, r2
 8011cd0:	d802      	bhi.n	8011cd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011cd2:	230c      	movs	r3, #12
 8011cd4:	617b      	str	r3, [r7, #20]
 8011cd6:	e041      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	4a2f      	ldr	r2, [pc, #188]	; (8011d98 <USB_SetTurnaroundTime+0x12c>)
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	d906      	bls.n	8011cee <USB_SetTurnaroundTime+0x82>
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	4a2e      	ldr	r2, [pc, #184]	; (8011d9c <USB_SetTurnaroundTime+0x130>)
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	d802      	bhi.n	8011cee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011ce8:	230b      	movs	r3, #11
 8011cea:	617b      	str	r3, [r7, #20]
 8011cec:	e036      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	4a2a      	ldr	r2, [pc, #168]	; (8011d9c <USB_SetTurnaroundTime+0x130>)
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d906      	bls.n	8011d04 <USB_SetTurnaroundTime+0x98>
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	4a29      	ldr	r2, [pc, #164]	; (8011da0 <USB_SetTurnaroundTime+0x134>)
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d802      	bhi.n	8011d04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011cfe:	230a      	movs	r3, #10
 8011d00:	617b      	str	r3, [r7, #20]
 8011d02:	e02b      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	4a26      	ldr	r2, [pc, #152]	; (8011da0 <USB_SetTurnaroundTime+0x134>)
 8011d08:	4293      	cmp	r3, r2
 8011d0a:	d906      	bls.n	8011d1a <USB_SetTurnaroundTime+0xae>
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	4a25      	ldr	r2, [pc, #148]	; (8011da4 <USB_SetTurnaroundTime+0x138>)
 8011d10:	4293      	cmp	r3, r2
 8011d12:	d802      	bhi.n	8011d1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011d14:	2309      	movs	r3, #9
 8011d16:	617b      	str	r3, [r7, #20]
 8011d18:	e020      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	4a21      	ldr	r2, [pc, #132]	; (8011da4 <USB_SetTurnaroundTime+0x138>)
 8011d1e:	4293      	cmp	r3, r2
 8011d20:	d906      	bls.n	8011d30 <USB_SetTurnaroundTime+0xc4>
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	4a20      	ldr	r2, [pc, #128]	; (8011da8 <USB_SetTurnaroundTime+0x13c>)
 8011d26:	4293      	cmp	r3, r2
 8011d28:	d802      	bhi.n	8011d30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011d2a:	2308      	movs	r3, #8
 8011d2c:	617b      	str	r3, [r7, #20]
 8011d2e:	e015      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	4a1d      	ldr	r2, [pc, #116]	; (8011da8 <USB_SetTurnaroundTime+0x13c>)
 8011d34:	4293      	cmp	r3, r2
 8011d36:	d906      	bls.n	8011d46 <USB_SetTurnaroundTime+0xda>
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	4a1c      	ldr	r2, [pc, #112]	; (8011dac <USB_SetTurnaroundTime+0x140>)
 8011d3c:	4293      	cmp	r3, r2
 8011d3e:	d802      	bhi.n	8011d46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011d40:	2307      	movs	r3, #7
 8011d42:	617b      	str	r3, [r7, #20]
 8011d44:	e00a      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011d46:	2306      	movs	r3, #6
 8011d48:	617b      	str	r3, [r7, #20]
 8011d4a:	e007      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011d4c:	79fb      	ldrb	r3, [r7, #7]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d102      	bne.n	8011d58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011d52:	2309      	movs	r3, #9
 8011d54:	617b      	str	r3, [r7, #20]
 8011d56:	e001      	b.n	8011d5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011d58:	2309      	movs	r3, #9
 8011d5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	68db      	ldr	r3, [r3, #12]
 8011d60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	68da      	ldr	r2, [r3, #12]
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	029b      	lsls	r3, r3, #10
 8011d70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011d74:	431a      	orrs	r2, r3
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011d7a:	2300      	movs	r3, #0
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	371c      	adds	r7, #28
 8011d80:	46bd      	mov	sp, r7
 8011d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d86:	4770      	bx	lr
 8011d88:	00d8acbf 	.word	0x00d8acbf
 8011d8c:	00e4e1bf 	.word	0x00e4e1bf
 8011d90:	00f423ff 	.word	0x00f423ff
 8011d94:	0106737f 	.word	0x0106737f
 8011d98:	011a499f 	.word	0x011a499f
 8011d9c:	01312cff 	.word	0x01312cff
 8011da0:	014ca43f 	.word	0x014ca43f
 8011da4:	016e35ff 	.word	0x016e35ff
 8011da8:	01a6ab1f 	.word	0x01a6ab1f
 8011dac:	01e847ff 	.word	0x01e847ff

08011db0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011db0:	b480      	push	{r7}
 8011db2:	b083      	sub	sp, #12
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	689b      	ldr	r3, [r3, #8]
 8011dbc:	f043 0201 	orr.w	r2, r3, #1
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011dc4:	2300      	movs	r3, #0
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	370c      	adds	r7, #12
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr

08011dd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011dd2:	b480      	push	{r7}
 8011dd4:	b083      	sub	sp, #12
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	689b      	ldr	r3, [r3, #8]
 8011dde:	f023 0201 	bic.w	r2, r3, #1
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011de6:	2300      	movs	r3, #0
}
 8011de8:	4618      	mov	r0, r3
 8011dea:	370c      	adds	r7, #12
 8011dec:	46bd      	mov	sp, r7
 8011dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df2:	4770      	bx	lr

08011df4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b082      	sub	sp, #8
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	460b      	mov	r3, r1
 8011dfe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	68db      	ldr	r3, [r3, #12]
 8011e04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011e0c:	78fb      	ldrb	r3, [r7, #3]
 8011e0e:	2b01      	cmp	r3, #1
 8011e10:	d106      	bne.n	8011e20 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	68db      	ldr	r3, [r3, #12]
 8011e16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	60da      	str	r2, [r3, #12]
 8011e1e:	e00b      	b.n	8011e38 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011e20:	78fb      	ldrb	r3, [r7, #3]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d106      	bne.n	8011e34 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	68db      	ldr	r3, [r3, #12]
 8011e2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	60da      	str	r2, [r3, #12]
 8011e32:	e001      	b.n	8011e38 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011e34:	2301      	movs	r3, #1
 8011e36:	e003      	b.n	8011e40 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011e38:	2032      	movs	r0, #50	; 0x32
 8011e3a:	f7f2 fbc1 	bl	80045c0 <HAL_Delay>

  return HAL_OK;
 8011e3e:	2300      	movs	r3, #0
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}

08011e48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011e48:	b084      	sub	sp, #16
 8011e4a:	b580      	push	{r7, lr}
 8011e4c:	b086      	sub	sp, #24
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	6078      	str	r0, [r7, #4]
 8011e52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011e62:	2300      	movs	r3, #0
 8011e64:	613b      	str	r3, [r7, #16]
 8011e66:	e009      	b.n	8011e7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011e68:	687a      	ldr	r2, [r7, #4]
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	3340      	adds	r3, #64	; 0x40
 8011e6e:	009b      	lsls	r3, r3, #2
 8011e70:	4413      	add	r3, r2
 8011e72:	2200      	movs	r2, #0
 8011e74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	3301      	adds	r3, #1
 8011e7a:	613b      	str	r3, [r7, #16]
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	2b0e      	cmp	r3, #14
 8011e80:	d9f2      	bls.n	8011e68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d11c      	bne.n	8011ec2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	68fa      	ldr	r2, [r7, #12]
 8011e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011e96:	f043 0302 	orr.w	r3, r3, #2
 8011e9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ea0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	601a      	str	r2, [r3, #0]
 8011ec0:	e005      	b.n	8011ece <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ec6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ee8:	461a      	mov	r2, r3
 8011eea:	680b      	ldr	r3, [r1, #0]
 8011eec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef0:	2b01      	cmp	r3, #1
 8011ef2:	d10c      	bne.n	8011f0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d104      	bne.n	8011f04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011efa:	2100      	movs	r1, #0
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f000 f949 	bl	8012194 <USB_SetDevSpeed>
 8011f02:	e008      	b.n	8011f16 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011f04:	2101      	movs	r1, #1
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f000 f944 	bl	8012194 <USB_SetDevSpeed>
 8011f0c:	e003      	b.n	8011f16 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011f0e:	2103      	movs	r1, #3
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f000 f93f 	bl	8012194 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011f16:	2110      	movs	r1, #16
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f000 f8f3 	bl	8012104 <USB_FlushTxFifo>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d001      	beq.n	8011f28 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011f24:	2301      	movs	r3, #1
 8011f26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f000 f911 	bl	8012150 <USB_FlushRxFifo>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d001      	beq.n	8011f38 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011f34:	2301      	movs	r3, #1
 8011f36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f3e:	461a      	mov	r2, r3
 8011f40:	2300      	movs	r3, #0
 8011f42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f56:	461a      	mov	r2, r3
 8011f58:	2300      	movs	r3, #0
 8011f5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	613b      	str	r3, [r7, #16]
 8011f60:	e043      	b.n	8011fea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011f62:	693b      	ldr	r3, [r7, #16]
 8011f64:	015a      	lsls	r2, r3, #5
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	4413      	add	r3, r2
 8011f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f78:	d118      	bne.n	8011fac <USB_DevInit+0x164>
    {
      if (i == 0U)
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d10a      	bne.n	8011f96 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011f80:	693b      	ldr	r3, [r7, #16]
 8011f82:	015a      	lsls	r2, r3, #5
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	4413      	add	r3, r2
 8011f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011f92:	6013      	str	r3, [r2, #0]
 8011f94:	e013      	b.n	8011fbe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011f96:	693b      	ldr	r3, [r7, #16]
 8011f98:	015a      	lsls	r2, r3, #5
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	4413      	add	r3, r2
 8011f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011fa8:	6013      	str	r3, [r2, #0]
 8011faa:	e008      	b.n	8011fbe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	015a      	lsls	r2, r3, #5
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	4413      	add	r3, r2
 8011fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fb8:	461a      	mov	r2, r3
 8011fba:	2300      	movs	r3, #0
 8011fbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011fbe:	693b      	ldr	r3, [r7, #16]
 8011fc0:	015a      	lsls	r2, r3, #5
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	4413      	add	r3, r2
 8011fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fca:	461a      	mov	r2, r3
 8011fcc:	2300      	movs	r3, #0
 8011fce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011fd0:	693b      	ldr	r3, [r7, #16]
 8011fd2:	015a      	lsls	r2, r3, #5
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	4413      	add	r3, r2
 8011fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fdc:	461a      	mov	r2, r3
 8011fde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011fe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	3301      	adds	r3, #1
 8011fe8:	613b      	str	r3, [r7, #16]
 8011fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fec:	693a      	ldr	r2, [r7, #16]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d3b7      	bcc.n	8011f62 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	613b      	str	r3, [r7, #16]
 8011ff6:	e043      	b.n	8012080 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	015a      	lsls	r2, r3, #5
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	4413      	add	r3, r2
 8012000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801200a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801200e:	d118      	bne.n	8012042 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d10a      	bne.n	801202c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	015a      	lsls	r2, r3, #5
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	4413      	add	r3, r2
 801201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012022:	461a      	mov	r2, r3
 8012024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012028:	6013      	str	r3, [r2, #0]
 801202a:	e013      	b.n	8012054 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801202c:	693b      	ldr	r3, [r7, #16]
 801202e:	015a      	lsls	r2, r3, #5
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	4413      	add	r3, r2
 8012034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012038:	461a      	mov	r2, r3
 801203a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801203e:	6013      	str	r3, [r2, #0]
 8012040:	e008      	b.n	8012054 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	015a      	lsls	r2, r3, #5
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	4413      	add	r3, r2
 801204a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801204e:	461a      	mov	r2, r3
 8012050:	2300      	movs	r3, #0
 8012052:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	015a      	lsls	r2, r3, #5
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	4413      	add	r3, r2
 801205c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012060:	461a      	mov	r2, r3
 8012062:	2300      	movs	r3, #0
 8012064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	015a      	lsls	r2, r3, #5
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	4413      	add	r3, r2
 801206e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012072:	461a      	mov	r2, r3
 8012074:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012078:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	3301      	adds	r3, #1
 801207e:	613b      	str	r3, [r7, #16]
 8012080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012082:	693a      	ldr	r2, [r7, #16]
 8012084:	429a      	cmp	r2, r3
 8012086:	d3b7      	bcc.n	8011ff8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801208e:	691b      	ldr	r3, [r3, #16]
 8012090:	68fa      	ldr	r2, [r7, #12]
 8012092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801209a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2200      	movs	r2, #0
 80120a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80120a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80120aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d105      	bne.n	80120bc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	699b      	ldr	r3, [r3, #24]
 80120b4:	f043 0210 	orr.w	r2, r3, #16
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	699a      	ldr	r2, [r3, #24]
 80120c0:	4b0e      	ldr	r3, [pc, #56]	; (80120fc <USB_DevInit+0x2b4>)
 80120c2:	4313      	orrs	r3, r2
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80120c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d005      	beq.n	80120da <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	699b      	ldr	r3, [r3, #24]
 80120d2:	f043 0208 	orr.w	r2, r3, #8
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80120da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120dc:	2b01      	cmp	r3, #1
 80120de:	d105      	bne.n	80120ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	699a      	ldr	r2, [r3, #24]
 80120e4:	4b06      	ldr	r3, [pc, #24]	; (8012100 <USB_DevInit+0x2b8>)
 80120e6:	4313      	orrs	r3, r2
 80120e8:	687a      	ldr	r2, [r7, #4]
 80120ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80120ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3718      	adds	r7, #24
 80120f2:	46bd      	mov	sp, r7
 80120f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80120f8:	b004      	add	sp, #16
 80120fa:	4770      	bx	lr
 80120fc:	803c3800 	.word	0x803c3800
 8012100:	40000004 	.word	0x40000004

08012104 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012104:	b480      	push	{r7}
 8012106:	b085      	sub	sp, #20
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801210e:	2300      	movs	r3, #0
 8012110:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	019b      	lsls	r3, r3, #6
 8012116:	f043 0220 	orr.w	r2, r3, #32
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	3301      	adds	r3, #1
 8012122:	60fb      	str	r3, [r7, #12]
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	4a09      	ldr	r2, [pc, #36]	; (801214c <USB_FlushTxFifo+0x48>)
 8012128:	4293      	cmp	r3, r2
 801212a:	d901      	bls.n	8012130 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801212c:	2303      	movs	r3, #3
 801212e:	e006      	b.n	801213e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	691b      	ldr	r3, [r3, #16]
 8012134:	f003 0320 	and.w	r3, r3, #32
 8012138:	2b20      	cmp	r3, #32
 801213a:	d0f0      	beq.n	801211e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801213c:	2300      	movs	r3, #0
}
 801213e:	4618      	mov	r0, r3
 8012140:	3714      	adds	r7, #20
 8012142:	46bd      	mov	sp, r7
 8012144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012148:	4770      	bx	lr
 801214a:	bf00      	nop
 801214c:	00030d40 	.word	0x00030d40

08012150 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012150:	b480      	push	{r7}
 8012152:	b085      	sub	sp, #20
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8012158:	2300      	movs	r3, #0
 801215a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2210      	movs	r2, #16
 8012160:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	3301      	adds	r3, #1
 8012166:	60fb      	str	r3, [r7, #12]
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	4a09      	ldr	r2, [pc, #36]	; (8012190 <USB_FlushRxFifo+0x40>)
 801216c:	4293      	cmp	r3, r2
 801216e:	d901      	bls.n	8012174 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8012170:	2303      	movs	r3, #3
 8012172:	e006      	b.n	8012182 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	691b      	ldr	r3, [r3, #16]
 8012178:	f003 0310 	and.w	r3, r3, #16
 801217c:	2b10      	cmp	r3, #16
 801217e:	d0f0      	beq.n	8012162 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8012180:	2300      	movs	r3, #0
}
 8012182:	4618      	mov	r0, r3
 8012184:	3714      	adds	r7, #20
 8012186:	46bd      	mov	sp, r7
 8012188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218c:	4770      	bx	lr
 801218e:	bf00      	nop
 8012190:	00030d40 	.word	0x00030d40

08012194 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012194:	b480      	push	{r7}
 8012196:	b085      	sub	sp, #20
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	460b      	mov	r3, r1
 801219e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	78fb      	ldrb	r3, [r7, #3]
 80121ae:	68f9      	ldr	r1, [r7, #12]
 80121b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121b4:	4313      	orrs	r3, r2
 80121b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80121b8:	2300      	movs	r3, #0
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3714      	adds	r7, #20
 80121be:	46bd      	mov	sp, r7
 80121c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c4:	4770      	bx	lr

080121c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80121c6:	b480      	push	{r7}
 80121c8:	b087      	sub	sp, #28
 80121ca:	af00      	add	r7, sp, #0
 80121cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	f003 0306 	and.w	r3, r3, #6
 80121de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d102      	bne.n	80121ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80121e6:	2300      	movs	r3, #0
 80121e8:	75fb      	strb	r3, [r7, #23]
 80121ea:	e00a      	b.n	8012202 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	2b02      	cmp	r3, #2
 80121f0:	d002      	beq.n	80121f8 <USB_GetDevSpeed+0x32>
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2b06      	cmp	r3, #6
 80121f6:	d102      	bne.n	80121fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80121f8:	2302      	movs	r3, #2
 80121fa:	75fb      	strb	r3, [r7, #23]
 80121fc:	e001      	b.n	8012202 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80121fe:	230f      	movs	r3, #15
 8012200:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012202:	7dfb      	ldrb	r3, [r7, #23]
}
 8012204:	4618      	mov	r0, r3
 8012206:	371c      	adds	r7, #28
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr

08012210 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012210:	b480      	push	{r7}
 8012212:	b085      	sub	sp, #20
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	785b      	ldrb	r3, [r3, #1]
 8012228:	2b01      	cmp	r3, #1
 801222a:	d139      	bne.n	80122a0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012232:	69da      	ldr	r2, [r3, #28]
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	781b      	ldrb	r3, [r3, #0]
 8012238:	f003 030f 	and.w	r3, r3, #15
 801223c:	2101      	movs	r1, #1
 801223e:	fa01 f303 	lsl.w	r3, r1, r3
 8012242:	b29b      	uxth	r3, r3
 8012244:	68f9      	ldr	r1, [r7, #12]
 8012246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801224a:	4313      	orrs	r3, r2
 801224c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	015a      	lsls	r2, r3, #5
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	4413      	add	r3, r2
 8012256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012260:	2b00      	cmp	r3, #0
 8012262:	d153      	bne.n	801230c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	015a      	lsls	r2, r3, #5
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	4413      	add	r3, r2
 801226c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	689b      	ldr	r3, [r3, #8]
 8012276:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	78db      	ldrb	r3, [r3, #3]
 801227e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012280:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	059b      	lsls	r3, r3, #22
 8012286:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012288:	431a      	orrs	r2, r3
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	0159      	lsls	r1, r3, #5
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	440b      	add	r3, r1
 8012292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012296:	4619      	mov	r1, r3
 8012298:	4b20      	ldr	r3, [pc, #128]	; (801231c <USB_ActivateEndpoint+0x10c>)
 801229a:	4313      	orrs	r3, r2
 801229c:	600b      	str	r3, [r1, #0]
 801229e:	e035      	b.n	801230c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122a6:	69da      	ldr	r2, [r3, #28]
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	781b      	ldrb	r3, [r3, #0]
 80122ac:	f003 030f 	and.w	r3, r3, #15
 80122b0:	2101      	movs	r1, #1
 80122b2:	fa01 f303 	lsl.w	r3, r1, r3
 80122b6:	041b      	lsls	r3, r3, #16
 80122b8:	68f9      	ldr	r1, [r7, #12]
 80122ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122be:	4313      	orrs	r3, r2
 80122c0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	015a      	lsls	r2, r3, #5
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	4413      	add	r3, r2
 80122ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d119      	bne.n	801230c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	015a      	lsls	r2, r3, #5
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	4413      	add	r3, r2
 80122e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122e4:	681a      	ldr	r2, [r3, #0]
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	689b      	ldr	r3, [r3, #8]
 80122ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	78db      	ldrb	r3, [r3, #3]
 80122f2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80122f4:	430b      	orrs	r3, r1
 80122f6:	431a      	orrs	r2, r3
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	0159      	lsls	r1, r3, #5
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	440b      	add	r3, r1
 8012300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012304:	4619      	mov	r1, r3
 8012306:	4b05      	ldr	r3, [pc, #20]	; (801231c <USB_ActivateEndpoint+0x10c>)
 8012308:	4313      	orrs	r3, r2
 801230a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801230c:	2300      	movs	r3, #0
}
 801230e:	4618      	mov	r0, r3
 8012310:	3714      	adds	r7, #20
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop
 801231c:	10008000 	.word	0x10008000

08012320 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012320:	b480      	push	{r7}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	785b      	ldrb	r3, [r3, #1]
 8012338:	2b01      	cmp	r3, #1
 801233a:	d161      	bne.n	8012400 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	015a      	lsls	r2, r3, #5
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	4413      	add	r3, r2
 8012344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801234e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012352:	d11f      	bne.n	8012394 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	015a      	lsls	r2, r3, #5
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	4413      	add	r3, r2
 801235c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	68ba      	ldr	r2, [r7, #8]
 8012364:	0151      	lsls	r1, r2, #5
 8012366:	68fa      	ldr	r2, [r7, #12]
 8012368:	440a      	add	r2, r1
 801236a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801236e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012372:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	015a      	lsls	r2, r3, #5
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	4413      	add	r3, r2
 801237c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	68ba      	ldr	r2, [r7, #8]
 8012384:	0151      	lsls	r1, r2, #5
 8012386:	68fa      	ldr	r2, [r7, #12]
 8012388:	440a      	add	r2, r1
 801238a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801238e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012392:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801239a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	f003 030f 	and.w	r3, r3, #15
 80123a4:	2101      	movs	r1, #1
 80123a6:	fa01 f303 	lsl.w	r3, r1, r3
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	43db      	mvns	r3, r3
 80123ae:	68f9      	ldr	r1, [r7, #12]
 80123b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123b4:	4013      	ands	r3, r2
 80123b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123be:	69da      	ldr	r2, [r3, #28]
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	f003 030f 	and.w	r3, r3, #15
 80123c8:	2101      	movs	r1, #1
 80123ca:	fa01 f303 	lsl.w	r3, r1, r3
 80123ce:	b29b      	uxth	r3, r3
 80123d0:	43db      	mvns	r3, r3
 80123d2:	68f9      	ldr	r1, [r7, #12]
 80123d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123d8:	4013      	ands	r3, r2
 80123da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	015a      	lsls	r2, r3, #5
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	4413      	add	r3, r2
 80123e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123e8:	681a      	ldr	r2, [r3, #0]
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	0159      	lsls	r1, r3, #5
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	440b      	add	r3, r1
 80123f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123f6:	4619      	mov	r1, r3
 80123f8:	4b35      	ldr	r3, [pc, #212]	; (80124d0 <USB_DeactivateEndpoint+0x1b0>)
 80123fa:	4013      	ands	r3, r2
 80123fc:	600b      	str	r3, [r1, #0]
 80123fe:	e060      	b.n	80124c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	015a      	lsls	r2, r3, #5
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	4413      	add	r3, r2
 8012408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012416:	d11f      	bne.n	8012458 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	015a      	lsls	r2, r3, #5
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	4413      	add	r3, r2
 8012420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	68ba      	ldr	r2, [r7, #8]
 8012428:	0151      	lsls	r1, r2, #5
 801242a:	68fa      	ldr	r2, [r7, #12]
 801242c:	440a      	add	r2, r1
 801242e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012432:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012436:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	015a      	lsls	r2, r3, #5
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	4413      	add	r3, r2
 8012440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	68ba      	ldr	r2, [r7, #8]
 8012448:	0151      	lsls	r1, r2, #5
 801244a:	68fa      	ldr	r2, [r7, #12]
 801244c:	440a      	add	r2, r1
 801244e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012456:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801245e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	f003 030f 	and.w	r3, r3, #15
 8012468:	2101      	movs	r1, #1
 801246a:	fa01 f303 	lsl.w	r3, r1, r3
 801246e:	041b      	lsls	r3, r3, #16
 8012470:	43db      	mvns	r3, r3
 8012472:	68f9      	ldr	r1, [r7, #12]
 8012474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012478:	4013      	ands	r3, r2
 801247a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012482:	69da      	ldr	r2, [r3, #28]
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	781b      	ldrb	r3, [r3, #0]
 8012488:	f003 030f 	and.w	r3, r3, #15
 801248c:	2101      	movs	r1, #1
 801248e:	fa01 f303 	lsl.w	r3, r1, r3
 8012492:	041b      	lsls	r3, r3, #16
 8012494:	43db      	mvns	r3, r3
 8012496:	68f9      	ldr	r1, [r7, #12]
 8012498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801249c:	4013      	ands	r3, r2
 801249e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	015a      	lsls	r2, r3, #5
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	4413      	add	r3, r2
 80124a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124ac:	681a      	ldr	r2, [r3, #0]
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	0159      	lsls	r1, r3, #5
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	440b      	add	r3, r1
 80124b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124ba:	4619      	mov	r1, r3
 80124bc:	4b05      	ldr	r3, [pc, #20]	; (80124d4 <USB_DeactivateEndpoint+0x1b4>)
 80124be:	4013      	ands	r3, r2
 80124c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80124c2:	2300      	movs	r3, #0
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3714      	adds	r7, #20
 80124c8:	46bd      	mov	sp, r7
 80124ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ce:	4770      	bx	lr
 80124d0:	ec337800 	.word	0xec337800
 80124d4:	eff37800 	.word	0xeff37800

080124d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b08a      	sub	sp, #40	; 0x28
 80124dc:	af02      	add	r7, sp, #8
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	4613      	mov	r3, r2
 80124e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	781b      	ldrb	r3, [r3, #0]
 80124ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	785b      	ldrb	r3, [r3, #1]
 80124f4:	2b01      	cmp	r3, #1
 80124f6:	f040 8163 	bne.w	80127c0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	695b      	ldr	r3, [r3, #20]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d132      	bne.n	8012568 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012502:	69bb      	ldr	r3, [r7, #24]
 8012504:	015a      	lsls	r2, r3, #5
 8012506:	69fb      	ldr	r3, [r7, #28]
 8012508:	4413      	add	r3, r2
 801250a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801250e:	691a      	ldr	r2, [r3, #16]
 8012510:	69bb      	ldr	r3, [r7, #24]
 8012512:	0159      	lsls	r1, r3, #5
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	440b      	add	r3, r1
 8012518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801251c:	4619      	mov	r1, r3
 801251e:	4ba5      	ldr	r3, [pc, #660]	; (80127b4 <USB_EPStartXfer+0x2dc>)
 8012520:	4013      	ands	r3, r2
 8012522:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012524:	69bb      	ldr	r3, [r7, #24]
 8012526:	015a      	lsls	r2, r3, #5
 8012528:	69fb      	ldr	r3, [r7, #28]
 801252a:	4413      	add	r3, r2
 801252c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012530:	691b      	ldr	r3, [r3, #16]
 8012532:	69ba      	ldr	r2, [r7, #24]
 8012534:	0151      	lsls	r1, r2, #5
 8012536:	69fa      	ldr	r2, [r7, #28]
 8012538:	440a      	add	r2, r1
 801253a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801253e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012542:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012544:	69bb      	ldr	r3, [r7, #24]
 8012546:	015a      	lsls	r2, r3, #5
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	4413      	add	r3, r2
 801254c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012550:	691a      	ldr	r2, [r3, #16]
 8012552:	69bb      	ldr	r3, [r7, #24]
 8012554:	0159      	lsls	r1, r3, #5
 8012556:	69fb      	ldr	r3, [r7, #28]
 8012558:	440b      	add	r3, r1
 801255a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801255e:	4619      	mov	r1, r3
 8012560:	4b95      	ldr	r3, [pc, #596]	; (80127b8 <USB_EPStartXfer+0x2e0>)
 8012562:	4013      	ands	r3, r2
 8012564:	610b      	str	r3, [r1, #16]
 8012566:	e074      	b.n	8012652 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012568:	69bb      	ldr	r3, [r7, #24]
 801256a:	015a      	lsls	r2, r3, #5
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	4413      	add	r3, r2
 8012570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012574:	691a      	ldr	r2, [r3, #16]
 8012576:	69bb      	ldr	r3, [r7, #24]
 8012578:	0159      	lsls	r1, r3, #5
 801257a:	69fb      	ldr	r3, [r7, #28]
 801257c:	440b      	add	r3, r1
 801257e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012582:	4619      	mov	r1, r3
 8012584:	4b8c      	ldr	r3, [pc, #560]	; (80127b8 <USB_EPStartXfer+0x2e0>)
 8012586:	4013      	ands	r3, r2
 8012588:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801258a:	69bb      	ldr	r3, [r7, #24]
 801258c:	015a      	lsls	r2, r3, #5
 801258e:	69fb      	ldr	r3, [r7, #28]
 8012590:	4413      	add	r3, r2
 8012592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012596:	691a      	ldr	r2, [r3, #16]
 8012598:	69bb      	ldr	r3, [r7, #24]
 801259a:	0159      	lsls	r1, r3, #5
 801259c:	69fb      	ldr	r3, [r7, #28]
 801259e:	440b      	add	r3, r1
 80125a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125a4:	4619      	mov	r1, r3
 80125a6:	4b83      	ldr	r3, [pc, #524]	; (80127b4 <USB_EPStartXfer+0x2dc>)
 80125a8:	4013      	ands	r3, r2
 80125aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80125ac:	69bb      	ldr	r3, [r7, #24]
 80125ae:	015a      	lsls	r2, r3, #5
 80125b0:	69fb      	ldr	r3, [r7, #28]
 80125b2:	4413      	add	r3, r2
 80125b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125b8:	691a      	ldr	r2, [r3, #16]
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	6959      	ldr	r1, [r3, #20]
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	689b      	ldr	r3, [r3, #8]
 80125c2:	440b      	add	r3, r1
 80125c4:	1e59      	subs	r1, r3, #1
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	689b      	ldr	r3, [r3, #8]
 80125ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80125ce:	04d9      	lsls	r1, r3, #19
 80125d0:	4b7a      	ldr	r3, [pc, #488]	; (80127bc <USB_EPStartXfer+0x2e4>)
 80125d2:	400b      	ands	r3, r1
 80125d4:	69b9      	ldr	r1, [r7, #24]
 80125d6:	0148      	lsls	r0, r1, #5
 80125d8:	69f9      	ldr	r1, [r7, #28]
 80125da:	4401      	add	r1, r0
 80125dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80125e0:	4313      	orrs	r3, r2
 80125e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80125e4:	69bb      	ldr	r3, [r7, #24]
 80125e6:	015a      	lsls	r2, r3, #5
 80125e8:	69fb      	ldr	r3, [r7, #28]
 80125ea:	4413      	add	r3, r2
 80125ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125f0:	691a      	ldr	r2, [r3, #16]
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	695b      	ldr	r3, [r3, #20]
 80125f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80125fa:	69b9      	ldr	r1, [r7, #24]
 80125fc:	0148      	lsls	r0, r1, #5
 80125fe:	69f9      	ldr	r1, [r7, #28]
 8012600:	4401      	add	r1, r0
 8012602:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012606:	4313      	orrs	r3, r2
 8012608:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	78db      	ldrb	r3, [r3, #3]
 801260e:	2b01      	cmp	r3, #1
 8012610:	d11f      	bne.n	8012652 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012612:	69bb      	ldr	r3, [r7, #24]
 8012614:	015a      	lsls	r2, r3, #5
 8012616:	69fb      	ldr	r3, [r7, #28]
 8012618:	4413      	add	r3, r2
 801261a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801261e:	691b      	ldr	r3, [r3, #16]
 8012620:	69ba      	ldr	r2, [r7, #24]
 8012622:	0151      	lsls	r1, r2, #5
 8012624:	69fa      	ldr	r2, [r7, #28]
 8012626:	440a      	add	r2, r1
 8012628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801262c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012630:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012632:	69bb      	ldr	r3, [r7, #24]
 8012634:	015a      	lsls	r2, r3, #5
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	4413      	add	r3, r2
 801263a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801263e:	691b      	ldr	r3, [r3, #16]
 8012640:	69ba      	ldr	r2, [r7, #24]
 8012642:	0151      	lsls	r1, r2, #5
 8012644:	69fa      	ldr	r2, [r7, #28]
 8012646:	440a      	add	r2, r1
 8012648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801264c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012650:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012652:	79fb      	ldrb	r3, [r7, #7]
 8012654:	2b01      	cmp	r3, #1
 8012656:	d14b      	bne.n	80126f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	691b      	ldr	r3, [r3, #16]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d009      	beq.n	8012674 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012660:	69bb      	ldr	r3, [r7, #24]
 8012662:	015a      	lsls	r2, r3, #5
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	4413      	add	r3, r2
 8012668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801266c:	461a      	mov	r2, r3
 801266e:	68bb      	ldr	r3, [r7, #8]
 8012670:	691b      	ldr	r3, [r3, #16]
 8012672:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	78db      	ldrb	r3, [r3, #3]
 8012678:	2b01      	cmp	r3, #1
 801267a:	d128      	bne.n	80126ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801267c:	69fb      	ldr	r3, [r7, #28]
 801267e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012682:	689b      	ldr	r3, [r3, #8]
 8012684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012688:	2b00      	cmp	r3, #0
 801268a:	d110      	bne.n	80126ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801268c:	69bb      	ldr	r3, [r7, #24]
 801268e:	015a      	lsls	r2, r3, #5
 8012690:	69fb      	ldr	r3, [r7, #28]
 8012692:	4413      	add	r3, r2
 8012694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	69ba      	ldr	r2, [r7, #24]
 801269c:	0151      	lsls	r1, r2, #5
 801269e:	69fa      	ldr	r2, [r7, #28]
 80126a0:	440a      	add	r2, r1
 80126a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80126aa:	6013      	str	r3, [r2, #0]
 80126ac:	e00f      	b.n	80126ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80126ae:	69bb      	ldr	r3, [r7, #24]
 80126b0:	015a      	lsls	r2, r3, #5
 80126b2:	69fb      	ldr	r3, [r7, #28]
 80126b4:	4413      	add	r3, r2
 80126b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	69ba      	ldr	r2, [r7, #24]
 80126be:	0151      	lsls	r1, r2, #5
 80126c0:	69fa      	ldr	r2, [r7, #28]
 80126c2:	440a      	add	r2, r1
 80126c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80126cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80126ce:	69bb      	ldr	r3, [r7, #24]
 80126d0:	015a      	lsls	r2, r3, #5
 80126d2:	69fb      	ldr	r3, [r7, #28]
 80126d4:	4413      	add	r3, r2
 80126d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	69ba      	ldr	r2, [r7, #24]
 80126de:	0151      	lsls	r1, r2, #5
 80126e0:	69fa      	ldr	r2, [r7, #28]
 80126e2:	440a      	add	r2, r1
 80126e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80126ec:	6013      	str	r3, [r2, #0]
 80126ee:	e133      	b.n	8012958 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80126f0:	69bb      	ldr	r3, [r7, #24]
 80126f2:	015a      	lsls	r2, r3, #5
 80126f4:	69fb      	ldr	r3, [r7, #28]
 80126f6:	4413      	add	r3, r2
 80126f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	69ba      	ldr	r2, [r7, #24]
 8012700:	0151      	lsls	r1, r2, #5
 8012702:	69fa      	ldr	r2, [r7, #28]
 8012704:	440a      	add	r2, r1
 8012706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801270a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801270e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	78db      	ldrb	r3, [r3, #3]
 8012714:	2b01      	cmp	r3, #1
 8012716:	d015      	beq.n	8012744 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	695b      	ldr	r3, [r3, #20]
 801271c:	2b00      	cmp	r3, #0
 801271e:	f000 811b 	beq.w	8012958 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012722:	69fb      	ldr	r3, [r7, #28]
 8012724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	f003 030f 	and.w	r3, r3, #15
 8012732:	2101      	movs	r1, #1
 8012734:	fa01 f303 	lsl.w	r3, r1, r3
 8012738:	69f9      	ldr	r1, [r7, #28]
 801273a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801273e:	4313      	orrs	r3, r2
 8012740:	634b      	str	r3, [r1, #52]	; 0x34
 8012742:	e109      	b.n	8012958 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012744:	69fb      	ldr	r3, [r7, #28]
 8012746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801274a:	689b      	ldr	r3, [r3, #8]
 801274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012750:	2b00      	cmp	r3, #0
 8012752:	d110      	bne.n	8012776 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012754:	69bb      	ldr	r3, [r7, #24]
 8012756:	015a      	lsls	r2, r3, #5
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	4413      	add	r3, r2
 801275c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	69ba      	ldr	r2, [r7, #24]
 8012764:	0151      	lsls	r1, r2, #5
 8012766:	69fa      	ldr	r2, [r7, #28]
 8012768:	440a      	add	r2, r1
 801276a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801276e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012772:	6013      	str	r3, [r2, #0]
 8012774:	e00f      	b.n	8012796 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012776:	69bb      	ldr	r3, [r7, #24]
 8012778:	015a      	lsls	r2, r3, #5
 801277a:	69fb      	ldr	r3, [r7, #28]
 801277c:	4413      	add	r3, r2
 801277e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	69ba      	ldr	r2, [r7, #24]
 8012786:	0151      	lsls	r1, r2, #5
 8012788:	69fa      	ldr	r2, [r7, #28]
 801278a:	440a      	add	r2, r1
 801278c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012794:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	68d9      	ldr	r1, [r3, #12]
 801279a:	68bb      	ldr	r3, [r7, #8]
 801279c:	781a      	ldrb	r2, [r3, #0]
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	695b      	ldr	r3, [r3, #20]
 80127a2:	b298      	uxth	r0, r3
 80127a4:	79fb      	ldrb	r3, [r7, #7]
 80127a6:	9300      	str	r3, [sp, #0]
 80127a8:	4603      	mov	r3, r0
 80127aa:	68f8      	ldr	r0, [r7, #12]
 80127ac:	f000 fa38 	bl	8012c20 <USB_WritePacket>
 80127b0:	e0d2      	b.n	8012958 <USB_EPStartXfer+0x480>
 80127b2:	bf00      	nop
 80127b4:	e007ffff 	.word	0xe007ffff
 80127b8:	fff80000 	.word	0xfff80000
 80127bc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80127c0:	69bb      	ldr	r3, [r7, #24]
 80127c2:	015a      	lsls	r2, r3, #5
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	4413      	add	r3, r2
 80127c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127cc:	691a      	ldr	r2, [r3, #16]
 80127ce:	69bb      	ldr	r3, [r7, #24]
 80127d0:	0159      	lsls	r1, r3, #5
 80127d2:	69fb      	ldr	r3, [r7, #28]
 80127d4:	440b      	add	r3, r1
 80127d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127da:	4619      	mov	r1, r3
 80127dc:	4b61      	ldr	r3, [pc, #388]	; (8012964 <USB_EPStartXfer+0x48c>)
 80127de:	4013      	ands	r3, r2
 80127e0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80127e2:	69bb      	ldr	r3, [r7, #24]
 80127e4:	015a      	lsls	r2, r3, #5
 80127e6:	69fb      	ldr	r3, [r7, #28]
 80127e8:	4413      	add	r3, r2
 80127ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127ee:	691a      	ldr	r2, [r3, #16]
 80127f0:	69bb      	ldr	r3, [r7, #24]
 80127f2:	0159      	lsls	r1, r3, #5
 80127f4:	69fb      	ldr	r3, [r7, #28]
 80127f6:	440b      	add	r3, r1
 80127f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127fc:	4619      	mov	r1, r3
 80127fe:	4b5a      	ldr	r3, [pc, #360]	; (8012968 <USB_EPStartXfer+0x490>)
 8012800:	4013      	ands	r3, r2
 8012802:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	695b      	ldr	r3, [r3, #20]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d123      	bne.n	8012854 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	015a      	lsls	r2, r3, #5
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	4413      	add	r3, r2
 8012814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012818:	691a      	ldr	r2, [r3, #16]
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	689b      	ldr	r3, [r3, #8]
 801281e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012822:	69b9      	ldr	r1, [r7, #24]
 8012824:	0148      	lsls	r0, r1, #5
 8012826:	69f9      	ldr	r1, [r7, #28]
 8012828:	4401      	add	r1, r0
 801282a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801282e:	4313      	orrs	r3, r2
 8012830:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012832:	69bb      	ldr	r3, [r7, #24]
 8012834:	015a      	lsls	r2, r3, #5
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	4413      	add	r3, r2
 801283a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801283e:	691b      	ldr	r3, [r3, #16]
 8012840:	69ba      	ldr	r2, [r7, #24]
 8012842:	0151      	lsls	r1, r2, #5
 8012844:	69fa      	ldr	r2, [r7, #28]
 8012846:	440a      	add	r2, r1
 8012848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801284c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012850:	6113      	str	r3, [r2, #16]
 8012852:	e033      	b.n	80128bc <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	695a      	ldr	r2, [r3, #20]
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	689b      	ldr	r3, [r3, #8]
 801285c:	4413      	add	r3, r2
 801285e:	1e5a      	subs	r2, r3, #1
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	689b      	ldr	r3, [r3, #8]
 8012864:	fbb2 f3f3 	udiv	r3, r2, r3
 8012868:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801286a:	69bb      	ldr	r3, [r7, #24]
 801286c:	015a      	lsls	r2, r3, #5
 801286e:	69fb      	ldr	r3, [r7, #28]
 8012870:	4413      	add	r3, r2
 8012872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012876:	691a      	ldr	r2, [r3, #16]
 8012878:	8afb      	ldrh	r3, [r7, #22]
 801287a:	04d9      	lsls	r1, r3, #19
 801287c:	4b3b      	ldr	r3, [pc, #236]	; (801296c <USB_EPStartXfer+0x494>)
 801287e:	400b      	ands	r3, r1
 8012880:	69b9      	ldr	r1, [r7, #24]
 8012882:	0148      	lsls	r0, r1, #5
 8012884:	69f9      	ldr	r1, [r7, #28]
 8012886:	4401      	add	r1, r0
 8012888:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801288c:	4313      	orrs	r3, r2
 801288e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8012890:	69bb      	ldr	r3, [r7, #24]
 8012892:	015a      	lsls	r2, r3, #5
 8012894:	69fb      	ldr	r3, [r7, #28]
 8012896:	4413      	add	r3, r2
 8012898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801289c:	691a      	ldr	r2, [r3, #16]
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	689b      	ldr	r3, [r3, #8]
 80128a2:	8af9      	ldrh	r1, [r7, #22]
 80128a4:	fb01 f303 	mul.w	r3, r1, r3
 80128a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80128ac:	69b9      	ldr	r1, [r7, #24]
 80128ae:	0148      	lsls	r0, r1, #5
 80128b0:	69f9      	ldr	r1, [r7, #28]
 80128b2:	4401      	add	r1, r0
 80128b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80128b8:	4313      	orrs	r3, r2
 80128ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80128bc:	79fb      	ldrb	r3, [r7, #7]
 80128be:	2b01      	cmp	r3, #1
 80128c0:	d10d      	bne.n	80128de <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	68db      	ldr	r3, [r3, #12]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d009      	beq.n	80128de <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	68d9      	ldr	r1, [r3, #12]
 80128ce:	69bb      	ldr	r3, [r7, #24]
 80128d0:	015a      	lsls	r2, r3, #5
 80128d2:	69fb      	ldr	r3, [r7, #28]
 80128d4:	4413      	add	r3, r2
 80128d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128da:	460a      	mov	r2, r1
 80128dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	78db      	ldrb	r3, [r3, #3]
 80128e2:	2b01      	cmp	r3, #1
 80128e4:	d128      	bne.n	8012938 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80128e6:	69fb      	ldr	r3, [r7, #28]
 80128e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128ec:	689b      	ldr	r3, [r3, #8]
 80128ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d110      	bne.n	8012918 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80128f6:	69bb      	ldr	r3, [r7, #24]
 80128f8:	015a      	lsls	r2, r3, #5
 80128fa:	69fb      	ldr	r3, [r7, #28]
 80128fc:	4413      	add	r3, r2
 80128fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	69ba      	ldr	r2, [r7, #24]
 8012906:	0151      	lsls	r1, r2, #5
 8012908:	69fa      	ldr	r2, [r7, #28]
 801290a:	440a      	add	r2, r1
 801290c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012910:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012914:	6013      	str	r3, [r2, #0]
 8012916:	e00f      	b.n	8012938 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012918:	69bb      	ldr	r3, [r7, #24]
 801291a:	015a      	lsls	r2, r3, #5
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	4413      	add	r3, r2
 8012920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	69ba      	ldr	r2, [r7, #24]
 8012928:	0151      	lsls	r1, r2, #5
 801292a:	69fa      	ldr	r2, [r7, #28]
 801292c:	440a      	add	r2, r1
 801292e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012936:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012938:	69bb      	ldr	r3, [r7, #24]
 801293a:	015a      	lsls	r2, r3, #5
 801293c:	69fb      	ldr	r3, [r7, #28]
 801293e:	4413      	add	r3, r2
 8012940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	69ba      	ldr	r2, [r7, #24]
 8012948:	0151      	lsls	r1, r2, #5
 801294a:	69fa      	ldr	r2, [r7, #28]
 801294c:	440a      	add	r2, r1
 801294e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012956:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012958:	2300      	movs	r3, #0
}
 801295a:	4618      	mov	r0, r3
 801295c:	3720      	adds	r7, #32
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	fff80000 	.word	0xfff80000
 8012968:	e007ffff 	.word	0xe007ffff
 801296c:	1ff80000 	.word	0x1ff80000

08012970 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012970:	b480      	push	{r7}
 8012972:	b087      	sub	sp, #28
 8012974:	af00      	add	r7, sp, #0
 8012976:	60f8      	str	r0, [r7, #12]
 8012978:	60b9      	str	r1, [r7, #8]
 801297a:	4613      	mov	r3, r2
 801297c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8012982:	68bb      	ldr	r3, [r7, #8]
 8012984:	781b      	ldrb	r3, [r3, #0]
 8012986:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	785b      	ldrb	r3, [r3, #1]
 801298c:	2b01      	cmp	r3, #1
 801298e:	f040 80cd 	bne.w	8012b2c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	695b      	ldr	r3, [r3, #20]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d132      	bne.n	8012a00 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	015a      	lsls	r2, r3, #5
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	4413      	add	r3, r2
 80129a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129a6:	691a      	ldr	r2, [r3, #16]
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	0159      	lsls	r1, r3, #5
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	440b      	add	r3, r1
 80129b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129b4:	4619      	mov	r1, r3
 80129b6:	4b98      	ldr	r3, [pc, #608]	; (8012c18 <USB_EP0StartXfer+0x2a8>)
 80129b8:	4013      	ands	r3, r2
 80129ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80129bc:	693b      	ldr	r3, [r7, #16]
 80129be:	015a      	lsls	r2, r3, #5
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	4413      	add	r3, r2
 80129c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129c8:	691b      	ldr	r3, [r3, #16]
 80129ca:	693a      	ldr	r2, [r7, #16]
 80129cc:	0151      	lsls	r1, r2, #5
 80129ce:	697a      	ldr	r2, [r7, #20]
 80129d0:	440a      	add	r2, r1
 80129d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80129da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	015a      	lsls	r2, r3, #5
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	4413      	add	r3, r2
 80129e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129e8:	691a      	ldr	r2, [r3, #16]
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	0159      	lsls	r1, r3, #5
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	440b      	add	r3, r1
 80129f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129f6:	4619      	mov	r1, r3
 80129f8:	4b88      	ldr	r3, [pc, #544]	; (8012c1c <USB_EP0StartXfer+0x2ac>)
 80129fa:	4013      	ands	r3, r2
 80129fc:	610b      	str	r3, [r1, #16]
 80129fe:	e04e      	b.n	8012a9e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	015a      	lsls	r2, r3, #5
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	4413      	add	r3, r2
 8012a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a0c:	691a      	ldr	r2, [r3, #16]
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	0159      	lsls	r1, r3, #5
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	440b      	add	r3, r1
 8012a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a1a:	4619      	mov	r1, r3
 8012a1c:	4b7f      	ldr	r3, [pc, #508]	; (8012c1c <USB_EP0StartXfer+0x2ac>)
 8012a1e:	4013      	ands	r3, r2
 8012a20:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	015a      	lsls	r2, r3, #5
 8012a26:	697b      	ldr	r3, [r7, #20]
 8012a28:	4413      	add	r3, r2
 8012a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a2e:	691a      	ldr	r2, [r3, #16]
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	0159      	lsls	r1, r3, #5
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	440b      	add	r3, r1
 8012a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	4b76      	ldr	r3, [pc, #472]	; (8012c18 <USB_EP0StartXfer+0x2a8>)
 8012a40:	4013      	ands	r3, r2
 8012a42:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	695a      	ldr	r2, [r3, #20]
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	689b      	ldr	r3, [r3, #8]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d903      	bls.n	8012a58 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	689a      	ldr	r2, [r3, #8]
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	015a      	lsls	r2, r3, #5
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	4413      	add	r3, r2
 8012a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a64:	691b      	ldr	r3, [r3, #16]
 8012a66:	693a      	ldr	r2, [r7, #16]
 8012a68:	0151      	lsls	r1, r2, #5
 8012a6a:	697a      	ldr	r2, [r7, #20]
 8012a6c:	440a      	add	r2, r1
 8012a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012a76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	015a      	lsls	r2, r3, #5
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	4413      	add	r3, r2
 8012a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a84:	691a      	ldr	r2, [r3, #16]
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	695b      	ldr	r3, [r3, #20]
 8012a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012a8e:	6939      	ldr	r1, [r7, #16]
 8012a90:	0148      	lsls	r0, r1, #5
 8012a92:	6979      	ldr	r1, [r7, #20]
 8012a94:	4401      	add	r1, r0
 8012a96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012a9a:	4313      	orrs	r3, r2
 8012a9c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012a9e:	79fb      	ldrb	r3, [r7, #7]
 8012aa0:	2b01      	cmp	r3, #1
 8012aa2:	d11e      	bne.n	8012ae2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	691b      	ldr	r3, [r3, #16]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d009      	beq.n	8012ac0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	015a      	lsls	r2, r3, #5
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	4413      	add	r3, r2
 8012ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ab8:	461a      	mov	r2, r3
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	691b      	ldr	r3, [r3, #16]
 8012abe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012ac0:	693b      	ldr	r3, [r7, #16]
 8012ac2:	015a      	lsls	r2, r3, #5
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	4413      	add	r3, r2
 8012ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	693a      	ldr	r2, [r7, #16]
 8012ad0:	0151      	lsls	r1, r2, #5
 8012ad2:	697a      	ldr	r2, [r7, #20]
 8012ad4:	440a      	add	r2, r1
 8012ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ada:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012ade:	6013      	str	r3, [r2, #0]
 8012ae0:	e092      	b.n	8012c08 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	015a      	lsls	r2, r3, #5
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	4413      	add	r3, r2
 8012aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	693a      	ldr	r2, [r7, #16]
 8012af2:	0151      	lsls	r1, r2, #5
 8012af4:	697a      	ldr	r2, [r7, #20]
 8012af6:	440a      	add	r2, r1
 8012af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012afc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012b00:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012b02:	68bb      	ldr	r3, [r7, #8]
 8012b04:	695b      	ldr	r3, [r3, #20]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d07e      	beq.n	8012c08 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	f003 030f 	and.w	r3, r3, #15
 8012b1a:	2101      	movs	r1, #1
 8012b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8012b20:	6979      	ldr	r1, [r7, #20]
 8012b22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b26:	4313      	orrs	r3, r2
 8012b28:	634b      	str	r3, [r1, #52]	; 0x34
 8012b2a:	e06d      	b.n	8012c08 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	015a      	lsls	r2, r3, #5
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	4413      	add	r3, r2
 8012b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b38:	691a      	ldr	r2, [r3, #16]
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	0159      	lsls	r1, r3, #5
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	440b      	add	r3, r1
 8012b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b46:	4619      	mov	r1, r3
 8012b48:	4b34      	ldr	r3, [pc, #208]	; (8012c1c <USB_EP0StartXfer+0x2ac>)
 8012b4a:	4013      	ands	r3, r2
 8012b4c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	015a      	lsls	r2, r3, #5
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	4413      	add	r3, r2
 8012b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b5a:	691a      	ldr	r2, [r3, #16]
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	0159      	lsls	r1, r3, #5
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	440b      	add	r3, r1
 8012b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b68:	4619      	mov	r1, r3
 8012b6a:	4b2b      	ldr	r3, [pc, #172]	; (8012c18 <USB_EP0StartXfer+0x2a8>)
 8012b6c:	4013      	ands	r3, r2
 8012b6e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	695b      	ldr	r3, [r3, #20]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d003      	beq.n	8012b80 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	689a      	ldr	r2, [r3, #8]
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	015a      	lsls	r2, r3, #5
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	4413      	add	r3, r2
 8012b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b8c:	691b      	ldr	r3, [r3, #16]
 8012b8e:	693a      	ldr	r2, [r7, #16]
 8012b90:	0151      	lsls	r1, r2, #5
 8012b92:	697a      	ldr	r2, [r7, #20]
 8012b94:	440a      	add	r2, r1
 8012b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012b9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	015a      	lsls	r2, r3, #5
 8012ba4:	697b      	ldr	r3, [r7, #20]
 8012ba6:	4413      	add	r3, r2
 8012ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bac:	691a      	ldr	r2, [r3, #16]
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	689b      	ldr	r3, [r3, #8]
 8012bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012bb6:	6939      	ldr	r1, [r7, #16]
 8012bb8:	0148      	lsls	r0, r1, #5
 8012bba:	6979      	ldr	r1, [r7, #20]
 8012bbc:	4401      	add	r1, r0
 8012bbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012bc2:	4313      	orrs	r3, r2
 8012bc4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012bc6:	79fb      	ldrb	r3, [r7, #7]
 8012bc8:	2b01      	cmp	r3, #1
 8012bca:	d10d      	bne.n	8012be8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	68db      	ldr	r3, [r3, #12]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d009      	beq.n	8012be8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	68d9      	ldr	r1, [r3, #12]
 8012bd8:	693b      	ldr	r3, [r7, #16]
 8012bda:	015a      	lsls	r2, r3, #5
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	4413      	add	r3, r2
 8012be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012be4:	460a      	mov	r2, r1
 8012be6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	015a      	lsls	r2, r3, #5
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	4413      	add	r3, r2
 8012bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	693a      	ldr	r2, [r7, #16]
 8012bf8:	0151      	lsls	r1, r2, #5
 8012bfa:	697a      	ldr	r2, [r7, #20]
 8012bfc:	440a      	add	r2, r1
 8012bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012c08:	2300      	movs	r3, #0
}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	371c      	adds	r7, #28
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c14:	4770      	bx	lr
 8012c16:	bf00      	nop
 8012c18:	e007ffff 	.word	0xe007ffff
 8012c1c:	fff80000 	.word	0xfff80000

08012c20 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012c20:	b480      	push	{r7}
 8012c22:	b089      	sub	sp, #36	; 0x24
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	60f8      	str	r0, [r7, #12]
 8012c28:	60b9      	str	r1, [r7, #8]
 8012c2a:	4611      	mov	r1, r2
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	460b      	mov	r3, r1
 8012c30:	71fb      	strb	r3, [r7, #7]
 8012c32:	4613      	mov	r3, r2
 8012c34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012c3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d11a      	bne.n	8012c7c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012c46:	88bb      	ldrh	r3, [r7, #4]
 8012c48:	3303      	adds	r3, #3
 8012c4a:	089b      	lsrs	r3, r3, #2
 8012c4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012c4e:	2300      	movs	r3, #0
 8012c50:	61bb      	str	r3, [r7, #24]
 8012c52:	e00f      	b.n	8012c74 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012c54:	79fb      	ldrb	r3, [r7, #7]
 8012c56:	031a      	lsls	r2, r3, #12
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c60:	461a      	mov	r2, r3
 8012c62:	69fb      	ldr	r3, [r7, #28]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	3304      	adds	r3, #4
 8012c6c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	3301      	adds	r3, #1
 8012c72:	61bb      	str	r3, [r7, #24]
 8012c74:	69ba      	ldr	r2, [r7, #24]
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d3eb      	bcc.n	8012c54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012c7c:	2300      	movs	r3, #0
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3724      	adds	r7, #36	; 0x24
 8012c82:	46bd      	mov	sp, r7
 8012c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c88:	4770      	bx	lr

08012c8a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012c8a:	b480      	push	{r7}
 8012c8c:	b089      	sub	sp, #36	; 0x24
 8012c8e:	af00      	add	r7, sp, #0
 8012c90:	60f8      	str	r0, [r7, #12]
 8012c92:	60b9      	str	r1, [r7, #8]
 8012c94:	4613      	mov	r3, r2
 8012c96:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012c9c:	68bb      	ldr	r3, [r7, #8]
 8012c9e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012ca0:	88fb      	ldrh	r3, [r7, #6]
 8012ca2:	3303      	adds	r3, #3
 8012ca4:	089b      	lsrs	r3, r3, #2
 8012ca6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012ca8:	2300      	movs	r3, #0
 8012caa:	61bb      	str	r3, [r7, #24]
 8012cac:	e00b      	b.n	8012cc6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012cae:	697b      	ldr	r3, [r7, #20]
 8012cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	69fb      	ldr	r3, [r7, #28]
 8012cb8:	601a      	str	r2, [r3, #0]
    pDest++;
 8012cba:	69fb      	ldr	r3, [r7, #28]
 8012cbc:	3304      	adds	r3, #4
 8012cbe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012cc0:	69bb      	ldr	r3, [r7, #24]
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	61bb      	str	r3, [r7, #24]
 8012cc6:	69ba      	ldr	r2, [r7, #24]
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d3ef      	bcc.n	8012cae <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8012cce:	69fb      	ldr	r3, [r7, #28]
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	3724      	adds	r7, #36	; 0x24
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cda:	4770      	bx	lr

08012cdc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b085      	sub	sp, #20
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	785b      	ldrb	r3, [r3, #1]
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	d12c      	bne.n	8012d52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	015a      	lsls	r2, r3, #5
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	4413      	add	r3, r2
 8012d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	db12      	blt.n	8012d30 <USB_EPSetStall+0x54>
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d00f      	beq.n	8012d30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	015a      	lsls	r2, r3, #5
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	4413      	add	r3, r2
 8012d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	68ba      	ldr	r2, [r7, #8]
 8012d20:	0151      	lsls	r1, r2, #5
 8012d22:	68fa      	ldr	r2, [r7, #12]
 8012d24:	440a      	add	r2, r1
 8012d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012d2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	015a      	lsls	r2, r3, #5
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	4413      	add	r3, r2
 8012d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	68ba      	ldr	r2, [r7, #8]
 8012d40:	0151      	lsls	r1, r2, #5
 8012d42:	68fa      	ldr	r2, [r7, #12]
 8012d44:	440a      	add	r2, r1
 8012d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012d4e:	6013      	str	r3, [r2, #0]
 8012d50:	e02b      	b.n	8012daa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	015a      	lsls	r2, r3, #5
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	4413      	add	r3, r2
 8012d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	db12      	blt.n	8012d8a <USB_EPSetStall+0xae>
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d00f      	beq.n	8012d8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	015a      	lsls	r2, r3, #5
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	4413      	add	r3, r2
 8012d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	68ba      	ldr	r2, [r7, #8]
 8012d7a:	0151      	lsls	r1, r2, #5
 8012d7c:	68fa      	ldr	r2, [r7, #12]
 8012d7e:	440a      	add	r2, r1
 8012d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012d88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012d8a:	68bb      	ldr	r3, [r7, #8]
 8012d8c:	015a      	lsls	r2, r3, #5
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	4413      	add	r3, r2
 8012d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	68ba      	ldr	r2, [r7, #8]
 8012d9a:	0151      	lsls	r1, r2, #5
 8012d9c:	68fa      	ldr	r2, [r7, #12]
 8012d9e:	440a      	add	r2, r1
 8012da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012da4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012da8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012daa:	2300      	movs	r3, #0
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3714      	adds	r7, #20
 8012db0:	46bd      	mov	sp, r7
 8012db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db6:	4770      	bx	lr

08012db8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012db8:	b480      	push	{r7}
 8012dba:	b085      	sub	sp, #20
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	785b      	ldrb	r3, [r3, #1]
 8012dd0:	2b01      	cmp	r3, #1
 8012dd2:	d128      	bne.n	8012e26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012dd4:	68bb      	ldr	r3, [r7, #8]
 8012dd6:	015a      	lsls	r2, r3, #5
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	4413      	add	r3, r2
 8012ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	68ba      	ldr	r2, [r7, #8]
 8012de4:	0151      	lsls	r1, r2, #5
 8012de6:	68fa      	ldr	r2, [r7, #12]
 8012de8:	440a      	add	r2, r1
 8012dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012dee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012df2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	78db      	ldrb	r3, [r3, #3]
 8012df8:	2b03      	cmp	r3, #3
 8012dfa:	d003      	beq.n	8012e04 <USB_EPClearStall+0x4c>
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	78db      	ldrb	r3, [r3, #3]
 8012e00:	2b02      	cmp	r3, #2
 8012e02:	d138      	bne.n	8012e76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	015a      	lsls	r2, r3, #5
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	4413      	add	r3, r2
 8012e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	68ba      	ldr	r2, [r7, #8]
 8012e14:	0151      	lsls	r1, r2, #5
 8012e16:	68fa      	ldr	r2, [r7, #12]
 8012e18:	440a      	add	r2, r1
 8012e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e22:	6013      	str	r3, [r2, #0]
 8012e24:	e027      	b.n	8012e76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	015a      	lsls	r2, r3, #5
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	4413      	add	r3, r2
 8012e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	68ba      	ldr	r2, [r7, #8]
 8012e36:	0151      	lsls	r1, r2, #5
 8012e38:	68fa      	ldr	r2, [r7, #12]
 8012e3a:	440a      	add	r2, r1
 8012e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	78db      	ldrb	r3, [r3, #3]
 8012e4a:	2b03      	cmp	r3, #3
 8012e4c:	d003      	beq.n	8012e56 <USB_EPClearStall+0x9e>
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	78db      	ldrb	r3, [r3, #3]
 8012e52:	2b02      	cmp	r3, #2
 8012e54:	d10f      	bne.n	8012e76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	015a      	lsls	r2, r3, #5
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	4413      	add	r3, r2
 8012e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	68ba      	ldr	r2, [r7, #8]
 8012e66:	0151      	lsls	r1, r2, #5
 8012e68:	68fa      	ldr	r2, [r7, #12]
 8012e6a:	440a      	add	r2, r1
 8012e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012e76:	2300      	movs	r3, #0
}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	3714      	adds	r7, #20
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e82:	4770      	bx	lr

08012e84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012e84:	b480      	push	{r7}
 8012e86:	b085      	sub	sp, #20
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
 8012e8c:	460b      	mov	r3, r1
 8012e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	68fa      	ldr	r2, [r7, #12]
 8012e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012ea2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012ea6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eae:	681a      	ldr	r2, [r3, #0]
 8012eb0:	78fb      	ldrb	r3, [r7, #3]
 8012eb2:	011b      	lsls	r3, r3, #4
 8012eb4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012eb8:	68f9      	ldr	r1, [r7, #12]
 8012eba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012ebe:	4313      	orrs	r3, r2
 8012ec0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012ec2:	2300      	movs	r3, #0
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3714      	adds	r7, #20
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ece:	4770      	bx	lr

08012ed0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b084      	sub	sp, #16
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ee2:	685b      	ldr	r3, [r3, #4]
 8012ee4:	68fa      	ldr	r2, [r7, #12]
 8012ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012eea:	f023 0302 	bic.w	r3, r3, #2
 8012eee:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012ef0:	2003      	movs	r0, #3
 8012ef2:	f7f1 fb65 	bl	80045c0 <HAL_Delay>

  return HAL_OK;
 8012ef6:	2300      	movs	r3, #0
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3710      	adds	r7, #16
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}

08012f00 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b084      	sub	sp, #16
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	68fa      	ldr	r2, [r7, #12]
 8012f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012f1a:	f043 0302 	orr.w	r3, r3, #2
 8012f1e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012f20:	2003      	movs	r0, #3
 8012f22:	f7f1 fb4d 	bl	80045c0 <HAL_Delay>

  return HAL_OK;
 8012f26:	2300      	movs	r3, #0
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3710      	adds	r7, #16
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012f30:	b480      	push	{r7}
 8012f32:	b085      	sub	sp, #20
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	695b      	ldr	r3, [r3, #20]
 8012f3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	699b      	ldr	r3, [r3, #24]
 8012f42:	68fa      	ldr	r2, [r7, #12]
 8012f44:	4013      	ands	r3, r2
 8012f46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012f48:	68fb      	ldr	r3, [r7, #12]
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3714      	adds	r7, #20
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f54:	4770      	bx	lr

08012f56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f56:	b480      	push	{r7}
 8012f58:	b085      	sub	sp, #20
 8012f5a:	af00      	add	r7, sp, #0
 8012f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f68:	699b      	ldr	r3, [r3, #24]
 8012f6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f72:	69db      	ldr	r3, [r3, #28]
 8012f74:	68ba      	ldr	r2, [r7, #8]
 8012f76:	4013      	ands	r3, r2
 8012f78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	0c1b      	lsrs	r3, r3, #16
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3714      	adds	r7, #20
 8012f82:	46bd      	mov	sp, r7
 8012f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f88:	4770      	bx	lr

08012f8a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f8a:	b480      	push	{r7}
 8012f8c:	b085      	sub	sp, #20
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f9c:	699b      	ldr	r3, [r3, #24]
 8012f9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fa6:	69db      	ldr	r3, [r3, #28]
 8012fa8:	68ba      	ldr	r2, [r7, #8]
 8012faa:	4013      	ands	r3, r2
 8012fac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	b29b      	uxth	r3, r3
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3714      	adds	r7, #20
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr

08012fbe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012fbe:	b480      	push	{r7}
 8012fc0:	b085      	sub	sp, #20
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012fce:	78fb      	ldrb	r3, [r7, #3]
 8012fd0:	015a      	lsls	r2, r3, #5
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	4413      	add	r3, r2
 8012fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fe4:	695b      	ldr	r3, [r3, #20]
 8012fe6:	68ba      	ldr	r2, [r7, #8]
 8012fe8:	4013      	ands	r3, r2
 8012fea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012fec:	68bb      	ldr	r3, [r7, #8]
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3714      	adds	r7, #20
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff8:	4770      	bx	lr

08012ffa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012ffa:	b480      	push	{r7}
 8012ffc:	b087      	sub	sp, #28
 8012ffe:	af00      	add	r7, sp, #0
 8013000:	6078      	str	r0, [r7, #4]
 8013002:	460b      	mov	r3, r1
 8013004:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801300a:	697b      	ldr	r3, [r7, #20]
 801300c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013010:	691b      	ldr	r3, [r3, #16]
 8013012:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801301c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801301e:	78fb      	ldrb	r3, [r7, #3]
 8013020:	f003 030f 	and.w	r3, r3, #15
 8013024:	68fa      	ldr	r2, [r7, #12]
 8013026:	fa22 f303 	lsr.w	r3, r2, r3
 801302a:	01db      	lsls	r3, r3, #7
 801302c:	b2db      	uxtb	r3, r3
 801302e:	693a      	ldr	r2, [r7, #16]
 8013030:	4313      	orrs	r3, r2
 8013032:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013034:	78fb      	ldrb	r3, [r7, #3]
 8013036:	015a      	lsls	r2, r3, #5
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	4413      	add	r3, r2
 801303c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013040:	689b      	ldr	r3, [r3, #8]
 8013042:	693a      	ldr	r2, [r7, #16]
 8013044:	4013      	ands	r3, r2
 8013046:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013048:	68bb      	ldr	r3, [r7, #8]
}
 801304a:	4618      	mov	r0, r3
 801304c:	371c      	adds	r7, #28
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr

08013056 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013056:	b480      	push	{r7}
 8013058:	b083      	sub	sp, #12
 801305a:	af00      	add	r7, sp, #0
 801305c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	695b      	ldr	r3, [r3, #20]
 8013062:	f003 0301 	and.w	r3, r3, #1
}
 8013066:	4618      	mov	r0, r3
 8013068:	370c      	adds	r7, #12
 801306a:	46bd      	mov	sp, r7
 801306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013070:	4770      	bx	lr
	...

08013074 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013074:	b480      	push	{r7}
 8013076:	b085      	sub	sp, #20
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013086:	681a      	ldr	r2, [r3, #0]
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801308e:	4619      	mov	r1, r3
 8013090:	4b09      	ldr	r3, [pc, #36]	; (80130b8 <USB_ActivateSetup+0x44>)
 8013092:	4013      	ands	r3, r2
 8013094:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	68fa      	ldr	r2, [r7, #12]
 80130a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80130a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80130a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80130aa:	2300      	movs	r3, #0
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3714      	adds	r7, #20
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr
 80130b8:	fffff800 	.word	0xfffff800

080130bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80130bc:	b480      	push	{r7}
 80130be:	b087      	sub	sp, #28
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	60f8      	str	r0, [r7, #12]
 80130c4:	460b      	mov	r3, r1
 80130c6:	607a      	str	r2, [r7, #4]
 80130c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	333c      	adds	r3, #60	; 0x3c
 80130d2:	3304      	adds	r3, #4
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80130d8:	693b      	ldr	r3, [r7, #16]
 80130da:	4a26      	ldr	r2, [pc, #152]	; (8013174 <USB_EP0_OutStart+0xb8>)
 80130dc:	4293      	cmp	r3, r2
 80130de:	d90a      	bls.n	80130f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80130ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80130f0:	d101      	bne.n	80130f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80130f2:	2300      	movs	r3, #0
 80130f4:	e037      	b.n	8013166 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130fc:	461a      	mov	r2, r3
 80130fe:	2300      	movs	r3, #0
 8013100:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013108:	691b      	ldr	r3, [r3, #16]
 801310a:	697a      	ldr	r2, [r7, #20]
 801310c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013110:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013116:	697b      	ldr	r3, [r7, #20]
 8013118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801311c:	691b      	ldr	r3, [r3, #16]
 801311e:	697a      	ldr	r2, [r7, #20]
 8013120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013124:	f043 0318 	orr.w	r3, r3, #24
 8013128:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801312a:	697b      	ldr	r3, [r7, #20]
 801312c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013130:	691b      	ldr	r3, [r3, #16]
 8013132:	697a      	ldr	r2, [r7, #20]
 8013134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013138:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801313c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801313e:	7afb      	ldrb	r3, [r7, #11]
 8013140:	2b01      	cmp	r3, #1
 8013142:	d10f      	bne.n	8013164 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801314a:	461a      	mov	r2, r3
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	697a      	ldr	r2, [r7, #20]
 801315a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801315e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013162:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013164:	2300      	movs	r3, #0
}
 8013166:	4618      	mov	r0, r3
 8013168:	371c      	adds	r7, #28
 801316a:	46bd      	mov	sp, r7
 801316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013170:	4770      	bx	lr
 8013172:	bf00      	nop
 8013174:	4f54300a 	.word	0x4f54300a

08013178 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013178:	b480      	push	{r7}
 801317a:	b085      	sub	sp, #20
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8013180:	2300      	movs	r3, #0
 8013182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	3301      	adds	r3, #1
 8013188:	60fb      	str	r3, [r7, #12]
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	4a13      	ldr	r2, [pc, #76]	; (80131dc <USB_CoreReset+0x64>)
 801318e:	4293      	cmp	r3, r2
 8013190:	d901      	bls.n	8013196 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013192:	2303      	movs	r3, #3
 8013194:	e01b      	b.n	80131ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	691b      	ldr	r3, [r3, #16]
 801319a:	2b00      	cmp	r3, #0
 801319c:	daf2      	bge.n	8013184 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801319e:	2300      	movs	r3, #0
 80131a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	691b      	ldr	r3, [r3, #16]
 80131a6:	f043 0201 	orr.w	r2, r3, #1
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	3301      	adds	r3, #1
 80131b2:	60fb      	str	r3, [r7, #12]
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	4a09      	ldr	r2, [pc, #36]	; (80131dc <USB_CoreReset+0x64>)
 80131b8:	4293      	cmp	r3, r2
 80131ba:	d901      	bls.n	80131c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80131bc:	2303      	movs	r3, #3
 80131be:	e006      	b.n	80131ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	691b      	ldr	r3, [r3, #16]
 80131c4:	f003 0301 	and.w	r3, r3, #1
 80131c8:	2b01      	cmp	r3, #1
 80131ca:	d0f0      	beq.n	80131ae <USB_CoreReset+0x36>

  return HAL_OK;
 80131cc:	2300      	movs	r3, #0
}
 80131ce:	4618      	mov	r0, r3
 80131d0:	3714      	adds	r7, #20
 80131d2:	46bd      	mov	sp, r7
 80131d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d8:	4770      	bx	lr
 80131da:	bf00      	nop
 80131dc:	00030d40 	.word	0x00030d40

080131e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80131e4:	4904      	ldr	r1, [pc, #16]	; (80131f8 <MX_FATFS_Init+0x18>)
 80131e6:	4805      	ldr	r0, [pc, #20]	; (80131fc <MX_FATFS_Init+0x1c>)
 80131e8:	f005 fbec 	bl	80189c4 <FATFS_LinkDriver>
 80131ec:	4603      	mov	r3, r0
 80131ee:	461a      	mov	r2, r3
 80131f0:	4b03      	ldr	r3, [pc, #12]	; (8013200 <MX_FATFS_Init+0x20>)
 80131f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80131f4:	bf00      	nop
 80131f6:	bd80      	pop	{r7, pc}
 80131f8:	24001770 	.word	0x24001770
 80131fc:	0801af54 	.word	0x0801af54
 8013200:	2400176c 	.word	0x2400176c

08013204 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013204:	b480      	push	{r7}
 8013206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013208:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801320a:	4618      	mov	r0, r3
 801320c:	46bd      	mov	sp, r7
 801320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013212:	4770      	bx	lr

08013214 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801321a:	2300      	movs	r3, #0
 801321c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801321e:	f000 f885 	bl	801332c <BSP_SD_IsDetected>
 8013222:	4603      	mov	r3, r0
 8013224:	2b01      	cmp	r3, #1
 8013226:	d001      	beq.n	801322c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013228:	2302      	movs	r3, #2
 801322a:	e012      	b.n	8013252 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801322c:	480b      	ldr	r0, [pc, #44]	; (801325c <BSP_SD_Init+0x48>)
 801322e:	f7f9 fc1d 	bl	800ca6c <HAL_SD_Init>
 8013232:	4603      	mov	r3, r0
 8013234:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013236:	79fb      	ldrb	r3, [r7, #7]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d109      	bne.n	8013250 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801323c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013240:	4806      	ldr	r0, [pc, #24]	; (801325c <BSP_SD_Init+0x48>)
 8013242:	f7fa fdf1 	bl	800de28 <HAL_SD_ConfigWideBusOperation>
 8013246:	4603      	mov	r3, r0
 8013248:	2b00      	cmp	r3, #0
 801324a:	d001      	beq.n	8013250 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801324c:	2301      	movs	r3, #1
 801324e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013250:	79fb      	ldrb	r3, [r7, #7]
}
 8013252:	4618      	mov	r0, r3
 8013254:	3708      	adds	r7, #8
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	24001470 	.word	0x24001470

08013260 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b086      	sub	sp, #24
 8013264:	af00      	add	r7, sp, #0
 8013266:	60f8      	str	r0, [r7, #12]
 8013268:	60b9      	str	r1, [r7, #8]
 801326a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801326c:	2300      	movs	r3, #0
 801326e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	68ba      	ldr	r2, [r7, #8]
 8013274:	68f9      	ldr	r1, [r7, #12]
 8013276:	4806      	ldr	r0, [pc, #24]	; (8013290 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013278:	f7fa f834 	bl	800d2e4 <HAL_SD_ReadBlocks_DMA>
 801327c:	4603      	mov	r3, r0
 801327e:	2b00      	cmp	r3, #0
 8013280:	d001      	beq.n	8013286 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013282:	2301      	movs	r3, #1
 8013284:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013286:	7dfb      	ldrb	r3, [r7, #23]
}
 8013288:	4618      	mov	r0, r3
 801328a:	3718      	adds	r7, #24
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}
 8013290:	24001470 	.word	0x24001470

08013294 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b086      	sub	sp, #24
 8013298:	af00      	add	r7, sp, #0
 801329a:	60f8      	str	r0, [r7, #12]
 801329c:	60b9      	str	r1, [r7, #8]
 801329e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80132a0:	2300      	movs	r3, #0
 80132a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	68ba      	ldr	r2, [r7, #8]
 80132a8:	68f9      	ldr	r1, [r7, #12]
 80132aa:	4806      	ldr	r0, [pc, #24]	; (80132c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80132ac:	f7fa f8c2 	bl	800d434 <HAL_SD_WriteBlocks_DMA>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d001      	beq.n	80132ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80132b6:	2301      	movs	r3, #1
 80132b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80132ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3718      	adds	r7, #24
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	24001470 	.word	0x24001470

080132c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80132cc:	4805      	ldr	r0, [pc, #20]	; (80132e4 <BSP_SD_GetCardState+0x1c>)
 80132ce:	f7fa fe55 	bl	800df7c <HAL_SD_GetCardState>
 80132d2:	4603      	mov	r3, r0
 80132d4:	2b04      	cmp	r3, #4
 80132d6:	bf14      	ite	ne
 80132d8:	2301      	movne	r3, #1
 80132da:	2300      	moveq	r3, #0
 80132dc:	b2db      	uxtb	r3, r3
}
 80132de:	4618      	mov	r0, r3
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	24001470 	.word	0x24001470

080132e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b082      	sub	sp, #8
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80132f0:	6879      	ldr	r1, [r7, #4]
 80132f2:	4803      	ldr	r0, [pc, #12]	; (8013300 <BSP_SD_GetCardInfo+0x18>)
 80132f4:	f7fa fd6c 	bl	800ddd0 <HAL_SD_GetCardInfo>
}
 80132f8:	bf00      	nop
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	24001470 	.word	0x24001470

08013304 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b082      	sub	sp, #8
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801330c:	f000 f9a0 	bl	8013650 <BSP_SD_WriteCpltCallback>
}
 8013310:	bf00      	nop
 8013312:	3708      	adds	r7, #8
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b082      	sub	sp, #8
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013320:	f000 f9a2 	bl	8013668 <BSP_SD_ReadCpltCallback>
}
 8013324:	bf00      	nop
 8013326:	3708      	adds	r7, #8
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}

0801332c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013332:	2301      	movs	r3, #1
 8013334:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013336:	f000 f80b 	bl	8013350 <BSP_PlatformIsDetected>
 801333a:	4603      	mov	r3, r0
 801333c:	2b00      	cmp	r3, #0
 801333e:	d101      	bne.n	8013344 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013340:	2300      	movs	r3, #0
 8013342:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013344:	79fb      	ldrb	r3, [r7, #7]
 8013346:	b2db      	uxtb	r3, r3
}
 8013348:	4618      	mov	r0, r3
 801334a:	3708      	adds	r7, #8
 801334c:	46bd      	mov	sp, r7
 801334e:	bd80      	pop	{r7, pc}

08013350 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013350:	b580      	push	{r7, lr}
 8013352:	b082      	sub	sp, #8
 8013354:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013356:	2301      	movs	r3, #1
 8013358:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801335a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801335e:	4806      	ldr	r0, [pc, #24]	; (8013378 <BSP_PlatformIsDetected+0x28>)
 8013360:	f7f4 fe30 	bl	8007fc4 <HAL_GPIO_ReadPin>
 8013364:	4603      	mov	r3, r0
 8013366:	2b00      	cmp	r3, #0
 8013368:	d001      	beq.n	801336e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801336a:	2300      	movs	r3, #0
 801336c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801336e:	79fb      	ldrb	r3, [r7, #7]
}
 8013370:	4618      	mov	r0, r3
 8013372:	3708      	adds	r7, #8
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}
 8013378:	58020000 	.word	0x58020000

0801337c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b084      	sub	sp, #16
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013384:	f7f1 f910 	bl	80045a8 <HAL_GetTick>
 8013388:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801338a:	e006      	b.n	801339a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801338c:	f7ff ff9c 	bl	80132c8 <BSP_SD_GetCardState>
 8013390:	4603      	mov	r3, r0
 8013392:	2b00      	cmp	r3, #0
 8013394:	d101      	bne.n	801339a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013396:	2300      	movs	r3, #0
 8013398:	e009      	b.n	80133ae <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801339a:	f7f1 f905 	bl	80045a8 <HAL_GetTick>
 801339e:	4602      	mov	r2, r0
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	1ad3      	subs	r3, r2, r3
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	429a      	cmp	r2, r3
 80133a8:	d8f0      	bhi.n	801338c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80133aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3710      	adds	r7, #16
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}
	...

080133b8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b082      	sub	sp, #8
 80133bc:	af00      	add	r7, sp, #0
 80133be:	4603      	mov	r3, r0
 80133c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80133c2:	4b0b      	ldr	r3, [pc, #44]	; (80133f0 <SD_CheckStatus+0x38>)
 80133c4:	2201      	movs	r2, #1
 80133c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80133c8:	f7ff ff7e 	bl	80132c8 <BSP_SD_GetCardState>
 80133cc:	4603      	mov	r3, r0
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d107      	bne.n	80133e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80133d2:	4b07      	ldr	r3, [pc, #28]	; (80133f0 <SD_CheckStatus+0x38>)
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	b2db      	uxtb	r3, r3
 80133d8:	f023 0301 	bic.w	r3, r3, #1
 80133dc:	b2da      	uxtb	r2, r3
 80133de:	4b04      	ldr	r3, [pc, #16]	; (80133f0 <SD_CheckStatus+0x38>)
 80133e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80133e2:	4b03      	ldr	r3, [pc, #12]	; (80133f0 <SD_CheckStatus+0x38>)
 80133e4:	781b      	ldrb	r3, [r3, #0]
 80133e6:	b2db      	uxtb	r3, r3
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	3708      	adds	r7, #8
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bd80      	pop	{r7, pc}
 80133f0:	2400001d 	.word	0x2400001d

080133f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b082      	sub	sp, #8
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	4603      	mov	r3, r0
 80133fc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80133fe:	f7ff ff09 	bl	8013214 <BSP_SD_Init>
 8013402:	4603      	mov	r3, r0
 8013404:	2b00      	cmp	r3, #0
 8013406:	d107      	bne.n	8013418 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013408:	79fb      	ldrb	r3, [r7, #7]
 801340a:	4618      	mov	r0, r3
 801340c:	f7ff ffd4 	bl	80133b8 <SD_CheckStatus>
 8013410:	4603      	mov	r3, r0
 8013412:	461a      	mov	r2, r3
 8013414:	4b04      	ldr	r3, [pc, #16]	; (8013428 <SD_initialize+0x34>)
 8013416:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013418:	4b03      	ldr	r3, [pc, #12]	; (8013428 <SD_initialize+0x34>)
 801341a:	781b      	ldrb	r3, [r3, #0]
 801341c:	b2db      	uxtb	r3, r3
}
 801341e:	4618      	mov	r0, r3
 8013420:	3708      	adds	r7, #8
 8013422:	46bd      	mov	sp, r7
 8013424:	bd80      	pop	{r7, pc}
 8013426:	bf00      	nop
 8013428:	2400001d 	.word	0x2400001d

0801342c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b082      	sub	sp, #8
 8013430:	af00      	add	r7, sp, #0
 8013432:	4603      	mov	r3, r0
 8013434:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013436:	79fb      	ldrb	r3, [r7, #7]
 8013438:	4618      	mov	r0, r3
 801343a:	f7ff ffbd 	bl	80133b8 <SD_CheckStatus>
 801343e:	4603      	mov	r3, r0
}
 8013440:	4618      	mov	r0, r3
 8013442:	3708      	adds	r7, #8
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}

08013448 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b086      	sub	sp, #24
 801344c:	af00      	add	r7, sp, #0
 801344e:	60b9      	str	r1, [r7, #8]
 8013450:	607a      	str	r2, [r7, #4]
 8013452:	603b      	str	r3, [r7, #0]
 8013454:	4603      	mov	r3, r0
 8013456:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013458:	2301      	movs	r3, #1
 801345a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801345c:	f247 5030 	movw	r0, #30000	; 0x7530
 8013460:	f7ff ff8c 	bl	801337c <SD_CheckStatusWithTimeout>
 8013464:	4603      	mov	r3, r0
 8013466:	2b00      	cmp	r3, #0
 8013468:	da01      	bge.n	801346e <SD_read+0x26>
  {
    return res;
 801346a:	7dfb      	ldrb	r3, [r7, #23]
 801346c:	e03b      	b.n	80134e6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801346e:	683a      	ldr	r2, [r7, #0]
 8013470:	6879      	ldr	r1, [r7, #4]
 8013472:	68b8      	ldr	r0, [r7, #8]
 8013474:	f7ff fef4 	bl	8013260 <BSP_SD_ReadBlocks_DMA>
 8013478:	4603      	mov	r3, r0
 801347a:	2b00      	cmp	r3, #0
 801347c:	d132      	bne.n	80134e4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801347e:	4b1c      	ldr	r3, [pc, #112]	; (80134f0 <SD_read+0xa8>)
 8013480:	2200      	movs	r2, #0
 8013482:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013484:	f7f1 f890 	bl	80045a8 <HAL_GetTick>
 8013488:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801348a:	bf00      	nop
 801348c:	4b18      	ldr	r3, [pc, #96]	; (80134f0 <SD_read+0xa8>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d108      	bne.n	80134a6 <SD_read+0x5e>
 8013494:	f7f1 f888 	bl	80045a8 <HAL_GetTick>
 8013498:	4602      	mov	r2, r0
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	1ad3      	subs	r3, r2, r3
 801349e:	f247 522f 	movw	r2, #29999	; 0x752f
 80134a2:	4293      	cmp	r3, r2
 80134a4:	d9f2      	bls.n	801348c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80134a6:	4b12      	ldr	r3, [pc, #72]	; (80134f0 <SD_read+0xa8>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d102      	bne.n	80134b4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80134ae:	2301      	movs	r3, #1
 80134b0:	75fb      	strb	r3, [r7, #23]
 80134b2:	e017      	b.n	80134e4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80134b4:	4b0e      	ldr	r3, [pc, #56]	; (80134f0 <SD_read+0xa8>)
 80134b6:	2200      	movs	r2, #0
 80134b8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80134ba:	f7f1 f875 	bl	80045a8 <HAL_GetTick>
 80134be:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80134c0:	e007      	b.n	80134d2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80134c2:	f7ff ff01 	bl	80132c8 <BSP_SD_GetCardState>
 80134c6:	4603      	mov	r3, r0
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d102      	bne.n	80134d2 <SD_read+0x8a>
          {
            res = RES_OK;
 80134cc:	2300      	movs	r3, #0
 80134ce:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80134d0:	e008      	b.n	80134e4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80134d2:	f7f1 f869 	bl	80045a8 <HAL_GetTick>
 80134d6:	4602      	mov	r2, r0
 80134d8:	693b      	ldr	r3, [r7, #16]
 80134da:	1ad3      	subs	r3, r2, r3
 80134dc:	f247 522f 	movw	r2, #29999	; 0x752f
 80134e0:	4293      	cmp	r3, r2
 80134e2:	d9ee      	bls.n	80134c2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80134e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3718      	adds	r7, #24
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}
 80134ee:	bf00      	nop
 80134f0:	24000b54 	.word	0x24000b54

080134f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b086      	sub	sp, #24
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	60b9      	str	r1, [r7, #8]
 80134fc:	607a      	str	r2, [r7, #4]
 80134fe:	603b      	str	r3, [r7, #0]
 8013500:	4603      	mov	r3, r0
 8013502:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013504:	2301      	movs	r3, #1
 8013506:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8013508:	4b24      	ldr	r3, [pc, #144]	; (801359c <SD_write+0xa8>)
 801350a:	2200      	movs	r2, #0
 801350c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801350e:	f247 5030 	movw	r0, #30000	; 0x7530
 8013512:	f7ff ff33 	bl	801337c <SD_CheckStatusWithTimeout>
 8013516:	4603      	mov	r3, r0
 8013518:	2b00      	cmp	r3, #0
 801351a:	da01      	bge.n	8013520 <SD_write+0x2c>
  {
    return res;
 801351c:	7dfb      	ldrb	r3, [r7, #23]
 801351e:	e038      	b.n	8013592 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013520:	683a      	ldr	r2, [r7, #0]
 8013522:	6879      	ldr	r1, [r7, #4]
 8013524:	68b8      	ldr	r0, [r7, #8]
 8013526:	f7ff feb5 	bl	8013294 <BSP_SD_WriteBlocks_DMA>
 801352a:	4603      	mov	r3, r0
 801352c:	2b00      	cmp	r3, #0
 801352e:	d12f      	bne.n	8013590 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8013530:	f7f1 f83a 	bl	80045a8 <HAL_GetTick>
 8013534:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013536:	bf00      	nop
 8013538:	4b18      	ldr	r3, [pc, #96]	; (801359c <SD_write+0xa8>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d108      	bne.n	8013552 <SD_write+0x5e>
 8013540:	f7f1 f832 	bl	80045a8 <HAL_GetTick>
 8013544:	4602      	mov	r2, r0
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	1ad3      	subs	r3, r2, r3
 801354a:	f247 522f 	movw	r2, #29999	; 0x752f
 801354e:	4293      	cmp	r3, r2
 8013550:	d9f2      	bls.n	8013538 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8013552:	4b12      	ldr	r3, [pc, #72]	; (801359c <SD_write+0xa8>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d102      	bne.n	8013560 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801355a:	2301      	movs	r3, #1
 801355c:	75fb      	strb	r3, [r7, #23]
 801355e:	e017      	b.n	8013590 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013560:	4b0e      	ldr	r3, [pc, #56]	; (801359c <SD_write+0xa8>)
 8013562:	2200      	movs	r2, #0
 8013564:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013566:	f7f1 f81f 	bl	80045a8 <HAL_GetTick>
 801356a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801356c:	e007      	b.n	801357e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801356e:	f7ff feab 	bl	80132c8 <BSP_SD_GetCardState>
 8013572:	4603      	mov	r3, r0
 8013574:	2b00      	cmp	r3, #0
 8013576:	d102      	bne.n	801357e <SD_write+0x8a>
          {
            res = RES_OK;
 8013578:	2300      	movs	r3, #0
 801357a:	75fb      	strb	r3, [r7, #23]
            break;
 801357c:	e008      	b.n	8013590 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801357e:	f7f1 f813 	bl	80045a8 <HAL_GetTick>
 8013582:	4602      	mov	r2, r0
 8013584:	693b      	ldr	r3, [r7, #16]
 8013586:	1ad3      	subs	r3, r2, r3
 8013588:	f247 522f 	movw	r2, #29999	; 0x752f
 801358c:	4293      	cmp	r3, r2
 801358e:	d9ee      	bls.n	801356e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013590:	7dfb      	ldrb	r3, [r7, #23]
}
 8013592:	4618      	mov	r0, r3
 8013594:	3718      	adds	r7, #24
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
 801359a:	bf00      	nop
 801359c:	24000b50 	.word	0x24000b50

080135a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b08c      	sub	sp, #48	; 0x30
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	4603      	mov	r3, r0
 80135a8:	603a      	str	r2, [r7, #0]
 80135aa:	71fb      	strb	r3, [r7, #7]
 80135ac:	460b      	mov	r3, r1
 80135ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80135b0:	2301      	movs	r3, #1
 80135b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80135b6:	4b25      	ldr	r3, [pc, #148]	; (801364c <SD_ioctl+0xac>)
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	b2db      	uxtb	r3, r3
 80135bc:	f003 0301 	and.w	r3, r3, #1
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d001      	beq.n	80135c8 <SD_ioctl+0x28>
 80135c4:	2303      	movs	r3, #3
 80135c6:	e03c      	b.n	8013642 <SD_ioctl+0xa2>

  switch (cmd)
 80135c8:	79bb      	ldrb	r3, [r7, #6]
 80135ca:	2b03      	cmp	r3, #3
 80135cc:	d834      	bhi.n	8013638 <SD_ioctl+0x98>
 80135ce:	a201      	add	r2, pc, #4	; (adr r2, 80135d4 <SD_ioctl+0x34>)
 80135d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135d4:	080135e5 	.word	0x080135e5
 80135d8:	080135ed 	.word	0x080135ed
 80135dc:	08013605 	.word	0x08013605
 80135e0:	0801361f 	.word	0x0801361f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80135e4:	2300      	movs	r3, #0
 80135e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80135ea:	e028      	b.n	801363e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80135ec:	f107 0308 	add.w	r3, r7, #8
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7ff fe79 	bl	80132e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80135f6:	6a3a      	ldr	r2, [r7, #32]
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80135fc:	2300      	movs	r3, #0
 80135fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013602:	e01c      	b.n	801363e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013604:	f107 0308 	add.w	r3, r7, #8
 8013608:	4618      	mov	r0, r3
 801360a:	f7ff fe6d 	bl	80132e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013610:	b29a      	uxth	r2, r3
 8013612:	683b      	ldr	r3, [r7, #0]
 8013614:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013616:	2300      	movs	r3, #0
 8013618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801361c:	e00f      	b.n	801363e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801361e:	f107 0308 	add.w	r3, r7, #8
 8013622:	4618      	mov	r0, r3
 8013624:	f7ff fe60 	bl	80132e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801362a:	0a5a      	lsrs	r2, r3, #9
 801362c:	683b      	ldr	r3, [r7, #0]
 801362e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013630:	2300      	movs	r3, #0
 8013632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013636:	e002      	b.n	801363e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013638:	2304      	movs	r3, #4
 801363a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801363e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013642:	4618      	mov	r0, r3
 8013644:	3730      	adds	r7, #48	; 0x30
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}
 801364a:	bf00      	nop
 801364c:	2400001d 	.word	0x2400001d

08013650 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013650:	b480      	push	{r7}
 8013652:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8013654:	4b03      	ldr	r3, [pc, #12]	; (8013664 <BSP_SD_WriteCpltCallback+0x14>)
 8013656:	2201      	movs	r2, #1
 8013658:	601a      	str	r2, [r3, #0]
}
 801365a:	bf00      	nop
 801365c:	46bd      	mov	sp, r7
 801365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013662:	4770      	bx	lr
 8013664:	24000b50 	.word	0x24000b50

08013668 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013668:	b480      	push	{r7}
 801366a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801366c:	4b03      	ldr	r3, [pc, #12]	; (801367c <BSP_SD_ReadCpltCallback+0x14>)
 801366e:	2201      	movs	r2, #1
 8013670:	601a      	str	r2, [r3, #0]
}
 8013672:	bf00      	nop
 8013674:	46bd      	mov	sp, r7
 8013676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367a:	4770      	bx	lr
 801367c:	24000b54 	.word	0x24000b54

08013680 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b084      	sub	sp, #16
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
 8013688:	460b      	mov	r3, r1
 801368a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801368c:	f248 0074 	movw	r0, #32884	; 0x8074
 8013690:	f005 fed0 	bl	8019434 <malloc>
 8013694:	4603      	mov	r3, r0
 8013696:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d105      	bne.n	80136aa <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	2200      	movs	r2, #0
 80136a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80136a6:	2302      	movs	r3, #2
 80136a8:	e034      	b.n	8013714 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	68fa      	ldr	r2, [r7, #12]
 80136ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	7c1b      	ldrb	r3, [r3, #16]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d115      	bne.n	80136e6 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80136ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80136be:	2202      	movs	r2, #2
 80136c0:	2101      	movs	r1, #1
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f005 fd1d 	bl	8019102 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2201      	movs	r2, #1
 80136cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80136d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80136d4:	2202      	movs	r2, #2
 80136d6:	2181      	movs	r1, #129	; 0x81
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f005 fd12 	bl	8019102 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	2201      	movs	r2, #1
 80136e2:	871a      	strh	r2, [r3, #56]	; 0x38
 80136e4:	e012      	b.n	801370c <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80136e6:	2340      	movs	r3, #64	; 0x40
 80136e8:	2202      	movs	r2, #2
 80136ea:	2101      	movs	r1, #1
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f005 fd08 	bl	8019102 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	2201      	movs	r2, #1
 80136f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80136fa:	2340      	movs	r3, #64	; 0x40
 80136fc:	2202      	movs	r2, #2
 80136fe:	2181      	movs	r1, #129	; 0x81
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f005 fcfe 	bl	8019102 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2201      	movs	r2, #1
 801370a:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801370c:	6878      	ldr	r0, [r7, #4]
 801370e:	f000 f98e 	bl	8013a2e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8013712:	2300      	movs	r3, #0
}
 8013714:	4618      	mov	r0, r3
 8013716:	3710      	adds	r7, #16
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}

0801371c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	460b      	mov	r3, r1
 8013726:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8013728:	2101      	movs	r1, #1
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f005 fd0f 	bl	801914e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2200      	movs	r2, #0
 8013734:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8013738:	2181      	movs	r1, #129	; 0x81
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f005 fd07 	bl	801914e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2200      	movs	r2, #0
 8013744:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f000 f9cf 	bl	8013aea <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013752:	2b00      	cmp	r3, #0
 8013754:	d009      	beq.n	801376a <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801375c:	4618      	mov	r0, r3
 801375e:	f005 fe71 	bl	8019444 <free>
    pdev->pClassData = NULL;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	2200      	movs	r2, #0
 8013766:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801376a:	2300      	movs	r3, #0
}
 801376c:	4618      	mov	r0, r3
 801376e:	3708      	adds	r7, #8
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}

08013774 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b086      	sub	sp, #24
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
 801377c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013784:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8013786:	2300      	movs	r3, #0
 8013788:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801378a:	2300      	movs	r3, #0
 801378c:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013796:	2b00      	cmp	r3, #0
 8013798:	d04d      	beq.n	8013836 <USBD_MSC_Setup+0xc2>
 801379a:	2b20      	cmp	r3, #32
 801379c:	f040 80c6 	bne.w	801392c <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	785b      	ldrb	r3, [r3, #1]
 80137a4:	2bfe      	cmp	r3, #254	; 0xfe
 80137a6:	d002      	beq.n	80137ae <USBD_MSC_Setup+0x3a>
 80137a8:	2bff      	cmp	r3, #255	; 0xff
 80137aa:	d024      	beq.n	80137f6 <USBD_MSC_Setup+0x82>
 80137ac:	e03b      	b.n	8013826 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	885b      	ldrh	r3, [r3, #2]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d118      	bne.n	80137e8 <USBD_MSC_Setup+0x74>
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	88db      	ldrh	r3, [r3, #6]
 80137ba:	2b01      	cmp	r3, #1
 80137bc:	d114      	bne.n	80137e8 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	781b      	ldrb	r3, [r3, #0]
 80137c2:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	da0f      	bge.n	80137e8 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80137ce:	699b      	ldr	r3, [r3, #24]
 80137d0:	4798      	blx	r3
 80137d2:	4603      	mov	r3, r0
 80137d4:	461a      	mov	r2, r3
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	2201      	movs	r2, #1
 80137de:	4619      	mov	r1, r3
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f002 fdaa 	bl	801633a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80137e6:	e025      	b.n	8013834 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80137e8:	6839      	ldr	r1, [r7, #0]
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f002 fd34 	bl	8016258 <USBD_CtlError>
        ret = USBD_FAIL;
 80137f0:	2303      	movs	r3, #3
 80137f2:	75fb      	strb	r3, [r7, #23]
      break;
 80137f4:	e01e      	b.n	8013834 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80137f6:	683b      	ldr	r3, [r7, #0]
 80137f8:	885b      	ldrh	r3, [r3, #2]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d10c      	bne.n	8013818 <USBD_MSC_Setup+0xa4>
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	88db      	ldrh	r3, [r3, #6]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d108      	bne.n	8013818 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	781b      	ldrb	r3, [r3, #0]
 801380a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801380c:	2b00      	cmp	r3, #0
 801380e:	db03      	blt.n	8013818 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f000 f947 	bl	8013aa4 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013816:	e00d      	b.n	8013834 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8013818:	6839      	ldr	r1, [r7, #0]
 801381a:	6878      	ldr	r0, [r7, #4]
 801381c:	f002 fd1c 	bl	8016258 <USBD_CtlError>
        ret = USBD_FAIL;
 8013820:	2303      	movs	r3, #3
 8013822:	75fb      	strb	r3, [r7, #23]
      break;
 8013824:	e006      	b.n	8013834 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8013826:	6839      	ldr	r1, [r7, #0]
 8013828:	6878      	ldr	r0, [r7, #4]
 801382a:	f002 fd15 	bl	8016258 <USBD_CtlError>
      ret = USBD_FAIL;
 801382e:	2303      	movs	r3, #3
 8013830:	75fb      	strb	r3, [r7, #23]
      break;
 8013832:	bf00      	nop
    }
    break;
 8013834:	e081      	b.n	801393a <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	785b      	ldrb	r3, [r3, #1]
 801383a:	2b0b      	cmp	r3, #11
 801383c:	d86d      	bhi.n	801391a <USBD_MSC_Setup+0x1a6>
 801383e:	a201      	add	r2, pc, #4	; (adr r2, 8013844 <USBD_MSC_Setup+0xd0>)
 8013840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013844:	08013875 	.word	0x08013875
 8013848:	080138eb 	.word	0x080138eb
 801384c:	0801391b 	.word	0x0801391b
 8013850:	0801391b 	.word	0x0801391b
 8013854:	0801391b 	.word	0x0801391b
 8013858:	0801391b 	.word	0x0801391b
 801385c:	0801391b 	.word	0x0801391b
 8013860:	0801391b 	.word	0x0801391b
 8013864:	0801391b 	.word	0x0801391b
 8013868:	0801391b 	.word	0x0801391b
 801386c:	0801389d 	.word	0x0801389d
 8013870:	080138c5 	.word	0x080138c5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801387a:	2b03      	cmp	r3, #3
 801387c:	d107      	bne.n	801388e <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801387e:	f107 030e 	add.w	r3, r7, #14
 8013882:	2202      	movs	r2, #2
 8013884:	4619      	mov	r1, r3
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f002 fd57 	bl	801633a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801388c:	e04d      	b.n	801392a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 801388e:	6839      	ldr	r1, [r7, #0]
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f002 fce1 	bl	8016258 <USBD_CtlError>
        ret = USBD_FAIL;
 8013896:	2303      	movs	r3, #3
 8013898:	75fb      	strb	r3, [r7, #23]
      break;
 801389a:	e046      	b.n	801392a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138a2:	2b03      	cmp	r3, #3
 80138a4:	d107      	bne.n	80138b6 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	3304      	adds	r3, #4
 80138aa:	2201      	movs	r2, #1
 80138ac:	4619      	mov	r1, r3
 80138ae:	6878      	ldr	r0, [r7, #4]
 80138b0:	f002 fd43 	bl	801633a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80138b4:	e039      	b.n	801392a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80138b6:	6839      	ldr	r1, [r7, #0]
 80138b8:	6878      	ldr	r0, [r7, #4]
 80138ba:	f002 fccd 	bl	8016258 <USBD_CtlError>
        ret = USBD_FAIL;
 80138be:	2303      	movs	r3, #3
 80138c0:	75fb      	strb	r3, [r7, #23]
      break;
 80138c2:	e032      	b.n	801392a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138ca:	2b03      	cmp	r3, #3
 80138cc:	d106      	bne.n	80138dc <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	885b      	ldrh	r3, [r3, #2]
 80138d2:	b2db      	uxtb	r3, r3
 80138d4:	461a      	mov	r2, r3
 80138d6:	693b      	ldr	r3, [r7, #16]
 80138d8:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80138da:	e026      	b.n	801392a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80138dc:	6839      	ldr	r1, [r7, #0]
 80138de:	6878      	ldr	r0, [r7, #4]
 80138e0:	f002 fcba 	bl	8016258 <USBD_CtlError>
        ret = USBD_FAIL;
 80138e4:	2303      	movs	r3, #3
 80138e6:	75fb      	strb	r3, [r7, #23]
      break;
 80138e8:	e01f      	b.n	801392a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138f0:	2b03      	cmp	r3, #3
 80138f2:	d119      	bne.n	8013928 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	885b      	ldrh	r3, [r3, #2]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d115      	bne.n	8013928 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	889b      	ldrh	r3, [r3, #4]
 8013900:	b2db      	uxtb	r3, r3
 8013902:	4619      	mov	r1, r3
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f005 fc41 	bl	801918c <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	889b      	ldrh	r3, [r3, #4]
 801390e:	b2db      	uxtb	r3, r3
 8013910:	4619      	mov	r1, r3
 8013912:	6878      	ldr	r0, [r7, #4]
 8013914:	f000 fa90 	bl	8013e38 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8013918:	e006      	b.n	8013928 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 801391a:	6839      	ldr	r1, [r7, #0]
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f002 fc9b 	bl	8016258 <USBD_CtlError>
      ret = USBD_FAIL;
 8013922:	2303      	movs	r3, #3
 8013924:	75fb      	strb	r3, [r7, #23]
      break;
 8013926:	e000      	b.n	801392a <USBD_MSC_Setup+0x1b6>
      break;
 8013928:	bf00      	nop
    }
    break;
 801392a:	e006      	b.n	801393a <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 801392c:	6839      	ldr	r1, [r7, #0]
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f002 fc92 	bl	8016258 <USBD_CtlError>
    ret = USBD_FAIL;
 8013934:	2303      	movs	r3, #3
 8013936:	75fb      	strb	r3, [r7, #23]
    break;
 8013938:	bf00      	nop
  }

  return (uint8_t)ret;
 801393a:	7dfb      	ldrb	r3, [r7, #23]
}
 801393c:	4618      	mov	r0, r3
 801393e:	3718      	adds	r7, #24
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}

08013944 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b082      	sub	sp, #8
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	460b      	mov	r3, r1
 801394e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8013950:	78fb      	ldrb	r3, [r7, #3]
 8013952:	4619      	mov	r1, r3
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f000 f8d9 	bl	8013b0c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801395a:	2300      	movs	r3, #0
}
 801395c:	4618      	mov	r0, r3
 801395e:	3708      	adds	r7, #8
 8013960:	46bd      	mov	sp, r7
 8013962:	bd80      	pop	{r7, pc}

08013964 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b082      	sub	sp, #8
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
 801396c:	460b      	mov	r3, r1
 801396e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8013970:	78fb      	ldrb	r3, [r7, #3]
 8013972:	4619      	mov	r1, r3
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f000 f8fd 	bl	8013b74 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801397a:	2300      	movs	r3, #0
}
 801397c:	4618      	mov	r0, r3
 801397e:	3708      	adds	r7, #8
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8013984:	b480      	push	{r7}
 8013986:	b083      	sub	sp, #12
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2220      	movs	r2, #32
 8013990:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8013992:	4b03      	ldr	r3, [pc, #12]	; (80139a0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8013994:	4618      	mov	r0, r3
 8013996:	370c      	adds	r7, #12
 8013998:	46bd      	mov	sp, r7
 801399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399e:	4770      	bx	lr
 80139a0:	24000058 	.word	0x24000058

080139a4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80139a4:	b480      	push	{r7}
 80139a6:	b083      	sub	sp, #12
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2220      	movs	r2, #32
 80139b0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80139b2:	4b03      	ldr	r3, [pc, #12]	; (80139c0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	370c      	adds	r7, #12
 80139b8:	46bd      	mov	sp, r7
 80139ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139be:	4770      	bx	lr
 80139c0:	24000078 	.word	0x24000078

080139c4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80139c4:	b480      	push	{r7}
 80139c6:	b083      	sub	sp, #12
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2220      	movs	r2, #32
 80139d0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80139d2:	4b03      	ldr	r3, [pc, #12]	; (80139e0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	370c      	adds	r7, #12
 80139d8:	46bd      	mov	sp, r7
 80139da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139de:	4770      	bx	lr
 80139e0:	24000098 	.word	0x24000098

080139e4 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80139e4:	b480      	push	{r7}
 80139e6:	b083      	sub	sp, #12
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	220a      	movs	r2, #10
 80139f0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80139f2:	4b03      	ldr	r3, [pc, #12]	; (8013a00 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80139f4:	4618      	mov	r0, r3
 80139f6:	370c      	adds	r7, #12
 80139f8:	46bd      	mov	sp, r7
 80139fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fe:	4770      	bx	lr
 8013a00:	240000b8 	.word	0x240000b8

08013a04 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8013a04:	b480      	push	{r7}
 8013a06:	b083      	sub	sp, #12
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
 8013a0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d101      	bne.n	8013a18 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013a14:	2303      	movs	r3, #3
 8013a16:	e004      	b.n	8013a22 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	683a      	ldr	r2, [r7, #0]
 8013a1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8013a20:	2300      	movs	r3, #0
}
 8013a22:	4618      	mov	r0, r3
 8013a24:	370c      	adds	r7, #12
 8013a26:	46bd      	mov	sp, r7
 8013a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2c:	4770      	bx	lr

08013a2e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8013a2e:	b580      	push	{r7, lr}
 8013a30:	b084      	sub	sp, #16
 8013a32:	af00      	add	r7, sp, #0
 8013a34:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a3c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	2200      	movs	r2, #0
 8013a42:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	2200      	movs	r2, #0
 8013a48:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013a4a:	68fa      	ldr	r2, [r7, #12]
 8013a4c:	f248 0361 	movw	r3, #32865	; 0x8061
 8013a50:	4413      	add	r3, r2
 8013a52:	2200      	movs	r2, #0
 8013a54:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8013a56:	68fa      	ldr	r2, [r7, #12]
 8013a58:	f248 0360 	movw	r3, #32864	; 0x8060
 8013a5c:	4413      	add	r3, r2
 8013a5e:	2200      	movs	r2, #0
 8013a60:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013a62:	68fa      	ldr	r2, [r7, #12]
 8013a64:	f248 0362 	movw	r3, #32866	; 0x8062
 8013a68:	4413      	add	r3, r2
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	2000      	movs	r0, #0
 8013a78:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8013a7a:	2101      	movs	r1, #1
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f005 fb85 	bl	801918c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8013a82:	2181      	movs	r1, #129	; 0x81
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	f005 fb81 	bl	801918c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	f248 0210 	movw	r2, #32784	; 0x8010
 8013a90:	441a      	add	r2, r3
 8013a92:	231f      	movs	r3, #31
 8013a94:	2101      	movs	r1, #1
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	f005 fc41 	bl	801931e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013a9c:	bf00      	nop
 8013a9e:	3710      	adds	r7, #16
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}

08013aa4 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ab2:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	2201      	movs	r2, #1
 8013abe:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8013ac0:	2181      	movs	r1, #129	; 0x81
 8013ac2:	6878      	ldr	r0, [r7, #4]
 8013ac4:	f005 fba0 	bl	8019208 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8013ac8:	2101      	movs	r1, #1
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f005 fb9c 	bl	8019208 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	f248 0210 	movw	r2, #32784	; 0x8010
 8013ad6:	441a      	add	r2, r3
 8013ad8:	231f      	movs	r3, #31
 8013ada:	2101      	movs	r1, #1
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f005 fc1e 	bl	801931e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013ae2:	bf00      	nop
 8013ae4:	3710      	adds	r7, #16
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}

08013aea <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8013aea:	b480      	push	{r7}
 8013aec:	b085      	sub	sp, #20
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013af8:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	2200      	movs	r2, #0
 8013afe:	721a      	strb	r2, [r3, #8]
}
 8013b00:	bf00      	nop
 8013b02:	3714      	adds	r7, #20
 8013b04:	46bd      	mov	sp, r7
 8013b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0a:	4770      	bx	lr

08013b0c <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b084      	sub	sp, #16
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
 8013b14:	460b      	mov	r3, r1
 8013b16:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b1e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	7a1b      	ldrb	r3, [r3, #8]
 8013b24:	2b02      	cmp	r3, #2
 8013b26:	d004      	beq.n	8013b32 <MSC_BOT_DataIn+0x26>
 8013b28:	2b02      	cmp	r3, #2
 8013b2a:	db1c      	blt.n	8013b66 <MSC_BOT_DataIn+0x5a>
 8013b2c:	2b04      	cmp	r3, #4
 8013b2e:	dc1a      	bgt.n	8013b66 <MSC_BOT_DataIn+0x5a>
 8013b30:	e014      	b.n	8013b5c <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013b32:	68fa      	ldr	r2, [r7, #12]
 8013b34:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b38:	4413      	add	r3, r2
 8013b3a:	7819      	ldrb	r1, [r3, #0]
 8013b3c:	68fa      	ldr	r2, [r7, #12]
 8013b3e:	f248 031f 	movw	r3, #32799	; 0x801f
 8013b42:	4413      	add	r3, r2
 8013b44:	461a      	mov	r2, r3
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f000 f99e 	bl	8013e88 <SCSI_ProcessCmd>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	da0b      	bge.n	8013b6a <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013b52:	2101      	movs	r1, #1
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f000 f90b 	bl	8013d70 <MSC_BOT_SendCSW>
    }
    break;
 8013b5a:	e006      	b.n	8013b6a <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013b5c:	2100      	movs	r1, #0
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f000 f906 	bl	8013d70 <MSC_BOT_SendCSW>
    break;
 8013b64:	e002      	b.n	8013b6c <MSC_BOT_DataIn+0x60>

  default:
    break;
 8013b66:	bf00      	nop
 8013b68:	e000      	b.n	8013b6c <MSC_BOT_DataIn+0x60>
    break;
 8013b6a:	bf00      	nop
  }
}
 8013b6c:	bf00      	nop
 8013b6e:	3710      	adds	r7, #16
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}

08013b74 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b084      	sub	sp, #16
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
 8013b7c:	460b      	mov	r3, r1
 8013b7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b86:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	7a1b      	ldrb	r3, [r3, #8]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d002      	beq.n	8013b96 <MSC_BOT_DataOut+0x22>
 8013b90:	2b01      	cmp	r3, #1
 8013b92:	d004      	beq.n	8013b9e <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8013b94:	e018      	b.n	8013bc8 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8013b96:	6878      	ldr	r0, [r7, #4]
 8013b98:	f000 f81a 	bl	8013bd0 <MSC_BOT_CBW_Decode>
      break;
 8013b9c:	e014      	b.n	8013bc8 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013b9e:	68fa      	ldr	r2, [r7, #12]
 8013ba0:	f248 031d 	movw	r3, #32797	; 0x801d
 8013ba4:	4413      	add	r3, r2
 8013ba6:	7819      	ldrb	r1, [r3, #0]
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	f248 031f 	movw	r3, #32799	; 0x801f
 8013bae:	4413      	add	r3, r2
 8013bb0:	461a      	mov	r2, r3
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	f000 f968 	bl	8013e88 <SCSI_ProcessCmd>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	da03      	bge.n	8013bc6 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013bbe:	2101      	movs	r1, #1
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f000 f8d5 	bl	8013d70 <MSC_BOT_SendCSW>
      break;
 8013bc6:	bf00      	nop
  }
}
 8013bc8:	bf00      	nop
 8013bca:	3710      	adds	r7, #16
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b084      	sub	sp, #16
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013bde:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8013be0:	68fa      	ldr	r2, [r7, #12]
 8013be2:	f248 0314 	movw	r3, #32788	; 0x8014
 8013be6:	4413      	add	r3, r2
 8013be8:	681a      	ldr	r2, [r3, #0]
 8013bea:	68f9      	ldr	r1, [r7, #12]
 8013bec:	f248 0334 	movw	r3, #32820	; 0x8034
 8013bf0:	440b      	add	r3, r1
 8013bf2:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8013bf4:	68fa      	ldr	r2, [r7, #12]
 8013bf6:	f248 0318 	movw	r3, #32792	; 0x8018
 8013bfa:	4413      	add	r3, r2
 8013bfc:	681a      	ldr	r2, [r3, #0]
 8013bfe:	68f9      	ldr	r1, [r7, #12]
 8013c00:	f248 0338 	movw	r3, #32824	; 0x8038
 8013c04:	440b      	add	r3, r1
 8013c06:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013c08:	2101      	movs	r1, #1
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f005 fba8 	bl	8019360 <USBD_LL_GetRxDataSize>
 8013c10:	4603      	mov	r3, r0
 8013c12:	2b1f      	cmp	r3, #31
 8013c14:	d11c      	bne.n	8013c50 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013c16:	68fa      	ldr	r2, [r7, #12]
 8013c18:	f248 0310 	movw	r3, #32784	; 0x8010
 8013c1c:	4413      	add	r3, r2
 8013c1e:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013c20:	4a38      	ldr	r2, [pc, #224]	; (8013d04 <MSC_BOT_CBW_Decode+0x134>)
 8013c22:	4293      	cmp	r3, r2
 8013c24:	d114      	bne.n	8013c50 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c26:	68fa      	ldr	r2, [r7, #12]
 8013c28:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c2c:	4413      	add	r3, r2
 8013c2e:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	d80d      	bhi.n	8013c50 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c34:	68fa      	ldr	r2, [r7, #12]
 8013c36:	f248 031e 	movw	r3, #32798	; 0x801e
 8013c3a:	4413      	add	r3, r2
 8013c3c:	781b      	ldrb	r3, [r3, #0]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d006      	beq.n	8013c50 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8013c42:	68fa      	ldr	r2, [r7, #12]
 8013c44:	f248 031e 	movw	r3, #32798	; 0x801e
 8013c48:	4413      	add	r3, r2
 8013c4a:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c4c:	2b10      	cmp	r3, #16
 8013c4e:	d910      	bls.n	8013c72 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013c50:	68fa      	ldr	r2, [r7, #12]
 8013c52:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c56:	4413      	add	r3, r2
 8013c58:	7819      	ldrb	r1, [r3, #0]
 8013c5a:	2320      	movs	r3, #32
 8013c5c:	2205      	movs	r2, #5
 8013c5e:	6878      	ldr	r0, [r7, #4]
 8013c60:	f000 fd36 	bl	80146d0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	2202      	movs	r2, #2
 8013c68:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f000 f8b2 	bl	8013dd4 <MSC_BOT_Abort>
 8013c70:	e044      	b.n	8013cfc <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013c72:	68fa      	ldr	r2, [r7, #12]
 8013c74:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c78:	4413      	add	r3, r2
 8013c7a:	7819      	ldrb	r1, [r3, #0]
 8013c7c:	68fa      	ldr	r2, [r7, #12]
 8013c7e:	f248 031f 	movw	r3, #32799	; 0x801f
 8013c82:	4413      	add	r3, r2
 8013c84:	461a      	mov	r2, r3
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f000 f8fe 	bl	8013e88 <SCSI_ProcessCmd>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	da0c      	bge.n	8013cac <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	7a1b      	ldrb	r3, [r3, #8]
 8013c96:	2b05      	cmp	r3, #5
 8013c98:	d104      	bne.n	8013ca4 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013c9a:	2101      	movs	r1, #1
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f000 f867 	bl	8013d70 <MSC_BOT_SendCSW>
 8013ca2:	e02b      	b.n	8013cfc <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013ca4:	6878      	ldr	r0, [r7, #4]
 8013ca6:	f000 f895 	bl	8013dd4 <MSC_BOT_Abort>
 8013caa:	e027      	b.n	8013cfc <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	7a1b      	ldrb	r3, [r3, #8]
 8013cb0:	2b02      	cmp	r3, #2
 8013cb2:	d022      	beq.n	8013cfa <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013cb8:	2b01      	cmp	r3, #1
 8013cba:	d01e      	beq.n	8013cfa <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013cc0:	2b03      	cmp	r3, #3
 8013cc2:	d01a      	beq.n	8013cfa <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	68db      	ldr	r3, [r3, #12]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d009      	beq.n	8013ce0 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	f103 0110 	add.w	r1, r3, #16
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	68db      	ldr	r3, [r3, #12]
 8013cd6:	461a      	mov	r2, r3
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f000 f815 	bl	8013d08 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8013cde:	e00d      	b.n	8013cfc <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	68db      	ldr	r3, [r3, #12]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d104      	bne.n	8013cf2 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013ce8:	2100      	movs	r1, #0
 8013cea:	6878      	ldr	r0, [r7, #4]
 8013cec:	f000 f840 	bl	8013d70 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8013cf0:	e004      	b.n	8013cfc <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f000 f86e 	bl	8013dd4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8013cf8:	e000      	b.n	8013cfc <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8013cfa:	bf00      	nop
    }
  }
}
 8013cfc:	3710      	adds	r7, #16
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bd80      	pop	{r7, pc}
 8013d02:	bf00      	nop
 8013d04:	43425355 	.word	0x43425355

08013d08 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b086      	sub	sp, #24
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	60f8      	str	r0, [r7, #12]
 8013d10:	60b9      	str	r1, [r7, #8]
 8013d12:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d1a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8013d1c:	697a      	ldr	r2, [r7, #20]
 8013d1e:	f248 0318 	movw	r3, #32792	; 0x8018
 8013d22:	4413      	add	r3, r2
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	687a      	ldr	r2, [r7, #4]
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	bf28      	it	cs
 8013d2c:	4613      	movcs	r3, r2
 8013d2e:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8013d30:	697a      	ldr	r2, [r7, #20]
 8013d32:	f248 0338 	movw	r3, #32824	; 0x8038
 8013d36:	4413      	add	r3, r2
 8013d38:	681a      	ldr	r2, [r3, #0]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	1ad2      	subs	r2, r2, r3
 8013d3e:	6979      	ldr	r1, [r7, #20]
 8013d40:	f248 0338 	movw	r3, #32824	; 0x8038
 8013d44:	440b      	add	r3, r1
 8013d46:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8013d48:	697a      	ldr	r2, [r7, #20]
 8013d4a:	f248 033c 	movw	r3, #32828	; 0x803c
 8013d4e:	4413      	add	r3, r2
 8013d50:	2200      	movs	r2, #0
 8013d52:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8013d54:	697b      	ldr	r3, [r7, #20]
 8013d56:	2204      	movs	r2, #4
 8013d58:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8013d5a:	693b      	ldr	r3, [r7, #16]
 8013d5c:	68ba      	ldr	r2, [r7, #8]
 8013d5e:	2181      	movs	r1, #129	; 0x81
 8013d60:	68f8      	ldr	r0, [r7, #12]
 8013d62:	f005 fabb 	bl	80192dc <USBD_LL_Transmit>
}
 8013d66:	bf00      	nop
 8013d68:	3718      	adds	r7, #24
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	bd80      	pop	{r7, pc}
	...

08013d70 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b084      	sub	sp, #16
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	460b      	mov	r3, r1
 8013d7a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d82:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8013d84:	68fa      	ldr	r2, [r7, #12]
 8013d86:	f248 0330 	movw	r3, #32816	; 0x8030
 8013d8a:	4413      	add	r3, r2
 8013d8c:	4a10      	ldr	r2, [pc, #64]	; (8013dd0 <MSC_BOT_SendCSW+0x60>)
 8013d8e:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8013d90:	68fa      	ldr	r2, [r7, #12]
 8013d92:	f248 033c 	movw	r3, #32828	; 0x803c
 8013d96:	4413      	add	r3, r2
 8013d98:	78fa      	ldrb	r2, [r7, #3]
 8013d9a:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	f248 0230 	movw	r2, #32816	; 0x8030
 8013da8:	441a      	add	r2, r3
 8013daa:	230d      	movs	r3, #13
 8013dac:	2181      	movs	r1, #129	; 0x81
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	f005 fa94 	bl	80192dc <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	f248 0210 	movw	r2, #32784	; 0x8010
 8013dba:	441a      	add	r2, r3
 8013dbc:	231f      	movs	r3, #31
 8013dbe:	2101      	movs	r1, #1
 8013dc0:	6878      	ldr	r0, [r7, #4]
 8013dc2:	f005 faac 	bl	801931e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013dc6:	bf00      	nop
 8013dc8:	3710      	adds	r7, #16
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
 8013dce:	bf00      	nop
 8013dd0:	53425355 	.word	0x53425355

08013dd4 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b084      	sub	sp, #16
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013de2:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8013de4:	68fa      	ldr	r2, [r7, #12]
 8013de6:	f248 031c 	movw	r3, #32796	; 0x801c
 8013dea:	4413      	add	r3, r2
 8013dec:	781b      	ldrb	r3, [r3, #0]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d10e      	bne.n	8013e10 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8013df2:	68fa      	ldr	r2, [r7, #12]
 8013df4:	f248 0318 	movw	r3, #32792	; 0x8018
 8013df8:	4413      	add	r3, r2
 8013dfa:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d007      	beq.n	8013e10 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d103      	bne.n	8013e10 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013e08:	2101      	movs	r1, #1
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f005 f9dd 	bl	80191ca <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013e10:	2181      	movs	r1, #129	; 0x81
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f005 f9d9 	bl	80191ca <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	7a5b      	ldrb	r3, [r3, #9]
 8013e1c:	2b02      	cmp	r3, #2
 8013e1e:	d107      	bne.n	8013e30 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013e20:	2181      	movs	r1, #129	; 0x81
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f005 f9d1 	bl	80191ca <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013e28:	2101      	movs	r1, #1
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f005 f9cd 	bl	80191ca <USBD_LL_StallEP>
  }
}
 8013e30:	bf00      	nop
 8013e32:	3710      	adds	r7, #16
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}

08013e38 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b084      	sub	sp, #16
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	460b      	mov	r3, r1
 8013e42:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e4a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	7a5b      	ldrb	r3, [r3, #9]
 8013e50:	2b02      	cmp	r3, #2
 8013e52:	d108      	bne.n	8013e66 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013e54:	2181      	movs	r1, #129	; 0x81
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f005 f9b7 	bl	80191ca <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013e5c:	2101      	movs	r1, #1
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f005 f9b3 	bl	80191ca <USBD_LL_StallEP>
 8013e64:	e00d      	b.n	8013e82 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8013e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	da08      	bge.n	8013e80 <MSC_BOT_CplClrFeature+0x48>
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	7a5b      	ldrb	r3, [r3, #9]
 8013e72:	2b01      	cmp	r3, #1
 8013e74:	d004      	beq.n	8013e80 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013e76:	2101      	movs	r1, #1
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f7ff ff79 	bl	8013d70 <MSC_BOT_SendCSW>
 8013e7e:	e000      	b.n	8013e82 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8013e80:	bf00      	nop
  }
}
 8013e82:	3710      	adds	r7, #16
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}

08013e88 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b086      	sub	sp, #24
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	60f8      	str	r0, [r7, #12]
 8013e90:	460b      	mov	r3, r1
 8013e92:	607a      	str	r2, [r7, #4]
 8013e94:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e9c:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	2b25      	cmp	r3, #37	; 0x25
 8013ea4:	d06e      	beq.n	8013f84 <SCSI_ProcessCmd+0xfc>
 8013ea6:	2b25      	cmp	r3, #37	; 0x25
 8013ea8:	dc11      	bgt.n	8013ece <SCSI_ProcessCmd+0x46>
 8013eaa:	2b1a      	cmp	r3, #26
 8013eac:	d04f      	beq.n	8013f4e <SCSI_ProcessCmd+0xc6>
 8013eae:	2b1a      	cmp	r3, #26
 8013eb0:	dc06      	bgt.n	8013ec0 <SCSI_ProcessCmd+0x38>
 8013eb2:	2b03      	cmp	r3, #3
 8013eb4:	d027      	beq.n	8013f06 <SCSI_ProcessCmd+0x7e>
 8013eb6:	2b12      	cmp	r3, #18
 8013eb8:	d02e      	beq.n	8013f18 <SCSI_ProcessCmd+0x90>
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d01a      	beq.n	8013ef4 <SCSI_ProcessCmd+0x6c>
 8013ebe:	e0a0      	b.n	8014002 <SCSI_ProcessCmd+0x17a>
 8013ec0:	2b1e      	cmp	r3, #30
 8013ec2:	d03b      	beq.n	8013f3c <SCSI_ProcessCmd+0xb4>
 8013ec4:	2b23      	cmp	r3, #35	; 0x23
 8013ec6:	d054      	beq.n	8013f72 <SCSI_ProcessCmd+0xea>
 8013ec8:	2b1b      	cmp	r3, #27
 8013eca:	d02e      	beq.n	8013f2a <SCSI_ProcessCmd+0xa2>
 8013ecc:	e099      	b.n	8014002 <SCSI_ProcessCmd+0x17a>
 8013ece:	2b5a      	cmp	r3, #90	; 0x5a
 8013ed0:	d046      	beq.n	8013f60 <SCSI_ProcessCmd+0xd8>
 8013ed2:	2b5a      	cmp	r3, #90	; 0x5a
 8013ed4:	dc07      	bgt.n	8013ee6 <SCSI_ProcessCmd+0x5e>
 8013ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8013ed8:	d078      	beq.n	8013fcc <SCSI_ProcessCmd+0x144>
 8013eda:	2b2f      	cmp	r3, #47	; 0x2f
 8013edc:	f000 8088 	beq.w	8013ff0 <SCSI_ProcessCmd+0x168>
 8013ee0:	2b28      	cmp	r3, #40	; 0x28
 8013ee2:	d061      	beq.n	8013fa8 <SCSI_ProcessCmd+0x120>
 8013ee4:	e08d      	b.n	8014002 <SCSI_ProcessCmd+0x17a>
 8013ee6:	2ba8      	cmp	r3, #168	; 0xa8
 8013ee8:	d067      	beq.n	8013fba <SCSI_ProcessCmd+0x132>
 8013eea:	2baa      	cmp	r3, #170	; 0xaa
 8013eec:	d077      	beq.n	8013fde <SCSI_ProcessCmd+0x156>
 8013eee:	2b9e      	cmp	r3, #158	; 0x9e
 8013ef0:	d051      	beq.n	8013f96 <SCSI_ProcessCmd+0x10e>
 8013ef2:	e086      	b.n	8014002 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8013ef4:	7afb      	ldrb	r3, [r7, #11]
 8013ef6:	687a      	ldr	r2, [r7, #4]
 8013ef8:	4619      	mov	r1, r3
 8013efa:	68f8      	ldr	r0, [r7, #12]
 8013efc:	f000 f893 	bl	8014026 <SCSI_TestUnitReady>
 8013f00:	4603      	mov	r3, r0
 8013f02:	75fb      	strb	r3, [r7, #23]
    break;
 8013f04:	e089      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8013f06:	7afb      	ldrb	r3, [r7, #11]
 8013f08:	687a      	ldr	r2, [r7, #4]
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	68f8      	ldr	r0, [r7, #12]
 8013f0e:	f000 fb47 	bl	80145a0 <SCSI_RequestSense>
 8013f12:	4603      	mov	r3, r0
 8013f14:	75fb      	strb	r3, [r7, #23]
    break;
 8013f16:	e080      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8013f18:	7afb      	ldrb	r3, [r7, #11]
 8013f1a:	687a      	ldr	r2, [r7, #4]
 8013f1c:	4619      	mov	r1, r3
 8013f1e:	68f8      	ldr	r0, [r7, #12]
 8013f20:	f000 f8d2 	bl	80140c8 <SCSI_Inquiry>
 8013f24:	4603      	mov	r3, r0
 8013f26:	75fb      	strb	r3, [r7, #23]
    break;
 8013f28:	e077      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8013f2a:	7afb      	ldrb	r3, [r7, #11]
 8013f2c:	687a      	ldr	r2, [r7, #4]
 8013f2e:	4619      	mov	r1, r3
 8013f30:	68f8      	ldr	r0, [r7, #12]
 8013f32:	f000 fc27 	bl	8014784 <SCSI_StartStopUnit>
 8013f36:	4603      	mov	r3, r0
 8013f38:	75fb      	strb	r3, [r7, #23]
    break;
 8013f3a:	e06e      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8013f3c:	7afb      	ldrb	r3, [r7, #11]
 8013f3e:	687a      	ldr	r2, [r7, #4]
 8013f40:	4619      	mov	r1, r3
 8013f42:	68f8      	ldr	r0, [r7, #12]
 8013f44:	f000 fc71 	bl	801482a <SCSI_AllowPreventRemovable>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	75fb      	strb	r3, [r7, #23]
    break;
 8013f4c:	e065      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8013f4e:	7afb      	ldrb	r3, [r7, #11]
 8013f50:	687a      	ldr	r2, [r7, #4]
 8013f52:	4619      	mov	r1, r3
 8013f54:	68f8      	ldr	r0, [r7, #12]
 8013f56:	f000 fad7 	bl	8014508 <SCSI_ModeSense6>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	75fb      	strb	r3, [r7, #23]
    break;
 8013f5e:	e05c      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8013f60:	7afb      	ldrb	r3, [r7, #11]
 8013f62:	687a      	ldr	r2, [r7, #4]
 8013f64:	4619      	mov	r1, r3
 8013f66:	68f8      	ldr	r0, [r7, #12]
 8013f68:	f000 faf4 	bl	8014554 <SCSI_ModeSense10>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	75fb      	strb	r3, [r7, #23]
    break;
 8013f70:	e053      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8013f72:	7afb      	ldrb	r3, [r7, #11]
 8013f74:	687a      	ldr	r2, [r7, #4]
 8013f76:	4619      	mov	r1, r3
 8013f78:	68f8      	ldr	r0, [r7, #12]
 8013f7a:	f000 fa56 	bl	801442a <SCSI_ReadFormatCapacity>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	75fb      	strb	r3, [r7, #23]
    break;
 8013f82:	e04a      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8013f84:	7afb      	ldrb	r3, [r7, #11]
 8013f86:	687a      	ldr	r2, [r7, #4]
 8013f88:	4619      	mov	r1, r3
 8013f8a:	68f8      	ldr	r0, [r7, #12]
 8013f8c:	f000 f910 	bl	80141b0 <SCSI_ReadCapacity10>
 8013f90:	4603      	mov	r3, r0
 8013f92:	75fb      	strb	r3, [r7, #23]
    break;
 8013f94:	e041      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8013f96:	7afb      	ldrb	r3, [r7, #11]
 8013f98:	687a      	ldr	r2, [r7, #4]
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	68f8      	ldr	r0, [r7, #12]
 8013f9e:	f000 f98b 	bl	80142b8 <SCSI_ReadCapacity16>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	75fb      	strb	r3, [r7, #23]
    break;
 8013fa6:	e038      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8013fa8:	7afb      	ldrb	r3, [r7, #11]
 8013faa:	687a      	ldr	r2, [r7, #4]
 8013fac:	4619      	mov	r1, r3
 8013fae:	68f8      	ldr	r0, [r7, #12]
 8013fb0:	f000 fc62 	bl	8014878 <SCSI_Read10>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	75fb      	strb	r3, [r7, #23]
    break;
 8013fb8:	e02f      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8013fba:	7afb      	ldrb	r3, [r7, #11]
 8013fbc:	687a      	ldr	r2, [r7, #4]
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	68f8      	ldr	r0, [r7, #12]
 8013fc2:	f000 fd0b 	bl	80149dc <SCSI_Read12>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	75fb      	strb	r3, [r7, #23]
    break;
 8013fca:	e026      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8013fcc:	7afb      	ldrb	r3, [r7, #11]
 8013fce:	687a      	ldr	r2, [r7, #4]
 8013fd0:	4619      	mov	r1, r3
 8013fd2:	68f8      	ldr	r0, [r7, #12]
 8013fd4:	f000 fdbe 	bl	8014b54 <SCSI_Write10>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	75fb      	strb	r3, [r7, #23]
    break;
 8013fdc:	e01d      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8013fde:	7afb      	ldrb	r3, [r7, #11]
 8013fe0:	687a      	ldr	r2, [r7, #4]
 8013fe2:	4619      	mov	r1, r3
 8013fe4:	68f8      	ldr	r0, [r7, #12]
 8013fe6:	f000 fe8d 	bl	8014d04 <SCSI_Write12>
 8013fea:	4603      	mov	r3, r0
 8013fec:	75fb      	strb	r3, [r7, #23]
    break;
 8013fee:	e014      	b.n	801401a <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8013ff0:	7afb      	ldrb	r3, [r7, #11]
 8013ff2:	687a      	ldr	r2, [r7, #4]
 8013ff4:	4619      	mov	r1, r3
 8013ff6:	68f8      	ldr	r0, [r7, #12]
 8013ff8:	f000 ff6c 	bl	8014ed4 <SCSI_Verify10>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	75fb      	strb	r3, [r7, #23]
    break;
 8014000:	e00b      	b.n	801401a <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8014002:	7af9      	ldrb	r1, [r7, #11]
 8014004:	2320      	movs	r3, #32
 8014006:	2205      	movs	r2, #5
 8014008:	68f8      	ldr	r0, [r7, #12]
 801400a:	f000 fb61 	bl	80146d0 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	2202      	movs	r2, #2
 8014012:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8014014:	23ff      	movs	r3, #255	; 0xff
 8014016:	75fb      	strb	r3, [r7, #23]
    break;
 8014018:	bf00      	nop
  }

  return ret;
 801401a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801401e:	4618      	mov	r0, r3
 8014020:	3718      	adds	r7, #24
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}

08014026 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014026:	b580      	push	{r7, lr}
 8014028:	b086      	sub	sp, #24
 801402a:	af00      	add	r7, sp, #0
 801402c:	60f8      	str	r0, [r7, #12]
 801402e:	460b      	mov	r3, r1
 8014030:	607a      	str	r2, [r7, #4]
 8014032:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801403a:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801403c:	697a      	ldr	r2, [r7, #20]
 801403e:	f248 0318 	movw	r3, #32792	; 0x8018
 8014042:	4413      	add	r3, r2
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d00c      	beq.n	8014064 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801404a:	697a      	ldr	r2, [r7, #20]
 801404c:	f248 031d 	movw	r3, #32797	; 0x801d
 8014050:	4413      	add	r3, r2
 8014052:	7819      	ldrb	r1, [r3, #0]
 8014054:	2320      	movs	r3, #32
 8014056:	2205      	movs	r2, #5
 8014058:	68f8      	ldr	r0, [r7, #12]
 801405a:	f000 fb39 	bl	80146d0 <SCSI_SenseCode>

    return -1;
 801405e:	f04f 33ff 	mov.w	r3, #4294967295
 8014062:	e02c      	b.n	80140be <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014064:	697a      	ldr	r2, [r7, #20]
 8014066:	f248 0362 	movw	r3, #32866	; 0x8062
 801406a:	4413      	add	r3, r2
 801406c:	781b      	ldrb	r3, [r3, #0]
 801406e:	2b02      	cmp	r3, #2
 8014070:	d10b      	bne.n	801408a <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014072:	7af9      	ldrb	r1, [r7, #11]
 8014074:	233a      	movs	r3, #58	; 0x3a
 8014076:	2202      	movs	r2, #2
 8014078:	68f8      	ldr	r0, [r7, #12]
 801407a:	f000 fb29 	bl	80146d0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	2205      	movs	r2, #5
 8014082:	721a      	strb	r2, [r3, #8]
    return -1;
 8014084:	f04f 33ff 	mov.w	r3, #4294967295
 8014088:	e019      	b.n	80140be <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014090:	689b      	ldr	r3, [r3, #8]
 8014092:	7afa      	ldrb	r2, [r7, #11]
 8014094:	4610      	mov	r0, r2
 8014096:	4798      	blx	r3
 8014098:	4603      	mov	r3, r0
 801409a:	2b00      	cmp	r3, #0
 801409c:	d00b      	beq.n	80140b6 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801409e:	7af9      	ldrb	r1, [r7, #11]
 80140a0:	233a      	movs	r3, #58	; 0x3a
 80140a2:	2202      	movs	r2, #2
 80140a4:	68f8      	ldr	r0, [r7, #12]
 80140a6:	f000 fb13 	bl	80146d0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	2205      	movs	r2, #5
 80140ae:	721a      	strb	r2, [r3, #8]

    return -1;
 80140b0:	f04f 33ff 	mov.w	r3, #4294967295
 80140b4:	e003      	b.n	80140be <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	2200      	movs	r2, #0
 80140ba:	60da      	str	r2, [r3, #12]

  return 0;
 80140bc:	2300      	movs	r3, #0
}
 80140be:	4618      	mov	r0, r3
 80140c0:	3718      	adds	r7, #24
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
	...

080140c8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b088      	sub	sp, #32
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	60f8      	str	r0, [r7, #12]
 80140d0:	460b      	mov	r3, r1
 80140d2:	607a      	str	r2, [r7, #4]
 80140d4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140dc:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80140de:	69ba      	ldr	r2, [r7, #24]
 80140e0:	f248 0318 	movw	r3, #32792	; 0x8018
 80140e4:	4413      	add	r3, r2
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d10c      	bne.n	8014106 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80140ec:	69ba      	ldr	r2, [r7, #24]
 80140ee:	f248 031d 	movw	r3, #32797	; 0x801d
 80140f2:	4413      	add	r3, r2
 80140f4:	7819      	ldrb	r1, [r3, #0]
 80140f6:	2320      	movs	r3, #32
 80140f8:	2205      	movs	r2, #5
 80140fa:	68f8      	ldr	r0, [r7, #12]
 80140fc:	f000 fae8 	bl	80146d0 <SCSI_SenseCode>
    return -1;
 8014100:	f04f 33ff 	mov.w	r3, #4294967295
 8014104:	e04c      	b.n	80141a0 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	3301      	adds	r3, #1
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	f003 0301 	and.w	r3, r3, #1
 8014110:	2b00      	cmp	r3, #0
 8014112:	d022      	beq.n	801415a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	3302      	adds	r3, #2
 8014118:	781b      	ldrb	r3, [r3, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d105      	bne.n	801412a <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801411e:	2206      	movs	r2, #6
 8014120:	4921      	ldr	r1, [pc, #132]	; (80141a8 <SCSI_Inquiry+0xe0>)
 8014122:	69b8      	ldr	r0, [r7, #24]
 8014124:	f001 f862 	bl	80151ec <SCSI_UpdateBotData>
 8014128:	e039      	b.n	801419e <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	3302      	adds	r3, #2
 801412e:	781b      	ldrb	r3, [r3, #0]
 8014130:	2b80      	cmp	r3, #128	; 0x80
 8014132:	d105      	bne.n	8014140 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8014134:	2208      	movs	r2, #8
 8014136:	491d      	ldr	r1, [pc, #116]	; (80141ac <SCSI_Inquiry+0xe4>)
 8014138:	69b8      	ldr	r0, [r7, #24]
 801413a:	f001 f857 	bl	80151ec <SCSI_UpdateBotData>
 801413e:	e02e      	b.n	801419e <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8014140:	69ba      	ldr	r2, [r7, #24]
 8014142:	f248 031d 	movw	r3, #32797	; 0x801d
 8014146:	4413      	add	r3, r2
 8014148:	7819      	ldrb	r1, [r3, #0]
 801414a:	2324      	movs	r3, #36	; 0x24
 801414c:	2205      	movs	r2, #5
 801414e:	68f8      	ldr	r0, [r7, #12]
 8014150:	f000 fabe 	bl	80146d0 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014154:	f04f 33ff 	mov.w	r3, #4294967295
 8014158:	e022      	b.n	80141a0 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014160:	69d9      	ldr	r1, [r3, #28]
 8014162:	7afa      	ldrb	r2, [r7, #11]
 8014164:	4613      	mov	r3, r2
 8014166:	00db      	lsls	r3, r3, #3
 8014168:	4413      	add	r3, r2
 801416a:	009b      	lsls	r3, r3, #2
 801416c:	440b      	add	r3, r1
 801416e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8014170:	697b      	ldr	r3, [r7, #20]
 8014172:	3304      	adds	r3, #4
 8014174:	781b      	ldrb	r3, [r3, #0]
 8014176:	b29b      	uxth	r3, r3
 8014178:	3305      	adds	r3, #5
 801417a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	3304      	adds	r3, #4
 8014180:	781b      	ldrb	r3, [r3, #0]
 8014182:	b29b      	uxth	r3, r3
 8014184:	8bfa      	ldrh	r2, [r7, #30]
 8014186:	429a      	cmp	r2, r3
 8014188:	d303      	bcc.n	8014192 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	3304      	adds	r3, #4
 801418e:	781b      	ldrb	r3, [r3, #0]
 8014190:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8014192:	8bfb      	ldrh	r3, [r7, #30]
 8014194:	461a      	mov	r2, r3
 8014196:	6979      	ldr	r1, [r7, #20]
 8014198:	69b8      	ldr	r0, [r7, #24]
 801419a:	f001 f827 	bl	80151ec <SCSI_UpdateBotData>
  }

  return 0;
 801419e:	2300      	movs	r3, #0
}
 80141a0:	4618      	mov	r0, r3
 80141a2:	3720      	adds	r7, #32
 80141a4:	46bd      	mov	sp, r7
 80141a6:	bd80      	pop	{r7, pc}
 80141a8:	240000c4 	.word	0x240000c4
 80141ac:	240000cc 	.word	0x240000cc

080141b0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80141b0:	b590      	push	{r4, r7, lr}
 80141b2:	b087      	sub	sp, #28
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	60f8      	str	r0, [r7, #12]
 80141b8:	460b      	mov	r3, r1
 80141ba:	607a      	str	r2, [r7, #4]
 80141bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80141c4:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80141cc:	685c      	ldr	r4, [r3, #4]
 80141ce:	697a      	ldr	r2, [r7, #20]
 80141d0:	f248 0368 	movw	r3, #32872	; 0x8068
 80141d4:	4413      	add	r3, r2
 80141d6:	6979      	ldr	r1, [r7, #20]
 80141d8:	f248 0264 	movw	r2, #32868	; 0x8064
 80141dc:	440a      	add	r2, r1
 80141de:	7af8      	ldrb	r0, [r7, #11]
 80141e0:	4619      	mov	r1, r3
 80141e2:	47a0      	blx	r4
 80141e4:	4603      	mov	r3, r0
 80141e6:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80141e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d106      	bne.n	80141fe <SCSI_ReadCapacity10+0x4e>
 80141f0:	697a      	ldr	r2, [r7, #20]
 80141f2:	f248 0362 	movw	r3, #32866	; 0x8062
 80141f6:	4413      	add	r3, r2
 80141f8:	781b      	ldrb	r3, [r3, #0]
 80141fa:	2b02      	cmp	r3, #2
 80141fc:	d108      	bne.n	8014210 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80141fe:	7af9      	ldrb	r1, [r7, #11]
 8014200:	233a      	movs	r3, #58	; 0x3a
 8014202:	2202      	movs	r2, #2
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	f000 fa63 	bl	80146d0 <SCSI_SenseCode>
    return -1;
 801420a:	f04f 33ff 	mov.w	r3, #4294967295
 801420e:	e04f      	b.n	80142b0 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014210:	697a      	ldr	r2, [r7, #20]
 8014212:	f248 0368 	movw	r3, #32872	; 0x8068
 8014216:	4413      	add	r3, r2
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	3b01      	subs	r3, #1
 801421c:	0e1b      	lsrs	r3, r3, #24
 801421e:	b2da      	uxtb	r2, r3
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014224:	697a      	ldr	r2, [r7, #20]
 8014226:	f248 0368 	movw	r3, #32872	; 0x8068
 801422a:	4413      	add	r3, r2
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	3b01      	subs	r3, #1
 8014230:	0c1b      	lsrs	r3, r3, #16
 8014232:	b2da      	uxtb	r2, r3
 8014234:	697b      	ldr	r3, [r7, #20]
 8014236:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014238:	697a      	ldr	r2, [r7, #20]
 801423a:	f248 0368 	movw	r3, #32872	; 0x8068
 801423e:	4413      	add	r3, r2
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	3b01      	subs	r3, #1
 8014244:	0a1b      	lsrs	r3, r3, #8
 8014246:	b2da      	uxtb	r2, r3
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801424c:	697a      	ldr	r2, [r7, #20]
 801424e:	f248 0368 	movw	r3, #32872	; 0x8068
 8014252:	4413      	add	r3, r2
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	b2db      	uxtb	r3, r3
 8014258:	3b01      	subs	r3, #1
 801425a:	b2da      	uxtb	r2, r3
 801425c:	697b      	ldr	r3, [r7, #20]
 801425e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014260:	697a      	ldr	r2, [r7, #20]
 8014262:	f248 0364 	movw	r3, #32868	; 0x8064
 8014266:	4413      	add	r3, r2
 8014268:	881b      	ldrh	r3, [r3, #0]
 801426a:	161b      	asrs	r3, r3, #24
 801426c:	b2da      	uxtb	r2, r3
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8014272:	697a      	ldr	r2, [r7, #20]
 8014274:	f248 0364 	movw	r3, #32868	; 0x8064
 8014278:	4413      	add	r3, r2
 801427a:	881b      	ldrh	r3, [r3, #0]
 801427c:	141b      	asrs	r3, r3, #16
 801427e:	b2da      	uxtb	r2, r3
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014284:	697a      	ldr	r2, [r7, #20]
 8014286:	f248 0364 	movw	r3, #32868	; 0x8064
 801428a:	4413      	add	r3, r2
 801428c:	881b      	ldrh	r3, [r3, #0]
 801428e:	0a1b      	lsrs	r3, r3, #8
 8014290:	b29b      	uxth	r3, r3
 8014292:	b2da      	uxtb	r2, r3
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8014298:	697a      	ldr	r2, [r7, #20]
 801429a:	f248 0364 	movw	r3, #32868	; 0x8064
 801429e:	4413      	add	r3, r2
 80142a0:	881b      	ldrh	r3, [r3, #0]
 80142a2:	b2da      	uxtb	r2, r3
 80142a4:	697b      	ldr	r3, [r7, #20]
 80142a6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	2208      	movs	r2, #8
 80142ac:	60da      	str	r2, [r3, #12]

  return 0;
 80142ae:	2300      	movs	r3, #0

}
 80142b0:	4618      	mov	r0, r3
 80142b2:	371c      	adds	r7, #28
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd90      	pop	{r4, r7, pc}

080142b8 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80142b8:	b590      	push	{r4, r7, lr}
 80142ba:	b089      	sub	sp, #36	; 0x24
 80142bc:	af00      	add	r7, sp, #0
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	460b      	mov	r3, r1
 80142c2:	607a      	str	r2, [r7, #4]
 80142c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142cc:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142d4:	685c      	ldr	r4, [r3, #4]
 80142d6:	69ba      	ldr	r2, [r7, #24]
 80142d8:	f248 0368 	movw	r3, #32872	; 0x8068
 80142dc:	4413      	add	r3, r2
 80142de:	69b9      	ldr	r1, [r7, #24]
 80142e0:	f248 0264 	movw	r2, #32868	; 0x8064
 80142e4:	440a      	add	r2, r1
 80142e6:	7af8      	ldrb	r0, [r7, #11]
 80142e8:	4619      	mov	r1, r3
 80142ea:	47a0      	blx	r4
 80142ec:	4603      	mov	r3, r0
 80142ee:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80142f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d106      	bne.n	8014306 <SCSI_ReadCapacity16+0x4e>
 80142f8:	69ba      	ldr	r2, [r7, #24]
 80142fa:	f248 0362 	movw	r3, #32866	; 0x8062
 80142fe:	4413      	add	r3, r2
 8014300:	781b      	ldrb	r3, [r3, #0]
 8014302:	2b02      	cmp	r3, #2
 8014304:	d108      	bne.n	8014318 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014306:	7af9      	ldrb	r1, [r7, #11]
 8014308:	233a      	movs	r3, #58	; 0x3a
 801430a:	2202      	movs	r2, #2
 801430c:	68f8      	ldr	r0, [r7, #12]
 801430e:	f000 f9df 	bl	80146d0 <SCSI_SenseCode>
    return -1;
 8014312:	f04f 33ff 	mov.w	r3, #4294967295
 8014316:	e084      	b.n	8014422 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	330a      	adds	r3, #10
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	330b      	adds	r3, #11
 8014324:	781b      	ldrb	r3, [r3, #0]
 8014326:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014328:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	330c      	adds	r3, #12
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014332:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014334:	687a      	ldr	r2, [r7, #4]
 8014336:	320d      	adds	r2, #13
 8014338:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801433a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801433c:	69bb      	ldr	r3, [r7, #24]
 801433e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014340:	2300      	movs	r3, #0
 8014342:	77fb      	strb	r3, [r7, #31]
 8014344:	e007      	b.n	8014356 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8014346:	7ffb      	ldrb	r3, [r7, #31]
 8014348:	69ba      	ldr	r2, [r7, #24]
 801434a:	4413      	add	r3, r2
 801434c:	2200      	movs	r2, #0
 801434e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014350:	7ffb      	ldrb	r3, [r7, #31]
 8014352:	3301      	adds	r3, #1
 8014354:	77fb      	strb	r3, [r7, #31]
 8014356:	7ffa      	ldrb	r2, [r7, #31]
 8014358:	69bb      	ldr	r3, [r7, #24]
 801435a:	68db      	ldr	r3, [r3, #12]
 801435c:	429a      	cmp	r2, r3
 801435e:	d3f2      	bcc.n	8014346 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014360:	69ba      	ldr	r2, [r7, #24]
 8014362:	f248 0368 	movw	r3, #32872	; 0x8068
 8014366:	4413      	add	r3, r2
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	3b01      	subs	r3, #1
 801436c:	0e1b      	lsrs	r3, r3, #24
 801436e:	b2da      	uxtb	r2, r3
 8014370:	69bb      	ldr	r3, [r7, #24]
 8014372:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014374:	69ba      	ldr	r2, [r7, #24]
 8014376:	f248 0368 	movw	r3, #32872	; 0x8068
 801437a:	4413      	add	r3, r2
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	3b01      	subs	r3, #1
 8014380:	0c1b      	lsrs	r3, r3, #16
 8014382:	b2da      	uxtb	r2, r3
 8014384:	69bb      	ldr	r3, [r7, #24]
 8014386:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014388:	69ba      	ldr	r2, [r7, #24]
 801438a:	f248 0368 	movw	r3, #32872	; 0x8068
 801438e:	4413      	add	r3, r2
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	3b01      	subs	r3, #1
 8014394:	0a1b      	lsrs	r3, r3, #8
 8014396:	b2da      	uxtb	r2, r3
 8014398:	69bb      	ldr	r3, [r7, #24]
 801439a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801439c:	69ba      	ldr	r2, [r7, #24]
 801439e:	f248 0368 	movw	r3, #32872	; 0x8068
 80143a2:	4413      	add	r3, r2
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	b2db      	uxtb	r3, r3
 80143a8:	3b01      	subs	r3, #1
 80143aa:	b2da      	uxtb	r2, r3
 80143ac:	69bb      	ldr	r3, [r7, #24]
 80143ae:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80143b0:	69ba      	ldr	r2, [r7, #24]
 80143b2:	f248 0364 	movw	r3, #32868	; 0x8064
 80143b6:	4413      	add	r3, r2
 80143b8:	881b      	ldrh	r3, [r3, #0]
 80143ba:	161b      	asrs	r3, r3, #24
 80143bc:	b2da      	uxtb	r2, r3
 80143be:	69bb      	ldr	r3, [r7, #24]
 80143c0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80143c2:	69ba      	ldr	r2, [r7, #24]
 80143c4:	f248 0364 	movw	r3, #32868	; 0x8064
 80143c8:	4413      	add	r3, r2
 80143ca:	881b      	ldrh	r3, [r3, #0]
 80143cc:	141b      	asrs	r3, r3, #16
 80143ce:	b2da      	uxtb	r2, r3
 80143d0:	69bb      	ldr	r3, [r7, #24]
 80143d2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80143d4:	69ba      	ldr	r2, [r7, #24]
 80143d6:	f248 0364 	movw	r3, #32868	; 0x8064
 80143da:	4413      	add	r3, r2
 80143dc:	881b      	ldrh	r3, [r3, #0]
 80143de:	0a1b      	lsrs	r3, r3, #8
 80143e0:	b29b      	uxth	r3, r3
 80143e2:	b2da      	uxtb	r2, r3
 80143e4:	69bb      	ldr	r3, [r7, #24]
 80143e6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80143e8:	69ba      	ldr	r2, [r7, #24]
 80143ea:	f248 0364 	movw	r3, #32868	; 0x8064
 80143ee:	4413      	add	r3, r2
 80143f0:	881b      	ldrh	r3, [r3, #0]
 80143f2:	b2da      	uxtb	r2, r3
 80143f4:	69bb      	ldr	r3, [r7, #24]
 80143f6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	330a      	adds	r3, #10
 80143fc:	781b      	ldrb	r3, [r3, #0]
 80143fe:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	330b      	adds	r3, #11
 8014404:	781b      	ldrb	r3, [r3, #0]
 8014406:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014408:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	330c      	adds	r3, #12
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014412:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014414:	687a      	ldr	r2, [r7, #4]
 8014416:	320d      	adds	r2, #13
 8014418:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801441a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801441c:	69bb      	ldr	r3, [r7, #24]
 801441e:	60da      	str	r2, [r3, #12]

  return 0;
 8014420:	2300      	movs	r3, #0
}
 8014422:	4618      	mov	r0, r3
 8014424:	3724      	adds	r7, #36	; 0x24
 8014426:	46bd      	mov	sp, r7
 8014428:	bd90      	pop	{r4, r7, pc}

0801442a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801442a:	b580      	push	{r7, lr}
 801442c:	b088      	sub	sp, #32
 801442e:	af00      	add	r7, sp, #0
 8014430:	60f8      	str	r0, [r7, #12]
 8014432:	460b      	mov	r3, r1
 8014434:	607a      	str	r2, [r7, #4]
 8014436:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801443e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014446:	685b      	ldr	r3, [r3, #4]
 8014448:	f107 0214 	add.w	r2, r7, #20
 801444c:	f107 0110 	add.w	r1, r7, #16
 8014450:	7af8      	ldrb	r0, [r7, #11]
 8014452:	4798      	blx	r3
 8014454:	4603      	mov	r3, r0
 8014456:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014458:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d106      	bne.n	801446e <SCSI_ReadFormatCapacity+0x44>
 8014460:	69ba      	ldr	r2, [r7, #24]
 8014462:	f248 0362 	movw	r3, #32866	; 0x8062
 8014466:	4413      	add	r3, r2
 8014468:	781b      	ldrb	r3, [r3, #0]
 801446a:	2b02      	cmp	r3, #2
 801446c:	d108      	bne.n	8014480 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801446e:	7af9      	ldrb	r1, [r7, #11]
 8014470:	233a      	movs	r3, #58	; 0x3a
 8014472:	2202      	movs	r2, #2
 8014474:	68f8      	ldr	r0, [r7, #12]
 8014476:	f000 f92b 	bl	80146d0 <SCSI_SenseCode>
    return -1;
 801447a:	f04f 33ff 	mov.w	r3, #4294967295
 801447e:	e03e      	b.n	80144fe <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 8014480:	2300      	movs	r3, #0
 8014482:	83fb      	strh	r3, [r7, #30]
 8014484:	e007      	b.n	8014496 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8014486:	8bfb      	ldrh	r3, [r7, #30]
 8014488:	69ba      	ldr	r2, [r7, #24]
 801448a:	4413      	add	r3, r2
 801448c:	2200      	movs	r2, #0
 801448e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8014490:	8bfb      	ldrh	r3, [r7, #30]
 8014492:	3301      	adds	r3, #1
 8014494:	83fb      	strh	r3, [r7, #30]
 8014496:	8bfb      	ldrh	r3, [r7, #30]
 8014498:	2b0b      	cmp	r3, #11
 801449a:	d9f4      	bls.n	8014486 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 801449c:	69bb      	ldr	r3, [r7, #24]
 801449e:	2208      	movs	r2, #8
 80144a0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	3b01      	subs	r3, #1
 80144a6:	0e1b      	lsrs	r3, r3, #24
 80144a8:	b2da      	uxtb	r2, r3
 80144aa:	69bb      	ldr	r3, [r7, #24]
 80144ac:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	3b01      	subs	r3, #1
 80144b2:	0c1b      	lsrs	r3, r3, #16
 80144b4:	b2da      	uxtb	r2, r3
 80144b6:	69bb      	ldr	r3, [r7, #24]
 80144b8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	3b01      	subs	r3, #1
 80144be:	0a1b      	lsrs	r3, r3, #8
 80144c0:	b2da      	uxtb	r2, r3
 80144c2:	69bb      	ldr	r3, [r7, #24]
 80144c4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	b2db      	uxtb	r3, r3
 80144ca:	3b01      	subs	r3, #1
 80144cc:	b2da      	uxtb	r2, r3
 80144ce:	69bb      	ldr	r3, [r7, #24]
 80144d0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80144d2:	69bb      	ldr	r3, [r7, #24]
 80144d4:	2202      	movs	r2, #2
 80144d6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80144d8:	8abb      	ldrh	r3, [r7, #20]
 80144da:	141b      	asrs	r3, r3, #16
 80144dc:	b2da      	uxtb	r2, r3
 80144de:	69bb      	ldr	r3, [r7, #24]
 80144e0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80144e2:	8abb      	ldrh	r3, [r7, #20]
 80144e4:	0a1b      	lsrs	r3, r3, #8
 80144e6:	b29b      	uxth	r3, r3
 80144e8:	b2da      	uxtb	r2, r3
 80144ea:	69bb      	ldr	r3, [r7, #24]
 80144ec:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80144ee:	8abb      	ldrh	r3, [r7, #20]
 80144f0:	b2da      	uxtb	r2, r3
 80144f2:	69bb      	ldr	r3, [r7, #24]
 80144f4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80144f6:	69bb      	ldr	r3, [r7, #24]
 80144f8:	220c      	movs	r2, #12
 80144fa:	60da      	str	r2, [r3, #12]

  return 0;
 80144fc:	2300      	movs	r3, #0
}
 80144fe:	4618      	mov	r0, r3
 8014500:	3720      	adds	r7, #32
 8014502:	46bd      	mov	sp, r7
 8014504:	bd80      	pop	{r7, pc}
	...

08014508 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b086      	sub	sp, #24
 801450c:	af00      	add	r7, sp, #0
 801450e:	60f8      	str	r0, [r7, #12]
 8014510:	460b      	mov	r3, r1
 8014512:	607a      	str	r2, [r7, #4]
 8014514:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801451c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801451e:	2317      	movs	r3, #23
 8014520:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	3304      	adds	r3, #4
 8014526:	781b      	ldrb	r3, [r3, #0]
 8014528:	b29b      	uxth	r3, r3
 801452a:	8afa      	ldrh	r2, [r7, #22]
 801452c:	429a      	cmp	r2, r3
 801452e:	d303      	bcc.n	8014538 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	3304      	adds	r3, #4
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8014538:	8afb      	ldrh	r3, [r7, #22]
 801453a:	461a      	mov	r2, r3
 801453c:	4904      	ldr	r1, [pc, #16]	; (8014550 <SCSI_ModeSense6+0x48>)
 801453e:	6938      	ldr	r0, [r7, #16]
 8014540:	f000 fe54 	bl	80151ec <SCSI_UpdateBotData>

  return 0;
 8014544:	2300      	movs	r3, #0
}
 8014546:	4618      	mov	r0, r3
 8014548:	3718      	adds	r7, #24
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}
 801454e:	bf00      	nop
 8014550:	240000d4 	.word	0x240000d4

08014554 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b086      	sub	sp, #24
 8014558:	af00      	add	r7, sp, #0
 801455a:	60f8      	str	r0, [r7, #12]
 801455c:	460b      	mov	r3, r1
 801455e:	607a      	str	r2, [r7, #4]
 8014560:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014568:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801456a:	231b      	movs	r3, #27
 801456c:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	3308      	adds	r3, #8
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	b29b      	uxth	r3, r3
 8014576:	8afa      	ldrh	r2, [r7, #22]
 8014578:	429a      	cmp	r2, r3
 801457a:	d303      	bcc.n	8014584 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	3308      	adds	r3, #8
 8014580:	781b      	ldrb	r3, [r3, #0]
 8014582:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8014584:	8afb      	ldrh	r3, [r7, #22]
 8014586:	461a      	mov	r2, r3
 8014588:	4904      	ldr	r1, [pc, #16]	; (801459c <SCSI_ModeSense10+0x48>)
 801458a:	6938      	ldr	r0, [r7, #16]
 801458c:	f000 fe2e 	bl	80151ec <SCSI_UpdateBotData>

  return 0;
 8014590:	2300      	movs	r3, #0
}
 8014592:	4618      	mov	r0, r3
 8014594:	3718      	adds	r7, #24
 8014596:	46bd      	mov	sp, r7
 8014598:	bd80      	pop	{r7, pc}
 801459a:	bf00      	nop
 801459c:	240000ec 	.word	0x240000ec

080145a0 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b086      	sub	sp, #24
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	60f8      	str	r0, [r7, #12]
 80145a8:	460b      	mov	r3, r1
 80145aa:	607a      	str	r2, [r7, #4]
 80145ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80145b4:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 80145b6:	693a      	ldr	r2, [r7, #16]
 80145b8:	f248 0318 	movw	r3, #32792	; 0x8018
 80145bc:	4413      	add	r3, r2
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d10c      	bne.n	80145de <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80145c4:	693a      	ldr	r2, [r7, #16]
 80145c6:	f248 031d 	movw	r3, #32797	; 0x801d
 80145ca:	4413      	add	r3, r2
 80145cc:	7819      	ldrb	r1, [r3, #0]
 80145ce:	2320      	movs	r3, #32
 80145d0:	2205      	movs	r2, #5
 80145d2:	68f8      	ldr	r0, [r7, #12]
 80145d4:	f000 f87c 	bl	80146d0 <SCSI_SenseCode>
    return -1;
 80145d8:	f04f 33ff 	mov.w	r3, #4294967295
 80145dc:	e074      	b.n	80146c8 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80145de:	2300      	movs	r3, #0
 80145e0:	75fb      	strb	r3, [r7, #23]
 80145e2:	e007      	b.n	80145f4 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 80145e4:	7dfb      	ldrb	r3, [r7, #23]
 80145e6:	693a      	ldr	r2, [r7, #16]
 80145e8:	4413      	add	r3, r2
 80145ea:	2200      	movs	r2, #0
 80145ec:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80145ee:	7dfb      	ldrb	r3, [r7, #23]
 80145f0:	3301      	adds	r3, #1
 80145f2:	75fb      	strb	r3, [r7, #23]
 80145f4:	7dfb      	ldrb	r3, [r7, #23]
 80145f6:	2b11      	cmp	r3, #17
 80145f8:	d9f4      	bls.n	80145e4 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	2270      	movs	r2, #112	; 0x70
 80145fe:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	220c      	movs	r2, #12
 8014604:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8014606:	693a      	ldr	r2, [r7, #16]
 8014608:	f248 0360 	movw	r3, #32864	; 0x8060
 801460c:	4413      	add	r3, r2
 801460e:	781a      	ldrb	r2, [r3, #0]
 8014610:	6939      	ldr	r1, [r7, #16]
 8014612:	f248 0361 	movw	r3, #32865	; 0x8061
 8014616:	440b      	add	r3, r1
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	429a      	cmp	r2, r3
 801461c:	d045      	beq.n	80146aa <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801461e:	693a      	ldr	r2, [r7, #16]
 8014620:	f248 0360 	movw	r3, #32864	; 0x8060
 8014624:	4413      	add	r3, r2
 8014626:	781b      	ldrb	r3, [r3, #0]
 8014628:	4619      	mov	r1, r3
 801462a:	693a      	ldr	r2, [r7, #16]
 801462c:	f241 0308 	movw	r3, #4104	; 0x1008
 8014630:	440b      	add	r3, r1
 8014632:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8014636:	693b      	ldr	r3, [r7, #16]
 8014638:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801463a:	693a      	ldr	r2, [r7, #16]
 801463c:	f248 0360 	movw	r3, #32864	; 0x8060
 8014640:	4413      	add	r3, r2
 8014642:	781b      	ldrb	r3, [r3, #0]
 8014644:	4619      	mov	r1, r3
 8014646:	693a      	ldr	r2, [r7, #16]
 8014648:	f241 0308 	movw	r3, #4104	; 0x1008
 801464c:	440b      	add	r3, r1
 801464e:	00db      	lsls	r3, r3, #3
 8014650:	4413      	add	r3, r2
 8014652:	791a      	ldrb	r2, [r3, #4]
 8014654:	693b      	ldr	r3, [r7, #16]
 8014656:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8014658:	693a      	ldr	r2, [r7, #16]
 801465a:	f248 0360 	movw	r3, #32864	; 0x8060
 801465e:	4413      	add	r3, r2
 8014660:	781b      	ldrb	r3, [r3, #0]
 8014662:	4619      	mov	r1, r3
 8014664:	693a      	ldr	r2, [r7, #16]
 8014666:	f241 0308 	movw	r3, #4104	; 0x1008
 801466a:	440b      	add	r3, r1
 801466c:	00db      	lsls	r3, r3, #3
 801466e:	4413      	add	r3, r2
 8014670:	795a      	ldrb	r2, [r3, #5]
 8014672:	693b      	ldr	r3, [r7, #16]
 8014674:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8014676:	693a      	ldr	r2, [r7, #16]
 8014678:	f248 0360 	movw	r3, #32864	; 0x8060
 801467c:	4413      	add	r3, r2
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	3301      	adds	r3, #1
 8014682:	b2d9      	uxtb	r1, r3
 8014684:	693a      	ldr	r2, [r7, #16]
 8014686:	f248 0360 	movw	r3, #32864	; 0x8060
 801468a:	4413      	add	r3, r2
 801468c:	460a      	mov	r2, r1
 801468e:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8014690:	693a      	ldr	r2, [r7, #16]
 8014692:	f248 0360 	movw	r3, #32864	; 0x8060
 8014696:	4413      	add	r3, r2
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	2b04      	cmp	r3, #4
 801469c:	d105      	bne.n	80146aa <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 801469e:	693a      	ldr	r2, [r7, #16]
 80146a0:	f248 0360 	movw	r3, #32864	; 0x8060
 80146a4:	4413      	add	r3, r2
 80146a6:	2200      	movs	r2, #0
 80146a8:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80146aa:	693b      	ldr	r3, [r7, #16]
 80146ac:	2212      	movs	r2, #18
 80146ae:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	3304      	adds	r3, #4
 80146b4:	781b      	ldrb	r3, [r3, #0]
 80146b6:	2b12      	cmp	r3, #18
 80146b8:	d805      	bhi.n	80146c6 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	3304      	adds	r3, #4
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	461a      	mov	r2, r3
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80146c6:	2300      	movs	r3, #0
}
 80146c8:	4618      	mov	r0, r3
 80146ca:	3718      	adds	r7, #24
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}

080146d0 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80146d0:	b480      	push	{r7}
 80146d2:	b085      	sub	sp, #20
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
 80146d8:	4608      	mov	r0, r1
 80146da:	4611      	mov	r1, r2
 80146dc:	461a      	mov	r2, r3
 80146de:	4603      	mov	r3, r0
 80146e0:	70fb      	strb	r3, [r7, #3]
 80146e2:	460b      	mov	r3, r1
 80146e4:	70bb      	strb	r3, [r7, #2]
 80146e6:	4613      	mov	r3, r2
 80146e8:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80146f0:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80146f2:	68fa      	ldr	r2, [r7, #12]
 80146f4:	f248 0361 	movw	r3, #32865	; 0x8061
 80146f8:	4413      	add	r3, r2
 80146fa:	781b      	ldrb	r3, [r3, #0]
 80146fc:	4619      	mov	r1, r3
 80146fe:	68fa      	ldr	r2, [r7, #12]
 8014700:	f241 0308 	movw	r3, #4104	; 0x1008
 8014704:	440b      	add	r3, r1
 8014706:	78b9      	ldrb	r1, [r7, #2]
 8014708:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801470c:	68fa      	ldr	r2, [r7, #12]
 801470e:	f248 0361 	movw	r3, #32865	; 0x8061
 8014712:	4413      	add	r3, r2
 8014714:	781b      	ldrb	r3, [r3, #0]
 8014716:	4619      	mov	r1, r3
 8014718:	68fa      	ldr	r2, [r7, #12]
 801471a:	f241 0308 	movw	r3, #4104	; 0x1008
 801471e:	440b      	add	r3, r1
 8014720:	00db      	lsls	r3, r3, #3
 8014722:	4413      	add	r3, r2
 8014724:	787a      	ldrb	r2, [r7, #1]
 8014726:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8014728:	68fa      	ldr	r2, [r7, #12]
 801472a:	f248 0361 	movw	r3, #32865	; 0x8061
 801472e:	4413      	add	r3, r2
 8014730:	781b      	ldrb	r3, [r3, #0]
 8014732:	4619      	mov	r1, r3
 8014734:	68fa      	ldr	r2, [r7, #12]
 8014736:	f241 0308 	movw	r3, #4104	; 0x1008
 801473a:	440b      	add	r3, r1
 801473c:	00db      	lsls	r3, r3, #3
 801473e:	4413      	add	r3, r2
 8014740:	2200      	movs	r2, #0
 8014742:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8014744:	68fa      	ldr	r2, [r7, #12]
 8014746:	f248 0361 	movw	r3, #32865	; 0x8061
 801474a:	4413      	add	r3, r2
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	3301      	adds	r3, #1
 8014750:	b2d9      	uxtb	r1, r3
 8014752:	68fa      	ldr	r2, [r7, #12]
 8014754:	f248 0361 	movw	r3, #32865	; 0x8061
 8014758:	4413      	add	r3, r2
 801475a:	460a      	mov	r2, r1
 801475c:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801475e:	68fa      	ldr	r2, [r7, #12]
 8014760:	f248 0361 	movw	r3, #32865	; 0x8061
 8014764:	4413      	add	r3, r2
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	2b04      	cmp	r3, #4
 801476a:	d105      	bne.n	8014778 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 801476c:	68fa      	ldr	r2, [r7, #12]
 801476e:	f248 0361 	movw	r3, #32865	; 0x8061
 8014772:	4413      	add	r3, r2
 8014774:	2200      	movs	r2, #0
 8014776:	701a      	strb	r2, [r3, #0]
  }
}
 8014778:	bf00      	nop
 801477a:	3714      	adds	r7, #20
 801477c:	46bd      	mov	sp, r7
 801477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014782:	4770      	bx	lr

08014784 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b086      	sub	sp, #24
 8014788:	af00      	add	r7, sp, #0
 801478a:	60f8      	str	r0, [r7, #12]
 801478c:	460b      	mov	r3, r1
 801478e:	607a      	str	r2, [r7, #4]
 8014790:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014798:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801479a:	697a      	ldr	r2, [r7, #20]
 801479c:	f248 0362 	movw	r3, #32866	; 0x8062
 80147a0:	4413      	add	r3, r2
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	2b01      	cmp	r3, #1
 80147a6:	d10f      	bne.n	80147c8 <SCSI_StartStopUnit+0x44>
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	3304      	adds	r3, #4
 80147ac:	781b      	ldrb	r3, [r3, #0]
 80147ae:	f003 0303 	and.w	r3, r3, #3
 80147b2:	2b02      	cmp	r3, #2
 80147b4:	d108      	bne.n	80147c8 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80147b6:	7af9      	ldrb	r1, [r7, #11]
 80147b8:	2324      	movs	r3, #36	; 0x24
 80147ba:	2205      	movs	r2, #5
 80147bc:	68f8      	ldr	r0, [r7, #12]
 80147be:	f7ff ff87 	bl	80146d0 <SCSI_SenseCode>

    return -1;
 80147c2:	f04f 33ff 	mov.w	r3, #4294967295
 80147c6:	e02c      	b.n	8014822 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	3304      	adds	r3, #4
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	f003 0303 	and.w	r3, r3, #3
 80147d2:	2b01      	cmp	r3, #1
 80147d4:	d106      	bne.n	80147e4 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80147d6:	697a      	ldr	r2, [r7, #20]
 80147d8:	f248 0362 	movw	r3, #32866	; 0x8062
 80147dc:	4413      	add	r3, r2
 80147de:	2200      	movs	r2, #0
 80147e0:	701a      	strb	r2, [r3, #0]
 80147e2:	e01a      	b.n	801481a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	3304      	adds	r3, #4
 80147e8:	781b      	ldrb	r3, [r3, #0]
 80147ea:	f003 0303 	and.w	r3, r3, #3
 80147ee:	2b02      	cmp	r3, #2
 80147f0:	d106      	bne.n	8014800 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80147f2:	697a      	ldr	r2, [r7, #20]
 80147f4:	f248 0362 	movw	r3, #32866	; 0x8062
 80147f8:	4413      	add	r3, r2
 80147fa:	2202      	movs	r2, #2
 80147fc:	701a      	strb	r2, [r3, #0]
 80147fe:	e00c      	b.n	801481a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	3304      	adds	r3, #4
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	f003 0303 	and.w	r3, r3, #3
 801480a:	2b03      	cmp	r3, #3
 801480c:	d105      	bne.n	801481a <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801480e:	697a      	ldr	r2, [r7, #20]
 8014810:	f248 0362 	movw	r3, #32866	; 0x8062
 8014814:	4413      	add	r3, r2
 8014816:	2200      	movs	r2, #0
 8014818:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801481a:	697b      	ldr	r3, [r7, #20]
 801481c:	2200      	movs	r2, #0
 801481e:	60da      	str	r2, [r3, #12]

  return 0;
 8014820:	2300      	movs	r3, #0
}
 8014822:	4618      	mov	r0, r3
 8014824:	3718      	adds	r7, #24
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}

0801482a <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801482a:	b480      	push	{r7}
 801482c:	b087      	sub	sp, #28
 801482e:	af00      	add	r7, sp, #0
 8014830:	60f8      	str	r0, [r7, #12]
 8014832:	460b      	mov	r3, r1
 8014834:	607a      	str	r2, [r7, #4]
 8014836:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801483e:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	3304      	adds	r3, #4
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d106      	bne.n	8014858 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801484a:	697a      	ldr	r2, [r7, #20]
 801484c:	f248 0362 	movw	r3, #32866	; 0x8062
 8014850:	4413      	add	r3, r2
 8014852:	2200      	movs	r2, #0
 8014854:	701a      	strb	r2, [r3, #0]
 8014856:	e005      	b.n	8014864 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8014858:	697a      	ldr	r2, [r7, #20]
 801485a:	f248 0362 	movw	r3, #32866	; 0x8062
 801485e:	4413      	add	r3, r2
 8014860:	2201      	movs	r2, #1
 8014862:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8014864:	697b      	ldr	r3, [r7, #20]
 8014866:	2200      	movs	r2, #0
 8014868:	60da      	str	r2, [r3, #12]

  return 0;
 801486a:	2300      	movs	r3, #0
}
 801486c:	4618      	mov	r0, r3
 801486e:	371c      	adds	r7, #28
 8014870:	46bd      	mov	sp, r7
 8014872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014876:	4770      	bx	lr

08014878 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b086      	sub	sp, #24
 801487c:	af00      	add	r7, sp, #0
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	460b      	mov	r3, r1
 8014882:	607a      	str	r2, [r7, #4]
 8014884:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801488c:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	7a1b      	ldrb	r3, [r3, #8]
 8014892:	2b00      	cmp	r3, #0
 8014894:	f040 8094 	bne.w	80149c0 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014898:	697a      	ldr	r2, [r7, #20]
 801489a:	f248 031c 	movw	r3, #32796	; 0x801c
 801489e:	4413      	add	r3, r2
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	b25b      	sxtb	r3, r3
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	db0c      	blt.n	80148c2 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80148a8:	697a      	ldr	r2, [r7, #20]
 80148aa:	f248 031d 	movw	r3, #32797	; 0x801d
 80148ae:	4413      	add	r3, r2
 80148b0:	7819      	ldrb	r1, [r3, #0]
 80148b2:	2320      	movs	r3, #32
 80148b4:	2205      	movs	r2, #5
 80148b6:	68f8      	ldr	r0, [r7, #12]
 80148b8:	f7ff ff0a 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 80148bc:	f04f 33ff 	mov.w	r3, #4294967295
 80148c0:	e088      	b.n	80149d4 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80148c2:	697a      	ldr	r2, [r7, #20]
 80148c4:	f248 0362 	movw	r3, #32866	; 0x8062
 80148c8:	4413      	add	r3, r2
 80148ca:	781b      	ldrb	r3, [r3, #0]
 80148cc:	2b02      	cmp	r3, #2
 80148ce:	d108      	bne.n	80148e2 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80148d0:	7af9      	ldrb	r1, [r7, #11]
 80148d2:	233a      	movs	r3, #58	; 0x3a
 80148d4:	2202      	movs	r2, #2
 80148d6:	68f8      	ldr	r0, [r7, #12]
 80148d8:	f7ff fefa 	bl	80146d0 <SCSI_SenseCode>

      return -1;
 80148dc:	f04f 33ff 	mov.w	r3, #4294967295
 80148e0:	e078      	b.n	80149d4 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80148e8:	689b      	ldr	r3, [r3, #8]
 80148ea:	7afa      	ldrb	r2, [r7, #11]
 80148ec:	4610      	mov	r0, r2
 80148ee:	4798      	blx	r3
 80148f0:	4603      	mov	r3, r0
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d008      	beq.n	8014908 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80148f6:	7af9      	ldrb	r1, [r7, #11]
 80148f8:	233a      	movs	r3, #58	; 0x3a
 80148fa:	2202      	movs	r2, #2
 80148fc:	68f8      	ldr	r0, [r7, #12]
 80148fe:	f7ff fee7 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 8014902:	f04f 33ff 	mov.w	r3, #4294967295
 8014906:	e065      	b.n	80149d4 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	3302      	adds	r3, #2
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	3303      	adds	r3, #3
 8014914:	781b      	ldrb	r3, [r3, #0]
 8014916:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014918:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	3304      	adds	r3, #4
 801491e:	781b      	ldrb	r3, [r3, #0]
 8014920:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014922:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014924:	687a      	ldr	r2, [r7, #4]
 8014926:	3205      	adds	r2, #5
 8014928:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801492a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801492c:	6979      	ldr	r1, [r7, #20]
 801492e:	f248 036c 	movw	r3, #32876	; 0x806c
 8014932:	440b      	add	r3, r1
 8014934:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	3307      	adds	r3, #7
 801493a:	781b      	ldrb	r3, [r3, #0]
 801493c:	021b      	lsls	r3, r3, #8
 801493e:	687a      	ldr	r2, [r7, #4]
 8014940:	3208      	adds	r2, #8
 8014942:	7812      	ldrb	r2, [r2, #0]
 8014944:	431a      	orrs	r2, r3
 8014946:	6979      	ldr	r1, [r7, #20]
 8014948:	f248 0370 	movw	r3, #32880	; 0x8070
 801494c:	440b      	add	r3, r1
 801494e:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014950:	697a      	ldr	r2, [r7, #20]
 8014952:	f248 036c 	movw	r3, #32876	; 0x806c
 8014956:	4413      	add	r3, r2
 8014958:	6818      	ldr	r0, [r3, #0]
 801495a:	697a      	ldr	r2, [r7, #20]
 801495c:	f248 0370 	movw	r3, #32880	; 0x8070
 8014960:	4413      	add	r3, r2
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	7af9      	ldrb	r1, [r7, #11]
 8014966:	4602      	mov	r2, r0
 8014968:	68f8      	ldr	r0, [r7, #12]
 801496a:	f000 faeb 	bl	8014f44 <SCSI_CheckAddressRange>
 801496e:	4603      	mov	r3, r0
 8014970:	2b00      	cmp	r3, #0
 8014972:	da02      	bge.n	801497a <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014974:	f04f 33ff 	mov.w	r3, #4294967295
 8014978:	e02c      	b.n	80149d4 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801497a:	697a      	ldr	r2, [r7, #20]
 801497c:	f248 0318 	movw	r3, #32792	; 0x8018
 8014980:	4413      	add	r3, r2
 8014982:	681a      	ldr	r2, [r3, #0]
 8014984:	6979      	ldr	r1, [r7, #20]
 8014986:	f248 0370 	movw	r3, #32880	; 0x8070
 801498a:	440b      	add	r3, r1
 801498c:	6819      	ldr	r1, [r3, #0]
 801498e:	6978      	ldr	r0, [r7, #20]
 8014990:	f248 0364 	movw	r3, #32868	; 0x8064
 8014994:	4403      	add	r3, r0
 8014996:	881b      	ldrh	r3, [r3, #0]
 8014998:	fb03 f301 	mul.w	r3, r3, r1
 801499c:	429a      	cmp	r2, r3
 801499e:	d00c      	beq.n	80149ba <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80149a0:	697a      	ldr	r2, [r7, #20]
 80149a2:	f248 031d 	movw	r3, #32797	; 0x801d
 80149a6:	4413      	add	r3, r2
 80149a8:	7819      	ldrb	r1, [r3, #0]
 80149aa:	2320      	movs	r3, #32
 80149ac:	2205      	movs	r2, #5
 80149ae:	68f8      	ldr	r0, [r7, #12]
 80149b0:	f7ff fe8e 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 80149b4:	f04f 33ff 	mov.w	r3, #4294967295
 80149b8:	e00c      	b.n	80149d4 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80149ba:	697b      	ldr	r3, [r7, #20]
 80149bc:	2202      	movs	r2, #2
 80149be:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80149c0:	697b      	ldr	r3, [r7, #20]
 80149c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80149c6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80149c8:	7afb      	ldrb	r3, [r7, #11]
 80149ca:	4619      	mov	r1, r3
 80149cc:	68f8      	ldr	r0, [r7, #12]
 80149ce:	f000 fadd 	bl	8014f8c <SCSI_ProcessRead>
 80149d2:	4603      	mov	r3, r0
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	3718      	adds	r7, #24
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}

080149dc <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b086      	sub	sp, #24
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	60f8      	str	r0, [r7, #12]
 80149e4:	460b      	mov	r3, r1
 80149e6:	607a      	str	r2, [r7, #4]
 80149e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80149f0:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	7a1b      	ldrb	r3, [r3, #8]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	f040 809e 	bne.w	8014b38 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80149fc:	697a      	ldr	r2, [r7, #20]
 80149fe:	f248 031c 	movw	r3, #32796	; 0x801c
 8014a02:	4413      	add	r3, r2
 8014a04:	781b      	ldrb	r3, [r3, #0]
 8014a06:	b25b      	sxtb	r3, r3
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	db0c      	blt.n	8014a26 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014a0c:	697a      	ldr	r2, [r7, #20]
 8014a0e:	f248 031d 	movw	r3, #32797	; 0x801d
 8014a12:	4413      	add	r3, r2
 8014a14:	7819      	ldrb	r1, [r3, #0]
 8014a16:	2320      	movs	r3, #32
 8014a18:	2205      	movs	r2, #5
 8014a1a:	68f8      	ldr	r0, [r7, #12]
 8014a1c:	f7ff fe58 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 8014a20:	f04f 33ff 	mov.w	r3, #4294967295
 8014a24:	e092      	b.n	8014b4c <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014a26:	697a      	ldr	r2, [r7, #20]
 8014a28:	f248 0362 	movw	r3, #32866	; 0x8062
 8014a2c:	4413      	add	r3, r2
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	2b02      	cmp	r3, #2
 8014a32:	d108      	bne.n	8014a46 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014a34:	7af9      	ldrb	r1, [r7, #11]
 8014a36:	233a      	movs	r3, #58	; 0x3a
 8014a38:	2202      	movs	r2, #2
 8014a3a:	68f8      	ldr	r0, [r7, #12]
 8014a3c:	f7ff fe48 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 8014a40:	f04f 33ff 	mov.w	r3, #4294967295
 8014a44:	e082      	b.n	8014b4c <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a4c:	689b      	ldr	r3, [r3, #8]
 8014a4e:	7afa      	ldrb	r2, [r7, #11]
 8014a50:	4610      	mov	r0, r2
 8014a52:	4798      	blx	r3
 8014a54:	4603      	mov	r3, r0
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d008      	beq.n	8014a6c <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014a5a:	7af9      	ldrb	r1, [r7, #11]
 8014a5c:	233a      	movs	r3, #58	; 0x3a
 8014a5e:	2202      	movs	r2, #2
 8014a60:	68f8      	ldr	r0, [r7, #12]
 8014a62:	f7ff fe35 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 8014a66:	f04f 33ff 	mov.w	r3, #4294967295
 8014a6a:	e06f      	b.n	8014b4c <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	3302      	adds	r3, #2
 8014a70:	781b      	ldrb	r3, [r3, #0]
 8014a72:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	3303      	adds	r3, #3
 8014a78:	781b      	ldrb	r3, [r3, #0]
 8014a7a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a7c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	3304      	adds	r3, #4
 8014a82:	781b      	ldrb	r3, [r3, #0]
 8014a84:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014a86:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014a88:	687a      	ldr	r2, [r7, #4]
 8014a8a:	3205      	adds	r2, #5
 8014a8c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014a8e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a90:	6979      	ldr	r1, [r7, #20]
 8014a92:	f248 036c 	movw	r3, #32876	; 0x806c
 8014a96:	440b      	add	r3, r1
 8014a98:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	3306      	adds	r3, #6
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	3307      	adds	r3, #7
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014aaa:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	3308      	adds	r3, #8
 8014ab0:	781b      	ldrb	r3, [r3, #0]
 8014ab2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014ab4:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014ab6:	687a      	ldr	r2, [r7, #4]
 8014ab8:	3209      	adds	r2, #9
 8014aba:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014abc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014abe:	6979      	ldr	r1, [r7, #20]
 8014ac0:	f248 0370 	movw	r3, #32880	; 0x8070
 8014ac4:	440b      	add	r3, r1
 8014ac6:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014ac8:	697a      	ldr	r2, [r7, #20]
 8014aca:	f248 036c 	movw	r3, #32876	; 0x806c
 8014ace:	4413      	add	r3, r2
 8014ad0:	6818      	ldr	r0, [r3, #0]
 8014ad2:	697a      	ldr	r2, [r7, #20]
 8014ad4:	f248 0370 	movw	r3, #32880	; 0x8070
 8014ad8:	4413      	add	r3, r2
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	7af9      	ldrb	r1, [r7, #11]
 8014ade:	4602      	mov	r2, r0
 8014ae0:	68f8      	ldr	r0, [r7, #12]
 8014ae2:	f000 fa2f 	bl	8014f44 <SCSI_CheckAddressRange>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	da02      	bge.n	8014af2 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014aec:	f04f 33ff 	mov.w	r3, #4294967295
 8014af0:	e02c      	b.n	8014b4c <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014af2:	697a      	ldr	r2, [r7, #20]
 8014af4:	f248 0318 	movw	r3, #32792	; 0x8018
 8014af8:	4413      	add	r3, r2
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	6979      	ldr	r1, [r7, #20]
 8014afe:	f248 0370 	movw	r3, #32880	; 0x8070
 8014b02:	440b      	add	r3, r1
 8014b04:	6819      	ldr	r1, [r3, #0]
 8014b06:	6978      	ldr	r0, [r7, #20]
 8014b08:	f248 0364 	movw	r3, #32868	; 0x8064
 8014b0c:	4403      	add	r3, r0
 8014b0e:	881b      	ldrh	r3, [r3, #0]
 8014b10:	fb03 f301 	mul.w	r3, r3, r1
 8014b14:	429a      	cmp	r2, r3
 8014b16:	d00c      	beq.n	8014b32 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b18:	697a      	ldr	r2, [r7, #20]
 8014b1a:	f248 031d 	movw	r3, #32797	; 0x801d
 8014b1e:	4413      	add	r3, r2
 8014b20:	7819      	ldrb	r1, [r3, #0]
 8014b22:	2320      	movs	r3, #32
 8014b24:	2205      	movs	r2, #5
 8014b26:	68f8      	ldr	r0, [r7, #12]
 8014b28:	f7ff fdd2 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 8014b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b30:	e00c      	b.n	8014b4c <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	2202      	movs	r2, #2
 8014b36:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014b3e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014b40:	7afb      	ldrb	r3, [r7, #11]
 8014b42:	4619      	mov	r1, r3
 8014b44:	68f8      	ldr	r0, [r7, #12]
 8014b46:	f000 fa21 	bl	8014f8c <SCSI_ProcessRead>
 8014b4a:	4603      	mov	r3, r0
}
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	3718      	adds	r7, #24
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bd80      	pop	{r7, pc}

08014b54 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b086      	sub	sp, #24
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	60f8      	str	r0, [r7, #12]
 8014b5c:	460b      	mov	r3, r1
 8014b5e:	607a      	str	r2, [r7, #4]
 8014b60:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014b68:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	7a1b      	ldrb	r3, [r3, #8]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	f040 80be 	bne.w	8014cf0 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014b74:	697a      	ldr	r2, [r7, #20]
 8014b76:	f248 0318 	movw	r3, #32792	; 0x8018
 8014b7a:	4413      	add	r3, r2
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d10c      	bne.n	8014b9c <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b82:	697a      	ldr	r2, [r7, #20]
 8014b84:	f248 031d 	movw	r3, #32797	; 0x801d
 8014b88:	4413      	add	r3, r2
 8014b8a:	7819      	ldrb	r1, [r3, #0]
 8014b8c:	2320      	movs	r3, #32
 8014b8e:	2205      	movs	r2, #5
 8014b90:	68f8      	ldr	r0, [r7, #12]
 8014b92:	f7ff fd9d 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 8014b96:	f04f 33ff 	mov.w	r3, #4294967295
 8014b9a:	e0af      	b.n	8014cfc <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014b9c:	697a      	ldr	r2, [r7, #20]
 8014b9e:	f248 031c 	movw	r3, #32796	; 0x801c
 8014ba2:	4413      	add	r3, r2
 8014ba4:	781b      	ldrb	r3, [r3, #0]
 8014ba6:	b25b      	sxtb	r3, r3
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	da0c      	bge.n	8014bc6 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014bac:	697a      	ldr	r2, [r7, #20]
 8014bae:	f248 031d 	movw	r3, #32797	; 0x801d
 8014bb2:	4413      	add	r3, r2
 8014bb4:	7819      	ldrb	r1, [r3, #0]
 8014bb6:	2320      	movs	r3, #32
 8014bb8:	2205      	movs	r2, #5
 8014bba:	68f8      	ldr	r0, [r7, #12]
 8014bbc:	f7ff fd88 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 8014bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8014bc4:	e09a      	b.n	8014cfc <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014bcc:	689b      	ldr	r3, [r3, #8]
 8014bce:	7afa      	ldrb	r2, [r7, #11]
 8014bd0:	4610      	mov	r0, r2
 8014bd2:	4798      	blx	r3
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d008      	beq.n	8014bec <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014bda:	7af9      	ldrb	r1, [r7, #11]
 8014bdc:	233a      	movs	r3, #58	; 0x3a
 8014bde:	2202      	movs	r2, #2
 8014be0:	68f8      	ldr	r0, [r7, #12]
 8014be2:	f7ff fd75 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 8014be6:	f04f 33ff 	mov.w	r3, #4294967295
 8014bea:	e087      	b.n	8014cfc <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014bf2:	68db      	ldr	r3, [r3, #12]
 8014bf4:	7afa      	ldrb	r2, [r7, #11]
 8014bf6:	4610      	mov	r0, r2
 8014bf8:	4798      	blx	r3
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d008      	beq.n	8014c12 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014c00:	7af9      	ldrb	r1, [r7, #11]
 8014c02:	2327      	movs	r3, #39	; 0x27
 8014c04:	2202      	movs	r2, #2
 8014c06:	68f8      	ldr	r0, [r7, #12]
 8014c08:	f7ff fd62 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 8014c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c10:	e074      	b.n	8014cfc <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	3302      	adds	r3, #2
 8014c16:	781b      	ldrb	r3, [r3, #0]
 8014c18:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	3303      	adds	r3, #3
 8014c1e:	781b      	ldrb	r3, [r3, #0]
 8014c20:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c22:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	3304      	adds	r3, #4
 8014c28:	781b      	ldrb	r3, [r3, #0]
 8014c2a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014c2c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014c2e:	687a      	ldr	r2, [r7, #4]
 8014c30:	3205      	adds	r2, #5
 8014c32:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014c34:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c36:	6979      	ldr	r1, [r7, #20]
 8014c38:	f248 036c 	movw	r3, #32876	; 0x806c
 8014c3c:	440b      	add	r3, r1
 8014c3e:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	3307      	adds	r3, #7
 8014c44:	781b      	ldrb	r3, [r3, #0]
 8014c46:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8014c48:	687a      	ldr	r2, [r7, #4]
 8014c4a:	3208      	adds	r2, #8
 8014c4c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014c4e:	431a      	orrs	r2, r3
 8014c50:	6979      	ldr	r1, [r7, #20]
 8014c52:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c56:	440b      	add	r3, r1
 8014c58:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014c5a:	697a      	ldr	r2, [r7, #20]
 8014c5c:	f248 036c 	movw	r3, #32876	; 0x806c
 8014c60:	4413      	add	r3, r2
 8014c62:	6818      	ldr	r0, [r3, #0]
 8014c64:	697a      	ldr	r2, [r7, #20]
 8014c66:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c6a:	4413      	add	r3, r2
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	7af9      	ldrb	r1, [r7, #11]
 8014c70:	4602      	mov	r2, r0
 8014c72:	68f8      	ldr	r0, [r7, #12]
 8014c74:	f000 f966 	bl	8014f44 <SCSI_CheckAddressRange>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	da02      	bge.n	8014c84 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c82:	e03b      	b.n	8014cfc <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014c84:	697a      	ldr	r2, [r7, #20]
 8014c86:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c8a:	4413      	add	r3, r2
 8014c8c:	681a      	ldr	r2, [r3, #0]
 8014c8e:	6979      	ldr	r1, [r7, #20]
 8014c90:	f248 0364 	movw	r3, #32868	; 0x8064
 8014c94:	440b      	add	r3, r1
 8014c96:	881b      	ldrh	r3, [r3, #0]
 8014c98:	fb03 f302 	mul.w	r3, r3, r2
 8014c9c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014c9e:	697a      	ldr	r2, [r7, #20]
 8014ca0:	f248 0318 	movw	r3, #32792	; 0x8018
 8014ca4:	4413      	add	r3, r2
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	693a      	ldr	r2, [r7, #16]
 8014caa:	429a      	cmp	r2, r3
 8014cac:	d00c      	beq.n	8014cc8 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014cae:	697a      	ldr	r2, [r7, #20]
 8014cb0:	f248 031d 	movw	r3, #32797	; 0x801d
 8014cb4:	4413      	add	r3, r2
 8014cb6:	7819      	ldrb	r1, [r3, #0]
 8014cb8:	2320      	movs	r3, #32
 8014cba:	2205      	movs	r2, #5
 8014cbc:	68f8      	ldr	r0, [r7, #12]
 8014cbe:	f7ff fd07 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 8014cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8014cc6:	e019      	b.n	8014cfc <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014cc8:	693b      	ldr	r3, [r7, #16]
 8014cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014cce:	bf28      	it	cs
 8014cd0:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014cd4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	2201      	movs	r2, #1
 8014cda:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014cdc:	697b      	ldr	r3, [r7, #20]
 8014cde:	f103 0210 	add.w	r2, r3, #16
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	2101      	movs	r1, #1
 8014ce6:	68f8      	ldr	r0, [r7, #12]
 8014ce8:	f004 fb19 	bl	801931e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014cec:	2300      	movs	r3, #0
 8014cee:	e005      	b.n	8014cfc <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8014cf0:	7afb      	ldrb	r3, [r7, #11]
 8014cf2:	4619      	mov	r1, r3
 8014cf4:	68f8      	ldr	r0, [r7, #12]
 8014cf6:	f000 f9d7 	bl	80150a8 <SCSI_ProcessWrite>
 8014cfa:	4603      	mov	r3, r0
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3718      	adds	r7, #24
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}

08014d04 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b086      	sub	sp, #24
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	60f8      	str	r0, [r7, #12]
 8014d0c:	460b      	mov	r3, r1
 8014d0e:	607a      	str	r2, [r7, #4]
 8014d10:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d18:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014d1a:	697b      	ldr	r3, [r7, #20]
 8014d1c:	7a1b      	ldrb	r3, [r3, #8]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	f040 80ce 	bne.w	8014ec0 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014d24:	697a      	ldr	r2, [r7, #20]
 8014d26:	f248 0318 	movw	r3, #32792	; 0x8018
 8014d2a:	4413      	add	r3, r2
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d10c      	bne.n	8014d4c <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d32:	697a      	ldr	r2, [r7, #20]
 8014d34:	f248 031d 	movw	r3, #32797	; 0x801d
 8014d38:	4413      	add	r3, r2
 8014d3a:	7819      	ldrb	r1, [r3, #0]
 8014d3c:	2320      	movs	r3, #32
 8014d3e:	2205      	movs	r2, #5
 8014d40:	68f8      	ldr	r0, [r7, #12]
 8014d42:	f7ff fcc5 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 8014d46:	f04f 33ff 	mov.w	r3, #4294967295
 8014d4a:	e0bf      	b.n	8014ecc <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014d4c:	697a      	ldr	r2, [r7, #20]
 8014d4e:	f248 031c 	movw	r3, #32796	; 0x801c
 8014d52:	4413      	add	r3, r2
 8014d54:	781b      	ldrb	r3, [r3, #0]
 8014d56:	b25b      	sxtb	r3, r3
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	da0c      	bge.n	8014d76 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d5c:	697a      	ldr	r2, [r7, #20]
 8014d5e:	f248 031d 	movw	r3, #32797	; 0x801d
 8014d62:	4413      	add	r3, r2
 8014d64:	7819      	ldrb	r1, [r3, #0]
 8014d66:	2320      	movs	r3, #32
 8014d68:	2205      	movs	r2, #5
 8014d6a:	68f8      	ldr	r0, [r7, #12]
 8014d6c:	f7ff fcb0 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 8014d70:	f04f 33ff 	mov.w	r3, #4294967295
 8014d74:	e0aa      	b.n	8014ecc <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014d7c:	689b      	ldr	r3, [r3, #8]
 8014d7e:	7afa      	ldrb	r2, [r7, #11]
 8014d80:	4610      	mov	r0, r2
 8014d82:	4798      	blx	r3
 8014d84:	4603      	mov	r3, r0
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d00b      	beq.n	8014da2 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014d8a:	7af9      	ldrb	r1, [r7, #11]
 8014d8c:	233a      	movs	r3, #58	; 0x3a
 8014d8e:	2202      	movs	r2, #2
 8014d90:	68f8      	ldr	r0, [r7, #12]
 8014d92:	f7ff fc9d 	bl	80146d0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	2205      	movs	r2, #5
 8014d9a:	721a      	strb	r2, [r3, #8]
      return -1;
 8014d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8014da0:	e094      	b.n	8014ecc <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014da8:	68db      	ldr	r3, [r3, #12]
 8014daa:	7afa      	ldrb	r2, [r7, #11]
 8014dac:	4610      	mov	r0, r2
 8014dae:	4798      	blx	r3
 8014db0:	4603      	mov	r3, r0
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d00b      	beq.n	8014dce <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014db6:	7af9      	ldrb	r1, [r7, #11]
 8014db8:	2327      	movs	r3, #39	; 0x27
 8014dba:	2202      	movs	r2, #2
 8014dbc:	68f8      	ldr	r0, [r7, #12]
 8014dbe:	f7ff fc87 	bl	80146d0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	2205      	movs	r2, #5
 8014dc6:	721a      	strb	r2, [r3, #8]
      return -1;
 8014dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8014dcc:	e07e      	b.n	8014ecc <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	3302      	adds	r3, #2
 8014dd2:	781b      	ldrb	r3, [r3, #0]
 8014dd4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	3303      	adds	r3, #3
 8014dda:	781b      	ldrb	r3, [r3, #0]
 8014ddc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014dde:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	3304      	adds	r3, #4
 8014de4:	781b      	ldrb	r3, [r3, #0]
 8014de6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014de8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014dea:	687a      	ldr	r2, [r7, #4]
 8014dec:	3205      	adds	r2, #5
 8014dee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014df0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014df2:	6979      	ldr	r1, [r7, #20]
 8014df4:	f248 036c 	movw	r3, #32876	; 0x806c
 8014df8:	440b      	add	r3, r1
 8014dfa:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	3306      	adds	r3, #6
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	3307      	adds	r3, #7
 8014e08:	781b      	ldrb	r3, [r3, #0]
 8014e0a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014e0c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	3308      	adds	r3, #8
 8014e12:	781b      	ldrb	r3, [r3, #0]
 8014e14:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014e16:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014e18:	687a      	ldr	r2, [r7, #4]
 8014e1a:	3209      	adds	r2, #9
 8014e1c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014e1e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014e20:	6979      	ldr	r1, [r7, #20]
 8014e22:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e26:	440b      	add	r3, r1
 8014e28:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014e2a:	697a      	ldr	r2, [r7, #20]
 8014e2c:	f248 036c 	movw	r3, #32876	; 0x806c
 8014e30:	4413      	add	r3, r2
 8014e32:	6818      	ldr	r0, [r3, #0]
 8014e34:	697a      	ldr	r2, [r7, #20]
 8014e36:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e3a:	4413      	add	r3, r2
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	7af9      	ldrb	r1, [r7, #11]
 8014e40:	4602      	mov	r2, r0
 8014e42:	68f8      	ldr	r0, [r7, #12]
 8014e44:	f000 f87e 	bl	8014f44 <SCSI_CheckAddressRange>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	da02      	bge.n	8014e54 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e52:	e03b      	b.n	8014ecc <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014e54:	697a      	ldr	r2, [r7, #20]
 8014e56:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e5a:	4413      	add	r3, r2
 8014e5c:	681a      	ldr	r2, [r3, #0]
 8014e5e:	6979      	ldr	r1, [r7, #20]
 8014e60:	f248 0364 	movw	r3, #32868	; 0x8064
 8014e64:	440b      	add	r3, r1
 8014e66:	881b      	ldrh	r3, [r3, #0]
 8014e68:	fb03 f302 	mul.w	r3, r3, r2
 8014e6c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014e6e:	697a      	ldr	r2, [r7, #20]
 8014e70:	f248 0318 	movw	r3, #32792	; 0x8018
 8014e74:	4413      	add	r3, r2
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	693a      	ldr	r2, [r7, #16]
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d00c      	beq.n	8014e98 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014e7e:	697a      	ldr	r2, [r7, #20]
 8014e80:	f248 031d 	movw	r3, #32797	; 0x801d
 8014e84:	4413      	add	r3, r2
 8014e86:	7819      	ldrb	r1, [r3, #0]
 8014e88:	2320      	movs	r3, #32
 8014e8a:	2205      	movs	r2, #5
 8014e8c:	68f8      	ldr	r0, [r7, #12]
 8014e8e:	f7ff fc1f 	bl	80146d0 <SCSI_SenseCode>
      return -1;
 8014e92:	f04f 33ff 	mov.w	r3, #4294967295
 8014e96:	e019      	b.n	8014ecc <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014e9e:	bf28      	it	cs
 8014ea0:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014ea4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014ea6:	697b      	ldr	r3, [r7, #20]
 8014ea8:	2201      	movs	r2, #1
 8014eaa:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	f103 0210 	add.w	r2, r3, #16
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	2101      	movs	r1, #1
 8014eb6:	68f8      	ldr	r0, [r7, #12]
 8014eb8:	f004 fa31 	bl	801931e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	e005      	b.n	8014ecc <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8014ec0:	7afb      	ldrb	r3, [r7, #11]
 8014ec2:	4619      	mov	r1, r3
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f000 f8ef 	bl	80150a8 <SCSI_ProcessWrite>
 8014eca:	4603      	mov	r3, r0
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3718      	adds	r7, #24
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b086      	sub	sp, #24
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	60f8      	str	r0, [r7, #12]
 8014edc:	460b      	mov	r3, r1
 8014ede:	607a      	str	r2, [r7, #4]
 8014ee0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ee8:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	3301      	adds	r3, #1
 8014eee:	781b      	ldrb	r3, [r3, #0]
 8014ef0:	f003 0302 	and.w	r3, r3, #2
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d008      	beq.n	8014f0a <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014ef8:	7af9      	ldrb	r1, [r7, #11]
 8014efa:	2324      	movs	r3, #36	; 0x24
 8014efc:	2205      	movs	r2, #5
 8014efe:	68f8      	ldr	r0, [r7, #12]
 8014f00:	f7ff fbe6 	bl	80146d0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8014f04:	f04f 33ff 	mov.w	r3, #4294967295
 8014f08:	e018      	b.n	8014f3c <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8014f0a:	697a      	ldr	r2, [r7, #20]
 8014f0c:	f248 036c 	movw	r3, #32876	; 0x806c
 8014f10:	4413      	add	r3, r2
 8014f12:	6818      	ldr	r0, [r3, #0]
 8014f14:	697a      	ldr	r2, [r7, #20]
 8014f16:	f248 0370 	movw	r3, #32880	; 0x8070
 8014f1a:	4413      	add	r3, r2
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	7af9      	ldrb	r1, [r7, #11]
 8014f20:	4602      	mov	r2, r0
 8014f22:	68f8      	ldr	r0, [r7, #12]
 8014f24:	f000 f80e 	bl	8014f44 <SCSI_CheckAddressRange>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	da02      	bge.n	8014f34 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8014f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8014f32:	e003      	b.n	8014f3c <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8014f34:	697b      	ldr	r3, [r7, #20]
 8014f36:	2200      	movs	r2, #0
 8014f38:	60da      	str	r2, [r3, #12]

  return 0;
 8014f3a:	2300      	movs	r3, #0
}
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	3718      	adds	r7, #24
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bd80      	pop	{r7, pc}

08014f44 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b086      	sub	sp, #24
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	60f8      	str	r0, [r7, #12]
 8014f4c:	607a      	str	r2, [r7, #4]
 8014f4e:	603b      	str	r3, [r7, #0]
 8014f50:	460b      	mov	r3, r1
 8014f52:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f5a:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8014f5c:	687a      	ldr	r2, [r7, #4]
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	441a      	add	r2, r3
 8014f62:	6979      	ldr	r1, [r7, #20]
 8014f64:	f248 0368 	movw	r3, #32872	; 0x8068
 8014f68:	440b      	add	r3, r1
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	d908      	bls.n	8014f82 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8014f70:	7af9      	ldrb	r1, [r7, #11]
 8014f72:	2321      	movs	r3, #33	; 0x21
 8014f74:	2205      	movs	r2, #5
 8014f76:	68f8      	ldr	r0, [r7, #12]
 8014f78:	f7ff fbaa 	bl	80146d0 <SCSI_SenseCode>
    return -1;
 8014f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f80:	e000      	b.n	8014f84 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8014f82:	2300      	movs	r3, #0
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	3718      	adds	r7, #24
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}

08014f8c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8014f8c:	b5b0      	push	{r4, r5, r7, lr}
 8014f8e:	b084      	sub	sp, #16
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
 8014f94:	460b      	mov	r3, r1
 8014f96:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f9e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014fa0:	68fa      	ldr	r2, [r7, #12]
 8014fa2:	f248 0370 	movw	r3, #32880	; 0x8070
 8014fa6:	4413      	add	r3, r2
 8014fa8:	681a      	ldr	r2, [r3, #0]
 8014faa:	68f9      	ldr	r1, [r7, #12]
 8014fac:	f248 0364 	movw	r3, #32868	; 0x8064
 8014fb0:	440b      	add	r3, r1
 8014fb2:	881b      	ldrh	r3, [r3, #0]
 8014fb4:	fb03 f302 	mul.w	r3, r3, r2
 8014fb8:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8014fba:	68bb      	ldr	r3, [r7, #8]
 8014fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014fc0:	bf28      	it	cs
 8014fc2:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014fc6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014fce:	691c      	ldr	r4, [r3, #16]
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	f103 0110 	add.w	r1, r3, #16
 8014fd6:	68fa      	ldr	r2, [r7, #12]
 8014fd8:	f248 036c 	movw	r3, #32876	; 0x806c
 8014fdc:	4413      	add	r3, r2
 8014fde:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8014fe0:	68fa      	ldr	r2, [r7, #12]
 8014fe2:	f248 0364 	movw	r3, #32868	; 0x8064
 8014fe6:	4413      	add	r3, r2
 8014fe8:	881b      	ldrh	r3, [r3, #0]
 8014fea:	461a      	mov	r2, r3
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	78f8      	ldrb	r0, [r7, #3]
 8014ff6:	462a      	mov	r2, r5
 8014ff8:	47a0      	blx	r4
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	da08      	bge.n	8015012 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8015000:	78f9      	ldrb	r1, [r7, #3]
 8015002:	2311      	movs	r3, #17
 8015004:	2204      	movs	r2, #4
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f7ff fb62 	bl	80146d0 <SCSI_SenseCode>
    return -1;
 801500c:	f04f 33ff 	mov.w	r3, #4294967295
 8015010:	e046      	b.n	80150a0 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	f103 0210 	add.w	r2, r3, #16
 8015018:	68bb      	ldr	r3, [r7, #8]
 801501a:	2181      	movs	r1, #129	; 0x81
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f004 f95d 	bl	80192dc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015022:	68fa      	ldr	r2, [r7, #12]
 8015024:	f248 036c 	movw	r3, #32876	; 0x806c
 8015028:	4413      	add	r3, r2
 801502a:	681a      	ldr	r2, [r3, #0]
 801502c:	68f9      	ldr	r1, [r7, #12]
 801502e:	f248 0364 	movw	r3, #32868	; 0x8064
 8015032:	440b      	add	r3, r1
 8015034:	881b      	ldrh	r3, [r3, #0]
 8015036:	4619      	mov	r1, r3
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	fbb3 f3f1 	udiv	r3, r3, r1
 801503e:	441a      	add	r2, r3
 8015040:	68f9      	ldr	r1, [r7, #12]
 8015042:	f248 036c 	movw	r3, #32876	; 0x806c
 8015046:	440b      	add	r3, r1
 8015048:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801504a:	68fa      	ldr	r2, [r7, #12]
 801504c:	f248 0370 	movw	r3, #32880	; 0x8070
 8015050:	4413      	add	r3, r2
 8015052:	681a      	ldr	r2, [r3, #0]
 8015054:	68f9      	ldr	r1, [r7, #12]
 8015056:	f248 0364 	movw	r3, #32868	; 0x8064
 801505a:	440b      	add	r3, r1
 801505c:	881b      	ldrh	r3, [r3, #0]
 801505e:	4619      	mov	r1, r3
 8015060:	68bb      	ldr	r3, [r7, #8]
 8015062:	fbb3 f3f1 	udiv	r3, r3, r1
 8015066:	1ad2      	subs	r2, r2, r3
 8015068:	68f9      	ldr	r1, [r7, #12]
 801506a:	f248 0370 	movw	r3, #32880	; 0x8070
 801506e:	440b      	add	r3, r1
 8015070:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8015072:	68fa      	ldr	r2, [r7, #12]
 8015074:	f248 0338 	movw	r3, #32824	; 0x8038
 8015078:	4413      	add	r3, r2
 801507a:	681a      	ldr	r2, [r3, #0]
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	1ad2      	subs	r2, r2, r3
 8015080:	68f9      	ldr	r1, [r7, #12]
 8015082:	f248 0338 	movw	r3, #32824	; 0x8038
 8015086:	440b      	add	r3, r1
 8015088:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 801508a:	68fa      	ldr	r2, [r7, #12]
 801508c:	f248 0370 	movw	r3, #32880	; 0x8070
 8015090:	4413      	add	r3, r2
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d102      	bne.n	801509e <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2203      	movs	r2, #3
 801509c:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801509e:	2300      	movs	r3, #0
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	3710      	adds	r7, #16
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bdb0      	pop	{r4, r5, r7, pc}

080150a8 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80150a8:	b5b0      	push	{r4, r5, r7, lr}
 80150aa:	b084      	sub	sp, #16
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
 80150b0:	460b      	mov	r3, r1
 80150b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80150ba:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80150bc:	68fa      	ldr	r2, [r7, #12]
 80150be:	f248 0370 	movw	r3, #32880	; 0x8070
 80150c2:	4413      	add	r3, r2
 80150c4:	681a      	ldr	r2, [r3, #0]
 80150c6:	68f9      	ldr	r1, [r7, #12]
 80150c8:	f248 0364 	movw	r3, #32868	; 0x8064
 80150cc:	440b      	add	r3, r1
 80150ce:	881b      	ldrh	r3, [r3, #0]
 80150d0:	fb03 f302 	mul.w	r3, r3, r2
 80150d4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80150dc:	bf28      	it	cs
 80150de:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80150e2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80150ea:	695c      	ldr	r4, [r3, #20]
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	f103 0110 	add.w	r1, r3, #16
 80150f2:	68fa      	ldr	r2, [r7, #12]
 80150f4:	f248 036c 	movw	r3, #32876	; 0x806c
 80150f8:	4413      	add	r3, r2
 80150fa:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80150fc:	68fa      	ldr	r2, [r7, #12]
 80150fe:	f248 0364 	movw	r3, #32868	; 0x8064
 8015102:	4413      	add	r3, r2
 8015104:	881b      	ldrh	r3, [r3, #0]
 8015106:	461a      	mov	r2, r3
 8015108:	68bb      	ldr	r3, [r7, #8]
 801510a:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801510e:	b29b      	uxth	r3, r3
 8015110:	78f8      	ldrb	r0, [r7, #3]
 8015112:	462a      	mov	r2, r5
 8015114:	47a0      	blx	r4
 8015116:	4603      	mov	r3, r0
 8015118:	2b00      	cmp	r3, #0
 801511a:	da08      	bge.n	801512e <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801511c:	78f9      	ldrb	r1, [r7, #3]
 801511e:	2303      	movs	r3, #3
 8015120:	2204      	movs	r2, #4
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f7ff fad4 	bl	80146d0 <SCSI_SenseCode>
    return -1;
 8015128:	f04f 33ff 	mov.w	r3, #4294967295
 801512c:	e05a      	b.n	80151e4 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801512e:	68fa      	ldr	r2, [r7, #12]
 8015130:	f248 036c 	movw	r3, #32876	; 0x806c
 8015134:	4413      	add	r3, r2
 8015136:	681a      	ldr	r2, [r3, #0]
 8015138:	68f9      	ldr	r1, [r7, #12]
 801513a:	f248 0364 	movw	r3, #32868	; 0x8064
 801513e:	440b      	add	r3, r1
 8015140:	881b      	ldrh	r3, [r3, #0]
 8015142:	4619      	mov	r1, r3
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	fbb3 f3f1 	udiv	r3, r3, r1
 801514a:	441a      	add	r2, r3
 801514c:	68f9      	ldr	r1, [r7, #12]
 801514e:	f248 036c 	movw	r3, #32876	; 0x806c
 8015152:	440b      	add	r3, r1
 8015154:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015156:	68fa      	ldr	r2, [r7, #12]
 8015158:	f248 0370 	movw	r3, #32880	; 0x8070
 801515c:	4413      	add	r3, r2
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	68f9      	ldr	r1, [r7, #12]
 8015162:	f248 0364 	movw	r3, #32868	; 0x8064
 8015166:	440b      	add	r3, r1
 8015168:	881b      	ldrh	r3, [r3, #0]
 801516a:	4619      	mov	r1, r3
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015172:	1ad2      	subs	r2, r2, r3
 8015174:	68f9      	ldr	r1, [r7, #12]
 8015176:	f248 0370 	movw	r3, #32880	; 0x8070
 801517a:	440b      	add	r3, r1
 801517c:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801517e:	68fa      	ldr	r2, [r7, #12]
 8015180:	f248 0338 	movw	r3, #32824	; 0x8038
 8015184:	4413      	add	r3, r2
 8015186:	681a      	ldr	r2, [r3, #0]
 8015188:	68bb      	ldr	r3, [r7, #8]
 801518a:	1ad2      	subs	r2, r2, r3
 801518c:	68f9      	ldr	r1, [r7, #12]
 801518e:	f248 0338 	movw	r3, #32824	; 0x8038
 8015192:	440b      	add	r3, r1
 8015194:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8015196:	68fa      	ldr	r2, [r7, #12]
 8015198:	f248 0370 	movw	r3, #32880	; 0x8070
 801519c:	4413      	add	r3, r2
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d104      	bne.n	80151ae <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80151a4:	2100      	movs	r1, #0
 80151a6:	6878      	ldr	r0, [r7, #4]
 80151a8:	f7fe fde2 	bl	8013d70 <MSC_BOT_SendCSW>
 80151ac:	e019      	b.n	80151e2 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80151ae:	68fa      	ldr	r2, [r7, #12]
 80151b0:	f248 0370 	movw	r3, #32880	; 0x8070
 80151b4:	4413      	add	r3, r2
 80151b6:	681a      	ldr	r2, [r3, #0]
 80151b8:	68f9      	ldr	r1, [r7, #12]
 80151ba:	f248 0364 	movw	r3, #32868	; 0x8064
 80151be:	440b      	add	r3, r1
 80151c0:	881b      	ldrh	r3, [r3, #0]
 80151c2:	fb03 f302 	mul.w	r3, r3, r2
 80151c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80151ca:	bf28      	it	cs
 80151cc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80151d0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	f103 0210 	add.w	r2, r3, #16
 80151d8:	68bb      	ldr	r3, [r7, #8]
 80151da:	2101      	movs	r1, #1
 80151dc:	6878      	ldr	r0, [r7, #4]
 80151de:	f004 f89e 	bl	801931e <USBD_LL_PrepareReceive>
  }

  return 0;
 80151e2:	2300      	movs	r3, #0
}
 80151e4:	4618      	mov	r0, r3
 80151e6:	3710      	adds	r7, #16
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bdb0      	pop	{r4, r5, r7, pc}

080151ec <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80151ec:	b480      	push	{r7}
 80151ee:	b087      	sub	sp, #28
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	60f8      	str	r0, [r7, #12]
 80151f4:	60b9      	str	r1, [r7, #8]
 80151f6:	4613      	mov	r3, r2
 80151f8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80151fa:	88fb      	ldrh	r3, [r7, #6]
 80151fc:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 80151fe:	8afa      	ldrh	r2, [r7, #22]
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8015204:	e00b      	b.n	801521e <SCSI_UpdateBotData+0x32>
  {
    len--;
 8015206:	8afb      	ldrh	r3, [r7, #22]
 8015208:	3b01      	subs	r3, #1
 801520a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801520c:	8afb      	ldrh	r3, [r7, #22]
 801520e:	68ba      	ldr	r2, [r7, #8]
 8015210:	441a      	add	r2, r3
 8015212:	8afb      	ldrh	r3, [r7, #22]
 8015214:	7811      	ldrb	r1, [r2, #0]
 8015216:	68fa      	ldr	r2, [r7, #12]
 8015218:	4413      	add	r3, r2
 801521a:	460a      	mov	r2, r1
 801521c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801521e:	8afb      	ldrh	r3, [r7, #22]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d1f0      	bne.n	8015206 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8015224:	2300      	movs	r3, #0
}
 8015226:	4618      	mov	r0, r3
 8015228:	371c      	adds	r7, #28
 801522a:	46bd      	mov	sp, r7
 801522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015230:	4770      	bx	lr

08015232 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015232:	b580      	push	{r7, lr}
 8015234:	b086      	sub	sp, #24
 8015236:	af00      	add	r7, sp, #0
 8015238:	60f8      	str	r0, [r7, #12]
 801523a:	60b9      	str	r1, [r7, #8]
 801523c:	4613      	mov	r3, r2
 801523e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d101      	bne.n	801524a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015246:	2303      	movs	r3, #3
 8015248:	e025      	b.n	8015296 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015250:	2b00      	cmp	r3, #0
 8015252:	d003      	beq.n	801525c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	2200      	movs	r2, #0
 8015258:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8015262:	2b00      	cmp	r3, #0
 8015264:	d003      	beq.n	801526e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	2200      	movs	r2, #0
 801526a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d003      	beq.n	801527c <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	68ba      	ldr	r2, [r7, #8]
 8015278:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	2201      	movs	r2, #1
 8015280:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	79fa      	ldrb	r2, [r7, #7]
 8015288:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801528a:	68f8      	ldr	r0, [r7, #12]
 801528c:	f003 fece 	bl	801902c <USBD_LL_Init>
 8015290:	4603      	mov	r3, r0
 8015292:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015294:	7dfb      	ldrb	r3, [r7, #23]
}
 8015296:	4618      	mov	r0, r3
 8015298:	3718      	adds	r7, #24
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}

0801529e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801529e:	b580      	push	{r7, lr}
 80152a0:	b084      	sub	sp, #16
 80152a2:	af00      	add	r7, sp, #0
 80152a4:	6078      	str	r0, [r7, #4]
 80152a6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80152a8:	2300      	movs	r3, #0
 80152aa:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d101      	bne.n	80152b6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80152b2:	2303      	movs	r3, #3
 80152b4:	e010      	b.n	80152d8 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	683a      	ldr	r2, [r7, #0]
 80152ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152c6:	f107 020e 	add.w	r2, r7, #14
 80152ca:	4610      	mov	r0, r2
 80152cc:	4798      	blx	r3
 80152ce:	4602      	mov	r2, r0
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80152d6:	2300      	movs	r3, #0
}
 80152d8:	4618      	mov	r0, r3
 80152da:	3710      	adds	r7, #16
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}

080152e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b082      	sub	sp, #8
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f003 feef 	bl	80190cc <USBD_LL_Start>
 80152ee:	4603      	mov	r3, r0
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3708      	adds	r7, #8
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}

080152f8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80152f8:	b480      	push	{r7}
 80152fa:	b083      	sub	sp, #12
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015300:	2300      	movs	r3, #0
}
 8015302:	4618      	mov	r0, r3
 8015304:	370c      	adds	r7, #12
 8015306:	46bd      	mov	sp, r7
 8015308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530c:	4770      	bx	lr

0801530e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801530e:	b580      	push	{r7, lr}
 8015310:	b084      	sub	sp, #16
 8015312:	af00      	add	r7, sp, #0
 8015314:	6078      	str	r0, [r7, #4]
 8015316:	460b      	mov	r3, r1
 8015318:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801531a:	2303      	movs	r3, #3
 801531c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015324:	2b00      	cmp	r3, #0
 8015326:	d009      	beq.n	801533c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	78fa      	ldrb	r2, [r7, #3]
 8015332:	4611      	mov	r1, r2
 8015334:	6878      	ldr	r0, [r7, #4]
 8015336:	4798      	blx	r3
 8015338:	4603      	mov	r3, r0
 801533a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801533c:	7bfb      	ldrb	r3, [r7, #15]
}
 801533e:	4618      	mov	r0, r3
 8015340:	3710      	adds	r7, #16
 8015342:	46bd      	mov	sp, r7
 8015344:	bd80      	pop	{r7, pc}

08015346 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015346:	b580      	push	{r7, lr}
 8015348:	b082      	sub	sp, #8
 801534a:	af00      	add	r7, sp, #0
 801534c:	6078      	str	r0, [r7, #4]
 801534e:	460b      	mov	r3, r1
 8015350:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015358:	2b00      	cmp	r3, #0
 801535a:	d007      	beq.n	801536c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015362:	685b      	ldr	r3, [r3, #4]
 8015364:	78fa      	ldrb	r2, [r7, #3]
 8015366:	4611      	mov	r1, r2
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	4798      	blx	r3
  }

  return USBD_OK;
 801536c:	2300      	movs	r3, #0
}
 801536e:	4618      	mov	r0, r3
 8015370:	3708      	adds	r7, #8
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}

08015376 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015376:	b580      	push	{r7, lr}
 8015378:	b084      	sub	sp, #16
 801537a:	af00      	add	r7, sp, #0
 801537c:	6078      	str	r0, [r7, #4]
 801537e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015386:	6839      	ldr	r1, [r7, #0]
 8015388:	4618      	mov	r0, r3
 801538a:	f000 ff2b 	bl	80161e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	2201      	movs	r2, #1
 8015392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801539c:	461a      	mov	r2, r3
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80153aa:	f003 031f 	and.w	r3, r3, #31
 80153ae:	2b01      	cmp	r3, #1
 80153b0:	d00e      	beq.n	80153d0 <USBD_LL_SetupStage+0x5a>
 80153b2:	2b01      	cmp	r3, #1
 80153b4:	d302      	bcc.n	80153bc <USBD_LL_SetupStage+0x46>
 80153b6:	2b02      	cmp	r3, #2
 80153b8:	d014      	beq.n	80153e4 <USBD_LL_SetupStage+0x6e>
 80153ba:	e01d      	b.n	80153f8 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153c2:	4619      	mov	r1, r3
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f000 fa17 	bl	80157f8 <USBD_StdDevReq>
 80153ca:	4603      	mov	r3, r0
 80153cc:	73fb      	strb	r3, [r7, #15]
      break;
 80153ce:	e020      	b.n	8015412 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153d6:	4619      	mov	r1, r3
 80153d8:	6878      	ldr	r0, [r7, #4]
 80153da:	f000 fa7b 	bl	80158d4 <USBD_StdItfReq>
 80153de:	4603      	mov	r3, r0
 80153e0:	73fb      	strb	r3, [r7, #15]
      break;
 80153e2:	e016      	b.n	8015412 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153ea:	4619      	mov	r1, r3
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f000 fab7 	bl	8015960 <USBD_StdEPReq>
 80153f2:	4603      	mov	r3, r0
 80153f4:	73fb      	strb	r3, [r7, #15]
      break;
 80153f6:	e00c      	b.n	8015412 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80153fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015402:	b2db      	uxtb	r3, r3
 8015404:	4619      	mov	r1, r3
 8015406:	6878      	ldr	r0, [r7, #4]
 8015408:	f003 fedf 	bl	80191ca <USBD_LL_StallEP>
 801540c:	4603      	mov	r3, r0
 801540e:	73fb      	strb	r3, [r7, #15]
      break;
 8015410:	bf00      	nop
  }

  return ret;
 8015412:	7bfb      	ldrb	r3, [r7, #15]
}
 8015414:	4618      	mov	r0, r3
 8015416:	3710      	adds	r7, #16
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}

0801541c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b086      	sub	sp, #24
 8015420:	af00      	add	r7, sp, #0
 8015422:	60f8      	str	r0, [r7, #12]
 8015424:	460b      	mov	r3, r1
 8015426:	607a      	str	r2, [r7, #4]
 8015428:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801542a:	7afb      	ldrb	r3, [r7, #11]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d137      	bne.n	80154a0 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015436:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801543e:	2b03      	cmp	r3, #3
 8015440:	d14a      	bne.n	80154d8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8015442:	693b      	ldr	r3, [r7, #16]
 8015444:	689a      	ldr	r2, [r3, #8]
 8015446:	693b      	ldr	r3, [r7, #16]
 8015448:	68db      	ldr	r3, [r3, #12]
 801544a:	429a      	cmp	r2, r3
 801544c:	d913      	bls.n	8015476 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801544e:	693b      	ldr	r3, [r7, #16]
 8015450:	689a      	ldr	r2, [r3, #8]
 8015452:	693b      	ldr	r3, [r7, #16]
 8015454:	68db      	ldr	r3, [r3, #12]
 8015456:	1ad2      	subs	r2, r2, r3
 8015458:	693b      	ldr	r3, [r7, #16]
 801545a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801545c:	693b      	ldr	r3, [r7, #16]
 801545e:	68da      	ldr	r2, [r3, #12]
 8015460:	693b      	ldr	r3, [r7, #16]
 8015462:	689b      	ldr	r3, [r3, #8]
 8015464:	4293      	cmp	r3, r2
 8015466:	bf28      	it	cs
 8015468:	4613      	movcs	r3, r2
 801546a:	461a      	mov	r2, r3
 801546c:	6879      	ldr	r1, [r7, #4]
 801546e:	68f8      	ldr	r0, [r7, #12]
 8015470:	f000 ff8f 	bl	8016392 <USBD_CtlContinueRx>
 8015474:	e030      	b.n	80154d8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801547c:	691b      	ldr	r3, [r3, #16]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d00a      	beq.n	8015498 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015488:	2b03      	cmp	r3, #3
 801548a:	d105      	bne.n	8015498 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015492:	691b      	ldr	r3, [r3, #16]
 8015494:	68f8      	ldr	r0, [r7, #12]
 8015496:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8015498:	68f8      	ldr	r0, [r7, #12]
 801549a:	f000 ff8b 	bl	80163b4 <USBD_CtlSendStatus>
 801549e:	e01b      	b.n	80154d8 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154a6:	699b      	ldr	r3, [r3, #24]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d013      	beq.n	80154d4 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80154b2:	2b03      	cmp	r3, #3
 80154b4:	d10e      	bne.n	80154d4 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154bc:	699b      	ldr	r3, [r3, #24]
 80154be:	7afa      	ldrb	r2, [r7, #11]
 80154c0:	4611      	mov	r1, r2
 80154c2:	68f8      	ldr	r0, [r7, #12]
 80154c4:	4798      	blx	r3
 80154c6:	4603      	mov	r3, r0
 80154c8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80154ca:	7dfb      	ldrb	r3, [r7, #23]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d003      	beq.n	80154d8 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80154d0:	7dfb      	ldrb	r3, [r7, #23]
 80154d2:	e002      	b.n	80154da <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80154d4:	2303      	movs	r3, #3
 80154d6:	e000      	b.n	80154da <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80154d8:	2300      	movs	r3, #0
}
 80154da:	4618      	mov	r0, r3
 80154dc:	3718      	adds	r7, #24
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}

080154e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80154e2:	b580      	push	{r7, lr}
 80154e4:	b086      	sub	sp, #24
 80154e6:	af00      	add	r7, sp, #0
 80154e8:	60f8      	str	r0, [r7, #12]
 80154ea:	460b      	mov	r3, r1
 80154ec:	607a      	str	r2, [r7, #4]
 80154ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80154f0:	7afb      	ldrb	r3, [r7, #11]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d16a      	bne.n	80155cc <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	3314      	adds	r3, #20
 80154fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015502:	2b02      	cmp	r3, #2
 8015504:	d155      	bne.n	80155b2 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8015506:	693b      	ldr	r3, [r7, #16]
 8015508:	689a      	ldr	r2, [r3, #8]
 801550a:	693b      	ldr	r3, [r7, #16]
 801550c:	68db      	ldr	r3, [r3, #12]
 801550e:	429a      	cmp	r2, r3
 8015510:	d914      	bls.n	801553c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015512:	693b      	ldr	r3, [r7, #16]
 8015514:	689a      	ldr	r2, [r3, #8]
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	68db      	ldr	r3, [r3, #12]
 801551a:	1ad2      	subs	r2, r2, r3
 801551c:	693b      	ldr	r3, [r7, #16]
 801551e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	689b      	ldr	r3, [r3, #8]
 8015524:	461a      	mov	r2, r3
 8015526:	6879      	ldr	r1, [r7, #4]
 8015528:	68f8      	ldr	r0, [r7, #12]
 801552a:	f000 ff21 	bl	8016370 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801552e:	2300      	movs	r3, #0
 8015530:	2200      	movs	r2, #0
 8015532:	2100      	movs	r1, #0
 8015534:	68f8      	ldr	r0, [r7, #12]
 8015536:	f003 fef2 	bl	801931e <USBD_LL_PrepareReceive>
 801553a:	e03a      	b.n	80155b2 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801553c:	693b      	ldr	r3, [r7, #16]
 801553e:	68da      	ldr	r2, [r3, #12]
 8015540:	693b      	ldr	r3, [r7, #16]
 8015542:	689b      	ldr	r3, [r3, #8]
 8015544:	429a      	cmp	r2, r3
 8015546:	d11c      	bne.n	8015582 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015548:	693b      	ldr	r3, [r7, #16]
 801554a:	685a      	ldr	r2, [r3, #4]
 801554c:	693b      	ldr	r3, [r7, #16]
 801554e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015550:	429a      	cmp	r2, r3
 8015552:	d316      	bcc.n	8015582 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015554:	693b      	ldr	r3, [r7, #16]
 8015556:	685a      	ldr	r2, [r3, #4]
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801555e:	429a      	cmp	r2, r3
 8015560:	d20f      	bcs.n	8015582 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015562:	2200      	movs	r2, #0
 8015564:	2100      	movs	r1, #0
 8015566:	68f8      	ldr	r0, [r7, #12]
 8015568:	f000 ff02 	bl	8016370 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	2200      	movs	r2, #0
 8015570:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015574:	2300      	movs	r3, #0
 8015576:	2200      	movs	r2, #0
 8015578:	2100      	movs	r1, #0
 801557a:	68f8      	ldr	r0, [r7, #12]
 801557c:	f003 fecf 	bl	801931e <USBD_LL_PrepareReceive>
 8015580:	e017      	b.n	80155b2 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015588:	68db      	ldr	r3, [r3, #12]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d00a      	beq.n	80155a4 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015594:	2b03      	cmp	r3, #3
 8015596:	d105      	bne.n	80155a4 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801559e:	68db      	ldr	r3, [r3, #12]
 80155a0:	68f8      	ldr	r0, [r7, #12]
 80155a2:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80155a4:	2180      	movs	r1, #128	; 0x80
 80155a6:	68f8      	ldr	r0, [r7, #12]
 80155a8:	f003 fe0f 	bl	80191ca <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80155ac:	68f8      	ldr	r0, [r7, #12]
 80155ae:	f000 ff14 	bl	80163da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80155b8:	2b01      	cmp	r3, #1
 80155ba:	d123      	bne.n	8015604 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80155bc:	68f8      	ldr	r0, [r7, #12]
 80155be:	f7ff fe9b 	bl	80152f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	2200      	movs	r2, #0
 80155c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80155ca:	e01b      	b.n	8015604 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155d2:	695b      	ldr	r3, [r3, #20]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d013      	beq.n	8015600 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80155de:	2b03      	cmp	r3, #3
 80155e0:	d10e      	bne.n	8015600 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155e8:	695b      	ldr	r3, [r3, #20]
 80155ea:	7afa      	ldrb	r2, [r7, #11]
 80155ec:	4611      	mov	r1, r2
 80155ee:	68f8      	ldr	r0, [r7, #12]
 80155f0:	4798      	blx	r3
 80155f2:	4603      	mov	r3, r0
 80155f4:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80155f6:	7dfb      	ldrb	r3, [r7, #23]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d003      	beq.n	8015604 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80155fc:	7dfb      	ldrb	r3, [r7, #23]
 80155fe:	e002      	b.n	8015606 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015600:	2303      	movs	r3, #3
 8015602:	e000      	b.n	8015606 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8015604:	2300      	movs	r3, #0
}
 8015606:	4618      	mov	r0, r3
 8015608:	3718      	adds	r7, #24
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}

0801560e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801560e:	b580      	push	{r7, lr}
 8015610:	b082      	sub	sp, #8
 8015612:	af00      	add	r7, sp, #0
 8015614:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	2201      	movs	r2, #1
 801561a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	2200      	movs	r2, #0
 8015622:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2200      	movs	r2, #0
 801562a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2200      	movs	r2, #0
 8015630:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801563a:	2b00      	cmp	r3, #0
 801563c:	d009      	beq.n	8015652 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015644:	685b      	ldr	r3, [r3, #4]
 8015646:	687a      	ldr	r2, [r7, #4]
 8015648:	6852      	ldr	r2, [r2, #4]
 801564a:	b2d2      	uxtb	r2, r2
 801564c:	4611      	mov	r1, r2
 801564e:	6878      	ldr	r0, [r7, #4]
 8015650:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015652:	2340      	movs	r3, #64	; 0x40
 8015654:	2200      	movs	r2, #0
 8015656:	2100      	movs	r1, #0
 8015658:	6878      	ldr	r0, [r7, #4]
 801565a:	f003 fd52 	bl	8019102 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	2201      	movs	r2, #1
 8015662:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	2240      	movs	r2, #64	; 0x40
 801566a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801566e:	2340      	movs	r3, #64	; 0x40
 8015670:	2200      	movs	r2, #0
 8015672:	2180      	movs	r1, #128	; 0x80
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	f003 fd44 	bl	8019102 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2201      	movs	r2, #1
 801567e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2240      	movs	r2, #64	; 0x40
 8015684:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8015686:	2300      	movs	r3, #0
}
 8015688:	4618      	mov	r0, r3
 801568a:	3708      	adds	r7, #8
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}

08015690 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015690:	b480      	push	{r7}
 8015692:	b083      	sub	sp, #12
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
 8015698:	460b      	mov	r3, r1
 801569a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	78fa      	ldrb	r2, [r7, #3]
 80156a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80156a2:	2300      	movs	r3, #0
}
 80156a4:	4618      	mov	r0, r3
 80156a6:	370c      	adds	r7, #12
 80156a8:	46bd      	mov	sp, r7
 80156aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ae:	4770      	bx	lr

080156b0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80156b0:	b480      	push	{r7}
 80156b2:	b083      	sub	sp, #12
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	2204      	movs	r2, #4
 80156c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80156cc:	2300      	movs	r3, #0
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	370c      	adds	r7, #12
 80156d2:	46bd      	mov	sp, r7
 80156d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d8:	4770      	bx	lr

080156da <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80156da:	b480      	push	{r7}
 80156dc:	b083      	sub	sp, #12
 80156de:	af00      	add	r7, sp, #0
 80156e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156e8:	2b04      	cmp	r3, #4
 80156ea:	d105      	bne.n	80156f8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80156f8:	2300      	movs	r3, #0
}
 80156fa:	4618      	mov	r0, r3
 80156fc:	370c      	adds	r7, #12
 80156fe:	46bd      	mov	sp, r7
 8015700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015704:	4770      	bx	lr

08015706 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015706:	b580      	push	{r7, lr}
 8015708:	b082      	sub	sp, #8
 801570a:	af00      	add	r7, sp, #0
 801570c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015714:	2b03      	cmp	r3, #3
 8015716:	d10b      	bne.n	8015730 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801571e:	69db      	ldr	r3, [r3, #28]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d005      	beq.n	8015730 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801572a:	69db      	ldr	r3, [r3, #28]
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015730:	2300      	movs	r3, #0
}
 8015732:	4618      	mov	r0, r3
 8015734:	3708      	adds	r7, #8
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}

0801573a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801573a:	b480      	push	{r7}
 801573c:	b083      	sub	sp, #12
 801573e:	af00      	add	r7, sp, #0
 8015740:	6078      	str	r0, [r7, #4]
 8015742:	460b      	mov	r3, r1
 8015744:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015746:	2300      	movs	r3, #0
}
 8015748:	4618      	mov	r0, r3
 801574a:	370c      	adds	r7, #12
 801574c:	46bd      	mov	sp, r7
 801574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015752:	4770      	bx	lr

08015754 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015754:	b480      	push	{r7}
 8015756:	b083      	sub	sp, #12
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
 801575c:	460b      	mov	r3, r1
 801575e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015760:	2300      	movs	r3, #0
}
 8015762:	4618      	mov	r0, r3
 8015764:	370c      	adds	r7, #12
 8015766:	46bd      	mov	sp, r7
 8015768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576c:	4770      	bx	lr

0801576e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801576e:	b480      	push	{r7}
 8015770:	b083      	sub	sp, #12
 8015772:	af00      	add	r7, sp, #0
 8015774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015776:	2300      	movs	r3, #0
}
 8015778:	4618      	mov	r0, r3
 801577a:	370c      	adds	r7, #12
 801577c:	46bd      	mov	sp, r7
 801577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015782:	4770      	bx	lr

08015784 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b082      	sub	sp, #8
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	2201      	movs	r2, #1
 8015790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801579a:	2b00      	cmp	r3, #0
 801579c:	d009      	beq.n	80157b2 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157a4:	685b      	ldr	r3, [r3, #4]
 80157a6:	687a      	ldr	r2, [r7, #4]
 80157a8:	6852      	ldr	r2, [r2, #4]
 80157aa:	b2d2      	uxtb	r2, r2
 80157ac:	4611      	mov	r1, r2
 80157ae:	6878      	ldr	r0, [r7, #4]
 80157b0:	4798      	blx	r3
  }

  return USBD_OK;
 80157b2:	2300      	movs	r3, #0
}
 80157b4:	4618      	mov	r0, r3
 80157b6:	3708      	adds	r7, #8
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}

080157bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80157bc:	b480      	push	{r7}
 80157be:	b087      	sub	sp, #28
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	781b      	ldrb	r3, [r3, #0]
 80157cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80157ce:	697b      	ldr	r3, [r7, #20]
 80157d0:	3301      	adds	r3, #1
 80157d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80157da:	8a3b      	ldrh	r3, [r7, #16]
 80157dc:	021b      	lsls	r3, r3, #8
 80157de:	b21a      	sxth	r2, r3
 80157e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80157e4:	4313      	orrs	r3, r2
 80157e6:	b21b      	sxth	r3, r3
 80157e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80157ea:	89fb      	ldrh	r3, [r7, #14]
}
 80157ec:	4618      	mov	r0, r3
 80157ee:	371c      	adds	r7, #28
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr

080157f8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b084      	sub	sp, #16
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
 8015800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015802:	2300      	movs	r3, #0
 8015804:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	781b      	ldrb	r3, [r3, #0]
 801580a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801580e:	2b20      	cmp	r3, #32
 8015810:	d004      	beq.n	801581c <USBD_StdDevReq+0x24>
 8015812:	2b40      	cmp	r3, #64	; 0x40
 8015814:	d002      	beq.n	801581c <USBD_StdDevReq+0x24>
 8015816:	2b00      	cmp	r3, #0
 8015818:	d00a      	beq.n	8015830 <USBD_StdDevReq+0x38>
 801581a:	e050      	b.n	80158be <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015822:	689b      	ldr	r3, [r3, #8]
 8015824:	6839      	ldr	r1, [r7, #0]
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	4798      	blx	r3
 801582a:	4603      	mov	r3, r0
 801582c:	73fb      	strb	r3, [r7, #15]
    break;
 801582e:	e04b      	b.n	80158c8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	785b      	ldrb	r3, [r3, #1]
 8015834:	2b09      	cmp	r3, #9
 8015836:	d83c      	bhi.n	80158b2 <USBD_StdDevReq+0xba>
 8015838:	a201      	add	r2, pc, #4	; (adr r2, 8015840 <USBD_StdDevReq+0x48>)
 801583a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801583e:	bf00      	nop
 8015840:	08015895 	.word	0x08015895
 8015844:	080158a9 	.word	0x080158a9
 8015848:	080158b3 	.word	0x080158b3
 801584c:	0801589f 	.word	0x0801589f
 8015850:	080158b3 	.word	0x080158b3
 8015854:	08015873 	.word	0x08015873
 8015858:	08015869 	.word	0x08015869
 801585c:	080158b3 	.word	0x080158b3
 8015860:	0801588b 	.word	0x0801588b
 8015864:	0801587d 	.word	0x0801587d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8015868:	6839      	ldr	r1, [r7, #0]
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	f000 f9ce 	bl	8015c0c <USBD_GetDescriptor>
      break;
 8015870:	e024      	b.n	80158bc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8015872:	6839      	ldr	r1, [r7, #0]
 8015874:	6878      	ldr	r0, [r7, #4]
 8015876:	f000 fb33 	bl	8015ee0 <USBD_SetAddress>
      break;
 801587a:	e01f      	b.n	80158bc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 801587c:	6839      	ldr	r1, [r7, #0]
 801587e:	6878      	ldr	r0, [r7, #4]
 8015880:	f000 fb70 	bl	8015f64 <USBD_SetConfig>
 8015884:	4603      	mov	r3, r0
 8015886:	73fb      	strb	r3, [r7, #15]
      break;
 8015888:	e018      	b.n	80158bc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801588a:	6839      	ldr	r1, [r7, #0]
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	f000 fc0d 	bl	80160ac <USBD_GetConfig>
      break;
 8015892:	e013      	b.n	80158bc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8015894:	6839      	ldr	r1, [r7, #0]
 8015896:	6878      	ldr	r0, [r7, #4]
 8015898:	f000 fc3c 	bl	8016114 <USBD_GetStatus>
      break;
 801589c:	e00e      	b.n	80158bc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 801589e:	6839      	ldr	r1, [r7, #0]
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f000 fc6a 	bl	801617a <USBD_SetFeature>
      break;
 80158a6:	e009      	b.n	80158bc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80158a8:	6839      	ldr	r1, [r7, #0]
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	f000 fc79 	bl	80161a2 <USBD_ClrFeature>
      break;
 80158b0:	e004      	b.n	80158bc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80158b2:	6839      	ldr	r1, [r7, #0]
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f000 fccf 	bl	8016258 <USBD_CtlError>
      break;
 80158ba:	bf00      	nop
    }
    break;
 80158bc:	e004      	b.n	80158c8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80158be:	6839      	ldr	r1, [r7, #0]
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	f000 fcc9 	bl	8016258 <USBD_CtlError>
    break;
 80158c6:	bf00      	nop
  }

  return ret;
 80158c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80158ca:	4618      	mov	r0, r3
 80158cc:	3710      	adds	r7, #16
 80158ce:	46bd      	mov	sp, r7
 80158d0:	bd80      	pop	{r7, pc}
 80158d2:	bf00      	nop

080158d4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b084      	sub	sp, #16
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
 80158dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80158de:	2300      	movs	r3, #0
 80158e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158e2:	683b      	ldr	r3, [r7, #0]
 80158e4:	781b      	ldrb	r3, [r3, #0]
 80158e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80158ea:	2b20      	cmp	r3, #32
 80158ec:	d003      	beq.n	80158f6 <USBD_StdItfReq+0x22>
 80158ee:	2b40      	cmp	r3, #64	; 0x40
 80158f0:	d001      	beq.n	80158f6 <USBD_StdItfReq+0x22>
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d12a      	bne.n	801594c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158fc:	3b01      	subs	r3, #1
 80158fe:	2b02      	cmp	r3, #2
 8015900:	d81d      	bhi.n	801593e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015902:	683b      	ldr	r3, [r7, #0]
 8015904:	889b      	ldrh	r3, [r3, #4]
 8015906:	b2db      	uxtb	r3, r3
 8015908:	2b01      	cmp	r3, #1
 801590a:	d813      	bhi.n	8015934 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015912:	689b      	ldr	r3, [r3, #8]
 8015914:	6839      	ldr	r1, [r7, #0]
 8015916:	6878      	ldr	r0, [r7, #4]
 8015918:	4798      	blx	r3
 801591a:	4603      	mov	r3, r0
 801591c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	88db      	ldrh	r3, [r3, #6]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d110      	bne.n	8015948 <USBD_StdItfReq+0x74>
 8015926:	7bfb      	ldrb	r3, [r7, #15]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d10d      	bne.n	8015948 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f000 fd41 	bl	80163b4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8015932:	e009      	b.n	8015948 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8015934:	6839      	ldr	r1, [r7, #0]
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f000 fc8e 	bl	8016258 <USBD_CtlError>
      break;
 801593c:	e004      	b.n	8015948 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 801593e:	6839      	ldr	r1, [r7, #0]
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f000 fc89 	bl	8016258 <USBD_CtlError>
      break;
 8015946:	e000      	b.n	801594a <USBD_StdItfReq+0x76>
      break;
 8015948:	bf00      	nop
    }
    break;
 801594a:	e004      	b.n	8015956 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 801594c:	6839      	ldr	r1, [r7, #0]
 801594e:	6878      	ldr	r0, [r7, #4]
 8015950:	f000 fc82 	bl	8016258 <USBD_CtlError>
    break;
 8015954:	bf00      	nop
  }

  return ret;
 8015956:	7bfb      	ldrb	r3, [r7, #15]
}
 8015958:	4618      	mov	r0, r3
 801595a:	3710      	adds	r7, #16
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b084      	sub	sp, #16
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801596a:	2300      	movs	r3, #0
 801596c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801596e:	683b      	ldr	r3, [r7, #0]
 8015970:	889b      	ldrh	r3, [r3, #4]
 8015972:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015974:	683b      	ldr	r3, [r7, #0]
 8015976:	781b      	ldrb	r3, [r3, #0]
 8015978:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801597c:	2b20      	cmp	r3, #32
 801597e:	d004      	beq.n	801598a <USBD_StdEPReq+0x2a>
 8015980:	2b40      	cmp	r3, #64	; 0x40
 8015982:	d002      	beq.n	801598a <USBD_StdEPReq+0x2a>
 8015984:	2b00      	cmp	r3, #0
 8015986:	d00a      	beq.n	801599e <USBD_StdEPReq+0x3e>
 8015988:	e135      	b.n	8015bf6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015990:	689b      	ldr	r3, [r3, #8]
 8015992:	6839      	ldr	r1, [r7, #0]
 8015994:	6878      	ldr	r0, [r7, #4]
 8015996:	4798      	blx	r3
 8015998:	4603      	mov	r3, r0
 801599a:	73fb      	strb	r3, [r7, #15]
    break;
 801599c:	e130      	b.n	8015c00 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	785b      	ldrb	r3, [r3, #1]
 80159a2:	2b01      	cmp	r3, #1
 80159a4:	d03e      	beq.n	8015a24 <USBD_StdEPReq+0xc4>
 80159a6:	2b03      	cmp	r3, #3
 80159a8:	d002      	beq.n	80159b0 <USBD_StdEPReq+0x50>
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d077      	beq.n	8015a9e <USBD_StdEPReq+0x13e>
 80159ae:	e11c      	b.n	8015bea <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159b6:	2b02      	cmp	r3, #2
 80159b8:	d002      	beq.n	80159c0 <USBD_StdEPReq+0x60>
 80159ba:	2b03      	cmp	r3, #3
 80159bc:	d015      	beq.n	80159ea <USBD_StdEPReq+0x8a>
 80159be:	e02b      	b.n	8015a18 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159c0:	7bbb      	ldrb	r3, [r7, #14]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d00c      	beq.n	80159e0 <USBD_StdEPReq+0x80>
 80159c6:	7bbb      	ldrb	r3, [r7, #14]
 80159c8:	2b80      	cmp	r3, #128	; 0x80
 80159ca:	d009      	beq.n	80159e0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80159cc:	7bbb      	ldrb	r3, [r7, #14]
 80159ce:	4619      	mov	r1, r3
 80159d0:	6878      	ldr	r0, [r7, #4]
 80159d2:	f003 fbfa 	bl	80191ca <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80159d6:	2180      	movs	r1, #128	; 0x80
 80159d8:	6878      	ldr	r0, [r7, #4]
 80159da:	f003 fbf6 	bl	80191ca <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80159de:	e020      	b.n	8015a22 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80159e0:	6839      	ldr	r1, [r7, #0]
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f000 fc38 	bl	8016258 <USBD_CtlError>
        break;
 80159e8:	e01b      	b.n	8015a22 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80159ea:	683b      	ldr	r3, [r7, #0]
 80159ec:	885b      	ldrh	r3, [r3, #2]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d10e      	bne.n	8015a10 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80159f2:	7bbb      	ldrb	r3, [r7, #14]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d00b      	beq.n	8015a10 <USBD_StdEPReq+0xb0>
 80159f8:	7bbb      	ldrb	r3, [r7, #14]
 80159fa:	2b80      	cmp	r3, #128	; 0x80
 80159fc:	d008      	beq.n	8015a10 <USBD_StdEPReq+0xb0>
 80159fe:	683b      	ldr	r3, [r7, #0]
 8015a00:	88db      	ldrh	r3, [r3, #6]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d104      	bne.n	8015a10 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a06:	7bbb      	ldrb	r3, [r7, #14]
 8015a08:	4619      	mov	r1, r3
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	f003 fbdd 	bl	80191ca <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8015a10:	6878      	ldr	r0, [r7, #4]
 8015a12:	f000 fccf 	bl	80163b4 <USBD_CtlSendStatus>

        break;
 8015a16:	e004      	b.n	8015a22 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8015a18:	6839      	ldr	r1, [r7, #0]
 8015a1a:	6878      	ldr	r0, [r7, #4]
 8015a1c:	f000 fc1c 	bl	8016258 <USBD_CtlError>
        break;
 8015a20:	bf00      	nop
      }
      break;
 8015a22:	e0e7      	b.n	8015bf4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a2a:	2b02      	cmp	r3, #2
 8015a2c:	d002      	beq.n	8015a34 <USBD_StdEPReq+0xd4>
 8015a2e:	2b03      	cmp	r3, #3
 8015a30:	d015      	beq.n	8015a5e <USBD_StdEPReq+0xfe>
 8015a32:	e02d      	b.n	8015a90 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a34:	7bbb      	ldrb	r3, [r7, #14]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d00c      	beq.n	8015a54 <USBD_StdEPReq+0xf4>
 8015a3a:	7bbb      	ldrb	r3, [r7, #14]
 8015a3c:	2b80      	cmp	r3, #128	; 0x80
 8015a3e:	d009      	beq.n	8015a54 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a40:	7bbb      	ldrb	r3, [r7, #14]
 8015a42:	4619      	mov	r1, r3
 8015a44:	6878      	ldr	r0, [r7, #4]
 8015a46:	f003 fbc0 	bl	80191ca <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a4a:	2180      	movs	r1, #128	; 0x80
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	f003 fbbc 	bl	80191ca <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8015a52:	e023      	b.n	8015a9c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8015a54:	6839      	ldr	r1, [r7, #0]
 8015a56:	6878      	ldr	r0, [r7, #4]
 8015a58:	f000 fbfe 	bl	8016258 <USBD_CtlError>
        break;
 8015a5c:	e01e      	b.n	8015a9c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8015a5e:	683b      	ldr	r3, [r7, #0]
 8015a60:	885b      	ldrh	r3, [r3, #2]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d119      	bne.n	8015a9a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8015a66:	7bbb      	ldrb	r3, [r7, #14]
 8015a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d004      	beq.n	8015a7a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015a70:	7bbb      	ldrb	r3, [r7, #14]
 8015a72:	4619      	mov	r1, r3
 8015a74:	6878      	ldr	r0, [r7, #4]
 8015a76:	f003 fbc7 	bl	8019208 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8015a7a:	6878      	ldr	r0, [r7, #4]
 8015a7c:	f000 fc9a 	bl	80163b4 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a86:	689b      	ldr	r3, [r3, #8]
 8015a88:	6839      	ldr	r1, [r7, #0]
 8015a8a:	6878      	ldr	r0, [r7, #4]
 8015a8c:	4798      	blx	r3
        }
        break;
 8015a8e:	e004      	b.n	8015a9a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8015a90:	6839      	ldr	r1, [r7, #0]
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f000 fbe0 	bl	8016258 <USBD_CtlError>
        break;
 8015a98:	e000      	b.n	8015a9c <USBD_StdEPReq+0x13c>
        break;
 8015a9a:	bf00      	nop
      }
      break;
 8015a9c:	e0aa      	b.n	8015bf4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015aa4:	2b02      	cmp	r3, #2
 8015aa6:	d002      	beq.n	8015aae <USBD_StdEPReq+0x14e>
 8015aa8:	2b03      	cmp	r3, #3
 8015aaa:	d032      	beq.n	8015b12 <USBD_StdEPReq+0x1b2>
 8015aac:	e097      	b.n	8015bde <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015aae:	7bbb      	ldrb	r3, [r7, #14]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d007      	beq.n	8015ac4 <USBD_StdEPReq+0x164>
 8015ab4:	7bbb      	ldrb	r3, [r7, #14]
 8015ab6:	2b80      	cmp	r3, #128	; 0x80
 8015ab8:	d004      	beq.n	8015ac4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8015aba:	6839      	ldr	r1, [r7, #0]
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f000 fbcb 	bl	8016258 <USBD_CtlError>
          break;
 8015ac2:	e091      	b.n	8015be8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	da0b      	bge.n	8015ae4 <USBD_StdEPReq+0x184>
 8015acc:	7bbb      	ldrb	r3, [r7, #14]
 8015ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ad2:	4613      	mov	r3, r2
 8015ad4:	009b      	lsls	r3, r3, #2
 8015ad6:	4413      	add	r3, r2
 8015ad8:	009b      	lsls	r3, r3, #2
 8015ada:	3310      	adds	r3, #16
 8015adc:	687a      	ldr	r2, [r7, #4]
 8015ade:	4413      	add	r3, r2
 8015ae0:	3304      	adds	r3, #4
 8015ae2:	e00b      	b.n	8015afc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015ae4:	7bbb      	ldrb	r3, [r7, #14]
 8015ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015aea:	4613      	mov	r3, r2
 8015aec:	009b      	lsls	r3, r3, #2
 8015aee:	4413      	add	r3, r2
 8015af0:	009b      	lsls	r3, r3, #2
 8015af2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015af6:	687a      	ldr	r2, [r7, #4]
 8015af8:	4413      	add	r3, r2
 8015afa:	3304      	adds	r3, #4
 8015afc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8015afe:	68bb      	ldr	r3, [r7, #8]
 8015b00:	2200      	movs	r2, #0
 8015b02:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b04:	68bb      	ldr	r3, [r7, #8]
 8015b06:	2202      	movs	r2, #2
 8015b08:	4619      	mov	r1, r3
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f000 fc15 	bl	801633a <USBD_CtlSendData>
        break;
 8015b10:	e06a      	b.n	8015be8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8015b12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	da11      	bge.n	8015b3e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015b1a:	7bbb      	ldrb	r3, [r7, #14]
 8015b1c:	f003 020f 	and.w	r2, r3, #15
 8015b20:	6879      	ldr	r1, [r7, #4]
 8015b22:	4613      	mov	r3, r2
 8015b24:	009b      	lsls	r3, r3, #2
 8015b26:	4413      	add	r3, r2
 8015b28:	009b      	lsls	r3, r3, #2
 8015b2a:	440b      	add	r3, r1
 8015b2c:	3324      	adds	r3, #36	; 0x24
 8015b2e:	881b      	ldrh	r3, [r3, #0]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d117      	bne.n	8015b64 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015b34:	6839      	ldr	r1, [r7, #0]
 8015b36:	6878      	ldr	r0, [r7, #4]
 8015b38:	f000 fb8e 	bl	8016258 <USBD_CtlError>
            break;
 8015b3c:	e054      	b.n	8015be8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015b3e:	7bbb      	ldrb	r3, [r7, #14]
 8015b40:	f003 020f 	and.w	r2, r3, #15
 8015b44:	6879      	ldr	r1, [r7, #4]
 8015b46:	4613      	mov	r3, r2
 8015b48:	009b      	lsls	r3, r3, #2
 8015b4a:	4413      	add	r3, r2
 8015b4c:	009b      	lsls	r3, r3, #2
 8015b4e:	440b      	add	r3, r1
 8015b50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015b54:	881b      	ldrh	r3, [r3, #0]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d104      	bne.n	8015b64 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015b5a:	6839      	ldr	r1, [r7, #0]
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f000 fb7b 	bl	8016258 <USBD_CtlError>
            break;
 8015b62:	e041      	b.n	8015be8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	da0b      	bge.n	8015b84 <USBD_StdEPReq+0x224>
 8015b6c:	7bbb      	ldrb	r3, [r7, #14]
 8015b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b72:	4613      	mov	r3, r2
 8015b74:	009b      	lsls	r3, r3, #2
 8015b76:	4413      	add	r3, r2
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	3310      	adds	r3, #16
 8015b7c:	687a      	ldr	r2, [r7, #4]
 8015b7e:	4413      	add	r3, r2
 8015b80:	3304      	adds	r3, #4
 8015b82:	e00b      	b.n	8015b9c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015b84:	7bbb      	ldrb	r3, [r7, #14]
 8015b86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	009b      	lsls	r3, r3, #2
 8015b8e:	4413      	add	r3, r2
 8015b90:	009b      	lsls	r3, r3, #2
 8015b92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015b96:	687a      	ldr	r2, [r7, #4]
 8015b98:	4413      	add	r3, r2
 8015b9a:	3304      	adds	r3, #4
 8015b9c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015b9e:	7bbb      	ldrb	r3, [r7, #14]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d002      	beq.n	8015baa <USBD_StdEPReq+0x24a>
 8015ba4:	7bbb      	ldrb	r3, [r7, #14]
 8015ba6:	2b80      	cmp	r3, #128	; 0x80
 8015ba8:	d103      	bne.n	8015bb2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	2200      	movs	r2, #0
 8015bae:	601a      	str	r2, [r3, #0]
 8015bb0:	e00e      	b.n	8015bd0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015bb2:	7bbb      	ldrb	r3, [r7, #14]
 8015bb4:	4619      	mov	r1, r3
 8015bb6:	6878      	ldr	r0, [r7, #4]
 8015bb8:	f003 fb45 	bl	8019246 <USBD_LL_IsStallEP>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d003      	beq.n	8015bca <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8015bc2:	68bb      	ldr	r3, [r7, #8]
 8015bc4:	2201      	movs	r2, #1
 8015bc6:	601a      	str	r2, [r3, #0]
 8015bc8:	e002      	b.n	8015bd0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8015bca:	68bb      	ldr	r3, [r7, #8]
 8015bcc:	2200      	movs	r2, #0
 8015bce:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015bd0:	68bb      	ldr	r3, [r7, #8]
 8015bd2:	2202      	movs	r2, #2
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f000 fbaf 	bl	801633a <USBD_CtlSendData>
          break;
 8015bdc:	e004      	b.n	8015be8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8015bde:	6839      	ldr	r1, [r7, #0]
 8015be0:	6878      	ldr	r0, [r7, #4]
 8015be2:	f000 fb39 	bl	8016258 <USBD_CtlError>
        break;
 8015be6:	bf00      	nop
      }
      break;
 8015be8:	e004      	b.n	8015bf4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8015bea:	6839      	ldr	r1, [r7, #0]
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f000 fb33 	bl	8016258 <USBD_CtlError>
      break;
 8015bf2:	bf00      	nop
    }
    break;
 8015bf4:	e004      	b.n	8015c00 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8015bf6:	6839      	ldr	r1, [r7, #0]
 8015bf8:	6878      	ldr	r0, [r7, #4]
 8015bfa:	f000 fb2d 	bl	8016258 <USBD_CtlError>
    break;
 8015bfe:	bf00      	nop
  }

  return ret;
 8015c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c02:	4618      	mov	r0, r3
 8015c04:	3710      	adds	r7, #16
 8015c06:	46bd      	mov	sp, r7
 8015c08:	bd80      	pop	{r7, pc}
	...

08015c0c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b084      	sub	sp, #16
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
 8015c14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015c16:	2300      	movs	r3, #0
 8015c18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	885b      	ldrh	r3, [r3, #2]
 8015c26:	0a1b      	lsrs	r3, r3, #8
 8015c28:	b29b      	uxth	r3, r3
 8015c2a:	3b01      	subs	r3, #1
 8015c2c:	2b06      	cmp	r3, #6
 8015c2e:	f200 8128 	bhi.w	8015e82 <USBD_GetDescriptor+0x276>
 8015c32:	a201      	add	r2, pc, #4	; (adr r2, 8015c38 <USBD_GetDescriptor+0x2c>)
 8015c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c38:	08015c55 	.word	0x08015c55
 8015c3c:	08015c6d 	.word	0x08015c6d
 8015c40:	08015cad 	.word	0x08015cad
 8015c44:	08015e83 	.word	0x08015e83
 8015c48:	08015e83 	.word	0x08015e83
 8015c4c:	08015e23 	.word	0x08015e23
 8015c50:	08015e4f 	.word	0x08015e4f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	687a      	ldr	r2, [r7, #4]
 8015c5e:	7c12      	ldrb	r2, [r2, #16]
 8015c60:	f107 0108 	add.w	r1, r7, #8
 8015c64:	4610      	mov	r0, r2
 8015c66:	4798      	blx	r3
 8015c68:	60f8      	str	r0, [r7, #12]
    break;
 8015c6a:	e112      	b.n	8015e92 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	7c1b      	ldrb	r3, [r3, #16]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d10d      	bne.n	8015c90 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c7c:	f107 0208 	add.w	r2, r7, #8
 8015c80:	4610      	mov	r0, r2
 8015c82:	4798      	blx	r3
 8015c84:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	3301      	adds	r3, #1
 8015c8a:	2202      	movs	r2, #2
 8015c8c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8015c8e:	e100      	b.n	8015e92 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c98:	f107 0208 	add.w	r2, r7, #8
 8015c9c:	4610      	mov	r0, r2
 8015c9e:	4798      	blx	r3
 8015ca0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	3301      	adds	r3, #1
 8015ca6:	2202      	movs	r2, #2
 8015ca8:	701a      	strb	r2, [r3, #0]
    break;
 8015caa:	e0f2      	b.n	8015e92 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8015cac:	683b      	ldr	r3, [r7, #0]
 8015cae:	885b      	ldrh	r3, [r3, #2]
 8015cb0:	b2db      	uxtb	r3, r3
 8015cb2:	2b05      	cmp	r3, #5
 8015cb4:	f200 80ac 	bhi.w	8015e10 <USBD_GetDescriptor+0x204>
 8015cb8:	a201      	add	r2, pc, #4	; (adr r2, 8015cc0 <USBD_GetDescriptor+0xb4>)
 8015cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cbe:	bf00      	nop
 8015cc0:	08015cd9 	.word	0x08015cd9
 8015cc4:	08015d0d 	.word	0x08015d0d
 8015cc8:	08015d41 	.word	0x08015d41
 8015ccc:	08015d75 	.word	0x08015d75
 8015cd0:	08015da9 	.word	0x08015da9
 8015cd4:	08015ddd 	.word	0x08015ddd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cde:	685b      	ldr	r3, [r3, #4]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d00b      	beq.n	8015cfc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cea:	685b      	ldr	r3, [r3, #4]
 8015cec:	687a      	ldr	r2, [r7, #4]
 8015cee:	7c12      	ldrb	r2, [r2, #16]
 8015cf0:	f107 0108 	add.w	r1, r7, #8
 8015cf4:	4610      	mov	r0, r2
 8015cf6:	4798      	blx	r3
 8015cf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015cfa:	e091      	b.n	8015e20 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015cfc:	6839      	ldr	r1, [r7, #0]
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f000 faaa 	bl	8016258 <USBD_CtlError>
        err++;
 8015d04:	7afb      	ldrb	r3, [r7, #11]
 8015d06:	3301      	adds	r3, #1
 8015d08:	72fb      	strb	r3, [r7, #11]
      break;
 8015d0a:	e089      	b.n	8015e20 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d12:	689b      	ldr	r3, [r3, #8]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d00b      	beq.n	8015d30 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d1e:	689b      	ldr	r3, [r3, #8]
 8015d20:	687a      	ldr	r2, [r7, #4]
 8015d22:	7c12      	ldrb	r2, [r2, #16]
 8015d24:	f107 0108 	add.w	r1, r7, #8
 8015d28:	4610      	mov	r0, r2
 8015d2a:	4798      	blx	r3
 8015d2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d2e:	e077      	b.n	8015e20 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d30:	6839      	ldr	r1, [r7, #0]
 8015d32:	6878      	ldr	r0, [r7, #4]
 8015d34:	f000 fa90 	bl	8016258 <USBD_CtlError>
        err++;
 8015d38:	7afb      	ldrb	r3, [r7, #11]
 8015d3a:	3301      	adds	r3, #1
 8015d3c:	72fb      	strb	r3, [r7, #11]
      break;
 8015d3e:	e06f      	b.n	8015e20 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d46:	68db      	ldr	r3, [r3, #12]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d00b      	beq.n	8015d64 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d52:	68db      	ldr	r3, [r3, #12]
 8015d54:	687a      	ldr	r2, [r7, #4]
 8015d56:	7c12      	ldrb	r2, [r2, #16]
 8015d58:	f107 0108 	add.w	r1, r7, #8
 8015d5c:	4610      	mov	r0, r2
 8015d5e:	4798      	blx	r3
 8015d60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d62:	e05d      	b.n	8015e20 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d64:	6839      	ldr	r1, [r7, #0]
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	f000 fa76 	bl	8016258 <USBD_CtlError>
        err++;
 8015d6c:	7afb      	ldrb	r3, [r7, #11]
 8015d6e:	3301      	adds	r3, #1
 8015d70:	72fb      	strb	r3, [r7, #11]
      break;
 8015d72:	e055      	b.n	8015e20 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d7a:	691b      	ldr	r3, [r3, #16]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d00b      	beq.n	8015d98 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d86:	691b      	ldr	r3, [r3, #16]
 8015d88:	687a      	ldr	r2, [r7, #4]
 8015d8a:	7c12      	ldrb	r2, [r2, #16]
 8015d8c:	f107 0108 	add.w	r1, r7, #8
 8015d90:	4610      	mov	r0, r2
 8015d92:	4798      	blx	r3
 8015d94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d96:	e043      	b.n	8015e20 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d98:	6839      	ldr	r1, [r7, #0]
 8015d9a:	6878      	ldr	r0, [r7, #4]
 8015d9c:	f000 fa5c 	bl	8016258 <USBD_CtlError>
        err++;
 8015da0:	7afb      	ldrb	r3, [r7, #11]
 8015da2:	3301      	adds	r3, #1
 8015da4:	72fb      	strb	r3, [r7, #11]
      break;
 8015da6:	e03b      	b.n	8015e20 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dae:	695b      	ldr	r3, [r3, #20]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d00b      	beq.n	8015dcc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dba:	695b      	ldr	r3, [r3, #20]
 8015dbc:	687a      	ldr	r2, [r7, #4]
 8015dbe:	7c12      	ldrb	r2, [r2, #16]
 8015dc0:	f107 0108 	add.w	r1, r7, #8
 8015dc4:	4610      	mov	r0, r2
 8015dc6:	4798      	blx	r3
 8015dc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015dca:	e029      	b.n	8015e20 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015dcc:	6839      	ldr	r1, [r7, #0]
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	f000 fa42 	bl	8016258 <USBD_CtlError>
        err++;
 8015dd4:	7afb      	ldrb	r3, [r7, #11]
 8015dd6:	3301      	adds	r3, #1
 8015dd8:	72fb      	strb	r3, [r7, #11]
      break;
 8015dda:	e021      	b.n	8015e20 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015de2:	699b      	ldr	r3, [r3, #24]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d00b      	beq.n	8015e00 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dee:	699b      	ldr	r3, [r3, #24]
 8015df0:	687a      	ldr	r2, [r7, #4]
 8015df2:	7c12      	ldrb	r2, [r2, #16]
 8015df4:	f107 0108 	add.w	r1, r7, #8
 8015df8:	4610      	mov	r0, r2
 8015dfa:	4798      	blx	r3
 8015dfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015dfe:	e00f      	b.n	8015e20 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015e00:	6839      	ldr	r1, [r7, #0]
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f000 fa28 	bl	8016258 <USBD_CtlError>
        err++;
 8015e08:	7afb      	ldrb	r3, [r7, #11]
 8015e0a:	3301      	adds	r3, #1
 8015e0c:	72fb      	strb	r3, [r7, #11]
      break;
 8015e0e:	e007      	b.n	8015e20 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8015e10:	6839      	ldr	r1, [r7, #0]
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	f000 fa20 	bl	8016258 <USBD_CtlError>
      err++;
 8015e18:	7afb      	ldrb	r3, [r7, #11]
 8015e1a:	3301      	adds	r3, #1
 8015e1c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8015e1e:	bf00      	nop
    }
    break;
 8015e20:	e037      	b.n	8015e92 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	7c1b      	ldrb	r3, [r3, #16]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d109      	bne.n	8015e3e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e32:	f107 0208 	add.w	r2, r7, #8
 8015e36:	4610      	mov	r0, r2
 8015e38:	4798      	blx	r3
 8015e3a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015e3c:	e029      	b.n	8015e92 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015e3e:	6839      	ldr	r1, [r7, #0]
 8015e40:	6878      	ldr	r0, [r7, #4]
 8015e42:	f000 fa09 	bl	8016258 <USBD_CtlError>
      err++;
 8015e46:	7afb      	ldrb	r3, [r7, #11]
 8015e48:	3301      	adds	r3, #1
 8015e4a:	72fb      	strb	r3, [r7, #11]
    break;
 8015e4c:	e021      	b.n	8015e92 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	7c1b      	ldrb	r3, [r3, #16]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d10d      	bne.n	8015e72 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e5e:	f107 0208 	add.w	r2, r7, #8
 8015e62:	4610      	mov	r0, r2
 8015e64:	4798      	blx	r3
 8015e66:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	3301      	adds	r3, #1
 8015e6c:	2207      	movs	r2, #7
 8015e6e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015e70:	e00f      	b.n	8015e92 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015e72:	6839      	ldr	r1, [r7, #0]
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f000 f9ef 	bl	8016258 <USBD_CtlError>
      err++;
 8015e7a:	7afb      	ldrb	r3, [r7, #11]
 8015e7c:	3301      	adds	r3, #1
 8015e7e:	72fb      	strb	r3, [r7, #11]
    break;
 8015e80:	e007      	b.n	8015e92 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8015e82:	6839      	ldr	r1, [r7, #0]
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f000 f9e7 	bl	8016258 <USBD_CtlError>
    err++;
 8015e8a:	7afb      	ldrb	r3, [r7, #11]
 8015e8c:	3301      	adds	r3, #1
 8015e8e:	72fb      	strb	r3, [r7, #11]
    break;
 8015e90:	bf00      	nop
  }

  if (err != 0U)
 8015e92:	7afb      	ldrb	r3, [r7, #11]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d11e      	bne.n	8015ed6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	88db      	ldrh	r3, [r3, #6]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d016      	beq.n	8015ece <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8015ea0:	893b      	ldrh	r3, [r7, #8]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d00e      	beq.n	8015ec4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8015ea6:	683b      	ldr	r3, [r7, #0]
 8015ea8:	88da      	ldrh	r2, [r3, #6]
 8015eaa:	893b      	ldrh	r3, [r7, #8]
 8015eac:	4293      	cmp	r3, r2
 8015eae:	bf28      	it	cs
 8015eb0:	4613      	movcs	r3, r2
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8015eb6:	893b      	ldrh	r3, [r7, #8]
 8015eb8:	461a      	mov	r2, r3
 8015eba:	68f9      	ldr	r1, [r7, #12]
 8015ebc:	6878      	ldr	r0, [r7, #4]
 8015ebe:	f000 fa3c 	bl	801633a <USBD_CtlSendData>
 8015ec2:	e009      	b.n	8015ed8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8015ec4:	6839      	ldr	r1, [r7, #0]
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f000 f9c6 	bl	8016258 <USBD_CtlError>
 8015ecc:	e004      	b.n	8015ed8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f000 fa70 	bl	80163b4 <USBD_CtlSendStatus>
 8015ed4:	e000      	b.n	8015ed8 <USBD_GetDescriptor+0x2cc>
    return;
 8015ed6:	bf00      	nop
    }
  }
}
 8015ed8:	3710      	adds	r7, #16
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bd80      	pop	{r7, pc}
 8015ede:	bf00      	nop

08015ee0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b084      	sub	sp, #16
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
 8015ee8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	889b      	ldrh	r3, [r3, #4]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d130      	bne.n	8015f54 <USBD_SetAddress+0x74>
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	88db      	ldrh	r3, [r3, #6]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d12c      	bne.n	8015f54 <USBD_SetAddress+0x74>
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	885b      	ldrh	r3, [r3, #2]
 8015efe:	2b7f      	cmp	r3, #127	; 0x7f
 8015f00:	d828      	bhi.n	8015f54 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	885b      	ldrh	r3, [r3, #2]
 8015f06:	b2db      	uxtb	r3, r3
 8015f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f14:	2b03      	cmp	r3, #3
 8015f16:	d104      	bne.n	8015f22 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8015f18:	6839      	ldr	r1, [r7, #0]
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f000 f99c 	bl	8016258 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f20:	e01c      	b.n	8015f5c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	7bfa      	ldrb	r2, [r7, #15]
 8015f26:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015f2a:	7bfb      	ldrb	r3, [r7, #15]
 8015f2c:	4619      	mov	r1, r3
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f003 f9b5 	bl	801929e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f000 fa3d 	bl	80163b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015f3a:	7bfb      	ldrb	r3, [r7, #15]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d004      	beq.n	8015f4a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	2202      	movs	r2, #2
 8015f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f48:	e008      	b.n	8015f5c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	2201      	movs	r2, #1
 8015f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f52:	e003      	b.n	8015f5c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015f54:	6839      	ldr	r1, [r7, #0]
 8015f56:	6878      	ldr	r0, [r7, #4]
 8015f58:	f000 f97e 	bl	8016258 <USBD_CtlError>
  }
}
 8015f5c:	bf00      	nop
 8015f5e:	3710      	adds	r7, #16
 8015f60:	46bd      	mov	sp, r7
 8015f62:	bd80      	pop	{r7, pc}

08015f64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b084      	sub	sp, #16
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
 8015f6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f6e:	2300      	movs	r3, #0
 8015f70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	885b      	ldrh	r3, [r3, #2]
 8015f76:	b2da      	uxtb	r2, r3
 8015f78:	4b4b      	ldr	r3, [pc, #300]	; (80160a8 <USBD_SetConfig+0x144>)
 8015f7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015f7c:	4b4a      	ldr	r3, [pc, #296]	; (80160a8 <USBD_SetConfig+0x144>)
 8015f7e:	781b      	ldrb	r3, [r3, #0]
 8015f80:	2b01      	cmp	r3, #1
 8015f82:	d905      	bls.n	8015f90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015f84:	6839      	ldr	r1, [r7, #0]
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f000 f966 	bl	8016258 <USBD_CtlError>
    return USBD_FAIL;
 8015f8c:	2303      	movs	r3, #3
 8015f8e:	e087      	b.n	80160a0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f96:	2b02      	cmp	r3, #2
 8015f98:	d002      	beq.n	8015fa0 <USBD_SetConfig+0x3c>
 8015f9a:	2b03      	cmp	r3, #3
 8015f9c:	d025      	beq.n	8015fea <USBD_SetConfig+0x86>
 8015f9e:	e071      	b.n	8016084 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8015fa0:	4b41      	ldr	r3, [pc, #260]	; (80160a8 <USBD_SetConfig+0x144>)
 8015fa2:	781b      	ldrb	r3, [r3, #0]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d01c      	beq.n	8015fe2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8015fa8:	4b3f      	ldr	r3, [pc, #252]	; (80160a8 <USBD_SetConfig+0x144>)
 8015faa:	781b      	ldrb	r3, [r3, #0]
 8015fac:	461a      	mov	r2, r3
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8015fb2:	4b3d      	ldr	r3, [pc, #244]	; (80160a8 <USBD_SetConfig+0x144>)
 8015fb4:	781b      	ldrb	r3, [r3, #0]
 8015fb6:	4619      	mov	r1, r3
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	f7ff f9a8 	bl	801530e <USBD_SetClassConfig>
 8015fbe:	4603      	mov	r3, r0
 8015fc0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8015fc2:	7bfb      	ldrb	r3, [r7, #15]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d004      	beq.n	8015fd2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8015fc8:	6839      	ldr	r1, [r7, #0]
 8015fca:	6878      	ldr	r0, [r7, #4]
 8015fcc:	f000 f944 	bl	8016258 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8015fd0:	e065      	b.n	801609e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f000 f9ee 	bl	80163b4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	2203      	movs	r2, #3
 8015fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8015fe0:	e05d      	b.n	801609e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8015fe2:	6878      	ldr	r0, [r7, #4]
 8015fe4:	f000 f9e6 	bl	80163b4 <USBD_CtlSendStatus>
    break;
 8015fe8:	e059      	b.n	801609e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8015fea:	4b2f      	ldr	r3, [pc, #188]	; (80160a8 <USBD_SetConfig+0x144>)
 8015fec:	781b      	ldrb	r3, [r3, #0]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d112      	bne.n	8016018 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2202      	movs	r2, #2
 8015ff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8015ffa:	4b2b      	ldr	r3, [pc, #172]	; (80160a8 <USBD_SetConfig+0x144>)
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	461a      	mov	r2, r3
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016004:	4b28      	ldr	r3, [pc, #160]	; (80160a8 <USBD_SetConfig+0x144>)
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	4619      	mov	r1, r3
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f7ff f99b 	bl	8015346 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f000 f9cf 	bl	80163b4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8016016:	e042      	b.n	801609e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8016018:	4b23      	ldr	r3, [pc, #140]	; (80160a8 <USBD_SetConfig+0x144>)
 801601a:	781b      	ldrb	r3, [r3, #0]
 801601c:	461a      	mov	r2, r3
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	685b      	ldr	r3, [r3, #4]
 8016022:	429a      	cmp	r2, r3
 8016024:	d02a      	beq.n	801607c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	685b      	ldr	r3, [r3, #4]
 801602a:	b2db      	uxtb	r3, r3
 801602c:	4619      	mov	r1, r3
 801602e:	6878      	ldr	r0, [r7, #4]
 8016030:	f7ff f989 	bl	8015346 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8016034:	4b1c      	ldr	r3, [pc, #112]	; (80160a8 <USBD_SetConfig+0x144>)
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	461a      	mov	r2, r3
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801603e:	4b1a      	ldr	r3, [pc, #104]	; (80160a8 <USBD_SetConfig+0x144>)
 8016040:	781b      	ldrb	r3, [r3, #0]
 8016042:	4619      	mov	r1, r3
 8016044:	6878      	ldr	r0, [r7, #4]
 8016046:	f7ff f962 	bl	801530e <USBD_SetClassConfig>
 801604a:	4603      	mov	r3, r0
 801604c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801604e:	7bfb      	ldrb	r3, [r7, #15]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d00f      	beq.n	8016074 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8016054:	6839      	ldr	r1, [r7, #0]
 8016056:	6878      	ldr	r0, [r7, #4]
 8016058:	f000 f8fe 	bl	8016258 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	685b      	ldr	r3, [r3, #4]
 8016060:	b2db      	uxtb	r3, r3
 8016062:	4619      	mov	r1, r3
 8016064:	6878      	ldr	r0, [r7, #4]
 8016066:	f7ff f96e 	bl	8015346 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	2202      	movs	r2, #2
 801606e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8016072:	e014      	b.n	801609e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f000 f99d 	bl	80163b4 <USBD_CtlSendStatus>
    break;
 801607a:	e010      	b.n	801609e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801607c:	6878      	ldr	r0, [r7, #4]
 801607e:	f000 f999 	bl	80163b4 <USBD_CtlSendStatus>
    break;
 8016082:	e00c      	b.n	801609e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8016084:	6839      	ldr	r1, [r7, #0]
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f000 f8e6 	bl	8016258 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 801608c:	4b06      	ldr	r3, [pc, #24]	; (80160a8 <USBD_SetConfig+0x144>)
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	4619      	mov	r1, r3
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f7ff f957 	bl	8015346 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8016098:	2303      	movs	r3, #3
 801609a:	73fb      	strb	r3, [r7, #15]
    break;
 801609c:	bf00      	nop
  }

  return ret;
 801609e:	7bfb      	ldrb	r3, [r7, #15]
}
 80160a0:	4618      	mov	r0, r3
 80160a2:	3710      	adds	r7, #16
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}
 80160a8:	24000b58 	.word	0x24000b58

080160ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b082      	sub	sp, #8
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
 80160b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	88db      	ldrh	r3, [r3, #6]
 80160ba:	2b01      	cmp	r3, #1
 80160bc:	d004      	beq.n	80160c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80160be:	6839      	ldr	r1, [r7, #0]
 80160c0:	6878      	ldr	r0, [r7, #4]
 80160c2:	f000 f8c9 	bl	8016258 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80160c6:	e021      	b.n	801610c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160ce:	2b01      	cmp	r3, #1
 80160d0:	db17      	blt.n	8016102 <USBD_GetConfig+0x56>
 80160d2:	2b02      	cmp	r3, #2
 80160d4:	dd02      	ble.n	80160dc <USBD_GetConfig+0x30>
 80160d6:	2b03      	cmp	r3, #3
 80160d8:	d00b      	beq.n	80160f2 <USBD_GetConfig+0x46>
 80160da:	e012      	b.n	8016102 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	2200      	movs	r2, #0
 80160e0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	3308      	adds	r3, #8
 80160e6:	2201      	movs	r2, #1
 80160e8:	4619      	mov	r1, r3
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f000 f925 	bl	801633a <USBD_CtlSendData>
      break;
 80160f0:	e00c      	b.n	801610c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	3304      	adds	r3, #4
 80160f6:	2201      	movs	r2, #1
 80160f8:	4619      	mov	r1, r3
 80160fa:	6878      	ldr	r0, [r7, #4]
 80160fc:	f000 f91d 	bl	801633a <USBD_CtlSendData>
      break;
 8016100:	e004      	b.n	801610c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8016102:	6839      	ldr	r1, [r7, #0]
 8016104:	6878      	ldr	r0, [r7, #4]
 8016106:	f000 f8a7 	bl	8016258 <USBD_CtlError>
      break;
 801610a:	bf00      	nop
}
 801610c:	bf00      	nop
 801610e:	3708      	adds	r7, #8
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}

08016114 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b082      	sub	sp, #8
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016124:	3b01      	subs	r3, #1
 8016126:	2b02      	cmp	r3, #2
 8016128:	d81e      	bhi.n	8016168 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801612a:	683b      	ldr	r3, [r7, #0]
 801612c:	88db      	ldrh	r3, [r3, #6]
 801612e:	2b02      	cmp	r3, #2
 8016130:	d004      	beq.n	801613c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8016132:	6839      	ldr	r1, [r7, #0]
 8016134:	6878      	ldr	r0, [r7, #4]
 8016136:	f000 f88f 	bl	8016258 <USBD_CtlError>
      break;
 801613a:	e01a      	b.n	8016172 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2201      	movs	r2, #1
 8016140:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016148:	2b00      	cmp	r3, #0
 801614a:	d005      	beq.n	8016158 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	68db      	ldr	r3, [r3, #12]
 8016150:	f043 0202 	orr.w	r2, r3, #2
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	330c      	adds	r3, #12
 801615c:	2202      	movs	r2, #2
 801615e:	4619      	mov	r1, r3
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	f000 f8ea 	bl	801633a <USBD_CtlSendData>
    break;
 8016166:	e004      	b.n	8016172 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8016168:	6839      	ldr	r1, [r7, #0]
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f000 f874 	bl	8016258 <USBD_CtlError>
    break;
 8016170:	bf00      	nop
  }
}
 8016172:	bf00      	nop
 8016174:	3708      	adds	r7, #8
 8016176:	46bd      	mov	sp, r7
 8016178:	bd80      	pop	{r7, pc}

0801617a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801617a:	b580      	push	{r7, lr}
 801617c:	b082      	sub	sp, #8
 801617e:	af00      	add	r7, sp, #0
 8016180:	6078      	str	r0, [r7, #4]
 8016182:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016184:	683b      	ldr	r3, [r7, #0]
 8016186:	885b      	ldrh	r3, [r3, #2]
 8016188:	2b01      	cmp	r3, #1
 801618a:	d106      	bne.n	801619a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	2201      	movs	r2, #1
 8016190:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f000 f90d 	bl	80163b4 <USBD_CtlSendStatus>
  }
}
 801619a:	bf00      	nop
 801619c:	3708      	adds	r7, #8
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd80      	pop	{r7, pc}

080161a2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161a2:	b580      	push	{r7, lr}
 80161a4:	b082      	sub	sp, #8
 80161a6:	af00      	add	r7, sp, #0
 80161a8:	6078      	str	r0, [r7, #4]
 80161aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161b2:	3b01      	subs	r3, #1
 80161b4:	2b02      	cmp	r3, #2
 80161b6:	d80b      	bhi.n	80161d0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	885b      	ldrh	r3, [r3, #2]
 80161bc:	2b01      	cmp	r3, #1
 80161be:	d10c      	bne.n	80161da <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	2200      	movs	r2, #0
 80161c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80161c8:	6878      	ldr	r0, [r7, #4]
 80161ca:	f000 f8f3 	bl	80163b4 <USBD_CtlSendStatus>
      }
      break;
 80161ce:	e004      	b.n	80161da <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80161d0:	6839      	ldr	r1, [r7, #0]
 80161d2:	6878      	ldr	r0, [r7, #4]
 80161d4:	f000 f840 	bl	8016258 <USBD_CtlError>
      break;
 80161d8:	e000      	b.n	80161dc <USBD_ClrFeature+0x3a>
      break;
 80161da:	bf00      	nop
  }
}
 80161dc:	bf00      	nop
 80161de:	3708      	adds	r7, #8
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd80      	pop	{r7, pc}

080161e4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b084      	sub	sp, #16
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
 80161ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80161ee:	683b      	ldr	r3, [r7, #0]
 80161f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	781a      	ldrb	r2, [r3, #0]
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	3301      	adds	r3, #1
 80161fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	781a      	ldrb	r2, [r3, #0]
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	3301      	adds	r3, #1
 801620c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801620e:	68f8      	ldr	r0, [r7, #12]
 8016210:	f7ff fad4 	bl	80157bc <SWAPBYTE>
 8016214:	4603      	mov	r3, r0
 8016216:	461a      	mov	r2, r3
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	3301      	adds	r3, #1
 8016220:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	3301      	adds	r3, #1
 8016226:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016228:	68f8      	ldr	r0, [r7, #12]
 801622a:	f7ff fac7 	bl	80157bc <SWAPBYTE>
 801622e:	4603      	mov	r3, r0
 8016230:	461a      	mov	r2, r3
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	3301      	adds	r3, #1
 801623a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	3301      	adds	r3, #1
 8016240:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016242:	68f8      	ldr	r0, [r7, #12]
 8016244:	f7ff faba 	bl	80157bc <SWAPBYTE>
 8016248:	4603      	mov	r3, r0
 801624a:	461a      	mov	r2, r3
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	80da      	strh	r2, [r3, #6]
}
 8016250:	bf00      	nop
 8016252:	3710      	adds	r7, #16
 8016254:	46bd      	mov	sp, r7
 8016256:	bd80      	pop	{r7, pc}

08016258 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b082      	sub	sp, #8
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
 8016260:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016262:	2180      	movs	r1, #128	; 0x80
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f002 ffb0 	bl	80191ca <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801626a:	2100      	movs	r1, #0
 801626c:	6878      	ldr	r0, [r7, #4]
 801626e:	f002 ffac 	bl	80191ca <USBD_LL_StallEP>
}
 8016272:	bf00      	nop
 8016274:	3708      	adds	r7, #8
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}

0801627a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801627a:	b580      	push	{r7, lr}
 801627c:	b086      	sub	sp, #24
 801627e:	af00      	add	r7, sp, #0
 8016280:	60f8      	str	r0, [r7, #12]
 8016282:	60b9      	str	r1, [r7, #8]
 8016284:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016286:	2300      	movs	r3, #0
 8016288:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d036      	beq.n	80162fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016294:	6938      	ldr	r0, [r7, #16]
 8016296:	f000 f836 	bl	8016306 <USBD_GetLen>
 801629a:	4603      	mov	r3, r0
 801629c:	3301      	adds	r3, #1
 801629e:	b29b      	uxth	r3, r3
 80162a0:	005b      	lsls	r3, r3, #1
 80162a2:	b29a      	uxth	r2, r3
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80162a8:	7dfb      	ldrb	r3, [r7, #23]
 80162aa:	68ba      	ldr	r2, [r7, #8]
 80162ac:	4413      	add	r3, r2
 80162ae:	687a      	ldr	r2, [r7, #4]
 80162b0:	7812      	ldrb	r2, [r2, #0]
 80162b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80162b4:	7dfb      	ldrb	r3, [r7, #23]
 80162b6:	3301      	adds	r3, #1
 80162b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80162ba:	7dfb      	ldrb	r3, [r7, #23]
 80162bc:	68ba      	ldr	r2, [r7, #8]
 80162be:	4413      	add	r3, r2
 80162c0:	2203      	movs	r2, #3
 80162c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80162c4:	7dfb      	ldrb	r3, [r7, #23]
 80162c6:	3301      	adds	r3, #1
 80162c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80162ca:	e013      	b.n	80162f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80162cc:	7dfb      	ldrb	r3, [r7, #23]
 80162ce:	68ba      	ldr	r2, [r7, #8]
 80162d0:	4413      	add	r3, r2
 80162d2:	693a      	ldr	r2, [r7, #16]
 80162d4:	7812      	ldrb	r2, [r2, #0]
 80162d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80162d8:	693b      	ldr	r3, [r7, #16]
 80162da:	3301      	adds	r3, #1
 80162dc:	613b      	str	r3, [r7, #16]
    idx++;
 80162de:	7dfb      	ldrb	r3, [r7, #23]
 80162e0:	3301      	adds	r3, #1
 80162e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80162e4:	7dfb      	ldrb	r3, [r7, #23]
 80162e6:	68ba      	ldr	r2, [r7, #8]
 80162e8:	4413      	add	r3, r2
 80162ea:	2200      	movs	r2, #0
 80162ec:	701a      	strb	r2, [r3, #0]
    idx++;
 80162ee:	7dfb      	ldrb	r3, [r7, #23]
 80162f0:	3301      	adds	r3, #1
 80162f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80162f4:	693b      	ldr	r3, [r7, #16]
 80162f6:	781b      	ldrb	r3, [r3, #0]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d1e7      	bne.n	80162cc <USBD_GetString+0x52>
 80162fc:	e000      	b.n	8016300 <USBD_GetString+0x86>
    return;
 80162fe:	bf00      	nop
  }
}
 8016300:	3718      	adds	r7, #24
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}

08016306 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016306:	b480      	push	{r7}
 8016308:	b085      	sub	sp, #20
 801630a:	af00      	add	r7, sp, #0
 801630c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801630e:	2300      	movs	r3, #0
 8016310:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016316:	e005      	b.n	8016324 <USBD_GetLen+0x1e>
  {
    len++;
 8016318:	7bfb      	ldrb	r3, [r7, #15]
 801631a:	3301      	adds	r3, #1
 801631c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801631e:	68bb      	ldr	r3, [r7, #8]
 8016320:	3301      	adds	r3, #1
 8016322:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016324:	68bb      	ldr	r3, [r7, #8]
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d1f5      	bne.n	8016318 <USBD_GetLen+0x12>
  }

  return len;
 801632c:	7bfb      	ldrb	r3, [r7, #15]
}
 801632e:	4618      	mov	r0, r3
 8016330:	3714      	adds	r7, #20
 8016332:	46bd      	mov	sp, r7
 8016334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016338:	4770      	bx	lr

0801633a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801633a:	b580      	push	{r7, lr}
 801633c:	b084      	sub	sp, #16
 801633e:	af00      	add	r7, sp, #0
 8016340:	60f8      	str	r0, [r7, #12]
 8016342:	60b9      	str	r1, [r7, #8]
 8016344:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	2202      	movs	r2, #2
 801634a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	687a      	ldr	r2, [r7, #4]
 8016352:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	687a      	ldr	r2, [r7, #4]
 8016358:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	68ba      	ldr	r2, [r7, #8]
 801635e:	2100      	movs	r1, #0
 8016360:	68f8      	ldr	r0, [r7, #12]
 8016362:	f002 ffbb 	bl	80192dc <USBD_LL_Transmit>

  return USBD_OK;
 8016366:	2300      	movs	r3, #0
}
 8016368:	4618      	mov	r0, r3
 801636a:	3710      	adds	r7, #16
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}

08016370 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b084      	sub	sp, #16
 8016374:	af00      	add	r7, sp, #0
 8016376:	60f8      	str	r0, [r7, #12]
 8016378:	60b9      	str	r1, [r7, #8]
 801637a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	68ba      	ldr	r2, [r7, #8]
 8016380:	2100      	movs	r1, #0
 8016382:	68f8      	ldr	r0, [r7, #12]
 8016384:	f002 ffaa 	bl	80192dc <USBD_LL_Transmit>

  return USBD_OK;
 8016388:	2300      	movs	r3, #0
}
 801638a:	4618      	mov	r0, r3
 801638c:	3710      	adds	r7, #16
 801638e:	46bd      	mov	sp, r7
 8016390:	bd80      	pop	{r7, pc}

08016392 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016392:	b580      	push	{r7, lr}
 8016394:	b084      	sub	sp, #16
 8016396:	af00      	add	r7, sp, #0
 8016398:	60f8      	str	r0, [r7, #12]
 801639a:	60b9      	str	r1, [r7, #8]
 801639c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	68ba      	ldr	r2, [r7, #8]
 80163a2:	2100      	movs	r1, #0
 80163a4:	68f8      	ldr	r0, [r7, #12]
 80163a6:	f002 ffba 	bl	801931e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80163aa:	2300      	movs	r3, #0
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	3710      	adds	r7, #16
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}

080163b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b082      	sub	sp, #8
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	2204      	movs	r2, #4
 80163c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80163c4:	2300      	movs	r3, #0
 80163c6:	2200      	movs	r2, #0
 80163c8:	2100      	movs	r1, #0
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	f002 ff86 	bl	80192dc <USBD_LL_Transmit>

  return USBD_OK;
 80163d0:	2300      	movs	r3, #0
}
 80163d2:	4618      	mov	r0, r3
 80163d4:	3708      	adds	r7, #8
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd80      	pop	{r7, pc}

080163da <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80163da:	b580      	push	{r7, lr}
 80163dc:	b082      	sub	sp, #8
 80163de:	af00      	add	r7, sp, #0
 80163e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	2205      	movs	r2, #5
 80163e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80163ea:	2300      	movs	r3, #0
 80163ec:	2200      	movs	r2, #0
 80163ee:	2100      	movs	r1, #0
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	f002 ff94 	bl	801931e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80163f6:	2300      	movs	r3, #0
}
 80163f8:	4618      	mov	r0, r3
 80163fa:	3708      	adds	r7, #8
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}

08016400 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b084      	sub	sp, #16
 8016404:	af00      	add	r7, sp, #0
 8016406:	4603      	mov	r3, r0
 8016408:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801640a:	79fb      	ldrb	r3, [r7, #7]
 801640c:	4a08      	ldr	r2, [pc, #32]	; (8016430 <disk_status+0x30>)
 801640e:	009b      	lsls	r3, r3, #2
 8016410:	4413      	add	r3, r2
 8016412:	685b      	ldr	r3, [r3, #4]
 8016414:	685b      	ldr	r3, [r3, #4]
 8016416:	79fa      	ldrb	r2, [r7, #7]
 8016418:	4905      	ldr	r1, [pc, #20]	; (8016430 <disk_status+0x30>)
 801641a:	440a      	add	r2, r1
 801641c:	7a12      	ldrb	r2, [r2, #8]
 801641e:	4610      	mov	r0, r2
 8016420:	4798      	blx	r3
 8016422:	4603      	mov	r3, r0
 8016424:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016426:	7bfb      	ldrb	r3, [r7, #15]
}
 8016428:	4618      	mov	r0, r3
 801642a:	3710      	adds	r7, #16
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}
 8016430:	24000b84 	.word	0x24000b84

08016434 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b084      	sub	sp, #16
 8016438:	af00      	add	r7, sp, #0
 801643a:	4603      	mov	r3, r0
 801643c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801643e:	2300      	movs	r3, #0
 8016440:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016442:	79fb      	ldrb	r3, [r7, #7]
 8016444:	4a0d      	ldr	r2, [pc, #52]	; (801647c <disk_initialize+0x48>)
 8016446:	5cd3      	ldrb	r3, [r2, r3]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d111      	bne.n	8016470 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801644c:	79fb      	ldrb	r3, [r7, #7]
 801644e:	4a0b      	ldr	r2, [pc, #44]	; (801647c <disk_initialize+0x48>)
 8016450:	2101      	movs	r1, #1
 8016452:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016454:	79fb      	ldrb	r3, [r7, #7]
 8016456:	4a09      	ldr	r2, [pc, #36]	; (801647c <disk_initialize+0x48>)
 8016458:	009b      	lsls	r3, r3, #2
 801645a:	4413      	add	r3, r2
 801645c:	685b      	ldr	r3, [r3, #4]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	79fa      	ldrb	r2, [r7, #7]
 8016462:	4906      	ldr	r1, [pc, #24]	; (801647c <disk_initialize+0x48>)
 8016464:	440a      	add	r2, r1
 8016466:	7a12      	ldrb	r2, [r2, #8]
 8016468:	4610      	mov	r0, r2
 801646a:	4798      	blx	r3
 801646c:	4603      	mov	r3, r0
 801646e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016470:	7bfb      	ldrb	r3, [r7, #15]
}
 8016472:	4618      	mov	r0, r3
 8016474:	3710      	adds	r7, #16
 8016476:	46bd      	mov	sp, r7
 8016478:	bd80      	pop	{r7, pc}
 801647a:	bf00      	nop
 801647c:	24000b84 	.word	0x24000b84

08016480 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016480:	b590      	push	{r4, r7, lr}
 8016482:	b087      	sub	sp, #28
 8016484:	af00      	add	r7, sp, #0
 8016486:	60b9      	str	r1, [r7, #8]
 8016488:	607a      	str	r2, [r7, #4]
 801648a:	603b      	str	r3, [r7, #0]
 801648c:	4603      	mov	r3, r0
 801648e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016490:	7bfb      	ldrb	r3, [r7, #15]
 8016492:	4a0a      	ldr	r2, [pc, #40]	; (80164bc <disk_read+0x3c>)
 8016494:	009b      	lsls	r3, r3, #2
 8016496:	4413      	add	r3, r2
 8016498:	685b      	ldr	r3, [r3, #4]
 801649a:	689c      	ldr	r4, [r3, #8]
 801649c:	7bfb      	ldrb	r3, [r7, #15]
 801649e:	4a07      	ldr	r2, [pc, #28]	; (80164bc <disk_read+0x3c>)
 80164a0:	4413      	add	r3, r2
 80164a2:	7a18      	ldrb	r0, [r3, #8]
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	687a      	ldr	r2, [r7, #4]
 80164a8:	68b9      	ldr	r1, [r7, #8]
 80164aa:	47a0      	blx	r4
 80164ac:	4603      	mov	r3, r0
 80164ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80164b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80164b2:	4618      	mov	r0, r3
 80164b4:	371c      	adds	r7, #28
 80164b6:	46bd      	mov	sp, r7
 80164b8:	bd90      	pop	{r4, r7, pc}
 80164ba:	bf00      	nop
 80164bc:	24000b84 	.word	0x24000b84

080164c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80164c0:	b590      	push	{r4, r7, lr}
 80164c2:	b087      	sub	sp, #28
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	60b9      	str	r1, [r7, #8]
 80164c8:	607a      	str	r2, [r7, #4]
 80164ca:	603b      	str	r3, [r7, #0]
 80164cc:	4603      	mov	r3, r0
 80164ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80164d0:	7bfb      	ldrb	r3, [r7, #15]
 80164d2:	4a0a      	ldr	r2, [pc, #40]	; (80164fc <disk_write+0x3c>)
 80164d4:	009b      	lsls	r3, r3, #2
 80164d6:	4413      	add	r3, r2
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	68dc      	ldr	r4, [r3, #12]
 80164dc:	7bfb      	ldrb	r3, [r7, #15]
 80164de:	4a07      	ldr	r2, [pc, #28]	; (80164fc <disk_write+0x3c>)
 80164e0:	4413      	add	r3, r2
 80164e2:	7a18      	ldrb	r0, [r3, #8]
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	687a      	ldr	r2, [r7, #4]
 80164e8:	68b9      	ldr	r1, [r7, #8]
 80164ea:	47a0      	blx	r4
 80164ec:	4603      	mov	r3, r0
 80164ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80164f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80164f2:	4618      	mov	r0, r3
 80164f4:	371c      	adds	r7, #28
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd90      	pop	{r4, r7, pc}
 80164fa:	bf00      	nop
 80164fc:	24000b84 	.word	0x24000b84

08016500 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b084      	sub	sp, #16
 8016504:	af00      	add	r7, sp, #0
 8016506:	4603      	mov	r3, r0
 8016508:	603a      	str	r2, [r7, #0]
 801650a:	71fb      	strb	r3, [r7, #7]
 801650c:	460b      	mov	r3, r1
 801650e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016510:	79fb      	ldrb	r3, [r7, #7]
 8016512:	4a09      	ldr	r2, [pc, #36]	; (8016538 <disk_ioctl+0x38>)
 8016514:	009b      	lsls	r3, r3, #2
 8016516:	4413      	add	r3, r2
 8016518:	685b      	ldr	r3, [r3, #4]
 801651a:	691b      	ldr	r3, [r3, #16]
 801651c:	79fa      	ldrb	r2, [r7, #7]
 801651e:	4906      	ldr	r1, [pc, #24]	; (8016538 <disk_ioctl+0x38>)
 8016520:	440a      	add	r2, r1
 8016522:	7a10      	ldrb	r0, [r2, #8]
 8016524:	79b9      	ldrb	r1, [r7, #6]
 8016526:	683a      	ldr	r2, [r7, #0]
 8016528:	4798      	blx	r3
 801652a:	4603      	mov	r3, r0
 801652c:	73fb      	strb	r3, [r7, #15]
  return res;
 801652e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016530:	4618      	mov	r0, r3
 8016532:	3710      	adds	r7, #16
 8016534:	46bd      	mov	sp, r7
 8016536:	bd80      	pop	{r7, pc}
 8016538:	24000b84 	.word	0x24000b84

0801653c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801653c:	b480      	push	{r7}
 801653e:	b085      	sub	sp, #20
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	3301      	adds	r3, #1
 8016548:	781b      	ldrb	r3, [r3, #0]
 801654a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801654c:	89fb      	ldrh	r3, [r7, #14]
 801654e:	021b      	lsls	r3, r3, #8
 8016550:	b21a      	sxth	r2, r3
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	781b      	ldrb	r3, [r3, #0]
 8016556:	b21b      	sxth	r3, r3
 8016558:	4313      	orrs	r3, r2
 801655a:	b21b      	sxth	r3, r3
 801655c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801655e:	89fb      	ldrh	r3, [r7, #14]
}
 8016560:	4618      	mov	r0, r3
 8016562:	3714      	adds	r7, #20
 8016564:	46bd      	mov	sp, r7
 8016566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656a:	4770      	bx	lr

0801656c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801656c:	b480      	push	{r7}
 801656e:	b085      	sub	sp, #20
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	3303      	adds	r3, #3
 8016578:	781b      	ldrb	r3, [r3, #0]
 801657a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	021b      	lsls	r3, r3, #8
 8016580:	687a      	ldr	r2, [r7, #4]
 8016582:	3202      	adds	r2, #2
 8016584:	7812      	ldrb	r2, [r2, #0]
 8016586:	4313      	orrs	r3, r2
 8016588:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	021b      	lsls	r3, r3, #8
 801658e:	687a      	ldr	r2, [r7, #4]
 8016590:	3201      	adds	r2, #1
 8016592:	7812      	ldrb	r2, [r2, #0]
 8016594:	4313      	orrs	r3, r2
 8016596:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	021b      	lsls	r3, r3, #8
 801659c:	687a      	ldr	r2, [r7, #4]
 801659e:	7812      	ldrb	r2, [r2, #0]
 80165a0:	4313      	orrs	r3, r2
 80165a2:	60fb      	str	r3, [r7, #12]
	return rv;
 80165a4:	68fb      	ldr	r3, [r7, #12]
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3714      	adds	r7, #20
 80165aa:	46bd      	mov	sp, r7
 80165ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b0:	4770      	bx	lr

080165b2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80165b2:	b480      	push	{r7}
 80165b4:	b083      	sub	sp, #12
 80165b6:	af00      	add	r7, sp, #0
 80165b8:	6078      	str	r0, [r7, #4]
 80165ba:	460b      	mov	r3, r1
 80165bc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	1c5a      	adds	r2, r3, #1
 80165c2:	607a      	str	r2, [r7, #4]
 80165c4:	887a      	ldrh	r2, [r7, #2]
 80165c6:	b2d2      	uxtb	r2, r2
 80165c8:	701a      	strb	r2, [r3, #0]
 80165ca:	887b      	ldrh	r3, [r7, #2]
 80165cc:	0a1b      	lsrs	r3, r3, #8
 80165ce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	1c5a      	adds	r2, r3, #1
 80165d4:	607a      	str	r2, [r7, #4]
 80165d6:	887a      	ldrh	r2, [r7, #2]
 80165d8:	b2d2      	uxtb	r2, r2
 80165da:	701a      	strb	r2, [r3, #0]
}
 80165dc:	bf00      	nop
 80165de:	370c      	adds	r7, #12
 80165e0:	46bd      	mov	sp, r7
 80165e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e6:	4770      	bx	lr

080165e8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80165e8:	b480      	push	{r7}
 80165ea:	b083      	sub	sp, #12
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
 80165f0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	1c5a      	adds	r2, r3, #1
 80165f6:	607a      	str	r2, [r7, #4]
 80165f8:	683a      	ldr	r2, [r7, #0]
 80165fa:	b2d2      	uxtb	r2, r2
 80165fc:	701a      	strb	r2, [r3, #0]
 80165fe:	683b      	ldr	r3, [r7, #0]
 8016600:	0a1b      	lsrs	r3, r3, #8
 8016602:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	1c5a      	adds	r2, r3, #1
 8016608:	607a      	str	r2, [r7, #4]
 801660a:	683a      	ldr	r2, [r7, #0]
 801660c:	b2d2      	uxtb	r2, r2
 801660e:	701a      	strb	r2, [r3, #0]
 8016610:	683b      	ldr	r3, [r7, #0]
 8016612:	0a1b      	lsrs	r3, r3, #8
 8016614:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	1c5a      	adds	r2, r3, #1
 801661a:	607a      	str	r2, [r7, #4]
 801661c:	683a      	ldr	r2, [r7, #0]
 801661e:	b2d2      	uxtb	r2, r2
 8016620:	701a      	strb	r2, [r3, #0]
 8016622:	683b      	ldr	r3, [r7, #0]
 8016624:	0a1b      	lsrs	r3, r3, #8
 8016626:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	1c5a      	adds	r2, r3, #1
 801662c:	607a      	str	r2, [r7, #4]
 801662e:	683a      	ldr	r2, [r7, #0]
 8016630:	b2d2      	uxtb	r2, r2
 8016632:	701a      	strb	r2, [r3, #0]
}
 8016634:	bf00      	nop
 8016636:	370c      	adds	r7, #12
 8016638:	46bd      	mov	sp, r7
 801663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663e:	4770      	bx	lr

08016640 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016640:	b480      	push	{r7}
 8016642:	b087      	sub	sp, #28
 8016644:	af00      	add	r7, sp, #0
 8016646:	60f8      	str	r0, [r7, #12]
 8016648:	60b9      	str	r1, [r7, #8]
 801664a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016650:	68bb      	ldr	r3, [r7, #8]
 8016652:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d00d      	beq.n	8016676 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801665a:	693a      	ldr	r2, [r7, #16]
 801665c:	1c53      	adds	r3, r2, #1
 801665e:	613b      	str	r3, [r7, #16]
 8016660:	697b      	ldr	r3, [r7, #20]
 8016662:	1c59      	adds	r1, r3, #1
 8016664:	6179      	str	r1, [r7, #20]
 8016666:	7812      	ldrb	r2, [r2, #0]
 8016668:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	3b01      	subs	r3, #1
 801666e:	607b      	str	r3, [r7, #4]
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d1f1      	bne.n	801665a <mem_cpy+0x1a>
	}
}
 8016676:	bf00      	nop
 8016678:	371c      	adds	r7, #28
 801667a:	46bd      	mov	sp, r7
 801667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016680:	4770      	bx	lr

08016682 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016682:	b480      	push	{r7}
 8016684:	b087      	sub	sp, #28
 8016686:	af00      	add	r7, sp, #0
 8016688:	60f8      	str	r0, [r7, #12]
 801668a:	60b9      	str	r1, [r7, #8]
 801668c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8016692:	697b      	ldr	r3, [r7, #20]
 8016694:	1c5a      	adds	r2, r3, #1
 8016696:	617a      	str	r2, [r7, #20]
 8016698:	68ba      	ldr	r2, [r7, #8]
 801669a:	b2d2      	uxtb	r2, r2
 801669c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	3b01      	subs	r3, #1
 80166a2:	607b      	str	r3, [r7, #4]
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d1f3      	bne.n	8016692 <mem_set+0x10>
}
 80166aa:	bf00      	nop
 80166ac:	371c      	adds	r7, #28
 80166ae:	46bd      	mov	sp, r7
 80166b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b4:	4770      	bx	lr

080166b6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80166b6:	b480      	push	{r7}
 80166b8:	b089      	sub	sp, #36	; 0x24
 80166ba:	af00      	add	r7, sp, #0
 80166bc:	60f8      	str	r0, [r7, #12]
 80166be:	60b9      	str	r1, [r7, #8]
 80166c0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	61fb      	str	r3, [r7, #28]
 80166c6:	68bb      	ldr	r3, [r7, #8]
 80166c8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80166ca:	2300      	movs	r3, #0
 80166cc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80166ce:	69fb      	ldr	r3, [r7, #28]
 80166d0:	1c5a      	adds	r2, r3, #1
 80166d2:	61fa      	str	r2, [r7, #28]
 80166d4:	781b      	ldrb	r3, [r3, #0]
 80166d6:	4619      	mov	r1, r3
 80166d8:	69bb      	ldr	r3, [r7, #24]
 80166da:	1c5a      	adds	r2, r3, #1
 80166dc:	61ba      	str	r2, [r7, #24]
 80166de:	781b      	ldrb	r3, [r3, #0]
 80166e0:	1acb      	subs	r3, r1, r3
 80166e2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	3b01      	subs	r3, #1
 80166e8:	607b      	str	r3, [r7, #4]
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d002      	beq.n	80166f6 <mem_cmp+0x40>
 80166f0:	697b      	ldr	r3, [r7, #20]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d0eb      	beq.n	80166ce <mem_cmp+0x18>

	return r;
 80166f6:	697b      	ldr	r3, [r7, #20]
}
 80166f8:	4618      	mov	r0, r3
 80166fa:	3724      	adds	r7, #36	; 0x24
 80166fc:	46bd      	mov	sp, r7
 80166fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016702:	4770      	bx	lr

08016704 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016704:	b480      	push	{r7}
 8016706:	b083      	sub	sp, #12
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
 801670c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801670e:	e002      	b.n	8016716 <chk_chr+0x12>
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	3301      	adds	r3, #1
 8016714:	607b      	str	r3, [r7, #4]
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	781b      	ldrb	r3, [r3, #0]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d005      	beq.n	801672a <chk_chr+0x26>
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	781b      	ldrb	r3, [r3, #0]
 8016722:	461a      	mov	r2, r3
 8016724:	683b      	ldr	r3, [r7, #0]
 8016726:	4293      	cmp	r3, r2
 8016728:	d1f2      	bne.n	8016710 <chk_chr+0xc>
	return *str;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	781b      	ldrb	r3, [r3, #0]
}
 801672e:	4618      	mov	r0, r3
 8016730:	370c      	adds	r7, #12
 8016732:	46bd      	mov	sp, r7
 8016734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016738:	4770      	bx	lr
	...

0801673c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801673c:	b480      	push	{r7}
 801673e:	b085      	sub	sp, #20
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
 8016744:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016746:	2300      	movs	r3, #0
 8016748:	60bb      	str	r3, [r7, #8]
 801674a:	68bb      	ldr	r3, [r7, #8]
 801674c:	60fb      	str	r3, [r7, #12]
 801674e:	e029      	b.n	80167a4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016750:	4a27      	ldr	r2, [pc, #156]	; (80167f0 <chk_lock+0xb4>)
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	011b      	lsls	r3, r3, #4
 8016756:	4413      	add	r3, r2
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d01d      	beq.n	801679a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801675e:	4a24      	ldr	r2, [pc, #144]	; (80167f0 <chk_lock+0xb4>)
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	011b      	lsls	r3, r3, #4
 8016764:	4413      	add	r3, r2
 8016766:	681a      	ldr	r2, [r3, #0]
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	429a      	cmp	r2, r3
 801676e:	d116      	bne.n	801679e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016770:	4a1f      	ldr	r2, [pc, #124]	; (80167f0 <chk_lock+0xb4>)
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	011b      	lsls	r3, r3, #4
 8016776:	4413      	add	r3, r2
 8016778:	3304      	adds	r3, #4
 801677a:	681a      	ldr	r2, [r3, #0]
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016780:	429a      	cmp	r2, r3
 8016782:	d10c      	bne.n	801679e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016784:	4a1a      	ldr	r2, [pc, #104]	; (80167f0 <chk_lock+0xb4>)
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	011b      	lsls	r3, r3, #4
 801678a:	4413      	add	r3, r2
 801678c:	3308      	adds	r3, #8
 801678e:	681a      	ldr	r2, [r3, #0]
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016794:	429a      	cmp	r2, r3
 8016796:	d102      	bne.n	801679e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016798:	e007      	b.n	80167aa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801679a:	2301      	movs	r3, #1
 801679c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	3301      	adds	r3, #1
 80167a2:	60fb      	str	r3, [r7, #12]
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	2b01      	cmp	r3, #1
 80167a8:	d9d2      	bls.n	8016750 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	2b02      	cmp	r3, #2
 80167ae:	d109      	bne.n	80167c4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80167b0:	68bb      	ldr	r3, [r7, #8]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d102      	bne.n	80167bc <chk_lock+0x80>
 80167b6:	683b      	ldr	r3, [r7, #0]
 80167b8:	2b02      	cmp	r3, #2
 80167ba:	d101      	bne.n	80167c0 <chk_lock+0x84>
 80167bc:	2300      	movs	r3, #0
 80167be:	e010      	b.n	80167e2 <chk_lock+0xa6>
 80167c0:	2312      	movs	r3, #18
 80167c2:	e00e      	b.n	80167e2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80167c4:	683b      	ldr	r3, [r7, #0]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d108      	bne.n	80167dc <chk_lock+0xa0>
 80167ca:	4a09      	ldr	r2, [pc, #36]	; (80167f0 <chk_lock+0xb4>)
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	011b      	lsls	r3, r3, #4
 80167d0:	4413      	add	r3, r2
 80167d2:	330c      	adds	r3, #12
 80167d4:	881b      	ldrh	r3, [r3, #0]
 80167d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167da:	d101      	bne.n	80167e0 <chk_lock+0xa4>
 80167dc:	2310      	movs	r3, #16
 80167de:	e000      	b.n	80167e2 <chk_lock+0xa6>
 80167e0:	2300      	movs	r3, #0
}
 80167e2:	4618      	mov	r0, r3
 80167e4:	3714      	adds	r7, #20
 80167e6:	46bd      	mov	sp, r7
 80167e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ec:	4770      	bx	lr
 80167ee:	bf00      	nop
 80167f0:	24000b64 	.word	0x24000b64

080167f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80167f4:	b480      	push	{r7}
 80167f6:	b083      	sub	sp, #12
 80167f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80167fa:	2300      	movs	r3, #0
 80167fc:	607b      	str	r3, [r7, #4]
 80167fe:	e002      	b.n	8016806 <enq_lock+0x12>
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	3301      	adds	r3, #1
 8016804:	607b      	str	r3, [r7, #4]
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	2b01      	cmp	r3, #1
 801680a:	d806      	bhi.n	801681a <enq_lock+0x26>
 801680c:	4a09      	ldr	r2, [pc, #36]	; (8016834 <enq_lock+0x40>)
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	011b      	lsls	r3, r3, #4
 8016812:	4413      	add	r3, r2
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d1f2      	bne.n	8016800 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2b02      	cmp	r3, #2
 801681e:	bf14      	ite	ne
 8016820:	2301      	movne	r3, #1
 8016822:	2300      	moveq	r3, #0
 8016824:	b2db      	uxtb	r3, r3
}
 8016826:	4618      	mov	r0, r3
 8016828:	370c      	adds	r7, #12
 801682a:	46bd      	mov	sp, r7
 801682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016830:	4770      	bx	lr
 8016832:	bf00      	nop
 8016834:	24000b64 	.word	0x24000b64

08016838 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016838:	b480      	push	{r7}
 801683a:	b085      	sub	sp, #20
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
 8016840:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016842:	2300      	movs	r3, #0
 8016844:	60fb      	str	r3, [r7, #12]
 8016846:	e01f      	b.n	8016888 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8016848:	4a41      	ldr	r2, [pc, #260]	; (8016950 <inc_lock+0x118>)
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	011b      	lsls	r3, r3, #4
 801684e:	4413      	add	r3, r2
 8016850:	681a      	ldr	r2, [r3, #0]
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	429a      	cmp	r2, r3
 8016858:	d113      	bne.n	8016882 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801685a:	4a3d      	ldr	r2, [pc, #244]	; (8016950 <inc_lock+0x118>)
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	011b      	lsls	r3, r3, #4
 8016860:	4413      	add	r3, r2
 8016862:	3304      	adds	r3, #4
 8016864:	681a      	ldr	r2, [r3, #0]
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801686a:	429a      	cmp	r2, r3
 801686c:	d109      	bne.n	8016882 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801686e:	4a38      	ldr	r2, [pc, #224]	; (8016950 <inc_lock+0x118>)
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	011b      	lsls	r3, r3, #4
 8016874:	4413      	add	r3, r2
 8016876:	3308      	adds	r3, #8
 8016878:	681a      	ldr	r2, [r3, #0]
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801687e:	429a      	cmp	r2, r3
 8016880:	d006      	beq.n	8016890 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	3301      	adds	r3, #1
 8016886:	60fb      	str	r3, [r7, #12]
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	2b01      	cmp	r3, #1
 801688c:	d9dc      	bls.n	8016848 <inc_lock+0x10>
 801688e:	e000      	b.n	8016892 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8016890:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	2b02      	cmp	r3, #2
 8016896:	d132      	bne.n	80168fe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016898:	2300      	movs	r3, #0
 801689a:	60fb      	str	r3, [r7, #12]
 801689c:	e002      	b.n	80168a4 <inc_lock+0x6c>
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	3301      	adds	r3, #1
 80168a2:	60fb      	str	r3, [r7, #12]
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	2b01      	cmp	r3, #1
 80168a8:	d806      	bhi.n	80168b8 <inc_lock+0x80>
 80168aa:	4a29      	ldr	r2, [pc, #164]	; (8016950 <inc_lock+0x118>)
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	011b      	lsls	r3, r3, #4
 80168b0:	4413      	add	r3, r2
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d1f2      	bne.n	801689e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	2b02      	cmp	r3, #2
 80168bc:	d101      	bne.n	80168c2 <inc_lock+0x8a>
 80168be:	2300      	movs	r3, #0
 80168c0:	e040      	b.n	8016944 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	681a      	ldr	r2, [r3, #0]
 80168c6:	4922      	ldr	r1, [pc, #136]	; (8016950 <inc_lock+0x118>)
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	011b      	lsls	r3, r3, #4
 80168cc:	440b      	add	r3, r1
 80168ce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	689a      	ldr	r2, [r3, #8]
 80168d4:	491e      	ldr	r1, [pc, #120]	; (8016950 <inc_lock+0x118>)
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	011b      	lsls	r3, r3, #4
 80168da:	440b      	add	r3, r1
 80168dc:	3304      	adds	r3, #4
 80168de:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	695a      	ldr	r2, [r3, #20]
 80168e4:	491a      	ldr	r1, [pc, #104]	; (8016950 <inc_lock+0x118>)
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	011b      	lsls	r3, r3, #4
 80168ea:	440b      	add	r3, r1
 80168ec:	3308      	adds	r3, #8
 80168ee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80168f0:	4a17      	ldr	r2, [pc, #92]	; (8016950 <inc_lock+0x118>)
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	011b      	lsls	r3, r3, #4
 80168f6:	4413      	add	r3, r2
 80168f8:	330c      	adds	r3, #12
 80168fa:	2200      	movs	r2, #0
 80168fc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80168fe:	683b      	ldr	r3, [r7, #0]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d009      	beq.n	8016918 <inc_lock+0xe0>
 8016904:	4a12      	ldr	r2, [pc, #72]	; (8016950 <inc_lock+0x118>)
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	011b      	lsls	r3, r3, #4
 801690a:	4413      	add	r3, r2
 801690c:	330c      	adds	r3, #12
 801690e:	881b      	ldrh	r3, [r3, #0]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d001      	beq.n	8016918 <inc_lock+0xe0>
 8016914:	2300      	movs	r3, #0
 8016916:	e015      	b.n	8016944 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d108      	bne.n	8016930 <inc_lock+0xf8>
 801691e:	4a0c      	ldr	r2, [pc, #48]	; (8016950 <inc_lock+0x118>)
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	011b      	lsls	r3, r3, #4
 8016924:	4413      	add	r3, r2
 8016926:	330c      	adds	r3, #12
 8016928:	881b      	ldrh	r3, [r3, #0]
 801692a:	3301      	adds	r3, #1
 801692c:	b29a      	uxth	r2, r3
 801692e:	e001      	b.n	8016934 <inc_lock+0xfc>
 8016930:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016934:	4906      	ldr	r1, [pc, #24]	; (8016950 <inc_lock+0x118>)
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	011b      	lsls	r3, r3, #4
 801693a:	440b      	add	r3, r1
 801693c:	330c      	adds	r3, #12
 801693e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	3301      	adds	r3, #1
}
 8016944:	4618      	mov	r0, r3
 8016946:	3714      	adds	r7, #20
 8016948:	46bd      	mov	sp, r7
 801694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694e:	4770      	bx	lr
 8016950:	24000b64 	.word	0x24000b64

08016954 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016954:	b480      	push	{r7}
 8016956:	b085      	sub	sp, #20
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	3b01      	subs	r3, #1
 8016960:	607b      	str	r3, [r7, #4]
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	2b01      	cmp	r3, #1
 8016966:	d825      	bhi.n	80169b4 <dec_lock+0x60>
		n = Files[i].ctr;
 8016968:	4a17      	ldr	r2, [pc, #92]	; (80169c8 <dec_lock+0x74>)
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	011b      	lsls	r3, r3, #4
 801696e:	4413      	add	r3, r2
 8016970:	330c      	adds	r3, #12
 8016972:	881b      	ldrh	r3, [r3, #0]
 8016974:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8016976:	89fb      	ldrh	r3, [r7, #14]
 8016978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801697c:	d101      	bne.n	8016982 <dec_lock+0x2e>
 801697e:	2300      	movs	r3, #0
 8016980:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8016982:	89fb      	ldrh	r3, [r7, #14]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d002      	beq.n	801698e <dec_lock+0x3a>
 8016988:	89fb      	ldrh	r3, [r7, #14]
 801698a:	3b01      	subs	r3, #1
 801698c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801698e:	4a0e      	ldr	r2, [pc, #56]	; (80169c8 <dec_lock+0x74>)
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	011b      	lsls	r3, r3, #4
 8016994:	4413      	add	r3, r2
 8016996:	330c      	adds	r3, #12
 8016998:	89fa      	ldrh	r2, [r7, #14]
 801699a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801699c:	89fb      	ldrh	r3, [r7, #14]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d105      	bne.n	80169ae <dec_lock+0x5a>
 80169a2:	4a09      	ldr	r2, [pc, #36]	; (80169c8 <dec_lock+0x74>)
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	011b      	lsls	r3, r3, #4
 80169a8:	4413      	add	r3, r2
 80169aa:	2200      	movs	r2, #0
 80169ac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80169ae:	2300      	movs	r3, #0
 80169b0:	737b      	strb	r3, [r7, #13]
 80169b2:	e001      	b.n	80169b8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80169b4:	2302      	movs	r3, #2
 80169b6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80169b8:	7b7b      	ldrb	r3, [r7, #13]
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	3714      	adds	r7, #20
 80169be:	46bd      	mov	sp, r7
 80169c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c4:	4770      	bx	lr
 80169c6:	bf00      	nop
 80169c8:	24000b64 	.word	0x24000b64

080169cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80169cc:	b480      	push	{r7}
 80169ce:	b085      	sub	sp, #20
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80169d4:	2300      	movs	r3, #0
 80169d6:	60fb      	str	r3, [r7, #12]
 80169d8:	e010      	b.n	80169fc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80169da:	4a0d      	ldr	r2, [pc, #52]	; (8016a10 <clear_lock+0x44>)
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	011b      	lsls	r3, r3, #4
 80169e0:	4413      	add	r3, r2
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	687a      	ldr	r2, [r7, #4]
 80169e6:	429a      	cmp	r2, r3
 80169e8:	d105      	bne.n	80169f6 <clear_lock+0x2a>
 80169ea:	4a09      	ldr	r2, [pc, #36]	; (8016a10 <clear_lock+0x44>)
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	011b      	lsls	r3, r3, #4
 80169f0:	4413      	add	r3, r2
 80169f2:	2200      	movs	r2, #0
 80169f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	3301      	adds	r3, #1
 80169fa:	60fb      	str	r3, [r7, #12]
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	2b01      	cmp	r3, #1
 8016a00:	d9eb      	bls.n	80169da <clear_lock+0xe>
	}
}
 8016a02:	bf00      	nop
 8016a04:	3714      	adds	r7, #20
 8016a06:	46bd      	mov	sp, r7
 8016a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a0c:	4770      	bx	lr
 8016a0e:	bf00      	nop
 8016a10:	24000b64 	.word	0x24000b64

08016a14 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b086      	sub	sp, #24
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	78db      	ldrb	r3, [r3, #3]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d034      	beq.n	8016a92 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a2c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	7858      	ldrb	r0, [r3, #1]
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016a38:	2301      	movs	r3, #1
 8016a3a:	697a      	ldr	r2, [r7, #20]
 8016a3c:	f7ff fd40 	bl	80164c0 <disk_write>
 8016a40:	4603      	mov	r3, r0
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d002      	beq.n	8016a4c <sync_window+0x38>
			res = FR_DISK_ERR;
 8016a46:	2301      	movs	r3, #1
 8016a48:	73fb      	strb	r3, [r7, #15]
 8016a4a:	e022      	b.n	8016a92 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	2200      	movs	r2, #0
 8016a50:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	6a1b      	ldr	r3, [r3, #32]
 8016a56:	697a      	ldr	r2, [r7, #20]
 8016a58:	1ad2      	subs	r2, r2, r3
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	699b      	ldr	r3, [r3, #24]
 8016a5e:	429a      	cmp	r2, r3
 8016a60:	d217      	bcs.n	8016a92 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	789b      	ldrb	r3, [r3, #2]
 8016a66:	613b      	str	r3, [r7, #16]
 8016a68:	e010      	b.n	8016a8c <sync_window+0x78>
					wsect += fs->fsize;
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	699b      	ldr	r3, [r3, #24]
 8016a6e:	697a      	ldr	r2, [r7, #20]
 8016a70:	4413      	add	r3, r2
 8016a72:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	7858      	ldrb	r0, [r3, #1]
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016a7e:	2301      	movs	r3, #1
 8016a80:	697a      	ldr	r2, [r7, #20]
 8016a82:	f7ff fd1d 	bl	80164c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016a86:	693b      	ldr	r3, [r7, #16]
 8016a88:	3b01      	subs	r3, #1
 8016a8a:	613b      	str	r3, [r7, #16]
 8016a8c:	693b      	ldr	r3, [r7, #16]
 8016a8e:	2b01      	cmp	r3, #1
 8016a90:	d8eb      	bhi.n	8016a6a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	3718      	adds	r7, #24
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}

08016a9c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b084      	sub	sp, #16
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
 8016aa4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016aae:	683a      	ldr	r2, [r7, #0]
 8016ab0:	429a      	cmp	r2, r3
 8016ab2:	d01b      	beq.n	8016aec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016ab4:	6878      	ldr	r0, [r7, #4]
 8016ab6:	f7ff ffad 	bl	8016a14 <sync_window>
 8016aba:	4603      	mov	r3, r0
 8016abc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016abe:	7bfb      	ldrb	r3, [r7, #15]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d113      	bne.n	8016aec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	7858      	ldrb	r0, [r3, #1]
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016ace:	2301      	movs	r3, #1
 8016ad0:	683a      	ldr	r2, [r7, #0]
 8016ad2:	f7ff fcd5 	bl	8016480 <disk_read>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d004      	beq.n	8016ae6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016adc:	f04f 33ff 	mov.w	r3, #4294967295
 8016ae0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8016ae2:	2301      	movs	r3, #1
 8016ae4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	683a      	ldr	r2, [r7, #0]
 8016aea:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8016aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8016aee:	4618      	mov	r0, r3
 8016af0:	3710      	adds	r7, #16
 8016af2:	46bd      	mov	sp, r7
 8016af4:	bd80      	pop	{r7, pc}
	...

08016af8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b084      	sub	sp, #16
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016b00:	6878      	ldr	r0, [r7, #4]
 8016b02:	f7ff ff87 	bl	8016a14 <sync_window>
 8016b06:	4603      	mov	r3, r0
 8016b08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016b0a:	7bfb      	ldrb	r3, [r7, #15]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d158      	bne.n	8016bc2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	781b      	ldrb	r3, [r3, #0]
 8016b14:	2b03      	cmp	r3, #3
 8016b16:	d148      	bne.n	8016baa <sync_fs+0xb2>
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	791b      	ldrb	r3, [r3, #4]
 8016b1c:	2b01      	cmp	r3, #1
 8016b1e:	d144      	bne.n	8016baa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	3330      	adds	r3, #48	; 0x30
 8016b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016b28:	2100      	movs	r1, #0
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f7ff fda9 	bl	8016682 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	3330      	adds	r3, #48	; 0x30
 8016b34:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016b38:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	f7ff fd38 	bl	80165b2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	3330      	adds	r3, #48	; 0x30
 8016b46:	4921      	ldr	r1, [pc, #132]	; (8016bcc <sync_fs+0xd4>)
 8016b48:	4618      	mov	r0, r3
 8016b4a:	f7ff fd4d 	bl	80165e8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	3330      	adds	r3, #48	; 0x30
 8016b52:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016b56:	491e      	ldr	r1, [pc, #120]	; (8016bd0 <sync_fs+0xd8>)
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f7ff fd45 	bl	80165e8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	3330      	adds	r3, #48	; 0x30
 8016b62:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	691b      	ldr	r3, [r3, #16]
 8016b6a:	4619      	mov	r1, r3
 8016b6c:	4610      	mov	r0, r2
 8016b6e:	f7ff fd3b 	bl	80165e8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	3330      	adds	r3, #48	; 0x30
 8016b76:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	68db      	ldr	r3, [r3, #12]
 8016b7e:	4619      	mov	r1, r3
 8016b80:	4610      	mov	r0, r2
 8016b82:	f7ff fd31 	bl	80165e8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	69db      	ldr	r3, [r3, #28]
 8016b8a:	1c5a      	adds	r2, r3, #1
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	7858      	ldrb	r0, [r3, #1]
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	f7ff fc8e 	bl	80164c0 <disk_write>
			fs->fsi_flag = 0;
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	785b      	ldrb	r3, [r3, #1]
 8016bae:	2200      	movs	r2, #0
 8016bb0:	2100      	movs	r1, #0
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f7ff fca4 	bl	8016500 <disk_ioctl>
 8016bb8:	4603      	mov	r3, r0
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d001      	beq.n	8016bc2 <sync_fs+0xca>
 8016bbe:	2301      	movs	r3, #1
 8016bc0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	3710      	adds	r7, #16
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	bd80      	pop	{r7, pc}
 8016bcc:	41615252 	.word	0x41615252
 8016bd0:	61417272 	.word	0x61417272

08016bd4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016bd4:	b480      	push	{r7}
 8016bd6:	b083      	sub	sp, #12
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
 8016bdc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	3b02      	subs	r3, #2
 8016be2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	695b      	ldr	r3, [r3, #20]
 8016be8:	3b02      	subs	r3, #2
 8016bea:	683a      	ldr	r2, [r7, #0]
 8016bec:	429a      	cmp	r2, r3
 8016bee:	d301      	bcc.n	8016bf4 <clust2sect+0x20>
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	e008      	b.n	8016c06 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	895b      	ldrh	r3, [r3, #10]
 8016bf8:	461a      	mov	r2, r3
 8016bfa:	683b      	ldr	r3, [r7, #0]
 8016bfc:	fb03 f202 	mul.w	r2, r3, r2
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c04:	4413      	add	r3, r2
}
 8016c06:	4618      	mov	r0, r3
 8016c08:	370c      	adds	r7, #12
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c10:	4770      	bx	lr

08016c12 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016c12:	b580      	push	{r7, lr}
 8016c14:	b086      	sub	sp, #24
 8016c16:	af00      	add	r7, sp, #0
 8016c18:	6078      	str	r0, [r7, #4]
 8016c1a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016c22:	683b      	ldr	r3, [r7, #0]
 8016c24:	2b01      	cmp	r3, #1
 8016c26:	d904      	bls.n	8016c32 <get_fat+0x20>
 8016c28:	693b      	ldr	r3, [r7, #16]
 8016c2a:	695b      	ldr	r3, [r3, #20]
 8016c2c:	683a      	ldr	r2, [r7, #0]
 8016c2e:	429a      	cmp	r2, r3
 8016c30:	d302      	bcc.n	8016c38 <get_fat+0x26>
		val = 1;	/* Internal error */
 8016c32:	2301      	movs	r3, #1
 8016c34:	617b      	str	r3, [r7, #20]
 8016c36:	e08c      	b.n	8016d52 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8016c38:	f04f 33ff 	mov.w	r3, #4294967295
 8016c3c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8016c3e:	693b      	ldr	r3, [r7, #16]
 8016c40:	781b      	ldrb	r3, [r3, #0]
 8016c42:	2b02      	cmp	r3, #2
 8016c44:	d045      	beq.n	8016cd2 <get_fat+0xc0>
 8016c46:	2b03      	cmp	r3, #3
 8016c48:	d05d      	beq.n	8016d06 <get_fat+0xf4>
 8016c4a:	2b01      	cmp	r3, #1
 8016c4c:	d177      	bne.n	8016d3e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	60fb      	str	r3, [r7, #12]
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	085b      	lsrs	r3, r3, #1
 8016c56:	68fa      	ldr	r2, [r7, #12]
 8016c58:	4413      	add	r3, r2
 8016c5a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016c5c:	693b      	ldr	r3, [r7, #16]
 8016c5e:	6a1a      	ldr	r2, [r3, #32]
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	0a5b      	lsrs	r3, r3, #9
 8016c64:	4413      	add	r3, r2
 8016c66:	4619      	mov	r1, r3
 8016c68:	6938      	ldr	r0, [r7, #16]
 8016c6a:	f7ff ff17 	bl	8016a9c <move_window>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d167      	bne.n	8016d44 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	1c5a      	adds	r2, r3, #1
 8016c78:	60fa      	str	r2, [r7, #12]
 8016c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016c7e:	693a      	ldr	r2, [r7, #16]
 8016c80:	4413      	add	r3, r2
 8016c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c86:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016c88:	693b      	ldr	r3, [r7, #16]
 8016c8a:	6a1a      	ldr	r2, [r3, #32]
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	0a5b      	lsrs	r3, r3, #9
 8016c90:	4413      	add	r3, r2
 8016c92:	4619      	mov	r1, r3
 8016c94:	6938      	ldr	r0, [r7, #16]
 8016c96:	f7ff ff01 	bl	8016a9c <move_window>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d153      	bne.n	8016d48 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016ca6:	693a      	ldr	r2, [r7, #16]
 8016ca8:	4413      	add	r3, r2
 8016caa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016cae:	021b      	lsls	r3, r3, #8
 8016cb0:	461a      	mov	r2, r3
 8016cb2:	68bb      	ldr	r3, [r7, #8]
 8016cb4:	4313      	orrs	r3, r2
 8016cb6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016cb8:	683b      	ldr	r3, [r7, #0]
 8016cba:	f003 0301 	and.w	r3, r3, #1
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d002      	beq.n	8016cc8 <get_fat+0xb6>
 8016cc2:	68bb      	ldr	r3, [r7, #8]
 8016cc4:	091b      	lsrs	r3, r3, #4
 8016cc6:	e002      	b.n	8016cce <get_fat+0xbc>
 8016cc8:	68bb      	ldr	r3, [r7, #8]
 8016cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016cce:	617b      	str	r3, [r7, #20]
			break;
 8016cd0:	e03f      	b.n	8016d52 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	6a1a      	ldr	r2, [r3, #32]
 8016cd6:	683b      	ldr	r3, [r7, #0]
 8016cd8:	0a1b      	lsrs	r3, r3, #8
 8016cda:	4413      	add	r3, r2
 8016cdc:	4619      	mov	r1, r3
 8016cde:	6938      	ldr	r0, [r7, #16]
 8016ce0:	f7ff fedc 	bl	8016a9c <move_window>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d130      	bne.n	8016d4c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016cea:	693b      	ldr	r3, [r7, #16]
 8016cec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016cf0:	683b      	ldr	r3, [r7, #0]
 8016cf2:	005b      	lsls	r3, r3, #1
 8016cf4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016cf8:	4413      	add	r3, r2
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7ff fc1e 	bl	801653c <ld_word>
 8016d00:	4603      	mov	r3, r0
 8016d02:	617b      	str	r3, [r7, #20]
			break;
 8016d04:	e025      	b.n	8016d52 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016d06:	693b      	ldr	r3, [r7, #16]
 8016d08:	6a1a      	ldr	r2, [r3, #32]
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	09db      	lsrs	r3, r3, #7
 8016d0e:	4413      	add	r3, r2
 8016d10:	4619      	mov	r1, r3
 8016d12:	6938      	ldr	r0, [r7, #16]
 8016d14:	f7ff fec2 	bl	8016a9c <move_window>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d118      	bne.n	8016d50 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016d1e:	693b      	ldr	r3, [r7, #16]
 8016d20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016d24:	683b      	ldr	r3, [r7, #0]
 8016d26:	009b      	lsls	r3, r3, #2
 8016d28:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016d2c:	4413      	add	r3, r2
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7ff fc1c 	bl	801656c <ld_dword>
 8016d34:	4603      	mov	r3, r0
 8016d36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8016d3a:	617b      	str	r3, [r7, #20]
			break;
 8016d3c:	e009      	b.n	8016d52 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8016d3e:	2301      	movs	r3, #1
 8016d40:	617b      	str	r3, [r7, #20]
 8016d42:	e006      	b.n	8016d52 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d44:	bf00      	nop
 8016d46:	e004      	b.n	8016d52 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d48:	bf00      	nop
 8016d4a:	e002      	b.n	8016d52 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016d4c:	bf00      	nop
 8016d4e:	e000      	b.n	8016d52 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016d50:	bf00      	nop
		}
	}

	return val;
 8016d52:	697b      	ldr	r3, [r7, #20]
}
 8016d54:	4618      	mov	r0, r3
 8016d56:	3718      	adds	r7, #24
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	bd80      	pop	{r7, pc}

08016d5c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8016d5c:	b590      	push	{r4, r7, lr}
 8016d5e:	b089      	sub	sp, #36	; 0x24
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	60f8      	str	r0, [r7, #12]
 8016d64:	60b9      	str	r1, [r7, #8]
 8016d66:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016d68:	2302      	movs	r3, #2
 8016d6a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016d6c:	68bb      	ldr	r3, [r7, #8]
 8016d6e:	2b01      	cmp	r3, #1
 8016d70:	f240 80d6 	bls.w	8016f20 <put_fat+0x1c4>
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	695b      	ldr	r3, [r3, #20]
 8016d78:	68ba      	ldr	r2, [r7, #8]
 8016d7a:	429a      	cmp	r2, r3
 8016d7c:	f080 80d0 	bcs.w	8016f20 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	781b      	ldrb	r3, [r3, #0]
 8016d84:	2b02      	cmp	r3, #2
 8016d86:	d073      	beq.n	8016e70 <put_fat+0x114>
 8016d88:	2b03      	cmp	r3, #3
 8016d8a:	f000 8091 	beq.w	8016eb0 <put_fat+0x154>
 8016d8e:	2b01      	cmp	r3, #1
 8016d90:	f040 80c6 	bne.w	8016f20 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016d94:	68bb      	ldr	r3, [r7, #8]
 8016d96:	61bb      	str	r3, [r7, #24]
 8016d98:	69bb      	ldr	r3, [r7, #24]
 8016d9a:	085b      	lsrs	r3, r3, #1
 8016d9c:	69ba      	ldr	r2, [r7, #24]
 8016d9e:	4413      	add	r3, r2
 8016da0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	6a1a      	ldr	r2, [r3, #32]
 8016da6:	69bb      	ldr	r3, [r7, #24]
 8016da8:	0a5b      	lsrs	r3, r3, #9
 8016daa:	4413      	add	r3, r2
 8016dac:	4619      	mov	r1, r3
 8016dae:	68f8      	ldr	r0, [r7, #12]
 8016db0:	f7ff fe74 	bl	8016a9c <move_window>
 8016db4:	4603      	mov	r3, r0
 8016db6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016db8:	7ffb      	ldrb	r3, [r7, #31]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	f040 80a9 	bne.w	8016f12 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016dc6:	69bb      	ldr	r3, [r7, #24]
 8016dc8:	1c59      	adds	r1, r3, #1
 8016dca:	61b9      	str	r1, [r7, #24]
 8016dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016dd0:	4413      	add	r3, r2
 8016dd2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016dd4:	68bb      	ldr	r3, [r7, #8]
 8016dd6:	f003 0301 	and.w	r3, r3, #1
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d00d      	beq.n	8016dfa <put_fat+0x9e>
 8016dde:	697b      	ldr	r3, [r7, #20]
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	b25b      	sxtb	r3, r3
 8016de4:	f003 030f 	and.w	r3, r3, #15
 8016de8:	b25a      	sxtb	r2, r3
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	b2db      	uxtb	r3, r3
 8016dee:	011b      	lsls	r3, r3, #4
 8016df0:	b25b      	sxtb	r3, r3
 8016df2:	4313      	orrs	r3, r2
 8016df4:	b25b      	sxtb	r3, r3
 8016df6:	b2db      	uxtb	r3, r3
 8016df8:	e001      	b.n	8016dfe <put_fat+0xa2>
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	b2db      	uxtb	r3, r3
 8016dfe:	697a      	ldr	r2, [r7, #20]
 8016e00:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	2201      	movs	r2, #1
 8016e06:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	6a1a      	ldr	r2, [r3, #32]
 8016e0c:	69bb      	ldr	r3, [r7, #24]
 8016e0e:	0a5b      	lsrs	r3, r3, #9
 8016e10:	4413      	add	r3, r2
 8016e12:	4619      	mov	r1, r3
 8016e14:	68f8      	ldr	r0, [r7, #12]
 8016e16:	f7ff fe41 	bl	8016a9c <move_window>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016e1e:	7ffb      	ldrb	r3, [r7, #31]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d178      	bne.n	8016f16 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016e2a:	69bb      	ldr	r3, [r7, #24]
 8016e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e30:	4413      	add	r3, r2
 8016e32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016e34:	68bb      	ldr	r3, [r7, #8]
 8016e36:	f003 0301 	and.w	r3, r3, #1
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d003      	beq.n	8016e46 <put_fat+0xea>
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	091b      	lsrs	r3, r3, #4
 8016e42:	b2db      	uxtb	r3, r3
 8016e44:	e00e      	b.n	8016e64 <put_fat+0x108>
 8016e46:	697b      	ldr	r3, [r7, #20]
 8016e48:	781b      	ldrb	r3, [r3, #0]
 8016e4a:	b25b      	sxtb	r3, r3
 8016e4c:	f023 030f 	bic.w	r3, r3, #15
 8016e50:	b25a      	sxtb	r2, r3
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	0a1b      	lsrs	r3, r3, #8
 8016e56:	b25b      	sxtb	r3, r3
 8016e58:	f003 030f 	and.w	r3, r3, #15
 8016e5c:	b25b      	sxtb	r3, r3
 8016e5e:	4313      	orrs	r3, r2
 8016e60:	b25b      	sxtb	r3, r3
 8016e62:	b2db      	uxtb	r3, r3
 8016e64:	697a      	ldr	r2, [r7, #20]
 8016e66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	2201      	movs	r2, #1
 8016e6c:	70da      	strb	r2, [r3, #3]
			break;
 8016e6e:	e057      	b.n	8016f20 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	6a1a      	ldr	r2, [r3, #32]
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	0a1b      	lsrs	r3, r3, #8
 8016e78:	4413      	add	r3, r2
 8016e7a:	4619      	mov	r1, r3
 8016e7c:	68f8      	ldr	r0, [r7, #12]
 8016e7e:	f7ff fe0d 	bl	8016a9c <move_window>
 8016e82:	4603      	mov	r3, r0
 8016e84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016e86:	7ffb      	ldrb	r3, [r7, #31]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d146      	bne.n	8016f1a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016e92:	68bb      	ldr	r3, [r7, #8]
 8016e94:	005b      	lsls	r3, r3, #1
 8016e96:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016e9a:	4413      	add	r3, r2
 8016e9c:	687a      	ldr	r2, [r7, #4]
 8016e9e:	b292      	uxth	r2, r2
 8016ea0:	4611      	mov	r1, r2
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	f7ff fb85 	bl	80165b2 <st_word>
			fs->wflag = 1;
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	2201      	movs	r2, #1
 8016eac:	70da      	strb	r2, [r3, #3]
			break;
 8016eae:	e037      	b.n	8016f20 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	6a1a      	ldr	r2, [r3, #32]
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	09db      	lsrs	r3, r3, #7
 8016eb8:	4413      	add	r3, r2
 8016eba:	4619      	mov	r1, r3
 8016ebc:	68f8      	ldr	r0, [r7, #12]
 8016ebe:	f7ff fded 	bl	8016a9c <move_window>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016ec6:	7ffb      	ldrb	r3, [r7, #31]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d128      	bne.n	8016f1e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016ed8:	68bb      	ldr	r3, [r7, #8]
 8016eda:	009b      	lsls	r3, r3, #2
 8016edc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016ee0:	4413      	add	r3, r2
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7ff fb42 	bl	801656c <ld_dword>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016eee:	4323      	orrs	r3, r4
 8016ef0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016ef8:	68bb      	ldr	r3, [r7, #8]
 8016efa:	009b      	lsls	r3, r3, #2
 8016efc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016f00:	4413      	add	r3, r2
 8016f02:	6879      	ldr	r1, [r7, #4]
 8016f04:	4618      	mov	r0, r3
 8016f06:	f7ff fb6f 	bl	80165e8 <st_dword>
			fs->wflag = 1;
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	2201      	movs	r2, #1
 8016f0e:	70da      	strb	r2, [r3, #3]
			break;
 8016f10:	e006      	b.n	8016f20 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f12:	bf00      	nop
 8016f14:	e004      	b.n	8016f20 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f16:	bf00      	nop
 8016f18:	e002      	b.n	8016f20 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f1a:	bf00      	nop
 8016f1c:	e000      	b.n	8016f20 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f1e:	bf00      	nop
		}
	}
	return res;
 8016f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8016f22:	4618      	mov	r0, r3
 8016f24:	3724      	adds	r7, #36	; 0x24
 8016f26:	46bd      	mov	sp, r7
 8016f28:	bd90      	pop	{r4, r7, pc}

08016f2a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8016f2a:	b580      	push	{r7, lr}
 8016f2c:	b088      	sub	sp, #32
 8016f2e:	af00      	add	r7, sp, #0
 8016f30:	60f8      	str	r0, [r7, #12]
 8016f32:	60b9      	str	r1, [r7, #8]
 8016f34:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016f36:	2300      	movs	r3, #0
 8016f38:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	2b01      	cmp	r3, #1
 8016f44:	d904      	bls.n	8016f50 <remove_chain+0x26>
 8016f46:	69bb      	ldr	r3, [r7, #24]
 8016f48:	695b      	ldr	r3, [r3, #20]
 8016f4a:	68ba      	ldr	r2, [r7, #8]
 8016f4c:	429a      	cmp	r2, r3
 8016f4e:	d301      	bcc.n	8016f54 <remove_chain+0x2a>
 8016f50:	2302      	movs	r3, #2
 8016f52:	e04b      	b.n	8016fec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d00c      	beq.n	8016f74 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8016f5e:	6879      	ldr	r1, [r7, #4]
 8016f60:	69b8      	ldr	r0, [r7, #24]
 8016f62:	f7ff fefb 	bl	8016d5c <put_fat>
 8016f66:	4603      	mov	r3, r0
 8016f68:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8016f6a:	7ffb      	ldrb	r3, [r7, #31]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d001      	beq.n	8016f74 <remove_chain+0x4a>
 8016f70:	7ffb      	ldrb	r3, [r7, #31]
 8016f72:	e03b      	b.n	8016fec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8016f74:	68b9      	ldr	r1, [r7, #8]
 8016f76:	68f8      	ldr	r0, [r7, #12]
 8016f78:	f7ff fe4b 	bl	8016c12 <get_fat>
 8016f7c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8016f7e:	697b      	ldr	r3, [r7, #20]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d031      	beq.n	8016fe8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8016f84:	697b      	ldr	r3, [r7, #20]
 8016f86:	2b01      	cmp	r3, #1
 8016f88:	d101      	bne.n	8016f8e <remove_chain+0x64>
 8016f8a:	2302      	movs	r3, #2
 8016f8c:	e02e      	b.n	8016fec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8016f8e:	697b      	ldr	r3, [r7, #20]
 8016f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f94:	d101      	bne.n	8016f9a <remove_chain+0x70>
 8016f96:	2301      	movs	r3, #1
 8016f98:	e028      	b.n	8016fec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	68b9      	ldr	r1, [r7, #8]
 8016f9e:	69b8      	ldr	r0, [r7, #24]
 8016fa0:	f7ff fedc 	bl	8016d5c <put_fat>
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8016fa8:	7ffb      	ldrb	r3, [r7, #31]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d001      	beq.n	8016fb2 <remove_chain+0x88>
 8016fae:	7ffb      	ldrb	r3, [r7, #31]
 8016fb0:	e01c      	b.n	8016fec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016fb2:	69bb      	ldr	r3, [r7, #24]
 8016fb4:	691a      	ldr	r2, [r3, #16]
 8016fb6:	69bb      	ldr	r3, [r7, #24]
 8016fb8:	695b      	ldr	r3, [r3, #20]
 8016fba:	3b02      	subs	r3, #2
 8016fbc:	429a      	cmp	r2, r3
 8016fbe:	d20b      	bcs.n	8016fd8 <remove_chain+0xae>
			fs->free_clst++;
 8016fc0:	69bb      	ldr	r3, [r7, #24]
 8016fc2:	691b      	ldr	r3, [r3, #16]
 8016fc4:	1c5a      	adds	r2, r3, #1
 8016fc6:	69bb      	ldr	r3, [r7, #24]
 8016fc8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8016fca:	69bb      	ldr	r3, [r7, #24]
 8016fcc:	791b      	ldrb	r3, [r3, #4]
 8016fce:	f043 0301 	orr.w	r3, r3, #1
 8016fd2:	b2da      	uxtb	r2, r3
 8016fd4:	69bb      	ldr	r3, [r7, #24]
 8016fd6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8016fd8:	697b      	ldr	r3, [r7, #20]
 8016fda:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8016fdc:	69bb      	ldr	r3, [r7, #24]
 8016fde:	695b      	ldr	r3, [r3, #20]
 8016fe0:	68ba      	ldr	r2, [r7, #8]
 8016fe2:	429a      	cmp	r2, r3
 8016fe4:	d3c6      	bcc.n	8016f74 <remove_chain+0x4a>
 8016fe6:	e000      	b.n	8016fea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8016fe8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8016fea:	2300      	movs	r3, #0
}
 8016fec:	4618      	mov	r0, r3
 8016fee:	3720      	adds	r7, #32
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bd80      	pop	{r7, pc}

08016ff4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b088      	sub	sp, #32
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
 8016ffc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d10d      	bne.n	8017026 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801700a:	693b      	ldr	r3, [r7, #16]
 801700c:	68db      	ldr	r3, [r3, #12]
 801700e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017010:	69bb      	ldr	r3, [r7, #24]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d004      	beq.n	8017020 <create_chain+0x2c>
 8017016:	693b      	ldr	r3, [r7, #16]
 8017018:	695b      	ldr	r3, [r3, #20]
 801701a:	69ba      	ldr	r2, [r7, #24]
 801701c:	429a      	cmp	r2, r3
 801701e:	d31b      	bcc.n	8017058 <create_chain+0x64>
 8017020:	2301      	movs	r3, #1
 8017022:	61bb      	str	r3, [r7, #24]
 8017024:	e018      	b.n	8017058 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017026:	6839      	ldr	r1, [r7, #0]
 8017028:	6878      	ldr	r0, [r7, #4]
 801702a:	f7ff fdf2 	bl	8016c12 <get_fat>
 801702e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	2b01      	cmp	r3, #1
 8017034:	d801      	bhi.n	801703a <create_chain+0x46>
 8017036:	2301      	movs	r3, #1
 8017038:	e070      	b.n	801711c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017040:	d101      	bne.n	8017046 <create_chain+0x52>
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	e06a      	b.n	801711c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017046:	693b      	ldr	r3, [r7, #16]
 8017048:	695b      	ldr	r3, [r3, #20]
 801704a:	68fa      	ldr	r2, [r7, #12]
 801704c:	429a      	cmp	r2, r3
 801704e:	d201      	bcs.n	8017054 <create_chain+0x60>
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	e063      	b.n	801711c <create_chain+0x128>
		scl = clst;
 8017054:	683b      	ldr	r3, [r7, #0]
 8017056:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017058:	69bb      	ldr	r3, [r7, #24]
 801705a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801705c:	69fb      	ldr	r3, [r7, #28]
 801705e:	3301      	adds	r3, #1
 8017060:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017062:	693b      	ldr	r3, [r7, #16]
 8017064:	695b      	ldr	r3, [r3, #20]
 8017066:	69fa      	ldr	r2, [r7, #28]
 8017068:	429a      	cmp	r2, r3
 801706a:	d307      	bcc.n	801707c <create_chain+0x88>
				ncl = 2;
 801706c:	2302      	movs	r3, #2
 801706e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8017070:	69fa      	ldr	r2, [r7, #28]
 8017072:	69bb      	ldr	r3, [r7, #24]
 8017074:	429a      	cmp	r2, r3
 8017076:	d901      	bls.n	801707c <create_chain+0x88>
 8017078:	2300      	movs	r3, #0
 801707a:	e04f      	b.n	801711c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801707c:	69f9      	ldr	r1, [r7, #28]
 801707e:	6878      	ldr	r0, [r7, #4]
 8017080:	f7ff fdc7 	bl	8016c12 <get_fat>
 8017084:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d00e      	beq.n	80170aa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	2b01      	cmp	r3, #1
 8017090:	d003      	beq.n	801709a <create_chain+0xa6>
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017098:	d101      	bne.n	801709e <create_chain+0xaa>
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	e03e      	b.n	801711c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801709e:	69fa      	ldr	r2, [r7, #28]
 80170a0:	69bb      	ldr	r3, [r7, #24]
 80170a2:	429a      	cmp	r2, r3
 80170a4:	d1da      	bne.n	801705c <create_chain+0x68>
 80170a6:	2300      	movs	r3, #0
 80170a8:	e038      	b.n	801711c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80170aa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80170ac:	f04f 32ff 	mov.w	r2, #4294967295
 80170b0:	69f9      	ldr	r1, [r7, #28]
 80170b2:	6938      	ldr	r0, [r7, #16]
 80170b4:	f7ff fe52 	bl	8016d5c <put_fat>
 80170b8:	4603      	mov	r3, r0
 80170ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80170bc:	7dfb      	ldrb	r3, [r7, #23]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d109      	bne.n	80170d6 <create_chain+0xe2>
 80170c2:	683b      	ldr	r3, [r7, #0]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d006      	beq.n	80170d6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80170c8:	69fa      	ldr	r2, [r7, #28]
 80170ca:	6839      	ldr	r1, [r7, #0]
 80170cc:	6938      	ldr	r0, [r7, #16]
 80170ce:	f7ff fe45 	bl	8016d5c <put_fat>
 80170d2:	4603      	mov	r3, r0
 80170d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80170d6:	7dfb      	ldrb	r3, [r7, #23]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d116      	bne.n	801710a <create_chain+0x116>
		fs->last_clst = ncl;
 80170dc:	693b      	ldr	r3, [r7, #16]
 80170de:	69fa      	ldr	r2, [r7, #28]
 80170e0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80170e2:	693b      	ldr	r3, [r7, #16]
 80170e4:	691a      	ldr	r2, [r3, #16]
 80170e6:	693b      	ldr	r3, [r7, #16]
 80170e8:	695b      	ldr	r3, [r3, #20]
 80170ea:	3b02      	subs	r3, #2
 80170ec:	429a      	cmp	r2, r3
 80170ee:	d804      	bhi.n	80170fa <create_chain+0x106>
 80170f0:	693b      	ldr	r3, [r7, #16]
 80170f2:	691b      	ldr	r3, [r3, #16]
 80170f4:	1e5a      	subs	r2, r3, #1
 80170f6:	693b      	ldr	r3, [r7, #16]
 80170f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80170fa:	693b      	ldr	r3, [r7, #16]
 80170fc:	791b      	ldrb	r3, [r3, #4]
 80170fe:	f043 0301 	orr.w	r3, r3, #1
 8017102:	b2da      	uxtb	r2, r3
 8017104:	693b      	ldr	r3, [r7, #16]
 8017106:	711a      	strb	r2, [r3, #4]
 8017108:	e007      	b.n	801711a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801710a:	7dfb      	ldrb	r3, [r7, #23]
 801710c:	2b01      	cmp	r3, #1
 801710e:	d102      	bne.n	8017116 <create_chain+0x122>
 8017110:	f04f 33ff 	mov.w	r3, #4294967295
 8017114:	e000      	b.n	8017118 <create_chain+0x124>
 8017116:	2301      	movs	r3, #1
 8017118:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801711a:	69fb      	ldr	r3, [r7, #28]
}
 801711c:	4618      	mov	r0, r3
 801711e:	3720      	adds	r7, #32
 8017120:	46bd      	mov	sp, r7
 8017122:	bd80      	pop	{r7, pc}

08017124 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017124:	b480      	push	{r7}
 8017126:	b087      	sub	sp, #28
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
 801712c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017138:	3304      	adds	r3, #4
 801713a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801713c:	683b      	ldr	r3, [r7, #0]
 801713e:	0a5b      	lsrs	r3, r3, #9
 8017140:	68fa      	ldr	r2, [r7, #12]
 8017142:	8952      	ldrh	r2, [r2, #10]
 8017144:	fbb3 f3f2 	udiv	r3, r3, r2
 8017148:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801714a:	693b      	ldr	r3, [r7, #16]
 801714c:	1d1a      	adds	r2, r3, #4
 801714e:	613a      	str	r2, [r7, #16]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017154:	68bb      	ldr	r3, [r7, #8]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d101      	bne.n	801715e <clmt_clust+0x3a>
 801715a:	2300      	movs	r3, #0
 801715c:	e010      	b.n	8017180 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801715e:	697a      	ldr	r2, [r7, #20]
 8017160:	68bb      	ldr	r3, [r7, #8]
 8017162:	429a      	cmp	r2, r3
 8017164:	d307      	bcc.n	8017176 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8017166:	697a      	ldr	r2, [r7, #20]
 8017168:	68bb      	ldr	r3, [r7, #8]
 801716a:	1ad3      	subs	r3, r2, r3
 801716c:	617b      	str	r3, [r7, #20]
 801716e:	693b      	ldr	r3, [r7, #16]
 8017170:	3304      	adds	r3, #4
 8017172:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017174:	e7e9      	b.n	801714a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8017176:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8017178:	693b      	ldr	r3, [r7, #16]
 801717a:	681a      	ldr	r2, [r3, #0]
 801717c:	697b      	ldr	r3, [r7, #20]
 801717e:	4413      	add	r3, r2
}
 8017180:	4618      	mov	r0, r3
 8017182:	371c      	adds	r7, #28
 8017184:	46bd      	mov	sp, r7
 8017186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718a:	4770      	bx	lr

0801718c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801718c:	b580      	push	{r7, lr}
 801718e:	b086      	sub	sp, #24
 8017190:	af00      	add	r7, sp, #0
 8017192:	6078      	str	r0, [r7, #4]
 8017194:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801719c:	683b      	ldr	r3, [r7, #0]
 801719e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80171a2:	d204      	bcs.n	80171ae <dir_sdi+0x22>
 80171a4:	683b      	ldr	r3, [r7, #0]
 80171a6:	f003 031f 	and.w	r3, r3, #31
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d001      	beq.n	80171b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80171ae:	2302      	movs	r3, #2
 80171b0:	e063      	b.n	801727a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	683a      	ldr	r2, [r7, #0]
 80171b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	689b      	ldr	r3, [r3, #8]
 80171bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80171be:	697b      	ldr	r3, [r7, #20]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d106      	bne.n	80171d2 <dir_sdi+0x46>
 80171c4:	693b      	ldr	r3, [r7, #16]
 80171c6:	781b      	ldrb	r3, [r3, #0]
 80171c8:	2b02      	cmp	r3, #2
 80171ca:	d902      	bls.n	80171d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80171cc:	693b      	ldr	r3, [r7, #16]
 80171ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80171d2:	697b      	ldr	r3, [r7, #20]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d10c      	bne.n	80171f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80171d8:	683b      	ldr	r3, [r7, #0]
 80171da:	095b      	lsrs	r3, r3, #5
 80171dc:	693a      	ldr	r2, [r7, #16]
 80171de:	8912      	ldrh	r2, [r2, #8]
 80171e0:	4293      	cmp	r3, r2
 80171e2:	d301      	bcc.n	80171e8 <dir_sdi+0x5c>
 80171e4:	2302      	movs	r3, #2
 80171e6:	e048      	b.n	801727a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80171e8:	693b      	ldr	r3, [r7, #16]
 80171ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	61da      	str	r2, [r3, #28]
 80171f0:	e029      	b.n	8017246 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80171f2:	693b      	ldr	r3, [r7, #16]
 80171f4:	895b      	ldrh	r3, [r3, #10]
 80171f6:	025b      	lsls	r3, r3, #9
 80171f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80171fa:	e019      	b.n	8017230 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	6979      	ldr	r1, [r7, #20]
 8017200:	4618      	mov	r0, r3
 8017202:	f7ff fd06 	bl	8016c12 <get_fat>
 8017206:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017208:	697b      	ldr	r3, [r7, #20]
 801720a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801720e:	d101      	bne.n	8017214 <dir_sdi+0x88>
 8017210:	2301      	movs	r3, #1
 8017212:	e032      	b.n	801727a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017214:	697b      	ldr	r3, [r7, #20]
 8017216:	2b01      	cmp	r3, #1
 8017218:	d904      	bls.n	8017224 <dir_sdi+0x98>
 801721a:	693b      	ldr	r3, [r7, #16]
 801721c:	695b      	ldr	r3, [r3, #20]
 801721e:	697a      	ldr	r2, [r7, #20]
 8017220:	429a      	cmp	r2, r3
 8017222:	d301      	bcc.n	8017228 <dir_sdi+0x9c>
 8017224:	2302      	movs	r3, #2
 8017226:	e028      	b.n	801727a <dir_sdi+0xee>
			ofs -= csz;
 8017228:	683a      	ldr	r2, [r7, #0]
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	1ad3      	subs	r3, r2, r3
 801722e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017230:	683a      	ldr	r2, [r7, #0]
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	429a      	cmp	r2, r3
 8017236:	d2e1      	bcs.n	80171fc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017238:	6979      	ldr	r1, [r7, #20]
 801723a:	6938      	ldr	r0, [r7, #16]
 801723c:	f7ff fcca 	bl	8016bd4 <clust2sect>
 8017240:	4602      	mov	r2, r0
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	697a      	ldr	r2, [r7, #20]
 801724a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	69db      	ldr	r3, [r3, #28]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d101      	bne.n	8017258 <dir_sdi+0xcc>
 8017254:	2302      	movs	r3, #2
 8017256:	e010      	b.n	801727a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	69da      	ldr	r2, [r3, #28]
 801725c:	683b      	ldr	r3, [r7, #0]
 801725e:	0a5b      	lsrs	r3, r3, #9
 8017260:	441a      	add	r2, r3
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017266:	693b      	ldr	r3, [r7, #16]
 8017268:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017272:	441a      	add	r2, r3
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017278:	2300      	movs	r3, #0
}
 801727a:	4618      	mov	r0, r3
 801727c:	3718      	adds	r7, #24
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}

08017282 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8017282:	b580      	push	{r7, lr}
 8017284:	b086      	sub	sp, #24
 8017286:	af00      	add	r7, sp, #0
 8017288:	6078      	str	r0, [r7, #4]
 801728a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	695b      	ldr	r3, [r3, #20]
 8017296:	3320      	adds	r3, #32
 8017298:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	69db      	ldr	r3, [r3, #28]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d003      	beq.n	80172aa <dir_next+0x28>
 80172a2:	68bb      	ldr	r3, [r7, #8]
 80172a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80172a8:	d301      	bcc.n	80172ae <dir_next+0x2c>
 80172aa:	2304      	movs	r3, #4
 80172ac:	e0aa      	b.n	8017404 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80172ae:	68bb      	ldr	r3, [r7, #8]
 80172b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	f040 8098 	bne.w	80173ea <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	69db      	ldr	r3, [r3, #28]
 80172be:	1c5a      	adds	r2, r3, #1
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	699b      	ldr	r3, [r3, #24]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d10b      	bne.n	80172e4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80172cc:	68bb      	ldr	r3, [r7, #8]
 80172ce:	095b      	lsrs	r3, r3, #5
 80172d0:	68fa      	ldr	r2, [r7, #12]
 80172d2:	8912      	ldrh	r2, [r2, #8]
 80172d4:	4293      	cmp	r3, r2
 80172d6:	f0c0 8088 	bcc.w	80173ea <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	2200      	movs	r2, #0
 80172de:	61da      	str	r2, [r3, #28]
 80172e0:	2304      	movs	r3, #4
 80172e2:	e08f      	b.n	8017404 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80172e4:	68bb      	ldr	r3, [r7, #8]
 80172e6:	0a5b      	lsrs	r3, r3, #9
 80172e8:	68fa      	ldr	r2, [r7, #12]
 80172ea:	8952      	ldrh	r2, [r2, #10]
 80172ec:	3a01      	subs	r2, #1
 80172ee:	4013      	ands	r3, r2
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d17a      	bne.n	80173ea <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80172f4:	687a      	ldr	r2, [r7, #4]
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	699b      	ldr	r3, [r3, #24]
 80172fa:	4619      	mov	r1, r3
 80172fc:	4610      	mov	r0, r2
 80172fe:	f7ff fc88 	bl	8016c12 <get_fat>
 8017302:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017304:	697b      	ldr	r3, [r7, #20]
 8017306:	2b01      	cmp	r3, #1
 8017308:	d801      	bhi.n	801730e <dir_next+0x8c>
 801730a:	2302      	movs	r3, #2
 801730c:	e07a      	b.n	8017404 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801730e:	697b      	ldr	r3, [r7, #20]
 8017310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017314:	d101      	bne.n	801731a <dir_next+0x98>
 8017316:	2301      	movs	r3, #1
 8017318:	e074      	b.n	8017404 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	695b      	ldr	r3, [r3, #20]
 801731e:	697a      	ldr	r2, [r7, #20]
 8017320:	429a      	cmp	r2, r3
 8017322:	d358      	bcc.n	80173d6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017324:	683b      	ldr	r3, [r7, #0]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d104      	bne.n	8017334 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	2200      	movs	r2, #0
 801732e:	61da      	str	r2, [r3, #28]
 8017330:	2304      	movs	r3, #4
 8017332:	e067      	b.n	8017404 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017334:	687a      	ldr	r2, [r7, #4]
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	699b      	ldr	r3, [r3, #24]
 801733a:	4619      	mov	r1, r3
 801733c:	4610      	mov	r0, r2
 801733e:	f7ff fe59 	bl	8016ff4 <create_chain>
 8017342:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d101      	bne.n	801734e <dir_next+0xcc>
 801734a:	2307      	movs	r3, #7
 801734c:	e05a      	b.n	8017404 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801734e:	697b      	ldr	r3, [r7, #20]
 8017350:	2b01      	cmp	r3, #1
 8017352:	d101      	bne.n	8017358 <dir_next+0xd6>
 8017354:	2302      	movs	r3, #2
 8017356:	e055      	b.n	8017404 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017358:	697b      	ldr	r3, [r7, #20]
 801735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801735e:	d101      	bne.n	8017364 <dir_next+0xe2>
 8017360:	2301      	movs	r3, #1
 8017362:	e04f      	b.n	8017404 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017364:	68f8      	ldr	r0, [r7, #12]
 8017366:	f7ff fb55 	bl	8016a14 <sync_window>
 801736a:	4603      	mov	r3, r0
 801736c:	2b00      	cmp	r3, #0
 801736e:	d001      	beq.n	8017374 <dir_next+0xf2>
 8017370:	2301      	movs	r3, #1
 8017372:	e047      	b.n	8017404 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	3330      	adds	r3, #48	; 0x30
 8017378:	f44f 7200 	mov.w	r2, #512	; 0x200
 801737c:	2100      	movs	r1, #0
 801737e:	4618      	mov	r0, r3
 8017380:	f7ff f97f 	bl	8016682 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017384:	2300      	movs	r3, #0
 8017386:	613b      	str	r3, [r7, #16]
 8017388:	6979      	ldr	r1, [r7, #20]
 801738a:	68f8      	ldr	r0, [r7, #12]
 801738c:	f7ff fc22 	bl	8016bd4 <clust2sect>
 8017390:	4602      	mov	r2, r0
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	62da      	str	r2, [r3, #44]	; 0x2c
 8017396:	e012      	b.n	80173be <dir_next+0x13c>
						fs->wflag = 1;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	2201      	movs	r2, #1
 801739c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801739e:	68f8      	ldr	r0, [r7, #12]
 80173a0:	f7ff fb38 	bl	8016a14 <sync_window>
 80173a4:	4603      	mov	r3, r0
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d001      	beq.n	80173ae <dir_next+0x12c>
 80173aa:	2301      	movs	r3, #1
 80173ac:	e02a      	b.n	8017404 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80173ae:	693b      	ldr	r3, [r7, #16]
 80173b0:	3301      	adds	r3, #1
 80173b2:	613b      	str	r3, [r7, #16]
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173b8:	1c5a      	adds	r2, r3, #1
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	895b      	ldrh	r3, [r3, #10]
 80173c2:	461a      	mov	r2, r3
 80173c4:	693b      	ldr	r3, [r7, #16]
 80173c6:	4293      	cmp	r3, r2
 80173c8:	d3e6      	bcc.n	8017398 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173ce:	693b      	ldr	r3, [r7, #16]
 80173d0:	1ad2      	subs	r2, r2, r3
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	697a      	ldr	r2, [r7, #20]
 80173da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80173dc:	6979      	ldr	r1, [r7, #20]
 80173de:	68f8      	ldr	r0, [r7, #12]
 80173e0:	f7ff fbf8 	bl	8016bd4 <clust2sect>
 80173e4:	4602      	mov	r2, r0
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	68ba      	ldr	r2, [r7, #8]
 80173ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80173f6:	68bb      	ldr	r3, [r7, #8]
 80173f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80173fc:	441a      	add	r2, r3
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017402:	2300      	movs	r3, #0
}
 8017404:	4618      	mov	r0, r3
 8017406:	3718      	adds	r7, #24
 8017408:	46bd      	mov	sp, r7
 801740a:	bd80      	pop	{r7, pc}

0801740c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b086      	sub	sp, #24
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
 8017414:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801741c:	2100      	movs	r1, #0
 801741e:	6878      	ldr	r0, [r7, #4]
 8017420:	f7ff feb4 	bl	801718c <dir_sdi>
 8017424:	4603      	mov	r3, r0
 8017426:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017428:	7dfb      	ldrb	r3, [r7, #23]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d12b      	bne.n	8017486 <dir_alloc+0x7a>
		n = 0;
 801742e:	2300      	movs	r3, #0
 8017430:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	69db      	ldr	r3, [r3, #28]
 8017436:	4619      	mov	r1, r3
 8017438:	68f8      	ldr	r0, [r7, #12]
 801743a:	f7ff fb2f 	bl	8016a9c <move_window>
 801743e:	4603      	mov	r3, r0
 8017440:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017442:	7dfb      	ldrb	r3, [r7, #23]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d11d      	bne.n	8017484 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	6a1b      	ldr	r3, [r3, #32]
 801744c:	781b      	ldrb	r3, [r3, #0]
 801744e:	2be5      	cmp	r3, #229	; 0xe5
 8017450:	d004      	beq.n	801745c <dir_alloc+0x50>
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	6a1b      	ldr	r3, [r3, #32]
 8017456:	781b      	ldrb	r3, [r3, #0]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d107      	bne.n	801746c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801745c:	693b      	ldr	r3, [r7, #16]
 801745e:	3301      	adds	r3, #1
 8017460:	613b      	str	r3, [r7, #16]
 8017462:	693a      	ldr	r2, [r7, #16]
 8017464:	683b      	ldr	r3, [r7, #0]
 8017466:	429a      	cmp	r2, r3
 8017468:	d102      	bne.n	8017470 <dir_alloc+0x64>
 801746a:	e00c      	b.n	8017486 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801746c:	2300      	movs	r3, #0
 801746e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017470:	2101      	movs	r1, #1
 8017472:	6878      	ldr	r0, [r7, #4]
 8017474:	f7ff ff05 	bl	8017282 <dir_next>
 8017478:	4603      	mov	r3, r0
 801747a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801747c:	7dfb      	ldrb	r3, [r7, #23]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d0d7      	beq.n	8017432 <dir_alloc+0x26>
 8017482:	e000      	b.n	8017486 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017484:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017486:	7dfb      	ldrb	r3, [r7, #23]
 8017488:	2b04      	cmp	r3, #4
 801748a:	d101      	bne.n	8017490 <dir_alloc+0x84>
 801748c:	2307      	movs	r3, #7
 801748e:	75fb      	strb	r3, [r7, #23]
	return res;
 8017490:	7dfb      	ldrb	r3, [r7, #23]
}
 8017492:	4618      	mov	r0, r3
 8017494:	3718      	adds	r7, #24
 8017496:	46bd      	mov	sp, r7
 8017498:	bd80      	pop	{r7, pc}

0801749a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801749a:	b580      	push	{r7, lr}
 801749c:	b084      	sub	sp, #16
 801749e:	af00      	add	r7, sp, #0
 80174a0:	6078      	str	r0, [r7, #4]
 80174a2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80174a4:	683b      	ldr	r3, [r7, #0]
 80174a6:	331a      	adds	r3, #26
 80174a8:	4618      	mov	r0, r3
 80174aa:	f7ff f847 	bl	801653c <ld_word>
 80174ae:	4603      	mov	r3, r0
 80174b0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	781b      	ldrb	r3, [r3, #0]
 80174b6:	2b03      	cmp	r3, #3
 80174b8:	d109      	bne.n	80174ce <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80174ba:	683b      	ldr	r3, [r7, #0]
 80174bc:	3314      	adds	r3, #20
 80174be:	4618      	mov	r0, r3
 80174c0:	f7ff f83c 	bl	801653c <ld_word>
 80174c4:	4603      	mov	r3, r0
 80174c6:	041b      	lsls	r3, r3, #16
 80174c8:	68fa      	ldr	r2, [r7, #12]
 80174ca:	4313      	orrs	r3, r2
 80174cc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80174ce:	68fb      	ldr	r3, [r7, #12]
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	3710      	adds	r7, #16
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd80      	pop	{r7, pc}

080174d8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b084      	sub	sp, #16
 80174dc:	af00      	add	r7, sp, #0
 80174de:	60f8      	str	r0, [r7, #12]
 80174e0:	60b9      	str	r1, [r7, #8]
 80174e2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80174e4:	68bb      	ldr	r3, [r7, #8]
 80174e6:	331a      	adds	r3, #26
 80174e8:	687a      	ldr	r2, [r7, #4]
 80174ea:	b292      	uxth	r2, r2
 80174ec:	4611      	mov	r1, r2
 80174ee:	4618      	mov	r0, r3
 80174f0:	f7ff f85f 	bl	80165b2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	781b      	ldrb	r3, [r3, #0]
 80174f8:	2b03      	cmp	r3, #3
 80174fa:	d109      	bne.n	8017510 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80174fc:	68bb      	ldr	r3, [r7, #8]
 80174fe:	f103 0214 	add.w	r2, r3, #20
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	0c1b      	lsrs	r3, r3, #16
 8017506:	b29b      	uxth	r3, r3
 8017508:	4619      	mov	r1, r3
 801750a:	4610      	mov	r0, r2
 801750c:	f7ff f851 	bl	80165b2 <st_word>
	}
}
 8017510:	bf00      	nop
 8017512:	3710      	adds	r7, #16
 8017514:	46bd      	mov	sp, r7
 8017516:	bd80      	pop	{r7, pc}

08017518 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b086      	sub	sp, #24
 801751c:	af00      	add	r7, sp, #0
 801751e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017526:	2100      	movs	r1, #0
 8017528:	6878      	ldr	r0, [r7, #4]
 801752a:	f7ff fe2f 	bl	801718c <dir_sdi>
 801752e:	4603      	mov	r3, r0
 8017530:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017532:	7dfb      	ldrb	r3, [r7, #23]
 8017534:	2b00      	cmp	r3, #0
 8017536:	d001      	beq.n	801753c <dir_find+0x24>
 8017538:	7dfb      	ldrb	r3, [r7, #23]
 801753a:	e03e      	b.n	80175ba <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	69db      	ldr	r3, [r3, #28]
 8017540:	4619      	mov	r1, r3
 8017542:	6938      	ldr	r0, [r7, #16]
 8017544:	f7ff faaa 	bl	8016a9c <move_window>
 8017548:	4603      	mov	r3, r0
 801754a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801754c:	7dfb      	ldrb	r3, [r7, #23]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d12f      	bne.n	80175b2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	6a1b      	ldr	r3, [r3, #32]
 8017556:	781b      	ldrb	r3, [r3, #0]
 8017558:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801755a:	7bfb      	ldrb	r3, [r7, #15]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d102      	bne.n	8017566 <dir_find+0x4e>
 8017560:	2304      	movs	r3, #4
 8017562:	75fb      	strb	r3, [r7, #23]
 8017564:	e028      	b.n	80175b8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	6a1b      	ldr	r3, [r3, #32]
 801756a:	330b      	adds	r3, #11
 801756c:	781b      	ldrb	r3, [r3, #0]
 801756e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017572:	b2da      	uxtb	r2, r3
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	6a1b      	ldr	r3, [r3, #32]
 801757c:	330b      	adds	r3, #11
 801757e:	781b      	ldrb	r3, [r3, #0]
 8017580:	f003 0308 	and.w	r3, r3, #8
 8017584:	2b00      	cmp	r3, #0
 8017586:	d10a      	bne.n	801759e <dir_find+0x86>
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	6a18      	ldr	r0, [r3, #32]
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	3324      	adds	r3, #36	; 0x24
 8017590:	220b      	movs	r2, #11
 8017592:	4619      	mov	r1, r3
 8017594:	f7ff f88f 	bl	80166b6 <mem_cmp>
 8017598:	4603      	mov	r3, r0
 801759a:	2b00      	cmp	r3, #0
 801759c:	d00b      	beq.n	80175b6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801759e:	2100      	movs	r1, #0
 80175a0:	6878      	ldr	r0, [r7, #4]
 80175a2:	f7ff fe6e 	bl	8017282 <dir_next>
 80175a6:	4603      	mov	r3, r0
 80175a8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80175aa:	7dfb      	ldrb	r3, [r7, #23]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d0c5      	beq.n	801753c <dir_find+0x24>
 80175b0:	e002      	b.n	80175b8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80175b2:	bf00      	nop
 80175b4:	e000      	b.n	80175b8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80175b6:	bf00      	nop

	return res;
 80175b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80175ba:	4618      	mov	r0, r3
 80175bc:	3718      	adds	r7, #24
 80175be:	46bd      	mov	sp, r7
 80175c0:	bd80      	pop	{r7, pc}

080175c2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80175c2:	b580      	push	{r7, lr}
 80175c4:	b084      	sub	sp, #16
 80175c6:	af00      	add	r7, sp, #0
 80175c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80175d0:	2101      	movs	r1, #1
 80175d2:	6878      	ldr	r0, [r7, #4]
 80175d4:	f7ff ff1a 	bl	801740c <dir_alloc>
 80175d8:	4603      	mov	r3, r0
 80175da:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80175dc:	7bfb      	ldrb	r3, [r7, #15]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d11c      	bne.n	801761c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	69db      	ldr	r3, [r3, #28]
 80175e6:	4619      	mov	r1, r3
 80175e8:	68b8      	ldr	r0, [r7, #8]
 80175ea:	f7ff fa57 	bl	8016a9c <move_window>
 80175ee:	4603      	mov	r3, r0
 80175f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80175f2:	7bfb      	ldrb	r3, [r7, #15]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d111      	bne.n	801761c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	6a1b      	ldr	r3, [r3, #32]
 80175fc:	2220      	movs	r2, #32
 80175fe:	2100      	movs	r1, #0
 8017600:	4618      	mov	r0, r3
 8017602:	f7ff f83e 	bl	8016682 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	6a18      	ldr	r0, [r3, #32]
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	3324      	adds	r3, #36	; 0x24
 801760e:	220b      	movs	r2, #11
 8017610:	4619      	mov	r1, r3
 8017612:	f7ff f815 	bl	8016640 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8017616:	68bb      	ldr	r3, [r7, #8]
 8017618:	2201      	movs	r2, #1
 801761a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801761c:	7bfb      	ldrb	r3, [r7, #15]
}
 801761e:	4618      	mov	r0, r3
 8017620:	3710      	adds	r7, #16
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}
	...

08017628 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b088      	sub	sp, #32
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
 8017630:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	60fb      	str	r3, [r7, #12]
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	3324      	adds	r3, #36	; 0x24
 801763c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801763e:	220b      	movs	r2, #11
 8017640:	2120      	movs	r1, #32
 8017642:	68b8      	ldr	r0, [r7, #8]
 8017644:	f7ff f81d 	bl	8016682 <mem_set>
	si = i = 0; ni = 8;
 8017648:	2300      	movs	r3, #0
 801764a:	613b      	str	r3, [r7, #16]
 801764c:	693b      	ldr	r3, [r7, #16]
 801764e:	617b      	str	r3, [r7, #20]
 8017650:	2308      	movs	r3, #8
 8017652:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017654:	697b      	ldr	r3, [r7, #20]
 8017656:	1c5a      	adds	r2, r3, #1
 8017658:	617a      	str	r2, [r7, #20]
 801765a:	68fa      	ldr	r2, [r7, #12]
 801765c:	4413      	add	r3, r2
 801765e:	781b      	ldrb	r3, [r3, #0]
 8017660:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017662:	7ffb      	ldrb	r3, [r7, #31]
 8017664:	2b20      	cmp	r3, #32
 8017666:	d94e      	bls.n	8017706 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8017668:	7ffb      	ldrb	r3, [r7, #31]
 801766a:	2b2f      	cmp	r3, #47	; 0x2f
 801766c:	d006      	beq.n	801767c <create_name+0x54>
 801766e:	7ffb      	ldrb	r3, [r7, #31]
 8017670:	2b5c      	cmp	r3, #92	; 0x5c
 8017672:	d110      	bne.n	8017696 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017674:	e002      	b.n	801767c <create_name+0x54>
 8017676:	697b      	ldr	r3, [r7, #20]
 8017678:	3301      	adds	r3, #1
 801767a:	617b      	str	r3, [r7, #20]
 801767c:	68fa      	ldr	r2, [r7, #12]
 801767e:	697b      	ldr	r3, [r7, #20]
 8017680:	4413      	add	r3, r2
 8017682:	781b      	ldrb	r3, [r3, #0]
 8017684:	2b2f      	cmp	r3, #47	; 0x2f
 8017686:	d0f6      	beq.n	8017676 <create_name+0x4e>
 8017688:	68fa      	ldr	r2, [r7, #12]
 801768a:	697b      	ldr	r3, [r7, #20]
 801768c:	4413      	add	r3, r2
 801768e:	781b      	ldrb	r3, [r3, #0]
 8017690:	2b5c      	cmp	r3, #92	; 0x5c
 8017692:	d0f0      	beq.n	8017676 <create_name+0x4e>
			break;
 8017694:	e038      	b.n	8017708 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8017696:	7ffb      	ldrb	r3, [r7, #31]
 8017698:	2b2e      	cmp	r3, #46	; 0x2e
 801769a:	d003      	beq.n	80176a4 <create_name+0x7c>
 801769c:	693a      	ldr	r2, [r7, #16]
 801769e:	69bb      	ldr	r3, [r7, #24]
 80176a0:	429a      	cmp	r2, r3
 80176a2:	d30c      	bcc.n	80176be <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80176a4:	69bb      	ldr	r3, [r7, #24]
 80176a6:	2b0b      	cmp	r3, #11
 80176a8:	d002      	beq.n	80176b0 <create_name+0x88>
 80176aa:	7ffb      	ldrb	r3, [r7, #31]
 80176ac:	2b2e      	cmp	r3, #46	; 0x2e
 80176ae:	d001      	beq.n	80176b4 <create_name+0x8c>
 80176b0:	2306      	movs	r3, #6
 80176b2:	e044      	b.n	801773e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80176b4:	2308      	movs	r3, #8
 80176b6:	613b      	str	r3, [r7, #16]
 80176b8:	230b      	movs	r3, #11
 80176ba:	61bb      	str	r3, [r7, #24]
			continue;
 80176bc:	e022      	b.n	8017704 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80176be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	da04      	bge.n	80176d0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80176c6:	7ffb      	ldrb	r3, [r7, #31]
 80176c8:	3b80      	subs	r3, #128	; 0x80
 80176ca:	4a1f      	ldr	r2, [pc, #124]	; (8017748 <create_name+0x120>)
 80176cc:	5cd3      	ldrb	r3, [r2, r3]
 80176ce:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80176d0:	7ffb      	ldrb	r3, [r7, #31]
 80176d2:	4619      	mov	r1, r3
 80176d4:	481d      	ldr	r0, [pc, #116]	; (801774c <create_name+0x124>)
 80176d6:	f7ff f815 	bl	8016704 <chk_chr>
 80176da:	4603      	mov	r3, r0
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d001      	beq.n	80176e4 <create_name+0xbc>
 80176e0:	2306      	movs	r3, #6
 80176e2:	e02c      	b.n	801773e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80176e4:	7ffb      	ldrb	r3, [r7, #31]
 80176e6:	2b60      	cmp	r3, #96	; 0x60
 80176e8:	d905      	bls.n	80176f6 <create_name+0xce>
 80176ea:	7ffb      	ldrb	r3, [r7, #31]
 80176ec:	2b7a      	cmp	r3, #122	; 0x7a
 80176ee:	d802      	bhi.n	80176f6 <create_name+0xce>
 80176f0:	7ffb      	ldrb	r3, [r7, #31]
 80176f2:	3b20      	subs	r3, #32
 80176f4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80176f6:	693b      	ldr	r3, [r7, #16]
 80176f8:	1c5a      	adds	r2, r3, #1
 80176fa:	613a      	str	r2, [r7, #16]
 80176fc:	68ba      	ldr	r2, [r7, #8]
 80176fe:	4413      	add	r3, r2
 8017700:	7ffa      	ldrb	r2, [r7, #31]
 8017702:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017704:	e7a6      	b.n	8017654 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017706:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8017708:	68fa      	ldr	r2, [r7, #12]
 801770a:	697b      	ldr	r3, [r7, #20]
 801770c:	441a      	add	r2, r3
 801770e:	683b      	ldr	r3, [r7, #0]
 8017710:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8017712:	693b      	ldr	r3, [r7, #16]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d101      	bne.n	801771c <create_name+0xf4>
 8017718:	2306      	movs	r3, #6
 801771a:	e010      	b.n	801773e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801771c:	68bb      	ldr	r3, [r7, #8]
 801771e:	781b      	ldrb	r3, [r3, #0]
 8017720:	2be5      	cmp	r3, #229	; 0xe5
 8017722:	d102      	bne.n	801772a <create_name+0x102>
 8017724:	68bb      	ldr	r3, [r7, #8]
 8017726:	2205      	movs	r2, #5
 8017728:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801772a:	7ffb      	ldrb	r3, [r7, #31]
 801772c:	2b20      	cmp	r3, #32
 801772e:	d801      	bhi.n	8017734 <create_name+0x10c>
 8017730:	2204      	movs	r2, #4
 8017732:	e000      	b.n	8017736 <create_name+0x10e>
 8017734:	2200      	movs	r2, #0
 8017736:	68bb      	ldr	r3, [r7, #8]
 8017738:	330b      	adds	r3, #11
 801773a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801773c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801773e:	4618      	mov	r0, r3
 8017740:	3720      	adds	r7, #32
 8017742:	46bd      	mov	sp, r7
 8017744:	bd80      	pop	{r7, pc}
 8017746:	bf00      	nop
 8017748:	0801af68 	.word	0x0801af68
 801774c:	0801ae8c 	.word	0x0801ae8c

08017750 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b086      	sub	sp, #24
 8017754:	af00      	add	r7, sp, #0
 8017756:	6078      	str	r0, [r7, #4]
 8017758:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801775e:	693b      	ldr	r3, [r7, #16]
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017764:	e002      	b.n	801776c <follow_path+0x1c>
 8017766:	683b      	ldr	r3, [r7, #0]
 8017768:	3301      	adds	r3, #1
 801776a:	603b      	str	r3, [r7, #0]
 801776c:	683b      	ldr	r3, [r7, #0]
 801776e:	781b      	ldrb	r3, [r3, #0]
 8017770:	2b2f      	cmp	r3, #47	; 0x2f
 8017772:	d0f8      	beq.n	8017766 <follow_path+0x16>
 8017774:	683b      	ldr	r3, [r7, #0]
 8017776:	781b      	ldrb	r3, [r3, #0]
 8017778:	2b5c      	cmp	r3, #92	; 0x5c
 801777a:	d0f4      	beq.n	8017766 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801777c:	693b      	ldr	r3, [r7, #16]
 801777e:	2200      	movs	r2, #0
 8017780:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017782:	683b      	ldr	r3, [r7, #0]
 8017784:	781b      	ldrb	r3, [r3, #0]
 8017786:	2b1f      	cmp	r3, #31
 8017788:	d80a      	bhi.n	80177a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	2280      	movs	r2, #128	; 0x80
 801778e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8017792:	2100      	movs	r1, #0
 8017794:	6878      	ldr	r0, [r7, #4]
 8017796:	f7ff fcf9 	bl	801718c <dir_sdi>
 801779a:	4603      	mov	r3, r0
 801779c:	75fb      	strb	r3, [r7, #23]
 801779e:	e043      	b.n	8017828 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80177a0:	463b      	mov	r3, r7
 80177a2:	4619      	mov	r1, r3
 80177a4:	6878      	ldr	r0, [r7, #4]
 80177a6:	f7ff ff3f 	bl	8017628 <create_name>
 80177aa:	4603      	mov	r3, r0
 80177ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80177ae:	7dfb      	ldrb	r3, [r7, #23]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d134      	bne.n	801781e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f7ff feaf 	bl	8017518 <dir_find>
 80177ba:	4603      	mov	r3, r0
 80177bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80177c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80177c6:	7dfb      	ldrb	r3, [r7, #23]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d00a      	beq.n	80177e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80177cc:	7dfb      	ldrb	r3, [r7, #23]
 80177ce:	2b04      	cmp	r3, #4
 80177d0:	d127      	bne.n	8017822 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80177d2:	7afb      	ldrb	r3, [r7, #11]
 80177d4:	f003 0304 	and.w	r3, r3, #4
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d122      	bne.n	8017822 <follow_path+0xd2>
 80177dc:	2305      	movs	r3, #5
 80177de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80177e0:	e01f      	b.n	8017822 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80177e2:	7afb      	ldrb	r3, [r7, #11]
 80177e4:	f003 0304 	and.w	r3, r3, #4
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d11c      	bne.n	8017826 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80177ec:	693b      	ldr	r3, [r7, #16]
 80177ee:	799b      	ldrb	r3, [r3, #6]
 80177f0:	f003 0310 	and.w	r3, r3, #16
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d102      	bne.n	80177fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 80177f8:	2305      	movs	r3, #5
 80177fa:	75fb      	strb	r3, [r7, #23]
 80177fc:	e014      	b.n	8017828 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	695b      	ldr	r3, [r3, #20]
 8017808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801780c:	4413      	add	r3, r2
 801780e:	4619      	mov	r1, r3
 8017810:	68f8      	ldr	r0, [r7, #12]
 8017812:	f7ff fe42 	bl	801749a <ld_clust>
 8017816:	4602      	mov	r2, r0
 8017818:	693b      	ldr	r3, [r7, #16]
 801781a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801781c:	e7c0      	b.n	80177a0 <follow_path+0x50>
			if (res != FR_OK) break;
 801781e:	bf00      	nop
 8017820:	e002      	b.n	8017828 <follow_path+0xd8>
				break;
 8017822:	bf00      	nop
 8017824:	e000      	b.n	8017828 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017826:	bf00      	nop
			}
		}
	}

	return res;
 8017828:	7dfb      	ldrb	r3, [r7, #23]
}
 801782a:	4618      	mov	r0, r3
 801782c:	3718      	adds	r7, #24
 801782e:	46bd      	mov	sp, r7
 8017830:	bd80      	pop	{r7, pc}

08017832 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017832:	b480      	push	{r7}
 8017834:	b087      	sub	sp, #28
 8017836:	af00      	add	r7, sp, #0
 8017838:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801783a:	f04f 33ff 	mov.w	r3, #4294967295
 801783e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d031      	beq.n	80178ac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	617b      	str	r3, [r7, #20]
 801784e:	e002      	b.n	8017856 <get_ldnumber+0x24>
 8017850:	697b      	ldr	r3, [r7, #20]
 8017852:	3301      	adds	r3, #1
 8017854:	617b      	str	r3, [r7, #20]
 8017856:	697b      	ldr	r3, [r7, #20]
 8017858:	781b      	ldrb	r3, [r3, #0]
 801785a:	2b20      	cmp	r3, #32
 801785c:	d903      	bls.n	8017866 <get_ldnumber+0x34>
 801785e:	697b      	ldr	r3, [r7, #20]
 8017860:	781b      	ldrb	r3, [r3, #0]
 8017862:	2b3a      	cmp	r3, #58	; 0x3a
 8017864:	d1f4      	bne.n	8017850 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8017866:	697b      	ldr	r3, [r7, #20]
 8017868:	781b      	ldrb	r3, [r3, #0]
 801786a:	2b3a      	cmp	r3, #58	; 0x3a
 801786c:	d11c      	bne.n	80178a8 <get_ldnumber+0x76>
			tp = *path;
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	1c5a      	adds	r2, r3, #1
 8017878:	60fa      	str	r2, [r7, #12]
 801787a:	781b      	ldrb	r3, [r3, #0]
 801787c:	3b30      	subs	r3, #48	; 0x30
 801787e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8017880:	68bb      	ldr	r3, [r7, #8]
 8017882:	2b09      	cmp	r3, #9
 8017884:	d80e      	bhi.n	80178a4 <get_ldnumber+0x72>
 8017886:	68fa      	ldr	r2, [r7, #12]
 8017888:	697b      	ldr	r3, [r7, #20]
 801788a:	429a      	cmp	r2, r3
 801788c:	d10a      	bne.n	80178a4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801788e:	68bb      	ldr	r3, [r7, #8]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d107      	bne.n	80178a4 <get_ldnumber+0x72>
					vol = (int)i;
 8017894:	68bb      	ldr	r3, [r7, #8]
 8017896:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8017898:	697b      	ldr	r3, [r7, #20]
 801789a:	3301      	adds	r3, #1
 801789c:	617b      	str	r3, [r7, #20]
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	697a      	ldr	r2, [r7, #20]
 80178a2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80178a4:	693b      	ldr	r3, [r7, #16]
 80178a6:	e002      	b.n	80178ae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80178a8:	2300      	movs	r3, #0
 80178aa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80178ac:	693b      	ldr	r3, [r7, #16]
}
 80178ae:	4618      	mov	r0, r3
 80178b0:	371c      	adds	r7, #28
 80178b2:	46bd      	mov	sp, r7
 80178b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b8:	4770      	bx	lr
	...

080178bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b082      	sub	sp, #8
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
 80178c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	2200      	movs	r2, #0
 80178ca:	70da      	strb	r2, [r3, #3]
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	f04f 32ff 	mov.w	r2, #4294967295
 80178d2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80178d4:	6839      	ldr	r1, [r7, #0]
 80178d6:	6878      	ldr	r0, [r7, #4]
 80178d8:	f7ff f8e0 	bl	8016a9c <move_window>
 80178dc:	4603      	mov	r3, r0
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d001      	beq.n	80178e6 <check_fs+0x2a>
 80178e2:	2304      	movs	r3, #4
 80178e4:	e038      	b.n	8017958 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	3330      	adds	r3, #48	; 0x30
 80178ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80178ee:	4618      	mov	r0, r3
 80178f0:	f7fe fe24 	bl	801653c <ld_word>
 80178f4:	4603      	mov	r3, r0
 80178f6:	461a      	mov	r2, r3
 80178f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80178fc:	429a      	cmp	r2, r3
 80178fe:	d001      	beq.n	8017904 <check_fs+0x48>
 8017900:	2303      	movs	r3, #3
 8017902:	e029      	b.n	8017958 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801790a:	2be9      	cmp	r3, #233	; 0xe9
 801790c:	d009      	beq.n	8017922 <check_fs+0x66>
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017914:	2beb      	cmp	r3, #235	; 0xeb
 8017916:	d11e      	bne.n	8017956 <check_fs+0x9a>
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801791e:	2b90      	cmp	r3, #144	; 0x90
 8017920:	d119      	bne.n	8017956 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	3330      	adds	r3, #48	; 0x30
 8017926:	3336      	adds	r3, #54	; 0x36
 8017928:	4618      	mov	r0, r3
 801792a:	f7fe fe1f 	bl	801656c <ld_dword>
 801792e:	4603      	mov	r3, r0
 8017930:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017934:	4a0a      	ldr	r2, [pc, #40]	; (8017960 <check_fs+0xa4>)
 8017936:	4293      	cmp	r3, r2
 8017938:	d101      	bne.n	801793e <check_fs+0x82>
 801793a:	2300      	movs	r3, #0
 801793c:	e00c      	b.n	8017958 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	3330      	adds	r3, #48	; 0x30
 8017942:	3352      	adds	r3, #82	; 0x52
 8017944:	4618      	mov	r0, r3
 8017946:	f7fe fe11 	bl	801656c <ld_dword>
 801794a:	4602      	mov	r2, r0
 801794c:	4b05      	ldr	r3, [pc, #20]	; (8017964 <check_fs+0xa8>)
 801794e:	429a      	cmp	r2, r3
 8017950:	d101      	bne.n	8017956 <check_fs+0x9a>
 8017952:	2300      	movs	r3, #0
 8017954:	e000      	b.n	8017958 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017956:	2302      	movs	r3, #2
}
 8017958:	4618      	mov	r0, r3
 801795a:	3708      	adds	r7, #8
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}
 8017960:	00544146 	.word	0x00544146
 8017964:	33544146 	.word	0x33544146

08017968 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b096      	sub	sp, #88	; 0x58
 801796c:	af00      	add	r7, sp, #0
 801796e:	60f8      	str	r0, [r7, #12]
 8017970:	60b9      	str	r1, [r7, #8]
 8017972:	4613      	mov	r3, r2
 8017974:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8017976:	68bb      	ldr	r3, [r7, #8]
 8017978:	2200      	movs	r2, #0
 801797a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801797c:	68f8      	ldr	r0, [r7, #12]
 801797e:	f7ff ff58 	bl	8017832 <get_ldnumber>
 8017982:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017986:	2b00      	cmp	r3, #0
 8017988:	da01      	bge.n	801798e <find_volume+0x26>
 801798a:	230b      	movs	r3, #11
 801798c:	e22e      	b.n	8017dec <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801798e:	4aa8      	ldr	r2, [pc, #672]	; (8017c30 <find_volume+0x2c8>)
 8017990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017996:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8017998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801799a:	2b00      	cmp	r3, #0
 801799c:	d101      	bne.n	80179a2 <find_volume+0x3a>
 801799e:	230c      	movs	r3, #12
 80179a0:	e224      	b.n	8017dec <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80179a2:	68bb      	ldr	r3, [r7, #8]
 80179a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80179a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80179a8:	79fb      	ldrb	r3, [r7, #7]
 80179aa:	f023 0301 	bic.w	r3, r3, #1
 80179ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80179b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179b2:	781b      	ldrb	r3, [r3, #0]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d01a      	beq.n	80179ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80179b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179ba:	785b      	ldrb	r3, [r3, #1]
 80179bc:	4618      	mov	r0, r3
 80179be:	f7fe fd1f 	bl	8016400 <disk_status>
 80179c2:	4603      	mov	r3, r0
 80179c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80179c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80179cc:	f003 0301 	and.w	r3, r3, #1
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d10c      	bne.n	80179ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80179d4:	79fb      	ldrb	r3, [r7, #7]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d007      	beq.n	80179ea <find_volume+0x82>
 80179da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80179de:	f003 0304 	and.w	r3, r3, #4
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d001      	beq.n	80179ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80179e6:	230a      	movs	r3, #10
 80179e8:	e200      	b.n	8017dec <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80179ea:	2300      	movs	r3, #0
 80179ec:	e1fe      	b.n	8017dec <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80179ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179f0:	2200      	movs	r2, #0
 80179f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80179f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179f6:	b2da      	uxtb	r2, r3
 80179f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80179fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179fe:	785b      	ldrb	r3, [r3, #1]
 8017a00:	4618      	mov	r0, r3
 8017a02:	f7fe fd17 	bl	8016434 <disk_initialize>
 8017a06:	4603      	mov	r3, r0
 8017a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017a10:	f003 0301 	and.w	r3, r3, #1
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d001      	beq.n	8017a1c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017a18:	2303      	movs	r3, #3
 8017a1a:	e1e7      	b.n	8017dec <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017a1c:	79fb      	ldrb	r3, [r7, #7]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d007      	beq.n	8017a32 <find_volume+0xca>
 8017a22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017a26:	f003 0304 	and.w	r3, r3, #4
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d001      	beq.n	8017a32 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8017a2e:	230a      	movs	r3, #10
 8017a30:	e1dc      	b.n	8017dec <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017a32:	2300      	movs	r3, #0
 8017a34:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017a36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017a38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017a3a:	f7ff ff3f 	bl	80178bc <check_fs>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017a44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a48:	2b02      	cmp	r3, #2
 8017a4a:	d14b      	bne.n	8017ae4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8017a50:	e01f      	b.n	8017a92 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a5a:	011b      	lsls	r3, r3, #4
 8017a5c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017a60:	4413      	add	r3, r2
 8017a62:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a66:	3304      	adds	r3, #4
 8017a68:	781b      	ldrb	r3, [r3, #0]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d006      	beq.n	8017a7c <find_volume+0x114>
 8017a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a70:	3308      	adds	r3, #8
 8017a72:	4618      	mov	r0, r3
 8017a74:	f7fe fd7a 	bl	801656c <ld_dword>
 8017a78:	4602      	mov	r2, r0
 8017a7a:	e000      	b.n	8017a7e <find_volume+0x116>
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a80:	009b      	lsls	r3, r3, #2
 8017a82:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8017a86:	440b      	add	r3, r1
 8017a88:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a8e:	3301      	adds	r3, #1
 8017a90:	643b      	str	r3, [r7, #64]	; 0x40
 8017a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a94:	2b03      	cmp	r3, #3
 8017a96:	d9dc      	bls.n	8017a52 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017a98:	2300      	movs	r3, #0
 8017a9a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8017a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d002      	beq.n	8017aa8 <find_volume+0x140>
 8017aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aa4:	3b01      	subs	r3, #1
 8017aa6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aaa:	009b      	lsls	r3, r3, #2
 8017aac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8017ab0:	4413      	add	r3, r2
 8017ab2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8017ab6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8017ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d005      	beq.n	8017aca <find_volume+0x162>
 8017abe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017ac0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017ac2:	f7ff fefb 	bl	80178bc <check_fs>
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	e000      	b.n	8017acc <find_volume+0x164>
 8017aca:	2303      	movs	r3, #3
 8017acc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017ad4:	2b01      	cmp	r3, #1
 8017ad6:	d905      	bls.n	8017ae4 <find_volume+0x17c>
 8017ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ada:	3301      	adds	r3, #1
 8017adc:	643b      	str	r3, [r7, #64]	; 0x40
 8017ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ae0:	2b03      	cmp	r3, #3
 8017ae2:	d9e1      	bls.n	8017aa8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017ae8:	2b04      	cmp	r3, #4
 8017aea:	d101      	bne.n	8017af0 <find_volume+0x188>
 8017aec:	2301      	movs	r3, #1
 8017aee:	e17d      	b.n	8017dec <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017af0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017af4:	2b01      	cmp	r3, #1
 8017af6:	d901      	bls.n	8017afc <find_volume+0x194>
 8017af8:	230d      	movs	r3, #13
 8017afa:	e177      	b.n	8017dec <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017afe:	3330      	adds	r3, #48	; 0x30
 8017b00:	330b      	adds	r3, #11
 8017b02:	4618      	mov	r0, r3
 8017b04:	f7fe fd1a 	bl	801653c <ld_word>
 8017b08:	4603      	mov	r3, r0
 8017b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b0e:	d001      	beq.n	8017b14 <find_volume+0x1ac>
 8017b10:	230d      	movs	r3, #13
 8017b12:	e16b      	b.n	8017dec <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b16:	3330      	adds	r3, #48	; 0x30
 8017b18:	3316      	adds	r3, #22
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	f7fe fd0e 	bl	801653c <ld_word>
 8017b20:	4603      	mov	r3, r0
 8017b22:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d106      	bne.n	8017b38 <find_volume+0x1d0>
 8017b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b2c:	3330      	adds	r3, #48	; 0x30
 8017b2e:	3324      	adds	r3, #36	; 0x24
 8017b30:	4618      	mov	r0, r3
 8017b32:	f7fe fd1b 	bl	801656c <ld_dword>
 8017b36:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017b3c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b40:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8017b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b4a:	789b      	ldrb	r3, [r3, #2]
 8017b4c:	2b01      	cmp	r3, #1
 8017b4e:	d005      	beq.n	8017b5c <find_volume+0x1f4>
 8017b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b52:	789b      	ldrb	r3, [r3, #2]
 8017b54:	2b02      	cmp	r3, #2
 8017b56:	d001      	beq.n	8017b5c <find_volume+0x1f4>
 8017b58:	230d      	movs	r3, #13
 8017b5a:	e147      	b.n	8017dec <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b5e:	789b      	ldrb	r3, [r3, #2]
 8017b60:	461a      	mov	r2, r3
 8017b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b64:	fb02 f303 	mul.w	r3, r2, r3
 8017b68:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017b70:	b29a      	uxth	r2, r3
 8017b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b78:	895b      	ldrh	r3, [r3, #10]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d008      	beq.n	8017b90 <find_volume+0x228>
 8017b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b80:	895b      	ldrh	r3, [r3, #10]
 8017b82:	461a      	mov	r2, r3
 8017b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b86:	895b      	ldrh	r3, [r3, #10]
 8017b88:	3b01      	subs	r3, #1
 8017b8a:	4013      	ands	r3, r2
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d001      	beq.n	8017b94 <find_volume+0x22c>
 8017b90:	230d      	movs	r3, #13
 8017b92:	e12b      	b.n	8017dec <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b96:	3330      	adds	r3, #48	; 0x30
 8017b98:	3311      	adds	r3, #17
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	f7fe fcce 	bl	801653c <ld_word>
 8017ba0:	4603      	mov	r3, r0
 8017ba2:	461a      	mov	r2, r3
 8017ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ba6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017baa:	891b      	ldrh	r3, [r3, #8]
 8017bac:	f003 030f 	and.w	r3, r3, #15
 8017bb0:	b29b      	uxth	r3, r3
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d001      	beq.n	8017bba <find_volume+0x252>
 8017bb6:	230d      	movs	r3, #13
 8017bb8:	e118      	b.n	8017dec <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8017bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bbc:	3330      	adds	r3, #48	; 0x30
 8017bbe:	3313      	adds	r3, #19
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	f7fe fcbb 	bl	801653c <ld_word>
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d106      	bne.n	8017bde <find_volume+0x276>
 8017bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bd2:	3330      	adds	r3, #48	; 0x30
 8017bd4:	3320      	adds	r3, #32
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	f7fe fcc8 	bl	801656c <ld_dword>
 8017bdc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017be0:	3330      	adds	r3, #48	; 0x30
 8017be2:	330e      	adds	r3, #14
 8017be4:	4618      	mov	r0, r3
 8017be6:	f7fe fca9 	bl	801653c <ld_word>
 8017bea:	4603      	mov	r3, r0
 8017bec:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017bee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d101      	bne.n	8017bf8 <find_volume+0x290>
 8017bf4:	230d      	movs	r3, #13
 8017bf6:	e0f9      	b.n	8017dec <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017bf8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bfc:	4413      	add	r3, r2
 8017bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017c00:	8912      	ldrh	r2, [r2, #8]
 8017c02:	0912      	lsrs	r2, r2, #4
 8017c04:	b292      	uxth	r2, r2
 8017c06:	4413      	add	r3, r2
 8017c08:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c0e:	429a      	cmp	r2, r3
 8017c10:	d201      	bcs.n	8017c16 <find_volume+0x2ae>
 8017c12:	230d      	movs	r3, #13
 8017c14:	e0ea      	b.n	8017dec <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c1a:	1ad3      	subs	r3, r2, r3
 8017c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017c1e:	8952      	ldrh	r2, [r2, #10]
 8017c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8017c24:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d103      	bne.n	8017c34 <find_volume+0x2cc>
 8017c2c:	230d      	movs	r3, #13
 8017c2e:	e0dd      	b.n	8017dec <find_volume+0x484>
 8017c30:	24000b5c 	.word	0x24000b5c
		fmt = FS_FAT32;
 8017c34:	2303      	movs	r3, #3
 8017c36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c3c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017c40:	4293      	cmp	r3, r2
 8017c42:	d802      	bhi.n	8017c4a <find_volume+0x2e2>
 8017c44:	2302      	movs	r3, #2
 8017c46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017c50:	4293      	cmp	r3, r2
 8017c52:	d802      	bhi.n	8017c5a <find_volume+0x2f2>
 8017c54:	2301      	movs	r3, #1
 8017c56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c5c:	1c9a      	adds	r2, r3, #2
 8017c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c60:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8017c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017c66:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017c68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c6c:	441a      	add	r2, r3
 8017c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c70:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8017c72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c76:	441a      	add	r2, r3
 8017c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c7a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8017c7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017c80:	2b03      	cmp	r3, #3
 8017c82:	d11e      	bne.n	8017cc2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c86:	3330      	adds	r3, #48	; 0x30
 8017c88:	332a      	adds	r3, #42	; 0x2a
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	f7fe fc56 	bl	801653c <ld_word>
 8017c90:	4603      	mov	r3, r0
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d001      	beq.n	8017c9a <find_volume+0x332>
 8017c96:	230d      	movs	r3, #13
 8017c98:	e0a8      	b.n	8017dec <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c9c:	891b      	ldrh	r3, [r3, #8]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d001      	beq.n	8017ca6 <find_volume+0x33e>
 8017ca2:	230d      	movs	r3, #13
 8017ca4:	e0a2      	b.n	8017dec <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca8:	3330      	adds	r3, #48	; 0x30
 8017caa:	332c      	adds	r3, #44	; 0x2c
 8017cac:	4618      	mov	r0, r3
 8017cae:	f7fe fc5d 	bl	801656c <ld_dword>
 8017cb2:	4602      	mov	r2, r0
 8017cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cb6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cba:	695b      	ldr	r3, [r3, #20]
 8017cbc:	009b      	lsls	r3, r3, #2
 8017cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8017cc0:	e01f      	b.n	8017d02 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cc4:	891b      	ldrh	r3, [r3, #8]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d101      	bne.n	8017cce <find_volume+0x366>
 8017cca:	230d      	movs	r3, #13
 8017ccc:	e08e      	b.n	8017dec <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cd0:	6a1a      	ldr	r2, [r3, #32]
 8017cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017cd4:	441a      	add	r2, r3
 8017cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cd8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017cda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017cde:	2b02      	cmp	r3, #2
 8017ce0:	d103      	bne.n	8017cea <find_volume+0x382>
 8017ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ce4:	695b      	ldr	r3, [r3, #20]
 8017ce6:	005b      	lsls	r3, r3, #1
 8017ce8:	e00a      	b.n	8017d00 <find_volume+0x398>
 8017cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cec:	695a      	ldr	r2, [r3, #20]
 8017cee:	4613      	mov	r3, r2
 8017cf0:	005b      	lsls	r3, r3, #1
 8017cf2:	4413      	add	r3, r2
 8017cf4:	085a      	lsrs	r2, r3, #1
 8017cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cf8:	695b      	ldr	r3, [r3, #20]
 8017cfa:	f003 0301 	and.w	r3, r3, #1
 8017cfe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017d00:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d04:	699a      	ldr	r2, [r3, #24]
 8017d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d08:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8017d0c:	0a5b      	lsrs	r3, r3, #9
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	d201      	bcs.n	8017d16 <find_volume+0x3ae>
 8017d12:	230d      	movs	r3, #13
 8017d14:	e06a      	b.n	8017dec <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d18:	f04f 32ff 	mov.w	r2, #4294967295
 8017d1c:	611a      	str	r2, [r3, #16]
 8017d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d20:	691a      	ldr	r2, [r3, #16]
 8017d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d24:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8017d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d28:	2280      	movs	r2, #128	; 0x80
 8017d2a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017d2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d30:	2b03      	cmp	r3, #3
 8017d32:	d149      	bne.n	8017dc8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d36:	3330      	adds	r3, #48	; 0x30
 8017d38:	3330      	adds	r3, #48	; 0x30
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f7fe fbfe 	bl	801653c <ld_word>
 8017d40:	4603      	mov	r3, r0
 8017d42:	2b01      	cmp	r3, #1
 8017d44:	d140      	bne.n	8017dc8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d48:	3301      	adds	r3, #1
 8017d4a:	4619      	mov	r1, r3
 8017d4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017d4e:	f7fe fea5 	bl	8016a9c <move_window>
 8017d52:	4603      	mov	r3, r0
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d137      	bne.n	8017dc8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8017d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d60:	3330      	adds	r3, #48	; 0x30
 8017d62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017d66:	4618      	mov	r0, r3
 8017d68:	f7fe fbe8 	bl	801653c <ld_word>
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	461a      	mov	r2, r3
 8017d70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017d74:	429a      	cmp	r2, r3
 8017d76:	d127      	bne.n	8017dc8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d7a:	3330      	adds	r3, #48	; 0x30
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	f7fe fbf5 	bl	801656c <ld_dword>
 8017d82:	4602      	mov	r2, r0
 8017d84:	4b1b      	ldr	r3, [pc, #108]	; (8017df4 <find_volume+0x48c>)
 8017d86:	429a      	cmp	r2, r3
 8017d88:	d11e      	bne.n	8017dc8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d8c:	3330      	adds	r3, #48	; 0x30
 8017d8e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017d92:	4618      	mov	r0, r3
 8017d94:	f7fe fbea 	bl	801656c <ld_dword>
 8017d98:	4602      	mov	r2, r0
 8017d9a:	4b17      	ldr	r3, [pc, #92]	; (8017df8 <find_volume+0x490>)
 8017d9c:	429a      	cmp	r2, r3
 8017d9e:	d113      	bne.n	8017dc8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017da2:	3330      	adds	r3, #48	; 0x30
 8017da4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8017da8:	4618      	mov	r0, r3
 8017daa:	f7fe fbdf 	bl	801656c <ld_dword>
 8017dae:	4602      	mov	r2, r0
 8017db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017db2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8017db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017db6:	3330      	adds	r3, #48	; 0x30
 8017db8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f7fe fbd5 	bl	801656c <ld_dword>
 8017dc2:	4602      	mov	r2, r0
 8017dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dc6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8017dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8017dce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017dd0:	4b0a      	ldr	r3, [pc, #40]	; (8017dfc <find_volume+0x494>)
 8017dd2:	881b      	ldrh	r3, [r3, #0]
 8017dd4:	3301      	adds	r3, #1
 8017dd6:	b29a      	uxth	r2, r3
 8017dd8:	4b08      	ldr	r3, [pc, #32]	; (8017dfc <find_volume+0x494>)
 8017dda:	801a      	strh	r2, [r3, #0]
 8017ddc:	4b07      	ldr	r3, [pc, #28]	; (8017dfc <find_volume+0x494>)
 8017dde:	881a      	ldrh	r2, [r3, #0]
 8017de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017de2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8017de4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017de6:	f7fe fdf1 	bl	80169cc <clear_lock>
#endif
	return FR_OK;
 8017dea:	2300      	movs	r3, #0
}
 8017dec:	4618      	mov	r0, r3
 8017dee:	3758      	adds	r7, #88	; 0x58
 8017df0:	46bd      	mov	sp, r7
 8017df2:	bd80      	pop	{r7, pc}
 8017df4:	41615252 	.word	0x41615252
 8017df8:	61417272 	.word	0x61417272
 8017dfc:	24000b60 	.word	0x24000b60

08017e00 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b084      	sub	sp, #16
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
 8017e08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017e0a:	2309      	movs	r3, #9
 8017e0c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d01c      	beq.n	8017e4e <validate+0x4e>
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d018      	beq.n	8017e4e <validate+0x4e>
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	781b      	ldrb	r3, [r3, #0]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d013      	beq.n	8017e4e <validate+0x4e>
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	889a      	ldrh	r2, [r3, #4]
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	88db      	ldrh	r3, [r3, #6]
 8017e30:	429a      	cmp	r2, r3
 8017e32:	d10c      	bne.n	8017e4e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	785b      	ldrb	r3, [r3, #1]
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	f7fe fae0 	bl	8016400 <disk_status>
 8017e40:	4603      	mov	r3, r0
 8017e42:	f003 0301 	and.w	r3, r3, #1
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d101      	bne.n	8017e4e <validate+0x4e>
			res = FR_OK;
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017e4e:	7bfb      	ldrb	r3, [r7, #15]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d102      	bne.n	8017e5a <validate+0x5a>
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	e000      	b.n	8017e5c <validate+0x5c>
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	683a      	ldr	r2, [r7, #0]
 8017e5e:	6013      	str	r3, [r2, #0]
	return res;
 8017e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e62:	4618      	mov	r0, r3
 8017e64:	3710      	adds	r7, #16
 8017e66:	46bd      	mov	sp, r7
 8017e68:	bd80      	pop	{r7, pc}
	...

08017e6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b088      	sub	sp, #32
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	60f8      	str	r0, [r7, #12]
 8017e74:	60b9      	str	r1, [r7, #8]
 8017e76:	4613      	mov	r3, r2
 8017e78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017e7a:	68bb      	ldr	r3, [r7, #8]
 8017e7c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8017e7e:	f107 0310 	add.w	r3, r7, #16
 8017e82:	4618      	mov	r0, r3
 8017e84:	f7ff fcd5 	bl	8017832 <get_ldnumber>
 8017e88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8017e8a:	69fb      	ldr	r3, [r7, #28]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	da01      	bge.n	8017e94 <f_mount+0x28>
 8017e90:	230b      	movs	r3, #11
 8017e92:	e02b      	b.n	8017eec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017e94:	4a17      	ldr	r2, [pc, #92]	; (8017ef4 <f_mount+0x88>)
 8017e96:	69fb      	ldr	r3, [r7, #28]
 8017e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8017e9e:	69bb      	ldr	r3, [r7, #24]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d005      	beq.n	8017eb0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8017ea4:	69b8      	ldr	r0, [r7, #24]
 8017ea6:	f7fe fd91 	bl	80169cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8017eaa:	69bb      	ldr	r3, [r7, #24]
 8017eac:	2200      	movs	r2, #0
 8017eae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d002      	beq.n	8017ebc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	2200      	movs	r2, #0
 8017eba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8017ebc:	68fa      	ldr	r2, [r7, #12]
 8017ebe:	490d      	ldr	r1, [pc, #52]	; (8017ef4 <f_mount+0x88>)
 8017ec0:	69fb      	ldr	r3, [r7, #28]
 8017ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d002      	beq.n	8017ed2 <f_mount+0x66>
 8017ecc:	79fb      	ldrb	r3, [r7, #7]
 8017ece:	2b01      	cmp	r3, #1
 8017ed0:	d001      	beq.n	8017ed6 <f_mount+0x6a>
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	e00a      	b.n	8017eec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017ed6:	f107 010c 	add.w	r1, r7, #12
 8017eda:	f107 0308 	add.w	r3, r7, #8
 8017ede:	2200      	movs	r2, #0
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	f7ff fd41 	bl	8017968 <find_volume>
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8017eec:	4618      	mov	r0, r3
 8017eee:	3720      	adds	r7, #32
 8017ef0:	46bd      	mov	sp, r7
 8017ef2:	bd80      	pop	{r7, pc}
 8017ef4:	24000b5c 	.word	0x24000b5c

08017ef8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b098      	sub	sp, #96	; 0x60
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	60f8      	str	r0, [r7, #12]
 8017f00:	60b9      	str	r1, [r7, #8]
 8017f02:	4613      	mov	r3, r2
 8017f04:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d101      	bne.n	8017f10 <f_open+0x18>
 8017f0c:	2309      	movs	r3, #9
 8017f0e:	e1ad      	b.n	801826c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017f10:	79fb      	ldrb	r3, [r7, #7]
 8017f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f16:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017f18:	79fa      	ldrb	r2, [r7, #7]
 8017f1a:	f107 0110 	add.w	r1, r7, #16
 8017f1e:	f107 0308 	add.w	r3, r7, #8
 8017f22:	4618      	mov	r0, r3
 8017f24:	f7ff fd20 	bl	8017968 <find_volume>
 8017f28:	4603      	mov	r3, r0
 8017f2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8017f2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	f040 8191 	bne.w	801825a <f_open+0x362>
		dj.obj.fs = fs;
 8017f38:	693b      	ldr	r3, [r7, #16]
 8017f3a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017f3c:	68ba      	ldr	r2, [r7, #8]
 8017f3e:	f107 0314 	add.w	r3, r7, #20
 8017f42:	4611      	mov	r1, r2
 8017f44:	4618      	mov	r0, r3
 8017f46:	f7ff fc03 	bl	8017750 <follow_path>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017f50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d11a      	bne.n	8017f8e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017f58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017f5c:	b25b      	sxtb	r3, r3
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	da03      	bge.n	8017f6a <f_open+0x72>
				res = FR_INVALID_NAME;
 8017f62:	2306      	movs	r3, #6
 8017f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017f68:	e011      	b.n	8017f8e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017f6a:	79fb      	ldrb	r3, [r7, #7]
 8017f6c:	f023 0301 	bic.w	r3, r3, #1
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	bf14      	ite	ne
 8017f74:	2301      	movne	r3, #1
 8017f76:	2300      	moveq	r3, #0
 8017f78:	b2db      	uxtb	r3, r3
 8017f7a:	461a      	mov	r2, r3
 8017f7c:	f107 0314 	add.w	r3, r7, #20
 8017f80:	4611      	mov	r1, r2
 8017f82:	4618      	mov	r0, r3
 8017f84:	f7fe fbda 	bl	801673c <chk_lock>
 8017f88:	4603      	mov	r3, r0
 8017f8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017f8e:	79fb      	ldrb	r3, [r7, #7]
 8017f90:	f003 031c 	and.w	r3, r3, #28
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d07f      	beq.n	8018098 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8017f98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d017      	beq.n	8017fd0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017fa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017fa4:	2b04      	cmp	r3, #4
 8017fa6:	d10e      	bne.n	8017fc6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017fa8:	f7fe fc24 	bl	80167f4 <enq_lock>
 8017fac:	4603      	mov	r3, r0
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d006      	beq.n	8017fc0 <f_open+0xc8>
 8017fb2:	f107 0314 	add.w	r3, r7, #20
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f7ff fb03 	bl	80175c2 <dir_register>
 8017fbc:	4603      	mov	r3, r0
 8017fbe:	e000      	b.n	8017fc2 <f_open+0xca>
 8017fc0:	2312      	movs	r3, #18
 8017fc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8017fc6:	79fb      	ldrb	r3, [r7, #7]
 8017fc8:	f043 0308 	orr.w	r3, r3, #8
 8017fcc:	71fb      	strb	r3, [r7, #7]
 8017fce:	e010      	b.n	8017ff2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017fd0:	7ebb      	ldrb	r3, [r7, #26]
 8017fd2:	f003 0311 	and.w	r3, r3, #17
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d003      	beq.n	8017fe2 <f_open+0xea>
					res = FR_DENIED;
 8017fda:	2307      	movs	r3, #7
 8017fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017fe0:	e007      	b.n	8017ff2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8017fe2:	79fb      	ldrb	r3, [r7, #7]
 8017fe4:	f003 0304 	and.w	r3, r3, #4
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d002      	beq.n	8017ff2 <f_open+0xfa>
 8017fec:	2308      	movs	r3, #8
 8017fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d168      	bne.n	80180cc <f_open+0x1d4>
 8017ffa:	79fb      	ldrb	r3, [r7, #7]
 8017ffc:	f003 0308 	and.w	r3, r3, #8
 8018000:	2b00      	cmp	r3, #0
 8018002:	d063      	beq.n	80180cc <f_open+0x1d4>
				dw = GET_FATTIME();
 8018004:	f7fb f8fe 	bl	8013204 <get_fattime>
 8018008:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801800a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801800c:	330e      	adds	r3, #14
 801800e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018010:	4618      	mov	r0, r3
 8018012:	f7fe fae9 	bl	80165e8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018018:	3316      	adds	r3, #22
 801801a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801801c:	4618      	mov	r0, r3
 801801e:	f7fe fae3 	bl	80165e8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018024:	330b      	adds	r3, #11
 8018026:	2220      	movs	r2, #32
 8018028:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801802a:	693b      	ldr	r3, [r7, #16]
 801802c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801802e:	4611      	mov	r1, r2
 8018030:	4618      	mov	r0, r3
 8018032:	f7ff fa32 	bl	801749a <ld_clust>
 8018036:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018038:	693b      	ldr	r3, [r7, #16]
 801803a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801803c:	2200      	movs	r2, #0
 801803e:	4618      	mov	r0, r3
 8018040:	f7ff fa4a 	bl	80174d8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018046:	331c      	adds	r3, #28
 8018048:	2100      	movs	r1, #0
 801804a:	4618      	mov	r0, r3
 801804c:	f7fe facc 	bl	80165e8 <st_dword>
					fs->wflag = 1;
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	2201      	movs	r2, #1
 8018054:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018058:	2b00      	cmp	r3, #0
 801805a:	d037      	beq.n	80180cc <f_open+0x1d4>
						dw = fs->winsect;
 801805c:	693b      	ldr	r3, [r7, #16]
 801805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018060:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8018062:	f107 0314 	add.w	r3, r7, #20
 8018066:	2200      	movs	r2, #0
 8018068:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801806a:	4618      	mov	r0, r3
 801806c:	f7fe ff5d 	bl	8016f2a <remove_chain>
 8018070:	4603      	mov	r3, r0
 8018072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8018076:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801807a:	2b00      	cmp	r3, #0
 801807c:	d126      	bne.n	80180cc <f_open+0x1d4>
							res = move_window(fs, dw);
 801807e:	693b      	ldr	r3, [r7, #16]
 8018080:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018082:	4618      	mov	r0, r3
 8018084:	f7fe fd0a 	bl	8016a9c <move_window>
 8018088:	4603      	mov	r3, r0
 801808a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801808e:	693b      	ldr	r3, [r7, #16]
 8018090:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018092:	3a01      	subs	r2, #1
 8018094:	60da      	str	r2, [r3, #12]
 8018096:	e019      	b.n	80180cc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018098:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801809c:	2b00      	cmp	r3, #0
 801809e:	d115      	bne.n	80180cc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80180a0:	7ebb      	ldrb	r3, [r7, #26]
 80180a2:	f003 0310 	and.w	r3, r3, #16
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d003      	beq.n	80180b2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80180aa:	2304      	movs	r3, #4
 80180ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80180b0:	e00c      	b.n	80180cc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80180b2:	79fb      	ldrb	r3, [r7, #7]
 80180b4:	f003 0302 	and.w	r3, r3, #2
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d007      	beq.n	80180cc <f_open+0x1d4>
 80180bc:	7ebb      	ldrb	r3, [r7, #26]
 80180be:	f003 0301 	and.w	r3, r3, #1
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d002      	beq.n	80180cc <f_open+0x1d4>
						res = FR_DENIED;
 80180c6:	2307      	movs	r3, #7
 80180c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80180cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d128      	bne.n	8018126 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80180d4:	79fb      	ldrb	r3, [r7, #7]
 80180d6:	f003 0308 	and.w	r3, r3, #8
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d003      	beq.n	80180e6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80180de:	79fb      	ldrb	r3, [r7, #7]
 80180e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80180e6:	693b      	ldr	r3, [r7, #16]
 80180e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80180ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80180f4:	79fb      	ldrb	r3, [r7, #7]
 80180f6:	f023 0301 	bic.w	r3, r3, #1
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	bf14      	ite	ne
 80180fe:	2301      	movne	r3, #1
 8018100:	2300      	moveq	r3, #0
 8018102:	b2db      	uxtb	r3, r3
 8018104:	461a      	mov	r2, r3
 8018106:	f107 0314 	add.w	r3, r7, #20
 801810a:	4611      	mov	r1, r2
 801810c:	4618      	mov	r0, r3
 801810e:	f7fe fb93 	bl	8016838 <inc_lock>
 8018112:	4602      	mov	r2, r0
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	691b      	ldr	r3, [r3, #16]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d102      	bne.n	8018126 <f_open+0x22e>
 8018120:	2302      	movs	r3, #2
 8018122:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801812a:	2b00      	cmp	r3, #0
 801812c:	f040 8095 	bne.w	801825a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018130:	693b      	ldr	r3, [r7, #16]
 8018132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018134:	4611      	mov	r1, r2
 8018136:	4618      	mov	r0, r3
 8018138:	f7ff f9af 	bl	801749a <ld_clust>
 801813c:	4602      	mov	r2, r0
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018144:	331c      	adds	r3, #28
 8018146:	4618      	mov	r0, r3
 8018148:	f7fe fa10 	bl	801656c <ld_dword>
 801814c:	4602      	mov	r2, r0
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	2200      	movs	r2, #0
 8018156:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018158:	693a      	ldr	r2, [r7, #16]
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801815e:	693b      	ldr	r3, [r7, #16]
 8018160:	88da      	ldrh	r2, [r3, #6]
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	79fa      	ldrb	r2, [r7, #7]
 801816a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	2200      	movs	r2, #0
 8018170:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	2200      	movs	r2, #0
 8018176:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	2200      	movs	r2, #0
 801817c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	3330      	adds	r3, #48	; 0x30
 8018182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018186:	2100      	movs	r1, #0
 8018188:	4618      	mov	r0, r3
 801818a:	f7fe fa7a 	bl	8016682 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801818e:	79fb      	ldrb	r3, [r7, #7]
 8018190:	f003 0320 	and.w	r3, r3, #32
 8018194:	2b00      	cmp	r3, #0
 8018196:	d060      	beq.n	801825a <f_open+0x362>
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	68db      	ldr	r3, [r3, #12]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d05c      	beq.n	801825a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	68da      	ldr	r2, [r3, #12]
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80181a8:	693b      	ldr	r3, [r7, #16]
 80181aa:	895b      	ldrh	r3, [r3, #10]
 80181ac:	025b      	lsls	r3, r3, #9
 80181ae:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	689b      	ldr	r3, [r3, #8]
 80181b4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	68db      	ldr	r3, [r3, #12]
 80181ba:	657b      	str	r3, [r7, #84]	; 0x54
 80181bc:	e016      	b.n	80181ec <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80181c2:	4618      	mov	r0, r3
 80181c4:	f7fe fd25 	bl	8016c12 <get_fat>
 80181c8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80181ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80181cc:	2b01      	cmp	r3, #1
 80181ce:	d802      	bhi.n	80181d6 <f_open+0x2de>
 80181d0:	2302      	movs	r3, #2
 80181d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80181d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80181d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181dc:	d102      	bne.n	80181e4 <f_open+0x2ec>
 80181de:	2301      	movs	r3, #1
 80181e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80181e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80181e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181e8:	1ad3      	subs	r3, r2, r3
 80181ea:	657b      	str	r3, [r7, #84]	; 0x54
 80181ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d103      	bne.n	80181fc <f_open+0x304>
 80181f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80181f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181f8:	429a      	cmp	r2, r3
 80181fa:	d8e0      	bhi.n	80181be <f_open+0x2c6>
				}
				fp->clust = clst;
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018200:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018202:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018206:	2b00      	cmp	r3, #0
 8018208:	d127      	bne.n	801825a <f_open+0x362>
 801820a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801820c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018210:	2b00      	cmp	r3, #0
 8018212:	d022      	beq.n	801825a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018214:	693b      	ldr	r3, [r7, #16]
 8018216:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018218:	4618      	mov	r0, r3
 801821a:	f7fe fcdb 	bl	8016bd4 <clust2sect>
 801821e:	6478      	str	r0, [r7, #68]	; 0x44
 8018220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018222:	2b00      	cmp	r3, #0
 8018224:	d103      	bne.n	801822e <f_open+0x336>
						res = FR_INT_ERR;
 8018226:	2302      	movs	r3, #2
 8018228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801822c:	e015      	b.n	801825a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801822e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018230:	0a5a      	lsrs	r2, r3, #9
 8018232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018234:	441a      	add	r2, r3
 8018236:	68fb      	ldr	r3, [r7, #12]
 8018238:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801823a:	693b      	ldr	r3, [r7, #16]
 801823c:	7858      	ldrb	r0, [r3, #1]
 801823e:	68fb      	ldr	r3, [r7, #12]
 8018240:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	6a1a      	ldr	r2, [r3, #32]
 8018248:	2301      	movs	r3, #1
 801824a:	f7fe f919 	bl	8016480 <disk_read>
 801824e:	4603      	mov	r3, r0
 8018250:	2b00      	cmp	r3, #0
 8018252:	d002      	beq.n	801825a <f_open+0x362>
 8018254:	2301      	movs	r3, #1
 8018256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801825a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801825e:	2b00      	cmp	r3, #0
 8018260:	d002      	beq.n	8018268 <f_open+0x370>
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	2200      	movs	r2, #0
 8018266:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801826c:	4618      	mov	r0, r3
 801826e:	3760      	adds	r7, #96	; 0x60
 8018270:	46bd      	mov	sp, r7
 8018272:	bd80      	pop	{r7, pc}

08018274 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8018274:	b580      	push	{r7, lr}
 8018276:	b08e      	sub	sp, #56	; 0x38
 8018278:	af00      	add	r7, sp, #0
 801827a:	60f8      	str	r0, [r7, #12]
 801827c:	60b9      	str	r1, [r7, #8]
 801827e:	607a      	str	r2, [r7, #4]
 8018280:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8018282:	68bb      	ldr	r3, [r7, #8]
 8018284:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8018286:	683b      	ldr	r3, [r7, #0]
 8018288:	2200      	movs	r2, #0
 801828a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	f107 0214 	add.w	r2, r7, #20
 8018292:	4611      	mov	r1, r2
 8018294:	4618      	mov	r0, r3
 8018296:	f7ff fdb3 	bl	8017e00 <validate>
 801829a:	4603      	mov	r3, r0
 801829c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80182a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d107      	bne.n	80182b8 <f_read+0x44>
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	7d5b      	ldrb	r3, [r3, #21]
 80182ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80182b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d002      	beq.n	80182be <f_read+0x4a>
 80182b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182bc:	e115      	b.n	80184ea <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	7d1b      	ldrb	r3, [r3, #20]
 80182c2:	f003 0301 	and.w	r3, r3, #1
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d101      	bne.n	80182ce <f_read+0x5a>
 80182ca:	2307      	movs	r3, #7
 80182cc:	e10d      	b.n	80184ea <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	68da      	ldr	r2, [r3, #12]
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	699b      	ldr	r3, [r3, #24]
 80182d6:	1ad3      	subs	r3, r2, r3
 80182d8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80182da:	687a      	ldr	r2, [r7, #4]
 80182dc:	6a3b      	ldr	r3, [r7, #32]
 80182de:	429a      	cmp	r2, r3
 80182e0:	f240 80fe 	bls.w	80184e0 <f_read+0x26c>
 80182e4:	6a3b      	ldr	r3, [r7, #32]
 80182e6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80182e8:	e0fa      	b.n	80184e0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	699b      	ldr	r3, [r3, #24]
 80182ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	f040 80c6 	bne.w	8018484 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	699b      	ldr	r3, [r3, #24]
 80182fc:	0a5b      	lsrs	r3, r3, #9
 80182fe:	697a      	ldr	r2, [r7, #20]
 8018300:	8952      	ldrh	r2, [r2, #10]
 8018302:	3a01      	subs	r2, #1
 8018304:	4013      	ands	r3, r2
 8018306:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8018308:	69fb      	ldr	r3, [r7, #28]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d12f      	bne.n	801836e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	699b      	ldr	r3, [r3, #24]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d103      	bne.n	801831e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	689b      	ldr	r3, [r3, #8]
 801831a:	633b      	str	r3, [r7, #48]	; 0x30
 801831c:	e013      	b.n	8018346 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018322:	2b00      	cmp	r3, #0
 8018324:	d007      	beq.n	8018336 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	699b      	ldr	r3, [r3, #24]
 801832a:	4619      	mov	r1, r3
 801832c:	68f8      	ldr	r0, [r7, #12]
 801832e:	f7fe fef9 	bl	8017124 <clmt_clust>
 8018332:	6338      	str	r0, [r7, #48]	; 0x30
 8018334:	e007      	b.n	8018346 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8018336:	68fa      	ldr	r2, [r7, #12]
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	69db      	ldr	r3, [r3, #28]
 801833c:	4619      	mov	r1, r3
 801833e:	4610      	mov	r0, r2
 8018340:	f7fe fc67 	bl	8016c12 <get_fat>
 8018344:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8018346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018348:	2b01      	cmp	r3, #1
 801834a:	d804      	bhi.n	8018356 <f_read+0xe2>
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	2202      	movs	r2, #2
 8018350:	755a      	strb	r2, [r3, #21]
 8018352:	2302      	movs	r3, #2
 8018354:	e0c9      	b.n	80184ea <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801835c:	d104      	bne.n	8018368 <f_read+0xf4>
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	2201      	movs	r2, #1
 8018362:	755a      	strb	r2, [r3, #21]
 8018364:	2301      	movs	r3, #1
 8018366:	e0c0      	b.n	80184ea <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801836c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801836e:	697a      	ldr	r2, [r7, #20]
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	69db      	ldr	r3, [r3, #28]
 8018374:	4619      	mov	r1, r3
 8018376:	4610      	mov	r0, r2
 8018378:	f7fe fc2c 	bl	8016bd4 <clust2sect>
 801837c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801837e:	69bb      	ldr	r3, [r7, #24]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d104      	bne.n	801838e <f_read+0x11a>
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	2202      	movs	r2, #2
 8018388:	755a      	strb	r2, [r3, #21]
 801838a:	2302      	movs	r3, #2
 801838c:	e0ad      	b.n	80184ea <f_read+0x276>
			sect += csect;
 801838e:	69ba      	ldr	r2, [r7, #24]
 8018390:	69fb      	ldr	r3, [r7, #28]
 8018392:	4413      	add	r3, r2
 8018394:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	0a5b      	lsrs	r3, r3, #9
 801839a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d039      	beq.n	8018416 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80183a2:	69fa      	ldr	r2, [r7, #28]
 80183a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183a6:	4413      	add	r3, r2
 80183a8:	697a      	ldr	r2, [r7, #20]
 80183aa:	8952      	ldrh	r2, [r2, #10]
 80183ac:	4293      	cmp	r3, r2
 80183ae:	d905      	bls.n	80183bc <f_read+0x148>
					cc = fs->csize - csect;
 80183b0:	697b      	ldr	r3, [r7, #20]
 80183b2:	895b      	ldrh	r3, [r3, #10]
 80183b4:	461a      	mov	r2, r3
 80183b6:	69fb      	ldr	r3, [r7, #28]
 80183b8:	1ad3      	subs	r3, r2, r3
 80183ba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80183bc:	697b      	ldr	r3, [r7, #20]
 80183be:	7858      	ldrb	r0, [r3, #1]
 80183c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183c2:	69ba      	ldr	r2, [r7, #24]
 80183c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80183c6:	f7fe f85b 	bl	8016480 <disk_read>
 80183ca:	4603      	mov	r3, r0
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d004      	beq.n	80183da <f_read+0x166>
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	2201      	movs	r2, #1
 80183d4:	755a      	strb	r2, [r3, #21]
 80183d6:	2301      	movs	r3, #1
 80183d8:	e087      	b.n	80184ea <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	7d1b      	ldrb	r3, [r3, #20]
 80183de:	b25b      	sxtb	r3, r3
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	da14      	bge.n	801840e <f_read+0x19a>
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	6a1a      	ldr	r2, [r3, #32]
 80183e8:	69bb      	ldr	r3, [r7, #24]
 80183ea:	1ad3      	subs	r3, r2, r3
 80183ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183ee:	429a      	cmp	r2, r3
 80183f0:	d90d      	bls.n	801840e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	6a1a      	ldr	r2, [r3, #32]
 80183f6:	69bb      	ldr	r3, [r7, #24]
 80183f8:	1ad3      	subs	r3, r2, r3
 80183fa:	025b      	lsls	r3, r3, #9
 80183fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80183fe:	18d0      	adds	r0, r2, r3
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	3330      	adds	r3, #48	; 0x30
 8018404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018408:	4619      	mov	r1, r3
 801840a:	f7fe f919 	bl	8016640 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018410:	025b      	lsls	r3, r3, #9
 8018412:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8018414:	e050      	b.n	80184b8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	6a1b      	ldr	r3, [r3, #32]
 801841a:	69ba      	ldr	r2, [r7, #24]
 801841c:	429a      	cmp	r2, r3
 801841e:	d02e      	beq.n	801847e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	7d1b      	ldrb	r3, [r3, #20]
 8018424:	b25b      	sxtb	r3, r3
 8018426:	2b00      	cmp	r3, #0
 8018428:	da18      	bge.n	801845c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801842a:	697b      	ldr	r3, [r7, #20]
 801842c:	7858      	ldrb	r0, [r3, #1]
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	6a1a      	ldr	r2, [r3, #32]
 8018438:	2301      	movs	r3, #1
 801843a:	f7fe f841 	bl	80164c0 <disk_write>
 801843e:	4603      	mov	r3, r0
 8018440:	2b00      	cmp	r3, #0
 8018442:	d004      	beq.n	801844e <f_read+0x1da>
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	2201      	movs	r2, #1
 8018448:	755a      	strb	r2, [r3, #21]
 801844a:	2301      	movs	r3, #1
 801844c:	e04d      	b.n	80184ea <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	7d1b      	ldrb	r3, [r3, #20]
 8018452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018456:	b2da      	uxtb	r2, r3
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801845c:	697b      	ldr	r3, [r7, #20]
 801845e:	7858      	ldrb	r0, [r3, #1]
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018466:	2301      	movs	r3, #1
 8018468:	69ba      	ldr	r2, [r7, #24]
 801846a:	f7fe f809 	bl	8016480 <disk_read>
 801846e:	4603      	mov	r3, r0
 8018470:	2b00      	cmp	r3, #0
 8018472:	d004      	beq.n	801847e <f_read+0x20a>
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	2201      	movs	r2, #1
 8018478:	755a      	strb	r2, [r3, #21]
 801847a:	2301      	movs	r3, #1
 801847c:	e035      	b.n	80184ea <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	69ba      	ldr	r2, [r7, #24]
 8018482:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	699b      	ldr	r3, [r3, #24]
 8018488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801848c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018490:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8018492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	429a      	cmp	r2, r3
 8018498:	d901      	bls.n	801849e <f_read+0x22a>
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	699b      	ldr	r3, [r3, #24]
 80184a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80184ac:	4413      	add	r3, r2
 80184ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184b0:	4619      	mov	r1, r3
 80184b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184b4:	f7fe f8c4 	bl	8016640 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80184b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184bc:	4413      	add	r3, r2
 80184be:	627b      	str	r3, [r7, #36]	; 0x24
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	699a      	ldr	r2, [r3, #24]
 80184c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184c6:	441a      	add	r2, r3
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	619a      	str	r2, [r3, #24]
 80184cc:	683b      	ldr	r3, [r7, #0]
 80184ce:	681a      	ldr	r2, [r3, #0]
 80184d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184d2:	441a      	add	r2, r3
 80184d4:	683b      	ldr	r3, [r7, #0]
 80184d6:	601a      	str	r2, [r3, #0]
 80184d8:	687a      	ldr	r2, [r7, #4]
 80184da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184dc:	1ad3      	subs	r3, r2, r3
 80184de:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	f47f af01 	bne.w	80182ea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80184e8:	2300      	movs	r3, #0
}
 80184ea:	4618      	mov	r0, r3
 80184ec:	3738      	adds	r7, #56	; 0x38
 80184ee:	46bd      	mov	sp, r7
 80184f0:	bd80      	pop	{r7, pc}

080184f2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80184f2:	b580      	push	{r7, lr}
 80184f4:	b08c      	sub	sp, #48	; 0x30
 80184f6:	af00      	add	r7, sp, #0
 80184f8:	60f8      	str	r0, [r7, #12]
 80184fa:	60b9      	str	r1, [r7, #8]
 80184fc:	607a      	str	r2, [r7, #4]
 80184fe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018500:	68bb      	ldr	r3, [r7, #8]
 8018502:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018504:	683b      	ldr	r3, [r7, #0]
 8018506:	2200      	movs	r2, #0
 8018508:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	f107 0210 	add.w	r2, r7, #16
 8018510:	4611      	mov	r1, r2
 8018512:	4618      	mov	r0, r3
 8018514:	f7ff fc74 	bl	8017e00 <validate>
 8018518:	4603      	mov	r3, r0
 801851a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801851e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018522:	2b00      	cmp	r3, #0
 8018524:	d107      	bne.n	8018536 <f_write+0x44>
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	7d5b      	ldrb	r3, [r3, #21]
 801852a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801852e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018532:	2b00      	cmp	r3, #0
 8018534:	d002      	beq.n	801853c <f_write+0x4a>
 8018536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801853a:	e14b      	b.n	80187d4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	7d1b      	ldrb	r3, [r3, #20]
 8018540:	f003 0302 	and.w	r3, r3, #2
 8018544:	2b00      	cmp	r3, #0
 8018546:	d101      	bne.n	801854c <f_write+0x5a>
 8018548:	2307      	movs	r3, #7
 801854a:	e143      	b.n	80187d4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	699a      	ldr	r2, [r3, #24]
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	441a      	add	r2, r3
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	699b      	ldr	r3, [r3, #24]
 8018558:	429a      	cmp	r2, r3
 801855a:	f080 812d 	bcs.w	80187b8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	699b      	ldr	r3, [r3, #24]
 8018562:	43db      	mvns	r3, r3
 8018564:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018566:	e127      	b.n	80187b8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	699b      	ldr	r3, [r3, #24]
 801856c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018570:	2b00      	cmp	r3, #0
 8018572:	f040 80e3 	bne.w	801873c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	699b      	ldr	r3, [r3, #24]
 801857a:	0a5b      	lsrs	r3, r3, #9
 801857c:	693a      	ldr	r2, [r7, #16]
 801857e:	8952      	ldrh	r2, [r2, #10]
 8018580:	3a01      	subs	r2, #1
 8018582:	4013      	ands	r3, r2
 8018584:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018586:	69bb      	ldr	r3, [r7, #24]
 8018588:	2b00      	cmp	r3, #0
 801858a:	d143      	bne.n	8018614 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	699b      	ldr	r3, [r3, #24]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d10c      	bne.n	80185ae <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	689b      	ldr	r3, [r3, #8]
 8018598:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801859c:	2b00      	cmp	r3, #0
 801859e:	d11a      	bne.n	80185d6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	2100      	movs	r1, #0
 80185a4:	4618      	mov	r0, r3
 80185a6:	f7fe fd25 	bl	8016ff4 <create_chain>
 80185aa:	62b8      	str	r0, [r7, #40]	; 0x28
 80185ac:	e013      	b.n	80185d6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d007      	beq.n	80185c6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	699b      	ldr	r3, [r3, #24]
 80185ba:	4619      	mov	r1, r3
 80185bc:	68f8      	ldr	r0, [r7, #12]
 80185be:	f7fe fdb1 	bl	8017124 <clmt_clust>
 80185c2:	62b8      	str	r0, [r7, #40]	; 0x28
 80185c4:	e007      	b.n	80185d6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80185c6:	68fa      	ldr	r2, [r7, #12]
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	69db      	ldr	r3, [r3, #28]
 80185cc:	4619      	mov	r1, r3
 80185ce:	4610      	mov	r0, r2
 80185d0:	f7fe fd10 	bl	8016ff4 <create_chain>
 80185d4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80185d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d8:	2b00      	cmp	r3, #0
 80185da:	f000 80f2 	beq.w	80187c2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80185de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185e0:	2b01      	cmp	r3, #1
 80185e2:	d104      	bne.n	80185ee <f_write+0xfc>
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	2202      	movs	r2, #2
 80185e8:	755a      	strb	r2, [r3, #21]
 80185ea:	2302      	movs	r3, #2
 80185ec:	e0f2      	b.n	80187d4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80185ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185f4:	d104      	bne.n	8018600 <f_write+0x10e>
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	2201      	movs	r2, #1
 80185fa:	755a      	strb	r2, [r3, #21]
 80185fc:	2301      	movs	r3, #1
 80185fe:	e0e9      	b.n	80187d4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018604:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	689b      	ldr	r3, [r3, #8]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d102      	bne.n	8018614 <f_write+0x122>
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018612:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	7d1b      	ldrb	r3, [r3, #20]
 8018618:	b25b      	sxtb	r3, r3
 801861a:	2b00      	cmp	r3, #0
 801861c:	da18      	bge.n	8018650 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801861e:	693b      	ldr	r3, [r7, #16]
 8018620:	7858      	ldrb	r0, [r3, #1]
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	6a1a      	ldr	r2, [r3, #32]
 801862c:	2301      	movs	r3, #1
 801862e:	f7fd ff47 	bl	80164c0 <disk_write>
 8018632:	4603      	mov	r3, r0
 8018634:	2b00      	cmp	r3, #0
 8018636:	d004      	beq.n	8018642 <f_write+0x150>
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	2201      	movs	r2, #1
 801863c:	755a      	strb	r2, [r3, #21]
 801863e:	2301      	movs	r3, #1
 8018640:	e0c8      	b.n	80187d4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	7d1b      	ldrb	r3, [r3, #20]
 8018646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801864a:	b2da      	uxtb	r2, r3
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018650:	693a      	ldr	r2, [r7, #16]
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	69db      	ldr	r3, [r3, #28]
 8018656:	4619      	mov	r1, r3
 8018658:	4610      	mov	r0, r2
 801865a:	f7fe fabb 	bl	8016bd4 <clust2sect>
 801865e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018660:	697b      	ldr	r3, [r7, #20]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d104      	bne.n	8018670 <f_write+0x17e>
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	2202      	movs	r2, #2
 801866a:	755a      	strb	r2, [r3, #21]
 801866c:	2302      	movs	r3, #2
 801866e:	e0b1      	b.n	80187d4 <f_write+0x2e2>
			sect += csect;
 8018670:	697a      	ldr	r2, [r7, #20]
 8018672:	69bb      	ldr	r3, [r7, #24]
 8018674:	4413      	add	r3, r2
 8018676:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	0a5b      	lsrs	r3, r3, #9
 801867c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801867e:	6a3b      	ldr	r3, [r7, #32]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d03c      	beq.n	80186fe <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018684:	69ba      	ldr	r2, [r7, #24]
 8018686:	6a3b      	ldr	r3, [r7, #32]
 8018688:	4413      	add	r3, r2
 801868a:	693a      	ldr	r2, [r7, #16]
 801868c:	8952      	ldrh	r2, [r2, #10]
 801868e:	4293      	cmp	r3, r2
 8018690:	d905      	bls.n	801869e <f_write+0x1ac>
					cc = fs->csize - csect;
 8018692:	693b      	ldr	r3, [r7, #16]
 8018694:	895b      	ldrh	r3, [r3, #10]
 8018696:	461a      	mov	r2, r3
 8018698:	69bb      	ldr	r3, [r7, #24]
 801869a:	1ad3      	subs	r3, r2, r3
 801869c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801869e:	693b      	ldr	r3, [r7, #16]
 80186a0:	7858      	ldrb	r0, [r3, #1]
 80186a2:	6a3b      	ldr	r3, [r7, #32]
 80186a4:	697a      	ldr	r2, [r7, #20]
 80186a6:	69f9      	ldr	r1, [r7, #28]
 80186a8:	f7fd ff0a 	bl	80164c0 <disk_write>
 80186ac:	4603      	mov	r3, r0
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d004      	beq.n	80186bc <f_write+0x1ca>
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	2201      	movs	r2, #1
 80186b6:	755a      	strb	r2, [r3, #21]
 80186b8:	2301      	movs	r3, #1
 80186ba:	e08b      	b.n	80187d4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	6a1a      	ldr	r2, [r3, #32]
 80186c0:	697b      	ldr	r3, [r7, #20]
 80186c2:	1ad3      	subs	r3, r2, r3
 80186c4:	6a3a      	ldr	r2, [r7, #32]
 80186c6:	429a      	cmp	r2, r3
 80186c8:	d915      	bls.n	80186f6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	6a1a      	ldr	r2, [r3, #32]
 80186d4:	697b      	ldr	r3, [r7, #20]
 80186d6:	1ad3      	subs	r3, r2, r3
 80186d8:	025b      	lsls	r3, r3, #9
 80186da:	69fa      	ldr	r2, [r7, #28]
 80186dc:	4413      	add	r3, r2
 80186de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80186e2:	4619      	mov	r1, r3
 80186e4:	f7fd ffac 	bl	8016640 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	7d1b      	ldrb	r3, [r3, #20]
 80186ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80186f0:	b2da      	uxtb	r2, r3
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80186f6:	6a3b      	ldr	r3, [r7, #32]
 80186f8:	025b      	lsls	r3, r3, #9
 80186fa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80186fc:	e03f      	b.n	801877e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	6a1b      	ldr	r3, [r3, #32]
 8018702:	697a      	ldr	r2, [r7, #20]
 8018704:	429a      	cmp	r2, r3
 8018706:	d016      	beq.n	8018736 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	699a      	ldr	r2, [r3, #24]
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018710:	429a      	cmp	r2, r3
 8018712:	d210      	bcs.n	8018736 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018714:	693b      	ldr	r3, [r7, #16]
 8018716:	7858      	ldrb	r0, [r3, #1]
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801871e:	2301      	movs	r3, #1
 8018720:	697a      	ldr	r2, [r7, #20]
 8018722:	f7fd fead 	bl	8016480 <disk_read>
 8018726:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8018728:	2b00      	cmp	r3, #0
 801872a:	d004      	beq.n	8018736 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	2201      	movs	r2, #1
 8018730:	755a      	strb	r2, [r3, #21]
 8018732:	2301      	movs	r3, #1
 8018734:	e04e      	b.n	80187d4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	697a      	ldr	r2, [r7, #20]
 801873a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	699b      	ldr	r3, [r3, #24]
 8018740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018744:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018748:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801874a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	429a      	cmp	r2, r3
 8018750:	d901      	bls.n	8018756 <f_write+0x264>
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	699b      	ldr	r3, [r3, #24]
 8018760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018764:	4413      	add	r3, r2
 8018766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018768:	69f9      	ldr	r1, [r7, #28]
 801876a:	4618      	mov	r0, r3
 801876c:	f7fd ff68 	bl	8016640 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	7d1b      	ldrb	r3, [r3, #20]
 8018774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018778:	b2da      	uxtb	r2, r3
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801877e:	69fa      	ldr	r2, [r7, #28]
 8018780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018782:	4413      	add	r3, r2
 8018784:	61fb      	str	r3, [r7, #28]
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	699a      	ldr	r2, [r3, #24]
 801878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801878c:	441a      	add	r2, r3
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	619a      	str	r2, [r3, #24]
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	68da      	ldr	r2, [r3, #12]
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	699b      	ldr	r3, [r3, #24]
 801879a:	429a      	cmp	r2, r3
 801879c:	bf38      	it	cc
 801879e:	461a      	movcc	r2, r3
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	60da      	str	r2, [r3, #12]
 80187a4:	683b      	ldr	r3, [r7, #0]
 80187a6:	681a      	ldr	r2, [r3, #0]
 80187a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187aa:	441a      	add	r2, r3
 80187ac:	683b      	ldr	r3, [r7, #0]
 80187ae:	601a      	str	r2, [r3, #0]
 80187b0:	687a      	ldr	r2, [r7, #4]
 80187b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b4:	1ad3      	subs	r3, r2, r3
 80187b6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	f47f aed4 	bne.w	8018568 <f_write+0x76>
 80187c0:	e000      	b.n	80187c4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80187c2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	7d1b      	ldrb	r3, [r3, #20]
 80187c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80187cc:	b2da      	uxtb	r2, r3
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80187d2:	2300      	movs	r3, #0
}
 80187d4:	4618      	mov	r0, r3
 80187d6:	3730      	adds	r7, #48	; 0x30
 80187d8:	46bd      	mov	sp, r7
 80187da:	bd80      	pop	{r7, pc}

080187dc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b086      	sub	sp, #24
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	f107 0208 	add.w	r2, r7, #8
 80187ea:	4611      	mov	r1, r2
 80187ec:	4618      	mov	r0, r3
 80187ee:	f7ff fb07 	bl	8017e00 <validate>
 80187f2:	4603      	mov	r3, r0
 80187f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80187f6:	7dfb      	ldrb	r3, [r7, #23]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d168      	bne.n	80188ce <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	7d1b      	ldrb	r3, [r3, #20]
 8018800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018804:	2b00      	cmp	r3, #0
 8018806:	d062      	beq.n	80188ce <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	7d1b      	ldrb	r3, [r3, #20]
 801880c:	b25b      	sxtb	r3, r3
 801880e:	2b00      	cmp	r3, #0
 8018810:	da15      	bge.n	801883e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018812:	68bb      	ldr	r3, [r7, #8]
 8018814:	7858      	ldrb	r0, [r3, #1]
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	6a1a      	ldr	r2, [r3, #32]
 8018820:	2301      	movs	r3, #1
 8018822:	f7fd fe4d 	bl	80164c0 <disk_write>
 8018826:	4603      	mov	r3, r0
 8018828:	2b00      	cmp	r3, #0
 801882a:	d001      	beq.n	8018830 <f_sync+0x54>
 801882c:	2301      	movs	r3, #1
 801882e:	e04f      	b.n	80188d0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	7d1b      	ldrb	r3, [r3, #20]
 8018834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018838:	b2da      	uxtb	r2, r3
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801883e:	f7fa fce1 	bl	8013204 <get_fattime>
 8018842:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018844:	68ba      	ldr	r2, [r7, #8]
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801884a:	4619      	mov	r1, r3
 801884c:	4610      	mov	r0, r2
 801884e:	f7fe f925 	bl	8016a9c <move_window>
 8018852:	4603      	mov	r3, r0
 8018854:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018856:	7dfb      	ldrb	r3, [r7, #23]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d138      	bne.n	80188ce <f_sync+0xf2>
					dir = fp->dir_ptr;
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018860:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	330b      	adds	r3, #11
 8018866:	781a      	ldrb	r2, [r3, #0]
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	330b      	adds	r3, #11
 801886c:	f042 0220 	orr.w	r2, r2, #32
 8018870:	b2d2      	uxtb	r2, r2
 8018872:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	6818      	ldr	r0, [r3, #0]
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	689b      	ldr	r3, [r3, #8]
 801887c:	461a      	mov	r2, r3
 801887e:	68f9      	ldr	r1, [r7, #12]
 8018880:	f7fe fe2a 	bl	80174d8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	f103 021c 	add.w	r2, r3, #28
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	68db      	ldr	r3, [r3, #12]
 801888e:	4619      	mov	r1, r3
 8018890:	4610      	mov	r0, r2
 8018892:	f7fd fea9 	bl	80165e8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	3316      	adds	r3, #22
 801889a:	6939      	ldr	r1, [r7, #16]
 801889c:	4618      	mov	r0, r3
 801889e:	f7fd fea3 	bl	80165e8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	3312      	adds	r3, #18
 80188a6:	2100      	movs	r1, #0
 80188a8:	4618      	mov	r0, r3
 80188aa:	f7fd fe82 	bl	80165b2 <st_word>
					fs->wflag = 1;
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	2201      	movs	r2, #1
 80188b2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80188b4:	68bb      	ldr	r3, [r7, #8]
 80188b6:	4618      	mov	r0, r3
 80188b8:	f7fe f91e 	bl	8016af8 <sync_fs>
 80188bc:	4603      	mov	r3, r0
 80188be:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	7d1b      	ldrb	r3, [r3, #20]
 80188c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80188c8:	b2da      	uxtb	r2, r3
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80188ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80188d0:	4618      	mov	r0, r3
 80188d2:	3718      	adds	r7, #24
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bd80      	pop	{r7, pc}

080188d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b084      	sub	sp, #16
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80188e0:	6878      	ldr	r0, [r7, #4]
 80188e2:	f7ff ff7b 	bl	80187dc <f_sync>
 80188e6:	4603      	mov	r3, r0
 80188e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80188ea:	7bfb      	ldrb	r3, [r7, #15]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d118      	bne.n	8018922 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	f107 0208 	add.w	r2, r7, #8
 80188f6:	4611      	mov	r1, r2
 80188f8:	4618      	mov	r0, r3
 80188fa:	f7ff fa81 	bl	8017e00 <validate>
 80188fe:	4603      	mov	r3, r0
 8018900:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8018902:	7bfb      	ldrb	r3, [r7, #15]
 8018904:	2b00      	cmp	r3, #0
 8018906:	d10c      	bne.n	8018922 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	691b      	ldr	r3, [r3, #16]
 801890c:	4618      	mov	r0, r3
 801890e:	f7fe f821 	bl	8016954 <dec_lock>
 8018912:	4603      	mov	r3, r0
 8018914:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8018916:	7bfb      	ldrb	r3, [r7, #15]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d102      	bne.n	8018922 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	2200      	movs	r2, #0
 8018920:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8018922:	7bfb      	ldrb	r3, [r7, #15]
}
 8018924:	4618      	mov	r0, r3
 8018926:	3710      	adds	r7, #16
 8018928:	46bd      	mov	sp, r7
 801892a:	bd80      	pop	{r7, pc}

0801892c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801892c:	b480      	push	{r7}
 801892e:	b087      	sub	sp, #28
 8018930:	af00      	add	r7, sp, #0
 8018932:	60f8      	str	r0, [r7, #12]
 8018934:	60b9      	str	r1, [r7, #8]
 8018936:	4613      	mov	r3, r2
 8018938:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801893a:	2301      	movs	r3, #1
 801893c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801893e:	2300      	movs	r3, #0
 8018940:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8018942:	4b1f      	ldr	r3, [pc, #124]	; (80189c0 <FATFS_LinkDriverEx+0x94>)
 8018944:	7a5b      	ldrb	r3, [r3, #9]
 8018946:	b2db      	uxtb	r3, r3
 8018948:	2b00      	cmp	r3, #0
 801894a:	d131      	bne.n	80189b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801894c:	4b1c      	ldr	r3, [pc, #112]	; (80189c0 <FATFS_LinkDriverEx+0x94>)
 801894e:	7a5b      	ldrb	r3, [r3, #9]
 8018950:	b2db      	uxtb	r3, r3
 8018952:	461a      	mov	r2, r3
 8018954:	4b1a      	ldr	r3, [pc, #104]	; (80189c0 <FATFS_LinkDriverEx+0x94>)
 8018956:	2100      	movs	r1, #0
 8018958:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801895a:	4b19      	ldr	r3, [pc, #100]	; (80189c0 <FATFS_LinkDriverEx+0x94>)
 801895c:	7a5b      	ldrb	r3, [r3, #9]
 801895e:	b2db      	uxtb	r3, r3
 8018960:	4a17      	ldr	r2, [pc, #92]	; (80189c0 <FATFS_LinkDriverEx+0x94>)
 8018962:	009b      	lsls	r3, r3, #2
 8018964:	4413      	add	r3, r2
 8018966:	68fa      	ldr	r2, [r7, #12]
 8018968:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801896a:	4b15      	ldr	r3, [pc, #84]	; (80189c0 <FATFS_LinkDriverEx+0x94>)
 801896c:	7a5b      	ldrb	r3, [r3, #9]
 801896e:	b2db      	uxtb	r3, r3
 8018970:	461a      	mov	r2, r3
 8018972:	4b13      	ldr	r3, [pc, #76]	; (80189c0 <FATFS_LinkDriverEx+0x94>)
 8018974:	4413      	add	r3, r2
 8018976:	79fa      	ldrb	r2, [r7, #7]
 8018978:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801897a:	4b11      	ldr	r3, [pc, #68]	; (80189c0 <FATFS_LinkDriverEx+0x94>)
 801897c:	7a5b      	ldrb	r3, [r3, #9]
 801897e:	b2db      	uxtb	r3, r3
 8018980:	1c5a      	adds	r2, r3, #1
 8018982:	b2d1      	uxtb	r1, r2
 8018984:	4a0e      	ldr	r2, [pc, #56]	; (80189c0 <FATFS_LinkDriverEx+0x94>)
 8018986:	7251      	strb	r1, [r2, #9]
 8018988:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801898a:	7dbb      	ldrb	r3, [r7, #22]
 801898c:	3330      	adds	r3, #48	; 0x30
 801898e:	b2da      	uxtb	r2, r3
 8018990:	68bb      	ldr	r3, [r7, #8]
 8018992:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018994:	68bb      	ldr	r3, [r7, #8]
 8018996:	3301      	adds	r3, #1
 8018998:	223a      	movs	r2, #58	; 0x3a
 801899a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801899c:	68bb      	ldr	r3, [r7, #8]
 801899e:	3302      	adds	r3, #2
 80189a0:	222f      	movs	r2, #47	; 0x2f
 80189a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80189a4:	68bb      	ldr	r3, [r7, #8]
 80189a6:	3303      	adds	r3, #3
 80189a8:	2200      	movs	r2, #0
 80189aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80189ac:	2300      	movs	r3, #0
 80189ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80189b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80189b2:	4618      	mov	r0, r3
 80189b4:	371c      	adds	r7, #28
 80189b6:	46bd      	mov	sp, r7
 80189b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189bc:	4770      	bx	lr
 80189be:	bf00      	nop
 80189c0:	24000b84 	.word	0x24000b84

080189c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b082      	sub	sp, #8
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	6078      	str	r0, [r7, #4]
 80189cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80189ce:	2200      	movs	r2, #0
 80189d0:	6839      	ldr	r1, [r7, #0]
 80189d2:	6878      	ldr	r0, [r7, #4]
 80189d4:	f7ff ffaa 	bl	801892c <FATFS_LinkDriverEx>
 80189d8:	4603      	mov	r3, r0
}
 80189da:	4618      	mov	r0, r3
 80189dc:	3708      	adds	r7, #8
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd80      	pop	{r7, pc}
	...

080189e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80189e8:	2200      	movs	r2, #0
 80189ea:	4913      	ldr	r1, [pc, #76]	; (8018a38 <MX_USB_DEVICE_Init+0x54>)
 80189ec:	4813      	ldr	r0, [pc, #76]	; (8018a3c <MX_USB_DEVICE_Init+0x58>)
 80189ee:	f7fc fc20 	bl	8015232 <USBD_Init>
 80189f2:	4603      	mov	r3, r0
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d001      	beq.n	80189fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80189f8:	f7eb f8ee 	bl	8003bd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80189fc:	4910      	ldr	r1, [pc, #64]	; (8018a40 <MX_USB_DEVICE_Init+0x5c>)
 80189fe:	480f      	ldr	r0, [pc, #60]	; (8018a3c <MX_USB_DEVICE_Init+0x58>)
 8018a00:	f7fc fc4d 	bl	801529e <USBD_RegisterClass>
 8018a04:	4603      	mov	r3, r0
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d001      	beq.n	8018a0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018a0a:	f7eb f8e5 	bl	8003bd8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8018a0e:	490d      	ldr	r1, [pc, #52]	; (8018a44 <MX_USB_DEVICE_Init+0x60>)
 8018a10:	480a      	ldr	r0, [pc, #40]	; (8018a3c <MX_USB_DEVICE_Init+0x58>)
 8018a12:	f7fa fff7 	bl	8013a04 <USBD_MSC_RegisterStorage>
 8018a16:	4603      	mov	r3, r0
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d001      	beq.n	8018a20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018a1c:	f7eb f8dc 	bl	8003bd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018a20:	4806      	ldr	r0, [pc, #24]	; (8018a3c <MX_USB_DEVICE_Init+0x58>)
 8018a22:	f7fc fc5d 	bl	80152e0 <USBD_Start>
 8018a26:	4603      	mov	r3, r0
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d001      	beq.n	8018a30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018a2c:	f7eb f8d4 	bl	8003bd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8018a30:	f7f0 fe2e 	bl	8009690 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018a34:	bf00      	nop
 8018a36:	bd80      	pop	{r7, pc}
 8018a38:	24000108 	.word	0x24000108
 8018a3c:	24001bd4 	.word	0x24001bd4
 8018a40:	24000020 	.word	0x24000020
 8018a44:	24000158 	.word	0x24000158

08018a48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a48:	b480      	push	{r7}
 8018a4a:	b083      	sub	sp, #12
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	4603      	mov	r3, r0
 8018a50:	6039      	str	r1, [r7, #0]
 8018a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018a54:	683b      	ldr	r3, [r7, #0]
 8018a56:	2212      	movs	r2, #18
 8018a58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018a5a:	4b03      	ldr	r3, [pc, #12]	; (8018a68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	370c      	adds	r7, #12
 8018a60:	46bd      	mov	sp, r7
 8018a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a66:	4770      	bx	lr
 8018a68:	24000124 	.word	0x24000124

08018a6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a6c:	b480      	push	{r7}
 8018a6e:	b083      	sub	sp, #12
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	4603      	mov	r3, r0
 8018a74:	6039      	str	r1, [r7, #0]
 8018a76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018a78:	683b      	ldr	r3, [r7, #0]
 8018a7a:	2204      	movs	r2, #4
 8018a7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018a7e:	4b03      	ldr	r3, [pc, #12]	; (8018a8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018a80:	4618      	mov	r0, r3
 8018a82:	370c      	adds	r7, #12
 8018a84:	46bd      	mov	sp, r7
 8018a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a8a:	4770      	bx	lr
 8018a8c:	24000138 	.word	0x24000138

08018a90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b082      	sub	sp, #8
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	4603      	mov	r3, r0
 8018a98:	6039      	str	r1, [r7, #0]
 8018a9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018a9c:	79fb      	ldrb	r3, [r7, #7]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d105      	bne.n	8018aae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018aa2:	683a      	ldr	r2, [r7, #0]
 8018aa4:	4907      	ldr	r1, [pc, #28]	; (8018ac4 <USBD_FS_ProductStrDescriptor+0x34>)
 8018aa6:	4808      	ldr	r0, [pc, #32]	; (8018ac8 <USBD_FS_ProductStrDescriptor+0x38>)
 8018aa8:	f7fd fbe7 	bl	801627a <USBD_GetString>
 8018aac:	e004      	b.n	8018ab8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018aae:	683a      	ldr	r2, [r7, #0]
 8018ab0:	4904      	ldr	r1, [pc, #16]	; (8018ac4 <USBD_FS_ProductStrDescriptor+0x34>)
 8018ab2:	4805      	ldr	r0, [pc, #20]	; (8018ac8 <USBD_FS_ProductStrDescriptor+0x38>)
 8018ab4:	f7fd fbe1 	bl	801627a <USBD_GetString>
  }
  return USBD_StrDesc;
 8018ab8:	4b02      	ldr	r3, [pc, #8]	; (8018ac4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018aba:	4618      	mov	r0, r3
 8018abc:	3708      	adds	r7, #8
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	bd80      	pop	{r7, pc}
 8018ac2:	bf00      	nop
 8018ac4:	24001ea4 	.word	0x24001ea4
 8018ac8:	0801aed0 	.word	0x0801aed0

08018acc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b082      	sub	sp, #8
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	6039      	str	r1, [r7, #0]
 8018ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018ad8:	683a      	ldr	r2, [r7, #0]
 8018ada:	4904      	ldr	r1, [pc, #16]	; (8018aec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018adc:	4804      	ldr	r0, [pc, #16]	; (8018af0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018ade:	f7fd fbcc 	bl	801627a <USBD_GetString>
  return USBD_StrDesc;
 8018ae2:	4b02      	ldr	r3, [pc, #8]	; (8018aec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	3708      	adds	r7, #8
 8018ae8:	46bd      	mov	sp, r7
 8018aea:	bd80      	pop	{r7, pc}
 8018aec:	24001ea4 	.word	0x24001ea4
 8018af0:	0801aee4 	.word	0x0801aee4

08018af4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018af4:	b580      	push	{r7, lr}
 8018af6:	b082      	sub	sp, #8
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	4603      	mov	r3, r0
 8018afc:	6039      	str	r1, [r7, #0]
 8018afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018b00:	683b      	ldr	r3, [r7, #0]
 8018b02:	221a      	movs	r2, #26
 8018b04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018b06:	f000 f843 	bl	8018b90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018b0a:	4b02      	ldr	r3, [pc, #8]	; (8018b14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	3708      	adds	r7, #8
 8018b10:	46bd      	mov	sp, r7
 8018b12:	bd80      	pop	{r7, pc}
 8018b14:	2400013c 	.word	0x2400013c

08018b18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b082      	sub	sp, #8
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	4603      	mov	r3, r0
 8018b20:	6039      	str	r1, [r7, #0]
 8018b22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018b24:	79fb      	ldrb	r3, [r7, #7]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d105      	bne.n	8018b36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018b2a:	683a      	ldr	r2, [r7, #0]
 8018b2c:	4907      	ldr	r1, [pc, #28]	; (8018b4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8018b2e:	4808      	ldr	r0, [pc, #32]	; (8018b50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018b30:	f7fd fba3 	bl	801627a <USBD_GetString>
 8018b34:	e004      	b.n	8018b40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018b36:	683a      	ldr	r2, [r7, #0]
 8018b38:	4904      	ldr	r1, [pc, #16]	; (8018b4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8018b3a:	4805      	ldr	r0, [pc, #20]	; (8018b50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018b3c:	f7fd fb9d 	bl	801627a <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b40:	4b02      	ldr	r3, [pc, #8]	; (8018b4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018b42:	4618      	mov	r0, r3
 8018b44:	3708      	adds	r7, #8
 8018b46:	46bd      	mov	sp, r7
 8018b48:	bd80      	pop	{r7, pc}
 8018b4a:	bf00      	nop
 8018b4c:	24001ea4 	.word	0x24001ea4
 8018b50:	0801aef8 	.word	0x0801aef8

08018b54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b082      	sub	sp, #8
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	4603      	mov	r3, r0
 8018b5c:	6039      	str	r1, [r7, #0]
 8018b5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018b60:	79fb      	ldrb	r3, [r7, #7]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d105      	bne.n	8018b72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018b66:	683a      	ldr	r2, [r7, #0]
 8018b68:	4907      	ldr	r1, [pc, #28]	; (8018b88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018b6a:	4808      	ldr	r0, [pc, #32]	; (8018b8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018b6c:	f7fd fb85 	bl	801627a <USBD_GetString>
 8018b70:	e004      	b.n	8018b7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018b72:	683a      	ldr	r2, [r7, #0]
 8018b74:	4904      	ldr	r1, [pc, #16]	; (8018b88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018b76:	4805      	ldr	r0, [pc, #20]	; (8018b8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018b78:	f7fd fb7f 	bl	801627a <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b7c:	4b02      	ldr	r3, [pc, #8]	; (8018b88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018b7e:	4618      	mov	r0, r3
 8018b80:	3708      	adds	r7, #8
 8018b82:	46bd      	mov	sp, r7
 8018b84:	bd80      	pop	{r7, pc}
 8018b86:	bf00      	nop
 8018b88:	24001ea4 	.word	0x24001ea4
 8018b8c:	0801af04 	.word	0x0801af04

08018b90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b084      	sub	sp, #16
 8018b94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018b96:	4b0f      	ldr	r3, [pc, #60]	; (8018bd4 <Get_SerialNum+0x44>)
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018b9c:	4b0e      	ldr	r3, [pc, #56]	; (8018bd8 <Get_SerialNum+0x48>)
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018ba2:	4b0e      	ldr	r3, [pc, #56]	; (8018bdc <Get_SerialNum+0x4c>)
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018ba8:	68fa      	ldr	r2, [r7, #12]
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	4413      	add	r3, r2
 8018bae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d009      	beq.n	8018bca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018bb6:	2208      	movs	r2, #8
 8018bb8:	4909      	ldr	r1, [pc, #36]	; (8018be0 <Get_SerialNum+0x50>)
 8018bba:	68f8      	ldr	r0, [r7, #12]
 8018bbc:	f000 f814 	bl	8018be8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018bc0:	2204      	movs	r2, #4
 8018bc2:	4908      	ldr	r1, [pc, #32]	; (8018be4 <Get_SerialNum+0x54>)
 8018bc4:	68b8      	ldr	r0, [r7, #8]
 8018bc6:	f000 f80f 	bl	8018be8 <IntToUnicode>
  }
}
 8018bca:	bf00      	nop
 8018bcc:	3710      	adds	r7, #16
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	bd80      	pop	{r7, pc}
 8018bd2:	bf00      	nop
 8018bd4:	1ff1e800 	.word	0x1ff1e800
 8018bd8:	1ff1e804 	.word	0x1ff1e804
 8018bdc:	1ff1e808 	.word	0x1ff1e808
 8018be0:	2400013e 	.word	0x2400013e
 8018be4:	2400014e 	.word	0x2400014e

08018be8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018be8:	b480      	push	{r7}
 8018bea:	b087      	sub	sp, #28
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	60f8      	str	r0, [r7, #12]
 8018bf0:	60b9      	str	r1, [r7, #8]
 8018bf2:	4613      	mov	r3, r2
 8018bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018bf6:	2300      	movs	r3, #0
 8018bf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	75fb      	strb	r3, [r7, #23]
 8018bfe:	e027      	b.n	8018c50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	0f1b      	lsrs	r3, r3, #28
 8018c04:	2b09      	cmp	r3, #9
 8018c06:	d80b      	bhi.n	8018c20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	0f1b      	lsrs	r3, r3, #28
 8018c0c:	b2da      	uxtb	r2, r3
 8018c0e:	7dfb      	ldrb	r3, [r7, #23]
 8018c10:	005b      	lsls	r3, r3, #1
 8018c12:	4619      	mov	r1, r3
 8018c14:	68bb      	ldr	r3, [r7, #8]
 8018c16:	440b      	add	r3, r1
 8018c18:	3230      	adds	r2, #48	; 0x30
 8018c1a:	b2d2      	uxtb	r2, r2
 8018c1c:	701a      	strb	r2, [r3, #0]
 8018c1e:	e00a      	b.n	8018c36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	0f1b      	lsrs	r3, r3, #28
 8018c24:	b2da      	uxtb	r2, r3
 8018c26:	7dfb      	ldrb	r3, [r7, #23]
 8018c28:	005b      	lsls	r3, r3, #1
 8018c2a:	4619      	mov	r1, r3
 8018c2c:	68bb      	ldr	r3, [r7, #8]
 8018c2e:	440b      	add	r3, r1
 8018c30:	3237      	adds	r2, #55	; 0x37
 8018c32:	b2d2      	uxtb	r2, r2
 8018c34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	011b      	lsls	r3, r3, #4
 8018c3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018c3c:	7dfb      	ldrb	r3, [r7, #23]
 8018c3e:	005b      	lsls	r3, r3, #1
 8018c40:	3301      	adds	r3, #1
 8018c42:	68ba      	ldr	r2, [r7, #8]
 8018c44:	4413      	add	r3, r2
 8018c46:	2200      	movs	r2, #0
 8018c48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018c4a:	7dfb      	ldrb	r3, [r7, #23]
 8018c4c:	3301      	adds	r3, #1
 8018c4e:	75fb      	strb	r3, [r7, #23]
 8018c50:	7dfa      	ldrb	r2, [r7, #23]
 8018c52:	79fb      	ldrb	r3, [r7, #7]
 8018c54:	429a      	cmp	r2, r3
 8018c56:	d3d3      	bcc.n	8018c00 <IntToUnicode+0x18>
  }
}
 8018c58:	bf00      	nop
 8018c5a:	371c      	adds	r7, #28
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c62:	4770      	bx	lr

08018c64 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8018c64:	b480      	push	{r7}
 8018c66:	b083      	sub	sp, #12
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8018c6e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018c70:	4618      	mov	r0, r3
 8018c72:	370c      	adds	r7, #12
 8018c74:	46bd      	mov	sp, r7
 8018c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c7a:	4770      	bx	lr

08018c7c <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b08e      	sub	sp, #56	; 0x38
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	4603      	mov	r3, r0
 8018c84:	60b9      	str	r1, [r7, #8]
 8018c86:	607a      	str	r2, [r7, #4]
 8018c88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8018c8a:	23ff      	movs	r3, #255	; 0xff
 8018c8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8018c90:	f107 0310 	add.w	r3, r7, #16
 8018c94:	4619      	mov	r1, r3
 8018c96:	480a      	ldr	r0, [pc, #40]	; (8018cc0 <STORAGE_GetCapacity_FS+0x44>)
 8018c98:	f7f5 f89a 	bl	800ddd0 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8018c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c9e:	1e5a      	subs	r2, r3, #1
 8018ca0:	68bb      	ldr	r3, [r7, #8]
 8018ca2:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8018ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ca6:	b29a      	uxth	r2, r3
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8018cac:	2300      	movs	r3, #0
 8018cae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8018cb2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	3738      	adds	r7, #56	; 0x38
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	bd80      	pop	{r7, pc}
 8018cbe:	bf00      	nop
 8018cc0:	24001470 	.word	0x24001470

08018cc4 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8018cc4:	b480      	push	{r7}
 8018cc6:	b083      	sub	sp, #12
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	4603      	mov	r3, r0
 8018ccc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018cce:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	370c      	adds	r7, #12
 8018cd4:	46bd      	mov	sp, r7
 8018cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cda:	4770      	bx	lr

08018cdc <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8018cdc:	b480      	push	{r7}
 8018cde:	b083      	sub	sp, #12
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	4603      	mov	r3, r0
 8018ce4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8018ce6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018ce8:	4618      	mov	r0, r3
 8018cea:	370c      	adds	r7, #12
 8018cec:	46bd      	mov	sp, r7
 8018cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf2:	4770      	bx	lr

08018cf4 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b088      	sub	sp, #32
 8018cf8:	af02      	add	r7, sp, #8
 8018cfa:	60b9      	str	r1, [r7, #8]
 8018cfc:	607a      	str	r2, [r7, #4]
 8018cfe:	461a      	mov	r2, r3
 8018d00:	4603      	mov	r3, r0
 8018d02:	73fb      	strb	r3, [r7, #15]
 8018d04:	4613      	mov	r3, r2
 8018d06:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8018d08:	23ff      	movs	r3, #255	; 0xff
 8018d0a:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018d0c:	89ba      	ldrh	r2, [r7, #12]
 8018d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8018d12:	9300      	str	r3, [sp, #0]
 8018d14:	4613      	mov	r3, r2
 8018d16:	687a      	ldr	r2, [r7, #4]
 8018d18:	68b9      	ldr	r1, [r7, #8]
 8018d1a:	4809      	ldr	r0, [pc, #36]	; (8018d40 <STORAGE_Read_FS+0x4c>)
 8018d1c:	f7f3 ffca 	bl	800ccb4 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018d20:	bf00      	nop
 8018d22:	4807      	ldr	r0, [pc, #28]	; (8018d40 <STORAGE_Read_FS+0x4c>)
 8018d24:	f7f5 f92a 	bl	800df7c <HAL_SD_GetCardState>
 8018d28:	4603      	mov	r3, r0
 8018d2a:	2b04      	cmp	r3, #4
 8018d2c:	d1f9      	bne.n	8018d22 <STORAGE_Read_FS+0x2e>
	ret = 0;
 8018d2e:	2300      	movs	r3, #0
 8018d30:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018d32:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8018d36:	4618      	mov	r0, r3
 8018d38:	3718      	adds	r7, #24
 8018d3a:	46bd      	mov	sp, r7
 8018d3c:	bd80      	pop	{r7, pc}
 8018d3e:	bf00      	nop
 8018d40:	24001470 	.word	0x24001470

08018d44 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b088      	sub	sp, #32
 8018d48:	af02      	add	r7, sp, #8
 8018d4a:	60b9      	str	r1, [r7, #8]
 8018d4c:	607a      	str	r2, [r7, #4]
 8018d4e:	461a      	mov	r2, r3
 8018d50:	4603      	mov	r3, r0
 8018d52:	73fb      	strb	r3, [r7, #15]
 8018d54:	4613      	mov	r3, r2
 8018d56:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8018d58:	23ff      	movs	r3, #255	; 0xff
 8018d5a:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018d5c:	89ba      	ldrh	r2, [r7, #12]
 8018d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8018d62:	9300      	str	r3, [sp, #0]
 8018d64:	4613      	mov	r3, r2
 8018d66:	687a      	ldr	r2, [r7, #4]
 8018d68:	68b9      	ldr	r1, [r7, #8]
 8018d6a:	4809      	ldr	r0, [pc, #36]	; (8018d90 <STORAGE_Write_FS+0x4c>)
 8018d6c:	f7f4 f92c 	bl	800cfc8 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018d70:	bf00      	nop
 8018d72:	4807      	ldr	r0, [pc, #28]	; (8018d90 <STORAGE_Write_FS+0x4c>)
 8018d74:	f7f5 f902 	bl	800df7c <HAL_SD_GetCardState>
 8018d78:	4603      	mov	r3, r0
 8018d7a:	2b04      	cmp	r3, #4
 8018d7c:	d1f9      	bne.n	8018d72 <STORAGE_Write_FS+0x2e>
	ret = 0;
 8018d7e:	2300      	movs	r3, #0
 8018d80:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8018d86:	4618      	mov	r0, r3
 8018d88:	3718      	adds	r7, #24
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bd80      	pop	{r7, pc}
 8018d8e:	bf00      	nop
 8018d90:	24001470 	.word	0x24001470

08018d94 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8018d94:	b480      	push	{r7}
 8018d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8018d98:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da2:	4770      	bx	lr

08018da4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b08a      	sub	sp, #40	; 0x28
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018dac:	f107 0314 	add.w	r3, r7, #20
 8018db0:	2200      	movs	r2, #0
 8018db2:	601a      	str	r2, [r3, #0]
 8018db4:	605a      	str	r2, [r3, #4]
 8018db6:	609a      	str	r2, [r3, #8]
 8018db8:	60da      	str	r2, [r3, #12]
 8018dba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	4a1e      	ldr	r2, [pc, #120]	; (8018e3c <HAL_PCD_MspInit+0x98>)
 8018dc2:	4293      	cmp	r3, r2
 8018dc4:	d136      	bne.n	8018e34 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018dc6:	4b1e      	ldr	r3, [pc, #120]	; (8018e40 <HAL_PCD_MspInit+0x9c>)
 8018dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018dcc:	4a1c      	ldr	r2, [pc, #112]	; (8018e40 <HAL_PCD_MspInit+0x9c>)
 8018dce:	f043 0301 	orr.w	r3, r3, #1
 8018dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8018dd6:	4b1a      	ldr	r3, [pc, #104]	; (8018e40 <HAL_PCD_MspInit+0x9c>)
 8018dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018ddc:	f003 0301 	and.w	r3, r3, #1
 8018de0:	613b      	str	r3, [r7, #16]
 8018de2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018de4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018dea:	2302      	movs	r3, #2
 8018dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018dee:	2300      	movs	r3, #0
 8018df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018df2:	2300      	movs	r3, #0
 8018df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8018df6:	230a      	movs	r3, #10
 8018df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018dfa:	f107 0314 	add.w	r3, r7, #20
 8018dfe:	4619      	mov	r1, r3
 8018e00:	4810      	ldr	r0, [pc, #64]	; (8018e44 <HAL_PCD_MspInit+0xa0>)
 8018e02:	f7ee ff2f 	bl	8007c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018e06:	4b0e      	ldr	r3, [pc, #56]	; (8018e40 <HAL_PCD_MspInit+0x9c>)
 8018e08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018e0c:	4a0c      	ldr	r2, [pc, #48]	; (8018e40 <HAL_PCD_MspInit+0x9c>)
 8018e0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018e12:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8018e16:	4b0a      	ldr	r3, [pc, #40]	; (8018e40 <HAL_PCD_MspInit+0x9c>)
 8018e18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018e20:	60fb      	str	r3, [r7, #12]
 8018e22:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018e24:	2200      	movs	r2, #0
 8018e26:	2100      	movs	r1, #0
 8018e28:	2065      	movs	r0, #101	; 0x65
 8018e2a:	f7eb fcd2 	bl	80047d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018e2e:	2065      	movs	r0, #101	; 0x65
 8018e30:	f7eb fce9 	bl	8004806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018e34:	bf00      	nop
 8018e36:	3728      	adds	r7, #40	; 0x28
 8018e38:	46bd      	mov	sp, r7
 8018e3a:	bd80      	pop	{r7, pc}
 8018e3c:	40080000 	.word	0x40080000
 8018e40:	58024400 	.word	0x58024400
 8018e44:	58020000 	.word	0x58020000

08018e48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e48:	b580      	push	{r7, lr}
 8018e4a:	b082      	sub	sp, #8
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018e5c:	4619      	mov	r1, r3
 8018e5e:	4610      	mov	r0, r2
 8018e60:	f7fc fa89 	bl	8015376 <USBD_LL_SetupStage>
}
 8018e64:	bf00      	nop
 8018e66:	3708      	adds	r7, #8
 8018e68:	46bd      	mov	sp, r7
 8018e6a:	bd80      	pop	{r7, pc}

08018e6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e6c:	b580      	push	{r7, lr}
 8018e6e:	b082      	sub	sp, #8
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	6078      	str	r0, [r7, #4]
 8018e74:	460b      	mov	r3, r1
 8018e76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018e7e:	78fa      	ldrb	r2, [r7, #3]
 8018e80:	6879      	ldr	r1, [r7, #4]
 8018e82:	4613      	mov	r3, r2
 8018e84:	00db      	lsls	r3, r3, #3
 8018e86:	1a9b      	subs	r3, r3, r2
 8018e88:	009b      	lsls	r3, r3, #2
 8018e8a:	440b      	add	r3, r1
 8018e8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018e90:	681a      	ldr	r2, [r3, #0]
 8018e92:	78fb      	ldrb	r3, [r7, #3]
 8018e94:	4619      	mov	r1, r3
 8018e96:	f7fc fac1 	bl	801541c <USBD_LL_DataOutStage>
}
 8018e9a:	bf00      	nop
 8018e9c:	3708      	adds	r7, #8
 8018e9e:	46bd      	mov	sp, r7
 8018ea0:	bd80      	pop	{r7, pc}

08018ea2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ea2:	b580      	push	{r7, lr}
 8018ea4:	b082      	sub	sp, #8
 8018ea6:	af00      	add	r7, sp, #0
 8018ea8:	6078      	str	r0, [r7, #4]
 8018eaa:	460b      	mov	r3, r1
 8018eac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018eb4:	78fa      	ldrb	r2, [r7, #3]
 8018eb6:	6879      	ldr	r1, [r7, #4]
 8018eb8:	4613      	mov	r3, r2
 8018eba:	00db      	lsls	r3, r3, #3
 8018ebc:	1a9b      	subs	r3, r3, r2
 8018ebe:	009b      	lsls	r3, r3, #2
 8018ec0:	440b      	add	r3, r1
 8018ec2:	3348      	adds	r3, #72	; 0x48
 8018ec4:	681a      	ldr	r2, [r3, #0]
 8018ec6:	78fb      	ldrb	r3, [r7, #3]
 8018ec8:	4619      	mov	r1, r3
 8018eca:	f7fc fb0a 	bl	80154e2 <USBD_LL_DataInStage>
}
 8018ece:	bf00      	nop
 8018ed0:	3708      	adds	r7, #8
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	bd80      	pop	{r7, pc}

08018ed6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ed6:	b580      	push	{r7, lr}
 8018ed8:	b082      	sub	sp, #8
 8018eda:	af00      	add	r7, sp, #0
 8018edc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	f7fc fc0e 	bl	8015706 <USBD_LL_SOF>
}
 8018eea:	bf00      	nop
 8018eec:	3708      	adds	r7, #8
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	bd80      	pop	{r7, pc}

08018ef2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ef2:	b580      	push	{r7, lr}
 8018ef4:	b084      	sub	sp, #16
 8018ef6:	af00      	add	r7, sp, #0
 8018ef8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018efa:	2301      	movs	r3, #1
 8018efc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	68db      	ldr	r3, [r3, #12]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d102      	bne.n	8018f0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018f06:	2300      	movs	r3, #0
 8018f08:	73fb      	strb	r3, [r7, #15]
 8018f0a:	e008      	b.n	8018f1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	68db      	ldr	r3, [r3, #12]
 8018f10:	2b02      	cmp	r3, #2
 8018f12:	d102      	bne.n	8018f1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018f14:	2301      	movs	r3, #1
 8018f16:	73fb      	strb	r3, [r7, #15]
 8018f18:	e001      	b.n	8018f1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018f1a:	f7ea fe5d 	bl	8003bd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f24:	7bfa      	ldrb	r2, [r7, #15]
 8018f26:	4611      	mov	r1, r2
 8018f28:	4618      	mov	r0, r3
 8018f2a:	f7fc fbb1 	bl	8015690 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f34:	4618      	mov	r0, r3
 8018f36:	f7fc fb6a 	bl	801560e <USBD_LL_Reset>
}
 8018f3a:	bf00      	nop
 8018f3c:	3710      	adds	r7, #16
 8018f3e:	46bd      	mov	sp, r7
 8018f40:	bd80      	pop	{r7, pc}
	...

08018f44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f44:	b580      	push	{r7, lr}
 8018f46:	b082      	sub	sp, #8
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f52:	4618      	mov	r0, r3
 8018f54:	f7fc fbac 	bl	80156b0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	687a      	ldr	r2, [r7, #4]
 8018f64:	6812      	ldr	r2, [r2, #0]
 8018f66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018f6a:	f043 0301 	orr.w	r3, r3, #1
 8018f6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	6a1b      	ldr	r3, [r3, #32]
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d005      	beq.n	8018f84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018f78:	4b04      	ldr	r3, [pc, #16]	; (8018f8c <HAL_PCD_SuspendCallback+0x48>)
 8018f7a:	691b      	ldr	r3, [r3, #16]
 8018f7c:	4a03      	ldr	r2, [pc, #12]	; (8018f8c <HAL_PCD_SuspendCallback+0x48>)
 8018f7e:	f043 0306 	orr.w	r3, r3, #6
 8018f82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018f84:	bf00      	nop
 8018f86:	3708      	adds	r7, #8
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd80      	pop	{r7, pc}
 8018f8c:	e000ed00 	.word	0xe000ed00

08018f90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b082      	sub	sp, #8
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	f7fc fb9b 	bl	80156da <USBD_LL_Resume>
}
 8018fa4:	bf00      	nop
 8018fa6:	3708      	adds	r7, #8
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	bd80      	pop	{r7, pc}

08018fac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b082      	sub	sp, #8
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]
 8018fb4:	460b      	mov	r3, r1
 8018fb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018fbe:	78fa      	ldrb	r2, [r7, #3]
 8018fc0:	4611      	mov	r1, r2
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f7fc fbc6 	bl	8015754 <USBD_LL_IsoOUTIncomplete>
}
 8018fc8:	bf00      	nop
 8018fca:	3708      	adds	r7, #8
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd80      	pop	{r7, pc}

08018fd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	b082      	sub	sp, #8
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	6078      	str	r0, [r7, #4]
 8018fd8:	460b      	mov	r3, r1
 8018fda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018fe2:	78fa      	ldrb	r2, [r7, #3]
 8018fe4:	4611      	mov	r1, r2
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	f7fc fba7 	bl	801573a <USBD_LL_IsoINIncomplete>
}
 8018fec:	bf00      	nop
 8018fee:	3708      	adds	r7, #8
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	bd80      	pop	{r7, pc}

08018ff4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b082      	sub	sp, #8
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019002:	4618      	mov	r0, r3
 8019004:	f7fc fbb3 	bl	801576e <USBD_LL_DevConnected>
}
 8019008:	bf00      	nop
 801900a:	3708      	adds	r7, #8
 801900c:	46bd      	mov	sp, r7
 801900e:	bd80      	pop	{r7, pc}

08019010 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019010:	b580      	push	{r7, lr}
 8019012:	b082      	sub	sp, #8
 8019014:	af00      	add	r7, sp, #0
 8019016:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801901e:	4618      	mov	r0, r3
 8019020:	f7fc fbb0 	bl	8015784 <USBD_LL_DevDisconnected>
}
 8019024:	bf00      	nop
 8019026:	3708      	adds	r7, #8
 8019028:	46bd      	mov	sp, r7
 801902a:	bd80      	pop	{r7, pc}

0801902c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b082      	sub	sp, #8
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	781b      	ldrb	r3, [r3, #0]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d13e      	bne.n	80190ba <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801903c:	4a21      	ldr	r2, [pc, #132]	; (80190c4 <USBD_LL_Init+0x98>)
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	4a1f      	ldr	r2, [pc, #124]	; (80190c4 <USBD_LL_Init+0x98>)
 8019048:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801904c:	4b1d      	ldr	r3, [pc, #116]	; (80190c4 <USBD_LL_Init+0x98>)
 801904e:	4a1e      	ldr	r2, [pc, #120]	; (80190c8 <USBD_LL_Init+0x9c>)
 8019050:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8019052:	4b1c      	ldr	r3, [pc, #112]	; (80190c4 <USBD_LL_Init+0x98>)
 8019054:	2209      	movs	r2, #9
 8019056:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019058:	4b1a      	ldr	r3, [pc, #104]	; (80190c4 <USBD_LL_Init+0x98>)
 801905a:	2202      	movs	r2, #2
 801905c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801905e:	4b19      	ldr	r3, [pc, #100]	; (80190c4 <USBD_LL_Init+0x98>)
 8019060:	2200      	movs	r2, #0
 8019062:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019064:	4b17      	ldr	r3, [pc, #92]	; (80190c4 <USBD_LL_Init+0x98>)
 8019066:	2202      	movs	r2, #2
 8019068:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801906a:	4b16      	ldr	r3, [pc, #88]	; (80190c4 <USBD_LL_Init+0x98>)
 801906c:	2200      	movs	r2, #0
 801906e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019070:	4b14      	ldr	r3, [pc, #80]	; (80190c4 <USBD_LL_Init+0x98>)
 8019072:	2200      	movs	r2, #0
 8019074:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019076:	4b13      	ldr	r3, [pc, #76]	; (80190c4 <USBD_LL_Init+0x98>)
 8019078:	2200      	movs	r2, #0
 801907a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801907c:	4b11      	ldr	r3, [pc, #68]	; (80190c4 <USBD_LL_Init+0x98>)
 801907e:	2200      	movs	r2, #0
 8019080:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019082:	4b10      	ldr	r3, [pc, #64]	; (80190c4 <USBD_LL_Init+0x98>)
 8019084:	2200      	movs	r2, #0
 8019086:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019088:	4b0e      	ldr	r3, [pc, #56]	; (80190c4 <USBD_LL_Init+0x98>)
 801908a:	2200      	movs	r2, #0
 801908c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801908e:	480d      	ldr	r0, [pc, #52]	; (80190c4 <USBD_LL_Init+0x98>)
 8019090:	f7ef f822 	bl	80080d8 <HAL_PCD_Init>
 8019094:	4603      	mov	r3, r0
 8019096:	2b00      	cmp	r3, #0
 8019098:	d001      	beq.n	801909e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801909a:	f7ea fd9d 	bl	8003bd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801909e:	2180      	movs	r1, #128	; 0x80
 80190a0:	4808      	ldr	r0, [pc, #32]	; (80190c4 <USBD_LL_Init+0x98>)
 80190a2:	f7f0 f9e0 	bl	8009466 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80190a6:	2240      	movs	r2, #64	; 0x40
 80190a8:	2100      	movs	r1, #0
 80190aa:	4806      	ldr	r0, [pc, #24]	; (80190c4 <USBD_LL_Init+0x98>)
 80190ac:	f7f0 f994 	bl	80093d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80190b0:	2280      	movs	r2, #128	; 0x80
 80190b2:	2101      	movs	r1, #1
 80190b4:	4803      	ldr	r0, [pc, #12]	; (80190c4 <USBD_LL_Init+0x98>)
 80190b6:	f7f0 f98f 	bl	80093d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80190ba:	2300      	movs	r3, #0
}
 80190bc:	4618      	mov	r0, r3
 80190be:	3708      	adds	r7, #8
 80190c0:	46bd      	mov	sp, r7
 80190c2:	bd80      	pop	{r7, pc}
 80190c4:	240020a4 	.word	0x240020a4
 80190c8:	40080000 	.word	0x40080000

080190cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b084      	sub	sp, #16
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190d4:	2300      	movs	r3, #0
 80190d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190d8:	2300      	movs	r3, #0
 80190da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80190e2:	4618      	mov	r0, r3
 80190e4:	f7ef f91c 	bl	8008320 <HAL_PCD_Start>
 80190e8:	4603      	mov	r3, r0
 80190ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190ec:	7bfb      	ldrb	r3, [r7, #15]
 80190ee:	4618      	mov	r0, r3
 80190f0:	f000 f94a 	bl	8019388 <USBD_Get_USB_Status>
 80190f4:	4603      	mov	r3, r0
 80190f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80190f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80190fa:	4618      	mov	r0, r3
 80190fc:	3710      	adds	r7, #16
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd80      	pop	{r7, pc}

08019102 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019102:	b580      	push	{r7, lr}
 8019104:	b084      	sub	sp, #16
 8019106:	af00      	add	r7, sp, #0
 8019108:	6078      	str	r0, [r7, #4]
 801910a:	4608      	mov	r0, r1
 801910c:	4611      	mov	r1, r2
 801910e:	461a      	mov	r2, r3
 8019110:	4603      	mov	r3, r0
 8019112:	70fb      	strb	r3, [r7, #3]
 8019114:	460b      	mov	r3, r1
 8019116:	70bb      	strb	r3, [r7, #2]
 8019118:	4613      	mov	r3, r2
 801911a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801911c:	2300      	movs	r3, #0
 801911e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019120:	2300      	movs	r3, #0
 8019122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801912a:	78bb      	ldrb	r3, [r7, #2]
 801912c:	883a      	ldrh	r2, [r7, #0]
 801912e:	78f9      	ldrb	r1, [r7, #3]
 8019130:	f7ef fd2d 	bl	8008b8e <HAL_PCD_EP_Open>
 8019134:	4603      	mov	r3, r0
 8019136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019138:	7bfb      	ldrb	r3, [r7, #15]
 801913a:	4618      	mov	r0, r3
 801913c:	f000 f924 	bl	8019388 <USBD_Get_USB_Status>
 8019140:	4603      	mov	r3, r0
 8019142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019144:	7bbb      	ldrb	r3, [r7, #14]
}
 8019146:	4618      	mov	r0, r3
 8019148:	3710      	adds	r7, #16
 801914a:	46bd      	mov	sp, r7
 801914c:	bd80      	pop	{r7, pc}

0801914e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801914e:	b580      	push	{r7, lr}
 8019150:	b084      	sub	sp, #16
 8019152:	af00      	add	r7, sp, #0
 8019154:	6078      	str	r0, [r7, #4]
 8019156:	460b      	mov	r3, r1
 8019158:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801915a:	2300      	movs	r3, #0
 801915c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801915e:	2300      	movs	r3, #0
 8019160:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019168:	78fa      	ldrb	r2, [r7, #3]
 801916a:	4611      	mov	r1, r2
 801916c:	4618      	mov	r0, r3
 801916e:	f7ef fd76 	bl	8008c5e <HAL_PCD_EP_Close>
 8019172:	4603      	mov	r3, r0
 8019174:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019176:	7bfb      	ldrb	r3, [r7, #15]
 8019178:	4618      	mov	r0, r3
 801917a:	f000 f905 	bl	8019388 <USBD_Get_USB_Status>
 801917e:	4603      	mov	r3, r0
 8019180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019182:	7bbb      	ldrb	r3, [r7, #14]
}
 8019184:	4618      	mov	r0, r3
 8019186:	3710      	adds	r7, #16
 8019188:	46bd      	mov	sp, r7
 801918a:	bd80      	pop	{r7, pc}

0801918c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801918c:	b580      	push	{r7, lr}
 801918e:	b084      	sub	sp, #16
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
 8019194:	460b      	mov	r3, r1
 8019196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019198:	2300      	movs	r3, #0
 801919a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801919c:	2300      	movs	r3, #0
 801919e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191a6:	78fa      	ldrb	r2, [r7, #3]
 80191a8:	4611      	mov	r1, r2
 80191aa:	4618      	mov	r0, r3
 80191ac:	f7ef ff08 	bl	8008fc0 <HAL_PCD_EP_Flush>
 80191b0:	4603      	mov	r3, r0
 80191b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191b4:	7bfb      	ldrb	r3, [r7, #15]
 80191b6:	4618      	mov	r0, r3
 80191b8:	f000 f8e6 	bl	8019388 <USBD_Get_USB_Status>
 80191bc:	4603      	mov	r3, r0
 80191be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80191c2:	4618      	mov	r0, r3
 80191c4:	3710      	adds	r7, #16
 80191c6:	46bd      	mov	sp, r7
 80191c8:	bd80      	pop	{r7, pc}

080191ca <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191ca:	b580      	push	{r7, lr}
 80191cc:	b084      	sub	sp, #16
 80191ce:	af00      	add	r7, sp, #0
 80191d0:	6078      	str	r0, [r7, #4]
 80191d2:	460b      	mov	r3, r1
 80191d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191d6:	2300      	movs	r3, #0
 80191d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191da:	2300      	movs	r3, #0
 80191dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191e4:	78fa      	ldrb	r2, [r7, #3]
 80191e6:	4611      	mov	r1, r2
 80191e8:	4618      	mov	r0, r3
 80191ea:	f7ef fe2f 	bl	8008e4c <HAL_PCD_EP_SetStall>
 80191ee:	4603      	mov	r3, r0
 80191f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191f2:	7bfb      	ldrb	r3, [r7, #15]
 80191f4:	4618      	mov	r0, r3
 80191f6:	f000 f8c7 	bl	8019388 <USBD_Get_USB_Status>
 80191fa:	4603      	mov	r3, r0
 80191fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8019200:	4618      	mov	r0, r3
 8019202:	3710      	adds	r7, #16
 8019204:	46bd      	mov	sp, r7
 8019206:	bd80      	pop	{r7, pc}

08019208 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019208:	b580      	push	{r7, lr}
 801920a:	b084      	sub	sp, #16
 801920c:	af00      	add	r7, sp, #0
 801920e:	6078      	str	r0, [r7, #4]
 8019210:	460b      	mov	r3, r1
 8019212:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019214:	2300      	movs	r3, #0
 8019216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019218:	2300      	movs	r3, #0
 801921a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019222:	78fa      	ldrb	r2, [r7, #3]
 8019224:	4611      	mov	r1, r2
 8019226:	4618      	mov	r0, r3
 8019228:	f7ef fe74 	bl	8008f14 <HAL_PCD_EP_ClrStall>
 801922c:	4603      	mov	r3, r0
 801922e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019230:	7bfb      	ldrb	r3, [r7, #15]
 8019232:	4618      	mov	r0, r3
 8019234:	f000 f8a8 	bl	8019388 <USBD_Get_USB_Status>
 8019238:	4603      	mov	r3, r0
 801923a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801923c:	7bbb      	ldrb	r3, [r7, #14]
}
 801923e:	4618      	mov	r0, r3
 8019240:	3710      	adds	r7, #16
 8019242:	46bd      	mov	sp, r7
 8019244:	bd80      	pop	{r7, pc}

08019246 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019246:	b480      	push	{r7}
 8019248:	b085      	sub	sp, #20
 801924a:	af00      	add	r7, sp, #0
 801924c:	6078      	str	r0, [r7, #4]
 801924e:	460b      	mov	r3, r1
 8019250:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019258:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801925a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801925e:	2b00      	cmp	r3, #0
 8019260:	da0b      	bge.n	801927a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019262:	78fb      	ldrb	r3, [r7, #3]
 8019264:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019268:	68f9      	ldr	r1, [r7, #12]
 801926a:	4613      	mov	r3, r2
 801926c:	00db      	lsls	r3, r3, #3
 801926e:	1a9b      	subs	r3, r3, r2
 8019270:	009b      	lsls	r3, r3, #2
 8019272:	440b      	add	r3, r1
 8019274:	333e      	adds	r3, #62	; 0x3e
 8019276:	781b      	ldrb	r3, [r3, #0]
 8019278:	e00b      	b.n	8019292 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801927a:	78fb      	ldrb	r3, [r7, #3]
 801927c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019280:	68f9      	ldr	r1, [r7, #12]
 8019282:	4613      	mov	r3, r2
 8019284:	00db      	lsls	r3, r3, #3
 8019286:	1a9b      	subs	r3, r3, r2
 8019288:	009b      	lsls	r3, r3, #2
 801928a:	440b      	add	r3, r1
 801928c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019290:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019292:	4618      	mov	r0, r3
 8019294:	3714      	adds	r7, #20
 8019296:	46bd      	mov	sp, r7
 8019298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929c:	4770      	bx	lr

0801929e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801929e:	b580      	push	{r7, lr}
 80192a0:	b084      	sub	sp, #16
 80192a2:	af00      	add	r7, sp, #0
 80192a4:	6078      	str	r0, [r7, #4]
 80192a6:	460b      	mov	r3, r1
 80192a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192aa:	2300      	movs	r3, #0
 80192ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192ae:	2300      	movs	r3, #0
 80192b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192b8:	78fa      	ldrb	r2, [r7, #3]
 80192ba:	4611      	mov	r1, r2
 80192bc:	4618      	mov	r0, r3
 80192be:	f7ef fc41 	bl	8008b44 <HAL_PCD_SetAddress>
 80192c2:	4603      	mov	r3, r0
 80192c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192c6:	7bfb      	ldrb	r3, [r7, #15]
 80192c8:	4618      	mov	r0, r3
 80192ca:	f000 f85d 	bl	8019388 <USBD_Get_USB_Status>
 80192ce:	4603      	mov	r3, r0
 80192d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80192d4:	4618      	mov	r0, r3
 80192d6:	3710      	adds	r7, #16
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}

080192dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b086      	sub	sp, #24
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	60f8      	str	r0, [r7, #12]
 80192e4:	607a      	str	r2, [r7, #4]
 80192e6:	603b      	str	r3, [r7, #0]
 80192e8:	460b      	mov	r3, r1
 80192ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192ec:	2300      	movs	r3, #0
 80192ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192f0:	2300      	movs	r3, #0
 80192f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80192fa:	7af9      	ldrb	r1, [r7, #11]
 80192fc:	683b      	ldr	r3, [r7, #0]
 80192fe:	687a      	ldr	r2, [r7, #4]
 8019300:	f7ef fd5a 	bl	8008db8 <HAL_PCD_EP_Transmit>
 8019304:	4603      	mov	r3, r0
 8019306:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019308:	7dfb      	ldrb	r3, [r7, #23]
 801930a:	4618      	mov	r0, r3
 801930c:	f000 f83c 	bl	8019388 <USBD_Get_USB_Status>
 8019310:	4603      	mov	r3, r0
 8019312:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019314:	7dbb      	ldrb	r3, [r7, #22]
}
 8019316:	4618      	mov	r0, r3
 8019318:	3718      	adds	r7, #24
 801931a:	46bd      	mov	sp, r7
 801931c:	bd80      	pop	{r7, pc}

0801931e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801931e:	b580      	push	{r7, lr}
 8019320:	b086      	sub	sp, #24
 8019322:	af00      	add	r7, sp, #0
 8019324:	60f8      	str	r0, [r7, #12]
 8019326:	607a      	str	r2, [r7, #4]
 8019328:	603b      	str	r3, [r7, #0]
 801932a:	460b      	mov	r3, r1
 801932c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801932e:	2300      	movs	r3, #0
 8019330:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019332:	2300      	movs	r3, #0
 8019334:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801933c:	7af9      	ldrb	r1, [r7, #11]
 801933e:	683b      	ldr	r3, [r7, #0]
 8019340:	687a      	ldr	r2, [r7, #4]
 8019342:	f7ef fcd6 	bl	8008cf2 <HAL_PCD_EP_Receive>
 8019346:	4603      	mov	r3, r0
 8019348:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801934a:	7dfb      	ldrb	r3, [r7, #23]
 801934c:	4618      	mov	r0, r3
 801934e:	f000 f81b 	bl	8019388 <USBD_Get_USB_Status>
 8019352:	4603      	mov	r3, r0
 8019354:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019356:	7dbb      	ldrb	r3, [r7, #22]
}
 8019358:	4618      	mov	r0, r3
 801935a:	3718      	adds	r7, #24
 801935c:	46bd      	mov	sp, r7
 801935e:	bd80      	pop	{r7, pc}

08019360 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b082      	sub	sp, #8
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
 8019368:	460b      	mov	r3, r1
 801936a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019372:	78fa      	ldrb	r2, [r7, #3]
 8019374:	4611      	mov	r1, r2
 8019376:	4618      	mov	r0, r3
 8019378:	f7ef fd06 	bl	8008d88 <HAL_PCD_EP_GetRxCount>
 801937c:	4603      	mov	r3, r0
}
 801937e:	4618      	mov	r0, r3
 8019380:	3708      	adds	r7, #8
 8019382:	46bd      	mov	sp, r7
 8019384:	bd80      	pop	{r7, pc}
	...

08019388 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019388:	b480      	push	{r7}
 801938a:	b085      	sub	sp, #20
 801938c:	af00      	add	r7, sp, #0
 801938e:	4603      	mov	r3, r0
 8019390:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019392:	2300      	movs	r3, #0
 8019394:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019396:	79fb      	ldrb	r3, [r7, #7]
 8019398:	2b03      	cmp	r3, #3
 801939a:	d817      	bhi.n	80193cc <USBD_Get_USB_Status+0x44>
 801939c:	a201      	add	r2, pc, #4	; (adr r2, 80193a4 <USBD_Get_USB_Status+0x1c>)
 801939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193a2:	bf00      	nop
 80193a4:	080193b5 	.word	0x080193b5
 80193a8:	080193bb 	.word	0x080193bb
 80193ac:	080193c1 	.word	0x080193c1
 80193b0:	080193c7 	.word	0x080193c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80193b4:	2300      	movs	r3, #0
 80193b6:	73fb      	strb	r3, [r7, #15]
    break;
 80193b8:	e00b      	b.n	80193d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80193ba:	2303      	movs	r3, #3
 80193bc:	73fb      	strb	r3, [r7, #15]
    break;
 80193be:	e008      	b.n	80193d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80193c0:	2301      	movs	r3, #1
 80193c2:	73fb      	strb	r3, [r7, #15]
    break;
 80193c4:	e005      	b.n	80193d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80193c6:	2303      	movs	r3, #3
 80193c8:	73fb      	strb	r3, [r7, #15]
    break;
 80193ca:	e002      	b.n	80193d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80193cc:	2303      	movs	r3, #3
 80193ce:	73fb      	strb	r3, [r7, #15]
    break;
 80193d0:	bf00      	nop
  }
  return usb_status;
 80193d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80193d4:	4618      	mov	r0, r3
 80193d6:	3714      	adds	r7, #20
 80193d8:	46bd      	mov	sp, r7
 80193da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193de:	4770      	bx	lr

080193e0 <__errno>:
 80193e0:	4b01      	ldr	r3, [pc, #4]	; (80193e8 <__errno+0x8>)
 80193e2:	6818      	ldr	r0, [r3, #0]
 80193e4:	4770      	bx	lr
 80193e6:	bf00      	nop
 80193e8:	24000178 	.word	0x24000178

080193ec <__libc_init_array>:
 80193ec:	b570      	push	{r4, r5, r6, lr}
 80193ee:	4e0d      	ldr	r6, [pc, #52]	; (8019424 <__libc_init_array+0x38>)
 80193f0:	4c0d      	ldr	r4, [pc, #52]	; (8019428 <__libc_init_array+0x3c>)
 80193f2:	1ba4      	subs	r4, r4, r6
 80193f4:	10a4      	asrs	r4, r4, #2
 80193f6:	2500      	movs	r5, #0
 80193f8:	42a5      	cmp	r5, r4
 80193fa:	d109      	bne.n	8019410 <__libc_init_array+0x24>
 80193fc:	4e0b      	ldr	r6, [pc, #44]	; (801942c <__libc_init_array+0x40>)
 80193fe:	4c0c      	ldr	r4, [pc, #48]	; (8019430 <__libc_init_array+0x44>)
 8019400:	f001 f97a 	bl	801a6f8 <_init>
 8019404:	1ba4      	subs	r4, r4, r6
 8019406:	10a4      	asrs	r4, r4, #2
 8019408:	2500      	movs	r5, #0
 801940a:	42a5      	cmp	r5, r4
 801940c:	d105      	bne.n	801941a <__libc_init_array+0x2e>
 801940e:	bd70      	pop	{r4, r5, r6, pc}
 8019410:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019414:	4798      	blx	r3
 8019416:	3501      	adds	r5, #1
 8019418:	e7ee      	b.n	80193f8 <__libc_init_array+0xc>
 801941a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801941e:	4798      	blx	r3
 8019420:	3501      	adds	r5, #1
 8019422:	e7f2      	b.n	801940a <__libc_init_array+0x1e>
 8019424:	0801b0ac 	.word	0x0801b0ac
 8019428:	0801b0ac 	.word	0x0801b0ac
 801942c:	0801b0ac 	.word	0x0801b0ac
 8019430:	0801b0b0 	.word	0x0801b0b0

08019434 <malloc>:
 8019434:	4b02      	ldr	r3, [pc, #8]	; (8019440 <malloc+0xc>)
 8019436:	4601      	mov	r1, r0
 8019438:	6818      	ldr	r0, [r3, #0]
 801943a:	f000 b86d 	b.w	8019518 <_malloc_r>
 801943e:	bf00      	nop
 8019440:	24000178 	.word	0x24000178

08019444 <free>:
 8019444:	4b02      	ldr	r3, [pc, #8]	; (8019450 <free+0xc>)
 8019446:	4601      	mov	r1, r0
 8019448:	6818      	ldr	r0, [r3, #0]
 801944a:	f000 b817 	b.w	801947c <_free_r>
 801944e:	bf00      	nop
 8019450:	24000178 	.word	0x24000178

08019454 <memcpy>:
 8019454:	b510      	push	{r4, lr}
 8019456:	1e43      	subs	r3, r0, #1
 8019458:	440a      	add	r2, r1
 801945a:	4291      	cmp	r1, r2
 801945c:	d100      	bne.n	8019460 <memcpy+0xc>
 801945e:	bd10      	pop	{r4, pc}
 8019460:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019464:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019468:	e7f7      	b.n	801945a <memcpy+0x6>

0801946a <memset>:
 801946a:	4402      	add	r2, r0
 801946c:	4603      	mov	r3, r0
 801946e:	4293      	cmp	r3, r2
 8019470:	d100      	bne.n	8019474 <memset+0xa>
 8019472:	4770      	bx	lr
 8019474:	f803 1b01 	strb.w	r1, [r3], #1
 8019478:	e7f9      	b.n	801946e <memset+0x4>
	...

0801947c <_free_r>:
 801947c:	b538      	push	{r3, r4, r5, lr}
 801947e:	4605      	mov	r5, r0
 8019480:	2900      	cmp	r1, #0
 8019482:	d045      	beq.n	8019510 <_free_r+0x94>
 8019484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019488:	1f0c      	subs	r4, r1, #4
 801948a:	2b00      	cmp	r3, #0
 801948c:	bfb8      	it	lt
 801948e:	18e4      	addlt	r4, r4, r3
 8019490:	f000 fc22 	bl	8019cd8 <__malloc_lock>
 8019494:	4a1f      	ldr	r2, [pc, #124]	; (8019514 <_free_r+0x98>)
 8019496:	6813      	ldr	r3, [r2, #0]
 8019498:	4610      	mov	r0, r2
 801949a:	b933      	cbnz	r3, 80194aa <_free_r+0x2e>
 801949c:	6063      	str	r3, [r4, #4]
 801949e:	6014      	str	r4, [r2, #0]
 80194a0:	4628      	mov	r0, r5
 80194a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194a6:	f000 bc18 	b.w	8019cda <__malloc_unlock>
 80194aa:	42a3      	cmp	r3, r4
 80194ac:	d90c      	bls.n	80194c8 <_free_r+0x4c>
 80194ae:	6821      	ldr	r1, [r4, #0]
 80194b0:	1862      	adds	r2, r4, r1
 80194b2:	4293      	cmp	r3, r2
 80194b4:	bf04      	itt	eq
 80194b6:	681a      	ldreq	r2, [r3, #0]
 80194b8:	685b      	ldreq	r3, [r3, #4]
 80194ba:	6063      	str	r3, [r4, #4]
 80194bc:	bf04      	itt	eq
 80194be:	1852      	addeq	r2, r2, r1
 80194c0:	6022      	streq	r2, [r4, #0]
 80194c2:	6004      	str	r4, [r0, #0]
 80194c4:	e7ec      	b.n	80194a0 <_free_r+0x24>
 80194c6:	4613      	mov	r3, r2
 80194c8:	685a      	ldr	r2, [r3, #4]
 80194ca:	b10a      	cbz	r2, 80194d0 <_free_r+0x54>
 80194cc:	42a2      	cmp	r2, r4
 80194ce:	d9fa      	bls.n	80194c6 <_free_r+0x4a>
 80194d0:	6819      	ldr	r1, [r3, #0]
 80194d2:	1858      	adds	r0, r3, r1
 80194d4:	42a0      	cmp	r0, r4
 80194d6:	d10b      	bne.n	80194f0 <_free_r+0x74>
 80194d8:	6820      	ldr	r0, [r4, #0]
 80194da:	4401      	add	r1, r0
 80194dc:	1858      	adds	r0, r3, r1
 80194de:	4282      	cmp	r2, r0
 80194e0:	6019      	str	r1, [r3, #0]
 80194e2:	d1dd      	bne.n	80194a0 <_free_r+0x24>
 80194e4:	6810      	ldr	r0, [r2, #0]
 80194e6:	6852      	ldr	r2, [r2, #4]
 80194e8:	605a      	str	r2, [r3, #4]
 80194ea:	4401      	add	r1, r0
 80194ec:	6019      	str	r1, [r3, #0]
 80194ee:	e7d7      	b.n	80194a0 <_free_r+0x24>
 80194f0:	d902      	bls.n	80194f8 <_free_r+0x7c>
 80194f2:	230c      	movs	r3, #12
 80194f4:	602b      	str	r3, [r5, #0]
 80194f6:	e7d3      	b.n	80194a0 <_free_r+0x24>
 80194f8:	6820      	ldr	r0, [r4, #0]
 80194fa:	1821      	adds	r1, r4, r0
 80194fc:	428a      	cmp	r2, r1
 80194fe:	bf04      	itt	eq
 8019500:	6811      	ldreq	r1, [r2, #0]
 8019502:	6852      	ldreq	r2, [r2, #4]
 8019504:	6062      	str	r2, [r4, #4]
 8019506:	bf04      	itt	eq
 8019508:	1809      	addeq	r1, r1, r0
 801950a:	6021      	streq	r1, [r4, #0]
 801950c:	605c      	str	r4, [r3, #4]
 801950e:	e7c7      	b.n	80194a0 <_free_r+0x24>
 8019510:	bd38      	pop	{r3, r4, r5, pc}
 8019512:	bf00      	nop
 8019514:	24000b90 	.word	0x24000b90

08019518 <_malloc_r>:
 8019518:	b570      	push	{r4, r5, r6, lr}
 801951a:	1ccd      	adds	r5, r1, #3
 801951c:	f025 0503 	bic.w	r5, r5, #3
 8019520:	3508      	adds	r5, #8
 8019522:	2d0c      	cmp	r5, #12
 8019524:	bf38      	it	cc
 8019526:	250c      	movcc	r5, #12
 8019528:	2d00      	cmp	r5, #0
 801952a:	4606      	mov	r6, r0
 801952c:	db01      	blt.n	8019532 <_malloc_r+0x1a>
 801952e:	42a9      	cmp	r1, r5
 8019530:	d903      	bls.n	801953a <_malloc_r+0x22>
 8019532:	230c      	movs	r3, #12
 8019534:	6033      	str	r3, [r6, #0]
 8019536:	2000      	movs	r0, #0
 8019538:	bd70      	pop	{r4, r5, r6, pc}
 801953a:	f000 fbcd 	bl	8019cd8 <__malloc_lock>
 801953e:	4a21      	ldr	r2, [pc, #132]	; (80195c4 <_malloc_r+0xac>)
 8019540:	6814      	ldr	r4, [r2, #0]
 8019542:	4621      	mov	r1, r4
 8019544:	b991      	cbnz	r1, 801956c <_malloc_r+0x54>
 8019546:	4c20      	ldr	r4, [pc, #128]	; (80195c8 <_malloc_r+0xb0>)
 8019548:	6823      	ldr	r3, [r4, #0]
 801954a:	b91b      	cbnz	r3, 8019554 <_malloc_r+0x3c>
 801954c:	4630      	mov	r0, r6
 801954e:	f000 f8b9 	bl	80196c4 <_sbrk_r>
 8019552:	6020      	str	r0, [r4, #0]
 8019554:	4629      	mov	r1, r5
 8019556:	4630      	mov	r0, r6
 8019558:	f000 f8b4 	bl	80196c4 <_sbrk_r>
 801955c:	1c43      	adds	r3, r0, #1
 801955e:	d124      	bne.n	80195aa <_malloc_r+0x92>
 8019560:	230c      	movs	r3, #12
 8019562:	6033      	str	r3, [r6, #0]
 8019564:	4630      	mov	r0, r6
 8019566:	f000 fbb8 	bl	8019cda <__malloc_unlock>
 801956a:	e7e4      	b.n	8019536 <_malloc_r+0x1e>
 801956c:	680b      	ldr	r3, [r1, #0]
 801956e:	1b5b      	subs	r3, r3, r5
 8019570:	d418      	bmi.n	80195a4 <_malloc_r+0x8c>
 8019572:	2b0b      	cmp	r3, #11
 8019574:	d90f      	bls.n	8019596 <_malloc_r+0x7e>
 8019576:	600b      	str	r3, [r1, #0]
 8019578:	50cd      	str	r5, [r1, r3]
 801957a:	18cc      	adds	r4, r1, r3
 801957c:	4630      	mov	r0, r6
 801957e:	f000 fbac 	bl	8019cda <__malloc_unlock>
 8019582:	f104 000b 	add.w	r0, r4, #11
 8019586:	1d23      	adds	r3, r4, #4
 8019588:	f020 0007 	bic.w	r0, r0, #7
 801958c:	1ac3      	subs	r3, r0, r3
 801958e:	d0d3      	beq.n	8019538 <_malloc_r+0x20>
 8019590:	425a      	negs	r2, r3
 8019592:	50e2      	str	r2, [r4, r3]
 8019594:	e7d0      	b.n	8019538 <_malloc_r+0x20>
 8019596:	428c      	cmp	r4, r1
 8019598:	684b      	ldr	r3, [r1, #4]
 801959a:	bf16      	itet	ne
 801959c:	6063      	strne	r3, [r4, #4]
 801959e:	6013      	streq	r3, [r2, #0]
 80195a0:	460c      	movne	r4, r1
 80195a2:	e7eb      	b.n	801957c <_malloc_r+0x64>
 80195a4:	460c      	mov	r4, r1
 80195a6:	6849      	ldr	r1, [r1, #4]
 80195a8:	e7cc      	b.n	8019544 <_malloc_r+0x2c>
 80195aa:	1cc4      	adds	r4, r0, #3
 80195ac:	f024 0403 	bic.w	r4, r4, #3
 80195b0:	42a0      	cmp	r0, r4
 80195b2:	d005      	beq.n	80195c0 <_malloc_r+0xa8>
 80195b4:	1a21      	subs	r1, r4, r0
 80195b6:	4630      	mov	r0, r6
 80195b8:	f000 f884 	bl	80196c4 <_sbrk_r>
 80195bc:	3001      	adds	r0, #1
 80195be:	d0cf      	beq.n	8019560 <_malloc_r+0x48>
 80195c0:	6025      	str	r5, [r4, #0]
 80195c2:	e7db      	b.n	801957c <_malloc_r+0x64>
 80195c4:	24000b90 	.word	0x24000b90
 80195c8:	24000b94 	.word	0x24000b94

080195cc <iprintf>:
 80195cc:	b40f      	push	{r0, r1, r2, r3}
 80195ce:	4b0a      	ldr	r3, [pc, #40]	; (80195f8 <iprintf+0x2c>)
 80195d0:	b513      	push	{r0, r1, r4, lr}
 80195d2:	681c      	ldr	r4, [r3, #0]
 80195d4:	b124      	cbz	r4, 80195e0 <iprintf+0x14>
 80195d6:	69a3      	ldr	r3, [r4, #24]
 80195d8:	b913      	cbnz	r3, 80195e0 <iprintf+0x14>
 80195da:	4620      	mov	r0, r4
 80195dc:	f000 fa8e 	bl	8019afc <__sinit>
 80195e0:	ab05      	add	r3, sp, #20
 80195e2:	9a04      	ldr	r2, [sp, #16]
 80195e4:	68a1      	ldr	r1, [r4, #8]
 80195e6:	9301      	str	r3, [sp, #4]
 80195e8:	4620      	mov	r0, r4
 80195ea:	f000 fcf3 	bl	8019fd4 <_vfiprintf_r>
 80195ee:	b002      	add	sp, #8
 80195f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195f4:	b004      	add	sp, #16
 80195f6:	4770      	bx	lr
 80195f8:	24000178 	.word	0x24000178

080195fc <_puts_r>:
 80195fc:	b570      	push	{r4, r5, r6, lr}
 80195fe:	460e      	mov	r6, r1
 8019600:	4605      	mov	r5, r0
 8019602:	b118      	cbz	r0, 801960c <_puts_r+0x10>
 8019604:	6983      	ldr	r3, [r0, #24]
 8019606:	b90b      	cbnz	r3, 801960c <_puts_r+0x10>
 8019608:	f000 fa78 	bl	8019afc <__sinit>
 801960c:	69ab      	ldr	r3, [r5, #24]
 801960e:	68ac      	ldr	r4, [r5, #8]
 8019610:	b913      	cbnz	r3, 8019618 <_puts_r+0x1c>
 8019612:	4628      	mov	r0, r5
 8019614:	f000 fa72 	bl	8019afc <__sinit>
 8019618:	4b23      	ldr	r3, [pc, #140]	; (80196a8 <_puts_r+0xac>)
 801961a:	429c      	cmp	r4, r3
 801961c:	d117      	bne.n	801964e <_puts_r+0x52>
 801961e:	686c      	ldr	r4, [r5, #4]
 8019620:	89a3      	ldrh	r3, [r4, #12]
 8019622:	071b      	lsls	r3, r3, #28
 8019624:	d51d      	bpl.n	8019662 <_puts_r+0x66>
 8019626:	6923      	ldr	r3, [r4, #16]
 8019628:	b1db      	cbz	r3, 8019662 <_puts_r+0x66>
 801962a:	3e01      	subs	r6, #1
 801962c:	68a3      	ldr	r3, [r4, #8]
 801962e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019632:	3b01      	subs	r3, #1
 8019634:	60a3      	str	r3, [r4, #8]
 8019636:	b9e9      	cbnz	r1, 8019674 <_puts_r+0x78>
 8019638:	2b00      	cmp	r3, #0
 801963a:	da2e      	bge.n	801969a <_puts_r+0x9e>
 801963c:	4622      	mov	r2, r4
 801963e:	210a      	movs	r1, #10
 8019640:	4628      	mov	r0, r5
 8019642:	f000 f8ab 	bl	801979c <__swbuf_r>
 8019646:	3001      	adds	r0, #1
 8019648:	d011      	beq.n	801966e <_puts_r+0x72>
 801964a:	200a      	movs	r0, #10
 801964c:	e011      	b.n	8019672 <_puts_r+0x76>
 801964e:	4b17      	ldr	r3, [pc, #92]	; (80196ac <_puts_r+0xb0>)
 8019650:	429c      	cmp	r4, r3
 8019652:	d101      	bne.n	8019658 <_puts_r+0x5c>
 8019654:	68ac      	ldr	r4, [r5, #8]
 8019656:	e7e3      	b.n	8019620 <_puts_r+0x24>
 8019658:	4b15      	ldr	r3, [pc, #84]	; (80196b0 <_puts_r+0xb4>)
 801965a:	429c      	cmp	r4, r3
 801965c:	bf08      	it	eq
 801965e:	68ec      	ldreq	r4, [r5, #12]
 8019660:	e7de      	b.n	8019620 <_puts_r+0x24>
 8019662:	4621      	mov	r1, r4
 8019664:	4628      	mov	r0, r5
 8019666:	f000 f8eb 	bl	8019840 <__swsetup_r>
 801966a:	2800      	cmp	r0, #0
 801966c:	d0dd      	beq.n	801962a <_puts_r+0x2e>
 801966e:	f04f 30ff 	mov.w	r0, #4294967295
 8019672:	bd70      	pop	{r4, r5, r6, pc}
 8019674:	2b00      	cmp	r3, #0
 8019676:	da04      	bge.n	8019682 <_puts_r+0x86>
 8019678:	69a2      	ldr	r2, [r4, #24]
 801967a:	429a      	cmp	r2, r3
 801967c:	dc06      	bgt.n	801968c <_puts_r+0x90>
 801967e:	290a      	cmp	r1, #10
 8019680:	d004      	beq.n	801968c <_puts_r+0x90>
 8019682:	6823      	ldr	r3, [r4, #0]
 8019684:	1c5a      	adds	r2, r3, #1
 8019686:	6022      	str	r2, [r4, #0]
 8019688:	7019      	strb	r1, [r3, #0]
 801968a:	e7cf      	b.n	801962c <_puts_r+0x30>
 801968c:	4622      	mov	r2, r4
 801968e:	4628      	mov	r0, r5
 8019690:	f000 f884 	bl	801979c <__swbuf_r>
 8019694:	3001      	adds	r0, #1
 8019696:	d1c9      	bne.n	801962c <_puts_r+0x30>
 8019698:	e7e9      	b.n	801966e <_puts_r+0x72>
 801969a:	6823      	ldr	r3, [r4, #0]
 801969c:	200a      	movs	r0, #10
 801969e:	1c5a      	adds	r2, r3, #1
 80196a0:	6022      	str	r2, [r4, #0]
 80196a2:	7018      	strb	r0, [r3, #0]
 80196a4:	e7e5      	b.n	8019672 <_puts_r+0x76>
 80196a6:	bf00      	nop
 80196a8:	0801b030 	.word	0x0801b030
 80196ac:	0801b050 	.word	0x0801b050
 80196b0:	0801b010 	.word	0x0801b010

080196b4 <puts>:
 80196b4:	4b02      	ldr	r3, [pc, #8]	; (80196c0 <puts+0xc>)
 80196b6:	4601      	mov	r1, r0
 80196b8:	6818      	ldr	r0, [r3, #0]
 80196ba:	f7ff bf9f 	b.w	80195fc <_puts_r>
 80196be:	bf00      	nop
 80196c0:	24000178 	.word	0x24000178

080196c4 <_sbrk_r>:
 80196c4:	b538      	push	{r3, r4, r5, lr}
 80196c6:	4c06      	ldr	r4, [pc, #24]	; (80196e0 <_sbrk_r+0x1c>)
 80196c8:	2300      	movs	r3, #0
 80196ca:	4605      	mov	r5, r0
 80196cc:	4608      	mov	r0, r1
 80196ce:	6023      	str	r3, [r4, #0]
 80196d0:	f7ea fdf8 	bl	80042c4 <_sbrk>
 80196d4:	1c43      	adds	r3, r0, #1
 80196d6:	d102      	bne.n	80196de <_sbrk_r+0x1a>
 80196d8:	6823      	ldr	r3, [r4, #0]
 80196da:	b103      	cbz	r3, 80196de <_sbrk_r+0x1a>
 80196dc:	602b      	str	r3, [r5, #0]
 80196de:	bd38      	pop	{r3, r4, r5, pc}
 80196e0:	240024ac 	.word	0x240024ac

080196e4 <sniprintf>:
 80196e4:	b40c      	push	{r2, r3}
 80196e6:	b530      	push	{r4, r5, lr}
 80196e8:	4b17      	ldr	r3, [pc, #92]	; (8019748 <sniprintf+0x64>)
 80196ea:	1e0c      	subs	r4, r1, #0
 80196ec:	b09d      	sub	sp, #116	; 0x74
 80196ee:	681d      	ldr	r5, [r3, #0]
 80196f0:	da08      	bge.n	8019704 <sniprintf+0x20>
 80196f2:	238b      	movs	r3, #139	; 0x8b
 80196f4:	602b      	str	r3, [r5, #0]
 80196f6:	f04f 30ff 	mov.w	r0, #4294967295
 80196fa:	b01d      	add	sp, #116	; 0x74
 80196fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019700:	b002      	add	sp, #8
 8019702:	4770      	bx	lr
 8019704:	f44f 7302 	mov.w	r3, #520	; 0x208
 8019708:	f8ad 3014 	strh.w	r3, [sp, #20]
 801970c:	bf14      	ite	ne
 801970e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019712:	4623      	moveq	r3, r4
 8019714:	9304      	str	r3, [sp, #16]
 8019716:	9307      	str	r3, [sp, #28]
 8019718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801971c:	9002      	str	r0, [sp, #8]
 801971e:	9006      	str	r0, [sp, #24]
 8019720:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019724:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019726:	ab21      	add	r3, sp, #132	; 0x84
 8019728:	a902      	add	r1, sp, #8
 801972a:	4628      	mov	r0, r5
 801972c:	9301      	str	r3, [sp, #4]
 801972e:	f000 fb2f 	bl	8019d90 <_svfiprintf_r>
 8019732:	1c43      	adds	r3, r0, #1
 8019734:	bfbc      	itt	lt
 8019736:	238b      	movlt	r3, #139	; 0x8b
 8019738:	602b      	strlt	r3, [r5, #0]
 801973a:	2c00      	cmp	r4, #0
 801973c:	d0dd      	beq.n	80196fa <sniprintf+0x16>
 801973e:	9b02      	ldr	r3, [sp, #8]
 8019740:	2200      	movs	r2, #0
 8019742:	701a      	strb	r2, [r3, #0]
 8019744:	e7d9      	b.n	80196fa <sniprintf+0x16>
 8019746:	bf00      	nop
 8019748:	24000178 	.word	0x24000178

0801974c <siprintf>:
 801974c:	b40e      	push	{r1, r2, r3}
 801974e:	b500      	push	{lr}
 8019750:	b09c      	sub	sp, #112	; 0x70
 8019752:	ab1d      	add	r3, sp, #116	; 0x74
 8019754:	9002      	str	r0, [sp, #8]
 8019756:	9006      	str	r0, [sp, #24]
 8019758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801975c:	4809      	ldr	r0, [pc, #36]	; (8019784 <siprintf+0x38>)
 801975e:	9107      	str	r1, [sp, #28]
 8019760:	9104      	str	r1, [sp, #16]
 8019762:	4909      	ldr	r1, [pc, #36]	; (8019788 <siprintf+0x3c>)
 8019764:	f853 2b04 	ldr.w	r2, [r3], #4
 8019768:	9105      	str	r1, [sp, #20]
 801976a:	6800      	ldr	r0, [r0, #0]
 801976c:	9301      	str	r3, [sp, #4]
 801976e:	a902      	add	r1, sp, #8
 8019770:	f000 fb0e 	bl	8019d90 <_svfiprintf_r>
 8019774:	9b02      	ldr	r3, [sp, #8]
 8019776:	2200      	movs	r2, #0
 8019778:	701a      	strb	r2, [r3, #0]
 801977a:	b01c      	add	sp, #112	; 0x70
 801977c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019780:	b003      	add	sp, #12
 8019782:	4770      	bx	lr
 8019784:	24000178 	.word	0x24000178
 8019788:	ffff0208 	.word	0xffff0208

0801978c <strcpy>:
 801978c:	4603      	mov	r3, r0
 801978e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019792:	f803 2b01 	strb.w	r2, [r3], #1
 8019796:	2a00      	cmp	r2, #0
 8019798:	d1f9      	bne.n	801978e <strcpy+0x2>
 801979a:	4770      	bx	lr

0801979c <__swbuf_r>:
 801979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801979e:	460e      	mov	r6, r1
 80197a0:	4614      	mov	r4, r2
 80197a2:	4605      	mov	r5, r0
 80197a4:	b118      	cbz	r0, 80197ae <__swbuf_r+0x12>
 80197a6:	6983      	ldr	r3, [r0, #24]
 80197a8:	b90b      	cbnz	r3, 80197ae <__swbuf_r+0x12>
 80197aa:	f000 f9a7 	bl	8019afc <__sinit>
 80197ae:	4b21      	ldr	r3, [pc, #132]	; (8019834 <__swbuf_r+0x98>)
 80197b0:	429c      	cmp	r4, r3
 80197b2:	d12a      	bne.n	801980a <__swbuf_r+0x6e>
 80197b4:	686c      	ldr	r4, [r5, #4]
 80197b6:	69a3      	ldr	r3, [r4, #24]
 80197b8:	60a3      	str	r3, [r4, #8]
 80197ba:	89a3      	ldrh	r3, [r4, #12]
 80197bc:	071a      	lsls	r2, r3, #28
 80197be:	d52e      	bpl.n	801981e <__swbuf_r+0x82>
 80197c0:	6923      	ldr	r3, [r4, #16]
 80197c2:	b363      	cbz	r3, 801981e <__swbuf_r+0x82>
 80197c4:	6923      	ldr	r3, [r4, #16]
 80197c6:	6820      	ldr	r0, [r4, #0]
 80197c8:	1ac0      	subs	r0, r0, r3
 80197ca:	6963      	ldr	r3, [r4, #20]
 80197cc:	b2f6      	uxtb	r6, r6
 80197ce:	4283      	cmp	r3, r0
 80197d0:	4637      	mov	r7, r6
 80197d2:	dc04      	bgt.n	80197de <__swbuf_r+0x42>
 80197d4:	4621      	mov	r1, r4
 80197d6:	4628      	mov	r0, r5
 80197d8:	f000 f926 	bl	8019a28 <_fflush_r>
 80197dc:	bb28      	cbnz	r0, 801982a <__swbuf_r+0x8e>
 80197de:	68a3      	ldr	r3, [r4, #8]
 80197e0:	3b01      	subs	r3, #1
 80197e2:	60a3      	str	r3, [r4, #8]
 80197e4:	6823      	ldr	r3, [r4, #0]
 80197e6:	1c5a      	adds	r2, r3, #1
 80197e8:	6022      	str	r2, [r4, #0]
 80197ea:	701e      	strb	r6, [r3, #0]
 80197ec:	6963      	ldr	r3, [r4, #20]
 80197ee:	3001      	adds	r0, #1
 80197f0:	4283      	cmp	r3, r0
 80197f2:	d004      	beq.n	80197fe <__swbuf_r+0x62>
 80197f4:	89a3      	ldrh	r3, [r4, #12]
 80197f6:	07db      	lsls	r3, r3, #31
 80197f8:	d519      	bpl.n	801982e <__swbuf_r+0x92>
 80197fa:	2e0a      	cmp	r6, #10
 80197fc:	d117      	bne.n	801982e <__swbuf_r+0x92>
 80197fe:	4621      	mov	r1, r4
 8019800:	4628      	mov	r0, r5
 8019802:	f000 f911 	bl	8019a28 <_fflush_r>
 8019806:	b190      	cbz	r0, 801982e <__swbuf_r+0x92>
 8019808:	e00f      	b.n	801982a <__swbuf_r+0x8e>
 801980a:	4b0b      	ldr	r3, [pc, #44]	; (8019838 <__swbuf_r+0x9c>)
 801980c:	429c      	cmp	r4, r3
 801980e:	d101      	bne.n	8019814 <__swbuf_r+0x78>
 8019810:	68ac      	ldr	r4, [r5, #8]
 8019812:	e7d0      	b.n	80197b6 <__swbuf_r+0x1a>
 8019814:	4b09      	ldr	r3, [pc, #36]	; (801983c <__swbuf_r+0xa0>)
 8019816:	429c      	cmp	r4, r3
 8019818:	bf08      	it	eq
 801981a:	68ec      	ldreq	r4, [r5, #12]
 801981c:	e7cb      	b.n	80197b6 <__swbuf_r+0x1a>
 801981e:	4621      	mov	r1, r4
 8019820:	4628      	mov	r0, r5
 8019822:	f000 f80d 	bl	8019840 <__swsetup_r>
 8019826:	2800      	cmp	r0, #0
 8019828:	d0cc      	beq.n	80197c4 <__swbuf_r+0x28>
 801982a:	f04f 37ff 	mov.w	r7, #4294967295
 801982e:	4638      	mov	r0, r7
 8019830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019832:	bf00      	nop
 8019834:	0801b030 	.word	0x0801b030
 8019838:	0801b050 	.word	0x0801b050
 801983c:	0801b010 	.word	0x0801b010

08019840 <__swsetup_r>:
 8019840:	4b32      	ldr	r3, [pc, #200]	; (801990c <__swsetup_r+0xcc>)
 8019842:	b570      	push	{r4, r5, r6, lr}
 8019844:	681d      	ldr	r5, [r3, #0]
 8019846:	4606      	mov	r6, r0
 8019848:	460c      	mov	r4, r1
 801984a:	b125      	cbz	r5, 8019856 <__swsetup_r+0x16>
 801984c:	69ab      	ldr	r3, [r5, #24]
 801984e:	b913      	cbnz	r3, 8019856 <__swsetup_r+0x16>
 8019850:	4628      	mov	r0, r5
 8019852:	f000 f953 	bl	8019afc <__sinit>
 8019856:	4b2e      	ldr	r3, [pc, #184]	; (8019910 <__swsetup_r+0xd0>)
 8019858:	429c      	cmp	r4, r3
 801985a:	d10f      	bne.n	801987c <__swsetup_r+0x3c>
 801985c:	686c      	ldr	r4, [r5, #4]
 801985e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019862:	b29a      	uxth	r2, r3
 8019864:	0715      	lsls	r5, r2, #28
 8019866:	d42c      	bmi.n	80198c2 <__swsetup_r+0x82>
 8019868:	06d0      	lsls	r0, r2, #27
 801986a:	d411      	bmi.n	8019890 <__swsetup_r+0x50>
 801986c:	2209      	movs	r2, #9
 801986e:	6032      	str	r2, [r6, #0]
 8019870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019874:	81a3      	strh	r3, [r4, #12]
 8019876:	f04f 30ff 	mov.w	r0, #4294967295
 801987a:	e03e      	b.n	80198fa <__swsetup_r+0xba>
 801987c:	4b25      	ldr	r3, [pc, #148]	; (8019914 <__swsetup_r+0xd4>)
 801987e:	429c      	cmp	r4, r3
 8019880:	d101      	bne.n	8019886 <__swsetup_r+0x46>
 8019882:	68ac      	ldr	r4, [r5, #8]
 8019884:	e7eb      	b.n	801985e <__swsetup_r+0x1e>
 8019886:	4b24      	ldr	r3, [pc, #144]	; (8019918 <__swsetup_r+0xd8>)
 8019888:	429c      	cmp	r4, r3
 801988a:	bf08      	it	eq
 801988c:	68ec      	ldreq	r4, [r5, #12]
 801988e:	e7e6      	b.n	801985e <__swsetup_r+0x1e>
 8019890:	0751      	lsls	r1, r2, #29
 8019892:	d512      	bpl.n	80198ba <__swsetup_r+0x7a>
 8019894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019896:	b141      	cbz	r1, 80198aa <__swsetup_r+0x6a>
 8019898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801989c:	4299      	cmp	r1, r3
 801989e:	d002      	beq.n	80198a6 <__swsetup_r+0x66>
 80198a0:	4630      	mov	r0, r6
 80198a2:	f7ff fdeb 	bl	801947c <_free_r>
 80198a6:	2300      	movs	r3, #0
 80198a8:	6363      	str	r3, [r4, #52]	; 0x34
 80198aa:	89a3      	ldrh	r3, [r4, #12]
 80198ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80198b0:	81a3      	strh	r3, [r4, #12]
 80198b2:	2300      	movs	r3, #0
 80198b4:	6063      	str	r3, [r4, #4]
 80198b6:	6923      	ldr	r3, [r4, #16]
 80198b8:	6023      	str	r3, [r4, #0]
 80198ba:	89a3      	ldrh	r3, [r4, #12]
 80198bc:	f043 0308 	orr.w	r3, r3, #8
 80198c0:	81a3      	strh	r3, [r4, #12]
 80198c2:	6923      	ldr	r3, [r4, #16]
 80198c4:	b94b      	cbnz	r3, 80198da <__swsetup_r+0x9a>
 80198c6:	89a3      	ldrh	r3, [r4, #12]
 80198c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80198cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80198d0:	d003      	beq.n	80198da <__swsetup_r+0x9a>
 80198d2:	4621      	mov	r1, r4
 80198d4:	4630      	mov	r0, r6
 80198d6:	f000 f9bf 	bl	8019c58 <__smakebuf_r>
 80198da:	89a2      	ldrh	r2, [r4, #12]
 80198dc:	f012 0301 	ands.w	r3, r2, #1
 80198e0:	d00c      	beq.n	80198fc <__swsetup_r+0xbc>
 80198e2:	2300      	movs	r3, #0
 80198e4:	60a3      	str	r3, [r4, #8]
 80198e6:	6963      	ldr	r3, [r4, #20]
 80198e8:	425b      	negs	r3, r3
 80198ea:	61a3      	str	r3, [r4, #24]
 80198ec:	6923      	ldr	r3, [r4, #16]
 80198ee:	b953      	cbnz	r3, 8019906 <__swsetup_r+0xc6>
 80198f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80198f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80198f8:	d1ba      	bne.n	8019870 <__swsetup_r+0x30>
 80198fa:	bd70      	pop	{r4, r5, r6, pc}
 80198fc:	0792      	lsls	r2, r2, #30
 80198fe:	bf58      	it	pl
 8019900:	6963      	ldrpl	r3, [r4, #20]
 8019902:	60a3      	str	r3, [r4, #8]
 8019904:	e7f2      	b.n	80198ec <__swsetup_r+0xac>
 8019906:	2000      	movs	r0, #0
 8019908:	e7f7      	b.n	80198fa <__swsetup_r+0xba>
 801990a:	bf00      	nop
 801990c:	24000178 	.word	0x24000178
 8019910:	0801b030 	.word	0x0801b030
 8019914:	0801b050 	.word	0x0801b050
 8019918:	0801b010 	.word	0x0801b010

0801991c <__sflush_r>:
 801991c:	898a      	ldrh	r2, [r1, #12]
 801991e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019922:	4605      	mov	r5, r0
 8019924:	0710      	lsls	r0, r2, #28
 8019926:	460c      	mov	r4, r1
 8019928:	d458      	bmi.n	80199dc <__sflush_r+0xc0>
 801992a:	684b      	ldr	r3, [r1, #4]
 801992c:	2b00      	cmp	r3, #0
 801992e:	dc05      	bgt.n	801993c <__sflush_r+0x20>
 8019930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019932:	2b00      	cmp	r3, #0
 8019934:	dc02      	bgt.n	801993c <__sflush_r+0x20>
 8019936:	2000      	movs	r0, #0
 8019938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801993c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801993e:	2e00      	cmp	r6, #0
 8019940:	d0f9      	beq.n	8019936 <__sflush_r+0x1a>
 8019942:	2300      	movs	r3, #0
 8019944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019948:	682f      	ldr	r7, [r5, #0]
 801994a:	6a21      	ldr	r1, [r4, #32]
 801994c:	602b      	str	r3, [r5, #0]
 801994e:	d032      	beq.n	80199b6 <__sflush_r+0x9a>
 8019950:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019952:	89a3      	ldrh	r3, [r4, #12]
 8019954:	075a      	lsls	r2, r3, #29
 8019956:	d505      	bpl.n	8019964 <__sflush_r+0x48>
 8019958:	6863      	ldr	r3, [r4, #4]
 801995a:	1ac0      	subs	r0, r0, r3
 801995c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801995e:	b10b      	cbz	r3, 8019964 <__sflush_r+0x48>
 8019960:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019962:	1ac0      	subs	r0, r0, r3
 8019964:	2300      	movs	r3, #0
 8019966:	4602      	mov	r2, r0
 8019968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801996a:	6a21      	ldr	r1, [r4, #32]
 801996c:	4628      	mov	r0, r5
 801996e:	47b0      	blx	r6
 8019970:	1c43      	adds	r3, r0, #1
 8019972:	89a3      	ldrh	r3, [r4, #12]
 8019974:	d106      	bne.n	8019984 <__sflush_r+0x68>
 8019976:	6829      	ldr	r1, [r5, #0]
 8019978:	291d      	cmp	r1, #29
 801997a:	d848      	bhi.n	8019a0e <__sflush_r+0xf2>
 801997c:	4a29      	ldr	r2, [pc, #164]	; (8019a24 <__sflush_r+0x108>)
 801997e:	40ca      	lsrs	r2, r1
 8019980:	07d6      	lsls	r6, r2, #31
 8019982:	d544      	bpl.n	8019a0e <__sflush_r+0xf2>
 8019984:	2200      	movs	r2, #0
 8019986:	6062      	str	r2, [r4, #4]
 8019988:	04d9      	lsls	r1, r3, #19
 801998a:	6922      	ldr	r2, [r4, #16]
 801998c:	6022      	str	r2, [r4, #0]
 801998e:	d504      	bpl.n	801999a <__sflush_r+0x7e>
 8019990:	1c42      	adds	r2, r0, #1
 8019992:	d101      	bne.n	8019998 <__sflush_r+0x7c>
 8019994:	682b      	ldr	r3, [r5, #0]
 8019996:	b903      	cbnz	r3, 801999a <__sflush_r+0x7e>
 8019998:	6560      	str	r0, [r4, #84]	; 0x54
 801999a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801999c:	602f      	str	r7, [r5, #0]
 801999e:	2900      	cmp	r1, #0
 80199a0:	d0c9      	beq.n	8019936 <__sflush_r+0x1a>
 80199a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80199a6:	4299      	cmp	r1, r3
 80199a8:	d002      	beq.n	80199b0 <__sflush_r+0x94>
 80199aa:	4628      	mov	r0, r5
 80199ac:	f7ff fd66 	bl	801947c <_free_r>
 80199b0:	2000      	movs	r0, #0
 80199b2:	6360      	str	r0, [r4, #52]	; 0x34
 80199b4:	e7c0      	b.n	8019938 <__sflush_r+0x1c>
 80199b6:	2301      	movs	r3, #1
 80199b8:	4628      	mov	r0, r5
 80199ba:	47b0      	blx	r6
 80199bc:	1c41      	adds	r1, r0, #1
 80199be:	d1c8      	bne.n	8019952 <__sflush_r+0x36>
 80199c0:	682b      	ldr	r3, [r5, #0]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d0c5      	beq.n	8019952 <__sflush_r+0x36>
 80199c6:	2b1d      	cmp	r3, #29
 80199c8:	d001      	beq.n	80199ce <__sflush_r+0xb2>
 80199ca:	2b16      	cmp	r3, #22
 80199cc:	d101      	bne.n	80199d2 <__sflush_r+0xb6>
 80199ce:	602f      	str	r7, [r5, #0]
 80199d0:	e7b1      	b.n	8019936 <__sflush_r+0x1a>
 80199d2:	89a3      	ldrh	r3, [r4, #12]
 80199d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199d8:	81a3      	strh	r3, [r4, #12]
 80199da:	e7ad      	b.n	8019938 <__sflush_r+0x1c>
 80199dc:	690f      	ldr	r7, [r1, #16]
 80199de:	2f00      	cmp	r7, #0
 80199e0:	d0a9      	beq.n	8019936 <__sflush_r+0x1a>
 80199e2:	0793      	lsls	r3, r2, #30
 80199e4:	680e      	ldr	r6, [r1, #0]
 80199e6:	bf08      	it	eq
 80199e8:	694b      	ldreq	r3, [r1, #20]
 80199ea:	600f      	str	r7, [r1, #0]
 80199ec:	bf18      	it	ne
 80199ee:	2300      	movne	r3, #0
 80199f0:	eba6 0807 	sub.w	r8, r6, r7
 80199f4:	608b      	str	r3, [r1, #8]
 80199f6:	f1b8 0f00 	cmp.w	r8, #0
 80199fa:	dd9c      	ble.n	8019936 <__sflush_r+0x1a>
 80199fc:	4643      	mov	r3, r8
 80199fe:	463a      	mov	r2, r7
 8019a00:	6a21      	ldr	r1, [r4, #32]
 8019a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019a04:	4628      	mov	r0, r5
 8019a06:	47b0      	blx	r6
 8019a08:	2800      	cmp	r0, #0
 8019a0a:	dc06      	bgt.n	8019a1a <__sflush_r+0xfe>
 8019a0c:	89a3      	ldrh	r3, [r4, #12]
 8019a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a12:	81a3      	strh	r3, [r4, #12]
 8019a14:	f04f 30ff 	mov.w	r0, #4294967295
 8019a18:	e78e      	b.n	8019938 <__sflush_r+0x1c>
 8019a1a:	4407      	add	r7, r0
 8019a1c:	eba8 0800 	sub.w	r8, r8, r0
 8019a20:	e7e9      	b.n	80199f6 <__sflush_r+0xda>
 8019a22:	bf00      	nop
 8019a24:	20400001 	.word	0x20400001

08019a28 <_fflush_r>:
 8019a28:	b538      	push	{r3, r4, r5, lr}
 8019a2a:	690b      	ldr	r3, [r1, #16]
 8019a2c:	4605      	mov	r5, r0
 8019a2e:	460c      	mov	r4, r1
 8019a30:	b1db      	cbz	r3, 8019a6a <_fflush_r+0x42>
 8019a32:	b118      	cbz	r0, 8019a3c <_fflush_r+0x14>
 8019a34:	6983      	ldr	r3, [r0, #24]
 8019a36:	b90b      	cbnz	r3, 8019a3c <_fflush_r+0x14>
 8019a38:	f000 f860 	bl	8019afc <__sinit>
 8019a3c:	4b0c      	ldr	r3, [pc, #48]	; (8019a70 <_fflush_r+0x48>)
 8019a3e:	429c      	cmp	r4, r3
 8019a40:	d109      	bne.n	8019a56 <_fflush_r+0x2e>
 8019a42:	686c      	ldr	r4, [r5, #4]
 8019a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a48:	b17b      	cbz	r3, 8019a6a <_fflush_r+0x42>
 8019a4a:	4621      	mov	r1, r4
 8019a4c:	4628      	mov	r0, r5
 8019a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a52:	f7ff bf63 	b.w	801991c <__sflush_r>
 8019a56:	4b07      	ldr	r3, [pc, #28]	; (8019a74 <_fflush_r+0x4c>)
 8019a58:	429c      	cmp	r4, r3
 8019a5a:	d101      	bne.n	8019a60 <_fflush_r+0x38>
 8019a5c:	68ac      	ldr	r4, [r5, #8]
 8019a5e:	e7f1      	b.n	8019a44 <_fflush_r+0x1c>
 8019a60:	4b05      	ldr	r3, [pc, #20]	; (8019a78 <_fflush_r+0x50>)
 8019a62:	429c      	cmp	r4, r3
 8019a64:	bf08      	it	eq
 8019a66:	68ec      	ldreq	r4, [r5, #12]
 8019a68:	e7ec      	b.n	8019a44 <_fflush_r+0x1c>
 8019a6a:	2000      	movs	r0, #0
 8019a6c:	bd38      	pop	{r3, r4, r5, pc}
 8019a6e:	bf00      	nop
 8019a70:	0801b030 	.word	0x0801b030
 8019a74:	0801b050 	.word	0x0801b050
 8019a78:	0801b010 	.word	0x0801b010

08019a7c <std>:
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	b510      	push	{r4, lr}
 8019a80:	4604      	mov	r4, r0
 8019a82:	e9c0 3300 	strd	r3, r3, [r0]
 8019a86:	6083      	str	r3, [r0, #8]
 8019a88:	8181      	strh	r1, [r0, #12]
 8019a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8019a8c:	81c2      	strh	r2, [r0, #14]
 8019a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019a92:	6183      	str	r3, [r0, #24]
 8019a94:	4619      	mov	r1, r3
 8019a96:	2208      	movs	r2, #8
 8019a98:	305c      	adds	r0, #92	; 0x5c
 8019a9a:	f7ff fce6 	bl	801946a <memset>
 8019a9e:	4b05      	ldr	r3, [pc, #20]	; (8019ab4 <std+0x38>)
 8019aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8019aa2:	4b05      	ldr	r3, [pc, #20]	; (8019ab8 <std+0x3c>)
 8019aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8019aa6:	4b05      	ldr	r3, [pc, #20]	; (8019abc <std+0x40>)
 8019aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019aaa:	4b05      	ldr	r3, [pc, #20]	; (8019ac0 <std+0x44>)
 8019aac:	6224      	str	r4, [r4, #32]
 8019aae:	6323      	str	r3, [r4, #48]	; 0x30
 8019ab0:	bd10      	pop	{r4, pc}
 8019ab2:	bf00      	nop
 8019ab4:	0801a511 	.word	0x0801a511
 8019ab8:	0801a533 	.word	0x0801a533
 8019abc:	0801a56b 	.word	0x0801a56b
 8019ac0:	0801a58f 	.word	0x0801a58f

08019ac4 <_cleanup_r>:
 8019ac4:	4901      	ldr	r1, [pc, #4]	; (8019acc <_cleanup_r+0x8>)
 8019ac6:	f000 b885 	b.w	8019bd4 <_fwalk_reent>
 8019aca:	bf00      	nop
 8019acc:	08019a29 	.word	0x08019a29

08019ad0 <__sfmoreglue>:
 8019ad0:	b570      	push	{r4, r5, r6, lr}
 8019ad2:	1e4a      	subs	r2, r1, #1
 8019ad4:	2568      	movs	r5, #104	; 0x68
 8019ad6:	4355      	muls	r5, r2
 8019ad8:	460e      	mov	r6, r1
 8019ada:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019ade:	f7ff fd1b 	bl	8019518 <_malloc_r>
 8019ae2:	4604      	mov	r4, r0
 8019ae4:	b140      	cbz	r0, 8019af8 <__sfmoreglue+0x28>
 8019ae6:	2100      	movs	r1, #0
 8019ae8:	e9c0 1600 	strd	r1, r6, [r0]
 8019aec:	300c      	adds	r0, #12
 8019aee:	60a0      	str	r0, [r4, #8]
 8019af0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019af4:	f7ff fcb9 	bl	801946a <memset>
 8019af8:	4620      	mov	r0, r4
 8019afa:	bd70      	pop	{r4, r5, r6, pc}

08019afc <__sinit>:
 8019afc:	6983      	ldr	r3, [r0, #24]
 8019afe:	b510      	push	{r4, lr}
 8019b00:	4604      	mov	r4, r0
 8019b02:	bb33      	cbnz	r3, 8019b52 <__sinit+0x56>
 8019b04:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8019b08:	6503      	str	r3, [r0, #80]	; 0x50
 8019b0a:	4b12      	ldr	r3, [pc, #72]	; (8019b54 <__sinit+0x58>)
 8019b0c:	4a12      	ldr	r2, [pc, #72]	; (8019b58 <__sinit+0x5c>)
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	6282      	str	r2, [r0, #40]	; 0x28
 8019b12:	4298      	cmp	r0, r3
 8019b14:	bf04      	itt	eq
 8019b16:	2301      	moveq	r3, #1
 8019b18:	6183      	streq	r3, [r0, #24]
 8019b1a:	f000 f81f 	bl	8019b5c <__sfp>
 8019b1e:	6060      	str	r0, [r4, #4]
 8019b20:	4620      	mov	r0, r4
 8019b22:	f000 f81b 	bl	8019b5c <__sfp>
 8019b26:	60a0      	str	r0, [r4, #8]
 8019b28:	4620      	mov	r0, r4
 8019b2a:	f000 f817 	bl	8019b5c <__sfp>
 8019b2e:	2200      	movs	r2, #0
 8019b30:	60e0      	str	r0, [r4, #12]
 8019b32:	2104      	movs	r1, #4
 8019b34:	6860      	ldr	r0, [r4, #4]
 8019b36:	f7ff ffa1 	bl	8019a7c <std>
 8019b3a:	2201      	movs	r2, #1
 8019b3c:	2109      	movs	r1, #9
 8019b3e:	68a0      	ldr	r0, [r4, #8]
 8019b40:	f7ff ff9c 	bl	8019a7c <std>
 8019b44:	2202      	movs	r2, #2
 8019b46:	2112      	movs	r1, #18
 8019b48:	68e0      	ldr	r0, [r4, #12]
 8019b4a:	f7ff ff97 	bl	8019a7c <std>
 8019b4e:	2301      	movs	r3, #1
 8019b50:	61a3      	str	r3, [r4, #24]
 8019b52:	bd10      	pop	{r4, pc}
 8019b54:	0801b00c 	.word	0x0801b00c
 8019b58:	08019ac5 	.word	0x08019ac5

08019b5c <__sfp>:
 8019b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b5e:	4b1b      	ldr	r3, [pc, #108]	; (8019bcc <__sfp+0x70>)
 8019b60:	681e      	ldr	r6, [r3, #0]
 8019b62:	69b3      	ldr	r3, [r6, #24]
 8019b64:	4607      	mov	r7, r0
 8019b66:	b913      	cbnz	r3, 8019b6e <__sfp+0x12>
 8019b68:	4630      	mov	r0, r6
 8019b6a:	f7ff ffc7 	bl	8019afc <__sinit>
 8019b6e:	3648      	adds	r6, #72	; 0x48
 8019b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019b74:	3b01      	subs	r3, #1
 8019b76:	d503      	bpl.n	8019b80 <__sfp+0x24>
 8019b78:	6833      	ldr	r3, [r6, #0]
 8019b7a:	b133      	cbz	r3, 8019b8a <__sfp+0x2e>
 8019b7c:	6836      	ldr	r6, [r6, #0]
 8019b7e:	e7f7      	b.n	8019b70 <__sfp+0x14>
 8019b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019b84:	b16d      	cbz	r5, 8019ba2 <__sfp+0x46>
 8019b86:	3468      	adds	r4, #104	; 0x68
 8019b88:	e7f4      	b.n	8019b74 <__sfp+0x18>
 8019b8a:	2104      	movs	r1, #4
 8019b8c:	4638      	mov	r0, r7
 8019b8e:	f7ff ff9f 	bl	8019ad0 <__sfmoreglue>
 8019b92:	6030      	str	r0, [r6, #0]
 8019b94:	2800      	cmp	r0, #0
 8019b96:	d1f1      	bne.n	8019b7c <__sfp+0x20>
 8019b98:	230c      	movs	r3, #12
 8019b9a:	603b      	str	r3, [r7, #0]
 8019b9c:	4604      	mov	r4, r0
 8019b9e:	4620      	mov	r0, r4
 8019ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ba2:	4b0b      	ldr	r3, [pc, #44]	; (8019bd0 <__sfp+0x74>)
 8019ba4:	6665      	str	r5, [r4, #100]	; 0x64
 8019ba6:	e9c4 5500 	strd	r5, r5, [r4]
 8019baa:	60a5      	str	r5, [r4, #8]
 8019bac:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019bb0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8019bb4:	2208      	movs	r2, #8
 8019bb6:	4629      	mov	r1, r5
 8019bb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019bbc:	f7ff fc55 	bl	801946a <memset>
 8019bc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019bc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019bc8:	e7e9      	b.n	8019b9e <__sfp+0x42>
 8019bca:	bf00      	nop
 8019bcc:	0801b00c 	.word	0x0801b00c
 8019bd0:	ffff0001 	.word	0xffff0001

08019bd4 <_fwalk_reent>:
 8019bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bd8:	4680      	mov	r8, r0
 8019bda:	4689      	mov	r9, r1
 8019bdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019be0:	2600      	movs	r6, #0
 8019be2:	b914      	cbnz	r4, 8019bea <_fwalk_reent+0x16>
 8019be4:	4630      	mov	r0, r6
 8019be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bea:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8019bee:	3f01      	subs	r7, #1
 8019bf0:	d501      	bpl.n	8019bf6 <_fwalk_reent+0x22>
 8019bf2:	6824      	ldr	r4, [r4, #0]
 8019bf4:	e7f5      	b.n	8019be2 <_fwalk_reent+0xe>
 8019bf6:	89ab      	ldrh	r3, [r5, #12]
 8019bf8:	2b01      	cmp	r3, #1
 8019bfa:	d907      	bls.n	8019c0c <_fwalk_reent+0x38>
 8019bfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019c00:	3301      	adds	r3, #1
 8019c02:	d003      	beq.n	8019c0c <_fwalk_reent+0x38>
 8019c04:	4629      	mov	r1, r5
 8019c06:	4640      	mov	r0, r8
 8019c08:	47c8      	blx	r9
 8019c0a:	4306      	orrs	r6, r0
 8019c0c:	3568      	adds	r5, #104	; 0x68
 8019c0e:	e7ee      	b.n	8019bee <_fwalk_reent+0x1a>

08019c10 <__swhatbuf_r>:
 8019c10:	b570      	push	{r4, r5, r6, lr}
 8019c12:	460e      	mov	r6, r1
 8019c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c18:	2900      	cmp	r1, #0
 8019c1a:	b096      	sub	sp, #88	; 0x58
 8019c1c:	4614      	mov	r4, r2
 8019c1e:	461d      	mov	r5, r3
 8019c20:	da07      	bge.n	8019c32 <__swhatbuf_r+0x22>
 8019c22:	2300      	movs	r3, #0
 8019c24:	602b      	str	r3, [r5, #0]
 8019c26:	89b3      	ldrh	r3, [r6, #12]
 8019c28:	061a      	lsls	r2, r3, #24
 8019c2a:	d410      	bmi.n	8019c4e <__swhatbuf_r+0x3e>
 8019c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019c30:	e00e      	b.n	8019c50 <__swhatbuf_r+0x40>
 8019c32:	466a      	mov	r2, sp
 8019c34:	f000 fcd2 	bl	801a5dc <_fstat_r>
 8019c38:	2800      	cmp	r0, #0
 8019c3a:	dbf2      	blt.n	8019c22 <__swhatbuf_r+0x12>
 8019c3c:	9a01      	ldr	r2, [sp, #4]
 8019c3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019c42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019c46:	425a      	negs	r2, r3
 8019c48:	415a      	adcs	r2, r3
 8019c4a:	602a      	str	r2, [r5, #0]
 8019c4c:	e7ee      	b.n	8019c2c <__swhatbuf_r+0x1c>
 8019c4e:	2340      	movs	r3, #64	; 0x40
 8019c50:	2000      	movs	r0, #0
 8019c52:	6023      	str	r3, [r4, #0]
 8019c54:	b016      	add	sp, #88	; 0x58
 8019c56:	bd70      	pop	{r4, r5, r6, pc}

08019c58 <__smakebuf_r>:
 8019c58:	898b      	ldrh	r3, [r1, #12]
 8019c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c5c:	079d      	lsls	r5, r3, #30
 8019c5e:	4606      	mov	r6, r0
 8019c60:	460c      	mov	r4, r1
 8019c62:	d507      	bpl.n	8019c74 <__smakebuf_r+0x1c>
 8019c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019c68:	6023      	str	r3, [r4, #0]
 8019c6a:	6123      	str	r3, [r4, #16]
 8019c6c:	2301      	movs	r3, #1
 8019c6e:	6163      	str	r3, [r4, #20]
 8019c70:	b002      	add	sp, #8
 8019c72:	bd70      	pop	{r4, r5, r6, pc}
 8019c74:	ab01      	add	r3, sp, #4
 8019c76:	466a      	mov	r2, sp
 8019c78:	f7ff ffca 	bl	8019c10 <__swhatbuf_r>
 8019c7c:	9900      	ldr	r1, [sp, #0]
 8019c7e:	4605      	mov	r5, r0
 8019c80:	4630      	mov	r0, r6
 8019c82:	f7ff fc49 	bl	8019518 <_malloc_r>
 8019c86:	b948      	cbnz	r0, 8019c9c <__smakebuf_r+0x44>
 8019c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c8c:	059a      	lsls	r2, r3, #22
 8019c8e:	d4ef      	bmi.n	8019c70 <__smakebuf_r+0x18>
 8019c90:	f023 0303 	bic.w	r3, r3, #3
 8019c94:	f043 0302 	orr.w	r3, r3, #2
 8019c98:	81a3      	strh	r3, [r4, #12]
 8019c9a:	e7e3      	b.n	8019c64 <__smakebuf_r+0xc>
 8019c9c:	4b0d      	ldr	r3, [pc, #52]	; (8019cd4 <__smakebuf_r+0x7c>)
 8019c9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8019ca0:	89a3      	ldrh	r3, [r4, #12]
 8019ca2:	6020      	str	r0, [r4, #0]
 8019ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ca8:	81a3      	strh	r3, [r4, #12]
 8019caa:	9b00      	ldr	r3, [sp, #0]
 8019cac:	6163      	str	r3, [r4, #20]
 8019cae:	9b01      	ldr	r3, [sp, #4]
 8019cb0:	6120      	str	r0, [r4, #16]
 8019cb2:	b15b      	cbz	r3, 8019ccc <__smakebuf_r+0x74>
 8019cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019cb8:	4630      	mov	r0, r6
 8019cba:	f000 fca1 	bl	801a600 <_isatty_r>
 8019cbe:	b128      	cbz	r0, 8019ccc <__smakebuf_r+0x74>
 8019cc0:	89a3      	ldrh	r3, [r4, #12]
 8019cc2:	f023 0303 	bic.w	r3, r3, #3
 8019cc6:	f043 0301 	orr.w	r3, r3, #1
 8019cca:	81a3      	strh	r3, [r4, #12]
 8019ccc:	89a3      	ldrh	r3, [r4, #12]
 8019cce:	431d      	orrs	r5, r3
 8019cd0:	81a5      	strh	r5, [r4, #12]
 8019cd2:	e7cd      	b.n	8019c70 <__smakebuf_r+0x18>
 8019cd4:	08019ac5 	.word	0x08019ac5

08019cd8 <__malloc_lock>:
 8019cd8:	4770      	bx	lr

08019cda <__malloc_unlock>:
 8019cda:	4770      	bx	lr

08019cdc <__ssputs_r>:
 8019cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ce0:	688e      	ldr	r6, [r1, #8]
 8019ce2:	429e      	cmp	r6, r3
 8019ce4:	4682      	mov	sl, r0
 8019ce6:	460c      	mov	r4, r1
 8019ce8:	4690      	mov	r8, r2
 8019cea:	4699      	mov	r9, r3
 8019cec:	d837      	bhi.n	8019d5e <__ssputs_r+0x82>
 8019cee:	898a      	ldrh	r2, [r1, #12]
 8019cf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019cf4:	d031      	beq.n	8019d5a <__ssputs_r+0x7e>
 8019cf6:	6825      	ldr	r5, [r4, #0]
 8019cf8:	6909      	ldr	r1, [r1, #16]
 8019cfa:	1a6f      	subs	r7, r5, r1
 8019cfc:	6965      	ldr	r5, [r4, #20]
 8019cfe:	2302      	movs	r3, #2
 8019d00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d04:	fb95 f5f3 	sdiv	r5, r5, r3
 8019d08:	f109 0301 	add.w	r3, r9, #1
 8019d0c:	443b      	add	r3, r7
 8019d0e:	429d      	cmp	r5, r3
 8019d10:	bf38      	it	cc
 8019d12:	461d      	movcc	r5, r3
 8019d14:	0553      	lsls	r3, r2, #21
 8019d16:	d530      	bpl.n	8019d7a <__ssputs_r+0x9e>
 8019d18:	4629      	mov	r1, r5
 8019d1a:	f7ff fbfd 	bl	8019518 <_malloc_r>
 8019d1e:	4606      	mov	r6, r0
 8019d20:	b950      	cbnz	r0, 8019d38 <__ssputs_r+0x5c>
 8019d22:	230c      	movs	r3, #12
 8019d24:	f8ca 3000 	str.w	r3, [sl]
 8019d28:	89a3      	ldrh	r3, [r4, #12]
 8019d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d2e:	81a3      	strh	r3, [r4, #12]
 8019d30:	f04f 30ff 	mov.w	r0, #4294967295
 8019d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d38:	463a      	mov	r2, r7
 8019d3a:	6921      	ldr	r1, [r4, #16]
 8019d3c:	f7ff fb8a 	bl	8019454 <memcpy>
 8019d40:	89a3      	ldrh	r3, [r4, #12]
 8019d42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d4a:	81a3      	strh	r3, [r4, #12]
 8019d4c:	6126      	str	r6, [r4, #16]
 8019d4e:	6165      	str	r5, [r4, #20]
 8019d50:	443e      	add	r6, r7
 8019d52:	1bed      	subs	r5, r5, r7
 8019d54:	6026      	str	r6, [r4, #0]
 8019d56:	60a5      	str	r5, [r4, #8]
 8019d58:	464e      	mov	r6, r9
 8019d5a:	454e      	cmp	r6, r9
 8019d5c:	d900      	bls.n	8019d60 <__ssputs_r+0x84>
 8019d5e:	464e      	mov	r6, r9
 8019d60:	4632      	mov	r2, r6
 8019d62:	4641      	mov	r1, r8
 8019d64:	6820      	ldr	r0, [r4, #0]
 8019d66:	f000 fc6d 	bl	801a644 <memmove>
 8019d6a:	68a3      	ldr	r3, [r4, #8]
 8019d6c:	1b9b      	subs	r3, r3, r6
 8019d6e:	60a3      	str	r3, [r4, #8]
 8019d70:	6823      	ldr	r3, [r4, #0]
 8019d72:	441e      	add	r6, r3
 8019d74:	6026      	str	r6, [r4, #0]
 8019d76:	2000      	movs	r0, #0
 8019d78:	e7dc      	b.n	8019d34 <__ssputs_r+0x58>
 8019d7a:	462a      	mov	r2, r5
 8019d7c:	f000 fc7b 	bl	801a676 <_realloc_r>
 8019d80:	4606      	mov	r6, r0
 8019d82:	2800      	cmp	r0, #0
 8019d84:	d1e2      	bne.n	8019d4c <__ssputs_r+0x70>
 8019d86:	6921      	ldr	r1, [r4, #16]
 8019d88:	4650      	mov	r0, sl
 8019d8a:	f7ff fb77 	bl	801947c <_free_r>
 8019d8e:	e7c8      	b.n	8019d22 <__ssputs_r+0x46>

08019d90 <_svfiprintf_r>:
 8019d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d94:	461d      	mov	r5, r3
 8019d96:	898b      	ldrh	r3, [r1, #12]
 8019d98:	061f      	lsls	r7, r3, #24
 8019d9a:	b09d      	sub	sp, #116	; 0x74
 8019d9c:	4680      	mov	r8, r0
 8019d9e:	460c      	mov	r4, r1
 8019da0:	4616      	mov	r6, r2
 8019da2:	d50f      	bpl.n	8019dc4 <_svfiprintf_r+0x34>
 8019da4:	690b      	ldr	r3, [r1, #16]
 8019da6:	b96b      	cbnz	r3, 8019dc4 <_svfiprintf_r+0x34>
 8019da8:	2140      	movs	r1, #64	; 0x40
 8019daa:	f7ff fbb5 	bl	8019518 <_malloc_r>
 8019dae:	6020      	str	r0, [r4, #0]
 8019db0:	6120      	str	r0, [r4, #16]
 8019db2:	b928      	cbnz	r0, 8019dc0 <_svfiprintf_r+0x30>
 8019db4:	230c      	movs	r3, #12
 8019db6:	f8c8 3000 	str.w	r3, [r8]
 8019dba:	f04f 30ff 	mov.w	r0, #4294967295
 8019dbe:	e0c8      	b.n	8019f52 <_svfiprintf_r+0x1c2>
 8019dc0:	2340      	movs	r3, #64	; 0x40
 8019dc2:	6163      	str	r3, [r4, #20]
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8019dc8:	2320      	movs	r3, #32
 8019dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019dce:	2330      	movs	r3, #48	; 0x30
 8019dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019dd4:	9503      	str	r5, [sp, #12]
 8019dd6:	f04f 0b01 	mov.w	fp, #1
 8019dda:	4637      	mov	r7, r6
 8019ddc:	463d      	mov	r5, r7
 8019dde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019de2:	b10b      	cbz	r3, 8019de8 <_svfiprintf_r+0x58>
 8019de4:	2b25      	cmp	r3, #37	; 0x25
 8019de6:	d13e      	bne.n	8019e66 <_svfiprintf_r+0xd6>
 8019de8:	ebb7 0a06 	subs.w	sl, r7, r6
 8019dec:	d00b      	beq.n	8019e06 <_svfiprintf_r+0x76>
 8019dee:	4653      	mov	r3, sl
 8019df0:	4632      	mov	r2, r6
 8019df2:	4621      	mov	r1, r4
 8019df4:	4640      	mov	r0, r8
 8019df6:	f7ff ff71 	bl	8019cdc <__ssputs_r>
 8019dfa:	3001      	adds	r0, #1
 8019dfc:	f000 80a4 	beq.w	8019f48 <_svfiprintf_r+0x1b8>
 8019e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e02:	4453      	add	r3, sl
 8019e04:	9309      	str	r3, [sp, #36]	; 0x24
 8019e06:	783b      	ldrb	r3, [r7, #0]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	f000 809d 	beq.w	8019f48 <_svfiprintf_r+0x1b8>
 8019e0e:	2300      	movs	r3, #0
 8019e10:	f04f 32ff 	mov.w	r2, #4294967295
 8019e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e18:	9304      	str	r3, [sp, #16]
 8019e1a:	9307      	str	r3, [sp, #28]
 8019e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e20:	931a      	str	r3, [sp, #104]	; 0x68
 8019e22:	462f      	mov	r7, r5
 8019e24:	2205      	movs	r2, #5
 8019e26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019e2a:	4850      	ldr	r0, [pc, #320]	; (8019f6c <_svfiprintf_r+0x1dc>)
 8019e2c:	f7e6 fa60 	bl	80002f0 <memchr>
 8019e30:	9b04      	ldr	r3, [sp, #16]
 8019e32:	b9d0      	cbnz	r0, 8019e6a <_svfiprintf_r+0xda>
 8019e34:	06d9      	lsls	r1, r3, #27
 8019e36:	bf44      	itt	mi
 8019e38:	2220      	movmi	r2, #32
 8019e3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019e3e:	071a      	lsls	r2, r3, #28
 8019e40:	bf44      	itt	mi
 8019e42:	222b      	movmi	r2, #43	; 0x2b
 8019e44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019e48:	782a      	ldrb	r2, [r5, #0]
 8019e4a:	2a2a      	cmp	r2, #42	; 0x2a
 8019e4c:	d015      	beq.n	8019e7a <_svfiprintf_r+0xea>
 8019e4e:	9a07      	ldr	r2, [sp, #28]
 8019e50:	462f      	mov	r7, r5
 8019e52:	2000      	movs	r0, #0
 8019e54:	250a      	movs	r5, #10
 8019e56:	4639      	mov	r1, r7
 8019e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019e5c:	3b30      	subs	r3, #48	; 0x30
 8019e5e:	2b09      	cmp	r3, #9
 8019e60:	d94d      	bls.n	8019efe <_svfiprintf_r+0x16e>
 8019e62:	b1b8      	cbz	r0, 8019e94 <_svfiprintf_r+0x104>
 8019e64:	e00f      	b.n	8019e86 <_svfiprintf_r+0xf6>
 8019e66:	462f      	mov	r7, r5
 8019e68:	e7b8      	b.n	8019ddc <_svfiprintf_r+0x4c>
 8019e6a:	4a40      	ldr	r2, [pc, #256]	; (8019f6c <_svfiprintf_r+0x1dc>)
 8019e6c:	1a80      	subs	r0, r0, r2
 8019e6e:	fa0b f000 	lsl.w	r0, fp, r0
 8019e72:	4318      	orrs	r0, r3
 8019e74:	9004      	str	r0, [sp, #16]
 8019e76:	463d      	mov	r5, r7
 8019e78:	e7d3      	b.n	8019e22 <_svfiprintf_r+0x92>
 8019e7a:	9a03      	ldr	r2, [sp, #12]
 8019e7c:	1d11      	adds	r1, r2, #4
 8019e7e:	6812      	ldr	r2, [r2, #0]
 8019e80:	9103      	str	r1, [sp, #12]
 8019e82:	2a00      	cmp	r2, #0
 8019e84:	db01      	blt.n	8019e8a <_svfiprintf_r+0xfa>
 8019e86:	9207      	str	r2, [sp, #28]
 8019e88:	e004      	b.n	8019e94 <_svfiprintf_r+0x104>
 8019e8a:	4252      	negs	r2, r2
 8019e8c:	f043 0302 	orr.w	r3, r3, #2
 8019e90:	9207      	str	r2, [sp, #28]
 8019e92:	9304      	str	r3, [sp, #16]
 8019e94:	783b      	ldrb	r3, [r7, #0]
 8019e96:	2b2e      	cmp	r3, #46	; 0x2e
 8019e98:	d10c      	bne.n	8019eb4 <_svfiprintf_r+0x124>
 8019e9a:	787b      	ldrb	r3, [r7, #1]
 8019e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8019e9e:	d133      	bne.n	8019f08 <_svfiprintf_r+0x178>
 8019ea0:	9b03      	ldr	r3, [sp, #12]
 8019ea2:	1d1a      	adds	r2, r3, #4
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	9203      	str	r2, [sp, #12]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	bfb8      	it	lt
 8019eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8019eb0:	3702      	adds	r7, #2
 8019eb2:	9305      	str	r3, [sp, #20]
 8019eb4:	4d2e      	ldr	r5, [pc, #184]	; (8019f70 <_svfiprintf_r+0x1e0>)
 8019eb6:	7839      	ldrb	r1, [r7, #0]
 8019eb8:	2203      	movs	r2, #3
 8019eba:	4628      	mov	r0, r5
 8019ebc:	f7e6 fa18 	bl	80002f0 <memchr>
 8019ec0:	b138      	cbz	r0, 8019ed2 <_svfiprintf_r+0x142>
 8019ec2:	2340      	movs	r3, #64	; 0x40
 8019ec4:	1b40      	subs	r0, r0, r5
 8019ec6:	fa03 f000 	lsl.w	r0, r3, r0
 8019eca:	9b04      	ldr	r3, [sp, #16]
 8019ecc:	4303      	orrs	r3, r0
 8019ece:	3701      	adds	r7, #1
 8019ed0:	9304      	str	r3, [sp, #16]
 8019ed2:	7839      	ldrb	r1, [r7, #0]
 8019ed4:	4827      	ldr	r0, [pc, #156]	; (8019f74 <_svfiprintf_r+0x1e4>)
 8019ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019eda:	2206      	movs	r2, #6
 8019edc:	1c7e      	adds	r6, r7, #1
 8019ede:	f7e6 fa07 	bl	80002f0 <memchr>
 8019ee2:	2800      	cmp	r0, #0
 8019ee4:	d038      	beq.n	8019f58 <_svfiprintf_r+0x1c8>
 8019ee6:	4b24      	ldr	r3, [pc, #144]	; (8019f78 <_svfiprintf_r+0x1e8>)
 8019ee8:	bb13      	cbnz	r3, 8019f30 <_svfiprintf_r+0x1a0>
 8019eea:	9b03      	ldr	r3, [sp, #12]
 8019eec:	3307      	adds	r3, #7
 8019eee:	f023 0307 	bic.w	r3, r3, #7
 8019ef2:	3308      	adds	r3, #8
 8019ef4:	9303      	str	r3, [sp, #12]
 8019ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ef8:	444b      	add	r3, r9
 8019efa:	9309      	str	r3, [sp, #36]	; 0x24
 8019efc:	e76d      	b.n	8019dda <_svfiprintf_r+0x4a>
 8019efe:	fb05 3202 	mla	r2, r5, r2, r3
 8019f02:	2001      	movs	r0, #1
 8019f04:	460f      	mov	r7, r1
 8019f06:	e7a6      	b.n	8019e56 <_svfiprintf_r+0xc6>
 8019f08:	2300      	movs	r3, #0
 8019f0a:	3701      	adds	r7, #1
 8019f0c:	9305      	str	r3, [sp, #20]
 8019f0e:	4619      	mov	r1, r3
 8019f10:	250a      	movs	r5, #10
 8019f12:	4638      	mov	r0, r7
 8019f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f18:	3a30      	subs	r2, #48	; 0x30
 8019f1a:	2a09      	cmp	r2, #9
 8019f1c:	d903      	bls.n	8019f26 <_svfiprintf_r+0x196>
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d0c8      	beq.n	8019eb4 <_svfiprintf_r+0x124>
 8019f22:	9105      	str	r1, [sp, #20]
 8019f24:	e7c6      	b.n	8019eb4 <_svfiprintf_r+0x124>
 8019f26:	fb05 2101 	mla	r1, r5, r1, r2
 8019f2a:	2301      	movs	r3, #1
 8019f2c:	4607      	mov	r7, r0
 8019f2e:	e7f0      	b.n	8019f12 <_svfiprintf_r+0x182>
 8019f30:	ab03      	add	r3, sp, #12
 8019f32:	9300      	str	r3, [sp, #0]
 8019f34:	4622      	mov	r2, r4
 8019f36:	4b11      	ldr	r3, [pc, #68]	; (8019f7c <_svfiprintf_r+0x1ec>)
 8019f38:	a904      	add	r1, sp, #16
 8019f3a:	4640      	mov	r0, r8
 8019f3c:	f3af 8000 	nop.w
 8019f40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019f44:	4681      	mov	r9, r0
 8019f46:	d1d6      	bne.n	8019ef6 <_svfiprintf_r+0x166>
 8019f48:	89a3      	ldrh	r3, [r4, #12]
 8019f4a:	065b      	lsls	r3, r3, #25
 8019f4c:	f53f af35 	bmi.w	8019dba <_svfiprintf_r+0x2a>
 8019f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019f52:	b01d      	add	sp, #116	; 0x74
 8019f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f58:	ab03      	add	r3, sp, #12
 8019f5a:	9300      	str	r3, [sp, #0]
 8019f5c:	4622      	mov	r2, r4
 8019f5e:	4b07      	ldr	r3, [pc, #28]	; (8019f7c <_svfiprintf_r+0x1ec>)
 8019f60:	a904      	add	r1, sp, #16
 8019f62:	4640      	mov	r0, r8
 8019f64:	f000 f9c2 	bl	801a2ec <_printf_i>
 8019f68:	e7ea      	b.n	8019f40 <_svfiprintf_r+0x1b0>
 8019f6a:	bf00      	nop
 8019f6c:	0801b070 	.word	0x0801b070
 8019f70:	0801b076 	.word	0x0801b076
 8019f74:	0801b07a 	.word	0x0801b07a
 8019f78:	00000000 	.word	0x00000000
 8019f7c:	08019cdd 	.word	0x08019cdd

08019f80 <__sfputc_r>:
 8019f80:	6893      	ldr	r3, [r2, #8]
 8019f82:	3b01      	subs	r3, #1
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	b410      	push	{r4}
 8019f88:	6093      	str	r3, [r2, #8]
 8019f8a:	da08      	bge.n	8019f9e <__sfputc_r+0x1e>
 8019f8c:	6994      	ldr	r4, [r2, #24]
 8019f8e:	42a3      	cmp	r3, r4
 8019f90:	db01      	blt.n	8019f96 <__sfputc_r+0x16>
 8019f92:	290a      	cmp	r1, #10
 8019f94:	d103      	bne.n	8019f9e <__sfputc_r+0x1e>
 8019f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f9a:	f7ff bbff 	b.w	801979c <__swbuf_r>
 8019f9e:	6813      	ldr	r3, [r2, #0]
 8019fa0:	1c58      	adds	r0, r3, #1
 8019fa2:	6010      	str	r0, [r2, #0]
 8019fa4:	7019      	strb	r1, [r3, #0]
 8019fa6:	4608      	mov	r0, r1
 8019fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fac:	4770      	bx	lr

08019fae <__sfputs_r>:
 8019fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fb0:	4606      	mov	r6, r0
 8019fb2:	460f      	mov	r7, r1
 8019fb4:	4614      	mov	r4, r2
 8019fb6:	18d5      	adds	r5, r2, r3
 8019fb8:	42ac      	cmp	r4, r5
 8019fba:	d101      	bne.n	8019fc0 <__sfputs_r+0x12>
 8019fbc:	2000      	movs	r0, #0
 8019fbe:	e007      	b.n	8019fd0 <__sfputs_r+0x22>
 8019fc0:	463a      	mov	r2, r7
 8019fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fc6:	4630      	mov	r0, r6
 8019fc8:	f7ff ffda 	bl	8019f80 <__sfputc_r>
 8019fcc:	1c43      	adds	r3, r0, #1
 8019fce:	d1f3      	bne.n	8019fb8 <__sfputs_r+0xa>
 8019fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019fd4 <_vfiprintf_r>:
 8019fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fd8:	460c      	mov	r4, r1
 8019fda:	b09d      	sub	sp, #116	; 0x74
 8019fdc:	4617      	mov	r7, r2
 8019fde:	461d      	mov	r5, r3
 8019fe0:	4606      	mov	r6, r0
 8019fe2:	b118      	cbz	r0, 8019fec <_vfiprintf_r+0x18>
 8019fe4:	6983      	ldr	r3, [r0, #24]
 8019fe6:	b90b      	cbnz	r3, 8019fec <_vfiprintf_r+0x18>
 8019fe8:	f7ff fd88 	bl	8019afc <__sinit>
 8019fec:	4b7c      	ldr	r3, [pc, #496]	; (801a1e0 <_vfiprintf_r+0x20c>)
 8019fee:	429c      	cmp	r4, r3
 8019ff0:	d158      	bne.n	801a0a4 <_vfiprintf_r+0xd0>
 8019ff2:	6874      	ldr	r4, [r6, #4]
 8019ff4:	89a3      	ldrh	r3, [r4, #12]
 8019ff6:	0718      	lsls	r0, r3, #28
 8019ff8:	d55e      	bpl.n	801a0b8 <_vfiprintf_r+0xe4>
 8019ffa:	6923      	ldr	r3, [r4, #16]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d05b      	beq.n	801a0b8 <_vfiprintf_r+0xe4>
 801a000:	2300      	movs	r3, #0
 801a002:	9309      	str	r3, [sp, #36]	; 0x24
 801a004:	2320      	movs	r3, #32
 801a006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a00a:	2330      	movs	r3, #48	; 0x30
 801a00c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a010:	9503      	str	r5, [sp, #12]
 801a012:	f04f 0b01 	mov.w	fp, #1
 801a016:	46b8      	mov	r8, r7
 801a018:	4645      	mov	r5, r8
 801a01a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a01e:	b10b      	cbz	r3, 801a024 <_vfiprintf_r+0x50>
 801a020:	2b25      	cmp	r3, #37	; 0x25
 801a022:	d154      	bne.n	801a0ce <_vfiprintf_r+0xfa>
 801a024:	ebb8 0a07 	subs.w	sl, r8, r7
 801a028:	d00b      	beq.n	801a042 <_vfiprintf_r+0x6e>
 801a02a:	4653      	mov	r3, sl
 801a02c:	463a      	mov	r2, r7
 801a02e:	4621      	mov	r1, r4
 801a030:	4630      	mov	r0, r6
 801a032:	f7ff ffbc 	bl	8019fae <__sfputs_r>
 801a036:	3001      	adds	r0, #1
 801a038:	f000 80c2 	beq.w	801a1c0 <_vfiprintf_r+0x1ec>
 801a03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a03e:	4453      	add	r3, sl
 801a040:	9309      	str	r3, [sp, #36]	; 0x24
 801a042:	f898 3000 	ldrb.w	r3, [r8]
 801a046:	2b00      	cmp	r3, #0
 801a048:	f000 80ba 	beq.w	801a1c0 <_vfiprintf_r+0x1ec>
 801a04c:	2300      	movs	r3, #0
 801a04e:	f04f 32ff 	mov.w	r2, #4294967295
 801a052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a056:	9304      	str	r3, [sp, #16]
 801a058:	9307      	str	r3, [sp, #28]
 801a05a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a05e:	931a      	str	r3, [sp, #104]	; 0x68
 801a060:	46a8      	mov	r8, r5
 801a062:	2205      	movs	r2, #5
 801a064:	f818 1b01 	ldrb.w	r1, [r8], #1
 801a068:	485e      	ldr	r0, [pc, #376]	; (801a1e4 <_vfiprintf_r+0x210>)
 801a06a:	f7e6 f941 	bl	80002f0 <memchr>
 801a06e:	9b04      	ldr	r3, [sp, #16]
 801a070:	bb78      	cbnz	r0, 801a0d2 <_vfiprintf_r+0xfe>
 801a072:	06d9      	lsls	r1, r3, #27
 801a074:	bf44      	itt	mi
 801a076:	2220      	movmi	r2, #32
 801a078:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a07c:	071a      	lsls	r2, r3, #28
 801a07e:	bf44      	itt	mi
 801a080:	222b      	movmi	r2, #43	; 0x2b
 801a082:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a086:	782a      	ldrb	r2, [r5, #0]
 801a088:	2a2a      	cmp	r2, #42	; 0x2a
 801a08a:	d02a      	beq.n	801a0e2 <_vfiprintf_r+0x10e>
 801a08c:	9a07      	ldr	r2, [sp, #28]
 801a08e:	46a8      	mov	r8, r5
 801a090:	2000      	movs	r0, #0
 801a092:	250a      	movs	r5, #10
 801a094:	4641      	mov	r1, r8
 801a096:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a09a:	3b30      	subs	r3, #48	; 0x30
 801a09c:	2b09      	cmp	r3, #9
 801a09e:	d969      	bls.n	801a174 <_vfiprintf_r+0x1a0>
 801a0a0:	b360      	cbz	r0, 801a0fc <_vfiprintf_r+0x128>
 801a0a2:	e024      	b.n	801a0ee <_vfiprintf_r+0x11a>
 801a0a4:	4b50      	ldr	r3, [pc, #320]	; (801a1e8 <_vfiprintf_r+0x214>)
 801a0a6:	429c      	cmp	r4, r3
 801a0a8:	d101      	bne.n	801a0ae <_vfiprintf_r+0xda>
 801a0aa:	68b4      	ldr	r4, [r6, #8]
 801a0ac:	e7a2      	b.n	8019ff4 <_vfiprintf_r+0x20>
 801a0ae:	4b4f      	ldr	r3, [pc, #316]	; (801a1ec <_vfiprintf_r+0x218>)
 801a0b0:	429c      	cmp	r4, r3
 801a0b2:	bf08      	it	eq
 801a0b4:	68f4      	ldreq	r4, [r6, #12]
 801a0b6:	e79d      	b.n	8019ff4 <_vfiprintf_r+0x20>
 801a0b8:	4621      	mov	r1, r4
 801a0ba:	4630      	mov	r0, r6
 801a0bc:	f7ff fbc0 	bl	8019840 <__swsetup_r>
 801a0c0:	2800      	cmp	r0, #0
 801a0c2:	d09d      	beq.n	801a000 <_vfiprintf_r+0x2c>
 801a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 801a0c8:	b01d      	add	sp, #116	; 0x74
 801a0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0ce:	46a8      	mov	r8, r5
 801a0d0:	e7a2      	b.n	801a018 <_vfiprintf_r+0x44>
 801a0d2:	4a44      	ldr	r2, [pc, #272]	; (801a1e4 <_vfiprintf_r+0x210>)
 801a0d4:	1a80      	subs	r0, r0, r2
 801a0d6:	fa0b f000 	lsl.w	r0, fp, r0
 801a0da:	4318      	orrs	r0, r3
 801a0dc:	9004      	str	r0, [sp, #16]
 801a0de:	4645      	mov	r5, r8
 801a0e0:	e7be      	b.n	801a060 <_vfiprintf_r+0x8c>
 801a0e2:	9a03      	ldr	r2, [sp, #12]
 801a0e4:	1d11      	adds	r1, r2, #4
 801a0e6:	6812      	ldr	r2, [r2, #0]
 801a0e8:	9103      	str	r1, [sp, #12]
 801a0ea:	2a00      	cmp	r2, #0
 801a0ec:	db01      	blt.n	801a0f2 <_vfiprintf_r+0x11e>
 801a0ee:	9207      	str	r2, [sp, #28]
 801a0f0:	e004      	b.n	801a0fc <_vfiprintf_r+0x128>
 801a0f2:	4252      	negs	r2, r2
 801a0f4:	f043 0302 	orr.w	r3, r3, #2
 801a0f8:	9207      	str	r2, [sp, #28]
 801a0fa:	9304      	str	r3, [sp, #16]
 801a0fc:	f898 3000 	ldrb.w	r3, [r8]
 801a100:	2b2e      	cmp	r3, #46	; 0x2e
 801a102:	d10e      	bne.n	801a122 <_vfiprintf_r+0x14e>
 801a104:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a108:	2b2a      	cmp	r3, #42	; 0x2a
 801a10a:	d138      	bne.n	801a17e <_vfiprintf_r+0x1aa>
 801a10c:	9b03      	ldr	r3, [sp, #12]
 801a10e:	1d1a      	adds	r2, r3, #4
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	9203      	str	r2, [sp, #12]
 801a114:	2b00      	cmp	r3, #0
 801a116:	bfb8      	it	lt
 801a118:	f04f 33ff 	movlt.w	r3, #4294967295
 801a11c:	f108 0802 	add.w	r8, r8, #2
 801a120:	9305      	str	r3, [sp, #20]
 801a122:	4d33      	ldr	r5, [pc, #204]	; (801a1f0 <_vfiprintf_r+0x21c>)
 801a124:	f898 1000 	ldrb.w	r1, [r8]
 801a128:	2203      	movs	r2, #3
 801a12a:	4628      	mov	r0, r5
 801a12c:	f7e6 f8e0 	bl	80002f0 <memchr>
 801a130:	b140      	cbz	r0, 801a144 <_vfiprintf_r+0x170>
 801a132:	2340      	movs	r3, #64	; 0x40
 801a134:	1b40      	subs	r0, r0, r5
 801a136:	fa03 f000 	lsl.w	r0, r3, r0
 801a13a:	9b04      	ldr	r3, [sp, #16]
 801a13c:	4303      	orrs	r3, r0
 801a13e:	f108 0801 	add.w	r8, r8, #1
 801a142:	9304      	str	r3, [sp, #16]
 801a144:	f898 1000 	ldrb.w	r1, [r8]
 801a148:	482a      	ldr	r0, [pc, #168]	; (801a1f4 <_vfiprintf_r+0x220>)
 801a14a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a14e:	2206      	movs	r2, #6
 801a150:	f108 0701 	add.w	r7, r8, #1
 801a154:	f7e6 f8cc 	bl	80002f0 <memchr>
 801a158:	2800      	cmp	r0, #0
 801a15a:	d037      	beq.n	801a1cc <_vfiprintf_r+0x1f8>
 801a15c:	4b26      	ldr	r3, [pc, #152]	; (801a1f8 <_vfiprintf_r+0x224>)
 801a15e:	bb1b      	cbnz	r3, 801a1a8 <_vfiprintf_r+0x1d4>
 801a160:	9b03      	ldr	r3, [sp, #12]
 801a162:	3307      	adds	r3, #7
 801a164:	f023 0307 	bic.w	r3, r3, #7
 801a168:	3308      	adds	r3, #8
 801a16a:	9303      	str	r3, [sp, #12]
 801a16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a16e:	444b      	add	r3, r9
 801a170:	9309      	str	r3, [sp, #36]	; 0x24
 801a172:	e750      	b.n	801a016 <_vfiprintf_r+0x42>
 801a174:	fb05 3202 	mla	r2, r5, r2, r3
 801a178:	2001      	movs	r0, #1
 801a17a:	4688      	mov	r8, r1
 801a17c:	e78a      	b.n	801a094 <_vfiprintf_r+0xc0>
 801a17e:	2300      	movs	r3, #0
 801a180:	f108 0801 	add.w	r8, r8, #1
 801a184:	9305      	str	r3, [sp, #20]
 801a186:	4619      	mov	r1, r3
 801a188:	250a      	movs	r5, #10
 801a18a:	4640      	mov	r0, r8
 801a18c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a190:	3a30      	subs	r2, #48	; 0x30
 801a192:	2a09      	cmp	r2, #9
 801a194:	d903      	bls.n	801a19e <_vfiprintf_r+0x1ca>
 801a196:	2b00      	cmp	r3, #0
 801a198:	d0c3      	beq.n	801a122 <_vfiprintf_r+0x14e>
 801a19a:	9105      	str	r1, [sp, #20]
 801a19c:	e7c1      	b.n	801a122 <_vfiprintf_r+0x14e>
 801a19e:	fb05 2101 	mla	r1, r5, r1, r2
 801a1a2:	2301      	movs	r3, #1
 801a1a4:	4680      	mov	r8, r0
 801a1a6:	e7f0      	b.n	801a18a <_vfiprintf_r+0x1b6>
 801a1a8:	ab03      	add	r3, sp, #12
 801a1aa:	9300      	str	r3, [sp, #0]
 801a1ac:	4622      	mov	r2, r4
 801a1ae:	4b13      	ldr	r3, [pc, #76]	; (801a1fc <_vfiprintf_r+0x228>)
 801a1b0:	a904      	add	r1, sp, #16
 801a1b2:	4630      	mov	r0, r6
 801a1b4:	f3af 8000 	nop.w
 801a1b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a1bc:	4681      	mov	r9, r0
 801a1be:	d1d5      	bne.n	801a16c <_vfiprintf_r+0x198>
 801a1c0:	89a3      	ldrh	r3, [r4, #12]
 801a1c2:	065b      	lsls	r3, r3, #25
 801a1c4:	f53f af7e 	bmi.w	801a0c4 <_vfiprintf_r+0xf0>
 801a1c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1ca:	e77d      	b.n	801a0c8 <_vfiprintf_r+0xf4>
 801a1cc:	ab03      	add	r3, sp, #12
 801a1ce:	9300      	str	r3, [sp, #0]
 801a1d0:	4622      	mov	r2, r4
 801a1d2:	4b0a      	ldr	r3, [pc, #40]	; (801a1fc <_vfiprintf_r+0x228>)
 801a1d4:	a904      	add	r1, sp, #16
 801a1d6:	4630      	mov	r0, r6
 801a1d8:	f000 f888 	bl	801a2ec <_printf_i>
 801a1dc:	e7ec      	b.n	801a1b8 <_vfiprintf_r+0x1e4>
 801a1de:	bf00      	nop
 801a1e0:	0801b030 	.word	0x0801b030
 801a1e4:	0801b070 	.word	0x0801b070
 801a1e8:	0801b050 	.word	0x0801b050
 801a1ec:	0801b010 	.word	0x0801b010
 801a1f0:	0801b076 	.word	0x0801b076
 801a1f4:	0801b07a 	.word	0x0801b07a
 801a1f8:	00000000 	.word	0x00000000
 801a1fc:	08019faf 	.word	0x08019faf

0801a200 <_printf_common>:
 801a200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a204:	4691      	mov	r9, r2
 801a206:	461f      	mov	r7, r3
 801a208:	688a      	ldr	r2, [r1, #8]
 801a20a:	690b      	ldr	r3, [r1, #16]
 801a20c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a210:	4293      	cmp	r3, r2
 801a212:	bfb8      	it	lt
 801a214:	4613      	movlt	r3, r2
 801a216:	f8c9 3000 	str.w	r3, [r9]
 801a21a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a21e:	4606      	mov	r6, r0
 801a220:	460c      	mov	r4, r1
 801a222:	b112      	cbz	r2, 801a22a <_printf_common+0x2a>
 801a224:	3301      	adds	r3, #1
 801a226:	f8c9 3000 	str.w	r3, [r9]
 801a22a:	6823      	ldr	r3, [r4, #0]
 801a22c:	0699      	lsls	r1, r3, #26
 801a22e:	bf42      	ittt	mi
 801a230:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a234:	3302      	addmi	r3, #2
 801a236:	f8c9 3000 	strmi.w	r3, [r9]
 801a23a:	6825      	ldr	r5, [r4, #0]
 801a23c:	f015 0506 	ands.w	r5, r5, #6
 801a240:	d107      	bne.n	801a252 <_printf_common+0x52>
 801a242:	f104 0a19 	add.w	sl, r4, #25
 801a246:	68e3      	ldr	r3, [r4, #12]
 801a248:	f8d9 2000 	ldr.w	r2, [r9]
 801a24c:	1a9b      	subs	r3, r3, r2
 801a24e:	42ab      	cmp	r3, r5
 801a250:	dc28      	bgt.n	801a2a4 <_printf_common+0xa4>
 801a252:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a256:	6822      	ldr	r2, [r4, #0]
 801a258:	3300      	adds	r3, #0
 801a25a:	bf18      	it	ne
 801a25c:	2301      	movne	r3, #1
 801a25e:	0692      	lsls	r2, r2, #26
 801a260:	d42d      	bmi.n	801a2be <_printf_common+0xbe>
 801a262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a266:	4639      	mov	r1, r7
 801a268:	4630      	mov	r0, r6
 801a26a:	47c0      	blx	r8
 801a26c:	3001      	adds	r0, #1
 801a26e:	d020      	beq.n	801a2b2 <_printf_common+0xb2>
 801a270:	6823      	ldr	r3, [r4, #0]
 801a272:	68e5      	ldr	r5, [r4, #12]
 801a274:	f8d9 2000 	ldr.w	r2, [r9]
 801a278:	f003 0306 	and.w	r3, r3, #6
 801a27c:	2b04      	cmp	r3, #4
 801a27e:	bf08      	it	eq
 801a280:	1aad      	subeq	r5, r5, r2
 801a282:	68a3      	ldr	r3, [r4, #8]
 801a284:	6922      	ldr	r2, [r4, #16]
 801a286:	bf0c      	ite	eq
 801a288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a28c:	2500      	movne	r5, #0
 801a28e:	4293      	cmp	r3, r2
 801a290:	bfc4      	itt	gt
 801a292:	1a9b      	subgt	r3, r3, r2
 801a294:	18ed      	addgt	r5, r5, r3
 801a296:	f04f 0900 	mov.w	r9, #0
 801a29a:	341a      	adds	r4, #26
 801a29c:	454d      	cmp	r5, r9
 801a29e:	d11a      	bne.n	801a2d6 <_printf_common+0xd6>
 801a2a0:	2000      	movs	r0, #0
 801a2a2:	e008      	b.n	801a2b6 <_printf_common+0xb6>
 801a2a4:	2301      	movs	r3, #1
 801a2a6:	4652      	mov	r2, sl
 801a2a8:	4639      	mov	r1, r7
 801a2aa:	4630      	mov	r0, r6
 801a2ac:	47c0      	blx	r8
 801a2ae:	3001      	adds	r0, #1
 801a2b0:	d103      	bne.n	801a2ba <_printf_common+0xba>
 801a2b2:	f04f 30ff 	mov.w	r0, #4294967295
 801a2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2ba:	3501      	adds	r5, #1
 801a2bc:	e7c3      	b.n	801a246 <_printf_common+0x46>
 801a2be:	18e1      	adds	r1, r4, r3
 801a2c0:	1c5a      	adds	r2, r3, #1
 801a2c2:	2030      	movs	r0, #48	; 0x30
 801a2c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a2c8:	4422      	add	r2, r4
 801a2ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a2ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a2d2:	3302      	adds	r3, #2
 801a2d4:	e7c5      	b.n	801a262 <_printf_common+0x62>
 801a2d6:	2301      	movs	r3, #1
 801a2d8:	4622      	mov	r2, r4
 801a2da:	4639      	mov	r1, r7
 801a2dc:	4630      	mov	r0, r6
 801a2de:	47c0      	blx	r8
 801a2e0:	3001      	adds	r0, #1
 801a2e2:	d0e6      	beq.n	801a2b2 <_printf_common+0xb2>
 801a2e4:	f109 0901 	add.w	r9, r9, #1
 801a2e8:	e7d8      	b.n	801a29c <_printf_common+0x9c>
	...

0801a2ec <_printf_i>:
 801a2ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a2f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a2f4:	460c      	mov	r4, r1
 801a2f6:	7e09      	ldrb	r1, [r1, #24]
 801a2f8:	b085      	sub	sp, #20
 801a2fa:	296e      	cmp	r1, #110	; 0x6e
 801a2fc:	4617      	mov	r7, r2
 801a2fe:	4606      	mov	r6, r0
 801a300:	4698      	mov	r8, r3
 801a302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a304:	f000 80b3 	beq.w	801a46e <_printf_i+0x182>
 801a308:	d822      	bhi.n	801a350 <_printf_i+0x64>
 801a30a:	2963      	cmp	r1, #99	; 0x63
 801a30c:	d036      	beq.n	801a37c <_printf_i+0x90>
 801a30e:	d80a      	bhi.n	801a326 <_printf_i+0x3a>
 801a310:	2900      	cmp	r1, #0
 801a312:	f000 80b9 	beq.w	801a488 <_printf_i+0x19c>
 801a316:	2958      	cmp	r1, #88	; 0x58
 801a318:	f000 8083 	beq.w	801a422 <_printf_i+0x136>
 801a31c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a320:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a324:	e032      	b.n	801a38c <_printf_i+0xa0>
 801a326:	2964      	cmp	r1, #100	; 0x64
 801a328:	d001      	beq.n	801a32e <_printf_i+0x42>
 801a32a:	2969      	cmp	r1, #105	; 0x69
 801a32c:	d1f6      	bne.n	801a31c <_printf_i+0x30>
 801a32e:	6820      	ldr	r0, [r4, #0]
 801a330:	6813      	ldr	r3, [r2, #0]
 801a332:	0605      	lsls	r5, r0, #24
 801a334:	f103 0104 	add.w	r1, r3, #4
 801a338:	d52a      	bpl.n	801a390 <_printf_i+0xa4>
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	6011      	str	r1, [r2, #0]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	da03      	bge.n	801a34a <_printf_i+0x5e>
 801a342:	222d      	movs	r2, #45	; 0x2d
 801a344:	425b      	negs	r3, r3
 801a346:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a34a:	486f      	ldr	r0, [pc, #444]	; (801a508 <_printf_i+0x21c>)
 801a34c:	220a      	movs	r2, #10
 801a34e:	e039      	b.n	801a3c4 <_printf_i+0xd8>
 801a350:	2973      	cmp	r1, #115	; 0x73
 801a352:	f000 809d 	beq.w	801a490 <_printf_i+0x1a4>
 801a356:	d808      	bhi.n	801a36a <_printf_i+0x7e>
 801a358:	296f      	cmp	r1, #111	; 0x6f
 801a35a:	d020      	beq.n	801a39e <_printf_i+0xb2>
 801a35c:	2970      	cmp	r1, #112	; 0x70
 801a35e:	d1dd      	bne.n	801a31c <_printf_i+0x30>
 801a360:	6823      	ldr	r3, [r4, #0]
 801a362:	f043 0320 	orr.w	r3, r3, #32
 801a366:	6023      	str	r3, [r4, #0]
 801a368:	e003      	b.n	801a372 <_printf_i+0x86>
 801a36a:	2975      	cmp	r1, #117	; 0x75
 801a36c:	d017      	beq.n	801a39e <_printf_i+0xb2>
 801a36e:	2978      	cmp	r1, #120	; 0x78
 801a370:	d1d4      	bne.n	801a31c <_printf_i+0x30>
 801a372:	2378      	movs	r3, #120	; 0x78
 801a374:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a378:	4864      	ldr	r0, [pc, #400]	; (801a50c <_printf_i+0x220>)
 801a37a:	e055      	b.n	801a428 <_printf_i+0x13c>
 801a37c:	6813      	ldr	r3, [r2, #0]
 801a37e:	1d19      	adds	r1, r3, #4
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	6011      	str	r1, [r2, #0]
 801a384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a38c:	2301      	movs	r3, #1
 801a38e:	e08c      	b.n	801a4aa <_printf_i+0x1be>
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	6011      	str	r1, [r2, #0]
 801a394:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a398:	bf18      	it	ne
 801a39a:	b21b      	sxthne	r3, r3
 801a39c:	e7cf      	b.n	801a33e <_printf_i+0x52>
 801a39e:	6813      	ldr	r3, [r2, #0]
 801a3a0:	6825      	ldr	r5, [r4, #0]
 801a3a2:	1d18      	adds	r0, r3, #4
 801a3a4:	6010      	str	r0, [r2, #0]
 801a3a6:	0628      	lsls	r0, r5, #24
 801a3a8:	d501      	bpl.n	801a3ae <_printf_i+0xc2>
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	e002      	b.n	801a3b4 <_printf_i+0xc8>
 801a3ae:	0668      	lsls	r0, r5, #25
 801a3b0:	d5fb      	bpl.n	801a3aa <_printf_i+0xbe>
 801a3b2:	881b      	ldrh	r3, [r3, #0]
 801a3b4:	4854      	ldr	r0, [pc, #336]	; (801a508 <_printf_i+0x21c>)
 801a3b6:	296f      	cmp	r1, #111	; 0x6f
 801a3b8:	bf14      	ite	ne
 801a3ba:	220a      	movne	r2, #10
 801a3bc:	2208      	moveq	r2, #8
 801a3be:	2100      	movs	r1, #0
 801a3c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a3c4:	6865      	ldr	r5, [r4, #4]
 801a3c6:	60a5      	str	r5, [r4, #8]
 801a3c8:	2d00      	cmp	r5, #0
 801a3ca:	f2c0 8095 	blt.w	801a4f8 <_printf_i+0x20c>
 801a3ce:	6821      	ldr	r1, [r4, #0]
 801a3d0:	f021 0104 	bic.w	r1, r1, #4
 801a3d4:	6021      	str	r1, [r4, #0]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d13d      	bne.n	801a456 <_printf_i+0x16a>
 801a3da:	2d00      	cmp	r5, #0
 801a3dc:	f040 808e 	bne.w	801a4fc <_printf_i+0x210>
 801a3e0:	4665      	mov	r5, ip
 801a3e2:	2a08      	cmp	r2, #8
 801a3e4:	d10b      	bne.n	801a3fe <_printf_i+0x112>
 801a3e6:	6823      	ldr	r3, [r4, #0]
 801a3e8:	07db      	lsls	r3, r3, #31
 801a3ea:	d508      	bpl.n	801a3fe <_printf_i+0x112>
 801a3ec:	6923      	ldr	r3, [r4, #16]
 801a3ee:	6862      	ldr	r2, [r4, #4]
 801a3f0:	429a      	cmp	r2, r3
 801a3f2:	bfde      	ittt	le
 801a3f4:	2330      	movle	r3, #48	; 0x30
 801a3f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a3fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a3fe:	ebac 0305 	sub.w	r3, ip, r5
 801a402:	6123      	str	r3, [r4, #16]
 801a404:	f8cd 8000 	str.w	r8, [sp]
 801a408:	463b      	mov	r3, r7
 801a40a:	aa03      	add	r2, sp, #12
 801a40c:	4621      	mov	r1, r4
 801a40e:	4630      	mov	r0, r6
 801a410:	f7ff fef6 	bl	801a200 <_printf_common>
 801a414:	3001      	adds	r0, #1
 801a416:	d14d      	bne.n	801a4b4 <_printf_i+0x1c8>
 801a418:	f04f 30ff 	mov.w	r0, #4294967295
 801a41c:	b005      	add	sp, #20
 801a41e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a422:	4839      	ldr	r0, [pc, #228]	; (801a508 <_printf_i+0x21c>)
 801a424:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a428:	6813      	ldr	r3, [r2, #0]
 801a42a:	6821      	ldr	r1, [r4, #0]
 801a42c:	1d1d      	adds	r5, r3, #4
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	6015      	str	r5, [r2, #0]
 801a432:	060a      	lsls	r2, r1, #24
 801a434:	d50b      	bpl.n	801a44e <_printf_i+0x162>
 801a436:	07ca      	lsls	r2, r1, #31
 801a438:	bf44      	itt	mi
 801a43a:	f041 0120 	orrmi.w	r1, r1, #32
 801a43e:	6021      	strmi	r1, [r4, #0]
 801a440:	b91b      	cbnz	r3, 801a44a <_printf_i+0x15e>
 801a442:	6822      	ldr	r2, [r4, #0]
 801a444:	f022 0220 	bic.w	r2, r2, #32
 801a448:	6022      	str	r2, [r4, #0]
 801a44a:	2210      	movs	r2, #16
 801a44c:	e7b7      	b.n	801a3be <_printf_i+0xd2>
 801a44e:	064d      	lsls	r5, r1, #25
 801a450:	bf48      	it	mi
 801a452:	b29b      	uxthmi	r3, r3
 801a454:	e7ef      	b.n	801a436 <_printf_i+0x14a>
 801a456:	4665      	mov	r5, ip
 801a458:	fbb3 f1f2 	udiv	r1, r3, r2
 801a45c:	fb02 3311 	mls	r3, r2, r1, r3
 801a460:	5cc3      	ldrb	r3, [r0, r3]
 801a462:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a466:	460b      	mov	r3, r1
 801a468:	2900      	cmp	r1, #0
 801a46a:	d1f5      	bne.n	801a458 <_printf_i+0x16c>
 801a46c:	e7b9      	b.n	801a3e2 <_printf_i+0xf6>
 801a46e:	6813      	ldr	r3, [r2, #0]
 801a470:	6825      	ldr	r5, [r4, #0]
 801a472:	6961      	ldr	r1, [r4, #20]
 801a474:	1d18      	adds	r0, r3, #4
 801a476:	6010      	str	r0, [r2, #0]
 801a478:	0628      	lsls	r0, r5, #24
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	d501      	bpl.n	801a482 <_printf_i+0x196>
 801a47e:	6019      	str	r1, [r3, #0]
 801a480:	e002      	b.n	801a488 <_printf_i+0x19c>
 801a482:	066a      	lsls	r2, r5, #25
 801a484:	d5fb      	bpl.n	801a47e <_printf_i+0x192>
 801a486:	8019      	strh	r1, [r3, #0]
 801a488:	2300      	movs	r3, #0
 801a48a:	6123      	str	r3, [r4, #16]
 801a48c:	4665      	mov	r5, ip
 801a48e:	e7b9      	b.n	801a404 <_printf_i+0x118>
 801a490:	6813      	ldr	r3, [r2, #0]
 801a492:	1d19      	adds	r1, r3, #4
 801a494:	6011      	str	r1, [r2, #0]
 801a496:	681d      	ldr	r5, [r3, #0]
 801a498:	6862      	ldr	r2, [r4, #4]
 801a49a:	2100      	movs	r1, #0
 801a49c:	4628      	mov	r0, r5
 801a49e:	f7e5 ff27 	bl	80002f0 <memchr>
 801a4a2:	b108      	cbz	r0, 801a4a8 <_printf_i+0x1bc>
 801a4a4:	1b40      	subs	r0, r0, r5
 801a4a6:	6060      	str	r0, [r4, #4]
 801a4a8:	6863      	ldr	r3, [r4, #4]
 801a4aa:	6123      	str	r3, [r4, #16]
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a4b2:	e7a7      	b.n	801a404 <_printf_i+0x118>
 801a4b4:	6923      	ldr	r3, [r4, #16]
 801a4b6:	462a      	mov	r2, r5
 801a4b8:	4639      	mov	r1, r7
 801a4ba:	4630      	mov	r0, r6
 801a4bc:	47c0      	blx	r8
 801a4be:	3001      	adds	r0, #1
 801a4c0:	d0aa      	beq.n	801a418 <_printf_i+0x12c>
 801a4c2:	6823      	ldr	r3, [r4, #0]
 801a4c4:	079b      	lsls	r3, r3, #30
 801a4c6:	d413      	bmi.n	801a4f0 <_printf_i+0x204>
 801a4c8:	68e0      	ldr	r0, [r4, #12]
 801a4ca:	9b03      	ldr	r3, [sp, #12]
 801a4cc:	4298      	cmp	r0, r3
 801a4ce:	bfb8      	it	lt
 801a4d0:	4618      	movlt	r0, r3
 801a4d2:	e7a3      	b.n	801a41c <_printf_i+0x130>
 801a4d4:	2301      	movs	r3, #1
 801a4d6:	464a      	mov	r2, r9
 801a4d8:	4639      	mov	r1, r7
 801a4da:	4630      	mov	r0, r6
 801a4dc:	47c0      	blx	r8
 801a4de:	3001      	adds	r0, #1
 801a4e0:	d09a      	beq.n	801a418 <_printf_i+0x12c>
 801a4e2:	3501      	adds	r5, #1
 801a4e4:	68e3      	ldr	r3, [r4, #12]
 801a4e6:	9a03      	ldr	r2, [sp, #12]
 801a4e8:	1a9b      	subs	r3, r3, r2
 801a4ea:	42ab      	cmp	r3, r5
 801a4ec:	dcf2      	bgt.n	801a4d4 <_printf_i+0x1e8>
 801a4ee:	e7eb      	b.n	801a4c8 <_printf_i+0x1dc>
 801a4f0:	2500      	movs	r5, #0
 801a4f2:	f104 0919 	add.w	r9, r4, #25
 801a4f6:	e7f5      	b.n	801a4e4 <_printf_i+0x1f8>
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d1ac      	bne.n	801a456 <_printf_i+0x16a>
 801a4fc:	7803      	ldrb	r3, [r0, #0]
 801a4fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a502:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a506:	e76c      	b.n	801a3e2 <_printf_i+0xf6>
 801a508:	0801b081 	.word	0x0801b081
 801a50c:	0801b092 	.word	0x0801b092

0801a510 <__sread>:
 801a510:	b510      	push	{r4, lr}
 801a512:	460c      	mov	r4, r1
 801a514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a518:	f000 f8d4 	bl	801a6c4 <_read_r>
 801a51c:	2800      	cmp	r0, #0
 801a51e:	bfab      	itete	ge
 801a520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a522:	89a3      	ldrhlt	r3, [r4, #12]
 801a524:	181b      	addge	r3, r3, r0
 801a526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a52a:	bfac      	ite	ge
 801a52c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a52e:	81a3      	strhlt	r3, [r4, #12]
 801a530:	bd10      	pop	{r4, pc}

0801a532 <__swrite>:
 801a532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a536:	461f      	mov	r7, r3
 801a538:	898b      	ldrh	r3, [r1, #12]
 801a53a:	05db      	lsls	r3, r3, #23
 801a53c:	4605      	mov	r5, r0
 801a53e:	460c      	mov	r4, r1
 801a540:	4616      	mov	r6, r2
 801a542:	d505      	bpl.n	801a550 <__swrite+0x1e>
 801a544:	2302      	movs	r3, #2
 801a546:	2200      	movs	r2, #0
 801a548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a54c:	f000 f868 	bl	801a620 <_lseek_r>
 801a550:	89a3      	ldrh	r3, [r4, #12]
 801a552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a55a:	81a3      	strh	r3, [r4, #12]
 801a55c:	4632      	mov	r2, r6
 801a55e:	463b      	mov	r3, r7
 801a560:	4628      	mov	r0, r5
 801a562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a566:	f000 b817 	b.w	801a598 <_write_r>

0801a56a <__sseek>:
 801a56a:	b510      	push	{r4, lr}
 801a56c:	460c      	mov	r4, r1
 801a56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a572:	f000 f855 	bl	801a620 <_lseek_r>
 801a576:	1c43      	adds	r3, r0, #1
 801a578:	89a3      	ldrh	r3, [r4, #12]
 801a57a:	bf15      	itete	ne
 801a57c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a57e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a586:	81a3      	strheq	r3, [r4, #12]
 801a588:	bf18      	it	ne
 801a58a:	81a3      	strhne	r3, [r4, #12]
 801a58c:	bd10      	pop	{r4, pc}

0801a58e <__sclose>:
 801a58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a592:	f000 b813 	b.w	801a5bc <_close_r>
	...

0801a598 <_write_r>:
 801a598:	b538      	push	{r3, r4, r5, lr}
 801a59a:	4c07      	ldr	r4, [pc, #28]	; (801a5b8 <_write_r+0x20>)
 801a59c:	4605      	mov	r5, r0
 801a59e:	4608      	mov	r0, r1
 801a5a0:	4611      	mov	r1, r2
 801a5a2:	2200      	movs	r2, #0
 801a5a4:	6022      	str	r2, [r4, #0]
 801a5a6:	461a      	mov	r2, r3
 801a5a8:	f7e9 fb47 	bl	8003c3a <_write>
 801a5ac:	1c43      	adds	r3, r0, #1
 801a5ae:	d102      	bne.n	801a5b6 <_write_r+0x1e>
 801a5b0:	6823      	ldr	r3, [r4, #0]
 801a5b2:	b103      	cbz	r3, 801a5b6 <_write_r+0x1e>
 801a5b4:	602b      	str	r3, [r5, #0]
 801a5b6:	bd38      	pop	{r3, r4, r5, pc}
 801a5b8:	240024ac 	.word	0x240024ac

0801a5bc <_close_r>:
 801a5bc:	b538      	push	{r3, r4, r5, lr}
 801a5be:	4c06      	ldr	r4, [pc, #24]	; (801a5d8 <_close_r+0x1c>)
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	4605      	mov	r5, r0
 801a5c4:	4608      	mov	r0, r1
 801a5c6:	6023      	str	r3, [r4, #0]
 801a5c8:	f7e9 fe47 	bl	800425a <_close>
 801a5cc:	1c43      	adds	r3, r0, #1
 801a5ce:	d102      	bne.n	801a5d6 <_close_r+0x1a>
 801a5d0:	6823      	ldr	r3, [r4, #0]
 801a5d2:	b103      	cbz	r3, 801a5d6 <_close_r+0x1a>
 801a5d4:	602b      	str	r3, [r5, #0]
 801a5d6:	bd38      	pop	{r3, r4, r5, pc}
 801a5d8:	240024ac 	.word	0x240024ac

0801a5dc <_fstat_r>:
 801a5dc:	b538      	push	{r3, r4, r5, lr}
 801a5de:	4c07      	ldr	r4, [pc, #28]	; (801a5fc <_fstat_r+0x20>)
 801a5e0:	2300      	movs	r3, #0
 801a5e2:	4605      	mov	r5, r0
 801a5e4:	4608      	mov	r0, r1
 801a5e6:	4611      	mov	r1, r2
 801a5e8:	6023      	str	r3, [r4, #0]
 801a5ea:	f7e9 fe42 	bl	8004272 <_fstat>
 801a5ee:	1c43      	adds	r3, r0, #1
 801a5f0:	d102      	bne.n	801a5f8 <_fstat_r+0x1c>
 801a5f2:	6823      	ldr	r3, [r4, #0]
 801a5f4:	b103      	cbz	r3, 801a5f8 <_fstat_r+0x1c>
 801a5f6:	602b      	str	r3, [r5, #0]
 801a5f8:	bd38      	pop	{r3, r4, r5, pc}
 801a5fa:	bf00      	nop
 801a5fc:	240024ac 	.word	0x240024ac

0801a600 <_isatty_r>:
 801a600:	b538      	push	{r3, r4, r5, lr}
 801a602:	4c06      	ldr	r4, [pc, #24]	; (801a61c <_isatty_r+0x1c>)
 801a604:	2300      	movs	r3, #0
 801a606:	4605      	mov	r5, r0
 801a608:	4608      	mov	r0, r1
 801a60a:	6023      	str	r3, [r4, #0]
 801a60c:	f7e9 fe41 	bl	8004292 <_isatty>
 801a610:	1c43      	adds	r3, r0, #1
 801a612:	d102      	bne.n	801a61a <_isatty_r+0x1a>
 801a614:	6823      	ldr	r3, [r4, #0]
 801a616:	b103      	cbz	r3, 801a61a <_isatty_r+0x1a>
 801a618:	602b      	str	r3, [r5, #0]
 801a61a:	bd38      	pop	{r3, r4, r5, pc}
 801a61c:	240024ac 	.word	0x240024ac

0801a620 <_lseek_r>:
 801a620:	b538      	push	{r3, r4, r5, lr}
 801a622:	4c07      	ldr	r4, [pc, #28]	; (801a640 <_lseek_r+0x20>)
 801a624:	4605      	mov	r5, r0
 801a626:	4608      	mov	r0, r1
 801a628:	4611      	mov	r1, r2
 801a62a:	2200      	movs	r2, #0
 801a62c:	6022      	str	r2, [r4, #0]
 801a62e:	461a      	mov	r2, r3
 801a630:	f7e9 fe3a 	bl	80042a8 <_lseek>
 801a634:	1c43      	adds	r3, r0, #1
 801a636:	d102      	bne.n	801a63e <_lseek_r+0x1e>
 801a638:	6823      	ldr	r3, [r4, #0]
 801a63a:	b103      	cbz	r3, 801a63e <_lseek_r+0x1e>
 801a63c:	602b      	str	r3, [r5, #0]
 801a63e:	bd38      	pop	{r3, r4, r5, pc}
 801a640:	240024ac 	.word	0x240024ac

0801a644 <memmove>:
 801a644:	4288      	cmp	r0, r1
 801a646:	b510      	push	{r4, lr}
 801a648:	eb01 0302 	add.w	r3, r1, r2
 801a64c:	d807      	bhi.n	801a65e <memmove+0x1a>
 801a64e:	1e42      	subs	r2, r0, #1
 801a650:	4299      	cmp	r1, r3
 801a652:	d00a      	beq.n	801a66a <memmove+0x26>
 801a654:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a658:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a65c:	e7f8      	b.n	801a650 <memmove+0xc>
 801a65e:	4283      	cmp	r3, r0
 801a660:	d9f5      	bls.n	801a64e <memmove+0xa>
 801a662:	1881      	adds	r1, r0, r2
 801a664:	1ad2      	subs	r2, r2, r3
 801a666:	42d3      	cmn	r3, r2
 801a668:	d100      	bne.n	801a66c <memmove+0x28>
 801a66a:	bd10      	pop	{r4, pc}
 801a66c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a670:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a674:	e7f7      	b.n	801a666 <memmove+0x22>

0801a676 <_realloc_r>:
 801a676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a678:	4607      	mov	r7, r0
 801a67a:	4614      	mov	r4, r2
 801a67c:	460e      	mov	r6, r1
 801a67e:	b921      	cbnz	r1, 801a68a <_realloc_r+0x14>
 801a680:	4611      	mov	r1, r2
 801a682:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a686:	f7fe bf47 	b.w	8019518 <_malloc_r>
 801a68a:	b922      	cbnz	r2, 801a696 <_realloc_r+0x20>
 801a68c:	f7fe fef6 	bl	801947c <_free_r>
 801a690:	4625      	mov	r5, r4
 801a692:	4628      	mov	r0, r5
 801a694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a696:	f000 f827 	bl	801a6e8 <_malloc_usable_size_r>
 801a69a:	42a0      	cmp	r0, r4
 801a69c:	d20f      	bcs.n	801a6be <_realloc_r+0x48>
 801a69e:	4621      	mov	r1, r4
 801a6a0:	4638      	mov	r0, r7
 801a6a2:	f7fe ff39 	bl	8019518 <_malloc_r>
 801a6a6:	4605      	mov	r5, r0
 801a6a8:	2800      	cmp	r0, #0
 801a6aa:	d0f2      	beq.n	801a692 <_realloc_r+0x1c>
 801a6ac:	4631      	mov	r1, r6
 801a6ae:	4622      	mov	r2, r4
 801a6b0:	f7fe fed0 	bl	8019454 <memcpy>
 801a6b4:	4631      	mov	r1, r6
 801a6b6:	4638      	mov	r0, r7
 801a6b8:	f7fe fee0 	bl	801947c <_free_r>
 801a6bc:	e7e9      	b.n	801a692 <_realloc_r+0x1c>
 801a6be:	4635      	mov	r5, r6
 801a6c0:	e7e7      	b.n	801a692 <_realloc_r+0x1c>
	...

0801a6c4 <_read_r>:
 801a6c4:	b538      	push	{r3, r4, r5, lr}
 801a6c6:	4c07      	ldr	r4, [pc, #28]	; (801a6e4 <_read_r+0x20>)
 801a6c8:	4605      	mov	r5, r0
 801a6ca:	4608      	mov	r0, r1
 801a6cc:	4611      	mov	r1, r2
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	6022      	str	r2, [r4, #0]
 801a6d2:	461a      	mov	r2, r3
 801a6d4:	f7e9 fda4 	bl	8004220 <_read>
 801a6d8:	1c43      	adds	r3, r0, #1
 801a6da:	d102      	bne.n	801a6e2 <_read_r+0x1e>
 801a6dc:	6823      	ldr	r3, [r4, #0]
 801a6de:	b103      	cbz	r3, 801a6e2 <_read_r+0x1e>
 801a6e0:	602b      	str	r3, [r5, #0]
 801a6e2:	bd38      	pop	{r3, r4, r5, pc}
 801a6e4:	240024ac 	.word	0x240024ac

0801a6e8 <_malloc_usable_size_r>:
 801a6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6ec:	1f18      	subs	r0, r3, #4
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	bfbc      	itt	lt
 801a6f2:	580b      	ldrlt	r3, [r1, r0]
 801a6f4:	18c0      	addlt	r0, r0, r3
 801a6f6:	4770      	bx	lr

0801a6f8 <_init>:
 801a6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6fa:	bf00      	nop
 801a6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6fe:	bc08      	pop	{r3}
 801a700:	469e      	mov	lr, r3
 801a702:	4770      	bx	lr

0801a704 <_fini>:
 801a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a706:	bf00      	nop
 801a708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a70a:	bc08      	pop	{r3}
 801a70c:	469e      	mov	lr, r3
 801a70e:	4770      	bx	lr

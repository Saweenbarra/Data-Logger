
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dc38  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b0  0801ded8  0801ded8  0002ded8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f188  0801f188  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  0801f188  0801f188  0002f188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f190  0801f190  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f190  0801f190  0002f190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f194  0801f194  0002f194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  24000000  0801f198  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d94  24000350  0801f4e4  00030350  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240060e4  0801f4e4  000360e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a481  00000000  00000000  0003037a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b8b  00000000  00000000  0007a7fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002440  00000000  00000000  00082388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002148  00000000  00000000  000847c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000430f0  00000000  00000000  00086910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002831b  00000000  00000000  000c9a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017872f  00000000  00000000  000f1d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0026a44a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8d0  00000000  00000000  0026a4c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000350 	.word	0x24000350
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801dec0 	.word	0x0801dec0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000354 	.word	0x24000354
 80002dc:	0801dec0 	.word	0x0801dec0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004ce:	f1a4 0401 	sub.w	r4, r4, #1
 80004d2:	d1e9      	bne.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b972 	b.w	8000a04 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9e08      	ldr	r6, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	4688      	mov	r8, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d14b      	bne.n	80007de <__udivmoddi4+0xa6>
 8000746:	428a      	cmp	r2, r1
 8000748:	4615      	mov	r5, r2
 800074a:	d967      	bls.n	800081c <__udivmoddi4+0xe4>
 800074c:	fab2 f282 	clz	r2, r2
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0720 	rsb	r7, r2, #32
 8000756:	fa01 f302 	lsl.w	r3, r1, r2
 800075a:	fa20 f707 	lsr.w	r7, r0, r7
 800075e:	4095      	lsls	r5, r2
 8000760:	ea47 0803 	orr.w	r8, r7, r3
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000770:	fa1f fc85 	uxth.w	ip, r5
 8000774:	fb0e 8817 	mls	r8, lr, r7, r8
 8000778:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800077c:	fb07 f10c 	mul.w	r1, r7, ip
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18eb      	adds	r3, r5, r3
 8000786:	f107 30ff 	add.w	r0, r7, #4294967295
 800078a:	f080 811b 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8118 	bls.w	80009c4 <__udivmoddi4+0x28c>
 8000794:	3f02      	subs	r7, #2
 8000796:	442b      	add	r3, r5
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0fe 	udiv	r0, r3, lr
 80007a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80007ac:	45a4      	cmp	ip, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	192c      	adds	r4, r5, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8107 	bcs.w	80009c8 <__udivmoddi4+0x290>
 80007ba:	45a4      	cmp	ip, r4
 80007bc:	f240 8104 	bls.w	80009c8 <__udivmoddi4+0x290>
 80007c0:	3802      	subs	r0, #2
 80007c2:	442c      	add	r4, r5
 80007c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80007c8:	eba4 040c 	sub.w	r4, r4, ip
 80007cc:	2700      	movs	r7, #0
 80007ce:	b11e      	cbz	r6, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c6 4300 	strd	r4, r3, [r6]
 80007d8:	4639      	mov	r1, r7
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d909      	bls.n	80007f6 <__udivmoddi4+0xbe>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	f000 80eb 	beq.w	80009be <__udivmoddi4+0x286>
 80007e8:	2700      	movs	r7, #0
 80007ea:	e9c6 0100 	strd	r0, r1, [r6]
 80007ee:	4638      	mov	r0, r7
 80007f0:	4639      	mov	r1, r7
 80007f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f6:	fab3 f783 	clz	r7, r3
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	d147      	bne.n	800088e <__udivmoddi4+0x156>
 80007fe:	428b      	cmp	r3, r1
 8000800:	d302      	bcc.n	8000808 <__udivmoddi4+0xd0>
 8000802:	4282      	cmp	r2, r0
 8000804:	f200 80fa 	bhi.w	80009fc <__udivmoddi4+0x2c4>
 8000808:	1a84      	subs	r4, r0, r2
 800080a:	eb61 0303 	sbc.w	r3, r1, r3
 800080e:	2001      	movs	r0, #1
 8000810:	4698      	mov	r8, r3
 8000812:	2e00      	cmp	r6, #0
 8000814:	d0e0      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000816:	e9c6 4800 	strd	r4, r8, [r6]
 800081a:	e7dd      	b.n	80007d8 <__udivmoddi4+0xa0>
 800081c:	b902      	cbnz	r2, 8000820 <__udivmoddi4+0xe8>
 800081e:	deff      	udf	#255	; 0xff
 8000820:	fab2 f282 	clz	r2, r2
 8000824:	2a00      	cmp	r2, #0
 8000826:	f040 808f 	bne.w	8000948 <__udivmoddi4+0x210>
 800082a:	1b49      	subs	r1, r1, r5
 800082c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000830:	fa1f f885 	uxth.w	r8, r5
 8000834:	2701      	movs	r7, #1
 8000836:	fbb1 fcfe 	udiv	ip, r1, lr
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000840:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000844:	fb08 f10c 	mul.w	r1, r8, ip
 8000848:	4299      	cmp	r1, r3
 800084a:	d907      	bls.n	800085c <__udivmoddi4+0x124>
 800084c:	18eb      	adds	r3, r5, r3
 800084e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000852:	d202      	bcs.n	800085a <__udivmoddi4+0x122>
 8000854:	4299      	cmp	r1, r3
 8000856:	f200 80cd 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 800085a:	4684      	mov	ip, r0
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	b2a3      	uxth	r3, r4
 8000860:	fbb1 f0fe 	udiv	r0, r1, lr
 8000864:	fb0e 1410 	mls	r4, lr, r0, r1
 8000868:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800086c:	fb08 f800 	mul.w	r8, r8, r0
 8000870:	45a0      	cmp	r8, r4
 8000872:	d907      	bls.n	8000884 <__udivmoddi4+0x14c>
 8000874:	192c      	adds	r4, r5, r4
 8000876:	f100 33ff 	add.w	r3, r0, #4294967295
 800087a:	d202      	bcs.n	8000882 <__udivmoddi4+0x14a>
 800087c:	45a0      	cmp	r8, r4
 800087e:	f200 80b6 	bhi.w	80009ee <__udivmoddi4+0x2b6>
 8000882:	4618      	mov	r0, r3
 8000884:	eba4 0408 	sub.w	r4, r4, r8
 8000888:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800088c:	e79f      	b.n	80007ce <__udivmoddi4+0x96>
 800088e:	f1c7 0c20 	rsb	ip, r7, #32
 8000892:	40bb      	lsls	r3, r7
 8000894:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000898:	ea4e 0e03 	orr.w	lr, lr, r3
 800089c:	fa01 f407 	lsl.w	r4, r1, r7
 80008a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80008a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80008a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80008ac:	4325      	orrs	r5, r4
 80008ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80008b2:	0c2c      	lsrs	r4, r5, #16
 80008b4:	fb08 3319 	mls	r3, r8, r9, r3
 80008b8:	fa1f fa8e 	uxth.w	sl, lr
 80008bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80008c0:	fb09 f40a 	mul.w	r4, r9, sl
 80008c4:	429c      	cmp	r4, r3
 80008c6:	fa02 f207 	lsl.w	r2, r2, r7
 80008ca:	fa00 f107 	lsl.w	r1, r0, r7
 80008ce:	d90b      	bls.n	80008e8 <__udivmoddi4+0x1b0>
 80008d0:	eb1e 0303 	adds.w	r3, lr, r3
 80008d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80008d8:	f080 8087 	bcs.w	80009ea <__udivmoddi4+0x2b2>
 80008dc:	429c      	cmp	r4, r3
 80008de:	f240 8084 	bls.w	80009ea <__udivmoddi4+0x2b2>
 80008e2:	f1a9 0902 	sub.w	r9, r9, #2
 80008e6:	4473      	add	r3, lr
 80008e8:	1b1b      	subs	r3, r3, r4
 80008ea:	b2ad      	uxth	r5, r5
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008fc:	45a2      	cmp	sl, r4
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x1da>
 8000900:	eb1e 0404 	adds.w	r4, lr, r4
 8000904:	f100 33ff 	add.w	r3, r0, #4294967295
 8000908:	d26b      	bcs.n	80009e2 <__udivmoddi4+0x2aa>
 800090a:	45a2      	cmp	sl, r4
 800090c:	d969      	bls.n	80009e2 <__udivmoddi4+0x2aa>
 800090e:	3802      	subs	r0, #2
 8000910:	4474      	add	r4, lr
 8000912:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000916:	fba0 8902 	umull	r8, r9, r0, r2
 800091a:	eba4 040a 	sub.w	r4, r4, sl
 800091e:	454c      	cmp	r4, r9
 8000920:	46c2      	mov	sl, r8
 8000922:	464b      	mov	r3, r9
 8000924:	d354      	bcc.n	80009d0 <__udivmoddi4+0x298>
 8000926:	d051      	beq.n	80009cc <__udivmoddi4+0x294>
 8000928:	2e00      	cmp	r6, #0
 800092a:	d069      	beq.n	8000a00 <__udivmoddi4+0x2c8>
 800092c:	ebb1 050a 	subs.w	r5, r1, sl
 8000930:	eb64 0403 	sbc.w	r4, r4, r3
 8000934:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000938:	40fd      	lsrs	r5, r7
 800093a:	40fc      	lsrs	r4, r7
 800093c:	ea4c 0505 	orr.w	r5, ip, r5
 8000940:	e9c6 5400 	strd	r5, r4, [r6]
 8000944:	2700      	movs	r7, #0
 8000946:	e747      	b.n	80007d8 <__udivmoddi4+0xa0>
 8000948:	f1c2 0320 	rsb	r3, r2, #32
 800094c:	fa20 f703 	lsr.w	r7, r0, r3
 8000950:	4095      	lsls	r5, r2
 8000952:	fa01 f002 	lsl.w	r0, r1, r2
 8000956:	fa21 f303 	lsr.w	r3, r1, r3
 800095a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800095e:	4338      	orrs	r0, r7
 8000960:	0c01      	lsrs	r1, r0, #16
 8000962:	fbb3 f7fe 	udiv	r7, r3, lr
 8000966:	fa1f f885 	uxth.w	r8, r5
 800096a:	fb0e 3317 	mls	r3, lr, r7, r3
 800096e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000972:	fb07 f308 	mul.w	r3, r7, r8
 8000976:	428b      	cmp	r3, r1
 8000978:	fa04 f402 	lsl.w	r4, r4, r2
 800097c:	d907      	bls.n	800098e <__udivmoddi4+0x256>
 800097e:	1869      	adds	r1, r5, r1
 8000980:	f107 3cff 	add.w	ip, r7, #4294967295
 8000984:	d22f      	bcs.n	80009e6 <__udivmoddi4+0x2ae>
 8000986:	428b      	cmp	r3, r1
 8000988:	d92d      	bls.n	80009e6 <__udivmoddi4+0x2ae>
 800098a:	3f02      	subs	r7, #2
 800098c:	4429      	add	r1, r5
 800098e:	1acb      	subs	r3, r1, r3
 8000990:	b281      	uxth	r1, r0
 8000992:	fbb3 f0fe 	udiv	r0, r3, lr
 8000996:	fb0e 3310 	mls	r3, lr, r0, r3
 800099a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800099e:	fb00 f308 	mul.w	r3, r0, r8
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d907      	bls.n	80009b6 <__udivmoddi4+0x27e>
 80009a6:	1869      	adds	r1, r5, r1
 80009a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80009ac:	d217      	bcs.n	80009de <__udivmoddi4+0x2a6>
 80009ae:	428b      	cmp	r3, r1
 80009b0:	d915      	bls.n	80009de <__udivmoddi4+0x2a6>
 80009b2:	3802      	subs	r0, #2
 80009b4:	4429      	add	r1, r5
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80009bc:	e73b      	b.n	8000836 <__udivmoddi4+0xfe>
 80009be:	4637      	mov	r7, r6
 80009c0:	4630      	mov	r0, r6
 80009c2:	e709      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c4:	4607      	mov	r7, r0
 80009c6:	e6e7      	b.n	8000798 <__udivmoddi4+0x60>
 80009c8:	4618      	mov	r0, r3
 80009ca:	e6fb      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009cc:	4541      	cmp	r1, r8
 80009ce:	d2ab      	bcs.n	8000928 <__udivmoddi4+0x1f0>
 80009d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80009d4:	eb69 020e 	sbc.w	r2, r9, lr
 80009d8:	3801      	subs	r0, #1
 80009da:	4613      	mov	r3, r2
 80009dc:	e7a4      	b.n	8000928 <__udivmoddi4+0x1f0>
 80009de:	4660      	mov	r0, ip
 80009e0:	e7e9      	b.n	80009b6 <__udivmoddi4+0x27e>
 80009e2:	4618      	mov	r0, r3
 80009e4:	e795      	b.n	8000912 <__udivmoddi4+0x1da>
 80009e6:	4667      	mov	r7, ip
 80009e8:	e7d1      	b.n	800098e <__udivmoddi4+0x256>
 80009ea:	4681      	mov	r9, r0
 80009ec:	e77c      	b.n	80008e8 <__udivmoddi4+0x1b0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	442c      	add	r4, r5
 80009f2:	e747      	b.n	8000884 <__udivmoddi4+0x14c>
 80009f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f8:	442b      	add	r3, r5
 80009fa:	e72f      	b.n	800085c <__udivmoddi4+0x124>
 80009fc:	4638      	mov	r0, r7
 80009fe:	e708      	b.n	8000812 <__udivmoddi4+0xda>
 8000a00:	4637      	mov	r7, r6
 8000a02:	e6e9      	b.n	80007d8 <__udivmoddi4+0xa0>

08000a04 <__aeabi_idiv0>:
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	; 0x50
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
	  sFilterConfig.FilterIndex = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
	  sFilterConfig.FilterID1 = 0x0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	63bb      	str	r3, [r7, #56]	; 0x38
	  sFilterConfig.FilterID2 = 0x7FF;
 8000a24:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a28:	63fb      	str	r3, [r7, #60]	; 0x3c

	  FDCAN_FilterTypeDef eFilterConfig;
	  eFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a2e:	60bb      	str	r3, [r7, #8]
	  eFilterConfig.FilterIndex = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
	  eFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
	  eFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
	  eFilterConfig.FilterID1 = 0x0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
	  eFilterConfig.FilterID2 = 0x1FFFFFFF;
 8000a40:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000a44:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 8000a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f007 fb1b 	bl	8008088 <HAL_FDCAN_ConfigFilter>
	  {
	    //printf("Filter configured\n");
	  }
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &eFilterConfig) == HAL_OK)
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4619      	mov	r1, r3
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f007 fb15 	bl	8008088 <HAL_FDCAN_ConfigFilter>
	  	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2300      	movs	r3, #0
 8000a64:	2202      	movs	r2, #2
 8000a66:	2102      	movs	r1, #2
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f007 fb83 	bl	8008174 <HAL_FDCAN_ConfigGlobalFilter>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <FDCAN_Config+0x70>
	  {
	    Error_Handler();
 8000a74:	f004 fa1c 	bl	8004eb0 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f007 fbcb 	bl	8008214 <HAL_FDCAN_Start>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <FDCAN_Config+0x80>
	  {
	    Error_Handler();
 8000a84:	f004 fa14 	bl	8004eb0 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f007 fd4b 	bl	8008528 <HAL_FDCAN_ActivateNotification>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <FDCAN_Config+0x94>
	  {
	    /* Notification Error */
	    Error_Handler();
 8000a98:	f004 fa0a 	bl	8004eb0 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f007 fb96 	bl	80081ce <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000aa2:	bf00      	nop
 8000aa4:	3748      	adds	r7, #72	; 0x48
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	0000      	movs	r0, r0
 8000aac:	0000      	movs	r0, r0
	...

08000ab0 <numPlaces>:

int numPlaces (uint64_t n) {
 8000ab0:	b490      	push	{r4, r7}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	e9c7 0100 	strd	r0, r1, [r7]
	if (n < 10) return 1;
 8000aba:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	bf08      	it	eq
 8000ac2:	2b0a      	cmpeq	r3, #10
 8000ac4:	d201      	bcs.n	8000aca <numPlaces+0x1a>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e099      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 100) return 2;
 8000aca:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ace:	2c00      	cmp	r4, #0
 8000ad0:	bf08      	it	eq
 8000ad2:	2b64      	cmpeq	r3, #100	; 0x64
 8000ad4:	d201      	bcs.n	8000ada <numPlaces+0x2a>
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	e091      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 1000) return 3;
 8000ada:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ade:	f240 31e7 	movw	r1, #999	; 0x3e7
 8000ae2:	f04f 0200 	mov.w	r2, #0
 8000ae6:	42a2      	cmp	r2, r4
 8000ae8:	bf08      	it	eq
 8000aea:	4299      	cmpeq	r1, r3
 8000aec:	d301      	bcc.n	8000af2 <numPlaces+0x42>
 8000aee:	2303      	movs	r3, #3
 8000af0:	e085      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 10000) return 4;
 8000af2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000af6:	f242 710f 	movw	r1, #9999	; 0x270f
 8000afa:	f04f 0200 	mov.w	r2, #0
 8000afe:	42a2      	cmp	r2, r4
 8000b00:	bf08      	it	eq
 8000b02:	4299      	cmpeq	r1, r3
 8000b04:	d301      	bcc.n	8000b0a <numPlaces+0x5a>
 8000b06:	2304      	movs	r3, #4
 8000b08:	e079      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 100000) return 5;
 8000b0a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000b0e:	4950      	ldr	r1, [pc, #320]	; (8000c50 <numPlaces+0x1a0>)
 8000b10:	f04f 0200 	mov.w	r2, #0
 8000b14:	42a2      	cmp	r2, r4
 8000b16:	bf08      	it	eq
 8000b18:	4299      	cmpeq	r1, r3
 8000b1a:	d301      	bcc.n	8000b20 <numPlaces+0x70>
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	e06e      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 1000000) return 6;
 8000b20:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000b24:	494b      	ldr	r1, [pc, #300]	; (8000c54 <numPlaces+0x1a4>)
 8000b26:	f04f 0200 	mov.w	r2, #0
 8000b2a:	42a2      	cmp	r2, r4
 8000b2c:	bf08      	it	eq
 8000b2e:	4299      	cmpeq	r1, r3
 8000b30:	d301      	bcc.n	8000b36 <numPlaces+0x86>
 8000b32:	2306      	movs	r3, #6
 8000b34:	e063      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 10000000) return 7;
 8000b36:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000b3a:	a233      	add	r2, pc, #204	; (adr r2, 8000c08 <numPlaces+0x158>)
 8000b3c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000b40:	42a2      	cmp	r2, r4
 8000b42:	bf08      	it	eq
 8000b44:	4299      	cmpeq	r1, r3
 8000b46:	d301      	bcc.n	8000b4c <numPlaces+0x9c>
 8000b48:	2307      	movs	r3, #7
 8000b4a:	e058      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 100000000) return 8;
 8000b4c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000b50:	a22f      	add	r2, pc, #188	; (adr r2, 8000c10 <numPlaces+0x160>)
 8000b52:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000b56:	42a2      	cmp	r2, r4
 8000b58:	bf08      	it	eq
 8000b5a:	4299      	cmpeq	r1, r3
 8000b5c:	d301      	bcc.n	8000b62 <numPlaces+0xb2>
 8000b5e:	2308      	movs	r3, #8
 8000b60:	e04d      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 1000000000) return 9;
 8000b62:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000b66:	a22c      	add	r2, pc, #176	; (adr r2, 8000c18 <numPlaces+0x168>)
 8000b68:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000b6c:	42a2      	cmp	r2, r4
 8000b6e:	bf08      	it	eq
 8000b70:	4299      	cmpeq	r1, r3
 8000b72:	d301      	bcc.n	8000b78 <numPlaces+0xc8>
 8000b74:	2309      	movs	r3, #9
 8000b76:	e042      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 10000000000) return 10;
 8000b78:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000b7c:	a228      	add	r2, pc, #160	; (adr r2, 8000c20 <numPlaces+0x170>)
 8000b7e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000b82:	42a2      	cmp	r2, r4
 8000b84:	bf08      	it	eq
 8000b86:	4299      	cmpeq	r1, r3
 8000b88:	d301      	bcc.n	8000b8e <numPlaces+0xde>
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	e037      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 100000000000) return 11;
 8000b8e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000b92:	a225      	add	r2, pc, #148	; (adr r2, 8000c28 <numPlaces+0x178>)
 8000b94:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000b98:	42a2      	cmp	r2, r4
 8000b9a:	bf08      	it	eq
 8000b9c:	4299      	cmpeq	r1, r3
 8000b9e:	d301      	bcc.n	8000ba4 <numPlaces+0xf4>
 8000ba0:	230b      	movs	r3, #11
 8000ba2:	e02c      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 1000000000000) return 12;
 8000ba4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ba8:	a221      	add	r2, pc, #132	; (adr r2, 8000c30 <numPlaces+0x180>)
 8000baa:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000bae:	42a2      	cmp	r2, r4
 8000bb0:	bf08      	it	eq
 8000bb2:	4299      	cmpeq	r1, r3
 8000bb4:	d301      	bcc.n	8000bba <numPlaces+0x10a>
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	e021      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 10000000000000) return 13;
 8000bba:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000bbe:	a21e      	add	r2, pc, #120	; (adr r2, 8000c38 <numPlaces+0x188>)
 8000bc0:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000bc4:	42a2      	cmp	r2, r4
 8000bc6:	bf08      	it	eq
 8000bc8:	4299      	cmpeq	r1, r3
 8000bca:	d301      	bcc.n	8000bd0 <numPlaces+0x120>
 8000bcc:	230d      	movs	r3, #13
 8000bce:	e016      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 100000000000000) return 14;
 8000bd0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000bd4:	a21a      	add	r2, pc, #104	; (adr r2, 8000c40 <numPlaces+0x190>)
 8000bd6:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000bda:	42a2      	cmp	r2, r4
 8000bdc:	bf08      	it	eq
 8000bde:	4299      	cmpeq	r1, r3
 8000be0:	d301      	bcc.n	8000be6 <numPlaces+0x136>
 8000be2:	230e      	movs	r3, #14
 8000be4:	e00b      	b.n	8000bfe <numPlaces+0x14e>
	if (n < 1000000000000000) return 15;
 8000be6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000bea:	a217      	add	r2, pc, #92	; (adr r2, 8000c48 <numPlaces+0x198>)
 8000bec:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000bf0:	42a2      	cmp	r2, r4
 8000bf2:	bf08      	it	eq
 8000bf4:	4299      	cmpeq	r1, r3
 8000bf6:	d301      	bcc.n	8000bfc <numPlaces+0x14c>
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	e000      	b.n	8000bfe <numPlaces+0x14e>
	return 16;
 8000bfc:	2310      	movs	r3, #16
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc90      	pop	{r4, r7}
 8000c06:	4770      	bx	lr
 8000c08:	0098967f 	.word	0x0098967f
 8000c0c:	00000000 	.word	0x00000000
 8000c10:	05f5e0ff 	.word	0x05f5e0ff
 8000c14:	00000000 	.word	0x00000000
 8000c18:	3b9ac9ff 	.word	0x3b9ac9ff
 8000c1c:	00000000 	.word	0x00000000
 8000c20:	540be3ff 	.word	0x540be3ff
 8000c24:	00000002 	.word	0x00000002
 8000c28:	4876e7ff 	.word	0x4876e7ff
 8000c2c:	00000017 	.word	0x00000017
 8000c30:	d4a50fff 	.word	0xd4a50fff
 8000c34:	000000e8 	.word	0x000000e8
 8000c38:	4e729fff 	.word	0x4e729fff
 8000c3c:	00000918 	.word	0x00000918
 8000c40:	107a3fff 	.word	0x107a3fff
 8000c44:	00005af3 	.word	0x00005af3
 8000c48:	a4c67fff 	.word	0xa4c67fff
 8000c4c:	00038d7e 	.word	0x00038d7e
 8000c50:	0001869f 	.word	0x0001869f
 8000c54:	000f423f 	.word	0x000f423f

08000c58 <CANFD_Data_Process>:

int CANFD_Data_Process(char WriteArray[], int StrIndex){
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	ed2d 8b02 	vpush	{d8}
 8000c5e:	b0ad      	sub	sp, #180	; 0xb4
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	int found = 0, i = 0, size = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	char inst[128];

	for(i = 0; i <(sizeof(*Configs)/sizeof(ReadInstruction)); i++){
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000c7e:	e015      	b.n	8000cac <CANFD_Data_Process+0x54>
		if(CanFDFrame.id == Configs[i].id){
 8000c80:	4ba5      	ldr	r3, [pc, #660]	; (8000f18 <CANFD_Data_Process+0x2c0>)
 8000c82:	6819      	ldr	r1, [r3, #0]
 8000c84:	48a5      	ldr	r0, [pc, #660]	; (8000f1c <CANFD_Data_Process+0x2c4>)
 8000c86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	4413      	add	r3, r2
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	4403      	add	r3, r0
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d103      	bne.n	8000ca2 <CANFD_Data_Process+0x4a>
			found = 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			break;
 8000ca0:	e008      	b.n	8000cb4 <CANFD_Data_Process+0x5c>
	for(i = 0; i <(sizeof(*Configs)/sizeof(ReadInstruction)); i++){
 8000ca2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000cac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0e5      	beq.n	8000c80 <CANFD_Data_Process+0x28>
		}
	}

	if(found == 0){
 8000cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d11f      	bne.n	8000cfc <CANFD_Data_Process+0xa4>
		for(int j = 0; j < CanFDFrame.length; j++){
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000cc2:	e015      	b.n	8000cf0 <CANFD_Data_Process+0x98>
			StrIndex += sprintf(WriteArray + StrIndex, "%X", CanFDFrame.data.bytes[j]);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	18d0      	adds	r0, r2, r3
 8000cca:	4a93      	ldr	r2, [pc, #588]	; (8000f18 <CANFD_Data_Process+0x2c0>)
 8000ccc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3310      	adds	r3, #16
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4991      	ldr	r1, [pc, #580]	; (8000f20 <CANFD_Data_Process+0x2c8>)
 8000cda:	f01b f8c9 	bl	801be70 <siprintf>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	603b      	str	r3, [r7, #0]
		for(int j = 0; j < CanFDFrame.length; j++){
 8000ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000cea:	3301      	adds	r3, #1
 8000cec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000cf0:	4b89      	ldr	r3, [pc, #548]	; (8000f18 <CANFD_Data_Process+0x2c0>)
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8e3      	bhi.n	8000cc4 <CANFD_Data_Process+0x6c>
		}
	}
	if(found == 1){
 8000cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	f040 8101 	bne.w	8000f08 <CANFD_Data_Process+0x2b0>
		char delim[] = " ";
 8000d06:	2320      	movs	r3, #32
 8000d08:	81bb      	strh	r3, [r7, #12]
		sprintf(inst,"%s",Configs[i].Intsructions);
 8000d0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000d0e:	4613      	mov	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	4413      	add	r3, r2
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	3310      	adds	r3, #16
 8000d18:	4a80      	ldr	r2, [pc, #512]	; (8000f1c <CANFD_Data_Process+0x2c4>)
 8000d1a:	441a      	add	r2, r3
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f01b f8c4 	bl	801beb0 <strcpy>
		uint32_t k = 0, c = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	    char *ptr = strtok(inst, delim);
 8000d34:	f107 020c 	add.w	r2, r7, #12
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f01b f8be 	bl	801bec0 <strtok>
 8000d44:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	    int digits = numPlaces(Configs[i].Distribution);
 8000d48:	4974      	ldr	r1, [pc, #464]	; (8000f1c <CANFD_Data_Process+0x2c4>)
 8000d4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000d4e:	4613      	mov	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	4413      	add	r3, r2
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	440b      	add	r3, r1
 8000d58:	3308      	adds	r3, #8
 8000d5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	4621      	mov	r1, r4
 8000d62:	f7ff fea5 	bl	8000ab0 <numPlaces>
 8000d66:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

	    while(ptr != NULL){
 8000d6a:	e0c6      	b.n	8000efa <CANFD_Data_Process+0x2a2>

			size = (int)(Configs[i].Distribution/pow(10,digits - c - 1))%10;
 8000d6c:	496b      	ldr	r1, [pc, #428]	; (8000f1c <CANFD_Data_Process+0x2c4>)
 8000d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000d72:	4613      	mov	r3, r2
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	4413      	add	r3, r2
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	440b      	add	r3, r1
 8000d7c:	3308      	adds	r3, #8
 8000d7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d82:	4618      	mov	r0, r3
 8000d84:	4621      	mov	r1, r4
 8000d86:	f7ff fc89 	bl	800069c <__aeabi_ul2d>
 8000d8a:	ec41 0b18 	vmov	d8, r0, r1
 8000d8e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000da2:	eeb0 1b47 	vmov.f64	d1, d7
 8000da6:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000daa:	f019 fc7d 	bl	801a6a8 <pow>
 8000dae:	eeb0 6b40 	vmov.f64	d6, d0
 8000db2:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000db6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000dba:	ee17 2a90 	vmov	r2, s15
 8000dbe:	4b59      	ldr	r3, [pc, #356]	; (8000f24 <CANFD_Data_Process+0x2cc>)
 8000dc0:	fb83 1302 	smull	r1, r3, r3, r2
 8000dc4:	1099      	asrs	r1, r3, #2
 8000dc6:	17d3      	asrs	r3, r2, #31
 8000dc8:	1ac9      	subs	r1, r1, r3
 8000dca:	460b      	mov	r3, r1
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	440b      	add	r3, r1
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			switch(size){
 8000dd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	2b07      	cmp	r3, #7
 8000de0:	d878      	bhi.n	8000ed4 <CANFD_Data_Process+0x27c>
 8000de2:	a201      	add	r2, pc, #4	; (adr r2, 8000de8 <CANFD_Data_Process+0x190>)
 8000de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de8:	08000e09 	.word	0x08000e09
 8000dec:	08000e39 	.word	0x08000e39
 8000df0:	08000ed5 	.word	0x08000ed5
 8000df4:	08000e6b 	.word	0x08000e6b
 8000df8:	08000ed5 	.word	0x08000ed5
 8000dfc:	08000ed5 	.word	0x08000ed5
 8000e00:	08000ed5 	.word	0x08000ed5
 8000e04:	08000e9d 	.word	0x08000e9d
				case 1:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFDFrame.data.bytes[k]);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	18d0      	adds	r0, r2, r3
 8000e0e:	4a42      	ldr	r2, [pc, #264]	; (8000f18 <CANFD_Data_Process+0x2c0>)
 8000e10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e14:	4413      	add	r3, r2
 8000e16:	3310      	adds	r3, #16
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000e20:	f01b f826 	bl	801be70 <siprintf>
 8000e24:	4602      	mov	r2, r0
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	4413      	add	r3, r2
 8000e2a:	603b      	str	r3, [r7, #0]
					k++;
 8000e2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e30:	3301      	adds	r3, #1
 8000e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 8000e36:	e04d      	b.n	8000ed4 <CANFD_Data_Process+0x27c>
				case 2:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFDFrame.data.shorts[k/2]);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	18d0      	adds	r0, r2, r3
 8000e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e42:	085b      	lsrs	r3, r3, #1
 8000e44:	4a34      	ldr	r2, [pc, #208]	; (8000f18 <CANFD_Data_Process+0x2c0>)
 8000e46:	3308      	adds	r3, #8
 8000e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000e52:	f01b f80d 	bl	801be70 <siprintf>
 8000e56:	4602      	mov	r2, r0
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	603b      	str	r3, [r7, #0]
					k+=2;
 8000e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e62:	3302      	adds	r3, #2
 8000e64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 8000e68:	e034      	b.n	8000ed4 <CANFD_Data_Process+0x27c>
				case 4:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFDFrame.data.ints[k/4]);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	18d0      	adds	r0, r2, r3
 8000e70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e74:	089b      	lsrs	r3, r3, #2
 8000e76:	4a28      	ldr	r2, [pc, #160]	; (8000f18 <CANFD_Data_Process+0x2c0>)
 8000e78:	3304      	adds	r3, #4
 8000e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000e84:	f01a fff4 	bl	801be70 <siprintf>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	603b      	str	r3, [r7, #0]
					k+=4;
 8000e90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e94:	3304      	adds	r3, #4
 8000e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 8000e9a:	e01b      	b.n	8000ed4 <CANFD_Data_Process+0x27c>
				case 8:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFDFrame.data.longs[k/8]);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	18d0      	adds	r0, r2, r3
 8000ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000ea6:	08db      	lsrs	r3, r3, #3
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <CANFD_Data_Process+0x2c0>)
 8000eaa:	3302      	adds	r3, #2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	4413      	add	r3, r2
 8000eb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000ebc:	f01a ffd8 	bl	801be70 <siprintf>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	603b      	str	r3, [r7, #0]
					k+=8;
 8000ec8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000ecc:	3308      	adds	r3, #8
 8000ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 8000ed2:	bf00      	nop
			}
			c++;
 8000ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ed8:	3301      	adds	r3, #1
 8000eda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	    	if(c == digits){
 8000ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ee2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d00d      	beq.n	8000f06 <CANFD_Data_Process+0x2ae>
	    		break;
	    	}
	    	ptr = strtok(NULL, delim);
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	4619      	mov	r1, r3
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f01a ffe5 	bl	801bec0 <strtok>
 8000ef6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	    while(ptr != NULL){
 8000efa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f47f af34 	bne.w	8000d6c <CANFD_Data_Process+0x114>
 8000f04:	e000      	b.n	8000f08 <CANFD_Data_Process+0x2b0>
	    		break;
 8000f06:	bf00      	nop
	    }
	}
	return StrIndex;
 8000f08:	683b      	ldr	r3, [r7, #0]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	37b4      	adds	r7, #180	; 0xb4
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	ecbd 8b02 	vpop	{d8}
 8000f14:	bd90      	pop	{r4, r7, pc}
 8000f16:	bf00      	nop
 8000f18:	24004a00 	.word	0x24004a00
 8000f1c:	24000f48 	.word	0x24000f48
 8000f20:	0801ded8 	.word	0x0801ded8
 8000f24:	66666667 	.word	0x66666667

08000f28 <CAN_Data_Process>:

int CAN_Data_Process(char WriteArray[], int StrIndex){
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	ed2d 8b02 	vpush	{d8}
 8000f2e:	b0ad      	sub	sp, #180	; 0xb4
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
	int found = 0, i = 0, size = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	char inst[128];

	for(i = 0; i <(sizeof(*Configs)/sizeof(ReadInstruction)); i++){
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000f4e:	e015      	b.n	8000f7c <CAN_Data_Process+0x54>
		if(CanFrame.id == Configs[i].id){
 8000f50:	4ba6      	ldr	r3, [pc, #664]	; (80011ec <CAN_Data_Process+0x2c4>)
 8000f52:	6819      	ldr	r1, [r3, #0]
 8000f54:	48a6      	ldr	r0, [pc, #664]	; (80011f0 <CAN_Data_Process+0x2c8>)
 8000f56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	4413      	add	r3, r2
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	4403      	add	r3, r0
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4299      	cmp	r1, r3
 8000f68:	d103      	bne.n	8000f72 <CAN_Data_Process+0x4a>
			found = 1;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			break;
 8000f70:	e008      	b.n	8000f84 <CAN_Data_Process+0x5c>
	for(i = 0; i <(sizeof(*Configs)/sizeof(ReadInstruction)); i++){
 8000f72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f76:	3301      	adds	r3, #1
 8000f78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0e5      	beq.n	8000f50 <CAN_Data_Process+0x28>
		}
	}

	if(found == 0){
 8000f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d120      	bne.n	8000fce <CAN_Data_Process+0xa6>
		for(int j = 0; j < CanFrame.length; j++){
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000f92:	e015      	b.n	8000fc0 <CAN_Data_Process+0x98>
			StrIndex += sprintf(WriteArray + StrIndex, "%X", CanFrame.data.bytes[j]);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	18d0      	adds	r0, r2, r3
 8000f9a:	4a94      	ldr	r2, [pc, #592]	; (80011ec <CAN_Data_Process+0x2c4>)
 8000f9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3310      	adds	r3, #16
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4992      	ldr	r1, [pc, #584]	; (80011f4 <CAN_Data_Process+0x2cc>)
 8000faa:	f01a ff61 	bl	801be70 <siprintf>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	603b      	str	r3, [r7, #0]
		for(int j = 0; j < CanFrame.length; j++){
 8000fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000fc0:	4b8a      	ldr	r3, [pc, #552]	; (80011ec <CAN_Data_Process+0x2c4>)
 8000fc2:	795b      	ldrb	r3, [r3, #5]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	dbe2      	blt.n	8000f94 <CAN_Data_Process+0x6c>
		  }
	}
	if(found == 1){
 8000fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	f040 8102 	bne.w	80011dc <CAN_Data_Process+0x2b4>
		char delim[] = " ";
 8000fd8:	2320      	movs	r3, #32
 8000fda:	81bb      	strh	r3, [r7, #12]
		sprintf(inst,"%s",Configs[i].Intsructions);
 8000fdc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	3310      	adds	r3, #16
 8000fea:	4a81      	ldr	r2, [pc, #516]	; (80011f0 <CAN_Data_Process+0x2c8>)
 8000fec:	441a      	add	r2, r3
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f01a ff5b 	bl	801beb0 <strcpy>
		uint32_t k = 0, c = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	    char *ptr = strtok(inst, delim);
 8001006:	f107 020c 	add.w	r2, r7, #12
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f01a ff55 	bl	801bec0 <strtok>
 8001016:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	    int digits = numPlaces(Configs[i].Distribution);
 800101a:	4975      	ldr	r1, [pc, #468]	; (80011f0 <CAN_Data_Process+0x2c8>)
 800101c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4413      	add	r3, r2
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	440b      	add	r3, r1
 800102a:	3308      	adds	r3, #8
 800102c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001030:	4618      	mov	r0, r3
 8001032:	4621      	mov	r1, r4
 8001034:	f7ff fd3c 	bl	8000ab0 <numPlaces>
 8001038:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

	    while(ptr != NULL){
 800103c:	e0c7      	b.n	80011ce <CAN_Data_Process+0x2a6>

			size = (int)(Configs[i].Distribution/pow(10,digits - c - 1))%10;
 800103e:	496c      	ldr	r1, [pc, #432]	; (80011f0 <CAN_Data_Process+0x2c8>)
 8001040:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	440b      	add	r3, r1
 800104e:	3308      	adds	r3, #8
 8001050:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001054:	4618      	mov	r0, r3
 8001056:	4621      	mov	r1, r4
 8001058:	f7ff fb20 	bl	800069c <__aeabi_ul2d>
 800105c:	ec41 0b18 	vmov	d8, r0, r1
 8001060:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	3b01      	subs	r3, #1
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001074:	eeb0 1b47 	vmov.f64	d1, d7
 8001078:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 800107c:	f019 fb14 	bl	801a6a8 <pow>
 8001080:	eeb0 6b40 	vmov.f64	d6, d0
 8001084:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001088:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800108c:	ee17 2a90 	vmov	r2, s15
 8001090:	4b59      	ldr	r3, [pc, #356]	; (80011f8 <CAN_Data_Process+0x2d0>)
 8001092:	fb83 1302 	smull	r1, r3, r3, r2
 8001096:	1099      	asrs	r1, r3, #2
 8001098:	17d3      	asrs	r3, r2, #31
 800109a:	1ac9      	subs	r1, r1, r3
 800109c:	460b      	mov	r3, r1
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			switch(size){
 80010aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010ae:	3b01      	subs	r3, #1
 80010b0:	2b07      	cmp	r3, #7
 80010b2:	d879      	bhi.n	80011a8 <CAN_Data_Process+0x280>
 80010b4:	a201      	add	r2, pc, #4	; (adr r2, 80010bc <CAN_Data_Process+0x194>)
 80010b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ba:	bf00      	nop
 80010bc:	080010dd 	.word	0x080010dd
 80010c0:	0800110d 	.word	0x0800110d
 80010c4:	080011a9 	.word	0x080011a9
 80010c8:	0800113f 	.word	0x0800113f
 80010cc:	080011a9 	.word	0x080011a9
 80010d0:	080011a9 	.word	0x080011a9
 80010d4:	080011a9 	.word	0x080011a9
 80010d8:	08001171 	.word	0x08001171
				case 1:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFrame.data.bytes[k]);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	18d0      	adds	r0, r2, r3
 80010e2:	4a42      	ldr	r2, [pc, #264]	; (80011ec <CAN_Data_Process+0x2c4>)
 80010e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010e8:	4413      	add	r3, r2
 80010ea:	3310      	adds	r3, #16
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80010f4:	f01a febc 	bl	801be70 <siprintf>
 80010f8:	4602      	mov	r2, r0
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	603b      	str	r3, [r7, #0]
					k++;
 8001100:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001104:	3301      	adds	r3, #1
 8001106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 800110a:	e04d      	b.n	80011a8 <CAN_Data_Process+0x280>
				case 2:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFrame.data.shorts[k/2]);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	18d0      	adds	r0, r2, r3
 8001112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001116:	085b      	lsrs	r3, r3, #1
 8001118:	4a34      	ldr	r2, [pc, #208]	; (80011ec <CAN_Data_Process+0x2c4>)
 800111a:	3308      	adds	r3, #8
 800111c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001120:	461a      	mov	r2, r3
 8001122:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001126:	f01a fea3 	bl	801be70 <siprintf>
 800112a:	4602      	mov	r2, r0
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	4413      	add	r3, r2
 8001130:	603b      	str	r3, [r7, #0]
					k+=2;
 8001132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001136:	3302      	adds	r3, #2
 8001138:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 800113c:	e034      	b.n	80011a8 <CAN_Data_Process+0x280>
				case 4:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFrame.data.ints[k/4]);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	18d0      	adds	r0, r2, r3
 8001144:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	4a28      	ldr	r2, [pc, #160]	; (80011ec <CAN_Data_Process+0x2c4>)
 800114c:	3304      	adds	r3, #4
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	461a      	mov	r2, r3
 8001154:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001158:	f01a fe8a 	bl	801be70 <siprintf>
 800115c:	4602      	mov	r2, r0
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	4413      	add	r3, r2
 8001162:	603b      	str	r3, [r7, #0]
					k+=4;
 8001164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001168:	3304      	adds	r3, #4
 800116a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 800116e:	e01b      	b.n	80011a8 <CAN_Data_Process+0x280>
				case 8:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFrame.data.longs[k/8]);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	18d0      	adds	r0, r2, r3
 8001176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <CAN_Data_Process+0x2c4>)
 800117e:	3302      	adds	r3, #2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4413      	add	r3, r2
 8001184:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001188:	461a      	mov	r2, r3
 800118a:	4623      	mov	r3, r4
 800118c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001190:	f01a fe6e 	bl	801be70 <siprintf>
 8001194:	4602      	mov	r2, r0
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	4413      	add	r3, r2
 800119a:	603b      	str	r3, [r7, #0]
					k+=8;
 800119c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011a0:	3308      	adds	r3, #8
 80011a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 80011a6:	bf00      	nop
			}
			c++;
 80011a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011ac:	3301      	adds	r3, #1
 80011ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	    	if(c == digits){
 80011b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011b6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d00d      	beq.n	80011da <CAN_Data_Process+0x2b2>
	    		break;
	    	}
	    	ptr = strtok(NULL, delim);
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	4619      	mov	r1, r3
 80011c4:	2000      	movs	r0, #0
 80011c6:	f01a fe7b 	bl	801bec0 <strtok>
 80011ca:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	    while(ptr != NULL){
 80011ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f47f af33 	bne.w	800103e <CAN_Data_Process+0x116>
 80011d8:	e000      	b.n	80011dc <CAN_Data_Process+0x2b4>
	    		break;
 80011da:	bf00      	nop
	    }
	}
	return StrIndex;
 80011dc:	683b      	ldr	r3, [r7, #0]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	37b4      	adds	r7, #180	; 0xb4
 80011e2:	46bd      	mov	sp, r7
 80011e4:	ecbd 8b02 	vpop	{d8}
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	24004a78 	.word	0x24004a78
 80011f0:	24000f48 	.word	0x24000f48
 80011f4:	0801ded8 	.word	0x0801ded8
 80011f8:	66666667 	.word	0x66666667

080011fc <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001206:	4b62      	ldr	r3, [pc, #392]	; (8001390 <HAL_FDCAN_RxFifo0Callback+0x194>)
 8001208:	4a62      	ldr	r2, [pc, #392]	; (8001394 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800120a:	2140      	movs	r1, #64	; 0x40
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f007 f82d 	bl	800826c <HAL_FDCAN_GetRxMessage>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	f040 80b6 	bne.w	8001386 <HAL_FDCAN_RxFifo0Callback+0x18a>
			      {
					uint32_t time = HAL_GetTick();
 800121a:	f004 fb31 	bl	8005880 <HAL_GetTick>
 800121e:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001220:	2101      	movs	r1, #1
 8001222:	485d      	ldr	r0, [pc, #372]	; (8001398 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 8001224:	f008 f86b 	bl	80092fe <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8001228:	485c      	ldr	r0, [pc, #368]	; (800139c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 800122a:	f01a fdd5 	bl	801bdd8 <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 800122e:	4b59      	ldr	r3, [pc, #356]	; (8001394 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d122      	bne.n	800127c <HAL_FDCAN_RxFifo0Callback+0x80>
						CanFrame.id = RxHeader.Identifier;
 8001236:	4b57      	ldr	r3, [pc, #348]	; (8001394 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a59      	ldr	r2, [pc, #356]	; (80013a0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 800123c:	6013      	str	r3, [r2, #0]
						CanFrame.length = RxHeader.DataLength/65536;
 800123e:	4b55      	ldr	r3, [pc, #340]	; (8001394 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	0c1b      	lsrs	r3, r3, #16
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8001248:	715a      	strb	r2, [r3, #5]
						CanFrame.time = time;
 800124a:	4a55      	ldr	r2, [pc, #340]	; (80013a0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 8001250:	4b54      	ldr	r3, [pc, #336]	; (80013a4 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]
						memcpy(CanFrame.data.bytes, RxData, CanFrame.length);
 8001256:	4b52      	ldr	r3, [pc, #328]	; (80013a0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8001258:	795b      	ldrb	r3, [r3, #5]
 800125a:	461a      	mov	r2, r3
 800125c:	494c      	ldr	r1, [pc, #304]	; (8001390 <HAL_FDCAN_RxFifo0Callback+0x194>)
 800125e:	4852      	ldr	r0, [pc, #328]	; (80013a8 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8001260:	f01a f84e 	bl	801b300 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 8001264:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800126c:	d103      	bne.n	8001276 <HAL_FDCAN_RxFifo0Callback+0x7a>
							CanFrame.extended = 1;
 800126e:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8001270:	2201      	movs	r2, #1
 8001272:	711a      	strb	r2, [r3, #4]
 8001274:	e002      	b.n	800127c <HAL_FDCAN_RxFifo0Callback+0x80>
						}
						else{
							CanFrame.extended = 0;
 8001276:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8001278:	2200      	movs	r2, #0
 800127a:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 800127c:	4b45      	ldr	r3, [pc, #276]	; (8001394 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001284:	d17f      	bne.n	8001386 <HAL_FDCAN_RxFifo0Callback+0x18a>
						CanFDFrame.id = RxHeader.Identifier;
 8001286:	4b43      	ldr	r3, [pc, #268]	; (8001394 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a48      	ldr	r2, [pc, #288]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 800128c:	6013      	str	r3, [r2, #0]

						switch(RxHeader.DataLength/65536){
 800128e:	4b41      	ldr	r3, [pc, #260]	; (8001394 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	0c1b      	lsrs	r3, r3, #16
 8001294:	3b01      	subs	r3, #1
 8001296:	2b0e      	cmp	r3, #14
 8001298:	d85c      	bhi.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
 800129a:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	080012dd 	.word	0x080012dd
 80012a4:	080012e5 	.word	0x080012e5
 80012a8:	080012ed 	.word	0x080012ed
 80012ac:	080012f5 	.word	0x080012f5
 80012b0:	080012fd 	.word	0x080012fd
 80012b4:	08001305 	.word	0x08001305
 80012b8:	0800130d 	.word	0x0800130d
 80012bc:	08001315 	.word	0x08001315
 80012c0:	0800131d 	.word	0x0800131d
 80012c4:	08001325 	.word	0x08001325
 80012c8:	0800132d 	.word	0x0800132d
 80012cc:	08001335 	.word	0x08001335
 80012d0:	0800133d 	.word	0x0800133d
 80012d4:	08001345 	.word	0x08001345
 80012d8:	0800134d 	.word	0x0800134d
							case 1:
								CanFDFrame.length = 1;
 80012dc:	4b33      	ldr	r3, [pc, #204]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 80012de:	2201      	movs	r2, #1
 80012e0:	609a      	str	r2, [r3, #8]
								break;
 80012e2:	e037      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 2:
								CanFDFrame.length = 2;
 80012e4:	4b31      	ldr	r3, [pc, #196]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 80012e6:	2202      	movs	r2, #2
 80012e8:	609a      	str	r2, [r3, #8]
								break;
 80012ea:	e033      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 3:
								CanFDFrame.length = 3;
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 80012ee:	2203      	movs	r2, #3
 80012f0:	609a      	str	r2, [r3, #8]
								break;
 80012f2:	e02f      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 4:
								CanFDFrame.length = 4;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 80012f6:	2204      	movs	r2, #4
 80012f8:	609a      	str	r2, [r3, #8]
								break;
 80012fa:	e02b      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 5:
								CanFDFrame.length = 5;
 80012fc:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 80012fe:	2205      	movs	r2, #5
 8001300:	609a      	str	r2, [r3, #8]
								break;
 8001302:	e027      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 6:
								CanFDFrame.length = 6;
 8001304:	4b29      	ldr	r3, [pc, #164]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8001306:	2206      	movs	r2, #6
 8001308:	609a      	str	r2, [r3, #8]
								break;
 800130a:	e023      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 7:
								CanFDFrame.length = 7;
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 800130e:	2207      	movs	r2, #7
 8001310:	609a      	str	r2, [r3, #8]
								break;
 8001312:	e01f      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 8:
								CanFDFrame.length = 8;
 8001314:	4b25      	ldr	r3, [pc, #148]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8001316:	2208      	movs	r2, #8
 8001318:	609a      	str	r2, [r3, #8]
								break;
 800131a:	e01b      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 9:
								CanFDFrame.length = 12;
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 800131e:	220c      	movs	r2, #12
 8001320:	609a      	str	r2, [r3, #8]
								break;
 8001322:	e017      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 10:
								CanFDFrame.length = 16;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8001326:	2210      	movs	r2, #16
 8001328:	609a      	str	r2, [r3, #8]
								break;
 800132a:	e013      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 11:
								CanFDFrame.length = 20;
 800132c:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 800132e:	2214      	movs	r2, #20
 8001330:	609a      	str	r2, [r3, #8]
								break;
 8001332:	e00f      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 12:
								CanFDFrame.length = 24;
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8001336:	2218      	movs	r2, #24
 8001338:	609a      	str	r2, [r3, #8]
								break;
 800133a:	e00b      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 13:
								CanFDFrame.length = 32;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 800133e:	2220      	movs	r2, #32
 8001340:	609a      	str	r2, [r3, #8]
								break;
 8001342:	e007      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 14:
								CanFDFrame.length = 48;
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8001346:	2230      	movs	r2, #48	; 0x30
 8001348:	609a      	str	r2, [r3, #8]
								break;
 800134a:	e003      	b.n	8001354 <HAL_FDCAN_RxFifo0Callback+0x158>
							case 15:
								CanFDFrame.length = 64;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 800134e:	2240      	movs	r2, #64	; 0x40
 8001350:	609a      	str	r2, [r3, #8]
								break;
 8001352:	bf00      	nop
						}

						CanFDFrame.time = time;
 8001354:	4a15      	ldr	r2, [pc, #84]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]
						memcpy(CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	461a      	mov	r2, r3
 8001366:	490a      	ldr	r1, [pc, #40]	; (8001390 <HAL_FDCAN_RxFifo0Callback+0x194>)
 8001368:	4812      	ldr	r0, [pc, #72]	; (80013b4 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 800136a:	f019 ffc9 	bl	801b300 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001376:	d103      	bne.n	8001380 <HAL_FDCAN_RxFifo0Callback+0x184>
							CanFDFrame.extended = 1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 800137a:	2201      	movs	r2, #1
 800137c:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 800137e:	e002      	b.n	8001386 <HAL_FDCAN_RxFifo0Callback+0x18a>
							CanFDFrame.extended = 0;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8001382:	2200      	movs	r2, #0
 8001384:	711a      	strb	r2, [r3, #4]
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	240049bc 	.word	0x240049bc
 8001394:	24004a50 	.word	0x24004a50
 8001398:	58020400 	.word	0x58020400
 800139c:	0801dedc 	.word	0x0801dedc
 80013a0:	24004a78 	.word	0x24004a78
 80013a4:	24000370 	.word	0x24000370
 80013a8:	24004a88 	.word	0x24004a88
 80013ac:	24004a00 	.word	0x24004a00
 80013b0:	2400036c 	.word	0x2400036c
 80013b4:	24004a10 	.word	0x24004a10

080013b8 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b09e      	sub	sp, #120	; 0x78
 80013bc:	af02      	add	r7, sp, #8
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f7fe ff8b 	bl	80002e0 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d001      	beq.n	80013d4 <gps_msg_config+0x1c>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e052      	b.n	800147a <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80013d4:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4a29      	ldr	r2, [pc, #164]	; (8001484 <gps_msg_config+0xcc>)
 80013e0:	211f      	movs	r1, #31
 80013e2:	f01a fd11 	bl	801be08 <sniprintf>

	int checksum_int = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80013ee:	e00b      	b.n	8001408 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80013f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80013f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013fe:	4053      	eors	r3, r2
 8001400:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 8001402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001404:	3301      	adds	r3, #1
 8001406:	66bb      	str	r3, [r7, #104]	; 0x68
 8001408:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800140c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <gps_msg_config+0x64>
 8001416:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001418:	2b1f      	cmp	r3, #31
 800141a:	dde9      	ble.n	80013f0 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 800141c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001422:	4a19      	ldr	r2, [pc, #100]	; (8001488 <gps_msg_config+0xd0>)
 8001424:	2107      	movs	r1, #7
 8001426:	f01a fcef 	bl	801be08 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 800142a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800142e:	f107 0014 	add.w	r0, r7, #20
 8001432:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4613      	mov	r3, r2
 800143a:	4a14      	ldr	r2, [pc, #80]	; (800148c <gps_msg_config+0xd4>)
 800143c:	2129      	movs	r1, #41	; 0x29
 800143e:	f01a fce3 	bl	801be08 <sniprintf>
	printf("\n\rSending: ");
 8001442:	4813      	ldr	r0, [pc, #76]	; (8001490 <gps_msg_config+0xd8>)
 8001444:	f01a fc54 	bl	801bcf0 <iprintf>
	printf("%s", messagetosend);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	4811      	ldr	r0, [pc, #68]	; (8001494 <gps_msg_config+0xdc>)
 8001450:	f01a fc4e 	bl	801bcf0 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4618      	mov	r0, r3
 800145a:	f7fe ff41 	bl	80002e0 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	f107 0114 	add.w	r1, r7, #20
 8001466:	2364      	movs	r3, #100	; 0x64
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f00f fcf0 	bl	8010e4e <HAL_UART_Transmit>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <gps_msg_config+0xc0>
		Error_Handler();
 8001474:	f003 fd1c 	bl	8004eb0 <Error_Handler>
	}
	return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3770      	adds	r7, #112	; 0x70
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	0801def0 	.word	0x0801def0
 8001488:	0801df08 	.word	0x0801df08
 800148c:	0801df10 	.word	0x0801df10
 8001490:	0801df18 	.word	0x0801df18
 8001494:	0801df24 	.word	0x0801df24

08001498 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	4608      	mov	r0, r1
 80014a2:	4611      	mov	r1, r2
 80014a4:	461a      	mov	r2, r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	817b      	strh	r3, [r7, #10]
 80014aa:	460b      	mov	r3, r1
 80014ac:	813b      	strh	r3, [r7, #8]
 80014ae:	4613      	mov	r3, r2
 80014b0:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 80014b2:	2306      	movs	r3, #6
 80014b4:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 80014b6:	23b5      	movs	r3, #181	; 0xb5
 80014b8:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 80014ba:	2362      	movs	r3, #98	; 0x62
 80014bc:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 80014be:	2306      	movs	r3, #6
 80014c0:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 80014c2:	2308      	movs	r3, #8
 80014c4:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 80014c6:	8bfb      	ldrh	r3, [r7, #30]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 80014d0:	897b      	ldrh	r3, [r7, #10]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 80014da:	893b      	ldrh	r3, [r7, #8]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80014fa:	2302      	movs	r3, #2
 80014fc:	623b      	str	r3, [r7, #32]
 80014fe:	e013      	b.n	8001528 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8001500:	f107 0210 	add.w	r2, r7, #16
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	4413      	add	r3, r2
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800150e:	4413      	add	r3, r2
 8001510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8001514:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800151c:	4413      	add	r3, r2
 800151e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	3301      	adds	r3, #1
 8001526:	623b      	str	r3, [r7, #32]
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	2b0b      	cmp	r3, #11
 800152c:	dde8      	ble.n	8001500 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 800152e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001532:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8001534:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001538:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 800153a:	f107 0110 	add.w	r1, r7, #16
 800153e:	2364      	movs	r3, #100	; 0x64
 8001540:	220e      	movs	r2, #14
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f00f fc83 	bl	8010e4e <HAL_UART_Transmit>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <gps_rate_config+0xbe>
				Error_Handler();
 800154e:	f003 fcaf 	bl	8004eb0 <Error_Handler>
				return 1;
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <gps_rate_config+0xc0>
			}
		return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3728      	adds	r7, #40	; 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag1 = 0;
int GPS_flag2 = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  	/* Prevent unused argument(s) compilation warning */
  	UNUSED(huart);
  	memset(rxBuf+(BUFFLENGTH/2), 0, BUFFLENGTH/2);
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_UART_RxHalfCpltCallback+0x24>)
 800156a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f019 fed0 	bl	801b316 <memset>
  	GPS_flag1 = 1;
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <HAL_UART_RxHalfCpltCallback+0x28>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	24004e22 	.word	0x24004e22
 8001588:	24000374 	.word	0x24000374

0800158c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	memset(rxBuf, 0, BUFFLENGTH/2);
 8001594:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001598:	2100      	movs	r1, #0
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_UART_RxCpltCallback+0x24>)
 800159c:	f019 febb 	bl	801b316 <memset>
	GPS_flag2 = 1;
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <HAL_UART_RxCpltCallback+0x28>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	24004cc4 	.word	0x24004cc4
 80015b4:	24000378 	.word	0x24000378

080015b8 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <NRF24_DelayMicroSeconds+0x38>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <NRF24_DelayMicroSeconds+0x3c>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	0c9a      	lsrs	r2, r3, #18
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80015d8:	bf00      	nop
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	60fa      	str	r2, [r7, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1fa      	bne.n	80015da <NRF24_DelayMicroSeconds+0x22>
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	24000010 	.word	0x24000010
 80015f4:	165e9f81 	.word	0x165e9f81

080015f8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d008      	beq.n	8001618 <NRF24_csn+0x20>
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <NRF24_csn+0x38>)
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <NRF24_csn+0x3c>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	2201      	movs	r2, #1
 8001610:	4619      	mov	r1, r3
 8001612:	f007 fe5b 	bl	80092cc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8001616:	e007      	b.n	8001628 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <NRF24_csn+0x38>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <NRF24_csn+0x3c>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	2200      	movs	r2, #0
 8001622:	4619      	mov	r1, r3
 8001624:	f007 fe52 	bl	80092cc <HAL_GPIO_WritePin>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	24000384 	.word	0x24000384
 8001634:	24000388 	.word	0x24000388

08001638 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d008      	beq.n	8001658 <NRF24_ce+0x20>
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <NRF24_ce+0x38>)
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <NRF24_ce+0x3c>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	2201      	movs	r2, #1
 8001650:	4619      	mov	r1, r3
 8001652:	f007 fe3b 	bl	80092cc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8001656:	e007      	b.n	8001668 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <NRF24_ce+0x38>)
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <NRF24_ce+0x3c>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	2200      	movs	r2, #0
 8001662:	4619      	mov	r1, r3
 8001664:	f007 fe32 	bl	80092cc <HAL_GPIO_WritePin>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	24000384 	.word	0x24000384
 8001674:	2400038a 	.word	0x2400038a

08001678 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff ffb8 	bl	80015f8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	b2db      	uxtb	r3, r3
 8001690:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001692:	f107 010c 	add.w	r1, r7, #12
 8001696:	2364      	movs	r3, #100	; 0x64
 8001698:	2201      	movs	r2, #1
 800169a:	480a      	ldr	r0, [pc, #40]	; (80016c4 <NRF24_read_register+0x4c>)
 800169c:	f00e fbce 	bl	800fe3c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	1c59      	adds	r1, r3, #1
 80016a6:	2364      	movs	r3, #100	; 0x64
 80016a8:	2201      	movs	r2, #1
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <NRF24_read_register+0x4c>)
 80016ac:	f00e fdb8 	bl	8010220 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80016b0:	7b7b      	ldrb	r3, [r7, #13]
 80016b2:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff ff9f 	bl	80015f8 <NRF24_csn>
	return retData;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	2400038c 	.word	0x2400038c

080016c8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	4613      	mov	r3, r2
 80016d6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff ff8d 	bl	80015f8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80016e8:	f107 010c 	add.w	r1, r7, #12
 80016ec:	2364      	movs	r3, #100	; 0x64
 80016ee:	2201      	movs	r2, #1
 80016f0:	4808      	ldr	r0, [pc, #32]	; (8001714 <NRF24_read_registerN+0x4c>)
 80016f2:	f00e fba3 	bl	800fe3c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80016f6:	79bb      	ldrb	r3, [r7, #6]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	2364      	movs	r3, #100	; 0x64
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <NRF24_read_registerN+0x4c>)
 8001700:	f00e fd8e 	bl	8010220 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8001704:	2001      	movs	r0, #1
 8001706:	f7ff ff77 	bl	80015f8 <NRF24_csn>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2400038c 	.word	0x2400038c

08001718 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	460a      	mov	r2, r1
 8001722:	71fb      	strb	r3, [r7, #7]
 8001724:	4613      	mov	r3, r2
 8001726:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff ff65 	bl	80015f8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	b2db      	uxtb	r3, r3
 8001736:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800173c:	f107 010c 	add.w	r1, r7, #12
 8001740:	2364      	movs	r3, #100	; 0x64
 8001742:	2202      	movs	r2, #2
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <NRF24_write_register+0x40>)
 8001746:	f00e fb79 	bl	800fe3c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800174a:	2001      	movs	r0, #1
 800174c:	f7ff ff54 	bl	80015f8 <NRF24_csn>
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2400038c 	.word	0x2400038c

0800175c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	4613      	mov	r3, r2
 800176a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff ff43 	bl	80015f8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	f043 0320 	orr.w	r3, r3, #32
 8001778:	b2db      	uxtb	r3, r3
 800177a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800177c:	f107 010c 	add.w	r1, r7, #12
 8001780:	2364      	movs	r3, #100	; 0x64
 8001782:	2201      	movs	r2, #1
 8001784:	4808      	ldr	r0, [pc, #32]	; (80017a8 <NRF24_write_registerN+0x4c>)
 8001786:	f00e fb59 	bl	800fe3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800178a:	79bb      	ldrb	r3, [r7, #6]
 800178c:	b29a      	uxth	r2, r3
 800178e:	2364      	movs	r3, #100	; 0x64
 8001790:	6839      	ldr	r1, [r7, #0]
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <NRF24_write_registerN+0x4c>)
 8001794:	f00e fb52 	bl	800fe3c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001798:	2001      	movs	r0, #1
 800179a:	f7ff ff2d 	bl	80015f8 <NRF24_csn>
}
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2400038c 	.word	0x2400038c

080017ac <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff ff1d 	bl	80015f8 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80017be:	23a0      	movs	r3, #160	; 0xa0
 80017c0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80017c2:	f107 010f 	add.w	r1, r7, #15
 80017c6:	2364      	movs	r3, #100	; 0x64
 80017c8:	2201      	movs	r2, #1
 80017ca:	4808      	ldr	r0, [pc, #32]	; (80017ec <NRF24_write_payload+0x40>)
 80017cc:	f00e fb36 	bl	800fe3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	2364      	movs	r3, #100	; 0x64
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <NRF24_write_payload+0x40>)
 80017da:	f00e fb2f 	bl	800fe3c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff ff0a 	bl	80015f8 <NRF24_csn>
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2400038c 	.word	0x2400038c

080017f0 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80017f4:	21ff      	movs	r1, #255	; 0xff
 80017f6:	20e1      	movs	r0, #225	; 0xe1
 80017f8:	f7ff ff8e 	bl	8001718 <NRF24_write_register>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001804:	21ff      	movs	r1, #255	; 0xff
 8001806:	20e2      	movs	r0, #226	; 0xe2
 8001808:	f7ff ff86 	bl	8001718 <NRF24_write_register>
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001816:	2007      	movs	r0, #7
 8001818:	f7ff ff2e 	bl	8001678 <NRF24_read_register>
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001820:	79fb      	ldrb	r3, [r7, #7]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 800182c:	b082      	sub	sp, #8
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001840:	4b66      	ldr	r3, [pc, #408]	; (80019dc <NRF24_begin+0x1b0>)
 8001842:	4618      	mov	r0, r3
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	2288      	movs	r2, #136	; 0x88
 800184a:	4619      	mov	r1, r3
 800184c:	f019 fd58 	bl	801b300 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001850:	4a63      	ldr	r2, [pc, #396]	; (80019e0 <NRF24_begin+0x1b4>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001856:	4a63      	ldr	r2, [pc, #396]	; (80019e4 <NRF24_begin+0x1b8>)
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800185c:	4a62      	ldr	r2, [pc, #392]	; (80019e8 <NRF24_begin+0x1bc>)
 800185e:	883b      	ldrh	r3, [r7, #0]
 8001860:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f7ff fec8 	bl	80015f8 <NRF24_csn>
	NRF24_ce(0);
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff fee5 	bl	8001638 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800186e:	2005      	movs	r0, #5
 8001870:	f004 f812 	bl	8005898 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8001874:	2108      	movs	r1, #8
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff ff4e 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800187c:	213f      	movs	r1, #63	; 0x3f
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff ff4a 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001884:	2103      	movs	r1, #3
 8001886:	2002      	movs	r0, #2
 8001888:	f7ff ff46 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800188c:	2103      	movs	r1, #3
 800188e:	2003      	movs	r0, #3
 8001890:	f7ff ff42 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001894:	2103      	movs	r1, #3
 8001896:	2004      	movs	r0, #4
 8001898:	f7ff ff3e 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800189c:	2102      	movs	r1, #2
 800189e:	2005      	movs	r0, #5
 80018a0:	f7ff ff3a 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80018a4:	210f      	movs	r1, #15
 80018a6:	2006      	movs	r0, #6
 80018a8:	f7ff ff36 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80018ac:	210e      	movs	r1, #14
 80018ae:	2007      	movs	r0, #7
 80018b0:	f7ff ff32 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80018b4:	2100      	movs	r1, #0
 80018b6:	2008      	movs	r0, #8
 80018b8:	f7ff ff2e 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80018bc:	2100      	movs	r1, #0
 80018be:	2009      	movs	r0, #9
 80018c0:	f7ff ff2a 	bl	8001718 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80018c4:	23e7      	movs	r3, #231	; 0xe7
 80018c6:	733b      	strb	r3, [r7, #12]
 80018c8:	23e7      	movs	r3, #231	; 0xe7
 80018ca:	72fb      	strb	r3, [r7, #11]
 80018cc:	23e7      	movs	r3, #231	; 0xe7
 80018ce:	72bb      	strb	r3, [r7, #10]
 80018d0:	23e7      	movs	r3, #231	; 0xe7
 80018d2:	727b      	strb	r3, [r7, #9]
 80018d4:	23e7      	movs	r3, #231	; 0xe7
 80018d6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	2205      	movs	r2, #5
 80018de:	4619      	mov	r1, r3
 80018e0:	200a      	movs	r0, #10
 80018e2:	f7ff ff3b 	bl	800175c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80018e6:	23c2      	movs	r3, #194	; 0xc2
 80018e8:	733b      	strb	r3, [r7, #12]
 80018ea:	23c2      	movs	r3, #194	; 0xc2
 80018ec:	72fb      	strb	r3, [r7, #11]
 80018ee:	23c2      	movs	r3, #194	; 0xc2
 80018f0:	72bb      	strb	r3, [r7, #10]
 80018f2:	23c2      	movs	r3, #194	; 0xc2
 80018f4:	727b      	strb	r3, [r7, #9]
 80018f6:	23c2      	movs	r3, #194	; 0xc2
 80018f8:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	2205      	movs	r2, #5
 8001900:	4619      	mov	r1, r3
 8001902:	200b      	movs	r0, #11
 8001904:	f7ff ff2a 	bl	800175c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001908:	21c3      	movs	r1, #195	; 0xc3
 800190a:	200c      	movs	r0, #12
 800190c:	f7ff ff04 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001910:	21c4      	movs	r1, #196	; 0xc4
 8001912:	200d      	movs	r0, #13
 8001914:	f7ff ff00 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001918:	21c5      	movs	r1, #197	; 0xc5
 800191a:	200e      	movs	r0, #14
 800191c:	f7ff fefc 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001920:	21c6      	movs	r1, #198	; 0xc6
 8001922:	200f      	movs	r0, #15
 8001924:	f7ff fef8 	bl	8001718 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001928:	23e7      	movs	r3, #231	; 0xe7
 800192a:	733b      	strb	r3, [r7, #12]
 800192c:	23e7      	movs	r3, #231	; 0xe7
 800192e:	72fb      	strb	r3, [r7, #11]
 8001930:	23e7      	movs	r3, #231	; 0xe7
 8001932:	72bb      	strb	r3, [r7, #10]
 8001934:	23e7      	movs	r3, #231	; 0xe7
 8001936:	727b      	strb	r3, [r7, #9]
 8001938:	23e7      	movs	r3, #231	; 0xe7
 800193a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	2205      	movs	r2, #5
 8001942:	4619      	mov	r1, r3
 8001944:	2010      	movs	r0, #16
 8001946:	f7ff ff09 	bl	800175c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800194a:	2100      	movs	r1, #0
 800194c:	2011      	movs	r0, #17
 800194e:	f7ff fee3 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001952:	2100      	movs	r1, #0
 8001954:	2012      	movs	r0, #18
 8001956:	f7ff fedf 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800195a:	2100      	movs	r1, #0
 800195c:	2013      	movs	r0, #19
 800195e:	f7ff fedb 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001962:	2100      	movs	r1, #0
 8001964:	2014      	movs	r0, #20
 8001966:	f7ff fed7 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800196a:	2100      	movs	r1, #0
 800196c:	2015      	movs	r0, #21
 800196e:	f7ff fed3 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001972:	2100      	movs	r1, #0
 8001974:	2016      	movs	r0, #22
 8001976:	f7ff fecf 	bl	8001718 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800197a:	f000 fa89 	bl	8001e90 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800197e:	2100      	movs	r1, #0
 8001980:	201c      	movs	r0, #28
 8001982:	f7ff fec9 	bl	8001718 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001986:	2100      	movs	r1, #0
 8001988:	201d      	movs	r0, #29
 800198a:	f7ff fec5 	bl	8001718 <NRF24_write_register>
	printRadioSettings();
 800198e:	f000 fa99 	bl	8001ec4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001992:	210f      	movs	r1, #15
 8001994:	200f      	movs	r0, #15
 8001996:	f000 f8ad 	bl	8001af4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800199a:	2003      	movs	r0, #3
 800199c:	f000 f927 	bl	8001bee <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f000 f95d 	bl	8001c60 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80019a6:	2002      	movs	r0, #2
 80019a8:	f000 f9a0 	bl	8001cec <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80019ac:	f000 f8f2 	bl	8001b94 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80019b0:	2020      	movs	r0, #32
 80019b2:	f000 f8cf 	bl	8001b54 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80019b6:	f000 fa62 	bl	8001e7e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80019ba:	204c      	movs	r0, #76	; 0x4c
 80019bc:	f000 f8b5 	bl	8001b2a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80019c0:	f7ff ff16 	bl	80017f0 <NRF24_flush_tx>
	NRF24_flush_rx();
 80019c4:	f7ff ff1c 	bl	8001800 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80019c8:	f000 f9b8 	bl	8001d3c <NRF24_powerDown>
	
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019d6:	b002      	add	sp, #8
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	2400038c 	.word	0x2400038c
 80019e0:	24000384 	.word	0x24000384
 80019e4:	24000388 	.word	0x24000388
 80019e8:	2400038a 	.word	0x2400038a

080019ec <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff fe21 	bl	8001638 <NRF24_ce>
	NRF24_flush_tx();
 80019f6:	f7ff fefb 	bl	80017f0 <NRF24_flush_tx>
	NRF24_flush_rx();
 80019fa:	f7ff ff01 	bl	8001800 <NRF24_flush_rx>
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8001a10:	f000 fa35 	bl	8001e7e <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	4619      	mov	r1, r3
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f9ce 	bl	8001dba <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8001a1e:	f003 ff2f 	bl	8005880 <HAL_GetTick>
 8001a22:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001a24:	230a      	movs	r3, #10
 8001a26:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001a28:	f107 030d 	add.w	r3, r7, #13
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4619      	mov	r1, r3
 8001a30:	2008      	movs	r0, #8
 8001a32:	f7ff fe49 	bl	80016c8 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8001a36:	f7ff feeb 	bl	8001810 <NRF24_get_status>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d107      	bne.n	8001a58 <NRF24_write+0x54>
 8001a48:	f003 ff1a 	bl	8005880 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8e7      	bhi.n	8001a28 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001a58:	f107 010b 	add.w	r1, r7, #11
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <NRF24_write+0x90>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f9d8 	bl	8001e18 <NRF24_whatHappened>
	retStatus = tx_ok;
 8001a68:	7b3b      	ldrb	r3, [r7, #12]
 8001a6a:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <NRF24_write+0x90>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001a74:	f000 f886 	bl	8001b84 <NRF24_getDynamicPayloadSize>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <NRF24_write+0x94>)
 8001a7e:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8001a80:	f000 f80c 	bl	8001a9c <NRF24_available>
	NRF24_flush_tx();
 8001a84:	f7ff feb4 	bl	80017f0 <NRF24_flush_tx>
	return retStatus;
 8001a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2400037c 	.word	0x2400037c
 8001a98:	2400037d 	.word	0x2400037d

08001a9c <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f000 f95a 	bl	8001d5a <NRF24_availablePipe>
 8001aa6:	4603      	mov	r3, r0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	2205      	movs	r2, #5
 8001aba:	4619      	mov	r1, r3
 8001abc:	200a      	movs	r0, #10
 8001abe:	f7ff fe4d 	bl	800175c <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	2205      	movs	r2, #5
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	2010      	movs	r0, #16
 8001aca:	f7ff fe47 	bl	800175c <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <NRF24_openWritingPipe+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	bf28      	it	cs
 8001adc:	4613      	movcs	r3, r2
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	2011      	movs	r0, #17
 8001ae4:	f7ff fe18 	bl	8001718 <NRF24_write_register>
}
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2400037e 	.word	0x2400037e

08001af4 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	460a      	mov	r2, r1
 8001afe:	71fb      	strb	r3, [r7, #7]
 8001b00:	4613      	mov	r3, r2
 8001b02:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	b25a      	sxtb	r2, r3
 8001b0a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b25b      	sxtb	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	2004      	movs	r0, #4
 8001b1e:	f7ff fdfb 	bl	8001718 <NRF24_write_register>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001b34:	237f      	movs	r3, #127	; 0x7f
 8001b36:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	bf28      	it	cs
 8001b40:	4613      	movcs	r3, r2
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	4619      	mov	r1, r3
 8001b46:	2005      	movs	r0, #5
 8001b48:	f7ff fde6 	bl	8001718 <NRF24_write_register>
}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001b5e:	2320      	movs	r3, #32
 8001b60:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	4293      	cmp	r3, r2
 8001b68:	bf28      	it	cs
 8001b6a:	4613      	movcs	r3, r2
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <NRF24_setPayloadSize+0x2c>)
 8001b70:	701a      	strb	r2, [r3, #0]
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	2400037e 	.word	0x2400037e

08001b84 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001b88:	2060      	movs	r0, #96	; 0x60
 8001b8a:	f7ff fd75 	bl	8001678 <NRF24_read_register>
 8001b8e:	4603      	mov	r3, r0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001b98:	201d      	movs	r0, #29
 8001b9a:	f7ff fd6d 	bl	8001678 <NRF24_read_register>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f023 0304 	bic.w	r3, r3, #4
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	201d      	movs	r0, #29
 8001baa:	f7ff fdb5 	bl	8001718 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	201c      	movs	r0, #28
 8001bb2:	f7ff fdb1 	bl	8001718 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001bb6:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <NRF24_disableDynamicPayloads+0x2c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2400037f 	.word	0x2400037f

08001bc4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d004      	beq.n	8001bde <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001bd4:	213f      	movs	r1, #63	; 0x3f
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f7ff fd9e 	bl	8001718 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001bdc:	e003      	b.n	8001be6 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001bde:	2100      	movs	r1, #0
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff fd99 	bl	8001718 <NRF24_write_register>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001bf8:	2006      	movs	r0, #6
 8001bfa:	f7ff fd3d 	bl	8001678 <NRF24_read_register>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	f023 0306 	bic.w	r3, r3, #6
 8001c08:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d104      	bne.n	8001c1a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	f043 0306 	orr.w	r3, r3, #6
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e019      	b.n	8001c4e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d104      	bne.n	8001c2a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	e011      	b.n	8001c4e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d104      	bne.n	8001c3a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	f043 0302 	orr.w	r3, r3, #2
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e009      	b.n	8001c4e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d006      	beq.n	8001c4e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d103      	bne.n	8001c4e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	f043 0306 	orr.w	r3, r3, #6
 8001c4c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	4619      	mov	r1, r3
 8001c52:	2006      	movs	r0, #6
 8001c54:	f7ff fd60 	bl	8001718 <NRF24_write_register>
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001c6e:	2006      	movs	r0, #6
 8001c70:	f7ff fd02 	bl	8001678 <NRF24_read_register>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <NRF24_setDataRate+0x88>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001c7e:	7bbb      	ldrb	r3, [r7, #14]
 8001c80:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001c84:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d107      	bne.n	8001c9c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <NRF24_setDataRate+0x88>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001c92:	7bbb      	ldrb	r3, [r7, #14]
 8001c94:	f043 0320 	orr.w	r3, r3, #32
 8001c98:	73bb      	strb	r3, [r7, #14]
 8001c9a:	e00d      	b.n	8001cb8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <NRF24_setDataRate+0x88>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001ca8:	7bbb      	ldrb	r3, [r7, #14]
 8001caa:	f043 0308 	orr.w	r3, r3, #8
 8001cae:	73bb      	strb	r3, [r7, #14]
 8001cb0:	e002      	b.n	8001cb8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <NRF24_setDataRate+0x88>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001cb8:	7bbb      	ldrb	r3, [r7, #14]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	2006      	movs	r0, #6
 8001cbe:	f7ff fd2b 	bl	8001718 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001cc2:	2006      	movs	r0, #6
 8001cc4:	f7ff fcd8 	bl	8001678 <NRF24_read_register>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d102      	bne.n	8001cd8 <NRF24_setDataRate+0x78>
  {
    result = true;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	e002      	b.n	8001cde <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <NRF24_setDataRate+0x88>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	24000380 	.word	0x24000380

08001cec <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f7ff fcbe 	bl	8001678 <NRF24_read_register>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f023 030c 	bic.w	r3, r3, #12
 8001d02:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00f      	beq.n	8001d2a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d104      	bne.n	8001d1a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	e007      	b.n	8001d2a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	f043 0308 	orr.w	r3, r3, #8
 8001d20:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff fcf2 	bl	8001718 <NRF24_write_register>
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001d40:	2000      	movs	r0, #0
 8001d42:	f7ff fc99 	bl	8001678 <NRF24_read_register>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f023 0302 	bic.w	r3, r3, #2
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	4619      	mov	r1, r3
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fce1 	bl	8001718 <NRF24_write_register>
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001d62:	f7ff fd55 	bl	8001810 <NRF24_get_status>
 8001d66:	4603      	mov	r3, r0
 8001d68:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf14      	ite	ne
 8001d74:	2301      	movne	r3, #1
 8001d76:	2300      	moveq	r3, #0
 8001d78:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001d7a:	7bbb      	ldrb	r3, [r7, #14]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d017      	beq.n	8001db0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	085b      	lsrs	r3, r3, #1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001d96:	2140      	movs	r1, #64	; 0x40
 8001d98:	2007      	movs	r0, #7
 8001d9a:	f7ff fcbd 	bl	8001718 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001da8:	2120      	movs	r1, #32
 8001daa:	2007      	movs	r0, #7
 8001dac:	f7ff fcb4 	bl	8001718 <NRF24_write_register>
    }
  }
  return result;
 8001db0:	7bbb      	ldrb	r3, [r7, #14]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff fc36 	bl	8001638 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff fc53 	bl	8001678 <NRF24_read_register>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	4619      	mov	r1, r3
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7ff fc98 	bl	8001718 <NRF24_write_register>
  NRF24_ce(1);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7ff fc25 	bl	8001638 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8001dee:	2096      	movs	r0, #150	; 0x96
 8001df0:	f7ff fbe2 	bl	80015b8 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	4619      	mov	r1, r3
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff fcd7 	bl	80017ac <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f7ff fc1a 	bl	8001638 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001e04:	200f      	movs	r0, #15
 8001e06:	f7ff fbd7 	bl	80015b8 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff fc14 	bl	8001638 <NRF24_ce>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001e24:	f7ff fcf4 	bl	8001810 <NRF24_get_status>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001e32:	2170      	movs	r1, #112	; 0x70
 8001e34:	2007      	movs	r0, #7
 8001e36:	f7ff fc6f 	bl	8001718 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf14      	ite	ne
 8001e58:	2301      	movne	r3, #1
 8001e5a:	2300      	moveq	r3, #0
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf14      	ite	ne
 8001e6c:	2301      	movne	r3, #1
 8001e6e:	2300      	moveq	r3, #0
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	701a      	strb	r2, [r3, #0]
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001e82:	2170      	movs	r1, #112	; 0x70
 8001e84:	2007      	movs	r0, #7
 8001e86:	f7ff fc47 	bl	8001718 <NRF24_write_register>
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff fbae 	bl	80015f8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001e9c:	2350      	movs	r3, #80	; 0x50
 8001e9e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001ea0:	2373      	movs	r3, #115	; 0x73
 8001ea2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001ea4:	1d39      	adds	r1, r7, #4
 8001ea6:	2364      	movs	r3, #100	; 0x64
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <NRF24_ACTIVATE_cmd+0x30>)
 8001eac:	f00d ffc6 	bl	800fe3c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f7ff fba1 	bl	80015f8 <NRF24_csn>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2400038c 	.word	0x2400038c

08001ec4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec6:	b0a1      	sub	sp, #132	; 0x84
 8001ec8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	4ab6      	ldr	r2, [pc, #728]	; (80021a8 <printRadioSettings+0x2e4>)
 8001ed0:	461c      	mov	r4, r3
 8001ed2:	4615      	mov	r5, r2
 8001ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ee0:	682b      	ldr	r3, [r5, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	8022      	strh	r2, [r4, #0]
 8001ee6:	3402      	adds	r4, #2
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe f9f5 	bl	80002e0 <strlen>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	f107 0108 	add.w	r1, r7, #8
 8001efe:	230a      	movs	r3, #10
 8001f00:	48aa      	ldr	r0, [pc, #680]	; (80021ac <printRadioSettings+0x2e8>)
 8001f02:	f00e ffa4 	bl	8010e4e <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff fbb6 	bl	8001678 <NRF24_read_register>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001f12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d020      	beq.n	8001f60 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001f1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00b      	beq.n	8001f42 <printRadioSettings+0x7e>
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	4aa0      	ldr	r2, [pc, #640]	; (80021b0 <printRadioSettings+0x2ec>)
 8001f30:	461c      	mov	r4, r3
 8001f32:	4615      	mov	r5, r2
 8001f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f40:	e017      	b.n	8001f72 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	4a9b      	ldr	r2, [pc, #620]	; (80021b4 <printRadioSettings+0x2f0>)
 8001f48:	461c      	mov	r4, r3
 8001f4a:	4615      	mov	r5, r2
 8001f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f54:	c403      	stmia	r4!, {r0, r1}
 8001f56:	8022      	strh	r2, [r4, #0]
 8001f58:	3402      	adds	r4, #2
 8001f5a:	0c13      	lsrs	r3, r2, #16
 8001f5c:	7023      	strb	r3, [r4, #0]
 8001f5e:	e008      	b.n	8001f72 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001f60:	f107 0308 	add.w	r3, r7, #8
 8001f64:	4a94      	ldr	r2, [pc, #592]	; (80021b8 <printRadioSettings+0x2f4>)
 8001f66:	461c      	mov	r4, r3
 8001f68:	4615      	mov	r5, r2
 8001f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f6e:	682b      	ldr	r3, [r5, #0]
 8001f70:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe f9b2 	bl	80002e0 <strlen>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	f107 0108 	add.w	r1, r7, #8
 8001f84:	230a      	movs	r3, #10
 8001f86:	4889      	ldr	r0, [pc, #548]	; (80021ac <printRadioSettings+0x2e8>)
 8001f88:	f00e ff61 	bl	8010e4e <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f7ff fb73 	bl	8001678 <NRF24_read_register>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001f98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f9c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bfcc      	ite	gt
 8001fa4:	2301      	movgt	r3, #1
 8001fa6:	2300      	movle	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001fac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fb0:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bfcc      	ite	gt
 8001fb8:	2301      	movgt	r3, #1
 8001fba:	2300      	movle	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001fc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fc4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bfcc      	ite	gt
 8001fcc:	2301      	movgt	r3, #1
 8001fce:	2300      	movle	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001fd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fd8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bfcc      	ite	gt
 8001fe0:	2301      	movgt	r3, #1
 8001fe2:	2300      	movle	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001fe8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fec:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bfcc      	ite	gt
 8001ff4:	2301      	movgt	r3, #1
 8001ff6:	2300      	movle	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ffc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002000:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002004:	2b00      	cmp	r3, #0
 8002006:	bfcc      	ite	gt
 8002008:	2301      	movgt	r3, #1
 800200a:	2300      	movle	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f107 0008 	add.w	r0, r7, #8
 8002012:	9303      	str	r3, [sp, #12]
 8002014:	9402      	str	r4, [sp, #8]
 8002016:	9101      	str	r1, [sp, #4]
 8002018:	9200      	str	r2, [sp, #0]
 800201a:	4633      	mov	r3, r6
 800201c:	462a      	mov	r2, r5
 800201e:	4967      	ldr	r1, [pc, #412]	; (80021bc <printRadioSettings+0x2f8>)
 8002020:	f019 ff26 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002024:	f107 0308 	add.w	r3, r7, #8
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe f959 	bl	80002e0 <strlen>
 800202e:	4603      	mov	r3, r0
 8002030:	b29a      	uxth	r2, r3
 8002032:	f107 0108 	add.w	r1, r7, #8
 8002036:	230a      	movs	r3, #10
 8002038:	485c      	ldr	r0, [pc, #368]	; (80021ac <printRadioSettings+0x2e8>)
 800203a:	f00e ff08 	bl	8010e4e <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800203e:	2002      	movs	r0, #2
 8002040:	f7ff fb1a 	bl	8001678 <NRF24_read_register>
 8002044:	4603      	mov	r3, r0
 8002046:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800204a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800204e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002052:	2b00      	cmp	r3, #0
 8002054:	bfcc      	ite	gt
 8002056:	2301      	movgt	r3, #1
 8002058:	2300      	movle	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800205e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002062:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002066:	2b00      	cmp	r3, #0
 8002068:	bfcc      	ite	gt
 800206a:	2301      	movgt	r3, #1
 800206c:	2300      	movle	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002072:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002076:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800207a:	2b00      	cmp	r3, #0
 800207c:	bfcc      	ite	gt
 800207e:	2301      	movgt	r3, #1
 8002080:	2300      	movle	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002086:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800208a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800208e:	2b00      	cmp	r3, #0
 8002090:	bfcc      	ite	gt
 8002092:	2301      	movgt	r3, #1
 8002094:	2300      	movle	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800209a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800209e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bfcc      	ite	gt
 80020a6:	2301      	movgt	r3, #1
 80020a8:	2300      	movle	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80020ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020b2:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bfcc      	ite	gt
 80020ba:	2301      	movgt	r3, #1
 80020bc:	2300      	movle	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f107 0008 	add.w	r0, r7, #8
 80020c4:	9303      	str	r3, [sp, #12]
 80020c6:	9402      	str	r4, [sp, #8]
 80020c8:	9101      	str	r1, [sp, #4]
 80020ca:	9200      	str	r2, [sp, #0]
 80020cc:	4633      	mov	r3, r6
 80020ce:	462a      	mov	r2, r5
 80020d0:	493b      	ldr	r1, [pc, #236]	; (80021c0 <printRadioSettings+0x2fc>)
 80020d2:	f019 fecd 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe f900 	bl	80002e0 <strlen>
 80020e0:	4603      	mov	r3, r0
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	f107 0108 	add.w	r1, r7, #8
 80020e8:	230a      	movs	r3, #10
 80020ea:	4830      	ldr	r0, [pc, #192]	; (80021ac <printRadioSettings+0x2e8>)
 80020ec:	f00e feaf 	bl	8010e4e <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80020f0:	2003      	movs	r0, #3
 80020f2:	f7ff fac1 	bl	8001678 <NRF24_read_register>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8002100:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002104:	3302      	adds	r3, #2
 8002106:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800210a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800210e:	f107 0308 	add.w	r3, r7, #8
 8002112:	492c      	ldr	r1, [pc, #176]	; (80021c4 <printRadioSettings+0x300>)
 8002114:	4618      	mov	r0, r3
 8002116:	f019 feab 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800211a:	f107 0308 	add.w	r3, r7, #8
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f8de 	bl	80002e0 <strlen>
 8002124:	4603      	mov	r3, r0
 8002126:	b29a      	uxth	r2, r3
 8002128:	f107 0108 	add.w	r1, r7, #8
 800212c:	230a      	movs	r3, #10
 800212e:	481f      	ldr	r0, [pc, #124]	; (80021ac <printRadioSettings+0x2e8>)
 8002130:	f00e fe8d 	bl	8010e4e <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8002134:	2005      	movs	r0, #5
 8002136:	f7ff fa9f 	bl	8001678 <NRF24_read_register>
 800213a:	4603      	mov	r3, r0
 800213c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8002140:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	491e      	ldr	r1, [pc, #120]	; (80021c8 <printRadioSettings+0x304>)
 800214e:	4618      	mov	r0, r3
 8002150:	f019 fe8e 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002154:	f107 0308 	add.w	r3, r7, #8
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f8c1 	bl	80002e0 <strlen>
 800215e:	4603      	mov	r3, r0
 8002160:	b29a      	uxth	r2, r3
 8002162:	f107 0108 	add.w	r1, r7, #8
 8002166:	230a      	movs	r3, #10
 8002168:	4810      	ldr	r0, [pc, #64]	; (80021ac <printRadioSettings+0x2e8>)
 800216a:	f00e fe70 	bl	8010e4e <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800216e:	2006      	movs	r0, #6
 8002170:	f7ff fa82 	bl	8001678 <NRF24_read_register>
 8002174:	4603      	mov	r3, r0
 8002176:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800217a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d024      	beq.n	80021d0 <printRadioSettings+0x30c>
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	4a10      	ldr	r2, [pc, #64]	; (80021cc <printRadioSettings+0x308>)
 800218c:	461c      	mov	r4, r3
 800218e:	4615      	mov	r5, r2
 8002190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002194:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002198:	6020      	str	r0, [r4, #0]
 800219a:	3404      	adds	r4, #4
 800219c:	8021      	strh	r1, [r4, #0]
 800219e:	3402      	adds	r4, #2
 80021a0:	0c0b      	lsrs	r3, r1, #16
 80021a2:	7023      	strb	r3, [r4, #0]
 80021a4:	e023      	b.n	80021ee <printRadioSettings+0x32a>
 80021a6:	bf00      	nop
 80021a8:	0801df30 	.word	0x0801df30
 80021ac:	24000414 	.word	0x24000414
 80021b0:	0801df64 	.word	0x0801df64
 80021b4:	0801df80 	.word	0x0801df80
 80021b8:	0801df9c 	.word	0x0801df9c
 80021bc:	0801dfb0 	.word	0x0801dfb0
 80021c0:	0801dff4 	.word	0x0801dff4
 80021c4:	0801e040 	.word	0x0801e040
 80021c8:	0801e05c 	.word	0x0801e05c
 80021cc:	0801e070 	.word	0x0801e070
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	4a29      	ldr	r2, [pc, #164]	; (800227c <printRadioSettings+0x3b8>)
 80021d6:	461c      	mov	r4, r3
 80021d8:	4615      	mov	r5, r2
 80021da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021e2:	6020      	str	r0, [r4, #0]
 80021e4:	3404      	adds	r4, #4
 80021e6:	8021      	strh	r1, [r4, #0]
 80021e8:	3402      	adds	r4, #2
 80021ea:	0c0b      	lsrs	r3, r1, #16
 80021ec:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f874 	bl	80002e0 <strlen>
 80021f8:	4603      	mov	r3, r0
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	f107 0108 	add.w	r1, r7, #8
 8002200:	230a      	movs	r3, #10
 8002202:	481f      	ldr	r0, [pc, #124]	; (8002280 <printRadioSettings+0x3bc>)
 8002204:	f00e fe23 	bl	8010e4e <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8002208:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800220c:	f003 0306 	and.w	r3, r3, #6
 8002210:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8002214:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800221e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <printRadioSettings+0x376>
 8002226:	f107 0308 	add.w	r3, r7, #8
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <printRadioSettings+0x3c0>)
 800222c:	461c      	mov	r4, r3
 800222e:	4615      	mov	r5, r2
 8002230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002234:	682b      	ldr	r3, [r5, #0]
 8002236:	6023      	str	r3, [r4, #0]
 8002238:	e037      	b.n	80022aa <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800223a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800223e:	2b01      	cmp	r3, #1
 8002240:	d109      	bne.n	8002256 <printRadioSettings+0x392>
 8002242:	f107 0308 	add.w	r3, r7, #8
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <printRadioSettings+0x3c4>)
 8002248:	461c      	mov	r4, r3
 800224a:	4615      	mov	r5, r2
 800224c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800224e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	6023      	str	r3, [r4, #0]
 8002254:	e029      	b.n	80022aa <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8002256:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800225a:	2b02      	cmp	r3, #2
 800225c:	d118      	bne.n	8002290 <printRadioSettings+0x3cc>
 800225e:	f107 0308 	add.w	r3, r7, #8
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <printRadioSettings+0x3c8>)
 8002264:	461c      	mov	r4, r3
 8002266:	4615      	mov	r5, r2
 8002268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800226a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226c:	682b      	ldr	r3, [r5, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	8022      	strh	r2, [r4, #0]
 8002272:	3402      	adds	r4, #2
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	7023      	strb	r3, [r4, #0]
 8002278:	e017      	b.n	80022aa <printRadioSettings+0x3e6>
 800227a:	bf00      	nop
 800227c:	0801e088 	.word	0x0801e088
 8002280:	24000414 	.word	0x24000414
 8002284:	0801e0a0 	.word	0x0801e0a0
 8002288:	0801e0b4 	.word	0x0801e0b4
 800228c:	0801e0c8 	.word	0x0801e0c8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8002290:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002294:	2b03      	cmp	r3, #3
 8002296:	d108      	bne.n	80022aa <printRadioSettings+0x3e6>
 8002298:	f107 0308 	add.w	r3, r7, #8
 800229c:	4ad7      	ldr	r2, [pc, #860]	; (80025fc <printRadioSettings+0x738>)
 800229e:	461c      	mov	r4, r3
 80022a0:	4615      	mov	r5, r2
 80022a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a6:	682b      	ldr	r3, [r5, #0]
 80022a8:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80022aa:	f107 0308 	add.w	r3, r7, #8
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f816 	bl	80002e0 <strlen>
 80022b4:	4603      	mov	r3, r0
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	f107 0108 	add.w	r1, r7, #8
 80022bc:	230a      	movs	r3, #10
 80022be:	48d0      	ldr	r0, [pc, #832]	; (8002600 <printRadioSettings+0x73c>)
 80022c0:	f00e fdc5 	bl	8010e4e <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80022c4:	463b      	mov	r3, r7
 80022c6:	2205      	movs	r2, #5
 80022c8:	4619      	mov	r1, r3
 80022ca:	200a      	movs	r0, #10
 80022cc:	f7ff f9fc 	bl	80016c8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80022d0:	793b      	ldrb	r3, [r7, #4]
 80022d2:	461c      	mov	r4, r3
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	461d      	mov	r5, r3
 80022d8:	78bb      	ldrb	r3, [r7, #2]
 80022da:	787a      	ldrb	r2, [r7, #1]
 80022dc:	7839      	ldrb	r1, [r7, #0]
 80022de:	f107 0008 	add.w	r0, r7, #8
 80022e2:	9102      	str	r1, [sp, #8]
 80022e4:	9201      	str	r2, [sp, #4]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	462b      	mov	r3, r5
 80022ea:	4622      	mov	r2, r4
 80022ec:	49c5      	ldr	r1, [pc, #788]	; (8002604 <printRadioSettings+0x740>)
 80022ee:	f019 fdbf 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fd fff2 	bl	80002e0 <strlen>
 80022fc:	4603      	mov	r3, r0
 80022fe:	b29a      	uxth	r2, r3
 8002300:	f107 0108 	add.w	r1, r7, #8
 8002304:	230a      	movs	r3, #10
 8002306:	48be      	ldr	r0, [pc, #760]	; (8002600 <printRadioSettings+0x73c>)
 8002308:	f00e fda1 	bl	8010e4e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800230c:	463b      	mov	r3, r7
 800230e:	2205      	movs	r2, #5
 8002310:	4619      	mov	r1, r3
 8002312:	200b      	movs	r0, #11
 8002314:	f7ff f9d8 	bl	80016c8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002318:	793b      	ldrb	r3, [r7, #4]
 800231a:	461c      	mov	r4, r3
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	461d      	mov	r5, r3
 8002320:	78bb      	ldrb	r3, [r7, #2]
 8002322:	787a      	ldrb	r2, [r7, #1]
 8002324:	7839      	ldrb	r1, [r7, #0]
 8002326:	f107 0008 	add.w	r0, r7, #8
 800232a:	9102      	str	r1, [sp, #8]
 800232c:	9201      	str	r2, [sp, #4]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	462b      	mov	r3, r5
 8002332:	4622      	mov	r2, r4
 8002334:	49b4      	ldr	r1, [pc, #720]	; (8002608 <printRadioSettings+0x744>)
 8002336:	f019 fd9b 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	4618      	mov	r0, r3
 8002340:	f7fd ffce 	bl	80002e0 <strlen>
 8002344:	4603      	mov	r3, r0
 8002346:	b29a      	uxth	r2, r3
 8002348:	f107 0108 	add.w	r1, r7, #8
 800234c:	230a      	movs	r3, #10
 800234e:	48ac      	ldr	r0, [pc, #688]	; (8002600 <printRadioSettings+0x73c>)
 8002350:	f00e fd7d 	bl	8010e4e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8002354:	463b      	mov	r3, r7
 8002356:	2201      	movs	r2, #1
 8002358:	4619      	mov	r1, r3
 800235a:	200c      	movs	r0, #12
 800235c:	f7ff f9b4 	bl	80016c8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002360:	783b      	ldrb	r3, [r7, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	f107 0308 	add.w	r3, r7, #8
 8002368:	49a8      	ldr	r1, [pc, #672]	; (800260c <printRadioSettings+0x748>)
 800236a:	4618      	mov	r0, r3
 800236c:	f019 fd80 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002370:	f107 0308 	add.w	r3, r7, #8
 8002374:	4618      	mov	r0, r3
 8002376:	f7fd ffb3 	bl	80002e0 <strlen>
 800237a:	4603      	mov	r3, r0
 800237c:	b29a      	uxth	r2, r3
 800237e:	f107 0108 	add.w	r1, r7, #8
 8002382:	230a      	movs	r3, #10
 8002384:	489e      	ldr	r0, [pc, #632]	; (8002600 <printRadioSettings+0x73c>)
 8002386:	f00e fd62 	bl	8010e4e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800238a:	463b      	mov	r3, r7
 800238c:	2201      	movs	r2, #1
 800238e:	4619      	mov	r1, r3
 8002390:	200d      	movs	r0, #13
 8002392:	f7ff f999 	bl	80016c8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002396:	783b      	ldrb	r3, [r7, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	499c      	ldr	r1, [pc, #624]	; (8002610 <printRadioSettings+0x74c>)
 80023a0:	4618      	mov	r0, r3
 80023a2:	f019 fd65 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80023a6:	f107 0308 	add.w	r3, r7, #8
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fd ff98 	bl	80002e0 <strlen>
 80023b0:	4603      	mov	r3, r0
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	f107 0108 	add.w	r1, r7, #8
 80023b8:	230a      	movs	r3, #10
 80023ba:	4891      	ldr	r0, [pc, #580]	; (8002600 <printRadioSettings+0x73c>)
 80023bc:	f00e fd47 	bl	8010e4e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80023c0:	463b      	mov	r3, r7
 80023c2:	2201      	movs	r2, #1
 80023c4:	4619      	mov	r1, r3
 80023c6:	200e      	movs	r0, #14
 80023c8:	f7ff f97e 	bl	80016c8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80023cc:	783b      	ldrb	r3, [r7, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	498f      	ldr	r1, [pc, #572]	; (8002614 <printRadioSettings+0x750>)
 80023d6:	4618      	mov	r0, r3
 80023d8:	f019 fd4a 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80023dc:	f107 0308 	add.w	r3, r7, #8
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fd ff7d 	bl	80002e0 <strlen>
 80023e6:	4603      	mov	r3, r0
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	f107 0108 	add.w	r1, r7, #8
 80023ee:	230a      	movs	r3, #10
 80023f0:	4883      	ldr	r0, [pc, #524]	; (8002600 <printRadioSettings+0x73c>)
 80023f2:	f00e fd2c 	bl	8010e4e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80023f6:	463b      	mov	r3, r7
 80023f8:	2201      	movs	r2, #1
 80023fa:	4619      	mov	r1, r3
 80023fc:	200f      	movs	r0, #15
 80023fe:	f7ff f963 	bl	80016c8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002402:	783b      	ldrb	r3, [r7, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	f107 0308 	add.w	r3, r7, #8
 800240a:	4983      	ldr	r1, [pc, #524]	; (8002618 <printRadioSettings+0x754>)
 800240c:	4618      	mov	r0, r3
 800240e:	f019 fd2f 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002412:	f107 0308 	add.w	r3, r7, #8
 8002416:	4618      	mov	r0, r3
 8002418:	f7fd ff62 	bl	80002e0 <strlen>
 800241c:	4603      	mov	r3, r0
 800241e:	b29a      	uxth	r2, r3
 8002420:	f107 0108 	add.w	r1, r7, #8
 8002424:	230a      	movs	r3, #10
 8002426:	4876      	ldr	r0, [pc, #472]	; (8002600 <printRadioSettings+0x73c>)
 8002428:	f00e fd11 	bl	8010e4e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800242c:	463b      	mov	r3, r7
 800242e:	2205      	movs	r2, #5
 8002430:	4619      	mov	r1, r3
 8002432:	2010      	movs	r0, #16
 8002434:	f7ff f948 	bl	80016c8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002438:	793b      	ldrb	r3, [r7, #4]
 800243a:	461c      	mov	r4, r3
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	461d      	mov	r5, r3
 8002440:	78bb      	ldrb	r3, [r7, #2]
 8002442:	787a      	ldrb	r2, [r7, #1]
 8002444:	7839      	ldrb	r1, [r7, #0]
 8002446:	f107 0008 	add.w	r0, r7, #8
 800244a:	9102      	str	r1, [sp, #8]
 800244c:	9201      	str	r2, [sp, #4]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	462b      	mov	r3, r5
 8002452:	4622      	mov	r2, r4
 8002454:	4971      	ldr	r1, [pc, #452]	; (800261c <printRadioSettings+0x758>)
 8002456:	f019 fd0b 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800245a:	f107 0308 	add.w	r3, r7, #8
 800245e:	4618      	mov	r0, r3
 8002460:	f7fd ff3e 	bl	80002e0 <strlen>
 8002464:	4603      	mov	r3, r0
 8002466:	b29a      	uxth	r2, r3
 8002468:	f107 0108 	add.w	r1, r7, #8
 800246c:	230a      	movs	r3, #10
 800246e:	4864      	ldr	r0, [pc, #400]	; (8002600 <printRadioSettings+0x73c>)
 8002470:	f00e fced 	bl	8010e4e <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8002474:	2011      	movs	r0, #17
 8002476:	f7ff f8ff 	bl	8001678 <NRF24_read_register>
 800247a:	4603      	mov	r3, r0
 800247c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002480:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002484:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002488:	f107 0308 	add.w	r3, r7, #8
 800248c:	4964      	ldr	r1, [pc, #400]	; (8002620 <printRadioSettings+0x75c>)
 800248e:	4618      	mov	r0, r3
 8002490:	f019 fcee 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002494:	f107 0308 	add.w	r3, r7, #8
 8002498:	4618      	mov	r0, r3
 800249a:	f7fd ff21 	bl	80002e0 <strlen>
 800249e:	4603      	mov	r3, r0
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	f107 0108 	add.w	r1, r7, #8
 80024a6:	230a      	movs	r3, #10
 80024a8:	4855      	ldr	r0, [pc, #340]	; (8002600 <printRadioSettings+0x73c>)
 80024aa:	f00e fcd0 	bl	8010e4e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80024ae:	2012      	movs	r0, #18
 80024b0:	f7ff f8e2 	bl	8001678 <NRF24_read_register>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80024ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80024be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c2:	f107 0308 	add.w	r3, r7, #8
 80024c6:	4957      	ldr	r1, [pc, #348]	; (8002624 <printRadioSettings+0x760>)
 80024c8:	4618      	mov	r0, r3
 80024ca:	f019 fcd1 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80024ce:	f107 0308 	add.w	r3, r7, #8
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd ff04 	bl	80002e0 <strlen>
 80024d8:	4603      	mov	r3, r0
 80024da:	b29a      	uxth	r2, r3
 80024dc:	f107 0108 	add.w	r1, r7, #8
 80024e0:	230a      	movs	r3, #10
 80024e2:	4847      	ldr	r0, [pc, #284]	; (8002600 <printRadioSettings+0x73c>)
 80024e4:	f00e fcb3 	bl	8010e4e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80024e8:	2013      	movs	r0, #19
 80024ea:	f7ff f8c5 	bl	8001678 <NRF24_read_register>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80024f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80024f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024fc:	f107 0308 	add.w	r3, r7, #8
 8002500:	4949      	ldr	r1, [pc, #292]	; (8002628 <printRadioSettings+0x764>)
 8002502:	4618      	mov	r0, r3
 8002504:	f019 fcb4 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002508:	f107 0308 	add.w	r3, r7, #8
 800250c:	4618      	mov	r0, r3
 800250e:	f7fd fee7 	bl	80002e0 <strlen>
 8002512:	4603      	mov	r3, r0
 8002514:	b29a      	uxth	r2, r3
 8002516:	f107 0108 	add.w	r1, r7, #8
 800251a:	230a      	movs	r3, #10
 800251c:	4838      	ldr	r0, [pc, #224]	; (8002600 <printRadioSettings+0x73c>)
 800251e:	f00e fc96 	bl	8010e4e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8002522:	2014      	movs	r0, #20
 8002524:	f7ff f8a8 	bl	8001678 <NRF24_read_register>
 8002528:	4603      	mov	r3, r0
 800252a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800252e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002532:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002536:	f107 0308 	add.w	r3, r7, #8
 800253a:	493c      	ldr	r1, [pc, #240]	; (800262c <printRadioSettings+0x768>)
 800253c:	4618      	mov	r0, r3
 800253e:	f019 fc97 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002542:	f107 0308 	add.w	r3, r7, #8
 8002546:	4618      	mov	r0, r3
 8002548:	f7fd feca 	bl	80002e0 <strlen>
 800254c:	4603      	mov	r3, r0
 800254e:	b29a      	uxth	r2, r3
 8002550:	f107 0108 	add.w	r1, r7, #8
 8002554:	230a      	movs	r3, #10
 8002556:	482a      	ldr	r0, [pc, #168]	; (8002600 <printRadioSettings+0x73c>)
 8002558:	f00e fc79 	bl	8010e4e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 800255c:	2015      	movs	r0, #21
 800255e:	f7ff f88b 	bl	8001678 <NRF24_read_register>
 8002562:	4603      	mov	r3, r0
 8002564:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002568:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800256c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002570:	f107 0308 	add.w	r3, r7, #8
 8002574:	492e      	ldr	r1, [pc, #184]	; (8002630 <printRadioSettings+0x76c>)
 8002576:	4618      	mov	r0, r3
 8002578:	f019 fc7a 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd fead 	bl	80002e0 <strlen>
 8002586:	4603      	mov	r3, r0
 8002588:	b29a      	uxth	r2, r3
 800258a:	f107 0108 	add.w	r1, r7, #8
 800258e:	230a      	movs	r3, #10
 8002590:	481b      	ldr	r0, [pc, #108]	; (8002600 <printRadioSettings+0x73c>)
 8002592:	f00e fc5c 	bl	8010e4e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8002596:	2016      	movs	r0, #22
 8002598:	f7ff f86e 	bl	8001678 <NRF24_read_register>
 800259c:	4603      	mov	r3, r0
 800259e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80025a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80025a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025aa:	f107 0308 	add.w	r3, r7, #8
 80025ae:	4921      	ldr	r1, [pc, #132]	; (8002634 <printRadioSettings+0x770>)
 80025b0:	4618      	mov	r0, r3
 80025b2:	f019 fc5d 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd fe90 	bl	80002e0 <strlen>
 80025c0:	4603      	mov	r3, r0
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	f107 0108 	add.w	r1, r7, #8
 80025c8:	230a      	movs	r3, #10
 80025ca:	480d      	ldr	r0, [pc, #52]	; (8002600 <printRadioSettings+0x73c>)
 80025cc:	f00e fc3f 	bl	8010e4e <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80025d0:	201c      	movs	r0, #28
 80025d2:	f7ff f851 	bl	8001678 <NRF24_read_register>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80025dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80025e0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bfcc      	ite	gt
 80025e8:	2301      	movgt	r3, #1
 80025ea:	2300      	movle	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80025f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	e01e      	b.n	8002638 <printRadioSettings+0x774>
 80025fa:	bf00      	nop
 80025fc:	0801e0dc 	.word	0x0801e0dc
 8002600:	24000414 	.word	0x24000414
 8002604:	0801e0f0 	.word	0x0801e0f0
 8002608:	0801e120 	.word	0x0801e120
 800260c:	0801e150 	.word	0x0801e150
 8002610:	0801e178 	.word	0x0801e178
 8002614:	0801e1a0 	.word	0x0801e1a0
 8002618:	0801e1c8 	.word	0x0801e1c8
 800261c:	0801e1f0 	.word	0x0801e1f0
 8002620:	0801e21c 	.word	0x0801e21c
 8002624:	0801e238 	.word	0x0801e238
 8002628:	0801e254 	.word	0x0801e254
 800262c:	0801e270 	.word	0x0801e270
 8002630:	0801e28c 	.word	0x0801e28c
 8002634:	0801e2a8 	.word	0x0801e2a8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002638:	2b00      	cmp	r3, #0
 800263a:	bfcc      	ite	gt
 800263c:	2301      	movgt	r3, #1
 800263e:	2300      	movle	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002644:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002648:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800264c:	2b00      	cmp	r3, #0
 800264e:	bfcc      	ite	gt
 8002650:	2301      	movgt	r3, #1
 8002652:	2300      	movle	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002658:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800265c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002660:	2b00      	cmp	r3, #0
 8002662:	bfcc      	ite	gt
 8002664:	2301      	movgt	r3, #1
 8002666:	2300      	movle	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800266c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002670:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002674:	2b00      	cmp	r3, #0
 8002676:	bfcc      	ite	gt
 8002678:	2301      	movgt	r3, #1
 800267a:	2300      	movle	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002680:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002684:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002688:	2b00      	cmp	r3, #0
 800268a:	bfcc      	ite	gt
 800268c:	2301      	movgt	r3, #1
 800268e:	2300      	movle	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f107 0008 	add.w	r0, r7, #8
 8002696:	9303      	str	r3, [sp, #12]
 8002698:	9402      	str	r4, [sp, #8]
 800269a:	9101      	str	r1, [sp, #4]
 800269c:	9200      	str	r2, [sp, #0]
 800269e:	4633      	mov	r3, r6
 80026a0:	462a      	mov	r2, r5
 80026a2:	494a      	ldr	r1, [pc, #296]	; (80027cc <printRadioSettings+0x908>)
 80026a4:	f019 fbe4 	bl	801be70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80026a8:	f107 0308 	add.w	r3, r7, #8
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fd fe17 	bl	80002e0 <strlen>
 80026b2:	4603      	mov	r3, r0
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	f107 0108 	add.w	r1, r7, #8
 80026ba:	230a      	movs	r3, #10
 80026bc:	4844      	ldr	r0, [pc, #272]	; (80027d0 <printRadioSettings+0x90c>)
 80026be:	f00e fbc6 	bl	8010e4e <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80026c2:	201d      	movs	r0, #29
 80026c4:	f7fe ffd8 	bl	8001678 <NRF24_read_register>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80026ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00c      	beq.n	80026f4 <printRadioSettings+0x830>
 80026da:	f107 0308 	add.w	r3, r7, #8
 80026de:	4a3d      	ldr	r2, [pc, #244]	; (80027d4 <printRadioSettings+0x910>)
 80026e0:	461c      	mov	r4, r3
 80026e2:	4615      	mov	r5, r2
 80026e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80026ec:	6020      	str	r0, [r4, #0]
 80026ee:	3404      	adds	r4, #4
 80026f0:	8021      	strh	r1, [r4, #0]
 80026f2:	e00e      	b.n	8002712 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80026f4:	f107 0308 	add.w	r3, r7, #8
 80026f8:	4a37      	ldr	r2, [pc, #220]	; (80027d8 <printRadioSettings+0x914>)
 80026fa:	461c      	mov	r4, r3
 80026fc:	4615      	mov	r5, r2
 80026fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002702:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002706:	6020      	str	r0, [r4, #0]
 8002708:	3404      	adds	r4, #4
 800270a:	8021      	strh	r1, [r4, #0]
 800270c:	3402      	adds	r4, #2
 800270e:	0c0b      	lsrs	r3, r1, #16
 8002710:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002712:	f107 0308 	add.w	r3, r7, #8
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd fde2 	bl	80002e0 <strlen>
 800271c:	4603      	mov	r3, r0
 800271e:	b29a      	uxth	r2, r3
 8002720:	f107 0108 	add.w	r1, r7, #8
 8002724:	230a      	movs	r3, #10
 8002726:	482a      	ldr	r0, [pc, #168]	; (80027d0 <printRadioSettings+0x90c>)
 8002728:	f00e fb91 	bl	8010e4e <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800272c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00b      	beq.n	8002750 <printRadioSettings+0x88c>
 8002738:	f107 0308 	add.w	r3, r7, #8
 800273c:	4a27      	ldr	r2, [pc, #156]	; (80027dc <printRadioSettings+0x918>)
 800273e:	461c      	mov	r4, r3
 8002740:	4615      	mov	r5, r2
 8002742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800274a:	c403      	stmia	r4!, {r0, r1}
 800274c:	8022      	strh	r2, [r4, #0]
 800274e:	e00d      	b.n	800276c <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002750:	f107 0308 	add.w	r3, r7, #8
 8002754:	4a22      	ldr	r2, [pc, #136]	; (80027e0 <printRadioSettings+0x91c>)
 8002756:	461c      	mov	r4, r3
 8002758:	4615      	mov	r5, r2
 800275a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002762:	c403      	stmia	r4!, {r0, r1}
 8002764:	8022      	strh	r2, [r4, #0]
 8002766:	3402      	adds	r4, #2
 8002768:	0c13      	lsrs	r3, r2, #16
 800276a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800276c:	f107 0308 	add.w	r3, r7, #8
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd fdb5 	bl	80002e0 <strlen>
 8002776:	4603      	mov	r3, r0
 8002778:	b29a      	uxth	r2, r3
 800277a:	f107 0108 	add.w	r1, r7, #8
 800277e:	230a      	movs	r3, #10
 8002780:	4813      	ldr	r0, [pc, #76]	; (80027d0 <printRadioSettings+0x90c>)
 8002782:	f00e fb64 	bl	8010e4e <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002786:	f107 0308 	add.w	r3, r7, #8
 800278a:	4a16      	ldr	r2, [pc, #88]	; (80027e4 <printRadioSettings+0x920>)
 800278c:	461c      	mov	r4, r3
 800278e:	4615      	mov	r5, r2
 8002790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800279c:	682b      	ldr	r3, [r5, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	8022      	strh	r2, [r4, #0]
 80027a2:	3402      	adds	r4, #2
 80027a4:	0c1b      	lsrs	r3, r3, #16
 80027a6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027a8:	f107 0308 	add.w	r3, r7, #8
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fd97 	bl	80002e0 <strlen>
 80027b2:	4603      	mov	r3, r0
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	f107 0108 	add.w	r1, r7, #8
 80027ba:	230a      	movs	r3, #10
 80027bc:	4804      	ldr	r0, [pc, #16]	; (80027d0 <printRadioSettings+0x90c>)
 80027be:	f00e fb46 	bl	8010e4e <HAL_UART_Transmit>
}
 80027c2:	bf00      	nop
 80027c4:	3774      	adds	r7, #116	; 0x74
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	0801e2c4 	.word	0x0801e2c4
 80027d0:	24000414 	.word	0x24000414
 80027d4:	0801e310 	.word	0x0801e310
 80027d8:	0801e328 	.word	0x0801e328
 80027dc:	0801e340 	.word	0x0801e340
 80027e0:	0801e35c 	.word	0x0801e35c
 80027e4:	0801df30 	.word	0x0801df30

080027e8 <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	dd03      	ble.n	8002800 <WriteToBuff+0x18>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fe:	db01      	blt.n	8002804 <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 8002800:	2303      	movs	r3, #3
 8002802:	e083      	b.n	800290c <WriteToBuff+0x124>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 8002804:	4b43      	ldr	r3, [pc, #268]	; (8002914 <WriteToBuff+0x12c>)
 8002806:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800280a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280e:	d235      	bcs.n	800287c <WriteToBuff+0x94>
 8002810:	4b40      	ldr	r3, [pc, #256]	; (8002914 <WriteToBuff+0x12c>)
 8002812:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	4413      	add	r3, r2
 800281a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281e:	d32d      	bcc.n	800287c <WriteToBuff+0x94>
    DataBuffer.counter = Bufflength;
 8002820:	4b3c      	ldr	r3, [pc, #240]	; (8002914 <WriteToBuff+0x12c>)
 8002822:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002826:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 800282a:	4b3a      	ldr	r3, [pc, #232]	; (8002914 <WriteToBuff+0x12c>)
 800282c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8002830:	4a38      	ldr	r2, [pc, #224]	; (8002914 <WriteToBuff+0x12c>)
 8002832:	4413      	add	r3, r2
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4618      	mov	r0, r3
 800283a:	f018 fd61 	bl	801b300 <memcpy>
    DataBuffer.counter += len;
 800283e:	4b35      	ldr	r3, [pc, #212]	; (8002914 <WriteToBuff+0x12c>)
 8002840:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4413      	add	r3, r2
 8002848:	4a32      	ldr	r2, [pc, #200]	; (8002914 <WriteToBuff+0x12c>)
 800284a:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 800284e:	4b32      	ldr	r3, [pc, #200]	; (8002918 <WriteToBuff+0x130>)
 8002850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002854:	492f      	ldr	r1, [pc, #188]	; (8002914 <WriteToBuff+0x12c>)
 8002856:	4831      	ldr	r0, [pc, #196]	; (800291c <WriteToBuff+0x134>)
 8002858:	f016 ffad 	bl	80197b6 <f_write>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10a      	bne.n	8002878 <WriteToBuff+0x90>

      memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear next buffer after writing
 8002862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002866:	2100      	movs	r1, #0
 8002868:	482d      	ldr	r0, [pc, #180]	; (8002920 <WriteToBuff+0x138>)
 800286a:	f018 fd54 	bl	801b316 <memset>
    	f_sync(&myFILE);
 800286e:	482b      	ldr	r0, [pc, #172]	; (800291c <WriteToBuff+0x134>)
 8002870:	f017 f916 	bl	8019aa0 <f_sync>
      //printf("Buffer 1 has been written\n");
      return 1; //buffer 1 has been written
 8002874:	2301      	movs	r3, #1
 8002876:	e049      	b.n	800290c <WriteToBuff+0x124>
    }
    return 4; //could not write :(
 8002878:	2304      	movs	r3, #4
 800287a:	e047      	b.n	800290c <WriteToBuff+0x124>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 800287c:	4b25      	ldr	r3, [pc, #148]	; (8002914 <WriteToBuff+0x12c>)
 800287e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	4413      	add	r3, r2
 8002886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800288a:	d32c      	bcc.n	80028e6 <WriteToBuff+0xfe>
    DataBuffer.counter = 0;
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <WriteToBuff+0x12c>)
 800288e:	2200      	movs	r2, #0
 8002890:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <WriteToBuff+0x12c>)
 8002896:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800289a:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <WriteToBuff+0x12c>)
 800289c:	4413      	add	r3, r2
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f018 fd2c 	bl	801b300 <memcpy>
    DataBuffer.counter += len;
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <WriteToBuff+0x12c>)
 80028aa:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	4413      	add	r3, r2
 80028b2:	4a18      	ldr	r2, [pc, #96]	; (8002914 <WriteToBuff+0x12c>)
 80028b4:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 80028b8:	4b17      	ldr	r3, [pc, #92]	; (8002918 <WriteToBuff+0x130>)
 80028ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028be:	4918      	ldr	r1, [pc, #96]	; (8002920 <WriteToBuff+0x138>)
 80028c0:	4816      	ldr	r0, [pc, #88]	; (800291c <WriteToBuff+0x134>)
 80028c2:	f016 ff78 	bl	80197b6 <f_write>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <WriteToBuff+0xfa>
      memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear next buffer after writing
 80028cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d0:	2100      	movs	r1, #0
 80028d2:	4810      	ldr	r0, [pc, #64]	; (8002914 <WriteToBuff+0x12c>)
 80028d4:	f018 fd1f 	bl	801b316 <memset>
    	f_sync(&myFILE);
 80028d8:	4810      	ldr	r0, [pc, #64]	; (800291c <WriteToBuff+0x134>)
 80028da:	f017 f8e1 	bl	8019aa0 <f_sync>
      //printf("Buffer 2 has been written\n");
      return 2; //buffer 2 has been written
 80028de:	2302      	movs	r3, #2
 80028e0:	e014      	b.n	800290c <WriteToBuff+0x124>
    }
    return 4; //could not write :(
 80028e2:	2304      	movs	r3, #4
 80028e4:	e012      	b.n	800290c <WriteToBuff+0x124>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <WriteToBuff+0x12c>)
 80028e8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80028ec:	4a09      	ldr	r2, [pc, #36]	; (8002914 <WriteToBuff+0x12c>)
 80028ee:	4413      	add	r3, r2
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f018 fd03 	bl	801b300 <memcpy>
  DataBuffer.counter += len;
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <WriteToBuff+0x12c>)
 80028fc:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4413      	add	r3, r2
 8002904:	4a03      	ldr	r2, [pc, #12]	; (8002914 <WriteToBuff+0x12c>)
 8002906:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	240004a0 	.word	0x240004a0
 8002918:	24004a90 	.word	0x24004a90
 800291c:	24000d10 	.word	0x24000d10
 8002920:	240008a0 	.word	0x240008a0

08002924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002928:	f5ad 4dd5 	sub.w	sp, sp, #27264	; 0x6a80
 800292c:	b09e      	sub	sp, #120	; 0x78
 800292e:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002930:	f002 ff20 	bl	8005774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002934:	f001 fe1e 	bl	8004574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002938:	f002 f97c 	bl	8004c34 <MX_GPIO_Init>
  MX_DMA_Init();
 800293c:	f002 f95a 	bl	8004bf4 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8002940:	f002 f848 	bl	80049d4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8002944:	f011 fdae 	bl	80144a4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8002948:	f017 f9ae 	bl	8019ca8 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 800294c:	f001 ff1c 	bl	8004788 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8002950:	f001 ff7e 	bl	8004850 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8002954:	f002 f8b6 	bl	8004ac4 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8002958:	f002 f900 	bl	8004b5c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800295c:	f002 f85c 	bl	8004a18 <MX_SPI1_Init>
  MX_RTC_Init();
 8002960:	f001 ffda 	bl	8004918 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(1000);//NEEDED FOR USB MASS STORAGE TO WORK
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002964:	2101      	movs	r1, #1
 8002966:	48c0      	ldr	r0, [pc, #768]	; (8002c68 <main+0x344>)
 8002968:	f006 fcc9 	bl	80092fe <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 800296c:	4cbf      	ldr	r4, [pc, #764]	; (8002c6c <main+0x348>)
 800296e:	4668      	mov	r0, sp
 8002970:	1d23      	adds	r3, r4, #4
 8002972:	2284      	movs	r2, #132	; 0x84
 8002974:	4619      	mov	r1, r3
 8002976:	f018 fcc3 	bl	801b300 <memcpy>
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	2201      	movs	r2, #1
 800297e:	2102      	movs	r1, #2
 8002980:	48bb      	ldr	r0, [pc, #748]	; (8002c70 <main+0x34c>)
 8002982:	f7fe ff53 	bl	800182c <NRF24_begin>
    //nrf24_DebugUART_Init(huart3);



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8002986:	f7ff f831 	bl	80019ec <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 800298a:	4bba      	ldr	r3, [pc, #744]	; (8002c74 <main+0x350>)
 800298c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002990:	4618      	mov	r0, r3
 8002992:	4621      	mov	r1, r4
 8002994:	f7ff f88a 	bl	8001aac <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8002998:	2000      	movs	r0, #0
 800299a:	f7ff f913 	bl	8001bc4 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 800299e:	202a      	movs	r0, #42	; 0x2a
 80029a0:	f7ff f8c3 	bl	8001b2a <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 80029a4:	2020      	movs	r0, #32
 80029a6:	f7ff f8d5 	bl	8001b54 <NRF24_setPayloadSize>

    printRadioSettings();
 80029aa:	f7ff fa8b 	bl	8001ec4 <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 80029ae:	48b2      	ldr	r0, [pc, #712]	; (8002c78 <main+0x354>)
 80029b0:	f019 fa12 	bl	801bdd8 <puts>
  FDCAN_Config(&hfdcan1);
 80029b4:	48b1      	ldr	r0, [pc, #708]	; (8002c7c <main+0x358>)
 80029b6:	f7fe f827 	bl	8000a08 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 80029ba:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80029be:	49b0      	ldr	r1, [pc, #704]	; (8002c80 <main+0x35c>)
 80029c0:	48b0      	ldr	r0, [pc, #704]	; (8002c84 <main+0x360>)
 80029c2:	f00e fadb 	bl	8010f7c <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 80029c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ca:	f002 ff65 	bl	8005898 <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 80029ce:	2364      	movs	r3, #100	; 0x64
 80029d0:	f646 222a 	movw	r2, #27178	; 0x6a2a
 80029d4:	443a      	add	r2, r7
 80029d6:	8013      	strh	r3, [r2, #0]
  uint16_t navRate = 1;
 80029d8:	2301      	movs	r3, #1
 80029da:	f646 2228 	movw	r2, #27176	; 0x6a28
 80029de:	443a      	add	r2, r7
 80029e0:	8013      	strh	r3, [r2, #0]
  uint16_t timeRef = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f646 2226 	movw	r2, #27174	; 0x6a26
 80029e8:	443a      	add	r2, r7
 80029ea:	8013      	strh	r3, [r2, #0]
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 80029ec:	f646 2326 	movw	r3, #27174	; 0x6a26
 80029f0:	443b      	add	r3, r7
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	f646 2228 	movw	r2, #27176	; 0x6a28
 80029f8:	443a      	add	r2, r7
 80029fa:	8812      	ldrh	r2, [r2, #0]
 80029fc:	f646 212a 	movw	r1, #27178	; 0x6a2a
 8002a00:	4439      	add	r1, r7
 8002a02:	8809      	ldrh	r1, [r1, #0]
 8002a04:	489f      	ldr	r0, [pc, #636]	; (8002c84 <main+0x360>)
 8002a06:	f7fe fd47 	bl	8001498 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	499e      	ldr	r1, [pc, #632]	; (8002c88 <main+0x364>)
 8002a0e:	489d      	ldr	r0, [pc, #628]	; (8002c84 <main+0x360>)
 8002a10:	f7fe fcd2 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8002a14:	2200      	movs	r2, #0
 8002a16:	499d      	ldr	r1, [pc, #628]	; (8002c8c <main+0x368>)
 8002a18:	489a      	ldr	r0, [pc, #616]	; (8002c84 <main+0x360>)
 8002a1a:	f7fe fccd 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	499b      	ldr	r1, [pc, #620]	; (8002c90 <main+0x36c>)
 8002a22:	4898      	ldr	r0, [pc, #608]	; (8002c84 <main+0x360>)
 8002a24:	f7fe fcc8 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8002a28:	2200      	movs	r2, #0
 8002a2a:	499a      	ldr	r1, [pc, #616]	; (8002c94 <main+0x370>)
 8002a2c:	4895      	ldr	r0, [pc, #596]	; (8002c84 <main+0x360>)
 8002a2e:	f7fe fcc3 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8002a32:	2200      	movs	r2, #0
 8002a34:	4998      	ldr	r1, [pc, #608]	; (8002c98 <main+0x374>)
 8002a36:	4893      	ldr	r0, [pc, #588]	; (8002c84 <main+0x360>)
 8002a38:	f7fe fcbe 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	4997      	ldr	r1, [pc, #604]	; (8002c9c <main+0x378>)
 8002a40:	4890      	ldr	r0, [pc, #576]	; (8002c84 <main+0x360>)
 8002a42:	f7fe fcb9 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	4995      	ldr	r1, [pc, #596]	; (8002ca0 <main+0x37c>)
 8002a4a:	488e      	ldr	r0, [pc, #568]	; (8002c84 <main+0x360>)
 8002a4c:	f7fe fcb4 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	4994      	ldr	r1, [pc, #592]	; (8002ca4 <main+0x380>)
 8002a54:	488b      	ldr	r0, [pc, #556]	; (8002c84 <main+0x360>)
 8002a56:	f7fe fcaf 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	4992      	ldr	r1, [pc, #584]	; (8002ca8 <main+0x384>)
 8002a5e:	4889      	ldr	r0, [pc, #548]	; (8002c84 <main+0x360>)
 8002a60:	f7fe fcaa 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	4991      	ldr	r1, [pc, #580]	; (8002cac <main+0x388>)
 8002a68:	4886      	ldr	r0, [pc, #536]	; (8002c84 <main+0x360>)
 8002a6a:	f7fe fca5 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8002a6e:	2200      	movs	r2, #0
 8002a70:	498f      	ldr	r1, [pc, #572]	; (8002cb0 <main+0x38c>)
 8002a72:	4884      	ldr	r0, [pc, #528]	; (8002c84 <main+0x360>)
 8002a74:	f7fe fca0 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 8002a78:	2200      	movs	r2, #0
 8002a7a:	498e      	ldr	r1, [pc, #568]	; (8002cb4 <main+0x390>)
 8002a7c:	4881      	ldr	r0, [pc, #516]	; (8002c84 <main+0x360>)
 8002a7e:	f7fe fc9b 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8002a82:	2200      	movs	r2, #0
 8002a84:	498c      	ldr	r1, [pc, #560]	; (8002cb8 <main+0x394>)
 8002a86:	487f      	ldr	r0, [pc, #508]	; (8002c84 <main+0x360>)
 8002a88:	f7fe fc96 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	498b      	ldr	r1, [pc, #556]	; (8002cbc <main+0x398>)
 8002a90:	487c      	ldr	r0, [pc, #496]	; (8002c84 <main+0x360>)
 8002a92:	f7fe fc91 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	4989      	ldr	r1, [pc, #548]	; (8002cc0 <main+0x39c>)
 8002a9a:	487a      	ldr	r0, [pc, #488]	; (8002c84 <main+0x360>)
 8002a9c:	f7fe fc8c 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4988      	ldr	r1, [pc, #544]	; (8002cc4 <main+0x3a0>)
 8002aa4:	4877      	ldr	r0, [pc, #476]	; (8002c84 <main+0x360>)
 8002aa6:	f7fe fc87 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	4986      	ldr	r1, [pc, #536]	; (8002cc8 <main+0x3a4>)
 8002aae:	4875      	ldr	r0, [pc, #468]	; (8002c84 <main+0x360>)
 8002ab0:	f7fe fc82 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4985      	ldr	r1, [pc, #532]	; (8002ccc <main+0x3a8>)
 8002ab8:	4872      	ldr	r0, [pc, #456]	; (8002c84 <main+0x360>)
 8002aba:	f7fe fc7d 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8002abe:	2200      	movs	r2, #0
 8002ac0:	4983      	ldr	r1, [pc, #524]	; (8002cd0 <main+0x3ac>)
 8002ac2:	4870      	ldr	r0, [pc, #448]	; (8002c84 <main+0x360>)
 8002ac4:	f7fe fc78 	bl	80013b8 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8002ac8:	2200      	movs	r2, #0
 8002aca:	4982      	ldr	r1, [pc, #520]	; (8002cd4 <main+0x3b0>)
 8002acc:	486d      	ldr	r0, [pc, #436]	; (8002c84 <main+0x360>)
 8002ace:	f7fe fc73 	bl	80013b8 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	4980      	ldr	r1, [pc, #512]	; (8002cd8 <main+0x3b4>)
 8002ad6:	4881      	ldr	r0, [pc, #516]	; (8002cdc <main+0x3b8>)
 8002ad8:	f016 fb2a 	bl	8019130 <f_mount>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 84eb 	bne.w	80034ba <main+0xb96>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char Filename[20] = "test";
 8002ae4:	f644 62f0 	movw	r2, #20208	; 0x4ef0
 8002ae8:	443a      	add	r2, r7
 8002aea:	497d      	ldr	r1, [pc, #500]	; (8002ce0 <main+0x3bc>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	c903      	ldmia	r1, {r0, r1}
 8002af0:	6018      	str	r0, [r3, #0]
 8002af2:	3304      	adds	r3, #4
 8002af4:	7019      	strb	r1, [r3, #0]
 8002af6:	1d53      	adds	r3, r2, #5
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	f8c3 200b 	str.w	r2, [r3, #11]
      char FilePath[150];
      char ConfigPath[] ="Config.csv\0";
 8002b04:	4b77      	ldr	r3, [pc, #476]	; (8002ce4 <main+0x3c0>)
 8002b06:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002b0a:	443a      	add	r2, r7
 8002b0c:	4413      	add	r3, r2
 8002b0e:	4a76      	ldr	r2, [pc, #472]	; (8002ce8 <main+0x3c4>)
 8002b10:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[20000] = {0};
 8002b16:	4b75      	ldr	r3, [pc, #468]	; (8002cec <main+0x3c8>)
 8002b18:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002b1c:	443a      	add	r2, r7
 8002b1e:	4413      	add	r3, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002b26:	461a      	mov	r2, r3
 8002b28:	2100      	movs	r1, #0
 8002b2a:	f018 fbf4 	bl	801b316 <memset>
      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8002b2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <main+0x3c0>)
 8002b30:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002b34:	443a      	add	r2, r7
 8002b36:	4413      	add	r3, r2
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	486c      	ldr	r0, [pc, #432]	; (8002cf0 <main+0x3cc>)
 8002b3e:	f016 fb3d 	bl	80191bc <f_open>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	f040 8325 	bne.w	8003194 <main+0x870>
        //If file doesn't exist creates a file using hard coded defaults and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8002b4a:	4b66      	ldr	r3, [pc, #408]	; (8002ce4 <main+0x3c0>)
 8002b4c:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002b50:	443a      	add	r2, r7
 8002b52:	4413      	add	r3, r2
 8002b54:	220a      	movs	r2, #10
 8002b56:	4619      	mov	r1, r3
 8002b58:	4865      	ldr	r0, [pc, #404]	; (8002cf0 <main+0x3cc>)
 8002b5a:	f016 fb2f 	bl	80191bc <f_open>

        sprintf(ConfigParams, "ID(HEX),Device,Bytes,Distribution,Instruction,Description,\n");
 8002b5e:	4b63      	ldr	r3, [pc, #396]	; (8002cec <main+0x3c8>)
 8002b60:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002b64:	443a      	add	r2, r7
 8002b66:	4413      	add	r3, r2
 8002b68:	4a62      	ldr	r2, [pc, #392]	; (8002cf4 <main+0x3d0>)
 8002b6a:	461c      	mov	r4, r3
 8002b6c:	4615      	mov	r5, r2
 8002b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,44,%%u %%u,FileNumber(uint32_t) CurrentMillis(uint32_t),\n");
 8002b82:	4b5a      	ldr	r3, [pc, #360]	; (8002cec <main+0x3c8>)
 8002b84:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002b88:	443a      	add	r2, r7
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fba7 	bl	80002e0 <strlen>
 8002b92:	4602      	mov	r2, r0
 8002b94:	4b55      	ldr	r3, [pc, #340]	; (8002cec <main+0x3c8>)
 8002b96:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002b9a:	4439      	add	r1, r7
 8002b9c:	440b      	add	r3, r1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4955      	ldr	r1, [pc, #340]	; (8002cf8 <main+0x3d4>)
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f019 f964 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x60,Wheel Speed FL,4,4,%%u,MPH,\n");
 8002ba8:	4b50      	ldr	r3, [pc, #320]	; (8002cec <main+0x3c8>)
 8002baa:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002bae:	443a      	add	r2, r7
 8002bb0:	4413      	add	r3, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fb94 	bl	80002e0 <strlen>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b4c      	ldr	r3, [pc, #304]	; (8002cec <main+0x3c8>)
 8002bbc:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002bc0:	4439      	add	r1, r7
 8002bc2:	440b      	add	r3, r1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	494d      	ldr	r1, [pc, #308]	; (8002cfc <main+0x3d8>)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f019 f951 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x61,Wheel Speed FR,4,4,%%u,MPH,\n");
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <main+0x3c8>)
 8002bd0:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002bd4:	443a      	add	r2, r7
 8002bd6:	4413      	add	r3, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fb81 	bl	80002e0 <strlen>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b42      	ldr	r3, [pc, #264]	; (8002cec <main+0x3c8>)
 8002be2:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002be6:	4439      	add	r1, r7
 8002be8:	440b      	add	r3, r1
 8002bea:	4413      	add	r3, r2
 8002bec:	4944      	ldr	r1, [pc, #272]	; (8002d00 <main+0x3dc>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f019 f93e 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x62,Wheel Speed BL,4,4,%%u,MPH,\n");
 8002bf4:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <main+0x3c8>)
 8002bf6:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002bfa:	443a      	add	r2, r7
 8002bfc:	4413      	add	r3, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fb6e 	bl	80002e0 <strlen>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b39      	ldr	r3, [pc, #228]	; (8002cec <main+0x3c8>)
 8002c08:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002c0c:	4439      	add	r1, r7
 8002c0e:	440b      	add	r3, r1
 8002c10:	4413      	add	r3, r2
 8002c12:	493c      	ldr	r1, [pc, #240]	; (8002d04 <main+0x3e0>)
 8002c14:	4618      	mov	r0, r3
 8002c16:	f019 f92b 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x63,Wheel Speed BR,4,4,%%u,MPH,\n");
 8002c1a:	4b34      	ldr	r3, [pc, #208]	; (8002cec <main+0x3c8>)
 8002c1c:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002c20:	443a      	add	r2, r7
 8002c22:	4413      	add	r3, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fd fb5b 	bl	80002e0 <strlen>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <main+0x3c8>)
 8002c2e:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002c32:	4439      	add	r1, r7
 8002c34:	440b      	add	r3, r1
 8002c36:	4413      	add	r3, r2
 8002c38:	4933      	ldr	r1, [pc, #204]	; (8002d08 <main+0x3e4>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f019 f918 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x500,Brake Pressure Front,8,44,%%u %%u,MPH,\n");
 8002c40:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <main+0x3c8>)
 8002c42:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002c46:	443a      	add	r2, r7
 8002c48:	4413      	add	r3, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd fb48 	bl	80002e0 <strlen>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <main+0x3c8>)
 8002c54:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002c58:	4439      	add	r1, r7
 8002c5a:	440b      	add	r3, r1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	492b      	ldr	r1, [pc, #172]	; (8002d0c <main+0x3e8>)
 8002c60:	4618      	mov	r0, r3
 8002c62:	f019 f905 	bl	801be70 <siprintf>
 8002c66:	e053      	b.n	8002d10 <main+0x3ec>
 8002c68:	58020400 	.word	0x58020400
 8002c6c:	24005274 	.word	0x24005274
 8002c70:	58020000 	.word	0x58020000
 8002c74:	24000000 	.word	0x24000000
 8002c78:	0801e474 	.word	0x0801e474
 8002c7c:	24005148 	.word	0x24005148
 8002c80:	24004cc4 	.word	0x24004cc4
 8002c84:	24004ff8 	.word	0x24004ff8
 8002c88:	0801e480 	.word	0x0801e480
 8002c8c:	0801e484 	.word	0x0801e484
 8002c90:	0801e488 	.word	0x0801e488
 8002c94:	0801e48c 	.word	0x0801e48c
 8002c98:	0801e490 	.word	0x0801e490
 8002c9c:	0801e494 	.word	0x0801e494
 8002ca0:	0801e498 	.word	0x0801e498
 8002ca4:	0801e49c 	.word	0x0801e49c
 8002ca8:	0801e4a0 	.word	0x0801e4a0
 8002cac:	0801e4a4 	.word	0x0801e4a4
 8002cb0:	0801e4a8 	.word	0x0801e4a8
 8002cb4:	0801e4ac 	.word	0x0801e4ac
 8002cb8:	0801e4b0 	.word	0x0801e4b0
 8002cbc:	0801e4b4 	.word	0x0801e4b4
 8002cc0:	0801e4b8 	.word	0x0801e4b8
 8002cc4:	0801e4bc 	.word	0x0801e4bc
 8002cc8:	0801e4c0 	.word	0x0801e4c0
 8002ccc:	0801e4c4 	.word	0x0801e4c4
 8002cd0:	0801e4c8 	.word	0x0801e4c8
 8002cd4:	0801e4cc 	.word	0x0801e4cc
 8002cd8:	240053a4 	.word	0x240053a4
 8002cdc:	2400478c 	.word	0x2400478c
 8002ce0:	0801ec6c 	.word	0x0801ec6c
 8002ce4:	ffffe474 	.word	0xffffe474
 8002ce8:	0801ec80 	.word	0x0801ec80
 8002cec:	ffff9628 	.word	0xffff9628
 8002cf0:	24004a94 	.word	0x24004a94
 8002cf4:	0801e4d0 	.word	0x0801e4d0
 8002cf8:	0801e50c 	.word	0x0801e50c
 8002cfc:	0801e558 	.word	0x0801e558
 8002d00:	0801e57c 	.word	0x0801e57c
 8002d04:	0801e5a0 	.word	0x0801e5a0
 8002d08:	0801e5c4 	.word	0x0801e5c4
 8002d0c:	0801e5e8 	.word	0x0801e5e8
        sprintf(ConfigParams + strlen(ConfigParams),"0x501,Brake Pressure Back,8,44,%%u %%u,MPH,\n");
 8002d10:	4bc9      	ldr	r3, [pc, #804]	; (8003038 <main+0x714>)
 8002d12:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002d16:	443a      	add	r2, r7
 8002d18:	4413      	add	r3, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd fae0 	bl	80002e0 <strlen>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4bc5      	ldr	r3, [pc, #788]	; (8003038 <main+0x714>)
 8002d24:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002d28:	4439      	add	r1, r7
 8002d2a:	440b      	add	r3, r1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	49c3      	ldr	r1, [pc, #780]	; (800303c <main+0x718>)
 8002d30:	4618      	mov	r0, r3
 8002d32:	f019 f89d 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x504,Coolant Pressure,8,44,%%f %%f,coolant pressure,\n");
 8002d36:	4bc0      	ldr	r3, [pc, #768]	; (8003038 <main+0x714>)
 8002d38:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002d3c:	443a      	add	r2, r7
 8002d3e:	4413      	add	r3, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd facd 	bl	80002e0 <strlen>
 8002d46:	4602      	mov	r2, r0
 8002d48:	4bbb      	ldr	r3, [pc, #748]	; (8003038 <main+0x714>)
 8002d4a:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002d4e:	4439      	add	r1, r7
 8002d50:	440b      	add	r3, r1
 8002d52:	4413      	add	r3, r2
 8002d54:	49ba      	ldr	r1, [pc, #744]	; (8003040 <main+0x71c>)
 8002d56:	4618      	mov	r0, r3
 8002d58:	f019 f88a 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x503,Exhaust Temperature,8,2222,%%i %%i %%i %%i,temp degree c,\n");
 8002d5c:	4bb6      	ldr	r3, [pc, #728]	; (8003038 <main+0x714>)
 8002d5e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002d62:	443a      	add	r2, r7
 8002d64:	4413      	add	r3, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd faba 	bl	80002e0 <strlen>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4bb2      	ldr	r3, [pc, #712]	; (8003038 <main+0x714>)
 8002d70:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002d74:	4439      	add	r1, r7
 8002d76:	440b      	add	r3, r1
 8002d78:	4413      	add	r3, r2
 8002d7a:	49b2      	ldr	r1, [pc, #712]	; (8003044 <main+0x720>)
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f019 f877 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x505,Exhaust Temperature error,8,2222,%%i %%i %%i %%i,error,\n");
 8002d82:	4bad      	ldr	r3, [pc, #692]	; (8003038 <main+0x714>)
 8002d84:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002d88:	443a      	add	r2, r7
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd faa7 	bl	80002e0 <strlen>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4ba8      	ldr	r3, [pc, #672]	; (8003038 <main+0x714>)
 8002d96:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002d9a:	4439      	add	r1, r7
 8002d9c:	440b      	add	r3, r1
 8002d9e:	4413      	add	r3, r2
 8002da0:	49a9      	ldr	r1, [pc, #676]	; (8003048 <main+0x724>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	f019 f864 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x502,Steering Position,2,2,%%i,degrees,\n");
 8002da8:	4ba3      	ldr	r3, [pc, #652]	; (8003038 <main+0x714>)
 8002daa:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002dae:	443a      	add	r2, r7
 8002db0:	4413      	add	r3, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fa94 	bl	80002e0 <strlen>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b9f      	ldr	r3, [pc, #636]	; (8003038 <main+0x714>)
 8002dbc:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002dc0:	4439      	add	r1, r7
 8002dc2:	440b      	add	r3, r1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	49a1      	ldr	r1, [pc, #644]	; (800304c <main+0x728>)
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f019 f851 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x2000,ECU,8,2222,%%i %%i %%i %%i,RPM-TPS(%%)-Coolant temp(C)-MAT(C),\n");
 8002dce:	4b9a      	ldr	r3, [pc, #616]	; (8003038 <main+0x714>)
 8002dd0:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002dd4:	443a      	add	r2, r7
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd fa81 	bl	80002e0 <strlen>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b95      	ldr	r3, [pc, #596]	; (8003038 <main+0x714>)
 8002de2:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002de6:	4439      	add	r1, r7
 8002de8:	440b      	add	r3, r1
 8002dea:	4413      	add	r3, r2
 8002dec:	4998      	ldr	r1, [pc, #608]	; (8003050 <main+0x72c>)
 8002dee:	4618      	mov	r0, r3
 8002df0:	f019 f83e 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x2001,ECU,8,2222,%%i %%i %%i %%i,MAP(kPa)-Lambda x1000-KPH x10-Oil Pressure(kPa),\n");
 8002df4:	4b90      	ldr	r3, [pc, #576]	; (8003038 <main+0x714>)
 8002df6:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002dfa:	443a      	add	r2, r7
 8002dfc:	4413      	add	r3, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fa6e 	bl	80002e0 <strlen>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b8c      	ldr	r3, [pc, #560]	; (8003038 <main+0x714>)
 8002e08:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002e0c:	4439      	add	r1, r7
 8002e0e:	440b      	add	r3, r1
 8002e10:	4413      	add	r3, r2
 8002e12:	4990      	ldr	r1, [pc, #576]	; (8003054 <main+0x730>)
 8002e14:	4618      	mov	r0, r3
 8002e16:	f019 f82b 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x2002,ECU,8,2222,%%i %%i %%i %%i,Fuel Pressure(Kpa)-Oil Temperature(C)-Volts x10-Fuel Consumption(L/100Km x 10),\n");
 8002e1a:	4b87      	ldr	r3, [pc, #540]	; (8003038 <main+0x714>)
 8002e1c:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002e20:	443a      	add	r2, r7
 8002e22:	4413      	add	r3, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd fa5b 	bl	80002e0 <strlen>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	4b82      	ldr	r3, [pc, #520]	; (8003038 <main+0x714>)
 8002e2e:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002e32:	4439      	add	r1, r7
 8002e34:	440b      	add	r3, r1
 8002e36:	4413      	add	r3, r2
 8002e38:	4987      	ldr	r1, [pc, #540]	; (8003058 <main+0x734>)
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f019 f818 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x2003,ECU,8,2222,%%i %%i %%i %%i,Gear-Advance Deg x10-Injection ms x100-Fuel Consumption L/Hr x10,\n");
 8002e40:	4b7d      	ldr	r3, [pc, #500]	; (8003038 <main+0x714>)
 8002e42:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002e46:	443a      	add	r2, r7
 8002e48:	4413      	add	r3, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fa48 	bl	80002e0 <strlen>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b79      	ldr	r3, [pc, #484]	; (8003038 <main+0x714>)
 8002e54:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002e58:	4439      	add	r1, r7
 8002e5a:	440b      	add	r3, r1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	497f      	ldr	r1, [pc, #508]	; (800305c <main+0x738>)
 8002e60:	4618      	mov	r0, r3
 8002e62:	f019 f805 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x2004,ECU,8,2222,%%i %%i %%i %%i,Ana1 mV-Ana2 mV-Ana3 mV-Cam Advance x10,\n");
 8002e66:	4b74      	ldr	r3, [pc, #464]	; (8003038 <main+0x714>)
 8002e68:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002e6c:	443a      	add	r2, r7
 8002e6e:	4413      	add	r3, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fa35 	bl	80002e0 <strlen>
 8002e76:	4602      	mov	r2, r0
 8002e78:	4b6f      	ldr	r3, [pc, #444]	; (8003038 <main+0x714>)
 8002e7a:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002e7e:	4439      	add	r1, r7
 8002e80:	440b      	add	r3, r1
 8002e82:	4413      	add	r3, r2
 8002e84:	4976      	ldr	r1, [pc, #472]	; (8003060 <main+0x73c>)
 8002e86:	4618      	mov	r0, r3
 8002e88:	f018 fff2 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x2005,ECU,8,2222,%%i %%i %%i %%i,Cam Targ x10-Cam PWM x10-Crank Errors-Cam Error,\n");
 8002e8c:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <main+0x714>)
 8002e8e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002e92:	443a      	add	r2, r7
 8002e94:	4413      	add	r3, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fa22 	bl	80002e0 <strlen>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b66      	ldr	r3, [pc, #408]	; (8003038 <main+0x714>)
 8002ea0:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002ea4:	4439      	add	r1, r7
 8002ea6:	440b      	add	r3, r1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	496e      	ldr	r1, [pc, #440]	; (8003064 <main+0x740>)
 8002eac:	4618      	mov	r0, r3
 8002eae:	f018 ffdf 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x90,Power board,4,4,%%f,Current 1 (A),\n");
 8002eb2:	4b61      	ldr	r3, [pc, #388]	; (8003038 <main+0x714>)
 8002eb4:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002eb8:	443a      	add	r2, r7
 8002eba:	4413      	add	r3, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd fa0f 	bl	80002e0 <strlen>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <main+0x714>)
 8002ec6:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002eca:	4439      	add	r1, r7
 8002ecc:	440b      	add	r3, r1
 8002ece:	4413      	add	r3, r2
 8002ed0:	4965      	ldr	r1, [pc, #404]	; (8003068 <main+0x744>)
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f018 ffcc 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x91,Power board,4,4,%%f,Current 2 (A),\n");
 8002ed8:	4b57      	ldr	r3, [pc, #348]	; (8003038 <main+0x714>)
 8002eda:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002ede:	443a      	add	r2, r7
 8002ee0:	4413      	add	r3, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd f9fc 	bl	80002e0 <strlen>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b53      	ldr	r3, [pc, #332]	; (8003038 <main+0x714>)
 8002eec:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002ef0:	4439      	add	r1, r7
 8002ef2:	440b      	add	r3, r1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	495d      	ldr	r1, [pc, #372]	; (800306c <main+0x748>)
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f018 ffb9 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x92,Power board,4,4,%%f,Current 3 (A),\n");
 8002efe:	4b4e      	ldr	r3, [pc, #312]	; (8003038 <main+0x714>)
 8002f00:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002f04:	443a      	add	r2, r7
 8002f06:	4413      	add	r3, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd f9e9 	bl	80002e0 <strlen>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4b49      	ldr	r3, [pc, #292]	; (8003038 <main+0x714>)
 8002f12:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002f16:	4439      	add	r1, r7
 8002f18:	440b      	add	r3, r1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4954      	ldr	r1, [pc, #336]	; (8003070 <main+0x74c>)
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f018 ffa6 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x93,Power board,4,4,%%f,Current 4 (A),\n");
 8002f24:	4b44      	ldr	r3, [pc, #272]	; (8003038 <main+0x714>)
 8002f26:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002f2a:	443a      	add	r2, r7
 8002f2c:	4413      	add	r3, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd f9d6 	bl	80002e0 <strlen>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b40      	ldr	r3, [pc, #256]	; (8003038 <main+0x714>)
 8002f38:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002f3c:	4439      	add	r1, r7
 8002f3e:	440b      	add	r3, r1
 8002f40:	4413      	add	r3, r2
 8002f42:	494c      	ldr	r1, [pc, #304]	; (8003074 <main+0x750>)
 8002f44:	4618      	mov	r0, r3
 8002f46:	f018 ff93 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x94,Power board,4,4,%%f,Current 5 (A),\n");
 8002f4a:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <main+0x714>)
 8002f4c:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002f50:	443a      	add	r2, r7
 8002f52:	4413      	add	r3, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd f9c3 	bl	80002e0 <strlen>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b36      	ldr	r3, [pc, #216]	; (8003038 <main+0x714>)
 8002f5e:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002f62:	4439      	add	r1, r7
 8002f64:	440b      	add	r3, r1
 8002f66:	4413      	add	r3, r2
 8002f68:	4943      	ldr	r1, [pc, #268]	; (8003078 <main+0x754>)
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f018 ff80 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x95,Power board,4,4,%%f,Current 6 (A),\n");
 8002f70:	4b31      	ldr	r3, [pc, #196]	; (8003038 <main+0x714>)
 8002f72:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002f76:	443a      	add	r2, r7
 8002f78:	4413      	add	r3, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd f9b0 	bl	80002e0 <strlen>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <main+0x714>)
 8002f84:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002f88:	4439      	add	r1, r7
 8002f8a:	440b      	add	r3, r1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	493b      	ldr	r1, [pc, #236]	; (800307c <main+0x758>)
 8002f90:	4618      	mov	r0, r3
 8002f92:	f018 ff6d 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x96,Power board,4,4,%%f,Current 7 (A),\n");
 8002f96:	4b28      	ldr	r3, [pc, #160]	; (8003038 <main+0x714>)
 8002f98:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002f9c:	443a      	add	r2, r7
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd f99d 	bl	80002e0 <strlen>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	4b23      	ldr	r3, [pc, #140]	; (8003038 <main+0x714>)
 8002faa:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002fae:	4439      	add	r1, r7
 8002fb0:	440b      	add	r3, r1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4932      	ldr	r1, [pc, #200]	; (8003080 <main+0x75c>)
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f018 ff5a 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x97,Power board,4,4,%%f,Current 8 (A),\n");
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <main+0x714>)
 8002fbe:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002fc2:	443a      	add	r2, r7
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd f98a 	bl	80002e0 <strlen>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <main+0x714>)
 8002fd0:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002fd4:	4439      	add	r1, r7
 8002fd6:	440b      	add	r3, r1
 8002fd8:	4413      	add	r3, r2
 8002fda:	492a      	ldr	r1, [pc, #168]	; (8003084 <main+0x760>)
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f018 ff47 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x98,Power board,4,4,%%f,Current 9 (A),\n");
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <main+0x714>)
 8002fe4:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002fe8:	443a      	add	r2, r7
 8002fea:	4413      	add	r3, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fd f977 	bl	80002e0 <strlen>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <main+0x714>)
 8002ff6:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002ffa:	4439      	add	r1, r7
 8002ffc:	440b      	add	r3, r1
 8002ffe:	4413      	add	r3, r2
 8003000:	4921      	ldr	r1, [pc, #132]	; (8003088 <main+0x764>)
 8003002:	4618      	mov	r0, r3
 8003004:	f018 ff34 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x99,Power board,4,4,%%f,Current 10 (A),\n");
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <main+0x714>)
 800300a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800300e:	443a      	add	r2, r7
 8003010:	4413      	add	r3, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd f964 	bl	80002e0 <strlen>
 8003018:	4602      	mov	r2, r0
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <main+0x714>)
 800301c:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003020:	4439      	add	r1, r7
 8003022:	440b      	add	r3, r1
 8003024:	4413      	add	r3, r2
 8003026:	4919      	ldr	r1, [pc, #100]	; (800308c <main+0x768>)
 8003028:	4618      	mov	r0, r3
 800302a:	f018 ff21 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x9A,Power board,4,4,%%f,Current 11 (A),\n");
 800302e:	4b02      	ldr	r3, [pc, #8]	; (8003038 <main+0x714>)
 8003030:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003034:	e02c      	b.n	8003090 <main+0x76c>
 8003036:	bf00      	nop
 8003038:	ffff9628 	.word	0xffff9628
 800303c:	0801e618 	.word	0x0801e618
 8003040:	0801e648 	.word	0x0801e648
 8003044:	0801e680 	.word	0x0801e680
 8003048:	0801e6c4 	.word	0x0801e6c4
 800304c:	0801e704 	.word	0x0801e704
 8003050:	0801e730 	.word	0x0801e730
 8003054:	0801e778 	.word	0x0801e778
 8003058:	0801e7cc 	.word	0x0801e7cc
 800305c:	0801e840 	.word	0x0801e840
 8003060:	0801e8a8 	.word	0x0801e8a8
 8003064:	0801e8f4 	.word	0x0801e8f4
 8003068:	0801e948 	.word	0x0801e948
 800306c:	0801e974 	.word	0x0801e974
 8003070:	0801e9a0 	.word	0x0801e9a0
 8003074:	0801e9cc 	.word	0x0801e9cc
 8003078:	0801e9f8 	.word	0x0801e9f8
 800307c:	0801ea24 	.word	0x0801ea24
 8003080:	0801ea50 	.word	0x0801ea50
 8003084:	0801ea7c 	.word	0x0801ea7c
 8003088:	0801eaa8 	.word	0x0801eaa8
 800308c:	0801ead4 	.word	0x0801ead4
 8003090:	443a      	add	r2, r7
 8003092:	4413      	add	r3, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd f923 	bl	80002e0 <strlen>
 800309a:	4602      	mov	r2, r0
 800309c:	4ba3      	ldr	r3, [pc, #652]	; (800332c <main+0xa08>)
 800309e:	f646 2170 	movw	r1, #27248	; 0x6a70
 80030a2:	4439      	add	r1, r7
 80030a4:	440b      	add	r3, r1
 80030a6:	4413      	add	r3, r2
 80030a8:	49a1      	ldr	r1, [pc, #644]	; (8003330 <main+0xa0c>)
 80030aa:	4618      	mov	r0, r3
 80030ac:	f018 fee0 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x9B,Power board,4,4,%%f,Current 12 (A),\n");
 80030b0:	4b9e      	ldr	r3, [pc, #632]	; (800332c <main+0xa08>)
 80030b2:	f646 2270 	movw	r2, #27248	; 0x6a70
 80030b6:	443a      	add	r2, r7
 80030b8:	4413      	add	r3, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd f910 	bl	80002e0 <strlen>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b9a      	ldr	r3, [pc, #616]	; (800332c <main+0xa08>)
 80030c4:	f646 2170 	movw	r1, #27248	; 0x6a70
 80030c8:	4439      	add	r1, r7
 80030ca:	440b      	add	r3, r1
 80030cc:	4413      	add	r3, r2
 80030ce:	4999      	ldr	r1, [pc, #612]	; (8003334 <main+0xa10>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f018 fecd 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x9C,Power board,4,4,%%f,Current 13 (A),\n");
 80030d6:	4b95      	ldr	r3, [pc, #596]	; (800332c <main+0xa08>)
 80030d8:	f646 2270 	movw	r2, #27248	; 0x6a70
 80030dc:	443a      	add	r2, r7
 80030de:	4413      	add	r3, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd f8fd 	bl	80002e0 <strlen>
 80030e6:	4602      	mov	r2, r0
 80030e8:	4b90      	ldr	r3, [pc, #576]	; (800332c <main+0xa08>)
 80030ea:	f646 2170 	movw	r1, #27248	; 0x6a70
 80030ee:	4439      	add	r1, r7
 80030f0:	440b      	add	r3, r1
 80030f2:	4413      	add	r3, r2
 80030f4:	4990      	ldr	r1, [pc, #576]	; (8003338 <main+0xa14>)
 80030f6:	4618      	mov	r0, r3
 80030f8:	f018 feba 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x9D,Power board,4,4,%%f,Current 14 (A),\n");
 80030fc:	4b8b      	ldr	r3, [pc, #556]	; (800332c <main+0xa08>)
 80030fe:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003102:	443a      	add	r2, r7
 8003104:	4413      	add	r3, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd f8ea 	bl	80002e0 <strlen>
 800310c:	4602      	mov	r2, r0
 800310e:	4b87      	ldr	r3, [pc, #540]	; (800332c <main+0xa08>)
 8003110:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003114:	4439      	add	r1, r7
 8003116:	440b      	add	r3, r1
 8003118:	4413      	add	r3, r2
 800311a:	4988      	ldr	r1, [pc, #544]	; (800333c <main+0xa18>)
 800311c:	4618      	mov	r0, r3
 800311e:	f018 fea7 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x9E,Power board,4,4,%%f,Current 15 (A),\n");
 8003122:	4b82      	ldr	r3, [pc, #520]	; (800332c <main+0xa08>)
 8003124:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003128:	443a      	add	r2, r7
 800312a:	4413      	add	r3, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd f8d7 	bl	80002e0 <strlen>
 8003132:	4602      	mov	r2, r0
 8003134:	4b7d      	ldr	r3, [pc, #500]	; (800332c <main+0xa08>)
 8003136:	f646 2170 	movw	r1, #27248	; 0x6a70
 800313a:	4439      	add	r1, r7
 800313c:	440b      	add	r3, r1
 800313e:	4413      	add	r3, r2
 8003140:	497f      	ldr	r1, [pc, #508]	; (8003340 <main+0xa1c>)
 8003142:	4618      	mov	r0, r3
 8003144:	f018 fe94 	bl	801be70 <siprintf>
        sprintf(ConfigParams + strlen(ConfigParams),"0x9F,Power board,4,4,%%f,Current 16 (A),\n");
 8003148:	4b78      	ldr	r3, [pc, #480]	; (800332c <main+0xa08>)
 800314a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800314e:	443a      	add	r2, r7
 8003150:	4413      	add	r3, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd f8c4 	bl	80002e0 <strlen>
 8003158:	4602      	mov	r2, r0
 800315a:	4b74      	ldr	r3, [pc, #464]	; (800332c <main+0xa08>)
 800315c:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003160:	4439      	add	r1, r7
 8003162:	440b      	add	r3, r1
 8003164:	4413      	add	r3, r2
 8003166:	4977      	ldr	r1, [pc, #476]	; (8003344 <main+0xa20>)
 8003168:	4618      	mov	r0, r3
 800316a:	f018 fe81 	bl	801be70 <siprintf>

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 800316e:	4b6f      	ldr	r3, [pc, #444]	; (800332c <main+0xa08>)
 8003170:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003174:	443a      	add	r2, r7
 8003176:	4413      	add	r3, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd f8b1 	bl	80002e0 <strlen>
 800317e:	4602      	mov	r2, r0
 8003180:	496a      	ldr	r1, [pc, #424]	; (800332c <main+0xa08>)
 8003182:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003186:	443b      	add	r3, r7
 8003188:	4419      	add	r1, r3
 800318a:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <main+0xa24>)
 800318c:	486f      	ldr	r0, [pc, #444]	; (800334c <main+0xa28>)
 800318e:	f016 fb12 	bl	80197b6 <f_write>
 8003192:	e00a      	b.n	80031aa <main+0x886>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, sizeof(ConfigParams), &ConfByteR);
 8003194:	4965      	ldr	r1, [pc, #404]	; (800332c <main+0xa08>)
 8003196:	f646 2370 	movw	r3, #27248	; 0x6a70
 800319a:	443b      	add	r3, r7
 800319c:	4419      	add	r1, r3
 800319e:	4b6c      	ldr	r3, [pc, #432]	; (8003350 <main+0xa2c>)
 80031a0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80031a4:	4869      	ldr	r0, [pc, #420]	; (800334c <main+0xa28>)
 80031a6:	f016 f9c7 	bl	8019538 <f_read>
      }
      f_close(&Config);
 80031aa:	4868      	ldr	r0, [pc, #416]	; (800334c <main+0xa28>)
 80031ac:	f016 fcf6 	bl	8019b9c <f_close>
      printf("%s\n\r", ConfigParams);
 80031b0:	4b5e      	ldr	r3, [pc, #376]	; (800332c <main+0xa08>)
 80031b2:	f646 2270 	movw	r2, #27248	; 0x6a70
 80031b6:	443a      	add	r2, r7
 80031b8:	4413      	add	r3, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	4865      	ldr	r0, [pc, #404]	; (8003354 <main+0xa30>)
 80031be:	f018 fd97 	bl	801bcf0 <iprintf>
      //MAKE NEW FILE INCREMENTED BY 1
      
      //Fill ReadInstructions
      const char delim[] = ",";
 80031c2:	4b65      	ldr	r3, [pc, #404]	; (8003358 <main+0xa34>)
 80031c4:	f646 2270 	movw	r2, #27248	; 0x6a70
 80031c8:	443a      	add	r2, r7
 80031ca:	4413      	add	r3, r2
 80031cc:	222c      	movs	r2, #44	; 0x2c
 80031ce:	801a      	strh	r2, [r3, #0]
      uint32_t i = 0, j = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	f646 226c 	movw	r2, #27244	; 0x6a6c
 80031d6:	443a      	add	r2, r7
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	2300      	movs	r3, #0
 80031dc:	f646 2268 	movw	r2, #27240	; 0x6a68
 80031e0:	443a      	add	r2, r7
 80031e2:	6013      	str	r3, [r2, #0]
      char *ptr = strtok(ConfigParams, delim);
 80031e4:	4a5c      	ldr	r2, [pc, #368]	; (8003358 <main+0xa34>)
 80031e6:	f646 2370 	movw	r3, #27248	; 0x6a70
 80031ea:	443b      	add	r3, r7
 80031ec:	441a      	add	r2, r3
 80031ee:	4b4f      	ldr	r3, [pc, #316]	; (800332c <main+0xa08>)
 80031f0:	f646 2170 	movw	r1, #27248	; 0x6a70
 80031f4:	4439      	add	r1, r7
 80031f6:	440b      	add	r3, r1
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f018 fe60 	bl	801bec0 <strtok>
 8003200:	f646 2364 	movw	r3, #27236	; 0x6a64
 8003204:	443b      	add	r3, r7
 8003206:	6018      	str	r0, [r3, #0]
      //skip over header
      for(int c = 0; c < 6; c++){
 8003208:	2300      	movs	r3, #0
 800320a:	f646 2260 	movw	r2, #27232	; 0x6a60
 800320e:	443a      	add	r2, r7
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e015      	b.n	8003240 <main+0x91c>
    	  ptr = strtok(NULL, delim);
 8003214:	4b50      	ldr	r3, [pc, #320]	; (8003358 <main+0xa34>)
 8003216:	f646 2270 	movw	r2, #27248	; 0x6a70
 800321a:	443a      	add	r2, r7
 800321c:	4413      	add	r3, r2
 800321e:	4619      	mov	r1, r3
 8003220:	2000      	movs	r0, #0
 8003222:	f018 fe4d 	bl	801bec0 <strtok>
 8003226:	f646 2364 	movw	r3, #27236	; 0x6a64
 800322a:	443b      	add	r3, r7
 800322c:	6018      	str	r0, [r3, #0]
      for(int c = 0; c < 6; c++){
 800322e:	f646 2360 	movw	r3, #27232	; 0x6a60
 8003232:	443b      	add	r3, r7
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	f646 2260 	movw	r2, #27232	; 0x6a60
 800323c:	443a      	add	r2, r7
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	f646 2360 	movw	r3, #27232	; 0x6a60
 8003244:	443b      	add	r3, r7
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b05      	cmp	r3, #5
 800324a:	dde3      	ble.n	8003214 <main+0x8f0>
      }
      while(ptr != NULL /*&& j < (sizeof(*Configs)/sizeof(ReadInstruction))*/){
 800324c:	e0c0      	b.n	80033d0 <main+0xaac>
		switch(i){
 800324e:	f646 236c 	movw	r3, #27244	; 0x6a6c
 8003252:	443b      	add	r3, r7
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b06      	cmp	r3, #6
 8003258:	f200 80a4 	bhi.w	80033a4 <main+0xa80>
 800325c:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <main+0x940>)
 800325e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003262:	bf00      	nop
 8003264:	08003281 	.word	0x08003281
 8003268:	080033a5 	.word	0x080033a5
 800326c:	080032ad 	.word	0x080032ad
 8003270:	080032d7 	.word	0x080032d7
 8003274:	08003307 	.word	0x08003307
 8003278:	080033a5 	.word	0x080033a5
 800327c:	08003361 	.word	0x08003361
			case 0:
				Configs[j].id = (int)strtol(ptr, NULL, 0);
 8003280:	2200      	movs	r2, #0
 8003282:	2100      	movs	r1, #0
 8003284:	f646 2364 	movw	r3, #27236	; 0x6a64
 8003288:	443b      	add	r3, r7
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	f018 fee8 	bl	801c060 <strtol>
 8003290:	4603      	mov	r3, r0
 8003292:	4618      	mov	r0, r3
 8003294:	4931      	ldr	r1, [pc, #196]	; (800335c <main+0xa38>)
 8003296:	f646 2368 	movw	r3, #27240	; 0x6a68
 800329a:	443b      	add	r3, r7
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	440b      	add	r3, r1
 80032a8:	6018      	str	r0, [r3, #0]
				break;
 80032aa:	e07b      	b.n	80033a4 <main+0xa80>
			case 2:
				Configs[j].Bytes = atoi(ptr);
 80032ac:	f646 2364 	movw	r3, #27236	; 0x6a64
 80032b0:	443b      	add	r3, r7
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	f017 ffe5 	bl	801b282 <atoi>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4618      	mov	r0, r3
 80032bc:	4927      	ldr	r1, [pc, #156]	; (800335c <main+0xa38>)
 80032be:	f646 2368 	movw	r3, #27240	; 0x6a68
 80032c2:	443b      	add	r3, r7
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	440b      	add	r3, r1
 80032d0:	3304      	adds	r3, #4
 80032d2:	6018      	str	r0, [r3, #0]
				break;
 80032d4:	e066      	b.n	80033a4 <main+0xa80>
			case 3:
				Configs[j].Distribution = atoi(ptr);
 80032d6:	f646 2364 	movw	r3, #27236	; 0x6a64
 80032da:	443b      	add	r3, r7
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	f017 ffd0 	bl	801b282 <atoi>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4619      	mov	r1, r3
 80032e6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80032ea:	4c1c      	ldr	r4, [pc, #112]	; (800335c <main+0xa38>)
 80032ec:	f646 2368 	movw	r3, #27240	; 0x6a68
 80032f0:	443b      	add	r3, r7
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	4603      	mov	r3, r0
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4403      	add	r3, r0
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	4423      	add	r3, r4
 80032fe:	3308      	adds	r3, #8
 8003300:	e9c3 1200 	strd	r1, r2, [r3]
				break;
 8003304:	e04e      	b.n	80033a4 <main+0xa80>
			case 4:
				sprintf(Configs[j].Intsructions, "%s", ptr);
 8003306:	f646 2368 	movw	r3, #27240	; 0x6a68
 800330a:	443b      	add	r3, r7
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	3310      	adds	r3, #16
 8003318:	4a10      	ldr	r2, [pc, #64]	; (800335c <main+0xa38>)
 800331a:	4413      	add	r3, r2
 800331c:	f646 2264 	movw	r2, #27236	; 0x6a64
 8003320:	443a      	add	r2, r7
 8003322:	6811      	ldr	r1, [r2, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f018 fdc3 	bl	801beb0 <strcpy>
				break;
 800332a:	e03b      	b.n	80033a4 <main+0xa80>
 800332c:	ffff9628 	.word	0xffff9628
 8003330:	0801eb00 	.word	0x0801eb00
 8003334:	0801eb2c 	.word	0x0801eb2c
 8003338:	0801eb58 	.word	0x0801eb58
 800333c:	0801eb84 	.word	0x0801eb84
 8003340:	0801ebb0 	.word	0x0801ebb0
 8003344:	0801ebdc 	.word	0x0801ebdc
 8003348:	24004788 	.word	0x24004788
 800334c:	24004a94 	.word	0x24004a94
 8003350:	24000f40 	.word	0x24000f40
 8003354:	0801ec08 	.word	0x0801ec08
 8003358:	ffffe470 	.word	0xffffe470
 800335c:	24000f48 	.word	0x24000f48
			case 6:
				j++;
 8003360:	f646 2368 	movw	r3, #27240	; 0x6a68
 8003364:	443b      	add	r3, r7
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3301      	adds	r3, #1
 800336a:	f646 2268 	movw	r2, #27240	; 0x6a68
 800336e:	443a      	add	r2, r7
 8003370:	6013      	str	r3, [r2, #0]
				Configs[j].id = atoi(ptr);
 8003372:	f646 2364 	movw	r3, #27236	; 0x6a64
 8003376:	443b      	add	r3, r7
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	f017 ff82 	bl	801b282 <atoi>
 800337e:	4603      	mov	r3, r0
 8003380:	4618      	mov	r0, r3
 8003382:	492b      	ldr	r1, [pc, #172]	; (8003430 <main+0xb0c>)
 8003384:	f646 2368 	movw	r3, #27240	; 0x6a68
 8003388:	443b      	add	r3, r7
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4413      	add	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	440b      	add	r3, r1
 8003396:	6018      	str	r0, [r3, #0]
				i = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	f646 226c 	movw	r2, #27244	; 0x6a6c
 800339e:	443a      	add	r2, r7
 80033a0:	6013      	str	r3, [r2, #0]
				break;
 80033a2:	bf00      	nop
		}

		ptr = strtok(NULL, delim);
 80033a4:	4b23      	ldr	r3, [pc, #140]	; (8003434 <main+0xb10>)
 80033a6:	f646 2270 	movw	r2, #27248	; 0x6a70
 80033aa:	443a      	add	r2, r7
 80033ac:	4413      	add	r3, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	2000      	movs	r0, #0
 80033b2:	f018 fd85 	bl	801bec0 <strtok>
 80033b6:	f646 2364 	movw	r3, #27236	; 0x6a64
 80033ba:	443b      	add	r3, r7
 80033bc:	6018      	str	r0, [r3, #0]
		i++;
 80033be:	f646 236c 	movw	r3, #27244	; 0x6a6c
 80033c2:	443b      	add	r3, r7
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	f646 226c 	movw	r2, #27244	; 0x6a6c
 80033cc:	443a      	add	r2, r7
 80033ce:	6013      	str	r3, [r2, #0]
      while(ptr != NULL /*&& j < (sizeof(*Configs)/sizeof(ReadInstruction))*/){
 80033d0:	f646 2364 	movw	r3, #27236	; 0x6a64
 80033d4:	443b      	add	r3, r7
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f47f af38 	bne.w	800324e <main+0x92a>
      }


      strcpy(FilePath,Filename);
 80033de:	f644 62f0 	movw	r2, #20208	; 0x4ef0
 80033e2:	443a      	add	r2, r7
 80033e4:	4b14      	ldr	r3, [pc, #80]	; (8003438 <main+0xb14>)
 80033e6:	f646 2170 	movw	r1, #27248	; 0x6a70
 80033ea:	4439      	add	r1, r7
 80033ec:	440b      	add	r3, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f018 fd5d 	bl	801beb0 <strcpy>
      int FilePathLen = strlen(Filename);
 80033f6:	f644 63f0 	movw	r3, #20208	; 0x4ef0
 80033fa:	443b      	add	r3, r7
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fc ff6f 	bl	80002e0 <strlen>
 8003402:	4603      	mov	r3, r0
 8003404:	f646 2220 	movw	r2, #27168	; 0x6a20
 8003408:	443a      	add	r2, r7
 800340a:	6013      	str	r3, [r2, #0]
      sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 800340c:	f646 2320 	movw	r3, #27168	; 0x6a20
 8003410:	443b      	add	r3, r7
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <main+0xb14>)
 8003416:	f646 2170 	movw	r1, #27248	; 0x6a70
 800341a:	4439      	add	r1, r7
 800341c:	440b      	add	r3, r1
 800341e:	1898      	adds	r0, r3, r2
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <main+0xb18>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	4906      	ldr	r1, [pc, #24]	; (8003440 <main+0xb1c>)
 8003428:	f018 fd22 	bl	801be70 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 800342c:	e02e      	b.n	800348c <main+0xb68>
 800342e:	bf00      	nop
 8003430:	24000f48 	.word	0x24000f48
 8003434:	ffffe470 	.word	0xffffe470
 8003438:	ffff9590 	.word	0xffff9590
 800343c:	2400000c 	.word	0x2400000c
 8003440:	0801ec10 	.word	0x0801ec10
    	  f_close(&myFILE);
 8003444:	48b5      	ldr	r0, [pc, #724]	; (800371c <main+0xdf8>)
 8003446:	f016 fba9 	bl	8019b9c <f_close>
        fileNum++;
 800344a:	4bb5      	ldr	r3, [pc, #724]	; (8003720 <main+0xdfc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3301      	adds	r3, #1
 8003450:	4ab3      	ldr	r2, [pc, #716]	; (8003720 <main+0xdfc>)
 8003452:	6013      	str	r3, [r2, #0]
        strcpy(FilePath,Filename);
 8003454:	f644 62f0 	movw	r2, #20208	; 0x4ef0
 8003458:	443a      	add	r2, r7
 800345a:	4bb2      	ldr	r3, [pc, #712]	; (8003724 <main+0xe00>)
 800345c:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003460:	4439      	add	r1, r7
 8003462:	440b      	add	r3, r1
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f018 fd22 	bl	801beb0 <strcpy>
        sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 800346c:	f646 2320 	movw	r3, #27168	; 0x6a20
 8003470:	443b      	add	r3, r7
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4bab      	ldr	r3, [pc, #684]	; (8003724 <main+0xe00>)
 8003476:	f646 2170 	movw	r1, #27248	; 0x6a70
 800347a:	4439      	add	r1, r7
 800347c:	440b      	add	r3, r1
 800347e:	1898      	adds	r0, r3, r2
 8003480:	4ba7      	ldr	r3, [pc, #668]	; (8003720 <main+0xdfc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	49a8      	ldr	r1, [pc, #672]	; (8003728 <main+0xe04>)
 8003488:	f018 fcf2 	bl	801be70 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 800348c:	4ba5      	ldr	r3, [pc, #660]	; (8003724 <main+0xe00>)
 800348e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003492:	443a      	add	r2, r7
 8003494:	4413      	add	r3, r2
 8003496:	2201      	movs	r2, #1
 8003498:	4619      	mov	r1, r3
 800349a:	48a0      	ldr	r0, [pc, #640]	; (800371c <main+0xdf8>)
 800349c:	f015 fe8e 	bl	80191bc <f_open>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0ce      	beq.n	8003444 <main+0xb20>
      }
      f_open(&myFILE, FilePath, FA_WRITE | FA_CREATE_ALWAYS);
 80034a6:	4b9f      	ldr	r3, [pc, #636]	; (8003724 <main+0xe00>)
 80034a8:	f646 2270 	movw	r2, #27248	; 0x6a70
 80034ac:	443a      	add	r2, r7
 80034ae:	4413      	add	r3, r2
 80034b0:	220a      	movs	r2, #10
 80034b2:	4619      	mov	r1, r3
 80034b4:	4899      	ldr	r0, [pc, #612]	; (800371c <main+0xdf8>)
 80034b6:	f015 fe81 	bl	80191bc <f_open>
  extern int GPS_flag2;
  extern int FDCAN_Flag;
  extern int CAN_Flag;


  CAN_FD_FRAME FDBuffer[50] = {0};
 80034ba:	4b9c      	ldr	r3, [pc, #624]	; (800372c <main+0xe08>)
 80034bc:	f646 2270 	movw	r2, #27248	; 0x6a70
 80034c0:	443a      	add	r2, r7
 80034c2:	4413      	add	r3, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80034ca:	461a      	mov	r2, r3
 80034cc:	2100      	movs	r1, #0
 80034ce:	f017 ff22 	bl	801b316 <memset>
  CAN_FRAME Buffer[50] = {0};
 80034d2:	4b97      	ldr	r3, [pc, #604]	; (8003730 <main+0xe0c>)
 80034d4:	f646 2270 	movw	r2, #27248	; 0x6a70
 80034d8:	443a      	add	r2, r7
 80034da:	4413      	add	r3, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80034e2:	461a      	mov	r2, r3
 80034e4:	2100      	movs	r1, #0
 80034e6:	f017 ff16 	bl	801b316 <memset>
  uint32_t Tele_IDs[50] = {0};
 80034ea:	4b92      	ldr	r3, [pc, #584]	; (8003734 <main+0xe10>)
 80034ec:	f646 2270 	movw	r2, #27248	; 0x6a70
 80034f0:	443a      	add	r2, r7
 80034f2:	4413      	add	r3, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	23c8      	movs	r3, #200	; 0xc8
 80034f8:	461a      	mov	r2, r3
 80034fa:	2100      	movs	r1, #0
 80034fc:	f017 ff0b 	bl	801b316 <memset>
  Tele_IDs[0] = 0x321;
 8003500:	4b8c      	ldr	r3, [pc, #560]	; (8003734 <main+0xe10>)
 8003502:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003506:	443a      	add	r2, r7
 8003508:	4413      	add	r3, r2
 800350a:	f240 3221 	movw	r2, #801	; 0x321
 800350e:	601a      	str	r2, [r3, #0]

  sTime.SecondFraction = 999;
 8003510:	4b89      	ldr	r3, [pc, #548]	; (8003738 <main+0xe14>)
 8003512:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003516:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 8003518:	f002 f9b2 	bl	8005880 <HAL_GetTick>
 800351c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003520:	443b      	add	r3, r7
 8003522:	6018      	str	r0, [r3, #0]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003524:	2200      	movs	r2, #0
 8003526:	4984      	ldr	r1, [pc, #528]	; (8003738 <main+0xe14>)
 8003528:	4884      	ldr	r0, [pc, #528]	; (800373c <main+0xe18>)
 800352a:	f00a fa0b 	bl	800d944 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800352e:	2200      	movs	r2, #0
 8003530:	4983      	ldr	r1, [pc, #524]	; (8003740 <main+0xe1c>)
 8003532:	4882      	ldr	r0, [pc, #520]	; (800373c <main+0xe18>)
 8003534:	f00a faea 	bl	800db0c <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 8003538:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <main+0xe14>)
 800353a:	6859      	ldr	r1, [r3, #4]
 800353c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003540:	443b      	add	r3, r7
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b7f      	ldr	r3, [pc, #508]	; (8003744 <main+0xe20>)
 8003546:	fba3 0302 	umull	r0, r3, r3, r2
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003550:	fb00 f303 	mul.w	r3, r0, r3
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	1acb      	subs	r3, r1, r3
 8003558:	4a77      	ldr	r2, [pc, #476]	; (8003738 <main+0xe14>)
 800355a:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 800355c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003560:	443b      	add	r3, r7
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a77      	ldr	r2, [pc, #476]	; (8003744 <main+0xe20>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8003570:	443a      	add	r2, r7
 8003572:	6013      	str	r3, [r2, #0]

  if(sTime.Seconds < LocalTime % 60){
 8003574:	4b70      	ldr	r3, [pc, #448]	; (8003738 <main+0xe14>)
 8003576:	789b      	ldrb	r3, [r3, #2]
 8003578:	4618      	mov	r0, r3
 800357a:	f646 231c 	movw	r3, #27164	; 0x6a1c
 800357e:	443b      	add	r3, r7
 8003580:	6819      	ldr	r1, [r3, #0]
 8003582:	4b71      	ldr	r3, [pc, #452]	; (8003748 <main+0xe24>)
 8003584:	fba3 2301 	umull	r2, r3, r3, r1
 8003588:	095a      	lsrs	r2, r3, #5
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	1aca      	subs	r2, r1, r3
 8003594:	4290      	cmp	r0, r2
 8003596:	d20b      	bcs.n	80035b0 <main+0xc8c>
	  sTime.Seconds += 60;
 8003598:	4b67      	ldr	r3, [pc, #412]	; (8003738 <main+0xe14>)
 800359a:	789b      	ldrb	r3, [r3, #2]
 800359c:	333c      	adds	r3, #60	; 0x3c
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	4b65      	ldr	r3, [pc, #404]	; (8003738 <main+0xe14>)
 80035a2:	709a      	strb	r2, [r3, #2]
	  sTime.Minutes -= 1;
 80035a4:	4b64      	ldr	r3, [pc, #400]	; (8003738 <main+0xe14>)
 80035a6:	785b      	ldrb	r3, [r3, #1]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	4b62      	ldr	r3, [pc, #392]	; (8003738 <main+0xe14>)
 80035ae:	705a      	strb	r2, [r3, #1]
  }
  sTime.Seconds -= LocalTime % 60;
 80035b0:	4b61      	ldr	r3, [pc, #388]	; (8003738 <main+0xe14>)
 80035b2:	7898      	ldrb	r0, [r3, #2]
 80035b4:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80035b8:	443b      	add	r3, r7
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	4b62      	ldr	r3, [pc, #392]	; (8003748 <main+0xe24>)
 80035be:	fba3 2301 	umull	r2, r3, r3, r1
 80035c2:	095a      	lsrs	r2, r3, #5
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	1aca      	subs	r2, r1, r3
 80035ce:	b2d3      	uxtb	r3, r2
 80035d0:	1ac3      	subs	r3, r0, r3
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	4b58      	ldr	r3, [pc, #352]	; (8003738 <main+0xe14>)
 80035d6:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 80035d8:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80035dc:	443b      	add	r3, r7
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a59      	ldr	r2, [pc, #356]	; (8003748 <main+0xe24>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	f646 221c 	movw	r2, #27164	; 0x6a1c
 80035ec:	443a      	add	r2, r7
 80035ee:	6013      	str	r3, [r2, #0]

  if(sTime.Minutes < LocalTime % 60){
 80035f0:	4b51      	ldr	r3, [pc, #324]	; (8003738 <main+0xe14>)
 80035f2:	785b      	ldrb	r3, [r3, #1]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80035fa:	443b      	add	r3, r7
 80035fc:	6819      	ldr	r1, [r3, #0]
 80035fe:	4b52      	ldr	r3, [pc, #328]	; (8003748 <main+0xe24>)
 8003600:	fba3 2301 	umull	r2, r3, r3, r1
 8003604:	095a      	lsrs	r2, r3, #5
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	1aca      	subs	r2, r1, r3
 8003610:	4290      	cmp	r0, r2
 8003612:	d20b      	bcs.n	800362c <main+0xd08>
	  sTime.Minutes += 60;
 8003614:	4b48      	ldr	r3, [pc, #288]	; (8003738 <main+0xe14>)
 8003616:	785b      	ldrb	r3, [r3, #1]
 8003618:	333c      	adds	r3, #60	; 0x3c
 800361a:	b2da      	uxtb	r2, r3
 800361c:	4b46      	ldr	r3, [pc, #280]	; (8003738 <main+0xe14>)
 800361e:	705a      	strb	r2, [r3, #1]
	  sTime.Hours -= 1;
 8003620:	4b45      	ldr	r3, [pc, #276]	; (8003738 <main+0xe14>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	3b01      	subs	r3, #1
 8003626:	b2da      	uxtb	r2, r3
 8003628:	4b43      	ldr	r3, [pc, #268]	; (8003738 <main+0xe14>)
 800362a:	701a      	strb	r2, [r3, #0]
  }
  sTime.Minutes -= LocalTime % 60;
 800362c:	4b42      	ldr	r3, [pc, #264]	; (8003738 <main+0xe14>)
 800362e:	7858      	ldrb	r0, [r3, #1]
 8003630:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003634:	443b      	add	r3, r7
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	4b43      	ldr	r3, [pc, #268]	; (8003748 <main+0xe24>)
 800363a:	fba3 2301 	umull	r2, r3, r3, r1
 800363e:	095a      	lsrs	r2, r3, #5
 8003640:	4613      	mov	r3, r2
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	1aca      	subs	r2, r1, r3
 800364a:	b2d3      	uxtb	r3, r2
 800364c:	1ac3      	subs	r3, r0, r3
 800364e:	b2da      	uxtb	r2, r3
 8003650:	4b39      	ldr	r3, [pc, #228]	; (8003738 <main+0xe14>)
 8003652:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 8003654:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003658:	443b      	add	r3, r7
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a3a      	ldr	r2, [pc, #232]	; (8003748 <main+0xe24>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8003668:	443a      	add	r2, r7
 800366a:	6013      	str	r3, [r2, #0]
  sTime.Hours -= LocalTime % 60;
 800366c:	4b32      	ldr	r3, [pc, #200]	; (8003738 <main+0xe14>)
 800366e:	7818      	ldrb	r0, [r3, #0]
 8003670:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003674:	443b      	add	r3, r7
 8003676:	6819      	ldr	r1, [r3, #0]
 8003678:	4b33      	ldr	r3, [pc, #204]	; (8003748 <main+0xe24>)
 800367a:	fba3 2301 	umull	r2, r3, r3, r1
 800367e:	095a      	lsrs	r2, r3, #5
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	1aca      	subs	r2, r1, r3
 800368a:	b2d3      	uxtb	r3, r2
 800368c:	1ac3      	subs	r3, r0, r3
 800368e:	b2da      	uxtb	r2, r3
 8003690:	4b29      	ldr	r3, [pc, #164]	; (8003738 <main+0xe14>)
 8003692:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[500];
  int CW = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	f646 2218 	movw	r2, #27160	; 0x6a18
 800369a:	443a      	add	r2, r7
 800369c:	6013      	str	r3, [r2, #0]
  char CanFDWrite[1000];
  int CFDW = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	f646 2214 	movw	r2, #27156	; 0x6a14
 80036a4:	443a      	add	r2, r7
 80036a6:	6013      	str	r3, [r2, #0]
  int AllowedTele = 1;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f646 2210 	movw	r2, #27152	; 0x6a10
 80036ae:	443a      	add	r2, r7
 80036b0:	6013      	str	r3, [r2, #0]
  int BuffIndex = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	f646 225c 	movw	r2, #27228	; 0x6a5c
 80036b8:	443a      	add	r2, r7
 80036ba:	6013      	str	r3, [r2, #0]
  int Txcnt = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	f646 2258 	movw	r2, #27224	; 0x6a58
 80036c2:	443a      	add	r2, r7
 80036c4:	6013      	str	r3, [r2, #0]
  int TxDataSpace = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	f646 220c 	movw	r2, #27148	; 0x6a0c
 80036cc:	443a      	add	r2, r7
 80036ce:	6013      	str	r3, [r2, #0]
  uint32_t LoopTime = 10; //time a loop should take (this is aguess should test avg time)
 80036d0:	230a      	movs	r3, #10
 80036d2:	f646 2208 	movw	r2, #27144	; 0x6a08
 80036d6:	443a      	add	r2, r7
 80036d8:	6013      	str	r3, [r2, #0]
  uint32_t StartTime = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	f646 2204 	movw	r2, #27140	; 0x6a04
 80036e0:	443a      	add	r2, r7
 80036e2:	6013      	str	r3, [r2, #0]
  uint32_t EndTime = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80036ea:	6013      	str	r3, [r2, #0]
  uint32_t radiodelay = 1000;
 80036ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036f0:	f646 12fc 	movw	r2, #27132	; 0x69fc
 80036f4:	443a      	add	r2, r7
 80036f6:	6013      	str	r3, [r2, #0]
  uint32_t r_start = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f646 2254 	movw	r2, #27220	; 0x6a54
 80036fe:	443a      	add	r2, r7
 8003700:	6013      	str	r3, [r2, #0]
  uint32_t r_end = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	f646 12f8 	movw	r2, #27128	; 0x69f8
 8003708:	443a      	add	r2, r7
 800370a:	6013      	str	r3, [r2, #0]
  r_start = HAL_GetTick();
 800370c:	f002 f8b8 	bl	8005880 <HAL_GetTick>
 8003710:	f646 2354 	movw	r3, #27220	; 0x6a54
 8003714:	443b      	add	r3, r7
 8003716:	6018      	str	r0, [r3, #0]

  while (end_flag){
 8003718:	f000 bf0d 	b.w	8004536 <main+0x1c12>
 800371c:	24000d10 	.word	0x24000d10
 8003720:	2400000c 	.word	0x2400000c
 8003724:	ffff9590 	.word	0xffff9590
 8003728:	0801ec10 	.word	0x0801ec10
 800372c:	ffffefe8 	.word	0xffffefe8
 8003730:	ffffeb38 	.word	0xffffeb38
 8003734:	ffffea70 	.word	0xffffea70
 8003738:	24000ca4 	.word	0x24000ca4
 800373c:	24005124 	.word	0x24005124
 8003740:	24000cb8 	.word	0x24000cb8
 8003744:	10624dd3 	.word	0x10624dd3
 8003748:	88888889 	.word	0x88888889
    StartTime = HAL_GetTick();
 800374c:	f002 f898 	bl	8005880 <HAL_GetTick>
 8003750:	f646 2304 	movw	r3, #27140	; 0x6a04
 8003754:	443b      	add	r3, r7
 8003756:	6018      	str	r0, [r3, #0]
    
	  if(GPS_flag1){
 8003758:	4ba5      	ldr	r3, [pc, #660]	; (80039f0 <main+0x10cc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <main+0xe4c>
		  WriteToBuff(rxBuf, BUFFLENGTH/2);
 8003760:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003764:	48a3      	ldr	r0, [pc, #652]	; (80039f4 <main+0x10d0>)
 8003766:	f7ff f83f 	bl	80027e8 <WriteToBuff>
		  GPS_flag1=0;
 800376a:	4ba1      	ldr	r3, [pc, #644]	; (80039f0 <main+0x10cc>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
	  }
	  
    if(GPS_flag2){
 8003770:	4ba1      	ldr	r3, [pc, #644]	; (80039f8 <main+0x10d4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <main+0xe66>
		  WriteToBuff(rxBuf+BUFFLENGTH/2, BUFFLENGTH/2);
 8003778:	4ba0      	ldr	r3, [pc, #640]	; (80039fc <main+0x10d8>)
 800377a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff f832 	bl	80027e8 <WriteToBuff>
		  GPS_flag2=0;
 8003784:	4b9c      	ldr	r3, [pc, #624]	; (80039f8 <main+0x10d4>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
	  }

    r_end = HAL_GetTick();
 800378a:	f002 f879 	bl	8005880 <HAL_GetTick>
 800378e:	f646 13f8 	movw	r3, #27128	; 0x69f8
 8003792:	443b      	add	r3, r7
 8003794:	6018      	str	r0, [r3, #0]
    if(r_start - r_end > radiodelay && FDBuffer[0].id != 0){
 8003796:	f646 2354 	movw	r3, #27220	; 0x6a54
 800379a:	443b      	add	r3, r7
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	f646 13f8 	movw	r3, #27128	; 0x69f8
 80037a2:	443b      	add	r3, r7
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f646 12fc 	movw	r2, #27132	; 0x69fc
 80037ac:	443a      	add	r2, r7
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	f080 82a2 	bcs.w	8003cfa <main+0x13d6>
 80037b6:	4b92      	ldr	r3, [pc, #584]	; (8003a00 <main+0x10dc>)
 80037b8:	f646 2270 	movw	r2, #27248	; 0x6a70
 80037bc:	443a      	add	r2, r7
 80037be:	4413      	add	r3, r2
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8299 	beq.w	8003cfa <main+0x13d6>
      r_start = HAL_GetTick();
 80037c8:	f002 f85a 	bl	8005880 <HAL_GetTick>
 80037cc:	f646 2354 	movw	r3, #27220	; 0x6a54
 80037d0:	443b      	add	r3, r7
 80037d2:	6018      	str	r0, [r3, #0]
      for(int i = 0; i < AllowedTele; i++){
 80037d4:	2300      	movs	r3, #0
 80037d6:	f646 2250 	movw	r2, #27216	; 0x6a50
 80037da:	443a      	add	r2, r7
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e281      	b.n	8003ce4 <main+0x13c0>
        //make packet (Time ID data)
        Txcnt = sprintf(myTxData,"%u %x ",FDBuffer[BuffIndex].time, FDBuffer[BuffIndex].id);
 80037e0:	4a87      	ldr	r2, [pc, #540]	; (8003a00 <main+0x10dc>)
 80037e2:	f646 2370 	movw	r3, #27248	; 0x6a70
 80037e6:	443b      	add	r3, r7
 80037e8:	441a      	add	r2, r3
 80037ea:	f646 235c 	movw	r3, #27228	; 0x6a5c
 80037ee:	443b      	add	r3, r7
 80037f0:	6819      	ldr	r1, [r3, #0]
 80037f2:	460b      	mov	r3, r1
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	4413      	add	r3, r2
 80037fc:	330c      	adds	r3, #12
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	4a7f      	ldr	r2, [pc, #508]	; (8003a00 <main+0x10dc>)
 8003802:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003806:	443b      	add	r3, r7
 8003808:	441a      	add	r2, r3
 800380a:	f646 235c 	movw	r3, #27228	; 0x6a5c
 800380e:	443b      	add	r3, r7
 8003810:	6819      	ldr	r1, [r3, #0]
 8003812:	460b      	mov	r3, r1
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	4413      	add	r3, r2
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4602      	mov	r2, r0
 8003820:	4978      	ldr	r1, [pc, #480]	; (8003a04 <main+0x10e0>)
 8003822:	4879      	ldr	r0, [pc, #484]	; (8003a08 <main+0x10e4>)
 8003824:	f018 fb24 	bl	801be70 <siprintf>
 8003828:	f646 2358 	movw	r3, #27224	; 0x6a58
 800382c:	443b      	add	r3, r7
 800382e:	6018      	str	r0, [r3, #0]
        TxDataSpace = 32 - Txcnt;
 8003830:	f646 2358 	movw	r3, #27224	; 0x6a58
 8003834:	443b      	add	r3, r7
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1c3 0320 	rsb	r3, r3, #32
 800383c:	f646 220c 	movw	r2, #27148	; 0x6a0c
 8003840:	443a      	add	r2, r7
 8003842:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].length > TxDataSpace){
 8003844:	4a6e      	ldr	r2, [pc, #440]	; (8003a00 <main+0x10dc>)
 8003846:	f646 2370 	movw	r3, #27248	; 0x6a70
 800384a:	443b      	add	r3, r7
 800384c:	441a      	add	r2, r3
 800384e:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003852:	443b      	add	r3, r7
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	460b      	mov	r3, r1
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4413      	add	r3, r2
 8003860:	3308      	adds	r3, #8
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8003868:	443b      	add	r3, r7
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	f240 81b8 	bls.w	8003be2 <main+0x12be>
          for(int i = 0; i < TxDataSpace; i++){
 8003872:	2300      	movs	r3, #0
 8003874:	f646 224c 	movw	r2, #27212	; 0x6a4c
 8003878:	443a      	add	r2, r7
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	e031      	b.n	80038e2 <main+0xfbe>
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 800387e:	f646 2358 	movw	r3, #27224	; 0x6a58
 8003882:	443b      	add	r3, r7
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a60      	ldr	r2, [pc, #384]	; (8003a08 <main+0x10e4>)
 8003888:	1898      	adds	r0, r3, r2
 800388a:	4a5d      	ldr	r2, [pc, #372]	; (8003a00 <main+0x10dc>)
 800388c:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003890:	443b      	add	r3, r7
 8003892:	441a      	add	r2, r3
 8003894:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003898:	443b      	add	r3, r7
 800389a:	6819      	ldr	r1, [r3, #0]
 800389c:	460b      	mov	r3, r1
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	441a      	add	r2, r3
 80038a6:	f646 234c 	movw	r3, #27212	; 0x6a4c
 80038aa:	443b      	add	r3, r7
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	3310      	adds	r3, #16
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	4955      	ldr	r1, [pc, #340]	; (8003a0c <main+0x10e8>)
 80038b8:	f018 fada 	bl	801be70 <siprintf>
 80038bc:	4602      	mov	r2, r0
 80038be:	f646 2358 	movw	r3, #27224	; 0x6a58
 80038c2:	443b      	add	r3, r7
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4413      	add	r3, r2
 80038c8:	f646 2258 	movw	r2, #27224	; 0x6a58
 80038cc:	443a      	add	r2, r7
 80038ce:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < TxDataSpace; i++){
 80038d0:	f646 234c 	movw	r3, #27212	; 0x6a4c
 80038d4:	443b      	add	r3, r7
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3301      	adds	r3, #1
 80038da:	f646 224c 	movw	r2, #27212	; 0x6a4c
 80038de:	443a      	add	r2, r7
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	f646 234c 	movw	r3, #27212	; 0x6a4c
 80038e6:	443b      	add	r3, r7
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	f646 230c 	movw	r3, #27148	; 0x6a0c
 80038ee:	443b      	add	r3, r7
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	dbc3      	blt.n	800387e <main+0xf5a>
          }
          NRF24_write(myTxData, 32);
 80038f6:	2120      	movs	r1, #32
 80038f8:	4843      	ldr	r0, [pc, #268]	; (8003a08 <main+0x10e4>)
 80038fa:	f7fe f883 	bl	8001a04 <NRF24_write>
          Txcnt = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	f646 2258 	movw	r2, #27224	; 0x6a58
 8003904:	443a      	add	r2, r7
 8003906:	6013      	str	r3, [r2, #0]
          if(FDBuffer[BuffIndex].length - TxDataSpace > 32){
 8003908:	4a3d      	ldr	r2, [pc, #244]	; (8003a00 <main+0x10dc>)
 800390a:	f646 2370 	movw	r3, #27248	; 0x6a70
 800390e:	443b      	add	r3, r7
 8003910:	441a      	add	r2, r3
 8003912:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003916:	443b      	add	r3, r7
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	460b      	mov	r3, r1
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	4413      	add	r3, r2
 8003924:	3308      	adds	r3, #8
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	f646 230c 	movw	r3, #27148	; 0x6a0c
 800392c:	443b      	add	r3, r7
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b20      	cmp	r3, #32
 8003934:	f240 80d1 	bls.w	8003ada <main+0x11b6>
            for(int i = 0; i < 32; i++){
 8003938:	2300      	movs	r3, #0
 800393a:	f646 2248 	movw	r2, #27208	; 0x6a48
 800393e:	443a      	add	r2, r7
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e037      	b.n	80039b4 <main+0x1090>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 8003944:	f646 2358 	movw	r3, #27224	; 0x6a58
 8003948:	443b      	add	r3, r7
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2e      	ldr	r2, [pc, #184]	; (8003a08 <main+0x10e4>)
 800394e:	189c      	adds	r4, r3, r2
 8003950:	f646 2348 	movw	r3, #27208	; 0x6a48
 8003954:	443b      	add	r3, r7
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	f646 230c 	movw	r3, #27148	; 0x6a0c
 800395c:	443b      	add	r3, r7
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	18d0      	adds	r0, r2, r3
 8003962:	4a27      	ldr	r2, [pc, #156]	; (8003a00 <main+0x10dc>)
 8003964:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003968:	443b      	add	r3, r7
 800396a:	441a      	add	r2, r3
 800396c:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003970:	443b      	add	r3, r7
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	460b      	mov	r3, r1
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	4413      	add	r3, r2
 800397e:	4403      	add	r3, r0
 8003980:	3310      	adds	r3, #16
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	4921      	ldr	r1, [pc, #132]	; (8003a0c <main+0x10e8>)
 8003988:	4620      	mov	r0, r4
 800398a:	f018 fa71 	bl	801be70 <siprintf>
 800398e:	4602      	mov	r2, r0
 8003990:	f646 2358 	movw	r3, #27224	; 0x6a58
 8003994:	443b      	add	r3, r7
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4413      	add	r3, r2
 800399a:	f646 2258 	movw	r2, #27224	; 0x6a58
 800399e:	443a      	add	r2, r7
 80039a0:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < 32; i++){
 80039a2:	f646 2348 	movw	r3, #27208	; 0x6a48
 80039a6:	443b      	add	r3, r7
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3301      	adds	r3, #1
 80039ac:	f646 2248 	movw	r2, #27208	; 0x6a48
 80039b0:	443a      	add	r2, r7
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	f646 2348 	movw	r3, #27208	; 0x6a48
 80039b8:	443b      	add	r3, r7
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b1f      	cmp	r3, #31
 80039be:	ddc1      	ble.n	8003944 <main+0x1020>
            }
            Txcnt = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f646 2258 	movw	r2, #27224	; 0x6a58
 80039c6:	443a      	add	r2, r7
 80039c8:	6013      	str	r3, [r2, #0]
            i++;
 80039ca:	f646 2350 	movw	r3, #27216	; 0x6a50
 80039ce:	443b      	add	r3, r7
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3301      	adds	r3, #1
 80039d4:	f646 2250 	movw	r2, #27216	; 0x6a50
 80039d8:	443a      	add	r2, r7
 80039da:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 80039dc:	2120      	movs	r1, #32
 80039de:	480a      	ldr	r0, [pc, #40]	; (8003a08 <main+0x10e4>)
 80039e0:	f7fe f810 	bl	8001a04 <NRF24_write>
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 80039e4:	2300      	movs	r3, #0
 80039e6:	f646 2244 	movw	r2, #27204	; 0x6a44
 80039ea:	443a      	add	r2, r7
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e049      	b.n	8003a84 <main+0x1160>
 80039f0:	24000374 	.word	0x24000374
 80039f4:	24004cc4 	.word	0x24004cc4
 80039f8:	24000378 	.word	0x24000378
 80039fc:	24004e22 	.word	0x24004e22
 8003a00:	ffffefe8 	.word	0xffffefe8
 8003a04:	0801ec18 	.word	0x0801ec18
 8003a08:	24005084 	.word	0x24005084
 8003a0c:	0801ec20 	.word	0x0801ec20
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace + 32]);
 8003a10:	f646 2358 	movw	r3, #27224	; 0x6a58
 8003a14:	443b      	add	r3, r7
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a75      	ldr	r2, [pc, #468]	; (8003bf0 <main+0x12cc>)
 8003a1a:	189c      	adds	r4, r3, r2
 8003a1c:	f646 2344 	movw	r3, #27204	; 0x6a44
 8003a20:	443b      	add	r3, r7
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8003a28:	443b      	add	r3, r7
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f103 0020 	add.w	r0, r3, #32
 8003a32:	4a70      	ldr	r2, [pc, #448]	; (8003bf4 <main+0x12d0>)
 8003a34:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003a38:	443b      	add	r3, r7
 8003a3a:	441a      	add	r2, r3
 8003a3c:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003a40:	443b      	add	r3, r7
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	460b      	mov	r3, r1
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	4413      	add	r3, r2
 8003a4e:	4403      	add	r3, r0
 8003a50:	3310      	adds	r3, #16
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	4968      	ldr	r1, [pc, #416]	; (8003bf8 <main+0x12d4>)
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f018 fa09 	bl	801be70 <siprintf>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	f646 2358 	movw	r3, #27224	; 0x6a58
 8003a64:	443b      	add	r3, r7
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f646 2258 	movw	r2, #27224	; 0x6a58
 8003a6e:	443a      	add	r2, r7
 8003a70:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 8003a72:	f646 2344 	movw	r3, #27204	; 0x6a44
 8003a76:	443b      	add	r3, r7
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	f646 2244 	movw	r2, #27204	; 0x6a44
 8003a80:	443a      	add	r2, r7
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4a5b      	ldr	r2, [pc, #364]	; (8003bf4 <main+0x12d0>)
 8003a86:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003a8a:	443b      	add	r3, r7
 8003a8c:	441a      	add	r2, r3
 8003a8e:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003a92:	443b      	add	r3, r7
 8003a94:	6819      	ldr	r1, [r3, #0]
 8003a96:	460b      	mov	r3, r1
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8003aa8:	443b      	add	r3, r7
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f103 0220 	add.w	r2, r3, #32
 8003ab2:	f646 2344 	movw	r3, #27204	; 0x6a44
 8003ab6:	443b      	add	r3, r7
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d8a8      	bhi.n	8003a10 <main+0x10ec>
            }
            i++;
 8003abe:	f646 2350 	movw	r3, #27216	; 0x6a50
 8003ac2:	443b      	add	r3, r7
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f646 2250 	movw	r2, #27216	; 0x6a50
 8003acc:	443a      	add	r2, r7
 8003ace:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 8003ad0:	2120      	movs	r1, #32
 8003ad2:	4847      	ldr	r0, [pc, #284]	; (8003bf0 <main+0x12cc>)
 8003ad4:	f7fd ff96 	bl	8001a04 <NRF24_write>
 8003ad8:	e0dc      	b.n	8003c94 <main+0x1370>
          }else{
            Txcnt = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f646 2258 	movw	r2, #27224	; 0x6a58
 8003ae0:	443a      	add	r2, r7
 8003ae2:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f646 2240 	movw	r2, #27200	; 0x6a40
 8003aea:	443a      	add	r2, r7
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	e037      	b.n	8003b60 <main+0x123c>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 8003af0:	f646 2358 	movw	r3, #27224	; 0x6a58
 8003af4:	443b      	add	r3, r7
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3d      	ldr	r2, [pc, #244]	; (8003bf0 <main+0x12cc>)
 8003afa:	189c      	adds	r4, r3, r2
 8003afc:	f646 2340 	movw	r3, #27200	; 0x6a40
 8003b00:	443b      	add	r3, r7
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8003b08:	443b      	add	r3, r7
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	18d0      	adds	r0, r2, r3
 8003b0e:	4a39      	ldr	r2, [pc, #228]	; (8003bf4 <main+0x12d0>)
 8003b10:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003b14:	443b      	add	r3, r7
 8003b16:	441a      	add	r2, r3
 8003b18:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003b1c:	443b      	add	r3, r7
 8003b1e:	6819      	ldr	r1, [r3, #0]
 8003b20:	460b      	mov	r3, r1
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	4413      	add	r3, r2
 8003b2a:	4403      	add	r3, r0
 8003b2c:	3310      	adds	r3, #16
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	4931      	ldr	r1, [pc, #196]	; (8003bf8 <main+0x12d4>)
 8003b34:	4620      	mov	r0, r4
 8003b36:	f018 f99b 	bl	801be70 <siprintf>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	f646 2358 	movw	r3, #27224	; 0x6a58
 8003b40:	443b      	add	r3, r7
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4413      	add	r3, r2
 8003b46:	f646 2258 	movw	r2, #27224	; 0x6a58
 8003b4a:	443a      	add	r2, r7
 8003b4c:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 8003b4e:	f646 2340 	movw	r3, #27200	; 0x6a40
 8003b52:	443b      	add	r3, r7
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3301      	adds	r3, #1
 8003b58:	f646 2240 	movw	r2, #27200	; 0x6a40
 8003b5c:	443a      	add	r2, r7
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4a24      	ldr	r2, [pc, #144]	; (8003bf4 <main+0x12d0>)
 8003b62:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003b66:	443b      	add	r3, r7
 8003b68:	441a      	add	r2, r3
 8003b6a:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003b6e:	443b      	add	r3, r7
 8003b70:	6819      	ldr	r1, [r3, #0]
 8003b72:	460b      	mov	r3, r1
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8003b84:	443b      	add	r3, r7
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	1ad2      	subs	r2, r2, r3
 8003b8a:	f646 2340 	movw	r3, #27200	; 0x6a40
 8003b8e:	443b      	add	r3, r7
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d8ac      	bhi.n	8003af0 <main+0x11cc>
            }
            i++;
 8003b96:	f646 2350 	movw	r3, #27216	; 0x6a50
 8003b9a:	443b      	add	r3, r7
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f646 2250 	movw	r2, #27216	; 0x6a50
 8003ba4:	443a      	add	r2, r7
 8003ba6:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, FDBuffer[BuffIndex].length - TxDataSpace);
 8003ba8:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <main+0x12d0>)
 8003baa:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003bae:	443b      	add	r3, r7
 8003bb0:	441a      	add	r2, r3
 8003bb2:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003bb6:	443b      	add	r3, r7
 8003bb8:	6819      	ldr	r1, [r3, #0]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8003bce:	443b      	add	r3, r7
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4805      	ldr	r0, [pc, #20]	; (8003bf0 <main+0x12cc>)
 8003bdc:	f7fd ff12 	bl	8001a04 <NRF24_write>
 8003be0:	e058      	b.n	8003c94 <main+0x1370>
          }
        }
        else{
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 8003be2:	2300      	movs	r3, #0
 8003be4:	f646 223c 	movw	r2, #27196	; 0x6a3c
 8003be8:	443a      	add	r2, r7
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e038      	b.n	8003c60 <main+0x133c>
 8003bee:	bf00      	nop
 8003bf0:	24005084 	.word	0x24005084
 8003bf4:	ffffefe8 	.word	0xffffefe8
 8003bf8:	0801ec20 	.word	0x0801ec20
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 8003bfc:	f646 2358 	movw	r3, #27224	; 0x6a58
 8003c00:	443b      	add	r3, r7
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4ab5      	ldr	r2, [pc, #724]	; (8003edc <main+0x15b8>)
 8003c06:	1898      	adds	r0, r3, r2
 8003c08:	4ab5      	ldr	r2, [pc, #724]	; (8003ee0 <main+0x15bc>)
 8003c0a:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003c0e:	443b      	add	r3, r7
 8003c10:	441a      	add	r2, r3
 8003c12:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003c16:	443b      	add	r3, r7
 8003c18:	6819      	ldr	r1, [r3, #0]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	441a      	add	r2, r3
 8003c24:	f646 233c 	movw	r3, #27196	; 0x6a3c
 8003c28:	443b      	add	r3, r7
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3310      	adds	r3, #16
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	49ab      	ldr	r1, [pc, #684]	; (8003ee4 <main+0x15c0>)
 8003c36:	f018 f91b 	bl	801be70 <siprintf>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	f646 2358 	movw	r3, #27224	; 0x6a58
 8003c40:	443b      	add	r3, r7
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4413      	add	r3, r2
 8003c46:	f646 2258 	movw	r2, #27224	; 0x6a58
 8003c4a:	443a      	add	r2, r7
 8003c4c:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 8003c4e:	f646 233c 	movw	r3, #27196	; 0x6a3c
 8003c52:	443b      	add	r3, r7
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3301      	adds	r3, #1
 8003c58:	f646 223c 	movw	r2, #27196	; 0x6a3c
 8003c5c:	443a      	add	r2, r7
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4a9f      	ldr	r2, [pc, #636]	; (8003ee0 <main+0x15bc>)
 8003c62:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003c66:	443b      	add	r3, r7
 8003c68:	441a      	add	r2, r3
 8003c6a:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003c6e:	443b      	add	r3, r7
 8003c70:	6819      	ldr	r1, [r3, #0]
 8003c72:	460b      	mov	r3, r1
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	f646 233c 	movw	r3, #27196	; 0x6a3c
 8003c84:	443b      	add	r3, r7
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d8b7      	bhi.n	8003bfc <main+0x12d8>
          }
          NRF24_write(myTxData, 32);//FDBuffer[BuffIndex].length + (32 - TxDataSpace)
 8003c8c:	2120      	movs	r1, #32
 8003c8e:	4893      	ldr	r0, [pc, #588]	; (8003edc <main+0x15b8>)
 8003c90:	f7fd feb8 	bl	8001a04 <NRF24_write>
        }
        BuffIndex++;
 8003c94:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003c98:	443b      	add	r3, r7
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f646 225c 	movw	r2, #27228	; 0x6a5c
 8003ca2:	443a      	add	r2, r7
 8003ca4:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].id == 0){
 8003ca6:	4a8e      	ldr	r2, [pc, #568]	; (8003ee0 <main+0x15bc>)
 8003ca8:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003cac:	443b      	add	r3, r7
 8003cae:	441a      	add	r2, r3
 8003cb0:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003cb4:	443b      	add	r3, r7
 8003cb6:	6819      	ldr	r1, [r3, #0]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	4413      	add	r3, r2
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d104      	bne.n	8003cd2 <main+0x13ae>
          BuffIndex = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f646 225c 	movw	r2, #27228	; 0x6a5c
 8003cce:	443a      	add	r2, r7
 8003cd0:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < AllowedTele; i++){
 8003cd2:	f646 2350 	movw	r3, #27216	; 0x6a50
 8003cd6:	443b      	add	r3, r7
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f646 2250 	movw	r2, #27216	; 0x6a50
 8003ce0:	443a      	add	r2, r7
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	f646 2350 	movw	r3, #27216	; 0x6a50
 8003ce8:	443b      	add	r3, r7
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	f646 2310 	movw	r3, #27152	; 0x6a10
 8003cf0:	443b      	add	r3, r7
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	f6ff ad73 	blt.w	80037e0 <main+0xebc>


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/

	  if(FDCAN_Flag){
 8003cfa:	4b7b      	ldr	r3, [pc, #492]	; (8003ee8 <main+0x15c4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 820d 	beq.w	800411e <main+0x17fa>

		  RTC_TimeTypeDef lTime = sTime;
 8003d04:	4b79      	ldr	r3, [pc, #484]	; (8003eec <main+0x15c8>)
 8003d06:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003d0a:	443a      	add	r2, r7
 8003d0c:	4413      	add	r3, r2
 8003d0e:	4a78      	ldr	r2, [pc, #480]	; (8003ef0 <main+0x15cc>)
 8003d10:	461c      	mov	r4, r3
 8003d12:	4615      	mov	r5, r2
 8003d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 8003d1c:	4b75      	ldr	r3, [pc, #468]	; (8003ef4 <main+0x15d0>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8003d24:	443a      	add	r2, r7
 8003d26:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8003d28:	4b70      	ldr	r3, [pc, #448]	; (8003eec <main+0x15c8>)
 8003d2a:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003d2e:	443a      	add	r2, r7
 8003d30:	4413      	add	r3, r2
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003d38:	443b      	add	r3, r7
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b6e      	ldr	r3, [pc, #440]	; (8003ef8 <main+0x15d4>)
 8003d3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d42:	099b      	lsrs	r3, r3, #6
 8003d44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d48:	fb00 f303 	mul.w	r3, r0, r3
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	18ca      	adds	r2, r1, r3
 8003d50:	4b66      	ldr	r3, [pc, #408]	; (8003eec <main+0x15c8>)
 8003d52:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003d56:	4439      	add	r1, r7
 8003d58:	440b      	add	r3, r1
 8003d5a:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8003d5c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003d60:	443b      	add	r3, r7
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a64      	ldr	r2, [pc, #400]	; (8003ef8 <main+0x15d4>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	099b      	lsrs	r3, r3, #6
 8003d6c:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8003d70:	443a      	add	r2, r7
 8003d72:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8003d74:	4b5d      	ldr	r3, [pc, #372]	; (8003eec <main+0x15c8>)
 8003d76:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003d7a:	443a      	add	r2, r7
 8003d7c:	4413      	add	r3, r2
 8003d7e:	7898      	ldrb	r0, [r3, #2]
 8003d80:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003d84:	443b      	add	r3, r7
 8003d86:	6819      	ldr	r1, [r3, #0]
 8003d88:	4b5c      	ldr	r3, [pc, #368]	; (8003efc <main+0x15d8>)
 8003d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d8e:	095a      	lsrs	r2, r3, #5
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	1aca      	subs	r2, r1, r3
 8003d9a:	b2d3      	uxtb	r3, r2
 8003d9c:	4403      	add	r3, r0
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	4b52      	ldr	r3, [pc, #328]	; (8003eec <main+0x15c8>)
 8003da2:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003da6:	4439      	add	r1, r7
 8003da8:	440b      	add	r3, r1
 8003daa:	709a      	strb	r2, [r3, #2]
		  if(lTime.Seconds >= 60){
 8003dac:	4b4f      	ldr	r3, [pc, #316]	; (8003eec <main+0x15c8>)
 8003dae:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003db2:	443a      	add	r2, r7
 8003db4:	4413      	add	r3, r2
 8003db6:	789b      	ldrb	r3, [r3, #2]
 8003db8:	2b3b      	cmp	r3, #59	; 0x3b
 8003dba:	d91b      	bls.n	8003df4 <main+0x14d0>
			  lTime.Seconds -= 60;
 8003dbc:	4b4b      	ldr	r3, [pc, #300]	; (8003eec <main+0x15c8>)
 8003dbe:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003dc2:	443a      	add	r2, r7
 8003dc4:	4413      	add	r3, r2
 8003dc6:	789b      	ldrb	r3, [r3, #2]
 8003dc8:	3b3c      	subs	r3, #60	; 0x3c
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	4b47      	ldr	r3, [pc, #284]	; (8003eec <main+0x15c8>)
 8003dce:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003dd2:	4439      	add	r1, r7
 8003dd4:	440b      	add	r3, r1
 8003dd6:	709a      	strb	r2, [r3, #2]
			  lTime.Minutes += 1;
 8003dd8:	4b44      	ldr	r3, [pc, #272]	; (8003eec <main+0x15c8>)
 8003dda:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003dde:	443a      	add	r2, r7
 8003de0:	4413      	add	r3, r2
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	3301      	adds	r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	4b40      	ldr	r3, [pc, #256]	; (8003eec <main+0x15c8>)
 8003dea:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003dee:	4439      	add	r1, r7
 8003df0:	440b      	add	r3, r1
 8003df2:	705a      	strb	r2, [r3, #1]
		  }
		  LocalTime = LocalTime/60;
 8003df4:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003df8:	443b      	add	r3, r7
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a3f      	ldr	r2, [pc, #252]	; (8003efc <main+0x15d8>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8003e08:	443a      	add	r2, r7
 8003e0a:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8003e0c:	4b37      	ldr	r3, [pc, #220]	; (8003eec <main+0x15c8>)
 8003e0e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003e12:	443a      	add	r2, r7
 8003e14:	4413      	add	r3, r2
 8003e16:	7858      	ldrb	r0, [r3, #1]
 8003e18:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003e1c:	443b      	add	r3, r7
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	4b36      	ldr	r3, [pc, #216]	; (8003efc <main+0x15d8>)
 8003e22:	fba3 2301 	umull	r2, r3, r3, r1
 8003e26:	095a      	lsrs	r2, r3, #5
 8003e28:	4613      	mov	r3, r2
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	1aca      	subs	r2, r1, r3
 8003e32:	b2d3      	uxtb	r3, r2
 8003e34:	4403      	add	r3, r0
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <main+0x15c8>)
 8003e3a:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003e3e:	4439      	add	r1, r7
 8003e40:	440b      	add	r3, r1
 8003e42:	705a      	strb	r2, [r3, #1]
		  if(lTime.Minutes >= 60){
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <main+0x15c8>)
 8003e46:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003e4a:	443a      	add	r2, r7
 8003e4c:	4413      	add	r3, r2
 8003e4e:	785b      	ldrb	r3, [r3, #1]
 8003e50:	2b3b      	cmp	r3, #59	; 0x3b
 8003e52:	d91b      	bls.n	8003e8c <main+0x1568>
			  lTime.Minutes -= 60;
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <main+0x15c8>)
 8003e56:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003e5a:	443a      	add	r2, r7
 8003e5c:	4413      	add	r3, r2
 8003e5e:	785b      	ldrb	r3, [r3, #1]
 8003e60:	3b3c      	subs	r3, #60	; 0x3c
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	4b21      	ldr	r3, [pc, #132]	; (8003eec <main+0x15c8>)
 8003e66:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003e6a:	4439      	add	r1, r7
 8003e6c:	440b      	add	r3, r1
 8003e6e:	705a      	strb	r2, [r3, #1]
			  lTime.Hours += 1;
 8003e70:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <main+0x15c8>)
 8003e72:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003e76:	443a      	add	r2, r7
 8003e78:	4413      	add	r3, r2
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <main+0x15c8>)
 8003e82:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003e86:	4439      	add	r1, r7
 8003e88:	440b      	add	r3, r1
 8003e8a:	701a      	strb	r2, [r3, #0]
		  }
		  LocalTime = LocalTime/60;
 8003e8c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003e90:	443b      	add	r3, r7
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a19      	ldr	r2, [pc, #100]	; (8003efc <main+0x15d8>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8003ea0:	443a      	add	r2, r7
 8003ea2:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <main+0x15c8>)
 8003ea6:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003eaa:	443a      	add	r2, r7
 8003eac:	4413      	add	r3, r2
 8003eae:	7818      	ldrb	r0, [r3, #0]
 8003eb0:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003eb4:	443b      	add	r3, r7
 8003eb6:	6819      	ldr	r1, [r3, #0]
 8003eb8:	4b10      	ldr	r3, [pc, #64]	; (8003efc <main+0x15d8>)
 8003eba:	fba3 2301 	umull	r2, r3, r3, r1
 8003ebe:	095a      	lsrs	r2, r3, #5
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	1aca      	subs	r2, r1, r3
 8003eca:	b2d3      	uxtb	r3, r2
 8003ecc:	4403      	add	r3, r0
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <main+0x15c8>)
 8003ed2:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003ed6:	4439      	add	r1, r7
 8003ed8:	440b      	add	r3, r1
 8003eda:	e011      	b.n	8003f00 <main+0x15dc>
 8003edc:	24005084 	.word	0x24005084
 8003ee0:	ffffefe8 	.word	0xffffefe8
 8003ee4:	0801ec20 	.word	0x0801ec20
 8003ee8:	2400036c 	.word	0x2400036c
 8003eec:	ffffe45c 	.word	0xffffe45c
 8003ef0:	24000ca4 	.word	0x24000ca4
 8003ef4:	24004a00 	.word	0x24004a00
 8003ef8:	10624dd3 	.word	0x10624dd3
 8003efc:	88888889 	.word	0x88888889
 8003f00:	701a      	strb	r2, [r3, #0]
      //Write to SD Card
		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003f02:	4b6d      	ldr	r3, [pc, #436]	; (80040b8 <main+0x1794>)
 8003f04:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003f06:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003f08:	4b6b      	ldr	r3, [pc, #428]	; (80040b8 <main+0x1794>)
 8003f0a:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003f0c:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003f0e:	4b6a      	ldr	r3, [pc, #424]	; (80040b8 <main+0x1794>)
 8003f10:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003f12:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003f14:	4b69      	ldr	r3, [pc, #420]	; (80040bc <main+0x1798>)
 8003f16:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003f1a:	443a      	add	r2, r7
 8003f1c:	4413      	add	r3, r2
 8003f1e:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003f20:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003f22:	4b66      	ldr	r3, [pc, #408]	; (80040bc <main+0x1798>)
 8003f24:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003f28:	443a      	add	r2, r7
 8003f2a:	4413      	add	r3, r2
 8003f2c:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003f2e:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003f30:	4b62      	ldr	r3, [pc, #392]	; (80040bc <main+0x1798>)
 8003f32:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003f36:	443a      	add	r2, r7
 8003f38:	4413      	add	r3, r2
 8003f3a:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003f3c:	461e      	mov	r6, r3
 8003f3e:	4b5f      	ldr	r3, [pc, #380]	; (80040bc <main+0x1798>)
 8003f40:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003f44:	443a      	add	r2, r7
 8003f46:	4413      	add	r3, r2
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	4a5d      	ldr	r2, [pc, #372]	; (80040c0 <main+0x179c>)
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	485d      	ldr	r0, [pc, #372]	; (80040c4 <main+0x17a0>)
 8003f50:	f646 2870 	movw	r8, #27248	; 0x6a70
 8003f54:	44b8      	add	r8, r7
 8003f56:	4440      	add	r0, r8
 8003f58:	9205      	str	r2, [sp, #20]
 8003f5a:	9304      	str	r3, [sp, #16]
 8003f5c:	9603      	str	r6, [sp, #12]
 8003f5e:	9502      	str	r5, [sp, #8]
 8003f60:	9401      	str	r4, [sp, #4]
 8003f62:	9100      	str	r1, [sp, #0]
 8003f64:	4673      	mov	r3, lr
 8003f66:	4662      	mov	r2, ip
 8003f68:	4957      	ldr	r1, [pc, #348]	; (80040c8 <main+0x17a4>)
 8003f6a:	f017 ff81 	bl	801be70 <siprintf>
 8003f6e:	f646 2314 	movw	r3, #27156	; 0x6a14
 8003f72:	443b      	add	r3, r7
 8003f74:	6018      	str	r0, [r3, #0]
				  CanFDFrame.id);

		  CFDW = CANFD_Data_Process(CanFDWrite, CFDW);
 8003f76:	4b53      	ldr	r3, [pc, #332]	; (80040c4 <main+0x17a0>)
 8003f78:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003f7c:	443a      	add	r2, r7
 8003f7e:	4413      	add	r3, r2
 8003f80:	f646 2214 	movw	r2, #27156	; 0x6a14
 8003f84:	443a      	add	r2, r7
 8003f86:	6811      	ldr	r1, [r2, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fc fe65 	bl	8000c58 <CANFD_Data_Process>
 8003f8e:	f646 2314 	movw	r3, #27156	; 0x6a14
 8003f92:	443b      	add	r3, r7
 8003f94:	6018      	str	r0, [r3, #0]

		  CFDW += sprintf(CanFDWrite + CFDW, "\n\r");
 8003f96:	f646 2314 	movw	r3, #27156	; 0x6a14
 8003f9a:	443b      	add	r3, r7
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <main+0x17a0>)
 8003fa0:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003fa4:	4439      	add	r1, r7
 8003fa6:	440b      	add	r3, r1
 8003fa8:	4413      	add	r3, r2
 8003faa:	4a48      	ldr	r2, [pc, #288]	; (80040cc <main+0x17a8>)
 8003fac:	8811      	ldrh	r1, [r2, #0]
 8003fae:	7892      	ldrb	r2, [r2, #2]
 8003fb0:	8019      	strh	r1, [r3, #0]
 8003fb2:	709a      	strb	r2, [r3, #2]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f646 2314 	movw	r3, #27156	; 0x6a14
 8003fba:	443b      	add	r3, r7
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f646 2214 	movw	r2, #27156	; 0x6a14
 8003fc4:	443a      	add	r2, r7
 8003fc6:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanFDWrite, CFDW);
 8003fc8:	4b3e      	ldr	r3, [pc, #248]	; (80040c4 <main+0x17a0>)
 8003fca:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003fce:	443a      	add	r2, r7
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f646 2214 	movw	r2, #27156	; 0x6a14
 8003fd6:	443a      	add	r2, r7
 8003fd8:	6811      	ldr	r1, [r2, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fc04 	bl	80027e8 <WriteToBuff>

      //Write to telemetry buffer
      
      for(int i = 0; i <50; i++){
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f646 2238 	movw	r2, #27192	; 0x6a38
 8003fe6:	443a      	add	r2, r7
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e08d      	b.n	8004108 <main+0x17e4>
        if(CanFDFrame.id == Tele_IDs[i]){ //check if frame should be checked
 8003fec:	4b34      	ldr	r3, [pc, #208]	; (80040c0 <main+0x179c>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b37      	ldr	r3, [pc, #220]	; (80040d0 <main+0x17ac>)
 8003ff2:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003ff6:	4439      	add	r1, r7
 8003ff8:	440b      	add	r3, r1
 8003ffa:	f646 2138 	movw	r1, #27192	; 0x6a38
 8003ffe:	4439      	add	r1, r7
 8004000:	6809      	ldr	r1, [r1, #0]
 8004002:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004006:	429a      	cmp	r2, r3
 8004008:	d175      	bne.n	80040f6 <main+0x17d2>
          for(int j = 0; j < 50; j++){
 800400a:	2300      	movs	r3, #0
 800400c:	f646 2234 	movw	r2, #27188	; 0x6a34
 8004010:	443a      	add	r2, r7
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	e069      	b.n	80040ea <main+0x17c6>
            if(FDBuffer[j].id == CanFDFrame.id){
 8004016:	4a2f      	ldr	r2, [pc, #188]	; (80040d4 <main+0x17b0>)
 8004018:	f646 2370 	movw	r3, #27248	; 0x6a70
 800401c:	443b      	add	r3, r7
 800401e:	441a      	add	r2, r3
 8004020:	f646 2334 	movw	r3, #27188	; 0x6a34
 8004024:	443b      	add	r3, r7
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	460b      	mov	r3, r1
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	4413      	add	r3, r2
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <main+0x179c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d115      	bne.n	8004068 <main+0x1744>
              FDBuffer[j] = CanFDFrame;
 800403c:	4a25      	ldr	r2, [pc, #148]	; (80040d4 <main+0x17b0>)
 800403e:	f646 2370 	movw	r3, #27248	; 0x6a70
 8004042:	443b      	add	r3, r7
 8004044:	441a      	add	r2, r3
 8004046:	f646 2334 	movw	r3, #27188	; 0x6a34
 800404a:	443b      	add	r3, r7
 800404c:	6819      	ldr	r1, [r3, #0]
 800404e:	460b      	mov	r3, r1
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	4413      	add	r3, r2
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <main+0x179c>)
 800405a:	4618      	mov	r0, r3
 800405c:	4611      	mov	r1, r2
 800405e:	2350      	movs	r3, #80	; 0x50
 8004060:	461a      	mov	r2, r3
 8004062:	f017 f94d 	bl	801b300 <memcpy>
              goto TeleDoneFD;
 8004066:	e057      	b.n	8004118 <main+0x17f4>
            }
            if(FDBuffer[j].id == 0){
 8004068:	4a1a      	ldr	r2, [pc, #104]	; (80040d4 <main+0x17b0>)
 800406a:	f646 2370 	movw	r3, #27248	; 0x6a70
 800406e:	443b      	add	r3, r7
 8004070:	441a      	add	r2, r3
 8004072:	f646 2334 	movw	r3, #27188	; 0x6a34
 8004076:	443b      	add	r3, r7
 8004078:	6819      	ldr	r1, [r3, #0]
 800407a:	460b      	mov	r3, r1
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	4413      	add	r3, r2
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d126      	bne.n	80040d8 <main+0x17b4>
              FDBuffer[j] = CanFDFrame;
 800408a:	4a12      	ldr	r2, [pc, #72]	; (80040d4 <main+0x17b0>)
 800408c:	f646 2370 	movw	r3, #27248	; 0x6a70
 8004090:	443b      	add	r3, r7
 8004092:	441a      	add	r2, r3
 8004094:	f646 2334 	movw	r3, #27188	; 0x6a34
 8004098:	443b      	add	r3, r7
 800409a:	6819      	ldr	r1, [r3, #0]
 800409c:	460b      	mov	r3, r1
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	4413      	add	r3, r2
 80040a6:	4a06      	ldr	r2, [pc, #24]	; (80040c0 <main+0x179c>)
 80040a8:	4618      	mov	r0, r3
 80040aa:	4611      	mov	r1, r2
 80040ac:	2350      	movs	r3, #80	; 0x50
 80040ae:	461a      	mov	r2, r3
 80040b0:	f017 f926 	bl	801b300 <memcpy>
              goto TeleDoneFD;
 80040b4:	e030      	b.n	8004118 <main+0x17f4>
 80040b6:	bf00      	nop
 80040b8:	24000cb8 	.word	0x24000cb8
 80040bc:	ffffe45c 	.word	0xffffe45c
 80040c0:	24004a00 	.word	0x24004a00
 80040c4:	ffffe494 	.word	0xffffe494
 80040c8:	0801ec24 	.word	0x0801ec24
 80040cc:	0801ec40 	.word	0x0801ec40
 80040d0:	ffffea70 	.word	0xffffea70
 80040d4:	ffffefe8 	.word	0xffffefe8
          for(int j = 0; j < 50; j++){
 80040d8:	f646 2334 	movw	r3, #27188	; 0x6a34
 80040dc:	443b      	add	r3, r7
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3301      	adds	r3, #1
 80040e2:	f646 2234 	movw	r2, #27188	; 0x6a34
 80040e6:	443a      	add	r2, r7
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	f646 2334 	movw	r3, #27188	; 0x6a34
 80040ee:	443b      	add	r3, r7
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b31      	cmp	r3, #49	; 0x31
 80040f4:	dd8f      	ble.n	8004016 <main+0x16f2>
      for(int i = 0; i <50; i++){
 80040f6:	f646 2338 	movw	r3, #27192	; 0x6a38
 80040fa:	443b      	add	r3, r7
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3301      	adds	r3, #1
 8004100:	f646 2238 	movw	r2, #27192	; 0x6a38
 8004104:	443a      	add	r2, r7
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	f646 2338 	movw	r3, #27192	; 0x6a38
 800410c:	443b      	add	r3, r7
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b31      	cmp	r3, #49	; 0x31
 8004112:	f77f af6b 	ble.w	8003fec <main+0x16c8>
            }
          }
        }
      }
TeleDoneFD:
 8004116:	bf00      	nop
		  FDCAN_Flag = 0;
 8004118:	4bb2      	ldr	r3, [pc, #712]	; (80043e4 <main+0x1ac0>)
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 800411e:	4bb2      	ldr	r3, [pc, #712]	; (80043e8 <main+0x1ac4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8207 	beq.w	8004536 <main+0x1c12>

		  RTC_TimeTypeDef lTime = sTime;
 8004128:	4bb0      	ldr	r3, [pc, #704]	; (80043ec <main+0x1ac8>)
 800412a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800412e:	443a      	add	r2, r7
 8004130:	4413      	add	r3, r2
 8004132:	4aaf      	ldr	r2, [pc, #700]	; (80043f0 <main+0x1acc>)
 8004134:	461c      	mov	r4, r3
 8004136:	4615      	mov	r5, r2
 8004138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800413a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 8004140:	4bac      	ldr	r3, [pc, #688]	; (80043f4 <main+0x1ad0>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8004148:	443a      	add	r2, r7
 800414a:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 800414c:	4ba7      	ldr	r3, [pc, #668]	; (80043ec <main+0x1ac8>)
 800414e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8004152:	443a      	add	r2, r7
 8004154:	4413      	add	r3, r2
 8004156:	6859      	ldr	r1, [r3, #4]
 8004158:	f646 231c 	movw	r3, #27164	; 0x6a1c
 800415c:	443b      	add	r3, r7
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4ba5      	ldr	r3, [pc, #660]	; (80043f8 <main+0x1ad4>)
 8004162:	fba3 0302 	umull	r0, r3, r3, r2
 8004166:	099b      	lsrs	r3, r3, #6
 8004168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800416c:	fb00 f303 	mul.w	r3, r0, r3
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	18ca      	adds	r2, r1, r3
 8004174:	4b9d      	ldr	r3, [pc, #628]	; (80043ec <main+0x1ac8>)
 8004176:	f646 2170 	movw	r1, #27248	; 0x6a70
 800417a:	4439      	add	r1, r7
 800417c:	440b      	add	r3, r1
 800417e:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8004180:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8004184:	443b      	add	r3, r7
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a9b      	ldr	r2, [pc, #620]	; (80043f8 <main+0x1ad4>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	099b      	lsrs	r3, r3, #6
 8004190:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8004194:	443a      	add	r2, r7
 8004196:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8004198:	4b94      	ldr	r3, [pc, #592]	; (80043ec <main+0x1ac8>)
 800419a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800419e:	443a      	add	r2, r7
 80041a0:	4413      	add	r3, r2
 80041a2:	7898      	ldrb	r0, [r3, #2]
 80041a4:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80041a8:	443b      	add	r3, r7
 80041aa:	6819      	ldr	r1, [r3, #0]
 80041ac:	4b93      	ldr	r3, [pc, #588]	; (80043fc <main+0x1ad8>)
 80041ae:	fba3 2301 	umull	r2, r3, r3, r1
 80041b2:	095a      	lsrs	r2, r3, #5
 80041b4:	4613      	mov	r3, r2
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	1aca      	subs	r2, r1, r3
 80041be:	b2d3      	uxtb	r3, r2
 80041c0:	4403      	add	r3, r0
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	4b89      	ldr	r3, [pc, #548]	; (80043ec <main+0x1ac8>)
 80041c6:	f646 2170 	movw	r1, #27248	; 0x6a70
 80041ca:	4439      	add	r1, r7
 80041cc:	440b      	add	r3, r1
 80041ce:	709a      	strb	r2, [r3, #2]
		  if(lTime.Seconds >= 60){
 80041d0:	4b86      	ldr	r3, [pc, #536]	; (80043ec <main+0x1ac8>)
 80041d2:	f646 2270 	movw	r2, #27248	; 0x6a70
 80041d6:	443a      	add	r2, r7
 80041d8:	4413      	add	r3, r2
 80041da:	789b      	ldrb	r3, [r3, #2]
 80041dc:	2b3b      	cmp	r3, #59	; 0x3b
 80041de:	d91b      	bls.n	8004218 <main+0x18f4>
			  lTime.Seconds -= 60;
 80041e0:	4b82      	ldr	r3, [pc, #520]	; (80043ec <main+0x1ac8>)
 80041e2:	f646 2270 	movw	r2, #27248	; 0x6a70
 80041e6:	443a      	add	r2, r7
 80041e8:	4413      	add	r3, r2
 80041ea:	789b      	ldrb	r3, [r3, #2]
 80041ec:	3b3c      	subs	r3, #60	; 0x3c
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	4b7e      	ldr	r3, [pc, #504]	; (80043ec <main+0x1ac8>)
 80041f2:	f646 2170 	movw	r1, #27248	; 0x6a70
 80041f6:	4439      	add	r1, r7
 80041f8:	440b      	add	r3, r1
 80041fa:	709a      	strb	r2, [r3, #2]
			  lTime.Minutes += 1;
 80041fc:	4b7b      	ldr	r3, [pc, #492]	; (80043ec <main+0x1ac8>)
 80041fe:	f646 2270 	movw	r2, #27248	; 0x6a70
 8004202:	443a      	add	r2, r7
 8004204:	4413      	add	r3, r2
 8004206:	785b      	ldrb	r3, [r3, #1]
 8004208:	3301      	adds	r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	4b77      	ldr	r3, [pc, #476]	; (80043ec <main+0x1ac8>)
 800420e:	f646 2170 	movw	r1, #27248	; 0x6a70
 8004212:	4439      	add	r1, r7
 8004214:	440b      	add	r3, r1
 8004216:	705a      	strb	r2, [r3, #1]
		  }
		  LocalTime = LocalTime/60;
 8004218:	f646 231c 	movw	r3, #27164	; 0x6a1c
 800421c:	443b      	add	r3, r7
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a76      	ldr	r2, [pc, #472]	; (80043fc <main+0x1ad8>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	f646 221c 	movw	r2, #27164	; 0x6a1c
 800422c:	443a      	add	r2, r7
 800422e:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8004230:	4b6e      	ldr	r3, [pc, #440]	; (80043ec <main+0x1ac8>)
 8004232:	f646 2270 	movw	r2, #27248	; 0x6a70
 8004236:	443a      	add	r2, r7
 8004238:	4413      	add	r3, r2
 800423a:	7858      	ldrb	r0, [r3, #1]
 800423c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8004240:	443b      	add	r3, r7
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	4b6d      	ldr	r3, [pc, #436]	; (80043fc <main+0x1ad8>)
 8004246:	fba3 2301 	umull	r2, r3, r3, r1
 800424a:	095a      	lsrs	r2, r3, #5
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	1aca      	subs	r2, r1, r3
 8004256:	b2d3      	uxtb	r3, r2
 8004258:	4403      	add	r3, r0
 800425a:	b2da      	uxtb	r2, r3
 800425c:	4b63      	ldr	r3, [pc, #396]	; (80043ec <main+0x1ac8>)
 800425e:	f646 2170 	movw	r1, #27248	; 0x6a70
 8004262:	4439      	add	r1, r7
 8004264:	440b      	add	r3, r1
 8004266:	705a      	strb	r2, [r3, #1]
		  if(lTime.Minutes >= 60){
 8004268:	4b60      	ldr	r3, [pc, #384]	; (80043ec <main+0x1ac8>)
 800426a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800426e:	443a      	add	r2, r7
 8004270:	4413      	add	r3, r2
 8004272:	785b      	ldrb	r3, [r3, #1]
 8004274:	2b3b      	cmp	r3, #59	; 0x3b
 8004276:	d91b      	bls.n	80042b0 <main+0x198c>
			  lTime.Minutes -= 60;
 8004278:	4b5c      	ldr	r3, [pc, #368]	; (80043ec <main+0x1ac8>)
 800427a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800427e:	443a      	add	r2, r7
 8004280:	4413      	add	r3, r2
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	3b3c      	subs	r3, #60	; 0x3c
 8004286:	b2da      	uxtb	r2, r3
 8004288:	4b58      	ldr	r3, [pc, #352]	; (80043ec <main+0x1ac8>)
 800428a:	f646 2170 	movw	r1, #27248	; 0x6a70
 800428e:	4439      	add	r1, r7
 8004290:	440b      	add	r3, r1
 8004292:	705a      	strb	r2, [r3, #1]
			  lTime.Hours += 1;
 8004294:	4b55      	ldr	r3, [pc, #340]	; (80043ec <main+0x1ac8>)
 8004296:	f646 2270 	movw	r2, #27248	; 0x6a70
 800429a:	443a      	add	r2, r7
 800429c:	4413      	add	r3, r2
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	4b51      	ldr	r3, [pc, #324]	; (80043ec <main+0x1ac8>)
 80042a6:	f646 2170 	movw	r1, #27248	; 0x6a70
 80042aa:	4439      	add	r1, r7
 80042ac:	440b      	add	r3, r1
 80042ae:	701a      	strb	r2, [r3, #0]
		  }
		  LocalTime = LocalTime/60;
 80042b0:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80042b4:	443b      	add	r3, r7
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a50      	ldr	r2, [pc, #320]	; (80043fc <main+0x1ad8>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	f646 221c 	movw	r2, #27164	; 0x6a1c
 80042c4:	443a      	add	r2, r7
 80042c6:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 80042c8:	4b48      	ldr	r3, [pc, #288]	; (80043ec <main+0x1ac8>)
 80042ca:	f646 2270 	movw	r2, #27248	; 0x6a70
 80042ce:	443a      	add	r2, r7
 80042d0:	4413      	add	r3, r2
 80042d2:	7818      	ldrb	r0, [r3, #0]
 80042d4:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80042d8:	443b      	add	r3, r7
 80042da:	6819      	ldr	r1, [r3, #0]
 80042dc:	4b47      	ldr	r3, [pc, #284]	; (80043fc <main+0x1ad8>)
 80042de:	fba3 2301 	umull	r2, r3, r3, r1
 80042e2:	095a      	lsrs	r2, r3, #5
 80042e4:	4613      	mov	r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	1aca      	subs	r2, r1, r3
 80042ee:	b2d3      	uxtb	r3, r2
 80042f0:	4403      	add	r3, r0
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	4b3d      	ldr	r3, [pc, #244]	; (80043ec <main+0x1ac8>)
 80042f6:	f646 2170 	movw	r1, #27248	; 0x6a70
 80042fa:	4439      	add	r1, r7
 80042fc:	440b      	add	r3, r1
 80042fe:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8004300:	4b3f      	ldr	r3, [pc, #252]	; (8004400 <main+0x1adc>)
 8004302:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8004304:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8004306:	4b3e      	ldr	r3, [pc, #248]	; (8004400 <main+0x1adc>)
 8004308:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800430a:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 800430c:	4b3c      	ldr	r3, [pc, #240]	; (8004400 <main+0x1adc>)
 800430e:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8004310:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8004312:	4b36      	ldr	r3, [pc, #216]	; (80043ec <main+0x1ac8>)
 8004314:	f646 2270 	movw	r2, #27248	; 0x6a70
 8004318:	443a      	add	r2, r7
 800431a:	4413      	add	r3, r2
 800431c:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800431e:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8004320:	4b32      	ldr	r3, [pc, #200]	; (80043ec <main+0x1ac8>)
 8004322:	f646 2270 	movw	r2, #27248	; 0x6a70
 8004326:	443a      	add	r2, r7
 8004328:	4413      	add	r3, r2
 800432a:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800432c:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 800432e:	4b2f      	ldr	r3, [pc, #188]	; (80043ec <main+0x1ac8>)
 8004330:	f646 2270 	movw	r2, #27248	; 0x6a70
 8004334:	443a      	add	r2, r7
 8004336:	4413      	add	r3, r2
 8004338:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800433a:	461e      	mov	r6, r3
 800433c:	4b2b      	ldr	r3, [pc, #172]	; (80043ec <main+0x1ac8>)
 800433e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8004342:	443a      	add	r2, r7
 8004344:	4413      	add	r3, r2
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <main+0x1ad0>)
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	482d      	ldr	r0, [pc, #180]	; (8004404 <main+0x1ae0>)
 800434e:	f646 2870 	movw	r8, #27248	; 0x6a70
 8004352:	44b8      	add	r8, r7
 8004354:	4440      	add	r0, r8
 8004356:	9205      	str	r2, [sp, #20]
 8004358:	9304      	str	r3, [sp, #16]
 800435a:	9603      	str	r6, [sp, #12]
 800435c:	9502      	str	r5, [sp, #8]
 800435e:	9401      	str	r4, [sp, #4]
 8004360:	9100      	str	r1, [sp, #0]
 8004362:	4673      	mov	r3, lr
 8004364:	4662      	mov	r2, ip
 8004366:	4928      	ldr	r1, [pc, #160]	; (8004408 <main+0x1ae4>)
 8004368:	f017 fd82 	bl	801be70 <siprintf>
 800436c:	f646 2318 	movw	r3, #27160	; 0x6a18
 8004370:	443b      	add	r3, r7
 8004372:	6018      	str	r0, [r3, #0]
				  CanFrame.id);

		  CW = CAN_Data_Process(CanWrite, CW);
 8004374:	4b23      	ldr	r3, [pc, #140]	; (8004404 <main+0x1ae0>)
 8004376:	f646 2270 	movw	r2, #27248	; 0x6a70
 800437a:	443a      	add	r2, r7
 800437c:	4413      	add	r3, r2
 800437e:	f646 2218 	movw	r2, #27160	; 0x6a18
 8004382:	443a      	add	r2, r7
 8004384:	6811      	ldr	r1, [r2, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fc fdce 	bl	8000f28 <CAN_Data_Process>
 800438c:	f646 2318 	movw	r3, #27160	; 0x6a18
 8004390:	443b      	add	r3, r7
 8004392:	6018      	str	r0, [r3, #0]

		  CW += sprintf(CanWrite + CW, "\n\r");
 8004394:	f646 2318 	movw	r3, #27160	; 0x6a18
 8004398:	443b      	add	r3, r7
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4b19      	ldr	r3, [pc, #100]	; (8004404 <main+0x1ae0>)
 800439e:	f646 2170 	movw	r1, #27248	; 0x6a70
 80043a2:	4439      	add	r1, r7
 80043a4:	440b      	add	r3, r1
 80043a6:	4413      	add	r3, r2
 80043a8:	4a18      	ldr	r2, [pc, #96]	; (800440c <main+0x1ae8>)
 80043aa:	8811      	ldrh	r1, [r2, #0]
 80043ac:	7892      	ldrb	r2, [r2, #2]
 80043ae:	8019      	strh	r1, [r3, #0]
 80043b0:	709a      	strb	r2, [r3, #2]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f646 2318 	movw	r3, #27160	; 0x6a18
 80043b8:	443b      	add	r3, r7
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4413      	add	r3, r2
 80043be:	f646 2218 	movw	r2, #27160	; 0x6a18
 80043c2:	443a      	add	r2, r7
 80043c4:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanWrite, CW);
 80043c6:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <main+0x1ae0>)
 80043c8:	f646 2270 	movw	r2, #27248	; 0x6a70
 80043cc:	443a      	add	r2, r7
 80043ce:	4413      	add	r3, r2
 80043d0:	f646 2218 	movw	r2, #27160	; 0x6a18
 80043d4:	443a      	add	r2, r7
 80043d6:	6811      	ldr	r1, [r2, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fe fa05 	bl	80027e8 <WriteToBuff>

      for(int i = 0; i <50; i++){
 80043de:	2300      	movs	r3, #0
 80043e0:	e016      	b.n	8004410 <main+0x1aec>
 80043e2:	bf00      	nop
 80043e4:	2400036c 	.word	0x2400036c
 80043e8:	24000370 	.word	0x24000370
 80043ec:	ffffe448 	.word	0xffffe448
 80043f0:	24000ca4 	.word	0x24000ca4
 80043f4:	24004a78 	.word	0x24004a78
 80043f8:	10624dd3 	.word	0x10624dd3
 80043fc:	88888889 	.word	0x88888889
 8004400:	24000cb8 	.word	0x24000cb8
 8004404:	ffffe87c 	.word	0xffffe87c
 8004408:	0801ec24 	.word	0x0801ec24
 800440c:	0801ec40 	.word	0x0801ec40
 8004410:	f646 2230 	movw	r2, #27184	; 0x6a30
 8004414:	443a      	add	r2, r7
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	e080      	b.n	800451c <main+0x1bf8>
        if(CanFrame.id == Tele_IDs[i]){ //check if frame should be checked
 800441a:	4b4f      	ldr	r3, [pc, #316]	; (8004558 <main+0x1c34>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4b4f      	ldr	r3, [pc, #316]	; (800455c <main+0x1c38>)
 8004420:	f646 2170 	movw	r1, #27248	; 0x6a70
 8004424:	4439      	add	r1, r7
 8004426:	440b      	add	r3, r1
 8004428:	f646 2130 	movw	r1, #27184	; 0x6a30
 800442c:	4439      	add	r1, r7
 800442e:	6809      	ldr	r1, [r1, #0]
 8004430:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004434:	429a      	cmp	r2, r3
 8004436:	d168      	bne.n	800450a <main+0x1be6>
          for(int j = 0; j < 50; j++){
 8004438:	2300      	movs	r3, #0
 800443a:	f646 222c 	movw	r2, #27180	; 0x6a2c
 800443e:	443a      	add	r2, r7
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e05c      	b.n	80044fe <main+0x1bda>
            if(Buffer[j].id == CanFrame.id){
 8004444:	4a46      	ldr	r2, [pc, #280]	; (8004560 <main+0x1c3c>)
 8004446:	f646 2370 	movw	r3, #27248	; 0x6a70
 800444a:	443b      	add	r3, r7
 800444c:	441a      	add	r2, r3
 800444e:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8004452:	443b      	add	r3, r7
 8004454:	6819      	ldr	r1, [r3, #0]
 8004456:	460b      	mov	r3, r1
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	440b      	add	r3, r1
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b3d      	ldr	r3, [pc, #244]	; (8004558 <main+0x1c34>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d117      	bne.n	800449a <main+0x1b76>
              Buffer[j] = CanFrame;     //if its already in the buffer replace it
 800446a:	4a3d      	ldr	r2, [pc, #244]	; (8004560 <main+0x1c3c>)
 800446c:	f646 2370 	movw	r3, #27248	; 0x6a70
 8004470:	443b      	add	r3, r7
 8004472:	441a      	add	r2, r3
 8004474:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8004478:	443b      	add	r3, r7
 800447a:	6819      	ldr	r1, [r3, #0]
 800447c:	460b      	mov	r3, r1
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	440b      	add	r3, r1
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4413      	add	r3, r2
 8004486:	4a34      	ldr	r2, [pc, #208]	; (8004558 <main+0x1c34>)
 8004488:	461c      	mov	r4, r3
 800448a:	4615      	mov	r5, r2
 800448c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800448e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004490:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004494:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 8004498:	e04a      	b.n	8004530 <main+0x1c0c>
            }
            if(Buffer[j].id == 0){
 800449a:	4a31      	ldr	r2, [pc, #196]	; (8004560 <main+0x1c3c>)
 800449c:	f646 2370 	movw	r3, #27248	; 0x6a70
 80044a0:	443b      	add	r3, r7
 80044a2:	441a      	add	r2, r3
 80044a4:	f646 232c 	movw	r3, #27180	; 0x6a2c
 80044a8:	443b      	add	r3, r7
 80044aa:	6819      	ldr	r1, [r3, #0]
 80044ac:	460b      	mov	r3, r1
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	440b      	add	r3, r1
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d117      	bne.n	80044ec <main+0x1bc8>
              Buffer[j] = CanFrame;     //if you get to the end of the defined packets withoout finding anything add the packet on the end
 80044bc:	4a28      	ldr	r2, [pc, #160]	; (8004560 <main+0x1c3c>)
 80044be:	f646 2370 	movw	r3, #27248	; 0x6a70
 80044c2:	443b      	add	r3, r7
 80044c4:	441a      	add	r2, r3
 80044c6:	f646 232c 	movw	r3, #27180	; 0x6a2c
 80044ca:	443b      	add	r3, r7
 80044cc:	6819      	ldr	r1, [r3, #0]
 80044ce:	460b      	mov	r3, r1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	440b      	add	r3, r1
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4413      	add	r3, r2
 80044d8:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <main+0x1c34>)
 80044da:	461c      	mov	r4, r3
 80044dc:	4615      	mov	r5, r2
 80044de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80044e6:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 80044ea:	e021      	b.n	8004530 <main+0x1c0c>
          for(int j = 0; j < 50; j++){
 80044ec:	f646 232c 	movw	r3, #27180	; 0x6a2c
 80044f0:	443b      	add	r3, r7
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3301      	adds	r3, #1
 80044f6:	f646 222c 	movw	r2, #27180	; 0x6a2c
 80044fa:	443a      	add	r2, r7
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8004502:	443b      	add	r3, r7
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b31      	cmp	r3, #49	; 0x31
 8004508:	dd9c      	ble.n	8004444 <main+0x1b20>
      for(int i = 0; i <50; i++){
 800450a:	f646 2330 	movw	r3, #27184	; 0x6a30
 800450e:	443b      	add	r3, r7
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3301      	adds	r3, #1
 8004514:	f646 2230 	movw	r2, #27184	; 0x6a30
 8004518:	443a      	add	r2, r7
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	f646 2330 	movw	r3, #27184	; 0x6a30
 8004520:	443b      	add	r3, r7
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b31      	cmp	r3, #49	; 0x31
 8004526:	f77f af78 	ble.w	800441a <main+0x1af6>
            }
          }
        }
      }
      printf("couldnt track, id buffer too full :(");
 800452a:	480e      	ldr	r0, [pc, #56]	; (8004564 <main+0x1c40>)
 800452c:	f017 fbe0 	bl	801bcf0 <iprintf>
TeleDone:
		  CAN_Flag = 0;
 8004530:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <main+0x1c44>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
  while (end_flag){
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <main+0x1c48>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f47f a906 	bne.w	800374c <main+0xe28>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8004540:	2101      	movs	r1, #1
 8004542:	480b      	ldr	r0, [pc, #44]	; (8004570 <main+0x1c4c>)
 8004544:	f004 fedb 	bl	80092fe <HAL_GPIO_TogglePin>
 8004548:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 800454a:	4618      	mov	r0, r3
 800454c:	f507 47d4 	add.w	r7, r7, #27136	; 0x6a00
 8004550:	3770      	adds	r7, #112	; 0x70
 8004552:	46bd      	mov	sp, r7
 8004554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004558:	24004a78 	.word	0x24004a78
 800455c:	ffffea70 	.word	0xffffea70
 8004560:	ffffeb38 	.word	0xffffeb38
 8004564:	0801ec44 	.word	0x0801ec44
 8004568:	24000370 	.word	0x24000370
 800456c:	24000008 	.word	0x24000008
 8004570:	58020400 	.word	0x58020400

08004574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b0cc      	sub	sp, #304	; 0x130
 8004578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800457a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800457e:	224c      	movs	r2, #76	; 0x4c
 8004580:	2100      	movs	r1, #0
 8004582:	4618      	mov	r0, r3
 8004584:	f016 fec7 	bl	801b316 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004588:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800458c:	2220      	movs	r2, #32
 800458e:	2100      	movs	r1, #0
 8004590:	4618      	mov	r0, r3
 8004592:	f016 fec0 	bl	801b316 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004596:	f107 0308 	add.w	r3, r7, #8
 800459a:	4618      	mov	r0, r3
 800459c:	23bc      	movs	r3, #188	; 0xbc
 800459e:	461a      	mov	r2, r3
 80045a0:	2100      	movs	r1, #0
 80045a2:	f016 feb8 	bl	801b316 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80045a6:	2002      	movs	r0, #2
 80045a8:	f006 f9a4 	bl	800a8f4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045ac:	1d3b      	adds	r3, r7, #4
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	4b71      	ldr	r3, [pc, #452]	; (8004778 <SystemClock_Config+0x204>)
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	4a70      	ldr	r2, [pc, #448]	; (8004778 <SystemClock_Config+0x204>)
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045be:	4b6e      	ldr	r3, [pc, #440]	; (8004778 <SystemClock_Config+0x204>)
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	f003 0201 	and.w	r2, r3, #1
 80045c6:	1d3b      	adds	r3, r7, #4
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	4b6c      	ldr	r3, [pc, #432]	; (800477c <SystemClock_Config+0x208>)
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	4a6b      	ldr	r2, [pc, #428]	; (800477c <SystemClock_Config+0x208>)
 80045d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045d4:	6193      	str	r3, [r2, #24]
 80045d6:	4b69      	ldr	r3, [pc, #420]	; (800477c <SystemClock_Config+0x208>)
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80045de:	1d3b      	adds	r3, r7, #4
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	1d3b      	adds	r3, r7, #4
 80045e4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80045e6:	bf00      	nop
 80045e8:	4b64      	ldr	r3, [pc, #400]	; (800477c <SystemClock_Config+0x208>)
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f4:	d1f8      	bne.n	80045e8 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80045f6:	f006 f8e3 	bl	800a7c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 80045fa:	f001 f96f 	bl	80058dc <HAL_GetREVID>
 80045fe:	4b60      	ldr	r3, [pc, #384]	; (8004780 <SystemClock_Config+0x20c>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	4a5f      	ldr	r2, [pc, #380]	; (8004780 <SystemClock_Config+0x20c>)
 8004604:	f043 0318 	orr.w	r3, r3, #24
 8004608:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800460a:	4b5d      	ldr	r3, [pc, #372]	; (8004780 <SystemClock_Config+0x20c>)
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	4a5b      	ldr	r2, [pc, #364]	; (8004780 <SystemClock_Config+0x20c>)
 8004614:	f043 0302 	orr.w	r3, r3, #2
 8004618:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 800461a:	2325      	movs	r3, #37	; 0x25
 800461c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004624:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004628:	2301      	movs	r3, #1
 800462a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800462e:	2301      	movs	r3, #1
 8004630:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004634:	2302      	movs	r3, #2
 8004636:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800463a:	2302      	movs	r3, #2
 800463c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8004640:	2302      	movs	r3, #2
 8004642:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8004646:	2340      	movs	r3, #64	; 0x40
 8004648:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800464c:	2302      	movs	r3, #2
 800464e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8004652:	230a      	movs	r3, #10
 8004654:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004658:	2302      	movs	r3, #2
 800465a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800465e:	230c      	movs	r3, #12
 8004660:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004670:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004674:	4618      	mov	r0, r3
 8004676:	f006 f9cb 	bl	800aa10 <HAL_RCC_OscConfig>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8004680:	f000 fc16 	bl	8004eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004684:	233f      	movs	r3, #63	; 0x3f
 8004686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800468a:	2303      	movs	r3, #3
 800468c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004690:	2300      	movs	r3, #0
 8004692:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004696:	2308      	movs	r3, #8
 8004698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800469c:	2340      	movs	r3, #64	; 0x40
 800469e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80046a2:	2340      	movs	r3, #64	; 0x40
 80046a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80046a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80046b0:	2340      	movs	r3, #64	; 0x40
 80046b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80046b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80046ba:	2102      	movs	r1, #2
 80046bc:	4618      	mov	r0, r3
 80046be:	f006 fdb7 	bl	800b230 <HAL_RCC_ClockConfig>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <SystemClock_Config+0x158>
  {
    Error_Handler();
 80046c8:	f000 fbf2 	bl	8004eb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 80046cc:	f107 0308 	add.w	r3, r7, #8
 80046d0:	4a2c      	ldr	r2, [pc, #176]	; (8004784 <SystemClock_Config+0x210>)
 80046d2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80046d4:	f107 0308 	add.w	r3, r7, #8
 80046d8:	2202      	movs	r2, #2
 80046da:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80046dc:	f107 0308 	add.w	r3, r7, #8
 80046e0:	220c      	movs	r2, #12
 80046e2:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80046e4:	f107 0308 	add.w	r3, r7, #8
 80046e8:	2203      	movs	r2, #3
 80046ea:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80046ec:	f107 0308 	add.w	r3, r7, #8
 80046f0:	2202      	movs	r2, #2
 80046f2:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 80046f4:	f107 0308 	add.w	r3, r7, #8
 80046f8:	2203      	movs	r2, #3
 80046fa:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80046fc:	f107 0308 	add.w	r3, r7, #8
 8004700:	22c0      	movs	r2, #192	; 0xc0
 8004702:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8004704:	f107 0308 	add.w	r3, r7, #8
 8004708:	2220      	movs	r2, #32
 800470a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800470c:	f107 0308 	add.w	r3, r7, #8
 8004710:	2200      	movs	r2, #0
 8004712:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8004714:	f107 0308 	add.w	r3, r7, #8
 8004718:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800471c:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800471e:	f107 0308 	add.w	r3, r7, #8
 8004722:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004726:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004728:	f107 0308 	add.w	r3, r7, #8
 800472c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004730:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004732:	f107 0308 	add.w	r3, r7, #8
 8004736:	2200      	movs	r2, #0
 8004738:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800473a:	f107 0308 	add.w	r3, r7, #8
 800473e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004746:	f107 0308 	add.w	r3, r7, #8
 800474a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800474e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004752:	f107 0308 	add.w	r3, r7, #8
 8004756:	4618      	mov	r0, r3
 8004758:	f007 f91a 	bl	800b990 <HAL_RCCEx_PeriphCLKConfig>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 8004762:	f000 fba5 	bl	8004eb0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8004766:	f006 ff19 	bl	800b59c <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800476a:	f006 f8fd 	bl	800a968 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800476e:	bf00      	nop
 8004770:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	58000400 	.word	0x58000400
 800477c:	58024800 	.word	0x58024800
 8004780:	58024400 	.word	0x58024400
 8004784:	00459002 	.word	0x00459002

08004788 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800478c:	4b2e      	ldr	r3, [pc, #184]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 800478e:	4a2f      	ldr	r2, [pc, #188]	; (800484c <MX_FDCAN1_Init+0xc4>)
 8004790:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004792:	4b2d      	ldr	r3, [pc, #180]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 8004794:	2200      	movs	r2, #0
 8004796:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004798:	4b2b      	ldr	r3, [pc, #172]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 800479a:	2200      	movs	r2, #0
 800479c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800479e:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80047a4:	4b28      	ldr	r3, [pc, #160]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80047aa:	4b27      	ldr	r3, [pc, #156]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 80047b0:	4b25      	ldr	r3, [pc, #148]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047b2:	220a      	movs	r2, #10
 80047b4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80047b6:	4b24      	ldr	r3, [pc, #144]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 3;
 80047bc:	4b22      	ldr	r3, [pc, #136]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047be:	2203      	movs	r2, #3
 80047c0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 80047c2:	4b21      	ldr	r3, [pc, #132]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047c4:	2203      	movs	r2, #3
 80047c6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 80047c8:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047ca:	220a      	movs	r2, #10
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80047ce:	4b1e      	ldr	r3, [pc, #120]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 3;
 80047d4:	4b1c      	ldr	r3, [pc, #112]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047d6:	2203      	movs	r2, #3
 80047d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 80047da:	4b1b      	ldr	r3, [pc, #108]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047dc:	2203      	movs	r2, #3
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 80047e6:	4b18      	ldr	r3, [pc, #96]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047e8:	2202      	movs	r2, #2
 80047ea:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 80047ec:	4b16      	ldr	r3, [pc, #88]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047ee:	2202      	movs	r2, #2
 80047f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047f4:	2240      	movs	r2, #64	; 0x40
 80047f6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80047f8:	4b13      	ldr	r3, [pc, #76]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 80047fa:	2212      	movs	r2, #18
 80047fc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80047fe:	4b12      	ldr	r3, [pc, #72]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 8004800:	2200      	movs	r2, #0
 8004802:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004804:	4b10      	ldr	r3, [pc, #64]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 8004806:	2204      	movs	r2, #4
 8004808:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800480a:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 800480c:	2200      	movs	r2, #0
 800480e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8004810:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 8004812:	2204      	movs	r2, #4
 8004814:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8004816:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 8004818:	2200      	movs	r2, #0
 800481a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 800481e:	2200      	movs	r2, #0
 8004820:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8004822:	4b09      	ldr	r3, [pc, #36]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 8004824:	2200      	movs	r2, #0
 8004826:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004828:	4b07      	ldr	r3, [pc, #28]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 800482a:	2200      	movs	r2, #0
 800482c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800482e:	4b06      	ldr	r3, [pc, #24]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 8004830:	2204      	movs	r2, #4
 8004832:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004834:	4804      	ldr	r0, [pc, #16]	; (8004848 <MX_FDCAN1_Init+0xc0>)
 8004836:	f003 fa45 	bl	8007cc4 <HAL_FDCAN_Init>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8004840:	f000 fb36 	bl	8004eb0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8004844:	bf00      	nop
 8004846:	bd80      	pop	{r7, pc}
 8004848:	24005148 	.word	0x24005148
 800484c:	4000a000 	.word	0x4000a000

08004850 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8004854:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 8004856:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <MX_FDCAN2_Init+0xc4>)
 8004858:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800485a:	4b2d      	ldr	r3, [pc, #180]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 800485c:	2200      	movs	r2, #0
 800485e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8004860:	4b2b      	ldr	r3, [pc, #172]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 8004862:	2200      	movs	r2, #0
 8004864:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8004866:	4b2a      	ldr	r3, [pc, #168]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 8004868:	2200      	movs	r2, #0
 800486a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800486c:	4b28      	ldr	r3, [pc, #160]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 800486e:	2200      	movs	r2, #0
 8004870:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8004872:	4b27      	ldr	r3, [pc, #156]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 8004874:	2200      	movs	r2, #0
 8004876:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8004878:	4b25      	ldr	r3, [pc, #148]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 800487a:	2201      	movs	r2, #1
 800487c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 8004880:	2201      	movs	r2, #1
 8004882:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8004884:	4b22      	ldr	r3, [pc, #136]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 8004886:	2202      	movs	r2, #2
 8004888:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800488a:	4b21      	ldr	r3, [pc, #132]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 800488c:	2202      	movs	r2, #2
 800488e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8004890:	4b1f      	ldr	r3, [pc, #124]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 8004892:	2201      	movs	r2, #1
 8004894:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8004896:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 8004898:	2201      	movs	r2, #1
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800489c:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 800489e:	2201      	movs	r2, #1
 80048a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80048a2:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80048ae:	4b18      	ldr	r3, [pc, #96]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80048b4:	4b16      	ldr	r3, [pc, #88]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048bc:	2200      	movs	r2, #0
 80048be:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80048c0:	4b13      	ldr	r3, [pc, #76]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048c2:	2204      	movs	r2, #4
 80048c4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80048c6:	4b12      	ldr	r3, [pc, #72]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80048cc:	4b10      	ldr	r3, [pc, #64]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048ce:	2204      	movs	r2, #4
 80048d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80048d2:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80048d8:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048da:	2204      	movs	r2, #4
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80048de:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80048ea:	4b09      	ldr	r3, [pc, #36]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80048f0:	4b07      	ldr	r3, [pc, #28]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048f8:	2204      	movs	r2, #4
 80048fa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80048fc:	4804      	ldr	r0, [pc, #16]	; (8004910 <MX_FDCAN2_Init+0xc0>)
 80048fe:	f003 f9e1 	bl	8007cc4 <HAL_FDCAN_Init>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8004908:	f000 fad2 	bl	8004eb0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800490c:	bf00      	nop
 800490e:	bd80      	pop	{r7, pc}
 8004910:	240052fc 	.word	0x240052fc
 8004914:	4000a400 	.word	0x4000a400

08004918 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800491e:	1d3b      	adds	r3, r7, #4
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	605a      	str	r2, [r3, #4]
 8004926:	609a      	str	r2, [r3, #8]
 8004928:	60da      	str	r2, [r3, #12]
 800492a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800492c:	2300      	movs	r3, #0
 800492e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004930:	4b26      	ldr	r3, [pc, #152]	; (80049cc <MX_RTC_Init+0xb4>)
 8004932:	4a27      	ldr	r2, [pc, #156]	; (80049d0 <MX_RTC_Init+0xb8>)
 8004934:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004936:	4b25      	ldr	r3, [pc, #148]	; (80049cc <MX_RTC_Init+0xb4>)
 8004938:	2200      	movs	r2, #0
 800493a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 800493c:	4b23      	ldr	r3, [pc, #140]	; (80049cc <MX_RTC_Init+0xb4>)
 800493e:	2201      	movs	r2, #1
 8004940:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 8004942:	4b22      	ldr	r3, [pc, #136]	; (80049cc <MX_RTC_Init+0xb4>)
 8004944:	f244 0204 	movw	r2, #16388	; 0x4004
 8004948:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <MX_RTC_Init+0xb4>)
 800494c:	2200      	movs	r2, #0
 800494e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004950:	4b1e      	ldr	r3, [pc, #120]	; (80049cc <MX_RTC_Init+0xb4>)
 8004952:	2200      	movs	r2, #0
 8004954:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004956:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <MX_RTC_Init+0xb4>)
 8004958:	2200      	movs	r2, #0
 800495a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800495c:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <MX_RTC_Init+0xb4>)
 800495e:	2200      	movs	r2, #0
 8004960:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004962:	481a      	ldr	r0, [pc, #104]	; (80049cc <MX_RTC_Init+0xb4>)
 8004964:	f008 fed8 	bl	800d718 <HAL_RTC_Init>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800496e:	f000 fa9f 	bl	8004eb0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8004976:	2300      	movs	r3, #0
 8004978:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004986:	1d3b      	adds	r3, r7, #4
 8004988:	2200      	movs	r2, #0
 800498a:	4619      	mov	r1, r3
 800498c:	480f      	ldr	r0, [pc, #60]	; (80049cc <MX_RTC_Init+0xb4>)
 800498e:	f008 ff3b 	bl	800d808 <HAL_RTC_SetTime>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8004998:	f000 fa8a 	bl	8004eb0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800499c:	2301      	movs	r3, #1
 800499e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80049a0:	2301      	movs	r3, #1
 80049a2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80049a4:	2301      	movs	r3, #1
 80049a6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80049ac:	463b      	mov	r3, r7
 80049ae:	2200      	movs	r2, #0
 80049b0:	4619      	mov	r1, r3
 80049b2:	4806      	ldr	r0, [pc, #24]	; (80049cc <MX_RTC_Init+0xb4>)
 80049b4:	f009 f822 	bl	800d9fc <HAL_RTC_SetDate>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80049be:	f000 fa77 	bl	8004eb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80049c2:	bf00      	nop
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	24005124 	.word	0x24005124
 80049d0:	58004000 	.word	0x58004000

080049d4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80049d8:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <MX_SDMMC1_SD_Init+0x3c>)
 80049da:	4a0e      	ldr	r2, [pc, #56]	; (8004a14 <MX_SDMMC1_SD_Init+0x40>)
 80049dc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <MX_SDMMC1_SD_Init+0x3c>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80049e4:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <MX_SDMMC1_SD_Init+0x3c>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <MX_SDMMC1_SD_Init+0x3c>)
 80049ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049f0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <MX_SDMMC1_SD_Init+0x3c>)
 80049f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049f8:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80049fa:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <MX_SDMMC1_SD_Init+0x3c>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <MX_SDMMC1_SD_Init+0x3c>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8004a06:	bf00      	nop
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	240050a4 	.word	0x240050a4
 8004a14:	52007000 	.word	0x52007000

08004a18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004a1c:	4b27      	ldr	r3, [pc, #156]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a1e:	4a28      	ldr	r2, [pc, #160]	; (8004ac0 <MX_SPI1_Init+0xa8>)
 8004a20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a22:	4b26      	ldr	r3, [pc, #152]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004a28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a2a:	4b24      	ldr	r3, [pc, #144]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a30:	4b22      	ldr	r3, [pc, #136]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a32:	2207      	movs	r2, #7
 8004a34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a36:	4b21      	ldr	r3, [pc, #132]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a3c:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004a42:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004a4a:	4b1c      	ldr	r3, [pc, #112]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004a50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a52:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a58:	4b18      	ldr	r3, [pc, #96]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a5e:	4b17      	ldr	r3, [pc, #92]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004a6a:	4b14      	ldr	r3, [pc, #80]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a70:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004a72:	4b12      	ldr	r3, [pc, #72]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004a78:	4b10      	ldr	r3, [pc, #64]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004a7e:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004a84:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004a8a:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004a96:	4b09      	ldr	r3, [pc, #36]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004aa8:	4804      	ldr	r0, [pc, #16]	; (8004abc <MX_SPI1_Init+0xa4>)
 8004aaa:	f00b f8cf 	bl	800fc4c <HAL_SPI_Init>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8004ab4:	f000 f9fc 	bl	8004eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004ab8:	bf00      	nop
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	24005274 	.word	0x24005274
 8004ac0:	40013000 	.word	0x40013000

08004ac4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8004ac8:	4b22      	ldr	r3, [pc, #136]	; (8004b54 <MX_UART8_Init+0x90>)
 8004aca:	4a23      	ldr	r2, [pc, #140]	; (8004b58 <MX_UART8_Init+0x94>)
 8004acc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8004ace:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <MX_UART8_Init+0x90>)
 8004ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ad4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8004ad6:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <MX_UART8_Init+0x90>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8004adc:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <MX_UART8_Init+0x90>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8004ae2:	4b1c      	ldr	r3, [pc, #112]	; (8004b54 <MX_UART8_Init+0x90>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8004ae8:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <MX_UART8_Init+0x90>)
 8004aea:	220c      	movs	r2, #12
 8004aec:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aee:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <MX_UART8_Init+0x90>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8004af4:	4b17      	ldr	r3, [pc, #92]	; (8004b54 <MX_UART8_Init+0x90>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004afa:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <MX_UART8_Init+0x90>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b00:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <MX_UART8_Init+0x90>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b06:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <MX_UART8_Init+0x90>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8004b0c:	4811      	ldr	r0, [pc, #68]	; (8004b54 <MX_UART8_Init+0x90>)
 8004b0e:	f00c f94e 	bl	8010dae <HAL_UART_Init>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8004b18:	f000 f9ca 	bl	8004eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	480d      	ldr	r0, [pc, #52]	; (8004b54 <MX_UART8_Init+0x90>)
 8004b20:	f00d fad4 	bl	80120cc <HAL_UARTEx_SetTxFifoThreshold>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8004b2a:	f000 f9c1 	bl	8004eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4808      	ldr	r0, [pc, #32]	; (8004b54 <MX_UART8_Init+0x90>)
 8004b32:	f00d fb09 	bl	8012148 <HAL_UARTEx_SetRxFifoThreshold>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8004b3c:	f000 f9b8 	bl	8004eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8004b40:	4804      	ldr	r0, [pc, #16]	; (8004b54 <MX_UART8_Init+0x90>)
 8004b42:	f00d fa8a 	bl	801205a <HAL_UARTEx_DisableFifoMode>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8004b4c:	f000 f9b0 	bl	8004eb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8004b50:	bf00      	nop
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	240051e8 	.word	0x240051e8
 8004b58:	40007c00 	.word	0x40007c00

08004b5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b60:	4b22      	ldr	r3, [pc, #136]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004b62:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <MX_USART3_UART_Init+0x94>)
 8004b64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8004b66:	4b21      	ldr	r3, [pc, #132]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004b68:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8004b6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b6e:	4b1f      	ldr	r3, [pc, #124]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b74:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b7a:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b80:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004b82:	220c      	movs	r2, #12
 8004b84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b86:	4b19      	ldr	r3, [pc, #100]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b8c:	4b17      	ldr	r3, [pc, #92]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b92:	4b16      	ldr	r3, [pc, #88]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b98:	4b14      	ldr	r3, [pc, #80]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b9e:	4b13      	ldr	r3, [pc, #76]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004ba4:	4811      	ldr	r0, [pc, #68]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004ba6:	f00c f902 	bl	8010dae <HAL_UART_Init>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004bb0:	f000 f97e 	bl	8004eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	480d      	ldr	r0, [pc, #52]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004bb8:	f00d fa88 	bl	80120cc <HAL_UARTEx_SetTxFifoThreshold>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004bc2:	f000 f975 	bl	8004eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4808      	ldr	r0, [pc, #32]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004bca:	f00d fabd 	bl	8012148 <HAL_UARTEx_SetRxFifoThreshold>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004bd4:	f000 f96c 	bl	8004eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004bd8:	4804      	ldr	r0, [pc, #16]	; (8004bec <MX_USART3_UART_Init+0x90>)
 8004bda:	f00d fa3e 	bl	801205a <HAL_UARTEx_DisableFifoMode>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004be4:	f000 f964 	bl	8004eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004be8:	bf00      	nop
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	24004ff8 	.word	0x24004ff8
 8004bf0:	40004800 	.word	0x40004800

08004bf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <MX_DMA_Init+0x3c>)
 8004bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c00:	4a0b      	ldr	r2, [pc, #44]	; (8004c30 <MX_DMA_Init+0x3c>)
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <MX_DMA_Init+0x3c>)
 8004c0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	607b      	str	r3, [r7, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	200c      	movs	r0, #12
 8004c1e:	f000 ff44 	bl	8005aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004c22:	200c      	movs	r0, #12
 8004c24:	f000 ff5b 	bl	8005ade <HAL_NVIC_EnableIRQ>

}
 8004c28:	bf00      	nop
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	58024400 	.word	0x58024400

08004c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08c      	sub	sp, #48	; 0x30
 8004c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c3a:	f107 031c 	add.w	r3, r7, #28
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	605a      	str	r2, [r3, #4]
 8004c44:	609a      	str	r2, [r3, #8]
 8004c46:	60da      	str	r2, [r3, #12]
 8004c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c4a:	4b6d      	ldr	r3, [pc, #436]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c50:	4a6b      	ldr	r2, [pc, #428]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004c52:	f043 0310 	orr.w	r3, r3, #16
 8004c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c5a:	4b69      	ldr	r3, [pc, #420]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c68:	4b65      	ldr	r3, [pc, #404]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c6e:	4a64      	ldr	r2, [pc, #400]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004c70:	f043 0304 	orr.w	r3, r3, #4
 8004c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c78:	4b61      	ldr	r3, [pc, #388]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c86:	4b5e      	ldr	r3, [pc, #376]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c8c:	4a5c      	ldr	r2, [pc, #368]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c96:	4b5a      	ldr	r3, [pc, #360]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca4:	4b56      	ldr	r3, [pc, #344]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004caa:	4a55      	ldr	r2, [pc, #340]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cb4:	4b52      	ldr	r3, [pc, #328]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cc2:	4b4f      	ldr	r3, [pc, #316]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cc8:	4a4d      	ldr	r2, [pc, #308]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004cca:	f043 0302 	orr.w	r3, r3, #2
 8004cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cd2:	4b4b      	ldr	r3, [pc, #300]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ce0:	4b47      	ldr	r3, [pc, #284]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ce6:	4a46      	ldr	r2, [pc, #280]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004ce8:	f043 0308 	orr.w	r3, r3, #8
 8004cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cf0:	4b43      	ldr	r3, [pc, #268]	; (8004e00 <MX_GPIO_Init+0x1cc>)
 8004cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	607b      	str	r3, [r7, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8004cfe:	2200      	movs	r2, #0
 8004d00:	210c      	movs	r1, #12
 8004d02:	4840      	ldr	r0, [pc, #256]	; (8004e04 <MX_GPIO_Init+0x1d0>)
 8004d04:	f004 fae2 	bl	80092cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2103      	movs	r1, #3
 8004d0c:	483e      	ldr	r0, [pc, #248]	; (8004e08 <MX_GPIO_Init+0x1d4>)
 8004d0e:	f004 fadd 	bl	80092cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004d12:	2200      	movs	r2, #0
 8004d14:	2101      	movs	r1, #1
 8004d16:	483d      	ldr	r0, [pc, #244]	; (8004e0c <MX_GPIO_Init+0x1d8>)
 8004d18:	f004 fad8 	bl	80092cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d22:	483b      	ldr	r0, [pc, #236]	; (8004e10 <MX_GPIO_Init+0x1dc>)
 8004d24:	f004 fad2 	bl	80092cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8004d28:	230c      	movs	r3, #12
 8004d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d34:	2300      	movs	r3, #0
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d38:	f107 031c 	add.w	r3, r7, #28
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4831      	ldr	r0, [pc, #196]	; (8004e04 <MX_GPIO_Init+0x1d0>)
 8004d40:	f004 f8fc 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8004d44:	2303      	movs	r3, #3
 8004d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d50:	2300      	movs	r3, #0
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d54:	f107 031c 	add.w	r3, r7, #28
 8004d58:	4619      	mov	r1, r3
 8004d5a:	482b      	ldr	r0, [pc, #172]	; (8004e08 <MX_GPIO_Init+0x1d4>)
 8004d5c:	f004 f8ee 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8004d60:	2304      	movs	r3, #4
 8004d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d64:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <MX_GPIO_Init+0x1e0>)
 8004d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004d6c:	f107 031c 	add.w	r3, r7, #28
 8004d70:	4619      	mov	r1, r3
 8004d72:	4825      	ldr	r0, [pc, #148]	; (8004e08 <MX_GPIO_Init+0x1d4>)
 8004d74:	f004 f8e2 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d84:	2300      	movs	r3, #0
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004d88:	f107 031c 	add.w	r3, r7, #28
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	481f      	ldr	r0, [pc, #124]	; (8004e0c <MX_GPIO_Init+0x1d8>)
 8004d90:	f004 f8d4 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8004d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d9a:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <MX_GPIO_Init+0x1e0>)
 8004d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8004da2:	f107 031c 	add.w	r3, r7, #28
 8004da6:	4619      	mov	r1, r3
 8004da8:	4816      	ldr	r0, [pc, #88]	; (8004e04 <MX_GPIO_Init+0x1d0>)
 8004daa:	f004 f8c7 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8004dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004db4:	2301      	movs	r3, #1
 8004db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8004dc0:	f107 031c 	add.w	r3, r7, #28
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4812      	ldr	r0, [pc, #72]	; (8004e10 <MX_GPIO_Init+0x1dc>)
 8004dc8:	f004 f8b8 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8004dcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8004dda:	f107 031c 	add.w	r3, r7, #28
 8004dde:	4619      	mov	r1, r3
 8004de0:	4809      	ldr	r0, [pc, #36]	; (8004e08 <MX_GPIO_Init+0x1d4>)
 8004de2:	f004 f8ab 	bl	8008f3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004de6:	2200      	movs	r2, #0
 8004de8:	2100      	movs	r1, #0
 8004dea:	2017      	movs	r0, #23
 8004dec:	f000 fe5d 	bl	8005aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004df0:	2017      	movs	r0, #23
 8004df2:	f000 fe74 	bl	8005ade <HAL_NVIC_EnableIRQ>

}
 8004df6:	bf00      	nop
 8004df8:	3730      	adds	r7, #48	; 0x30
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	58024400 	.word	0x58024400
 8004e04:	58021000 	.word	0x58021000
 8004e08:	58020000 	.word	0x58020000
 8004e0c:	58020400 	.word	0x58020400
 8004e10:	58020c00 	.word	0x58020c00
 8004e14:	11110000 	.word	0x11110000

08004e18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  RTC_TimeTypeDef sTime = {0};
 8004e22:	f107 030c 	add.w	r3, r7, #12
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	605a      	str	r2, [r3, #4]
 8004e2c:	609a      	str	r2, [r3, #8]
 8004e2e:	60da      	str	r2, [r3, #12]
 8004e30:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]
  sTime.Hours = 16;
 8004e36:	2310      	movs	r3, #16
 8004e38:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = 8;
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73bb      	strb	r3, [r7, #14]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004e4a:	f107 030c 	add.w	r3, r7, #12
 8004e4e:	2200      	movs	r2, #0
 8004e50:	4619      	mov	r1, r3
 8004e52:	4810      	ldr	r0, [pc, #64]	; (8004e94 <HAL_GPIO_EXTI_Callback+0x7c>)
 8004e54:	f008 fcd8 	bl	800d808 <HAL_RTC_SetTime>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_GPIO_EXTI_Callback+0x4a>
    {
      Error_Handler();
 8004e5e:	f000 f827 	bl	8004eb0 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8004e62:	2303      	movs	r3, #3
 8004e64:	723b      	strb	r3, [r7, #8]
    sDate.Month = RTC_MONTH_MAY;
 8004e66:	2305      	movs	r3, #5
 8004e68:	727b      	strb	r3, [r7, #9]
    sDate.Date = 19;
 8004e6a:	2313      	movs	r3, #19
 8004e6c:	72bb      	strb	r3, [r7, #10]
    sDate.Year = 21;
 8004e6e:	2315      	movs	r3, #21
 8004e70:	72fb      	strb	r3, [r7, #11]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004e72:	f107 0308 	add.w	r3, r7, #8
 8004e76:	2200      	movs	r2, #0
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4806      	ldr	r0, [pc, #24]	; (8004e94 <HAL_GPIO_EXTI_Callback+0x7c>)
 8004e7c:	f008 fdbe 	bl	800d9fc <HAL_RTC_SetDate>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_GPIO_EXTI_Callback+0x72>
    {
      Error_Handler();
 8004e86:	f000 f813 	bl	8004eb0 <Error_Handler>
    }

}
 8004e8a:	bf00      	nop
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	24005124 	.word	0x24005124

08004e98 <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8004e9c:	4b03      	ldr	r3, [pc, #12]	; (8004eac <HAL_PWR_PVDCallback+0x14>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
}
 8004ea2:	bf00      	nop
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	24000008 	.word	0x24000008

08004eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004eb4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8004eb6:	4802      	ldr	r0, [pc, #8]	; (8004ec0 <Error_Handler+0x10>)
 8004eb8:	f016 ff8e 	bl	801bdd8 <puts>
 8004ebc:	e7fb      	b.n	8004eb6 <Error_Handler+0x6>
 8004ebe:	bf00      	nop
 8004ec0:	0801ec8c 	.word	0x0801ec8c

08004ec4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004ecc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004ed0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d013      	beq.n	8004f04 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004edc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004ee0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004ee4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00b      	beq.n	8004f04 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004eec:	e000      	b.n	8004ef0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004eee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004ef0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f9      	beq.n	8004eee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004efa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004f04:	687b      	ldr	r3, [r7, #4]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b086      	sub	sp, #24
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
  int i=0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	e009      	b.n	8004f3c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	60ba      	str	r2, [r7, #8]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff ffc7 	bl	8004ec4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	dbf1      	blt.n	8004f28 <_write+0x16>
  return len;
 8004f44:	687b      	ldr	r3, [r7, #4]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8004f56:	f107 0308 	add.w	r3, r7, #8
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f60:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <HAL_MspInit+0x60>)
 8004f62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f66:	4a12      	ldr	r2, [pc, #72]	; (8004fb0 <HAL_MspInit+0x60>)
 8004f68:	f043 0302 	orr.w	r3, r3, #2
 8004f6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f70:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <HAL_MspInit+0x60>)
 8004f72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	607b      	str	r3, [r7, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2100      	movs	r1, #0
 8004f82:	2001      	movs	r0, #1
 8004f84:	f000 fd91 	bl	8005aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8004f88:	2001      	movs	r0, #1
 8004f8a:	f000 fda8 	bl	8005ade <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8004f8e:	23c0      	movs	r3, #192	; 0xc0
 8004f90:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8004f92:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004f96:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8004f98:	f107 0308 	add.w	r3, r7, #8
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f005 fc1f 	bl	800a7e0 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8004fa2:	f005 fc97 	bl	800a8d4 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fa6:	bf00      	nop
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	58024400 	.word	0x58024400

08004fb4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08c      	sub	sp, #48	; 0x30
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fbc:	f107 031c 	add.w	r3, r7, #28
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a48      	ldr	r2, [pc, #288]	; (80050f4 <HAL_FDCAN_MspInit+0x140>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d14e      	bne.n	8005074 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8004fd6:	4b48      	ldr	r3, [pc, #288]	; (80050f8 <HAL_FDCAN_MspInit+0x144>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	4a46      	ldr	r2, [pc, #280]	; (80050f8 <HAL_FDCAN_MspInit+0x144>)
 8004fde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004fe0:	4b45      	ldr	r3, [pc, #276]	; (80050f8 <HAL_FDCAN_MspInit+0x144>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d10e      	bne.n	8005006 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8004fe8:	4b44      	ldr	r3, [pc, #272]	; (80050fc <HAL_FDCAN_MspInit+0x148>)
 8004fea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004fee:	4a43      	ldr	r2, [pc, #268]	; (80050fc <HAL_FDCAN_MspInit+0x148>)
 8004ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004ff8:	4b40      	ldr	r3, [pc, #256]	; (80050fc <HAL_FDCAN_MspInit+0x148>)
 8004ffa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005006:	4b3d      	ldr	r3, [pc, #244]	; (80050fc <HAL_FDCAN_MspInit+0x148>)
 8005008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800500c:	4a3b      	ldr	r2, [pc, #236]	; (80050fc <HAL_FDCAN_MspInit+0x148>)
 800500e:	f043 0302 	orr.w	r3, r3, #2
 8005012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005016:	4b39      	ldr	r3, [pc, #228]	; (80050fc <HAL_FDCAN_MspInit+0x148>)
 8005018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005024:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502a:	2302      	movs	r3, #2
 800502c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502e:	2300      	movs	r3, #0
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005032:	2303      	movs	r3, #3
 8005034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005036:	2309      	movs	r3, #9
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503a:	f107 031c 	add.w	r3, r7, #28
 800503e:	4619      	mov	r1, r3
 8005040:	482f      	ldr	r0, [pc, #188]	; (8005100 <HAL_FDCAN_MspInit+0x14c>)
 8005042:	f003 ff7b 	bl	8008f3c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8005046:	2040      	movs	r0, #64	; 0x40
 8005048:	f004 f98e 	bl	8009368 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 800504c:	2080      	movs	r0, #128	; 0x80
 800504e:	f004 f98b 	bl	8009368 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8005052:	2200      	movs	r2, #0
 8005054:	2100      	movs	r1, #0
 8005056:	2013      	movs	r0, #19
 8005058:	f000 fd27 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800505c:	2013      	movs	r0, #19
 800505e:	f000 fd3e 	bl	8005ade <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8005062:	2200      	movs	r2, #0
 8005064:	2100      	movs	r1, #0
 8005066:	2015      	movs	r0, #21
 8005068:	f000 fd1f 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800506c:	2015      	movs	r0, #21
 800506e:	f000 fd36 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8005072:	e03b      	b.n	80050ec <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a22      	ldr	r2, [pc, #136]	; (8005104 <HAL_FDCAN_MspInit+0x150>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d136      	bne.n	80050ec <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800507e:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <HAL_FDCAN_MspInit+0x144>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	4a1c      	ldr	r2, [pc, #112]	; (80050f8 <HAL_FDCAN_MspInit+0x144>)
 8005086:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_FDCAN_MspInit+0x144>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d10e      	bne.n	80050ae <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8005090:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <HAL_FDCAN_MspInit+0x148>)
 8005092:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005096:	4a19      	ldr	r2, [pc, #100]	; (80050fc <HAL_FDCAN_MspInit+0x148>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80050a0:	4b16      	ldr	r3, [pc, #88]	; (80050fc <HAL_FDCAN_MspInit+0x148>)
 80050a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <HAL_FDCAN_MspInit+0x148>)
 80050b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050b4:	4a11      	ldr	r2, [pc, #68]	; (80050fc <HAL_FDCAN_MspInit+0x148>)
 80050b6:	f043 0302 	orr.w	r3, r3, #2
 80050ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050be:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <HAL_FDCAN_MspInit+0x148>)
 80050c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80050cc:	2360      	movs	r3, #96	; 0x60
 80050ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d0:	2302      	movs	r3, #2
 80050d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d8:	2300      	movs	r3, #0
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80050dc:	2309      	movs	r3, #9
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050e0:	f107 031c 	add.w	r3, r7, #28
 80050e4:	4619      	mov	r1, r3
 80050e6:	4806      	ldr	r0, [pc, #24]	; (8005100 <HAL_FDCAN_MspInit+0x14c>)
 80050e8:	f003 ff28 	bl	8008f3c <HAL_GPIO_Init>
}
 80050ec:	bf00      	nop
 80050ee:	3730      	adds	r7, #48	; 0x30
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	4000a000 	.word	0x4000a000
 80050f8:	24000cbc 	.word	0x24000cbc
 80050fc:	58024400 	.word	0x58024400
 8005100:	58020400 	.word	0x58020400
 8005104:	4000a400 	.word	0x4000a400

08005108 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a07      	ldr	r2, [pc, #28]	; (8005134 <HAL_RTC_MspInit+0x2c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d105      	bne.n	8005126 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800511a:	4b07      	ldr	r3, [pc, #28]	; (8005138 <HAL_RTC_MspInit+0x30>)
 800511c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511e:	4a06      	ldr	r2, [pc, #24]	; (8005138 <HAL_RTC_MspInit+0x30>)
 8005120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005124:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	58004000 	.word	0x58004000
 8005138:	58024400 	.word	0x58024400

0800513c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005144:	f107 0314 	add.w	r3, r7, #20
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	609a      	str	r2, [r3, #8]
 8005150:	60da      	str	r2, [r3, #12]
 8005152:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2e      	ldr	r2, [pc, #184]	; (8005214 <HAL_SD_MspInit+0xd8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d155      	bne.n	800520a <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800515e:	4b2e      	ldr	r3, [pc, #184]	; (8005218 <HAL_SD_MspInit+0xdc>)
 8005160:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005164:	4a2c      	ldr	r2, [pc, #176]	; (8005218 <HAL_SD_MspInit+0xdc>)
 8005166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800516e:	4b2a      	ldr	r3, [pc, #168]	; (8005218 <HAL_SD_MspInit+0xdc>)
 8005170:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800517c:	4b26      	ldr	r3, [pc, #152]	; (8005218 <HAL_SD_MspInit+0xdc>)
 800517e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005182:	4a25      	ldr	r2, [pc, #148]	; (8005218 <HAL_SD_MspInit+0xdc>)
 8005184:	f043 0304 	orr.w	r3, r3, #4
 8005188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800518c:	4b22      	ldr	r3, [pc, #136]	; (8005218 <HAL_SD_MspInit+0xdc>)
 800518e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800519a:	4b1f      	ldr	r3, [pc, #124]	; (8005218 <HAL_SD_MspInit+0xdc>)
 800519c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051a0:	4a1d      	ldr	r2, [pc, #116]	; (8005218 <HAL_SD_MspInit+0xdc>)
 80051a2:	f043 0308 	orr.w	r3, r3, #8
 80051a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051aa:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <HAL_SD_MspInit+0xdc>)
 80051ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80051b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80051bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051be:	2302      	movs	r3, #2
 80051c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c6:	2303      	movs	r3, #3
 80051c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80051ca:	230c      	movs	r3, #12
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ce:	f107 0314 	add.w	r3, r7, #20
 80051d2:	4619      	mov	r1, r3
 80051d4:	4811      	ldr	r0, [pc, #68]	; (800521c <HAL_SD_MspInit+0xe0>)
 80051d6:	f003 feb1 	bl	8008f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051da:	2304      	movs	r3, #4
 80051dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051de:	2302      	movs	r3, #2
 80051e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051e6:	2303      	movs	r3, #3
 80051e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80051ea:	230c      	movs	r3, #12
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051ee:	f107 0314 	add.w	r3, r7, #20
 80051f2:	4619      	mov	r1, r3
 80051f4:	480a      	ldr	r0, [pc, #40]	; (8005220 <HAL_SD_MspInit+0xe4>)
 80051f6:	f003 fea1 	bl	8008f3c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80051fa:	2200      	movs	r2, #0
 80051fc:	2100      	movs	r1, #0
 80051fe:	2031      	movs	r0, #49	; 0x31
 8005200:	f000 fc53 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8005204:	2031      	movs	r0, #49	; 0x31
 8005206:	f000 fc6a 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800520a:	bf00      	nop
 800520c:	3728      	adds	r7, #40	; 0x28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	52007000 	.word	0x52007000
 8005218:	58024400 	.word	0x58024400
 800521c:	58020800 	.word	0x58020800
 8005220:	58020c00 	.word	0x58020c00

08005224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08a      	sub	sp, #40	; 0x28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800522c:	f107 0314 	add.w	r3, r7, #20
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	605a      	str	r2, [r3, #4]
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1a      	ldr	r2, [pc, #104]	; (80052ac <HAL_SPI_MspInit+0x88>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d12d      	bne.n	80052a2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005246:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <HAL_SPI_MspInit+0x8c>)
 8005248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800524c:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <HAL_SPI_MspInit+0x8c>)
 800524e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005252:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005256:	4b16      	ldr	r3, [pc, #88]	; (80052b0 <HAL_SPI_MspInit+0x8c>)
 8005258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800525c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005264:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <HAL_SPI_MspInit+0x8c>)
 8005266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800526a:	4a11      	ldr	r2, [pc, #68]	; (80052b0 <HAL_SPI_MspInit+0x8c>)
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005274:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <HAL_SPI_MspInit+0x8c>)
 8005276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005282:	23e0      	movs	r3, #224	; 0xe0
 8005284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005286:	2302      	movs	r3, #2
 8005288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800528e:	2303      	movs	r3, #3
 8005290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005292:	2305      	movs	r3, #5
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005296:	f107 0314 	add.w	r3, r7, #20
 800529a:	4619      	mov	r1, r3
 800529c:	4805      	ldr	r0, [pc, #20]	; (80052b4 <HAL_SPI_MspInit+0x90>)
 800529e:	f003 fe4d 	bl	8008f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80052a2:	bf00      	nop
 80052a4:	3728      	adds	r7, #40	; 0x28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40013000 	.word	0x40013000
 80052b0:	58024400 	.word	0x58024400
 80052b4:	58020000 	.word	0x58020000

080052b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08c      	sub	sp, #48	; 0x30
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c0:	f107 031c 	add.w	r3, r7, #28
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	605a      	str	r2, [r3, #4]
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	60da      	str	r2, [r3, #12]
 80052ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a4b      	ldr	r2, [pc, #300]	; (8005404 <HAL_UART_MspInit+0x14c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d12e      	bne.n	8005338 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80052da:	4b4b      	ldr	r3, [pc, #300]	; (8005408 <HAL_UART_MspInit+0x150>)
 80052dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052e0:	4a49      	ldr	r2, [pc, #292]	; (8005408 <HAL_UART_MspInit+0x150>)
 80052e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052ea:	4b47      	ldr	r3, [pc, #284]	; (8005408 <HAL_UART_MspInit+0x150>)
 80052ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052f4:	61bb      	str	r3, [r7, #24]
 80052f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052f8:	4b43      	ldr	r3, [pc, #268]	; (8005408 <HAL_UART_MspInit+0x150>)
 80052fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052fe:	4a42      	ldr	r2, [pc, #264]	; (8005408 <HAL_UART_MspInit+0x150>)
 8005300:	f043 0310 	orr.w	r3, r3, #16
 8005304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005308:	4b3f      	ldr	r3, [pc, #252]	; (8005408 <HAL_UART_MspInit+0x150>)
 800530a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005316:	2303      	movs	r3, #3
 8005318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800531a:	2302      	movs	r3, #2
 800531c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005322:	2300      	movs	r3, #0
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8005326:	2308      	movs	r3, #8
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800532a:	f107 031c 	add.w	r3, r7, #28
 800532e:	4619      	mov	r1, r3
 8005330:	4836      	ldr	r0, [pc, #216]	; (800540c <HAL_UART_MspInit+0x154>)
 8005332:	f003 fe03 	bl	8008f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005336:	e061      	b.n	80053fc <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a34      	ldr	r2, [pc, #208]	; (8005410 <HAL_UART_MspInit+0x158>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d15c      	bne.n	80053fc <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005342:	4b31      	ldr	r3, [pc, #196]	; (8005408 <HAL_UART_MspInit+0x150>)
 8005344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005348:	4a2f      	ldr	r2, [pc, #188]	; (8005408 <HAL_UART_MspInit+0x150>)
 800534a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800534e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005352:	4b2d      	ldr	r3, [pc, #180]	; (8005408 <HAL_UART_MspInit+0x150>)
 8005354:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005360:	4b29      	ldr	r3, [pc, #164]	; (8005408 <HAL_UART_MspInit+0x150>)
 8005362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005366:	4a28      	ldr	r2, [pc, #160]	; (8005408 <HAL_UART_MspInit+0x150>)
 8005368:	f043 0308 	orr.w	r3, r3, #8
 800536c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005370:	4b25      	ldr	r3, [pc, #148]	; (8005408 <HAL_UART_MspInit+0x150>)
 8005372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800537e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005384:	2302      	movs	r3, #2
 8005386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005388:	2300      	movs	r3, #0
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800538c:	2300      	movs	r3, #0
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005390:	2307      	movs	r3, #7
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005394:	f107 031c 	add.w	r3, r7, #28
 8005398:	4619      	mov	r1, r3
 800539a:	481e      	ldr	r0, [pc, #120]	; (8005414 <HAL_UART_MspInit+0x15c>)
 800539c:	f003 fdce 	bl	8008f3c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80053a0:	4b1d      	ldr	r3, [pc, #116]	; (8005418 <HAL_UART_MspInit+0x160>)
 80053a2:	4a1e      	ldr	r2, [pc, #120]	; (800541c <HAL_UART_MspInit+0x164>)
 80053a4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80053a6:	4b1c      	ldr	r3, [pc, #112]	; (8005418 <HAL_UART_MspInit+0x160>)
 80053a8:	222d      	movs	r2, #45	; 0x2d
 80053aa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053ac:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <HAL_UART_MspInit+0x160>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053b2:	4b19      	ldr	r3, [pc, #100]	; (8005418 <HAL_UART_MspInit+0x160>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053b8:	4b17      	ldr	r3, [pc, #92]	; (8005418 <HAL_UART_MspInit+0x160>)
 80053ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053be:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053c0:	4b15      	ldr	r3, [pc, #84]	; (8005418 <HAL_UART_MspInit+0x160>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <HAL_UART_MspInit+0x160>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80053cc:	4b12      	ldr	r3, [pc, #72]	; (8005418 <HAL_UART_MspInit+0x160>)
 80053ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053d2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053d4:	4b10      	ldr	r3, [pc, #64]	; (8005418 <HAL_UART_MspInit+0x160>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053da:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <HAL_UART_MspInit+0x160>)
 80053dc:	2200      	movs	r2, #0
 80053de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80053e0:	480d      	ldr	r0, [pc, #52]	; (8005418 <HAL_UART_MspInit+0x160>)
 80053e2:	f000 fb97 	bl	8005b14 <HAL_DMA_Init>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_UART_MspInit+0x138>
      Error_Handler();
 80053ec:	f7ff fd60 	bl	8004eb0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a09      	ldr	r2, [pc, #36]	; (8005418 <HAL_UART_MspInit+0x160>)
 80053f4:	679a      	str	r2, [r3, #120]	; 0x78
 80053f6:	4a08      	ldr	r2, [pc, #32]	; (8005418 <HAL_UART_MspInit+0x160>)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80053fc:	bf00      	nop
 80053fe:	3730      	adds	r7, #48	; 0x30
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40007c00 	.word	0x40007c00
 8005408:	58024400 	.word	0x58024400
 800540c:	58021000 	.word	0x58021000
 8005410:	40004800 	.word	0x40004800
 8005414:	58020c00 	.word	0x58020c00
 8005418:	24004f80 	.word	0x24004f80
 800541c:	40020028 	.word	0x40020028

08005420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005424:	f006 fa98 	bl	800b958 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005428:	e7fe      	b.n	8005428 <NMI_Handler+0x8>

0800542a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800542a:	b480      	push	{r7}
 800542c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800542e:	e7fe      	b.n	800542e <HardFault_Handler+0x4>

08005430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005434:	e7fe      	b.n	8005434 <MemManage_Handler+0x4>

08005436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005436:	b480      	push	{r7}
 8005438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800543a:	e7fe      	b.n	800543a <BusFault_Handler+0x4>

0800543c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005440:	e7fe      	b.n	8005440 <UsageFault_Handler+0x4>

08005442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005442:	b480      	push	{r7}
 8005444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005446:	bf00      	nop
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800545e:	b480      	push	{r7}
 8005460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005462:	bf00      	nop
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005470:	f000 f9f2 	bl	8005858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005474:	bf00      	nop
 8005476:	bd80      	pop	{r7, pc}

08005478 <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 800547c:	f005 fa84 	bl	800a988 <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 8005480:	bf00      	nop
 8005482:	bd80      	pop	{r7, pc}

08005484 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005488:	4802      	ldr	r0, [pc, #8]	; (8005494 <DMA1_Stream1_IRQHandler+0x10>)
 800548a:	f001 f909 	bl	80066a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800548e:	bf00      	nop
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	24004f80 	.word	0x24004f80

08005498 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800549c:	4802      	ldr	r0, [pc, #8]	; (80054a8 <FDCAN1_IT0_IRQHandler+0x10>)
 800549e:	f003 f8bd 	bl	800861c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	24005148 	.word	0x24005148

080054ac <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80054b0:	4802      	ldr	r0, [pc, #8]	; (80054bc <FDCAN1_IT1_IRQHandler+0x10>)
 80054b2:	f003 f8b3 	bl	800861c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80054b6:	bf00      	nop
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	24005148 	.word	0x24005148

080054c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80054c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80054c8:	f003 ff34 	bl	8009334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80054cc:	bf00      	nop
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80054d4:	4802      	ldr	r0, [pc, #8]	; (80054e0 <SDMMC1_IRQHandler+0x10>)
 80054d6:	f009 f9c1 	bl	800e85c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80054da:	bf00      	nop
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	240050a4 	.word	0x240050a4

080054e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80054e8:	4802      	ldr	r0, [pc, #8]	; (80054f4 <OTG_FS_IRQHandler+0x10>)
 80054ea:	f004 f8b8 	bl	800965e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80054ee:	bf00      	nop
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	24005cd8 	.word	0x24005cd8

080054f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e00a      	b.n	8005520 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800550a:	f3af 8000 	nop.w
 800550e:	4601      	mov	r1, r0
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	60ba      	str	r2, [r7, #8]
 8005516:	b2ca      	uxtb	r2, r1
 8005518:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	3301      	adds	r3, #1
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	429a      	cmp	r2, r3
 8005526:	dbf0      	blt.n	800550a <_read+0x12>
	}

return len;
 8005528:	687b      	ldr	r3, [r7, #4]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
	return -1;
 800553a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800555a:	605a      	str	r2, [r3, #4]
	return 0;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <_isatty>:

int _isatty(int file)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
	return 1;
 8005572:	2301      	movs	r3, #1
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
	return 0;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055a4:	4a14      	ldr	r2, [pc, #80]	; (80055f8 <_sbrk+0x5c>)
 80055a6:	4b15      	ldr	r3, [pc, #84]	; (80055fc <_sbrk+0x60>)
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055b0:	4b13      	ldr	r3, [pc, #76]	; (8005600 <_sbrk+0x64>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055b8:	4b11      	ldr	r3, [pc, #68]	; (8005600 <_sbrk+0x64>)
 80055ba:	4a12      	ldr	r2, [pc, #72]	; (8005604 <_sbrk+0x68>)
 80055bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055be:	4b10      	ldr	r3, [pc, #64]	; (8005600 <_sbrk+0x64>)
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d207      	bcs.n	80055dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055cc:	f015 fe5e 	bl	801b28c <__errno>
 80055d0:	4602      	mov	r2, r0
 80055d2:	230c      	movs	r3, #12
 80055d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80055d6:	f04f 33ff 	mov.w	r3, #4294967295
 80055da:	e009      	b.n	80055f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055dc:	4b08      	ldr	r3, [pc, #32]	; (8005600 <_sbrk+0x64>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055e2:	4b07      	ldr	r3, [pc, #28]	; (8005600 <_sbrk+0x64>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4413      	add	r3, r2
 80055ea:	4a05      	ldr	r2, [pc, #20]	; (8005600 <_sbrk+0x64>)
 80055ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055ee:	68fb      	ldr	r3, [r7, #12]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	24080000 	.word	0x24080000
 80055fc:	00000400 	.word	0x00000400
 8005600:	24000cc0 	.word	0x24000cc0
 8005604:	240060e8 	.word	0x240060e8

08005608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800560c:	4b39      	ldr	r3, [pc, #228]	; (80056f4 <SystemInit+0xec>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	4a38      	ldr	r2, [pc, #224]	; (80056f4 <SystemInit+0xec>)
 8005614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800561c:	4b36      	ldr	r3, [pc, #216]	; (80056f8 <SystemInit+0xf0>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	2b06      	cmp	r3, #6
 8005626:	d807      	bhi.n	8005638 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005628:	4b33      	ldr	r3, [pc, #204]	; (80056f8 <SystemInit+0xf0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 030f 	bic.w	r3, r3, #15
 8005630:	4a31      	ldr	r2, [pc, #196]	; (80056f8 <SystemInit+0xf0>)
 8005632:	f043 0307 	orr.w	r3, r3, #7
 8005636:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005638:	4b30      	ldr	r3, [pc, #192]	; (80056fc <SystemInit+0xf4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a2f      	ldr	r2, [pc, #188]	; (80056fc <SystemInit+0xf4>)
 800563e:	f043 0301 	orr.w	r3, r3, #1
 8005642:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005644:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <SystemInit+0xf4>)
 8005646:	2200      	movs	r2, #0
 8005648:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800564a:	4b2c      	ldr	r3, [pc, #176]	; (80056fc <SystemInit+0xf4>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	492b      	ldr	r1, [pc, #172]	; (80056fc <SystemInit+0xf4>)
 8005650:	4b2b      	ldr	r3, [pc, #172]	; (8005700 <SystemInit+0xf8>)
 8005652:	4013      	ands	r3, r2
 8005654:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005656:	4b28      	ldr	r3, [pc, #160]	; (80056f8 <SystemInit+0xf0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	2b07      	cmp	r3, #7
 8005660:	d907      	bls.n	8005672 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005662:	4b25      	ldr	r3, [pc, #148]	; (80056f8 <SystemInit+0xf0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 030f 	bic.w	r3, r3, #15
 800566a:	4a23      	ldr	r2, [pc, #140]	; (80056f8 <SystemInit+0xf0>)
 800566c:	f043 0307 	orr.w	r3, r3, #7
 8005670:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005672:	4b22      	ldr	r3, [pc, #136]	; (80056fc <SystemInit+0xf4>)
 8005674:	2200      	movs	r2, #0
 8005676:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005678:	4b20      	ldr	r3, [pc, #128]	; (80056fc <SystemInit+0xf4>)
 800567a:	2200      	movs	r2, #0
 800567c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800567e:	4b1f      	ldr	r3, [pc, #124]	; (80056fc <SystemInit+0xf4>)
 8005680:	2200      	movs	r2, #0
 8005682:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <SystemInit+0xf4>)
 8005686:	4a1f      	ldr	r2, [pc, #124]	; (8005704 <SystemInit+0xfc>)
 8005688:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800568a:	4b1c      	ldr	r3, [pc, #112]	; (80056fc <SystemInit+0xf4>)
 800568c:	4a1e      	ldr	r2, [pc, #120]	; (8005708 <SystemInit+0x100>)
 800568e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005690:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <SystemInit+0xf4>)
 8005692:	4a1e      	ldr	r2, [pc, #120]	; (800570c <SystemInit+0x104>)
 8005694:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005696:	4b19      	ldr	r3, [pc, #100]	; (80056fc <SystemInit+0xf4>)
 8005698:	2200      	movs	r2, #0
 800569a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800569c:	4b17      	ldr	r3, [pc, #92]	; (80056fc <SystemInit+0xf4>)
 800569e:	4a1b      	ldr	r2, [pc, #108]	; (800570c <SystemInit+0x104>)
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80056a2:	4b16      	ldr	r3, [pc, #88]	; (80056fc <SystemInit+0xf4>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80056a8:	4b14      	ldr	r3, [pc, #80]	; (80056fc <SystemInit+0xf4>)
 80056aa:	4a18      	ldr	r2, [pc, #96]	; (800570c <SystemInit+0x104>)
 80056ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80056ae:	4b13      	ldr	r3, [pc, #76]	; (80056fc <SystemInit+0xf4>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80056b4:	4b11      	ldr	r3, [pc, #68]	; (80056fc <SystemInit+0xf4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a10      	ldr	r2, [pc, #64]	; (80056fc <SystemInit+0xf4>)
 80056ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80056c0:	4b0e      	ldr	r3, [pc, #56]	; (80056fc <SystemInit+0xf4>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80056c6:	4b12      	ldr	r3, [pc, #72]	; (8005710 <SystemInit+0x108>)
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <SystemInit+0x10c>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056d2:	d202      	bcs.n	80056da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80056d4:	4b10      	ldr	r3, [pc, #64]	; (8005718 <SystemInit+0x110>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80056da:	4b10      	ldr	r3, [pc, #64]	; (800571c <SystemInit+0x114>)
 80056dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80056e0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056e2:	4b04      	ldr	r3, [pc, #16]	; (80056f4 <SystemInit+0xec>)
 80056e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056e8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80056ea:	bf00      	nop
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	e000ed00 	.word	0xe000ed00
 80056f8:	52002000 	.word	0x52002000
 80056fc:	58024400 	.word	0x58024400
 8005700:	eaf6ed7f 	.word	0xeaf6ed7f
 8005704:	02020200 	.word	0x02020200
 8005708:	01ff0000 	.word	0x01ff0000
 800570c:	01010280 	.word	0x01010280
 8005710:	5c001000 	.word	0x5c001000
 8005714:	ffff0000 	.word	0xffff0000
 8005718:	51008108 	.word	0x51008108
 800571c:	52004000 	.word	0x52004000

08005720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005758 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005724:	f7ff ff70 	bl	8005608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005728:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800572a:	e003      	b.n	8005734 <LoopCopyDataInit>

0800572c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800572c:	4b0b      	ldr	r3, [pc, #44]	; (800575c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800572e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005730:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005732:	3104      	adds	r1, #4

08005734 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005734:	480a      	ldr	r0, [pc, #40]	; (8005760 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8005738:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800573a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800573c:	d3f6      	bcc.n	800572c <CopyDataInit>
  ldr  r2, =_sbss
 800573e:	4a0a      	ldr	r2, [pc, #40]	; (8005768 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8005740:	e002      	b.n	8005748 <LoopFillZerobss>

08005742 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005742:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005744:	f842 3b04 	str.w	r3, [r2], #4

08005748 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005748:	4b08      	ldr	r3, [pc, #32]	; (800576c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800574a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800574c:	d3f9      	bcc.n	8005742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800574e:	f015 fda3 	bl	801b298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005752:	f7fd f8e7 	bl	8002924 <main>
  bx  lr    
 8005756:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005758:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800575c:	0801f198 	.word	0x0801f198
  ldr  r0, =_sdata
 8005760:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8005764:	2400034c 	.word	0x2400034c
  ldr  r2, =_sbss
 8005768:	24000350 	.word	0x24000350
  ldr  r3, = _ebss
 800576c:	240060e4 	.word	0x240060e4

08005770 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005770:	e7fe      	b.n	8005770 <ADC3_IRQHandler>
	...

08005774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800577a:	2003      	movs	r0, #3
 800577c:	f000 f98a 	bl	8005a94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005780:	f005 ff1c 	bl	800b5bc <HAL_RCC_GetSysClockFreq>
 8005784:	4601      	mov	r1, r0
 8005786:	4b15      	ldr	r3, [pc, #84]	; (80057dc <HAL_Init+0x68>)
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <HAL_Init+0x6c>)
 8005792:	5cd3      	ldrb	r3, [r2, r3]
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	fa21 f303 	lsr.w	r3, r1, r3
 800579c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800579e:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <HAL_Init+0x68>)
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	4a0e      	ldr	r2, [pc, #56]	; (80057e0 <HAL_Init+0x6c>)
 80057a8:	5cd3      	ldrb	r3, [r2, r3]
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
 80057b4:	4a0b      	ldr	r2, [pc, #44]	; (80057e4 <HAL_Init+0x70>)
 80057b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057b8:	4a0b      	ldr	r2, [pc, #44]	; (80057e8 <HAL_Init+0x74>)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057be:	2000      	movs	r0, #0
 80057c0:	f000 f814 	bl	80057ec <HAL_InitTick>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e002      	b.n	80057d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80057ce:	f7ff fbbf 	bl	8004f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	58024400 	.word	0x58024400
 80057e0:	0801ed80 	.word	0x0801ed80
 80057e4:	24000014 	.word	0x24000014
 80057e8:	24000010 	.word	0x24000010

080057ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80057f4:	4b15      	ldr	r3, [pc, #84]	; (800584c <HAL_InitTick+0x60>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e021      	b.n	8005844 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005800:	4b13      	ldr	r3, [pc, #76]	; (8005850 <HAL_InitTick+0x64>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4b11      	ldr	r3, [pc, #68]	; (800584c <HAL_InitTick+0x60>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	4619      	mov	r1, r3
 800580a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800580e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005812:	fbb2 f3f3 	udiv	r3, r2, r3
 8005816:	4618      	mov	r0, r3
 8005818:	f000 f96f 	bl	8005afa <HAL_SYSTICK_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e00e      	b.n	8005844 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b0f      	cmp	r3, #15
 800582a:	d80a      	bhi.n	8005842 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800582c:	2200      	movs	r2, #0
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	f000 f939 	bl	8005aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005838:	4a06      	ldr	r2, [pc, #24]	; (8005854 <HAL_InitTick+0x68>)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	e000      	b.n	8005844 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
}
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	2400001c 	.word	0x2400001c
 8005850:	24000010 	.word	0x24000010
 8005854:	24000018 	.word	0x24000018

08005858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800585c:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_IncTick+0x20>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	4b06      	ldr	r3, [pc, #24]	; (800587c <HAL_IncTick+0x24>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4413      	add	r3, r2
 8005868:	4a04      	ldr	r2, [pc, #16]	; (800587c <HAL_IncTick+0x24>)
 800586a:	6013      	str	r3, [r2, #0]
}
 800586c:	bf00      	nop
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	2400001c 	.word	0x2400001c
 800587c:	2400539c 	.word	0x2400539c

08005880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  return uwTick;
 8005884:	4b03      	ldr	r3, [pc, #12]	; (8005894 <HAL_GetTick+0x14>)
 8005886:	681b      	ldr	r3, [r3, #0]
}
 8005888:	4618      	mov	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	2400539c 	.word	0x2400539c

08005898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058a0:	f7ff ffee 	bl	8005880 <HAL_GetTick>
 80058a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b0:	d005      	beq.n	80058be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058b2:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <HAL_Delay+0x40>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058be:	bf00      	nop
 80058c0:	f7ff ffde 	bl	8005880 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d8f7      	bhi.n	80058c0 <HAL_Delay+0x28>
  {
  }
}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	2400001c 	.word	0x2400001c

080058dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <HAL_GetREVID+0x14>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	0c1b      	lsrs	r3, r3, #16
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	5c001000 	.word	0x5c001000

080058f4 <__NVIC_SetPriorityGrouping>:
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005904:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <__NVIC_SetPriorityGrouping+0x40>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005910:	4013      	ands	r3, r2
 8005912:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800591c:	4b06      	ldr	r3, [pc, #24]	; (8005938 <__NVIC_SetPriorityGrouping+0x44>)
 800591e:	4313      	orrs	r3, r2
 8005920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005922:	4a04      	ldr	r2, [pc, #16]	; (8005934 <__NVIC_SetPriorityGrouping+0x40>)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	60d3      	str	r3, [r2, #12]
}
 8005928:	bf00      	nop
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	e000ed00 	.word	0xe000ed00
 8005938:	05fa0000 	.word	0x05fa0000

0800593c <__NVIC_GetPriorityGrouping>:
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005940:	4b04      	ldr	r3, [pc, #16]	; (8005954 <__NVIC_GetPriorityGrouping+0x18>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	0a1b      	lsrs	r3, r3, #8
 8005946:	f003 0307 	and.w	r3, r3, #7
}
 800594a:	4618      	mov	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	e000ed00 	.word	0xe000ed00

08005958 <__NVIC_EnableIRQ>:
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005966:	2b00      	cmp	r3, #0
 8005968:	db0b      	blt.n	8005982 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	f003 021f 	and.w	r2, r3, #31
 8005970:	4907      	ldr	r1, [pc, #28]	; (8005990 <__NVIC_EnableIRQ+0x38>)
 8005972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2001      	movs	r0, #1
 800597a:	fa00 f202 	lsl.w	r2, r0, r2
 800597e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	e000e100 	.word	0xe000e100

08005994 <__NVIC_SetPriority>:
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	6039      	str	r1, [r7, #0]
 800599e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	db0a      	blt.n	80059be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	490c      	ldr	r1, [pc, #48]	; (80059e0 <__NVIC_SetPriority+0x4c>)
 80059ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059b2:	0112      	lsls	r2, r2, #4
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	440b      	add	r3, r1
 80059b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80059bc:	e00a      	b.n	80059d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	4908      	ldr	r1, [pc, #32]	; (80059e4 <__NVIC_SetPriority+0x50>)
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	3b04      	subs	r3, #4
 80059cc:	0112      	lsls	r2, r2, #4
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	440b      	add	r3, r1
 80059d2:	761a      	strb	r2, [r3, #24]
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	e000e100 	.word	0xe000e100
 80059e4:	e000ed00 	.word	0xe000ed00

080059e8 <NVIC_EncodePriority>:
{
 80059e8:	b480      	push	{r7}
 80059ea:	b089      	sub	sp, #36	; 0x24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f1c3 0307 	rsb	r3, r3, #7
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	bf28      	it	cs
 8005a06:	2304      	movcs	r3, #4
 8005a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	2b06      	cmp	r3, #6
 8005a10:	d902      	bls.n	8005a18 <NVIC_EncodePriority+0x30>
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	3b03      	subs	r3, #3
 8005a16:	e000      	b.n	8005a1a <NVIC_EncodePriority+0x32>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43da      	mvns	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	401a      	ands	r2, r3
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a30:	f04f 31ff 	mov.w	r1, #4294967295
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3a:	43d9      	mvns	r1, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a40:	4313      	orrs	r3, r2
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3724      	adds	r7, #36	; 0x24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <SysTick_Config>:
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a60:	d301      	bcc.n	8005a66 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005a62:	2301      	movs	r3, #1
 8005a64:	e00f      	b.n	8005a86 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a66:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <SysTick_Config+0x40>)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a6e:	210f      	movs	r1, #15
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295
 8005a74:	f7ff ff8e 	bl	8005994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <SysTick_Config+0x40>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a7e:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <SysTick_Config+0x40>)
 8005a80:	2207      	movs	r2, #7
 8005a82:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	e000e010 	.word	0xe000e010

08005a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff ff29 	bl	80058f4 <__NVIC_SetPriorityGrouping>
}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b086      	sub	sp, #24
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ab8:	f7ff ff40 	bl	800593c <__NVIC_GetPriorityGrouping>
 8005abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	6978      	ldr	r0, [r7, #20]
 8005ac4:	f7ff ff90 	bl	80059e8 <NVIC_EncodePriority>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff ff5f 	bl	8005994 <__NVIC_SetPriority>
}
 8005ad6:	bf00      	nop
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff ff33 	bl	8005958 <__NVIC_EnableIRQ>
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff ffa4 	bl	8005a50 <SysTick_Config>
 8005b08:	4603      	mov	r3, r0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005b1c:	f7ff feb0 	bl	8005880 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e316      	b.n	800615a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a66      	ldr	r2, [pc, #408]	; (8005ccc <HAL_DMA_Init+0x1b8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d04a      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a65      	ldr	r2, [pc, #404]	; (8005cd0 <HAL_DMA_Init+0x1bc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d045      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a63      	ldr	r2, [pc, #396]	; (8005cd4 <HAL_DMA_Init+0x1c0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d040      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a62      	ldr	r2, [pc, #392]	; (8005cd8 <HAL_DMA_Init+0x1c4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d03b      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a60      	ldr	r2, [pc, #384]	; (8005cdc <HAL_DMA_Init+0x1c8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d036      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a5f      	ldr	r2, [pc, #380]	; (8005ce0 <HAL_DMA_Init+0x1cc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d031      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a5d      	ldr	r2, [pc, #372]	; (8005ce4 <HAL_DMA_Init+0x1d0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d02c      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a5c      	ldr	r2, [pc, #368]	; (8005ce8 <HAL_DMA_Init+0x1d4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d027      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a5a      	ldr	r2, [pc, #360]	; (8005cec <HAL_DMA_Init+0x1d8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d022      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a59      	ldr	r2, [pc, #356]	; (8005cf0 <HAL_DMA_Init+0x1dc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d01d      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a57      	ldr	r2, [pc, #348]	; (8005cf4 <HAL_DMA_Init+0x1e0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d018      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a56      	ldr	r2, [pc, #344]	; (8005cf8 <HAL_DMA_Init+0x1e4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d013      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a54      	ldr	r2, [pc, #336]	; (8005cfc <HAL_DMA_Init+0x1e8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00e      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a53      	ldr	r2, [pc, #332]	; (8005d00 <HAL_DMA_Init+0x1ec>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d009      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a51      	ldr	r2, [pc, #324]	; (8005d04 <HAL_DMA_Init+0x1f0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <HAL_DMA_Init+0xb8>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a50      	ldr	r2, [pc, #320]	; (8005d08 <HAL_DMA_Init+0x1f4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d101      	bne.n	8005bd0 <HAL_DMA_Init+0xbc>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <HAL_DMA_Init+0xbe>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 813b 	beq.w	8005e4e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a37      	ldr	r2, [pc, #220]	; (8005ccc <HAL_DMA_Init+0x1b8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d04a      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a36      	ldr	r2, [pc, #216]	; (8005cd0 <HAL_DMA_Init+0x1bc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d045      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a34      	ldr	r2, [pc, #208]	; (8005cd4 <HAL_DMA_Init+0x1c0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d040      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a33      	ldr	r2, [pc, #204]	; (8005cd8 <HAL_DMA_Init+0x1c4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d03b      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a31      	ldr	r2, [pc, #196]	; (8005cdc <HAL_DMA_Init+0x1c8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d036      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a30      	ldr	r2, [pc, #192]	; (8005ce0 <HAL_DMA_Init+0x1cc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d031      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a2e      	ldr	r2, [pc, #184]	; (8005ce4 <HAL_DMA_Init+0x1d0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d02c      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a2d      	ldr	r2, [pc, #180]	; (8005ce8 <HAL_DMA_Init+0x1d4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d027      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a2b      	ldr	r2, [pc, #172]	; (8005cec <HAL_DMA_Init+0x1d8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d022      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2a      	ldr	r2, [pc, #168]	; (8005cf0 <HAL_DMA_Init+0x1dc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d01d      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a28      	ldr	r2, [pc, #160]	; (8005cf4 <HAL_DMA_Init+0x1e0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d018      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a27      	ldr	r2, [pc, #156]	; (8005cf8 <HAL_DMA_Init+0x1e4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d013      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a25      	ldr	r2, [pc, #148]	; (8005cfc <HAL_DMA_Init+0x1e8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00e      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a24      	ldr	r2, [pc, #144]	; (8005d00 <HAL_DMA_Init+0x1ec>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d009      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a22      	ldr	r2, [pc, #136]	; (8005d04 <HAL_DMA_Init+0x1f0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <HAL_DMA_Init+0x174>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a21      	ldr	r2, [pc, #132]	; (8005d08 <HAL_DMA_Init+0x1f4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d108      	bne.n	8005c9a <HAL_DMA_Init+0x186>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	e007      	b.n	8005caa <HAL_DMA_Init+0x196>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0201 	bic.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005caa:	e02f      	b.n	8005d0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cac:	f7ff fde8 	bl	8005880 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b05      	cmp	r3, #5
 8005cb8:	d928      	bls.n	8005d0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2203      	movs	r2, #3
 8005cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e246      	b.n	800615a <HAL_DMA_Init+0x646>
 8005ccc:	40020010 	.word	0x40020010
 8005cd0:	40020028 	.word	0x40020028
 8005cd4:	40020040 	.word	0x40020040
 8005cd8:	40020058 	.word	0x40020058
 8005cdc:	40020070 	.word	0x40020070
 8005ce0:	40020088 	.word	0x40020088
 8005ce4:	400200a0 	.word	0x400200a0
 8005ce8:	400200b8 	.word	0x400200b8
 8005cec:	40020410 	.word	0x40020410
 8005cf0:	40020428 	.word	0x40020428
 8005cf4:	40020440 	.word	0x40020440
 8005cf8:	40020458 	.word	0x40020458
 8005cfc:	40020470 	.word	0x40020470
 8005d00:	40020488 	.word	0x40020488
 8005d04:	400204a0 	.word	0x400204a0
 8005d08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1c8      	bne.n	8005cac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	4b83      	ldr	r3, [pc, #524]	; (8005f34 <HAL_DMA_Init+0x420>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005d32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d107      	bne.n	8005d70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005d70:	4b71      	ldr	r3, [pc, #452]	; (8005f38 <HAL_DMA_Init+0x424>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	4b71      	ldr	r3, [pc, #452]	; (8005f3c <HAL_DMA_Init+0x428>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d7c:	d328      	bcc.n	8005dd0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b28      	cmp	r3, #40	; 0x28
 8005d84:	d903      	bls.n	8005d8e <HAL_DMA_Init+0x27a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8005d8c:	d917      	bls.n	8005dbe <HAL_DMA_Init+0x2aa>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b3e      	cmp	r3, #62	; 0x3e
 8005d94:	d903      	bls.n	8005d9e <HAL_DMA_Init+0x28a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b42      	cmp	r3, #66	; 0x42
 8005d9c:	d90f      	bls.n	8005dbe <HAL_DMA_Init+0x2aa>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b46      	cmp	r3, #70	; 0x46
 8005da4:	d903      	bls.n	8005dae <HAL_DMA_Init+0x29a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b48      	cmp	r3, #72	; 0x48
 8005dac:	d907      	bls.n	8005dbe <HAL_DMA_Init+0x2aa>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b4e      	cmp	r3, #78	; 0x4e
 8005db4:	d905      	bls.n	8005dc2 <HAL_DMA_Init+0x2ae>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b52      	cmp	r3, #82	; 0x52
 8005dbc:	d801      	bhi.n	8005dc2 <HAL_DMA_Init+0x2ae>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <HAL_DMA_Init+0x2b0>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 0307 	bic.w	r3, r3, #7
 8005de6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d117      	bne.n	8005e2a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00e      	beq.n	8005e2a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 fdcf 	bl	80079b0 <DMA_CheckFifoParam>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2240      	movs	r2, #64	; 0x40
 8005e1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e197      	b.n	800615a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f001 fd0a 	bl	800784c <DMA_CalcBaseAndBitshift>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	223f      	movs	r2, #63	; 0x3f
 8005e46:	409a      	lsls	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	609a      	str	r2, [r3, #8]
 8005e4c:	e0cd      	b.n	8005fea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a3b      	ldr	r2, [pc, #236]	; (8005f40 <HAL_DMA_Init+0x42c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d022      	beq.n	8005e9e <HAL_DMA_Init+0x38a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a39      	ldr	r2, [pc, #228]	; (8005f44 <HAL_DMA_Init+0x430>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01d      	beq.n	8005e9e <HAL_DMA_Init+0x38a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a38      	ldr	r2, [pc, #224]	; (8005f48 <HAL_DMA_Init+0x434>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d018      	beq.n	8005e9e <HAL_DMA_Init+0x38a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a36      	ldr	r2, [pc, #216]	; (8005f4c <HAL_DMA_Init+0x438>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d013      	beq.n	8005e9e <HAL_DMA_Init+0x38a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a35      	ldr	r2, [pc, #212]	; (8005f50 <HAL_DMA_Init+0x43c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00e      	beq.n	8005e9e <HAL_DMA_Init+0x38a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a33      	ldr	r2, [pc, #204]	; (8005f54 <HAL_DMA_Init+0x440>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d009      	beq.n	8005e9e <HAL_DMA_Init+0x38a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a32      	ldr	r2, [pc, #200]	; (8005f58 <HAL_DMA_Init+0x444>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d004      	beq.n	8005e9e <HAL_DMA_Init+0x38a>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a30      	ldr	r2, [pc, #192]	; (8005f5c <HAL_DMA_Init+0x448>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d101      	bne.n	8005ea2 <HAL_DMA_Init+0x38e>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <HAL_DMA_Init+0x390>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 8097 	beq.w	8005fd8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a24      	ldr	r2, [pc, #144]	; (8005f40 <HAL_DMA_Init+0x42c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d021      	beq.n	8005ef8 <HAL_DMA_Init+0x3e4>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a22      	ldr	r2, [pc, #136]	; (8005f44 <HAL_DMA_Init+0x430>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01c      	beq.n	8005ef8 <HAL_DMA_Init+0x3e4>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a21      	ldr	r2, [pc, #132]	; (8005f48 <HAL_DMA_Init+0x434>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d017      	beq.n	8005ef8 <HAL_DMA_Init+0x3e4>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1f      	ldr	r2, [pc, #124]	; (8005f4c <HAL_DMA_Init+0x438>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d012      	beq.n	8005ef8 <HAL_DMA_Init+0x3e4>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1e      	ldr	r2, [pc, #120]	; (8005f50 <HAL_DMA_Init+0x43c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00d      	beq.n	8005ef8 <HAL_DMA_Init+0x3e4>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1c      	ldr	r2, [pc, #112]	; (8005f54 <HAL_DMA_Init+0x440>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d008      	beq.n	8005ef8 <HAL_DMA_Init+0x3e4>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1b      	ldr	r2, [pc, #108]	; (8005f58 <HAL_DMA_Init+0x444>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <HAL_DMA_Init+0x3e4>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a19      	ldr	r2, [pc, #100]	; (8005f5c <HAL_DMA_Init+0x448>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <HAL_DMA_Init+0x44c>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b40      	cmp	r3, #64	; 0x40
 8005f20:	d020      	beq.n	8005f64 <HAL_DMA_Init+0x450>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	2b80      	cmp	r3, #128	; 0x80
 8005f28:	d102      	bne.n	8005f30 <HAL_DMA_Init+0x41c>
 8005f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f2e:	e01a      	b.n	8005f66 <HAL_DMA_Init+0x452>
 8005f30:	2300      	movs	r3, #0
 8005f32:	e018      	b.n	8005f66 <HAL_DMA_Init+0x452>
 8005f34:	fe10803f 	.word	0xfe10803f
 8005f38:	5c001000 	.word	0x5c001000
 8005f3c:	ffff0000 	.word	0xffff0000
 8005f40:	58025408 	.word	0x58025408
 8005f44:	5802541c 	.word	0x5802541c
 8005f48:	58025430 	.word	0x58025430
 8005f4c:	58025444 	.word	0x58025444
 8005f50:	58025458 	.word	0x58025458
 8005f54:	5802546c 	.word	0x5802546c
 8005f58:	58025480 	.word	0x58025480
 8005f5c:	58025494 	.word	0x58025494
 8005f60:	fffe000f 	.word	0xfffe000f
 8005f64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68d2      	ldr	r2, [r2, #12]
 8005f6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005f6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005f74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005f7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005f84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005f8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005f94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4b6e      	ldr	r3, [pc, #440]	; (8006164 <HAL_DMA_Init+0x650>)
 8005fac:	4413      	add	r3, r2
 8005fae:	4a6e      	ldr	r2, [pc, #440]	; (8006168 <HAL_DMA_Init+0x654>)
 8005fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb4:	091b      	lsrs	r3, r3, #4
 8005fb6:	009a      	lsls	r2, r3, #2
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fc45 	bl	800784c <DMA_CalcBaseAndBitshift>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fca:	f003 031f 	and.w	r3, r3, #31
 8005fce:	2201      	movs	r2, #1
 8005fd0:	409a      	lsls	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	605a      	str	r2, [r3, #4]
 8005fd6:	e008      	b.n	8005fea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2240      	movs	r2, #64	; 0x40
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2203      	movs	r2, #3
 8005fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e0b7      	b.n	800615a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a5f      	ldr	r2, [pc, #380]	; (800616c <HAL_DMA_Init+0x658>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d072      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a5d      	ldr	r2, [pc, #372]	; (8006170 <HAL_DMA_Init+0x65c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d06d      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a5c      	ldr	r2, [pc, #368]	; (8006174 <HAL_DMA_Init+0x660>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d068      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a5a      	ldr	r2, [pc, #360]	; (8006178 <HAL_DMA_Init+0x664>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d063      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a59      	ldr	r2, [pc, #356]	; (800617c <HAL_DMA_Init+0x668>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d05e      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a57      	ldr	r2, [pc, #348]	; (8006180 <HAL_DMA_Init+0x66c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d059      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a56      	ldr	r2, [pc, #344]	; (8006184 <HAL_DMA_Init+0x670>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d054      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a54      	ldr	r2, [pc, #336]	; (8006188 <HAL_DMA_Init+0x674>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d04f      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a53      	ldr	r2, [pc, #332]	; (800618c <HAL_DMA_Init+0x678>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d04a      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a51      	ldr	r2, [pc, #324]	; (8006190 <HAL_DMA_Init+0x67c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d045      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a50      	ldr	r2, [pc, #320]	; (8006194 <HAL_DMA_Init+0x680>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d040      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a4e      	ldr	r2, [pc, #312]	; (8006198 <HAL_DMA_Init+0x684>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d03b      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a4d      	ldr	r2, [pc, #308]	; (800619c <HAL_DMA_Init+0x688>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d036      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a4b      	ldr	r2, [pc, #300]	; (80061a0 <HAL_DMA_Init+0x68c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d031      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a4a      	ldr	r2, [pc, #296]	; (80061a4 <HAL_DMA_Init+0x690>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d02c      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a48      	ldr	r2, [pc, #288]	; (80061a8 <HAL_DMA_Init+0x694>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d027      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a47      	ldr	r2, [pc, #284]	; (80061ac <HAL_DMA_Init+0x698>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d022      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a45      	ldr	r2, [pc, #276]	; (80061b0 <HAL_DMA_Init+0x69c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d01d      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a44      	ldr	r2, [pc, #272]	; (80061b4 <HAL_DMA_Init+0x6a0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d018      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a42      	ldr	r2, [pc, #264]	; (80061b8 <HAL_DMA_Init+0x6a4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a41      	ldr	r2, [pc, #260]	; (80061bc <HAL_DMA_Init+0x6a8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00e      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a3f      	ldr	r2, [pc, #252]	; (80061c0 <HAL_DMA_Init+0x6ac>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d009      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a3e      	ldr	r2, [pc, #248]	; (80061c4 <HAL_DMA_Init+0x6b0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d004      	beq.n	80060da <HAL_DMA_Init+0x5c6>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a3c      	ldr	r2, [pc, #240]	; (80061c8 <HAL_DMA_Init+0x6b4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d101      	bne.n	80060de <HAL_DMA_Init+0x5ca>
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <HAL_DMA_Init+0x5cc>
 80060de:	2300      	movs	r3, #0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d032      	beq.n	800614a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fcdf 	bl	8007aa8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b80      	cmp	r3, #128	; 0x80
 80060f0:	d102      	bne.n	80060f8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800610c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d010      	beq.n	8006138 <HAL_DMA_Init+0x624>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b08      	cmp	r3, #8
 800611c:	d80c      	bhi.n	8006138 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 fd5c 	bl	8007bdc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006134:	605a      	str	r2, [r3, #4]
 8006136:	e008      	b.n	800614a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	a7fdabf8 	.word	0xa7fdabf8
 8006168:	cccccccd 	.word	0xcccccccd
 800616c:	40020010 	.word	0x40020010
 8006170:	40020028 	.word	0x40020028
 8006174:	40020040 	.word	0x40020040
 8006178:	40020058 	.word	0x40020058
 800617c:	40020070 	.word	0x40020070
 8006180:	40020088 	.word	0x40020088
 8006184:	400200a0 	.word	0x400200a0
 8006188:	400200b8 	.word	0x400200b8
 800618c:	40020410 	.word	0x40020410
 8006190:	40020428 	.word	0x40020428
 8006194:	40020440 	.word	0x40020440
 8006198:	40020458 	.word	0x40020458
 800619c:	40020470 	.word	0x40020470
 80061a0:	40020488 	.word	0x40020488
 80061a4:	400204a0 	.word	0x400204a0
 80061a8:	400204b8 	.word	0x400204b8
 80061ac:	58025408 	.word	0x58025408
 80061b0:	5802541c 	.word	0x5802541c
 80061b4:	58025430 	.word	0x58025430
 80061b8:	58025444 	.word	0x58025444
 80061bc:	58025458 	.word	0x58025458
 80061c0:	5802546c 	.word	0x5802546c
 80061c4:	58025480 	.word	0x58025480
 80061c8:	58025494 	.word	0x58025494

080061cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e226      	b.n	8006636 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_DMA_Start_IT+0x2a>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e21f      	b.n	8006636 <HAL_DMA_Start_IT+0x46a>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	f040 820a 	bne.w	8006620 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a68      	ldr	r2, [pc, #416]	; (80063c0 <HAL_DMA_Start_IT+0x1f4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d04a      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a66      	ldr	r2, [pc, #408]	; (80063c4 <HAL_DMA_Start_IT+0x1f8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d045      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a65      	ldr	r2, [pc, #404]	; (80063c8 <HAL_DMA_Start_IT+0x1fc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d040      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a63      	ldr	r2, [pc, #396]	; (80063cc <HAL_DMA_Start_IT+0x200>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d03b      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a62      	ldr	r2, [pc, #392]	; (80063d0 <HAL_DMA_Start_IT+0x204>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d036      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a60      	ldr	r2, [pc, #384]	; (80063d4 <HAL_DMA_Start_IT+0x208>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d031      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a5f      	ldr	r2, [pc, #380]	; (80063d8 <HAL_DMA_Start_IT+0x20c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d02c      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a5d      	ldr	r2, [pc, #372]	; (80063dc <HAL_DMA_Start_IT+0x210>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d027      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a5c      	ldr	r2, [pc, #368]	; (80063e0 <HAL_DMA_Start_IT+0x214>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d022      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a5a      	ldr	r2, [pc, #360]	; (80063e4 <HAL_DMA_Start_IT+0x218>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d01d      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a59      	ldr	r2, [pc, #356]	; (80063e8 <HAL_DMA_Start_IT+0x21c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d018      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a57      	ldr	r2, [pc, #348]	; (80063ec <HAL_DMA_Start_IT+0x220>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a56      	ldr	r2, [pc, #344]	; (80063f0 <HAL_DMA_Start_IT+0x224>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00e      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a54      	ldr	r2, [pc, #336]	; (80063f4 <HAL_DMA_Start_IT+0x228>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d009      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a53      	ldr	r2, [pc, #332]	; (80063f8 <HAL_DMA_Start_IT+0x22c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d004      	beq.n	80062ba <HAL_DMA_Start_IT+0xee>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a51      	ldr	r2, [pc, #324]	; (80063fc <HAL_DMA_Start_IT+0x230>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d108      	bne.n	80062cc <HAL_DMA_Start_IT+0x100>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0201 	bic.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	e007      	b.n	80062dc <HAL_DMA_Start_IT+0x110>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0201 	bic.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f001 f906 	bl	80074f4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a34      	ldr	r2, [pc, #208]	; (80063c0 <HAL_DMA_Start_IT+0x1f4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d04a      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a33      	ldr	r2, [pc, #204]	; (80063c4 <HAL_DMA_Start_IT+0x1f8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d045      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a31      	ldr	r2, [pc, #196]	; (80063c8 <HAL_DMA_Start_IT+0x1fc>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d040      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a30      	ldr	r2, [pc, #192]	; (80063cc <HAL_DMA_Start_IT+0x200>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d03b      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a2e      	ldr	r2, [pc, #184]	; (80063d0 <HAL_DMA_Start_IT+0x204>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d036      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a2d      	ldr	r2, [pc, #180]	; (80063d4 <HAL_DMA_Start_IT+0x208>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d031      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a2b      	ldr	r2, [pc, #172]	; (80063d8 <HAL_DMA_Start_IT+0x20c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d02c      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a2a      	ldr	r2, [pc, #168]	; (80063dc <HAL_DMA_Start_IT+0x210>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d027      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a28      	ldr	r2, [pc, #160]	; (80063e0 <HAL_DMA_Start_IT+0x214>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d022      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a27      	ldr	r2, [pc, #156]	; (80063e4 <HAL_DMA_Start_IT+0x218>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d01d      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a25      	ldr	r2, [pc, #148]	; (80063e8 <HAL_DMA_Start_IT+0x21c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d018      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a24      	ldr	r2, [pc, #144]	; (80063ec <HAL_DMA_Start_IT+0x220>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d013      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a22      	ldr	r2, [pc, #136]	; (80063f0 <HAL_DMA_Start_IT+0x224>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00e      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <HAL_DMA_Start_IT+0x228>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d009      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1f      	ldr	r2, [pc, #124]	; (80063f8 <HAL_DMA_Start_IT+0x22c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_DMA_Start_IT+0x1bc>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <HAL_DMA_Start_IT+0x230>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d101      	bne.n	800638c <HAL_DMA_Start_IT+0x1c0>
 8006388:	2301      	movs	r3, #1
 800638a:	e000      	b.n	800638e <HAL_DMA_Start_IT+0x1c2>
 800638c:	2300      	movs	r3, #0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d036      	beq.n	8006400 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f023 021e 	bic.w	r2, r3, #30
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f042 0216 	orr.w	r2, r2, #22
 80063a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d03e      	beq.n	800642c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0208 	orr.w	r2, r2, #8
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e035      	b.n	800642c <HAL_DMA_Start_IT+0x260>
 80063c0:	40020010 	.word	0x40020010
 80063c4:	40020028 	.word	0x40020028
 80063c8:	40020040 	.word	0x40020040
 80063cc:	40020058 	.word	0x40020058
 80063d0:	40020070 	.word	0x40020070
 80063d4:	40020088 	.word	0x40020088
 80063d8:	400200a0 	.word	0x400200a0
 80063dc:	400200b8 	.word	0x400200b8
 80063e0:	40020410 	.word	0x40020410
 80063e4:	40020428 	.word	0x40020428
 80063e8:	40020440 	.word	0x40020440
 80063ec:	40020458 	.word	0x40020458
 80063f0:	40020470 	.word	0x40020470
 80063f4:	40020488 	.word	0x40020488
 80063f8:	400204a0 	.word	0x400204a0
 80063fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f023 020e 	bic.w	r2, r3, #14
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 020a 	orr.w	r2, r2, #10
 8006412:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0204 	orr.w	r2, r2, #4
 800642a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a83      	ldr	r2, [pc, #524]	; (8006640 <HAL_DMA_Start_IT+0x474>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d072      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a82      	ldr	r2, [pc, #520]	; (8006644 <HAL_DMA_Start_IT+0x478>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d06d      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a80      	ldr	r2, [pc, #512]	; (8006648 <HAL_DMA_Start_IT+0x47c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d068      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a7f      	ldr	r2, [pc, #508]	; (800664c <HAL_DMA_Start_IT+0x480>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d063      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a7d      	ldr	r2, [pc, #500]	; (8006650 <HAL_DMA_Start_IT+0x484>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d05e      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a7c      	ldr	r2, [pc, #496]	; (8006654 <HAL_DMA_Start_IT+0x488>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d059      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a7a      	ldr	r2, [pc, #488]	; (8006658 <HAL_DMA_Start_IT+0x48c>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d054      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a79      	ldr	r2, [pc, #484]	; (800665c <HAL_DMA_Start_IT+0x490>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d04f      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a77      	ldr	r2, [pc, #476]	; (8006660 <HAL_DMA_Start_IT+0x494>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d04a      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a76      	ldr	r2, [pc, #472]	; (8006664 <HAL_DMA_Start_IT+0x498>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d045      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a74      	ldr	r2, [pc, #464]	; (8006668 <HAL_DMA_Start_IT+0x49c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d040      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a73      	ldr	r2, [pc, #460]	; (800666c <HAL_DMA_Start_IT+0x4a0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d03b      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a71      	ldr	r2, [pc, #452]	; (8006670 <HAL_DMA_Start_IT+0x4a4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d036      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a70      	ldr	r2, [pc, #448]	; (8006674 <HAL_DMA_Start_IT+0x4a8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d031      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a6e      	ldr	r2, [pc, #440]	; (8006678 <HAL_DMA_Start_IT+0x4ac>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d02c      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a6d      	ldr	r2, [pc, #436]	; (800667c <HAL_DMA_Start_IT+0x4b0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d027      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a6b      	ldr	r2, [pc, #428]	; (8006680 <HAL_DMA_Start_IT+0x4b4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d022      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a6a      	ldr	r2, [pc, #424]	; (8006684 <HAL_DMA_Start_IT+0x4b8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d01d      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a68      	ldr	r2, [pc, #416]	; (8006688 <HAL_DMA_Start_IT+0x4bc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d018      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a67      	ldr	r2, [pc, #412]	; (800668c <HAL_DMA_Start_IT+0x4c0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d013      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a65      	ldr	r2, [pc, #404]	; (8006690 <HAL_DMA_Start_IT+0x4c4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00e      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a64      	ldr	r2, [pc, #400]	; (8006694 <HAL_DMA_Start_IT+0x4c8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d009      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a62      	ldr	r2, [pc, #392]	; (8006698 <HAL_DMA_Start_IT+0x4cc>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d004      	beq.n	800651c <HAL_DMA_Start_IT+0x350>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a61      	ldr	r2, [pc, #388]	; (800669c <HAL_DMA_Start_IT+0x4d0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d101      	bne.n	8006520 <HAL_DMA_Start_IT+0x354>
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <HAL_DMA_Start_IT+0x356>
 8006520:	2300      	movs	r3, #0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01a      	beq.n	800655c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006542:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800655a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a37      	ldr	r2, [pc, #220]	; (8006640 <HAL_DMA_Start_IT+0x474>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d04a      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a36      	ldr	r2, [pc, #216]	; (8006644 <HAL_DMA_Start_IT+0x478>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d045      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a34      	ldr	r2, [pc, #208]	; (8006648 <HAL_DMA_Start_IT+0x47c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d040      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a33      	ldr	r2, [pc, #204]	; (800664c <HAL_DMA_Start_IT+0x480>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d03b      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a31      	ldr	r2, [pc, #196]	; (8006650 <HAL_DMA_Start_IT+0x484>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d036      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a30      	ldr	r2, [pc, #192]	; (8006654 <HAL_DMA_Start_IT+0x488>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d031      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a2e      	ldr	r2, [pc, #184]	; (8006658 <HAL_DMA_Start_IT+0x48c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d02c      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a2d      	ldr	r2, [pc, #180]	; (800665c <HAL_DMA_Start_IT+0x490>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d027      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a2b      	ldr	r2, [pc, #172]	; (8006660 <HAL_DMA_Start_IT+0x494>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d022      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a2a      	ldr	r2, [pc, #168]	; (8006664 <HAL_DMA_Start_IT+0x498>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d01d      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a28      	ldr	r2, [pc, #160]	; (8006668 <HAL_DMA_Start_IT+0x49c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d018      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a27      	ldr	r2, [pc, #156]	; (800666c <HAL_DMA_Start_IT+0x4a0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d013      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a25      	ldr	r2, [pc, #148]	; (8006670 <HAL_DMA_Start_IT+0x4a4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00e      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a24      	ldr	r2, [pc, #144]	; (8006674 <HAL_DMA_Start_IT+0x4a8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d009      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a22      	ldr	r2, [pc, #136]	; (8006678 <HAL_DMA_Start_IT+0x4ac>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d004      	beq.n	80065fc <HAL_DMA_Start_IT+0x430>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a21      	ldr	r2, [pc, #132]	; (800667c <HAL_DMA_Start_IT+0x4b0>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d108      	bne.n	800660e <HAL_DMA_Start_IT+0x442>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0201 	orr.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	e012      	b.n	8006634 <HAL_DMA_Start_IT+0x468>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0201 	orr.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	e009      	b.n	8006634 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800662e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006634:	7dfb      	ldrb	r3, [r7, #23]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40020010 	.word	0x40020010
 8006644:	40020028 	.word	0x40020028
 8006648:	40020040 	.word	0x40020040
 800664c:	40020058 	.word	0x40020058
 8006650:	40020070 	.word	0x40020070
 8006654:	40020088 	.word	0x40020088
 8006658:	400200a0 	.word	0x400200a0
 800665c:	400200b8 	.word	0x400200b8
 8006660:	40020410 	.word	0x40020410
 8006664:	40020428 	.word	0x40020428
 8006668:	40020440 	.word	0x40020440
 800666c:	40020458 	.word	0x40020458
 8006670:	40020470 	.word	0x40020470
 8006674:	40020488 	.word	0x40020488
 8006678:	400204a0 	.word	0x400204a0
 800667c:	400204b8 	.word	0x400204b8
 8006680:	58025408 	.word	0x58025408
 8006684:	5802541c 	.word	0x5802541c
 8006688:	58025430 	.word	0x58025430
 800668c:	58025444 	.word	0x58025444
 8006690:	58025458 	.word	0x58025458
 8006694:	5802546c 	.word	0x5802546c
 8006698:	58025480 	.word	0x58025480
 800669c:	58025494 	.word	0x58025494

080066a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08a      	sub	sp, #40	; 0x28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80066ac:	4b67      	ldr	r3, [pc, #412]	; (800684c <HAL_DMA_IRQHandler+0x1ac>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a67      	ldr	r2, [pc, #412]	; (8006850 <HAL_DMA_IRQHandler+0x1b0>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	0a9b      	lsrs	r3, r3, #10
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a5f      	ldr	r2, [pc, #380]	; (8006854 <HAL_DMA_IRQHandler+0x1b4>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d04a      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a5d      	ldr	r2, [pc, #372]	; (8006858 <HAL_DMA_IRQHandler+0x1b8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d045      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a5c      	ldr	r2, [pc, #368]	; (800685c <HAL_DMA_IRQHandler+0x1bc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d040      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a5a      	ldr	r2, [pc, #360]	; (8006860 <HAL_DMA_IRQHandler+0x1c0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d03b      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a59      	ldr	r2, [pc, #356]	; (8006864 <HAL_DMA_IRQHandler+0x1c4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d036      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a57      	ldr	r2, [pc, #348]	; (8006868 <HAL_DMA_IRQHandler+0x1c8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d031      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a56      	ldr	r2, [pc, #344]	; (800686c <HAL_DMA_IRQHandler+0x1cc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d02c      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a54      	ldr	r2, [pc, #336]	; (8006870 <HAL_DMA_IRQHandler+0x1d0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d027      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a53      	ldr	r2, [pc, #332]	; (8006874 <HAL_DMA_IRQHandler+0x1d4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d022      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a51      	ldr	r2, [pc, #324]	; (8006878 <HAL_DMA_IRQHandler+0x1d8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d01d      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a50      	ldr	r2, [pc, #320]	; (800687c <HAL_DMA_IRQHandler+0x1dc>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d018      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a4e      	ldr	r2, [pc, #312]	; (8006880 <HAL_DMA_IRQHandler+0x1e0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d013      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a4d      	ldr	r2, [pc, #308]	; (8006884 <HAL_DMA_IRQHandler+0x1e4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00e      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a4b      	ldr	r2, [pc, #300]	; (8006888 <HAL_DMA_IRQHandler+0x1e8>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d009      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a4a      	ldr	r2, [pc, #296]	; (800688c <HAL_DMA_IRQHandler+0x1ec>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d004      	beq.n	8006772 <HAL_DMA_IRQHandler+0xd2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a48      	ldr	r2, [pc, #288]	; (8006890 <HAL_DMA_IRQHandler+0x1f0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d101      	bne.n	8006776 <HAL_DMA_IRQHandler+0xd6>
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <HAL_DMA_IRQHandler+0xd8>
 8006776:	2300      	movs	r3, #0
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 842b 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006782:	f003 031f 	and.w	r3, r3, #31
 8006786:	2208      	movs	r2, #8
 8006788:	409a      	lsls	r2, r3
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	4013      	ands	r3, r2
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80a2 	beq.w	80068d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a2e      	ldr	r2, [pc, #184]	; (8006854 <HAL_DMA_IRQHandler+0x1b4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d04a      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a2d      	ldr	r2, [pc, #180]	; (8006858 <HAL_DMA_IRQHandler+0x1b8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d045      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a2b      	ldr	r2, [pc, #172]	; (800685c <HAL_DMA_IRQHandler+0x1bc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d040      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a2a      	ldr	r2, [pc, #168]	; (8006860 <HAL_DMA_IRQHandler+0x1c0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d03b      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a28      	ldr	r2, [pc, #160]	; (8006864 <HAL_DMA_IRQHandler+0x1c4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d036      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a27      	ldr	r2, [pc, #156]	; (8006868 <HAL_DMA_IRQHandler+0x1c8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d031      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a25      	ldr	r2, [pc, #148]	; (800686c <HAL_DMA_IRQHandler+0x1cc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d02c      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a24      	ldr	r2, [pc, #144]	; (8006870 <HAL_DMA_IRQHandler+0x1d0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d027      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a22      	ldr	r2, [pc, #136]	; (8006874 <HAL_DMA_IRQHandler+0x1d4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d022      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a21      	ldr	r2, [pc, #132]	; (8006878 <HAL_DMA_IRQHandler+0x1d8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d01d      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1f      	ldr	r2, [pc, #124]	; (800687c <HAL_DMA_IRQHandler+0x1dc>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d018      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a1e      	ldr	r2, [pc, #120]	; (8006880 <HAL_DMA_IRQHandler+0x1e0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d013      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a1c      	ldr	r2, [pc, #112]	; (8006884 <HAL_DMA_IRQHandler+0x1e4>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00e      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a1b      	ldr	r2, [pc, #108]	; (8006888 <HAL_DMA_IRQHandler+0x1e8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d009      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a19      	ldr	r2, [pc, #100]	; (800688c <HAL_DMA_IRQHandler+0x1ec>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d004      	beq.n	8006834 <HAL_DMA_IRQHandler+0x194>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a18      	ldr	r2, [pc, #96]	; (8006890 <HAL_DMA_IRQHandler+0x1f0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d12f      	bne.n	8006894 <HAL_DMA_IRQHandler+0x1f4>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	2b00      	cmp	r3, #0
 8006840:	bf14      	ite	ne
 8006842:	2301      	movne	r3, #1
 8006844:	2300      	moveq	r3, #0
 8006846:	b2db      	uxtb	r3, r3
 8006848:	e02e      	b.n	80068a8 <HAL_DMA_IRQHandler+0x208>
 800684a:	bf00      	nop
 800684c:	24000010 	.word	0x24000010
 8006850:	1b4e81b5 	.word	0x1b4e81b5
 8006854:	40020010 	.word	0x40020010
 8006858:	40020028 	.word	0x40020028
 800685c:	40020040 	.word	0x40020040
 8006860:	40020058 	.word	0x40020058
 8006864:	40020070 	.word	0x40020070
 8006868:	40020088 	.word	0x40020088
 800686c:	400200a0 	.word	0x400200a0
 8006870:	400200b8 	.word	0x400200b8
 8006874:	40020410 	.word	0x40020410
 8006878:	40020428 	.word	0x40020428
 800687c:	40020440 	.word	0x40020440
 8006880:	40020458 	.word	0x40020458
 8006884:	40020470 	.word	0x40020470
 8006888:	40020488 	.word	0x40020488
 800688c:	400204a0 	.word	0x400204a0
 8006890:	400204b8 	.word	0x400204b8
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bf14      	ite	ne
 80068a2:	2301      	movne	r3, #1
 80068a4:	2300      	moveq	r3, #0
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d015      	beq.n	80068d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0204 	bic.w	r2, r2, #4
 80068ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c0:	f003 031f 	and.w	r3, r3, #31
 80068c4:	2208      	movs	r2, #8
 80068c6:	409a      	lsls	r2, r3
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d0:	f043 0201 	orr.w	r2, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068dc:	f003 031f 	and.w	r3, r3, #31
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	fa22 f303 	lsr.w	r3, r2, r3
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d06e      	beq.n	80069cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a69      	ldr	r2, [pc, #420]	; (8006a98 <HAL_DMA_IRQHandler+0x3f8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d04a      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a67      	ldr	r2, [pc, #412]	; (8006a9c <HAL_DMA_IRQHandler+0x3fc>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d045      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a66      	ldr	r2, [pc, #408]	; (8006aa0 <HAL_DMA_IRQHandler+0x400>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d040      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a64      	ldr	r2, [pc, #400]	; (8006aa4 <HAL_DMA_IRQHandler+0x404>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d03b      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a63      	ldr	r2, [pc, #396]	; (8006aa8 <HAL_DMA_IRQHandler+0x408>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d036      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a61      	ldr	r2, [pc, #388]	; (8006aac <HAL_DMA_IRQHandler+0x40c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d031      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a60      	ldr	r2, [pc, #384]	; (8006ab0 <HAL_DMA_IRQHandler+0x410>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d02c      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a5e      	ldr	r2, [pc, #376]	; (8006ab4 <HAL_DMA_IRQHandler+0x414>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d027      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a5d      	ldr	r2, [pc, #372]	; (8006ab8 <HAL_DMA_IRQHandler+0x418>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d022      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a5b      	ldr	r2, [pc, #364]	; (8006abc <HAL_DMA_IRQHandler+0x41c>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d01d      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a5a      	ldr	r2, [pc, #360]	; (8006ac0 <HAL_DMA_IRQHandler+0x420>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d018      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a58      	ldr	r2, [pc, #352]	; (8006ac4 <HAL_DMA_IRQHandler+0x424>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d013      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a57      	ldr	r2, [pc, #348]	; (8006ac8 <HAL_DMA_IRQHandler+0x428>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00e      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a55      	ldr	r2, [pc, #340]	; (8006acc <HAL_DMA_IRQHandler+0x42c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d009      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a54      	ldr	r2, [pc, #336]	; (8006ad0 <HAL_DMA_IRQHandler+0x430>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d004      	beq.n	800698e <HAL_DMA_IRQHandler+0x2ee>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a52      	ldr	r2, [pc, #328]	; (8006ad4 <HAL_DMA_IRQHandler+0x434>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d10a      	bne.n	80069a4 <HAL_DMA_IRQHandler+0x304>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006998:	2b00      	cmp	r3, #0
 800699a:	bf14      	ite	ne
 800699c:	2301      	movne	r3, #1
 800699e:	2300      	moveq	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	e003      	b.n	80069ac <HAL_DMA_IRQHandler+0x30c>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2300      	movs	r3, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00d      	beq.n	80069cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	2201      	movs	r2, #1
 80069ba:	409a      	lsls	r2, r3
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c4:	f043 0202 	orr.w	r2, r3, #2
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d0:	f003 031f 	and.w	r3, r3, #31
 80069d4:	2204      	movs	r2, #4
 80069d6:	409a      	lsls	r2, r3
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	4013      	ands	r3, r2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 808f 	beq.w	8006b00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a2c      	ldr	r2, [pc, #176]	; (8006a98 <HAL_DMA_IRQHandler+0x3f8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d04a      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a2a      	ldr	r2, [pc, #168]	; (8006a9c <HAL_DMA_IRQHandler+0x3fc>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d045      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a29      	ldr	r2, [pc, #164]	; (8006aa0 <HAL_DMA_IRQHandler+0x400>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d040      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a27      	ldr	r2, [pc, #156]	; (8006aa4 <HAL_DMA_IRQHandler+0x404>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d03b      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a26      	ldr	r2, [pc, #152]	; (8006aa8 <HAL_DMA_IRQHandler+0x408>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d036      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a24      	ldr	r2, [pc, #144]	; (8006aac <HAL_DMA_IRQHandler+0x40c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d031      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a23      	ldr	r2, [pc, #140]	; (8006ab0 <HAL_DMA_IRQHandler+0x410>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d02c      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a21      	ldr	r2, [pc, #132]	; (8006ab4 <HAL_DMA_IRQHandler+0x414>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d027      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a20      	ldr	r2, [pc, #128]	; (8006ab8 <HAL_DMA_IRQHandler+0x418>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d022      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a1e      	ldr	r2, [pc, #120]	; (8006abc <HAL_DMA_IRQHandler+0x41c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d01d      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a1d      	ldr	r2, [pc, #116]	; (8006ac0 <HAL_DMA_IRQHandler+0x420>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d018      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a1b      	ldr	r2, [pc, #108]	; (8006ac4 <HAL_DMA_IRQHandler+0x424>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d013      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a1a      	ldr	r2, [pc, #104]	; (8006ac8 <HAL_DMA_IRQHandler+0x428>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00e      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a18      	ldr	r2, [pc, #96]	; (8006acc <HAL_DMA_IRQHandler+0x42c>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d009      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a17      	ldr	r2, [pc, #92]	; (8006ad0 <HAL_DMA_IRQHandler+0x430>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d004      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x3e2>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <HAL_DMA_IRQHandler+0x434>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d12a      	bne.n	8006ad8 <HAL_DMA_IRQHandler+0x438>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	bf14      	ite	ne
 8006a90:	2301      	movne	r3, #1
 8006a92:	2300      	moveq	r3, #0
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	e023      	b.n	8006ae0 <HAL_DMA_IRQHandler+0x440>
 8006a98:	40020010 	.word	0x40020010
 8006a9c:	40020028 	.word	0x40020028
 8006aa0:	40020040 	.word	0x40020040
 8006aa4:	40020058 	.word	0x40020058
 8006aa8:	40020070 	.word	0x40020070
 8006aac:	40020088 	.word	0x40020088
 8006ab0:	400200a0 	.word	0x400200a0
 8006ab4:	400200b8 	.word	0x400200b8
 8006ab8:	40020410 	.word	0x40020410
 8006abc:	40020428 	.word	0x40020428
 8006ac0:	40020440 	.word	0x40020440
 8006ac4:	40020458 	.word	0x40020458
 8006ac8:	40020470 	.word	0x40020470
 8006acc:	40020488 	.word	0x40020488
 8006ad0:	400204a0 	.word	0x400204a0
 8006ad4:	400204b8 	.word	0x400204b8
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00d      	beq.n	8006b00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae8:	f003 031f 	and.w	r3, r3, #31
 8006aec:	2204      	movs	r2, #4
 8006aee:	409a      	lsls	r2, r3
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af8:	f043 0204 	orr.w	r2, r3, #4
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b04:	f003 031f 	and.w	r3, r3, #31
 8006b08:	2210      	movs	r2, #16
 8006b0a:	409a      	lsls	r2, r3
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80a6 	beq.w	8006c62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a85      	ldr	r2, [pc, #532]	; (8006d30 <HAL_DMA_IRQHandler+0x690>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d04a      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a83      	ldr	r2, [pc, #524]	; (8006d34 <HAL_DMA_IRQHandler+0x694>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d045      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a82      	ldr	r2, [pc, #520]	; (8006d38 <HAL_DMA_IRQHandler+0x698>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d040      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a80      	ldr	r2, [pc, #512]	; (8006d3c <HAL_DMA_IRQHandler+0x69c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d03b      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a7f      	ldr	r2, [pc, #508]	; (8006d40 <HAL_DMA_IRQHandler+0x6a0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d036      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a7d      	ldr	r2, [pc, #500]	; (8006d44 <HAL_DMA_IRQHandler+0x6a4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d031      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a7c      	ldr	r2, [pc, #496]	; (8006d48 <HAL_DMA_IRQHandler+0x6a8>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d02c      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a7a      	ldr	r2, [pc, #488]	; (8006d4c <HAL_DMA_IRQHandler+0x6ac>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d027      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a79      	ldr	r2, [pc, #484]	; (8006d50 <HAL_DMA_IRQHandler+0x6b0>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d022      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a77      	ldr	r2, [pc, #476]	; (8006d54 <HAL_DMA_IRQHandler+0x6b4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d01d      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a76      	ldr	r2, [pc, #472]	; (8006d58 <HAL_DMA_IRQHandler+0x6b8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d018      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a74      	ldr	r2, [pc, #464]	; (8006d5c <HAL_DMA_IRQHandler+0x6bc>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a73      	ldr	r2, [pc, #460]	; (8006d60 <HAL_DMA_IRQHandler+0x6c0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00e      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a71      	ldr	r2, [pc, #452]	; (8006d64 <HAL_DMA_IRQHandler+0x6c4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d009      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a70      	ldr	r2, [pc, #448]	; (8006d68 <HAL_DMA_IRQHandler+0x6c8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d004      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x516>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a6e      	ldr	r2, [pc, #440]	; (8006d6c <HAL_DMA_IRQHandler+0x6cc>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d10a      	bne.n	8006bcc <HAL_DMA_IRQHandler+0x52c>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	bf14      	ite	ne
 8006bc4:	2301      	movne	r3, #1
 8006bc6:	2300      	moveq	r3, #0
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	e009      	b.n	8006be0 <HAL_DMA_IRQHandler+0x540>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0304 	and.w	r3, r3, #4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bf14      	ite	ne
 8006bda:	2301      	movne	r3, #1
 8006bdc:	2300      	moveq	r3, #0
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d03e      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	2210      	movs	r2, #16
 8006bee:	409a      	lsls	r2, r3
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d018      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d108      	bne.n	8006c22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d024      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	4798      	blx	r3
 8006c20:	e01f      	b.n	8006c62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d01b      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	4798      	blx	r3
 8006c32:	e016      	b.n	8006c62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d107      	bne.n	8006c52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0208 	bic.w	r2, r2, #8
 8006c50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c66:	f003 031f 	and.w	r3, r3, #31
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	409a      	lsls	r2, r3
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 8110 	beq.w	8006e98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a2c      	ldr	r2, [pc, #176]	; (8006d30 <HAL_DMA_IRQHandler+0x690>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d04a      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a2b      	ldr	r2, [pc, #172]	; (8006d34 <HAL_DMA_IRQHandler+0x694>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d045      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a29      	ldr	r2, [pc, #164]	; (8006d38 <HAL_DMA_IRQHandler+0x698>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d040      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a28      	ldr	r2, [pc, #160]	; (8006d3c <HAL_DMA_IRQHandler+0x69c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d03b      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a26      	ldr	r2, [pc, #152]	; (8006d40 <HAL_DMA_IRQHandler+0x6a0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d036      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a25      	ldr	r2, [pc, #148]	; (8006d44 <HAL_DMA_IRQHandler+0x6a4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d031      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a23      	ldr	r2, [pc, #140]	; (8006d48 <HAL_DMA_IRQHandler+0x6a8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d02c      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a22      	ldr	r2, [pc, #136]	; (8006d4c <HAL_DMA_IRQHandler+0x6ac>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d027      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a20      	ldr	r2, [pc, #128]	; (8006d50 <HAL_DMA_IRQHandler+0x6b0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d022      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1f      	ldr	r2, [pc, #124]	; (8006d54 <HAL_DMA_IRQHandler+0x6b4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d01d      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1d      	ldr	r2, [pc, #116]	; (8006d58 <HAL_DMA_IRQHandler+0x6b8>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d018      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1c      	ldr	r2, [pc, #112]	; (8006d5c <HAL_DMA_IRQHandler+0x6bc>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d013      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a1a      	ldr	r2, [pc, #104]	; (8006d60 <HAL_DMA_IRQHandler+0x6c0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00e      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a19      	ldr	r2, [pc, #100]	; (8006d64 <HAL_DMA_IRQHandler+0x6c4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d009      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a17      	ldr	r2, [pc, #92]	; (8006d68 <HAL_DMA_IRQHandler+0x6c8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d004      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x678>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a16      	ldr	r2, [pc, #88]	; (8006d6c <HAL_DMA_IRQHandler+0x6cc>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d12b      	bne.n	8006d70 <HAL_DMA_IRQHandler+0x6d0>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0310 	and.w	r3, r3, #16
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	bf14      	ite	ne
 8006d26:	2301      	movne	r3, #1
 8006d28:	2300      	moveq	r3, #0
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	e02a      	b.n	8006d84 <HAL_DMA_IRQHandler+0x6e4>
 8006d2e:	bf00      	nop
 8006d30:	40020010 	.word	0x40020010
 8006d34:	40020028 	.word	0x40020028
 8006d38:	40020040 	.word	0x40020040
 8006d3c:	40020058 	.word	0x40020058
 8006d40:	40020070 	.word	0x40020070
 8006d44:	40020088 	.word	0x40020088
 8006d48:	400200a0 	.word	0x400200a0
 8006d4c:	400200b8 	.word	0x400200b8
 8006d50:	40020410 	.word	0x40020410
 8006d54:	40020428 	.word	0x40020428
 8006d58:	40020440 	.word	0x40020440
 8006d5c:	40020458 	.word	0x40020458
 8006d60:	40020470 	.word	0x40020470
 8006d64:	40020488 	.word	0x40020488
 8006d68:	400204a0 	.word	0x400204a0
 8006d6c:	400204b8 	.word	0x400204b8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bf14      	ite	ne
 8006d7e:	2301      	movne	r3, #1
 8006d80:	2300      	moveq	r3, #0
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 8087 	beq.w	8006e98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8e:	f003 031f 	and.w	r3, r3, #31
 8006d92:	2220      	movs	r2, #32
 8006d94:	409a      	lsls	r2, r3
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d139      	bne.n	8006e1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0216 	bic.w	r2, r2, #22
 8006db4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	695a      	ldr	r2, [r3, #20]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dc4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d103      	bne.n	8006dd6 <HAL_DMA_IRQHandler+0x736>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d007      	beq.n	8006de6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0208 	bic.w	r2, r2, #8
 8006de4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dea:	f003 031f 	and.w	r3, r3, #31
 8006dee:	223f      	movs	r2, #63	; 0x3f
 8006df0:	409a      	lsls	r2, r3
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 834a 	beq.w	80074a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	4798      	blx	r3
          }
          return;
 8006e18:	e344      	b.n	80074a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d018      	beq.n	8006e5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d108      	bne.n	8006e48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d02c      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	4798      	blx	r3
 8006e46:	e027      	b.n	8006e98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d023      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	4798      	blx	r3
 8006e58:	e01e      	b.n	8006e98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10f      	bne.n	8006e88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0210 	bic.w	r2, r2, #16
 8006e76:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8306 	beq.w	80074ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 8088 	beq.w	8006fc0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2204      	movs	r2, #4
 8006eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a7a      	ldr	r2, [pc, #488]	; (80070a8 <HAL_DMA_IRQHandler+0xa08>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d04a      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a79      	ldr	r2, [pc, #484]	; (80070ac <HAL_DMA_IRQHandler+0xa0c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d045      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a77      	ldr	r2, [pc, #476]	; (80070b0 <HAL_DMA_IRQHandler+0xa10>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d040      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a76      	ldr	r2, [pc, #472]	; (80070b4 <HAL_DMA_IRQHandler+0xa14>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d03b      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a74      	ldr	r2, [pc, #464]	; (80070b8 <HAL_DMA_IRQHandler+0xa18>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d036      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a73      	ldr	r2, [pc, #460]	; (80070bc <HAL_DMA_IRQHandler+0xa1c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d031      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a71      	ldr	r2, [pc, #452]	; (80070c0 <HAL_DMA_IRQHandler+0xa20>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d02c      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a70      	ldr	r2, [pc, #448]	; (80070c4 <HAL_DMA_IRQHandler+0xa24>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d027      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a6e      	ldr	r2, [pc, #440]	; (80070c8 <HAL_DMA_IRQHandler+0xa28>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d022      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a6d      	ldr	r2, [pc, #436]	; (80070cc <HAL_DMA_IRQHandler+0xa2c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d01d      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a6b      	ldr	r2, [pc, #428]	; (80070d0 <HAL_DMA_IRQHandler+0xa30>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d018      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a6a      	ldr	r2, [pc, #424]	; (80070d4 <HAL_DMA_IRQHandler+0xa34>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d013      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a68      	ldr	r2, [pc, #416]	; (80070d8 <HAL_DMA_IRQHandler+0xa38>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00e      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a67      	ldr	r2, [pc, #412]	; (80070dc <HAL_DMA_IRQHandler+0xa3c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d009      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a65      	ldr	r2, [pc, #404]	; (80070e0 <HAL_DMA_IRQHandler+0xa40>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d004      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x8b8>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a64      	ldr	r2, [pc, #400]	; (80070e4 <HAL_DMA_IRQHandler+0xa44>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d108      	bne.n	8006f6a <HAL_DMA_IRQHandler+0x8ca>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0201 	bic.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	e007      	b.n	8006f7a <HAL_DMA_IRQHandler+0x8da>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0201 	bic.w	r2, r2, #1
 8006f78:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d307      	bcc.n	8006f96 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1f2      	bne.n	8006f7a <HAL_DMA_IRQHandler+0x8da>
 8006f94:	e000      	b.n	8006f98 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006f96:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d004      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006fb6:	e003      	b.n	8006fc0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8272 	beq.w	80074ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	4798      	blx	r3
 8006fd2:	e26c      	b.n	80074ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a43      	ldr	r2, [pc, #268]	; (80070e8 <HAL_DMA_IRQHandler+0xa48>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d022      	beq.n	8007024 <HAL_DMA_IRQHandler+0x984>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a42      	ldr	r2, [pc, #264]	; (80070ec <HAL_DMA_IRQHandler+0xa4c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d01d      	beq.n	8007024 <HAL_DMA_IRQHandler+0x984>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a40      	ldr	r2, [pc, #256]	; (80070f0 <HAL_DMA_IRQHandler+0xa50>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d018      	beq.n	8007024 <HAL_DMA_IRQHandler+0x984>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a3f      	ldr	r2, [pc, #252]	; (80070f4 <HAL_DMA_IRQHandler+0xa54>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d013      	beq.n	8007024 <HAL_DMA_IRQHandler+0x984>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a3d      	ldr	r2, [pc, #244]	; (80070f8 <HAL_DMA_IRQHandler+0xa58>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00e      	beq.n	8007024 <HAL_DMA_IRQHandler+0x984>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a3c      	ldr	r2, [pc, #240]	; (80070fc <HAL_DMA_IRQHandler+0xa5c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d009      	beq.n	8007024 <HAL_DMA_IRQHandler+0x984>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a3a      	ldr	r2, [pc, #232]	; (8007100 <HAL_DMA_IRQHandler+0xa60>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d004      	beq.n	8007024 <HAL_DMA_IRQHandler+0x984>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a39      	ldr	r2, [pc, #228]	; (8007104 <HAL_DMA_IRQHandler+0xa64>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d101      	bne.n	8007028 <HAL_DMA_IRQHandler+0x988>
 8007024:	2301      	movs	r3, #1
 8007026:	e000      	b.n	800702a <HAL_DMA_IRQHandler+0x98a>
 8007028:	2300      	movs	r3, #0
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 823f 	beq.w	80074ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800703c:	f003 031f 	and.w	r3, r3, #31
 8007040:	2204      	movs	r2, #4
 8007042:	409a      	lsls	r2, r3
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	4013      	ands	r3, r2
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80cd 	beq.w	80071e8 <HAL_DMA_IRQHandler+0xb48>
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 80c7 	beq.w	80071e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	2204      	movs	r2, #4
 8007064:	409a      	lsls	r2, r3
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d049      	beq.n	8007108 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d109      	bne.n	8007092 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 8210 	beq.w	80074a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007090:	e20a      	b.n	80074a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 8206 	beq.w	80074a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070a4:	e200      	b.n	80074a8 <HAL_DMA_IRQHandler+0xe08>
 80070a6:	bf00      	nop
 80070a8:	40020010 	.word	0x40020010
 80070ac:	40020028 	.word	0x40020028
 80070b0:	40020040 	.word	0x40020040
 80070b4:	40020058 	.word	0x40020058
 80070b8:	40020070 	.word	0x40020070
 80070bc:	40020088 	.word	0x40020088
 80070c0:	400200a0 	.word	0x400200a0
 80070c4:	400200b8 	.word	0x400200b8
 80070c8:	40020410 	.word	0x40020410
 80070cc:	40020428 	.word	0x40020428
 80070d0:	40020440 	.word	0x40020440
 80070d4:	40020458 	.word	0x40020458
 80070d8:	40020470 	.word	0x40020470
 80070dc:	40020488 	.word	0x40020488
 80070e0:	400204a0 	.word	0x400204a0
 80070e4:	400204b8 	.word	0x400204b8
 80070e8:	58025408 	.word	0x58025408
 80070ec:	5802541c 	.word	0x5802541c
 80070f0:	58025430 	.word	0x58025430
 80070f4:	58025444 	.word	0x58025444
 80070f8:	58025458 	.word	0x58025458
 80070fc:	5802546c 	.word	0x5802546c
 8007100:	58025480 	.word	0x58025480
 8007104:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d160      	bne.n	80071d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a8c      	ldr	r2, [pc, #560]	; (8007348 <HAL_DMA_IRQHandler+0xca8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d04a      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a8a      	ldr	r2, [pc, #552]	; (800734c <HAL_DMA_IRQHandler+0xcac>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d045      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a89      	ldr	r2, [pc, #548]	; (8007350 <HAL_DMA_IRQHandler+0xcb0>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d040      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a87      	ldr	r2, [pc, #540]	; (8007354 <HAL_DMA_IRQHandler+0xcb4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d03b      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a86      	ldr	r2, [pc, #536]	; (8007358 <HAL_DMA_IRQHandler+0xcb8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d036      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a84      	ldr	r2, [pc, #528]	; (800735c <HAL_DMA_IRQHandler+0xcbc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d031      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a83      	ldr	r2, [pc, #524]	; (8007360 <HAL_DMA_IRQHandler+0xcc0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d02c      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a81      	ldr	r2, [pc, #516]	; (8007364 <HAL_DMA_IRQHandler+0xcc4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d027      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a80      	ldr	r2, [pc, #512]	; (8007368 <HAL_DMA_IRQHandler+0xcc8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d022      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a7e      	ldr	r2, [pc, #504]	; (800736c <HAL_DMA_IRQHandler+0xccc>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d01d      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a7d      	ldr	r2, [pc, #500]	; (8007370 <HAL_DMA_IRQHandler+0xcd0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d018      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a7b      	ldr	r2, [pc, #492]	; (8007374 <HAL_DMA_IRQHandler+0xcd4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d013      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a7a      	ldr	r2, [pc, #488]	; (8007378 <HAL_DMA_IRQHandler+0xcd8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00e      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a78      	ldr	r2, [pc, #480]	; (800737c <HAL_DMA_IRQHandler+0xcdc>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d009      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a77      	ldr	r2, [pc, #476]	; (8007380 <HAL_DMA_IRQHandler+0xce0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d004      	beq.n	80071b2 <HAL_DMA_IRQHandler+0xb12>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a75      	ldr	r2, [pc, #468]	; (8007384 <HAL_DMA_IRQHandler+0xce4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d108      	bne.n	80071c4 <HAL_DMA_IRQHandler+0xb24>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0208 	bic.w	r2, r2, #8
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	e007      	b.n	80071d4 <HAL_DMA_IRQHandler+0xb34>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0204 	bic.w	r2, r2, #4
 80071d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 8165 	beq.w	80074a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071e6:	e15f      	b.n	80074a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ec:	f003 031f 	and.w	r3, r3, #31
 80071f0:	2202      	movs	r2, #2
 80071f2:	409a      	lsls	r2, r3
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	4013      	ands	r3, r2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 80c5 	beq.w	8007388 <HAL_DMA_IRQHandler+0xce8>
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 80bf 	beq.w	8007388 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800720e:	f003 031f 	and.w	r3, r3, #31
 8007212:	2202      	movs	r2, #2
 8007214:	409a      	lsls	r2, r3
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d018      	beq.n	8007256 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d109      	bne.n	8007242 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 813a 	beq.w	80074ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007240:	e134      	b.n	80074ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 8130 	beq.w	80074ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007254:	e12a      	b.n	80074ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f003 0320 	and.w	r3, r3, #32
 800725c:	2b00      	cmp	r3, #0
 800725e:	d168      	bne.n	8007332 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a38      	ldr	r2, [pc, #224]	; (8007348 <HAL_DMA_IRQHandler+0xca8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d04a      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a37      	ldr	r2, [pc, #220]	; (800734c <HAL_DMA_IRQHandler+0xcac>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d045      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a35      	ldr	r2, [pc, #212]	; (8007350 <HAL_DMA_IRQHandler+0xcb0>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d040      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a34      	ldr	r2, [pc, #208]	; (8007354 <HAL_DMA_IRQHandler+0xcb4>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d03b      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a32      	ldr	r2, [pc, #200]	; (8007358 <HAL_DMA_IRQHandler+0xcb8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d036      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a31      	ldr	r2, [pc, #196]	; (800735c <HAL_DMA_IRQHandler+0xcbc>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d031      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a2f      	ldr	r2, [pc, #188]	; (8007360 <HAL_DMA_IRQHandler+0xcc0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d02c      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a2e      	ldr	r2, [pc, #184]	; (8007364 <HAL_DMA_IRQHandler+0xcc4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d027      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a2c      	ldr	r2, [pc, #176]	; (8007368 <HAL_DMA_IRQHandler+0xcc8>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d022      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a2b      	ldr	r2, [pc, #172]	; (800736c <HAL_DMA_IRQHandler+0xccc>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d01d      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a29      	ldr	r2, [pc, #164]	; (8007370 <HAL_DMA_IRQHandler+0xcd0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d018      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a28      	ldr	r2, [pc, #160]	; (8007374 <HAL_DMA_IRQHandler+0xcd4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d013      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a26      	ldr	r2, [pc, #152]	; (8007378 <HAL_DMA_IRQHandler+0xcd8>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00e      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a25      	ldr	r2, [pc, #148]	; (800737c <HAL_DMA_IRQHandler+0xcdc>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d009      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a23      	ldr	r2, [pc, #140]	; (8007380 <HAL_DMA_IRQHandler+0xce0>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d004      	beq.n	8007300 <HAL_DMA_IRQHandler+0xc60>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a22      	ldr	r2, [pc, #136]	; (8007384 <HAL_DMA_IRQHandler+0xce4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d108      	bne.n	8007312 <HAL_DMA_IRQHandler+0xc72>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0214 	bic.w	r2, r2, #20
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e007      	b.n	8007322 <HAL_DMA_IRQHandler+0xc82>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 020a 	bic.w	r2, r2, #10
 8007320:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 80b8 	beq.w	80074ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007344:	e0b2      	b.n	80074ac <HAL_DMA_IRQHandler+0xe0c>
 8007346:	bf00      	nop
 8007348:	40020010 	.word	0x40020010
 800734c:	40020028 	.word	0x40020028
 8007350:	40020040 	.word	0x40020040
 8007354:	40020058 	.word	0x40020058
 8007358:	40020070 	.word	0x40020070
 800735c:	40020088 	.word	0x40020088
 8007360:	400200a0 	.word	0x400200a0
 8007364:	400200b8 	.word	0x400200b8
 8007368:	40020410 	.word	0x40020410
 800736c:	40020428 	.word	0x40020428
 8007370:	40020440 	.word	0x40020440
 8007374:	40020458 	.word	0x40020458
 8007378:	40020470 	.word	0x40020470
 800737c:	40020488 	.word	0x40020488
 8007380:	400204a0 	.word	0x400204a0
 8007384:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	2208      	movs	r2, #8
 8007392:	409a      	lsls	r2, r3
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	4013      	ands	r3, r2
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 8088 	beq.w	80074ae <HAL_DMA_IRQHandler+0xe0e>
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8082 	beq.w	80074ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a41      	ldr	r2, [pc, #260]	; (80074b4 <HAL_DMA_IRQHandler+0xe14>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d04a      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a3f      	ldr	r2, [pc, #252]	; (80074b8 <HAL_DMA_IRQHandler+0xe18>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d045      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a3e      	ldr	r2, [pc, #248]	; (80074bc <HAL_DMA_IRQHandler+0xe1c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d040      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a3c      	ldr	r2, [pc, #240]	; (80074c0 <HAL_DMA_IRQHandler+0xe20>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d03b      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a3b      	ldr	r2, [pc, #236]	; (80074c4 <HAL_DMA_IRQHandler+0xe24>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d036      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a39      	ldr	r2, [pc, #228]	; (80074c8 <HAL_DMA_IRQHandler+0xe28>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d031      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a38      	ldr	r2, [pc, #224]	; (80074cc <HAL_DMA_IRQHandler+0xe2c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d02c      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a36      	ldr	r2, [pc, #216]	; (80074d0 <HAL_DMA_IRQHandler+0xe30>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d027      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a35      	ldr	r2, [pc, #212]	; (80074d4 <HAL_DMA_IRQHandler+0xe34>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d022      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a33      	ldr	r2, [pc, #204]	; (80074d8 <HAL_DMA_IRQHandler+0xe38>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d01d      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a32      	ldr	r2, [pc, #200]	; (80074dc <HAL_DMA_IRQHandler+0xe3c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d018      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a30      	ldr	r2, [pc, #192]	; (80074e0 <HAL_DMA_IRQHandler+0xe40>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d013      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a2f      	ldr	r2, [pc, #188]	; (80074e4 <HAL_DMA_IRQHandler+0xe44>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d00e      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a2d      	ldr	r2, [pc, #180]	; (80074e8 <HAL_DMA_IRQHandler+0xe48>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d009      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a2c      	ldr	r2, [pc, #176]	; (80074ec <HAL_DMA_IRQHandler+0xe4c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d004      	beq.n	800744a <HAL_DMA_IRQHandler+0xdaa>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a2a      	ldr	r2, [pc, #168]	; (80074f0 <HAL_DMA_IRQHandler+0xe50>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d108      	bne.n	800745c <HAL_DMA_IRQHandler+0xdbc>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 021c 	bic.w	r2, r2, #28
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	e007      	b.n	800746c <HAL_DMA_IRQHandler+0xdcc>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 020e 	bic.w	r2, r2, #14
 800746a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007470:	f003 031f 	and.w	r3, r3, #31
 8007474:	2201      	movs	r2, #1
 8007476:	409a      	lsls	r2, r3
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d009      	beq.n	80074ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	4798      	blx	r3
 80074a2:	e004      	b.n	80074ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80074a4:	bf00      	nop
 80074a6:	e002      	b.n	80074ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074a8:	bf00      	nop
 80074aa:	e000      	b.n	80074ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80074ae:	3728      	adds	r7, #40	; 0x28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	40020010 	.word	0x40020010
 80074b8:	40020028 	.word	0x40020028
 80074bc:	40020040 	.word	0x40020040
 80074c0:	40020058 	.word	0x40020058
 80074c4:	40020070 	.word	0x40020070
 80074c8:	40020088 	.word	0x40020088
 80074cc:	400200a0 	.word	0x400200a0
 80074d0:	400200b8 	.word	0x400200b8
 80074d4:	40020410 	.word	0x40020410
 80074d8:	40020428 	.word	0x40020428
 80074dc:	40020440 	.word	0x40020440
 80074e0:	40020458 	.word	0x40020458
 80074e4:	40020470 	.word	0x40020470
 80074e8:	40020488 	.word	0x40020488
 80074ec:	400204a0 	.word	0x400204a0
 80074f0:	400204b8 	.word	0x400204b8

080074f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007506:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800750c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a84      	ldr	r2, [pc, #528]	; (8007724 <DMA_SetConfig+0x230>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d072      	beq.n	80075fe <DMA_SetConfig+0x10a>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a82      	ldr	r2, [pc, #520]	; (8007728 <DMA_SetConfig+0x234>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d06d      	beq.n	80075fe <DMA_SetConfig+0x10a>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a81      	ldr	r2, [pc, #516]	; (800772c <DMA_SetConfig+0x238>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d068      	beq.n	80075fe <DMA_SetConfig+0x10a>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a7f      	ldr	r2, [pc, #508]	; (8007730 <DMA_SetConfig+0x23c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d063      	beq.n	80075fe <DMA_SetConfig+0x10a>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a7e      	ldr	r2, [pc, #504]	; (8007734 <DMA_SetConfig+0x240>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d05e      	beq.n	80075fe <DMA_SetConfig+0x10a>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a7c      	ldr	r2, [pc, #496]	; (8007738 <DMA_SetConfig+0x244>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d059      	beq.n	80075fe <DMA_SetConfig+0x10a>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a7b      	ldr	r2, [pc, #492]	; (800773c <DMA_SetConfig+0x248>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d054      	beq.n	80075fe <DMA_SetConfig+0x10a>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a79      	ldr	r2, [pc, #484]	; (8007740 <DMA_SetConfig+0x24c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d04f      	beq.n	80075fe <DMA_SetConfig+0x10a>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a78      	ldr	r2, [pc, #480]	; (8007744 <DMA_SetConfig+0x250>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d04a      	beq.n	80075fe <DMA_SetConfig+0x10a>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a76      	ldr	r2, [pc, #472]	; (8007748 <DMA_SetConfig+0x254>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d045      	beq.n	80075fe <DMA_SetConfig+0x10a>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a75      	ldr	r2, [pc, #468]	; (800774c <DMA_SetConfig+0x258>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d040      	beq.n	80075fe <DMA_SetConfig+0x10a>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a73      	ldr	r2, [pc, #460]	; (8007750 <DMA_SetConfig+0x25c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d03b      	beq.n	80075fe <DMA_SetConfig+0x10a>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a72      	ldr	r2, [pc, #456]	; (8007754 <DMA_SetConfig+0x260>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d036      	beq.n	80075fe <DMA_SetConfig+0x10a>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a70      	ldr	r2, [pc, #448]	; (8007758 <DMA_SetConfig+0x264>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d031      	beq.n	80075fe <DMA_SetConfig+0x10a>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a6f      	ldr	r2, [pc, #444]	; (800775c <DMA_SetConfig+0x268>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d02c      	beq.n	80075fe <DMA_SetConfig+0x10a>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a6d      	ldr	r2, [pc, #436]	; (8007760 <DMA_SetConfig+0x26c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d027      	beq.n	80075fe <DMA_SetConfig+0x10a>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a6c      	ldr	r2, [pc, #432]	; (8007764 <DMA_SetConfig+0x270>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d022      	beq.n	80075fe <DMA_SetConfig+0x10a>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a6a      	ldr	r2, [pc, #424]	; (8007768 <DMA_SetConfig+0x274>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d01d      	beq.n	80075fe <DMA_SetConfig+0x10a>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a69      	ldr	r2, [pc, #420]	; (800776c <DMA_SetConfig+0x278>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d018      	beq.n	80075fe <DMA_SetConfig+0x10a>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a67      	ldr	r2, [pc, #412]	; (8007770 <DMA_SetConfig+0x27c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d013      	beq.n	80075fe <DMA_SetConfig+0x10a>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a66      	ldr	r2, [pc, #408]	; (8007774 <DMA_SetConfig+0x280>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00e      	beq.n	80075fe <DMA_SetConfig+0x10a>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a64      	ldr	r2, [pc, #400]	; (8007778 <DMA_SetConfig+0x284>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d009      	beq.n	80075fe <DMA_SetConfig+0x10a>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a63      	ldr	r2, [pc, #396]	; (800777c <DMA_SetConfig+0x288>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d004      	beq.n	80075fe <DMA_SetConfig+0x10a>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a61      	ldr	r2, [pc, #388]	; (8007780 <DMA_SetConfig+0x28c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d101      	bne.n	8007602 <DMA_SetConfig+0x10e>
 80075fe:	2301      	movs	r3, #1
 8007600:	e000      	b.n	8007604 <DMA_SetConfig+0x110>
 8007602:	2300      	movs	r3, #0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00d      	beq.n	8007624 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007610:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d004      	beq.n	8007624 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007622:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a3e      	ldr	r2, [pc, #248]	; (8007724 <DMA_SetConfig+0x230>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d04a      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a3d      	ldr	r2, [pc, #244]	; (8007728 <DMA_SetConfig+0x234>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d045      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a3b      	ldr	r2, [pc, #236]	; (800772c <DMA_SetConfig+0x238>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d040      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a3a      	ldr	r2, [pc, #232]	; (8007730 <DMA_SetConfig+0x23c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d03b      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a38      	ldr	r2, [pc, #224]	; (8007734 <DMA_SetConfig+0x240>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d036      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a37      	ldr	r2, [pc, #220]	; (8007738 <DMA_SetConfig+0x244>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d031      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a35      	ldr	r2, [pc, #212]	; (800773c <DMA_SetConfig+0x248>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d02c      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a34      	ldr	r2, [pc, #208]	; (8007740 <DMA_SetConfig+0x24c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d027      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a32      	ldr	r2, [pc, #200]	; (8007744 <DMA_SetConfig+0x250>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d022      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a31      	ldr	r2, [pc, #196]	; (8007748 <DMA_SetConfig+0x254>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d01d      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a2f      	ldr	r2, [pc, #188]	; (800774c <DMA_SetConfig+0x258>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d018      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a2e      	ldr	r2, [pc, #184]	; (8007750 <DMA_SetConfig+0x25c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d013      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a2c      	ldr	r2, [pc, #176]	; (8007754 <DMA_SetConfig+0x260>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00e      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a2b      	ldr	r2, [pc, #172]	; (8007758 <DMA_SetConfig+0x264>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d009      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a29      	ldr	r2, [pc, #164]	; (800775c <DMA_SetConfig+0x268>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d004      	beq.n	80076c4 <DMA_SetConfig+0x1d0>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a28      	ldr	r2, [pc, #160]	; (8007760 <DMA_SetConfig+0x26c>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d101      	bne.n	80076c8 <DMA_SetConfig+0x1d4>
 80076c4:	2301      	movs	r3, #1
 80076c6:	e000      	b.n	80076ca <DMA_SetConfig+0x1d6>
 80076c8:	2300      	movs	r3, #0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d05a      	beq.n	8007784 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d2:	f003 031f 	and.w	r3, r3, #31
 80076d6:	223f      	movs	r2, #63	; 0x3f
 80076d8:	409a      	lsls	r2, r3
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	2b40      	cmp	r3, #64	; 0x40
 80076fc:	d108      	bne.n	8007710 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800770e:	e087      	b.n	8007820 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	60da      	str	r2, [r3, #12]
}
 8007720:	e07e      	b.n	8007820 <DMA_SetConfig+0x32c>
 8007722:	bf00      	nop
 8007724:	40020010 	.word	0x40020010
 8007728:	40020028 	.word	0x40020028
 800772c:	40020040 	.word	0x40020040
 8007730:	40020058 	.word	0x40020058
 8007734:	40020070 	.word	0x40020070
 8007738:	40020088 	.word	0x40020088
 800773c:	400200a0 	.word	0x400200a0
 8007740:	400200b8 	.word	0x400200b8
 8007744:	40020410 	.word	0x40020410
 8007748:	40020428 	.word	0x40020428
 800774c:	40020440 	.word	0x40020440
 8007750:	40020458 	.word	0x40020458
 8007754:	40020470 	.word	0x40020470
 8007758:	40020488 	.word	0x40020488
 800775c:	400204a0 	.word	0x400204a0
 8007760:	400204b8 	.word	0x400204b8
 8007764:	58025408 	.word	0x58025408
 8007768:	5802541c 	.word	0x5802541c
 800776c:	58025430 	.word	0x58025430
 8007770:	58025444 	.word	0x58025444
 8007774:	58025458 	.word	0x58025458
 8007778:	5802546c 	.word	0x5802546c
 800777c:	58025480 	.word	0x58025480
 8007780:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a28      	ldr	r2, [pc, #160]	; (800782c <DMA_SetConfig+0x338>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d022      	beq.n	80077d4 <DMA_SetConfig+0x2e0>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a27      	ldr	r2, [pc, #156]	; (8007830 <DMA_SetConfig+0x33c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d01d      	beq.n	80077d4 <DMA_SetConfig+0x2e0>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a25      	ldr	r2, [pc, #148]	; (8007834 <DMA_SetConfig+0x340>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d018      	beq.n	80077d4 <DMA_SetConfig+0x2e0>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a24      	ldr	r2, [pc, #144]	; (8007838 <DMA_SetConfig+0x344>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d013      	beq.n	80077d4 <DMA_SetConfig+0x2e0>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a22      	ldr	r2, [pc, #136]	; (800783c <DMA_SetConfig+0x348>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d00e      	beq.n	80077d4 <DMA_SetConfig+0x2e0>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a21      	ldr	r2, [pc, #132]	; (8007840 <DMA_SetConfig+0x34c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d009      	beq.n	80077d4 <DMA_SetConfig+0x2e0>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1f      	ldr	r2, [pc, #124]	; (8007844 <DMA_SetConfig+0x350>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d004      	beq.n	80077d4 <DMA_SetConfig+0x2e0>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a1e      	ldr	r2, [pc, #120]	; (8007848 <DMA_SetConfig+0x354>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d101      	bne.n	80077d8 <DMA_SetConfig+0x2e4>
 80077d4:	2301      	movs	r3, #1
 80077d6:	e000      	b.n	80077da <DMA_SetConfig+0x2e6>
 80077d8:	2300      	movs	r3, #0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d020      	beq.n	8007820 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e2:	f003 031f 	and.w	r3, r3, #31
 80077e6:	2201      	movs	r2, #1
 80077e8:	409a      	lsls	r2, r3
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2b40      	cmp	r3, #64	; 0x40
 80077fc:	d108      	bne.n	8007810 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	60da      	str	r2, [r3, #12]
}
 800780e:	e007      	b.n	8007820 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	60da      	str	r2, [r3, #12]
}
 8007820:	bf00      	nop
 8007822:	371c      	adds	r7, #28
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	58025408 	.word	0x58025408
 8007830:	5802541c 	.word	0x5802541c
 8007834:	58025430 	.word	0x58025430
 8007838:	58025444 	.word	0x58025444
 800783c:	58025458 	.word	0x58025458
 8007840:	5802546c 	.word	0x5802546c
 8007844:	58025480 	.word	0x58025480
 8007848:	58025494 	.word	0x58025494

0800784c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a42      	ldr	r2, [pc, #264]	; (8007964 <DMA_CalcBaseAndBitshift+0x118>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d04a      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a41      	ldr	r2, [pc, #260]	; (8007968 <DMA_CalcBaseAndBitshift+0x11c>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d045      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a3f      	ldr	r2, [pc, #252]	; (800796c <DMA_CalcBaseAndBitshift+0x120>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d040      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a3e      	ldr	r2, [pc, #248]	; (8007970 <DMA_CalcBaseAndBitshift+0x124>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d03b      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a3c      	ldr	r2, [pc, #240]	; (8007974 <DMA_CalcBaseAndBitshift+0x128>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d036      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a3b      	ldr	r2, [pc, #236]	; (8007978 <DMA_CalcBaseAndBitshift+0x12c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d031      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a39      	ldr	r2, [pc, #228]	; (800797c <DMA_CalcBaseAndBitshift+0x130>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d02c      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a38      	ldr	r2, [pc, #224]	; (8007980 <DMA_CalcBaseAndBitshift+0x134>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d027      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a36      	ldr	r2, [pc, #216]	; (8007984 <DMA_CalcBaseAndBitshift+0x138>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d022      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a35      	ldr	r2, [pc, #212]	; (8007988 <DMA_CalcBaseAndBitshift+0x13c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d01d      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a33      	ldr	r2, [pc, #204]	; (800798c <DMA_CalcBaseAndBitshift+0x140>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d018      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a32      	ldr	r2, [pc, #200]	; (8007990 <DMA_CalcBaseAndBitshift+0x144>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d013      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a30      	ldr	r2, [pc, #192]	; (8007994 <DMA_CalcBaseAndBitshift+0x148>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d00e      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a2f      	ldr	r2, [pc, #188]	; (8007998 <DMA_CalcBaseAndBitshift+0x14c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d009      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a2d      	ldr	r2, [pc, #180]	; (800799c <DMA_CalcBaseAndBitshift+0x150>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d004      	beq.n	80078f4 <DMA_CalcBaseAndBitshift+0xa8>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a2c      	ldr	r2, [pc, #176]	; (80079a0 <DMA_CalcBaseAndBitshift+0x154>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d101      	bne.n	80078f8 <DMA_CalcBaseAndBitshift+0xac>
 80078f4:	2301      	movs	r3, #1
 80078f6:	e000      	b.n	80078fa <DMA_CalcBaseAndBitshift+0xae>
 80078f8:	2300      	movs	r3, #0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d024      	beq.n	8007948 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	3b10      	subs	r3, #16
 8007906:	4a27      	ldr	r2, [pc, #156]	; (80079a4 <DMA_CalcBaseAndBitshift+0x158>)
 8007908:	fba2 2303 	umull	r2, r3, r2, r3
 800790c:	091b      	lsrs	r3, r3, #4
 800790e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f003 0307 	and.w	r3, r3, #7
 8007916:	4a24      	ldr	r2, [pc, #144]	; (80079a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007918:	5cd3      	ldrb	r3, [r2, r3]
 800791a:	461a      	mov	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b03      	cmp	r3, #3
 8007924:	d908      	bls.n	8007938 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	4b1f      	ldr	r3, [pc, #124]	; (80079ac <DMA_CalcBaseAndBitshift+0x160>)
 800792e:	4013      	ands	r3, r2
 8007930:	1d1a      	adds	r2, r3, #4
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	659a      	str	r2, [r3, #88]	; 0x58
 8007936:	e00d      	b.n	8007954 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	4b1b      	ldr	r3, [pc, #108]	; (80079ac <DMA_CalcBaseAndBitshift+0x160>)
 8007940:	4013      	ands	r3, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6593      	str	r3, [r2, #88]	; 0x58
 8007946:	e005      	b.n	8007954 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	40020010 	.word	0x40020010
 8007968:	40020028 	.word	0x40020028
 800796c:	40020040 	.word	0x40020040
 8007970:	40020058 	.word	0x40020058
 8007974:	40020070 	.word	0x40020070
 8007978:	40020088 	.word	0x40020088
 800797c:	400200a0 	.word	0x400200a0
 8007980:	400200b8 	.word	0x400200b8
 8007984:	40020410 	.word	0x40020410
 8007988:	40020428 	.word	0x40020428
 800798c:	40020440 	.word	0x40020440
 8007990:	40020458 	.word	0x40020458
 8007994:	40020470 	.word	0x40020470
 8007998:	40020488 	.word	0x40020488
 800799c:	400204a0 	.word	0x400204a0
 80079a0:	400204b8 	.word	0x400204b8
 80079a4:	aaaaaaab 	.word	0xaaaaaaab
 80079a8:	0801ed90 	.word	0x0801ed90
 80079ac:	fffffc00 	.word	0xfffffc00

080079b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d120      	bne.n	8007a06 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d858      	bhi.n	8007a7e <DMA_CheckFifoParam+0xce>
 80079cc:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <DMA_CheckFifoParam+0x24>)
 80079ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d2:	bf00      	nop
 80079d4:	080079e5 	.word	0x080079e5
 80079d8:	080079f7 	.word	0x080079f7
 80079dc:	080079e5 	.word	0x080079e5
 80079e0:	08007a7f 	.word	0x08007a7f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d048      	beq.n	8007a82 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079f4:	e045      	b.n	8007a82 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079fe:	d142      	bne.n	8007a86 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a04:	e03f      	b.n	8007a86 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a0e:	d123      	bne.n	8007a58 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d838      	bhi.n	8007a8a <DMA_CheckFifoParam+0xda>
 8007a18:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <DMA_CheckFifoParam+0x70>)
 8007a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1e:	bf00      	nop
 8007a20:	08007a31 	.word	0x08007a31
 8007a24:	08007a37 	.word	0x08007a37
 8007a28:	08007a31 	.word	0x08007a31
 8007a2c:	08007a49 	.word	0x08007a49
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	73fb      	strb	r3, [r7, #15]
        break;
 8007a34:	e030      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d025      	beq.n	8007a8e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a46:	e022      	b.n	8007a8e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a50:	d11f      	bne.n	8007a92 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a56:	e01c      	b.n	8007a92 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d902      	bls.n	8007a66 <DMA_CheckFifoParam+0xb6>
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d003      	beq.n	8007a6c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007a64:	e018      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	73fb      	strb	r3, [r7, #15]
        break;
 8007a6a:	e015      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00e      	beq.n	8007a96 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a7c:	e00b      	b.n	8007a96 <DMA_CheckFifoParam+0xe6>
        break;
 8007a7e:	bf00      	nop
 8007a80:	e00a      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
        break;
 8007a82:	bf00      	nop
 8007a84:	e008      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
        break;
 8007a86:	bf00      	nop
 8007a88:	e006      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
        break;
 8007a8a:	bf00      	nop
 8007a8c:	e004      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
        break;
 8007a8e:	bf00      	nop
 8007a90:	e002      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
        break;
 8007a92:	bf00      	nop
 8007a94:	e000      	b.n	8007a98 <DMA_CheckFifoParam+0xe8>
    break;
 8007a96:	bf00      	nop
    }
  }

  return status;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop

08007aa8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a38      	ldr	r2, [pc, #224]	; (8007b9c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d022      	beq.n	8007b06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a36      	ldr	r2, [pc, #216]	; (8007ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d01d      	beq.n	8007b06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a35      	ldr	r2, [pc, #212]	; (8007ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d018      	beq.n	8007b06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a33      	ldr	r2, [pc, #204]	; (8007ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d013      	beq.n	8007b06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a32      	ldr	r2, [pc, #200]	; (8007bac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00e      	beq.n	8007b06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a30      	ldr	r2, [pc, #192]	; (8007bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d009      	beq.n	8007b06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a2f      	ldr	r2, [pc, #188]	; (8007bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d004      	beq.n	8007b06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a2d      	ldr	r2, [pc, #180]	; (8007bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d101      	bne.n	8007b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007b06:	2301      	movs	r3, #1
 8007b08:	e000      	b.n	8007b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01a      	beq.n	8007b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	3b08      	subs	r3, #8
 8007b18:	4a28      	ldr	r2, [pc, #160]	; (8007bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1e:	091b      	lsrs	r3, r3, #4
 8007b20:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	4b26      	ldr	r3, [pc, #152]	; (8007bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a24      	ldr	r2, [pc, #144]	; (8007bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007b34:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	409a      	lsls	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007b44:	e024      	b.n	8007b90 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	3b10      	subs	r3, #16
 8007b4e:	4a1e      	ldr	r2, [pc, #120]	; (8007bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007b50:	fba2 2303 	umull	r2, r3, r2, r3
 8007b54:	091b      	lsrs	r3, r3, #4
 8007b56:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4a1c      	ldr	r2, [pc, #112]	; (8007bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d806      	bhi.n	8007b6e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	4a1b      	ldr	r2, [pc, #108]	; (8007bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d902      	bls.n	8007b6e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	4b18      	ldr	r3, [pc, #96]	; (8007bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007b72:	4413      	add	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a16      	ldr	r2, [pc, #88]	; (8007bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007b80:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f003 031f 	and.w	r3, r3, #31
 8007b88:	2201      	movs	r2, #1
 8007b8a:	409a      	lsls	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b90:	bf00      	nop
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	58025408 	.word	0x58025408
 8007ba0:	5802541c 	.word	0x5802541c
 8007ba4:	58025430 	.word	0x58025430
 8007ba8:	58025444 	.word	0x58025444
 8007bac:	58025458 	.word	0x58025458
 8007bb0:	5802546c 	.word	0x5802546c
 8007bb4:	58025480 	.word	0x58025480
 8007bb8:	58025494 	.word	0x58025494
 8007bbc:	cccccccd 	.word	0xcccccccd
 8007bc0:	16009600 	.word	0x16009600
 8007bc4:	58025880 	.word	0x58025880
 8007bc8:	aaaaaaab 	.word	0xaaaaaaab
 8007bcc:	400204b8 	.word	0x400204b8
 8007bd0:	4002040f 	.word	0x4002040f
 8007bd4:	10008200 	.word	0x10008200
 8007bd8:	40020880 	.word	0x40020880

08007bdc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d04a      	beq.n	8007c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d847      	bhi.n	8007c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a25      	ldr	r2, [pc, #148]	; (8007c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d022      	beq.n	8007c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a24      	ldr	r2, [pc, #144]	; (8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d01d      	beq.n	8007c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a22      	ldr	r2, [pc, #136]	; (8007c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d018      	beq.n	8007c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a21      	ldr	r2, [pc, #132]	; (8007ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d013      	beq.n	8007c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a1f      	ldr	r2, [pc, #124]	; (8007ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00e      	beq.n	8007c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d009      	beq.n	8007c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a1c      	ldr	r2, [pc, #112]	; (8007cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d004      	beq.n	8007c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a1b      	ldr	r2, [pc, #108]	; (8007cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d101      	bne.n	8007c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e000      	b.n	8007c4e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4b17      	ldr	r3, [pc, #92]	; (8007cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a15      	ldr	r2, [pc, #84]	; (8007cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007c64:	671a      	str	r2, [r3, #112]	; 0x70
 8007c66:	e009      	b.n	8007c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	4b14      	ldr	r3, [pc, #80]	; (8007cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	461a      	mov	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a11      	ldr	r2, [pc, #68]	; (8007cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007c7a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	2201      	movs	r2, #1
 8007c82:	409a      	lsls	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007c88:	bf00      	nop
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	58025408 	.word	0x58025408
 8007c98:	5802541c 	.word	0x5802541c
 8007c9c:	58025430 	.word	0x58025430
 8007ca0:	58025444 	.word	0x58025444
 8007ca4:	58025458 	.word	0x58025458
 8007ca8:	5802546c 	.word	0x5802546c
 8007cac:	58025480 	.word	0x58025480
 8007cb0:	58025494 	.word	0x58025494
 8007cb4:	1600963f 	.word	0x1600963f
 8007cb8:	58025940 	.word	0x58025940
 8007cbc:	1000823f 	.word	0x1000823f
 8007cc0:	40020940 	.word	0x40020940

08007cc4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b098      	sub	sp, #96	; 0x60
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007ccc:	4a84      	ldr	r2, [pc, #528]	; (8007ee0 <HAL_FDCAN_Init+0x21c>)
 8007cce:	f107 030c 	add.w	r3, r7, #12
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	224c      	movs	r2, #76	; 0x4c
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f013 fb12 	bl	801b300 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e1ca      	b.n	800807c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a7e      	ldr	r2, [pc, #504]	; (8007ee4 <HAL_FDCAN_Init+0x220>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d106      	bne.n	8007cfe <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d106      	bne.n	8007d18 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7fd f94e 	bl	8004fb4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0210 	bic.w	r2, r2, #16
 8007d26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d28:	f7fd fdaa 	bl	8005880 <HAL_GetTick>
 8007d2c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007d2e:	e014      	b.n	8007d5a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007d30:	f7fd fda6 	bl	8005880 <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	2b0a      	cmp	r3, #10
 8007d3c:	d90d      	bls.n	8007d5a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d44:	f043 0201 	orr.w	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2203      	movs	r2, #3
 8007d52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e190      	b.n	800807c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	f003 0308 	and.w	r3, r3, #8
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d0e3      	beq.n	8007d30 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	699a      	ldr	r2, [r3, #24]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d78:	f7fd fd82 	bl	8005880 <HAL_GetTick>
 8007d7c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007d7e:	e014      	b.n	8007daa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007d80:	f7fd fd7e 	bl	8005880 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b0a      	cmp	r3, #10
 8007d8c:	d90d      	bls.n	8007daa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d94:	f043 0201 	orr.w	r2, r3, #1
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2203      	movs	r2, #3
 8007da2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e168      	b.n	800807c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d0e3      	beq.n	8007d80 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	699a      	ldr	r2, [r3, #24]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f042 0202 	orr.w	r2, r2, #2
 8007dc6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	7c1b      	ldrb	r3, [r3, #16]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d108      	bne.n	8007de2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	699a      	ldr	r2, [r3, #24]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dde:	619a      	str	r2, [r3, #24]
 8007de0:	e007      	b.n	8007df2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007df0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	7c5b      	ldrb	r3, [r3, #17]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d108      	bne.n	8007e0c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	699a      	ldr	r2, [r3, #24]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e08:	619a      	str	r2, [r3, #24]
 8007e0a:	e007      	b.n	8007e1c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	699a      	ldr	r2, [r3, #24]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007e1a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7c9b      	ldrb	r3, [r3, #18]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d108      	bne.n	8007e36 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	699a      	ldr	r2, [r3, #24]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e32:	619a      	str	r2, [r3, #24]
 8007e34:	e007      	b.n	8007e46 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	699a      	ldr	r2, [r3, #24]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e44:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	699a      	ldr	r2, [r3, #24]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007e6a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	691a      	ldr	r2, [r3, #16]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0210 	bic.w	r2, r2, #16
 8007e7a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d108      	bne.n	8007e96 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699a      	ldr	r2, [r3, #24]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0204 	orr.w	r2, r2, #4
 8007e92:	619a      	str	r2, [r3, #24]
 8007e94:	e030      	b.n	8007ef8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d02c      	beq.n	8007ef8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d020      	beq.n	8007ee8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	699a      	ldr	r2, [r3, #24]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007eb4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f042 0210 	orr.w	r2, r2, #16
 8007ec4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d114      	bne.n	8007ef8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699a      	ldr	r2, [r3, #24]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0220 	orr.w	r2, r2, #32
 8007edc:	619a      	str	r2, [r3, #24]
 8007ede:	e00b      	b.n	8007ef8 <HAL_FDCAN_Init+0x234>
 8007ee0:	0801ec9c 	.word	0x0801ec9c
 8007ee4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699a      	ldr	r2, [r3, #24]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0220 	orr.w	r2, r2, #32
 8007ef6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007f08:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007f10:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007f20:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007f22:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f2c:	d115      	bne.n	8007f5a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f32:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007f3c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	3b01      	subs	r3, #1
 8007f44:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007f46:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007f56:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007f58:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00a      	beq.n	8007f78 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f80:	4413      	add	r3, r2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d012      	beq.n	8007fac <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007f8e:	f023 0107 	bic.w	r1, r3, #7
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d012      	beq.n	8007fda <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007fbc:	f023 0107 	bic.w	r1, r3, #7
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007fca:	4413      	add	r3, r2
 8007fcc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d013      	beq.n	800800a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007fea:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007ffe:	011a      	lsls	r2, r3, #4
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800e:	2b00      	cmp	r3, #0
 8008010:	d013      	beq.n	800803a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800801a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008028:	4413      	add	r3, r2
 800802a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800802e:	021a      	lsls	r2, r3, #8
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a11      	ldr	r2, [pc, #68]	; (8008084 <HAL_FDCAN_Init+0x3c0>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d107      	bne.n	8008054 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f022 0203 	bic.w	r2, r2, #3
 8008052:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fddf 	bl	8008c30 <FDCAN_CalcultateRamBlockAddresses>
 8008072:	4603      	mov	r3, r0
 8008074:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008078:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800807c:	4618      	mov	r0, r3
 800807e:	3760      	adds	r7, #96	; 0x60
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	4000a000 	.word	0x4000a000

08008088 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008098:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d002      	beq.n	80080a6 <HAL_FDCAN_ConfigFilter+0x1e>
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d157      	bne.n	8008156 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d12b      	bne.n	8008106 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	2b07      	cmp	r3, #7
 80080b4:	d10d      	bne.n	80080d2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	69db      	ldr	r3, [r3, #28]
 80080c0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80080c2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80080c8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80080ca:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	e00e      	b.n	80080f0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80080de:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80080e6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80080ec:	4313      	orrs	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	e025      	b.n	8008152 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	075a      	lsls	r2, r3, #29
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	4313      	orrs	r3, r2
 8008112:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	2b07      	cmp	r3, #7
 800811a:	d103      	bne.n	8008124 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	613b      	str	r3, [r7, #16]
 8008122:	e006      	b.n	8008132 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	079a      	lsls	r2, r3, #30
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	4313      	orrs	r3, r2
 8008130:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	00db      	lsls	r3, r3, #3
 800813c:	4413      	add	r3, r2
 800813e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	3304      	adds	r3, #4
 800814a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	e008      	b.n	8008168 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800815c:	f043 0202 	orr.w	r2, r3, #2
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
  }
}
 8008168:	4618      	mov	r0, r3
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
 8008180:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b01      	cmp	r3, #1
 800818c:	d110      	bne.n	80081b0 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8008196:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800819c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80081a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	e008      	b.n	80081c2 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081b6:	f043 0204 	orr.w	r2, r3, #4
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
  }
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d109      	bne.n	80081f6 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80081f0:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	e008      	b.n	8008208 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081fc:	f043 0204 	orr.w	r2, r3, #4
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
  }
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b01      	cmp	r3, #1
 8008226:	d111      	bne.n	800824c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699a      	ldr	r2, [r3, #24]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0201 	bic.w	r2, r2, #1
 800823e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	e008      	b.n	800825e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008252:	f043 0204 	orr.w	r2, r3, #4
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
  }
}
 800825e:	4618      	mov	r0, r3
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
	...

0800826c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800826c:	b480      	push	{r7}
 800826e:	b08b      	sub	sp, #44	; 0x2c
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008284:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8008286:	7efb      	ldrb	r3, [r7, #27]
 8008288:	2b02      	cmp	r3, #2
 800828a:	f040 813b 	bne.w	8008504 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2b40      	cmp	r3, #64	; 0x40
 8008292:	d145      	bne.n	8008320 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800829c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d109      	bne.n	80082b8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082aa:	f043 0220 	orr.w	r2, r3, #32
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e12e      	b.n	8008516 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80082c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d109      	bne.n	80082dc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e11c      	b.n	8008516 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80082e4:	0e1b      	lsrs	r3, r3, #24
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d103      	bne.n	80082f6 <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008304:	69fa      	ldr	r2, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008312:	69f9      	ldr	r1, [r7, #28]
 8008314:	fb01 f303 	mul.w	r3, r1, r3
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
 800831e:	e061      	b.n	80083e4 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b41      	cmp	r3, #65	; 0x41
 8008324:	d145      	bne.n	80083b2 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800832e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800833c:	f043 0220 	orr.w	r2, r3, #32
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e0e5      	b.n	8008516 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008356:	2b00      	cmp	r3, #0
 8008358:	d109      	bne.n	800836e <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008360:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e0d3      	b.n	8008516 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008376:	0e1b      	lsrs	r3, r3, #24
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b01      	cmp	r3, #1
 800837e:	d103      	bne.n	8008388 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008390:	0a1b      	lsrs	r3, r3, #8
 8008392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008396:	69fa      	ldr	r2, [r7, #28]
 8008398:	4413      	add	r3, r2
 800839a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a4:	69f9      	ldr	r1, [r7, #28]
 80083a6:	fb01 f303 	mul.w	r3, r1, r3
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
 80083b0:	e018      	b.n	80083e4 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d309      	bcc.n	80083d0 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083c2:	f043 0220 	orr.w	r2, r3, #32
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e0a2      	b.n	8008516 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	fb01 f303 	mul.w	r3, r1, r3
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d107      	bne.n	8008408 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	0c9b      	lsrs	r3, r3, #18
 80083fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	e005      	b.n	8008414 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	3304      	adds	r3, #4
 8008430:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	b29a      	uxth	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	0e1b      	lsrs	r3, r3, #24
 8008466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	0fda      	lsrs	r2, r3, #31
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	3304      	adds	r3, #4
 800847c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8008482:	2300      	movs	r3, #0
 8008484:	623b      	str	r3, [r7, #32]
 8008486:	e00a      	b.n	800849e <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	441a      	add	r2, r3
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	440b      	add	r3, r1
 8008494:	7812      	ldrb	r2, [r2, #0]
 8008496:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	3301      	adds	r3, #1
 800849c:	623b      	str	r3, [r7, #32]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	0c1b      	lsrs	r3, r3, #16
 80084a4:	4a1f      	ldr	r2, [pc, #124]	; (8008524 <HAL_FDCAN_GetRxMessage+0x2b8>)
 80084a6:	5cd3      	ldrb	r3, [r2, r3]
 80084a8:	461a      	mov	r2, r3
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d3eb      	bcc.n	8008488 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2b40      	cmp	r3, #64	; 0x40
 80084b4:	d105      	bne.n	80084c2 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69fa      	ldr	r2, [r7, #28]
 80084bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80084c0:	e01e      	b.n	8008500 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2b41      	cmp	r3, #65	; 0x41
 80084c6:	d105      	bne.n	80084d4 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	69fa      	ldr	r2, [r7, #28]
 80084ce:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80084d2:	e015      	b.n	8008500 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2b1f      	cmp	r3, #31
 80084d8:	d808      	bhi.n	80084ec <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2101      	movs	r1, #1
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	fa01 f202 	lsl.w	r2, r1, r2
 80084e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80084ea:	e009      	b.n	8008500 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f003 021f 	and.w	r2, r3, #31
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2101      	movs	r1, #1
 80084f8:	fa01 f202 	lsl.w	r2, r1, r2
 80084fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	e008      	b.n	8008516 <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800850a:	f043 0208 	orr.w	r2, r3, #8
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
  }
}
 8008516:	4618      	mov	r0, r3
 8008518:	372c      	adds	r7, #44	; 0x2c
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	0801ed98 	.word	0x0801ed98

08008528 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800853a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800853c:	7dfb      	ldrb	r3, [r7, #23]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d002      	beq.n	8008548 <HAL_FDCAN_ActivateNotification+0x20>
 8008542:	7dfb      	ldrb	r3, [r7, #23]
 8008544:	2b02      	cmp	r3, #2
 8008546:	d155      	bne.n	80085f4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	4013      	ands	r3, r2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d108      	bne.n	8008568 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0201 	orr.w	r2, r2, #1
 8008564:	65da      	str	r2, [r3, #92]	; 0x5c
 8008566:	e014      	b.n	8008592 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	4013      	ands	r3, r2
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	429a      	cmp	r2, r3
 8008576:	d108      	bne.n	800858a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f042 0202 	orr.w	r2, r2, #2
 8008586:	65da      	str	r2, [r3, #92]	; 0x5c
 8008588:	e003      	b.n	8008592 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2203      	movs	r2, #3
 8008590:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008598:	2b00      	cmp	r3, #0
 800859a:	d009      	beq.n	80085b0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <HAL_FDCAN_ActivateNotification+0xec>)
 80085d8:	4013      	ands	r3, r2
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	6812      	ldr	r2, [r2, #0]
 80085de:	430b      	orrs	r3, r1
 80085e0:	6553      	str	r3, [r2, #84]	; 0x54
 80085e2:	4b0d      	ldr	r3, [pc, #52]	; (8008618 <HAL_FDCAN_ActivateNotification+0xf0>)
 80085e4:	695a      	ldr	r2, [r3, #20]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	0f9b      	lsrs	r3, r3, #30
 80085ea:	490b      	ldr	r1, [pc, #44]	; (8008618 <HAL_FDCAN_ActivateNotification+0xf0>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	e008      	b.n	8008606 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085fa:	f043 0202 	orr.w	r2, r3, #2
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
  }
}
 8008606:	4618      	mov	r0, r3
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	3fcfffff 	.word	0x3fcfffff
 8008618:	4000a800 	.word	0x4000a800

0800861c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b092      	sub	sp, #72	; 0x48
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8008624:	4b90      	ldr	r3, [pc, #576]	; (8008868 <HAL_FDCAN_IRQHandler+0x24c>)
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	079b      	lsls	r3, r3, #30
 800862a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800862c:	4b8e      	ldr	r3, [pc, #568]	; (8008868 <HAL_FDCAN_IRQHandler+0x24c>)
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	079b      	lsls	r3, r3, #30
 8008632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008634:	4013      	ands	r3, r2
 8008636:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800863e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008642:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800864c:	4013      	ands	r3, r2
 800864e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008662:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008664:	4013      	ands	r3, r2
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800866e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008672:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800867c:	4013      	ands	r3, r2
 800867e:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008686:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800868a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008694:	4013      	ands	r3, r2
 8008696:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80086a2:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ac:	4013      	ands	r3, r2
 80086ae:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d011      	beq.n	80086e2 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00a      	beq.n	80086e2 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086d4:	651a      	str	r2, [r3, #80]	; 0x50
 80086d6:	4b64      	ldr	r3, [pc, #400]	; (8008868 <HAL_FDCAN_IRQHandler+0x24c>)
 80086d8:	2200      	movs	r2, #0
 80086da:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fa5a 	bl	8008b96 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01e      	beq.n	800872e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d017      	beq.n	800872e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008706:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008712:	4013      	ands	r3, r2
 8008714:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800871e:	651a      	str	r2, [r3, #80]	; 0x50
 8008720:	4b51      	ldr	r3, [pc, #324]	; (8008868 <HAL_FDCAN_IRQHandler+0x24c>)
 8008722:	2200      	movs	r2, #0
 8008724:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8008726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fa0b 	bl	8008b44 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800872e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00d      	beq.n	8008750 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800873a:	4b4c      	ldr	r3, [pc, #304]	; (800886c <HAL_FDCAN_IRQHandler+0x250>)
 800873c:	400b      	ands	r3, r1
 800873e:	6513      	str	r3, [r2, #80]	; 0x50
 8008740:	4a49      	ldr	r2, [pc, #292]	; (8008868 <HAL_FDCAN_IRQHandler+0x24c>)
 8008742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008744:	0f9b      	lsrs	r3, r3, #30
 8008746:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8008748:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f9c4 	bl	8008ad8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8008750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00d      	beq.n	8008772 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800875c:	4b43      	ldr	r3, [pc, #268]	; (800886c <HAL_FDCAN_IRQHandler+0x250>)
 800875e:	400b      	ands	r3, r1
 8008760:	6513      	str	r3, [r2, #80]	; 0x50
 8008762:	4a41      	ldr	r2, [pc, #260]	; (8008868 <HAL_FDCAN_IRQHandler+0x24c>)
 8008764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008766:	0f9b      	lsrs	r3, r3, #30
 8008768:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800876a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f9be 	bl	8008aee <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8008772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00d      	beq.n	8008794 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800877e:	4b3b      	ldr	r3, [pc, #236]	; (800886c <HAL_FDCAN_IRQHandler+0x250>)
 8008780:	400b      	ands	r3, r1
 8008782:	6513      	str	r3, [r2, #80]	; 0x50
 8008784:	4a38      	ldr	r2, [pc, #224]	; (8008868 <HAL_FDCAN_IRQHandler+0x24c>)
 8008786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008788:	0f9b      	lsrs	r3, r3, #30
 800878a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800878c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7f8 fd34 	bl	80011fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00d      	beq.n	80087b6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087a0:	4b32      	ldr	r3, [pc, #200]	; (800886c <HAL_FDCAN_IRQHandler+0x250>)
 80087a2:	400b      	ands	r3, r1
 80087a4:	6513      	str	r3, [r2, #80]	; 0x50
 80087a6:	4a30      	ldr	r2, [pc, #192]	; (8008868 <HAL_FDCAN_IRQHandler+0x24c>)
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	0f9b      	lsrs	r3, r3, #30
 80087ac:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80087ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f9a7 	bl	8008b04 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d011      	beq.n	80087e8 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087da:	651a      	str	r2, [r3, #80]	; 0x50
 80087dc:	4b22      	ldr	r3, [pc, #136]	; (8008868 <HAL_FDCAN_IRQHandler+0x24c>)
 80087de:	2200      	movs	r2, #0
 80087e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f999 	bl	8008b1a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d01e      	beq.n	8008834 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008800:	2b00      	cmp	r3, #0
 8008802:	d017      	beq.n	8008834 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800880c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008818:	4013      	ands	r3, r2
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008824:	651a      	str	r2, [r3, #80]	; 0x50
 8008826:	4b10      	ldr	r3, [pc, #64]	; (8008868 <HAL_FDCAN_IRQHandler+0x24c>)
 8008828:	2200      	movs	r2, #0
 800882a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800882c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f97d 	bl	8008b2e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800883a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d016      	beq.n	8008870 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00f      	beq.n	8008870 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008858:	651a      	str	r2, [r3, #80]	; 0x50
 800885a:	4b03      	ldr	r3, [pc, #12]	; (8008868 <HAL_FDCAN_IRQHandler+0x24c>)
 800885c:	2200      	movs	r2, #0
 800885e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f97a 	bl	8008b5a <HAL_FDCAN_RxBufferNewMessageCallback>
 8008866:	e003      	b.n	8008870 <HAL_FDCAN_IRQHandler+0x254>
 8008868:	4000a800 	.word	0x4000a800
 800886c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d011      	beq.n	80088a2 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00a      	beq.n	80088a2 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008894:	651a      	str	r2, [r3, #80]	; 0x50
 8008896:	4b8d      	ldr	r3, [pc, #564]	; (8008acc <HAL_FDCAN_IRQHandler+0x4b0>)
 8008898:	2200      	movs	r2, #0
 800889a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f966 	bl	8008b6e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d011      	beq.n	80088d4 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00a      	beq.n	80088d4 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80088c6:	651a      	str	r2, [r3, #80]	; 0x50
 80088c8:	4b80      	ldr	r3, [pc, #512]	; (8008acc <HAL_FDCAN_IRQHandler+0x4b0>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f957 	bl	8008b82 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d016      	beq.n	8008910 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00f      	beq.n	8008910 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80088f8:	651a      	str	r2, [r3, #80]	; 0x50
 80088fa:	4b74      	ldr	r3, [pc, #464]	; (8008acc <HAL_FDCAN_IRQHandler+0x4b0>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008906:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00d      	beq.n	8008932 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800891c:	4b6c      	ldr	r3, [pc, #432]	; (8008ad0 <HAL_FDCAN_IRQHandler+0x4b4>)
 800891e:	400b      	ands	r3, r1
 8008920:	6513      	str	r3, [r2, #80]	; 0x50
 8008922:	4a6a      	ldr	r2, [pc, #424]	; (8008acc <HAL_FDCAN_IRQHandler+0x4b0>)
 8008924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008926:	0f9b      	lsrs	r3, r3, #30
 8008928:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800892a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f946 	bl	8008bbe <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008934:	2b00      	cmp	r3, #0
 8008936:	d011      	beq.n	800895c <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800893e:	4b64      	ldr	r3, [pc, #400]	; (8008ad0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8008940:	400b      	ands	r3, r1
 8008942:	6513      	str	r3, [r2, #80]	; 0x50
 8008944:	4a61      	ldr	r2, [pc, #388]	; (8008acc <HAL_FDCAN_IRQHandler+0x4b0>)
 8008946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008948:	0f9b      	lsrs	r3, r3, #30
 800894a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008954:	431a      	orrs	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a5c      	ldr	r2, [pc, #368]	; (8008ad4 <HAL_FDCAN_IRQHandler+0x4b8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	f040 80a6 	bne.w	8008ab4 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f003 0303 	and.w	r3, r3, #3
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 809e 	beq.w	8008ab4 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	f003 030f 	and.w	r3, r3, #15
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898c:	4013      	ands	r3, r2
 800898e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800899a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	6a3a      	ldr	r2, [r7, #32]
 80089a4:	4013      	ands	r3, r2
 80089a6:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80089b2:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ba:	69fa      	ldr	r2, [r7, #28]
 80089bc:	4013      	ands	r3, r2
 80089be:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80089ca:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	4013      	ands	r3, r2
 80089d6:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80089e2:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	4013      	ands	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d007      	beq.n	8008a06 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80089fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f8e7 	bl	8008bd4 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d007      	beq.n	8008a1c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	6a3a      	ldr	r2, [r7, #32]
 8008a12:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8008a14:	6a39      	ldr	r1, [r7, #32]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f8e7 	bl	8008bea <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d01b      	beq.n	8008a62 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d014      	beq.n	8008a62 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3e:	0c1b      	lsrs	r3, r3, #16
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a4e:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	2240      	movs	r2, #64	; 0x40
 8008a56:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	6939      	ldr	r1, [r7, #16]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f8cf 	bl	8008c00 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d007      	beq.n	8008a78 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8008a70:	69f9      	ldr	r1, [r7, #28]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f8d0 	bl	8008c18 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00b      	beq.n	8008ab4 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	431a      	orrs	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d002      	beq.n	8008ac4 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f873 	bl	8008baa <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008ac4:	bf00      	nop
 8008ac6:	3748      	adds	r7, #72	; 0x48
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	4000a800 	.word	0x4000a800
 8008ad0:	3fcfffff 	.word	0x3fcfffff
 8008ad4:	4000a000 	.word	0x4000a000

08008ad8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8008ae2:	bf00      	nop
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b083      	sub	sp, #12
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008b0e:	bf00      	nop
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008b22:	bf00      	nop
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008b62:	bf00      	nop
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b083      	sub	sp, #12
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008b76:	bf00      	nop
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008bb2:	bf00      	nop
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8008c0c:	bf00      	nop
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8008c22:	bf00      	nop
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
	...

08008c30 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008c46:	4ba7      	ldr	r3, [pc, #668]	; (8008ee4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	0091      	lsls	r1, r2, #2
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	6812      	ldr	r2, [r2, #0]
 8008c52:	430b      	orrs	r3, r1
 8008c54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c60:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c68:	041a      	lsls	r2, r3, #16
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008c86:	4b97      	ldr	r3, [pc, #604]	; (8008ee4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008c88:	4013      	ands	r3, r2
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	0091      	lsls	r1, r2, #2
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	6812      	ldr	r2, [r2, #0]
 8008c92:	430b      	orrs	r3, r1
 8008c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca8:	041a      	lsls	r2, r3, #16
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008cc8:	4b86      	ldr	r3, [pc, #536]	; (8008ee4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008cca:	4013      	ands	r3, r2
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	0091      	lsls	r1, r2, #2
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	6812      	ldr	r2, [r2, #0]
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ce2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	041a      	lsls	r2, r3, #16
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008cfe:	fb02 f303 	mul.w	r3, r2, r3
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	4413      	add	r3, r2
 8008d06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008d10:	4b74      	ldr	r3, [pc, #464]	; (8008ee4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008d12:	4013      	ands	r3, r2
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	0091      	lsls	r1, r2, #2
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6812      	ldr	r2, [r2, #0]
 8008d1c:	430b      	orrs	r3, r1
 8008d1e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d2a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d32:	041a      	lsls	r2, r3, #16
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008d46:	fb02 f303 	mul.w	r3, r2, r3
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008d58:	4b62      	ldr	r3, [pc, #392]	; (8008ee4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	0091      	lsls	r1, r2, #2
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	6812      	ldr	r2, [r2, #0]
 8008d64:	430b      	orrs	r3, r1
 8008d66:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008d72:	fb02 f303 	mul.w	r3, r2, r3
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	4413      	add	r3, r2
 8008d7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008d84:	4b57      	ldr	r3, [pc, #348]	; (8008ee4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008d86:	4013      	ands	r3, r2
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	0091      	lsls	r1, r2, #2
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	430b      	orrs	r3, r1
 8008d92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d9e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da6:	041a      	lsls	r2, r3, #16
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	4413      	add	r3, r2
 8008dbc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008dc6:	4b47      	ldr	r3, [pc, #284]	; (8008ee4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	0091      	lsls	r1, r2, #2
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6812      	ldr	r2, [r2, #0]
 8008dd2:	430b      	orrs	r3, r1
 8008dd4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008de0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008de8:	041a      	lsls	r2, r3, #16
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008dfc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e04:	061a      	lsls	r2, r3, #24
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e14:	4b34      	ldr	r3, [pc, #208]	; (8008ee8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008e16:	4413      	add	r3, r2
 8008e18:	009a      	lsls	r2, r3, #2
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	441a      	add	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	441a      	add	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8008e4a:	fb01 f303 	mul.w	r3, r1, r3
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	441a      	add	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008e62:	fb01 f303 	mul.w	r3, r1, r3
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	441a      	add	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e76:	6879      	ldr	r1, [r7, #4]
 8008e78:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8008e7a:	fb01 f303 	mul.w	r3, r1, r3
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	441a      	add	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	441a      	add	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ea6:	6879      	ldr	r1, [r7, #4]
 8008ea8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008eaa:	fb01 f303 	mul.w	r3, r1, r3
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	441a      	add	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ec2:	6879      	ldr	r1, [r7, #4]
 8008ec4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008ec6:	fb01 f303 	mul.w	r3, r1, r3
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	441a      	add	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eda:	4a04      	ldr	r2, [pc, #16]	; (8008eec <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d915      	bls.n	8008f0c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008ee0:	e006      	b.n	8008ef0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008ee2:	bf00      	nop
 8008ee4:	ffff0003 	.word	0xffff0003
 8008ee8:	10002b00 	.word	0x10002b00
 8008eec:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ef6:	f043 0220 	orr.w	r2, r3, #32
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2203      	movs	r2, #3
 8008f04:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e010      	b.n	8008f2e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	e005      	b.n	8008f20 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d3f3      	bcc.n	8008f14 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop

08008f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b089      	sub	sp, #36	; 0x24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f46:	2300      	movs	r3, #0
 8008f48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008f4a:	4b89      	ldr	r3, [pc, #548]	; (8009170 <HAL_GPIO_Init+0x234>)
 8008f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f4e:	e194      	b.n	800927a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	2101      	movs	r1, #1
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	fa01 f303 	lsl.w	r3, r1, r3
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 8186 	beq.w	8009274 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d00b      	beq.n	8008f88 <HAL_GPIO_Init+0x4c>
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d007      	beq.n	8008f88 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f7c:	2b11      	cmp	r3, #17
 8008f7e:	d003      	beq.n	8008f88 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	2b12      	cmp	r3, #18
 8008f86:	d130      	bne.n	8008fea <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	005b      	lsls	r3, r3, #1
 8008f92:	2203      	movs	r2, #3
 8008f94:	fa02 f303 	lsl.w	r3, r2, r3
 8008f98:	43db      	mvns	r3, r3
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	005b      	lsls	r3, r3, #1
 8008fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc6:	43db      	mvns	r3, r3
 8008fc8:	69ba      	ldr	r2, [r7, #24]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	091b      	lsrs	r3, r3, #4
 8008fd4:	f003 0201 	and.w	r2, r3, #1
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	fa02 f303 	lsl.w	r3, r2, r3
 8008fde:	69ba      	ldr	r2, [r7, #24]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	2203      	movs	r2, #3
 8008ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffa:	43db      	mvns	r3, r3
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	4013      	ands	r3, r2
 8009000:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	689a      	ldr	r2, [r3, #8]
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	fa02 f303 	lsl.w	r3, r2, r3
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	4313      	orrs	r3, r2
 8009012:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	2b02      	cmp	r3, #2
 8009020:	d003      	beq.n	800902a <HAL_GPIO_Init+0xee>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	2b12      	cmp	r3, #18
 8009028:	d123      	bne.n	8009072 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	08da      	lsrs	r2, r3, #3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3208      	adds	r2, #8
 8009032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	f003 0307 	and.w	r3, r3, #7
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	220f      	movs	r2, #15
 8009042:	fa02 f303 	lsl.w	r3, r2, r3
 8009046:	43db      	mvns	r3, r3
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	4013      	ands	r3, r2
 800904c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	691a      	ldr	r2, [r3, #16]
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	f003 0307 	and.w	r3, r3, #7
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	fa02 f303 	lsl.w	r3, r2, r3
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	4313      	orrs	r3, r2
 8009062:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	08da      	lsrs	r2, r3, #3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3208      	adds	r2, #8
 800906c:	69b9      	ldr	r1, [r7, #24]
 800906e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	2203      	movs	r2, #3
 800907e:	fa02 f303 	lsl.w	r3, r2, r3
 8009082:	43db      	mvns	r3, r3
 8009084:	69ba      	ldr	r2, [r7, #24]
 8009086:	4013      	ands	r3, r2
 8009088:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f003 0203 	and.w	r2, r3, #3
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	fa02 f303 	lsl.w	r3, r2, r3
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	4313      	orrs	r3, r2
 800909e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 80e0 	beq.w	8009274 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090b4:	4b2f      	ldr	r3, [pc, #188]	; (8009174 <HAL_GPIO_Init+0x238>)
 80090b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80090ba:	4a2e      	ldr	r2, [pc, #184]	; (8009174 <HAL_GPIO_Init+0x238>)
 80090bc:	f043 0302 	orr.w	r3, r3, #2
 80090c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80090c4:	4b2b      	ldr	r3, [pc, #172]	; (8009174 <HAL_GPIO_Init+0x238>)
 80090c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80090ca:	f003 0302 	and.w	r3, r3, #2
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80090d2:	4a29      	ldr	r2, [pc, #164]	; (8009178 <HAL_GPIO_Init+0x23c>)
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	089b      	lsrs	r3, r3, #2
 80090d8:	3302      	adds	r3, #2
 80090da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	220f      	movs	r2, #15
 80090ea:	fa02 f303 	lsl.w	r3, r2, r3
 80090ee:	43db      	mvns	r3, r3
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	4013      	ands	r3, r2
 80090f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a20      	ldr	r2, [pc, #128]	; (800917c <HAL_GPIO_Init+0x240>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d052      	beq.n	80091a4 <HAL_GPIO_Init+0x268>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a1f      	ldr	r2, [pc, #124]	; (8009180 <HAL_GPIO_Init+0x244>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d031      	beq.n	800916a <HAL_GPIO_Init+0x22e>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a1e      	ldr	r2, [pc, #120]	; (8009184 <HAL_GPIO_Init+0x248>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d02b      	beq.n	8009166 <HAL_GPIO_Init+0x22a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a1d      	ldr	r2, [pc, #116]	; (8009188 <HAL_GPIO_Init+0x24c>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d025      	beq.n	8009162 <HAL_GPIO_Init+0x226>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a1c      	ldr	r2, [pc, #112]	; (800918c <HAL_GPIO_Init+0x250>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d01f      	beq.n	800915e <HAL_GPIO_Init+0x222>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a1b      	ldr	r2, [pc, #108]	; (8009190 <HAL_GPIO_Init+0x254>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d019      	beq.n	800915a <HAL_GPIO_Init+0x21e>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a1a      	ldr	r2, [pc, #104]	; (8009194 <HAL_GPIO_Init+0x258>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d013      	beq.n	8009156 <HAL_GPIO_Init+0x21a>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a19      	ldr	r2, [pc, #100]	; (8009198 <HAL_GPIO_Init+0x25c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d00d      	beq.n	8009152 <HAL_GPIO_Init+0x216>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a18      	ldr	r2, [pc, #96]	; (800919c <HAL_GPIO_Init+0x260>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d007      	beq.n	800914e <HAL_GPIO_Init+0x212>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a17      	ldr	r2, [pc, #92]	; (80091a0 <HAL_GPIO_Init+0x264>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d101      	bne.n	800914a <HAL_GPIO_Init+0x20e>
 8009146:	2309      	movs	r3, #9
 8009148:	e02d      	b.n	80091a6 <HAL_GPIO_Init+0x26a>
 800914a:	230a      	movs	r3, #10
 800914c:	e02b      	b.n	80091a6 <HAL_GPIO_Init+0x26a>
 800914e:	2308      	movs	r3, #8
 8009150:	e029      	b.n	80091a6 <HAL_GPIO_Init+0x26a>
 8009152:	2307      	movs	r3, #7
 8009154:	e027      	b.n	80091a6 <HAL_GPIO_Init+0x26a>
 8009156:	2306      	movs	r3, #6
 8009158:	e025      	b.n	80091a6 <HAL_GPIO_Init+0x26a>
 800915a:	2305      	movs	r3, #5
 800915c:	e023      	b.n	80091a6 <HAL_GPIO_Init+0x26a>
 800915e:	2304      	movs	r3, #4
 8009160:	e021      	b.n	80091a6 <HAL_GPIO_Init+0x26a>
 8009162:	2303      	movs	r3, #3
 8009164:	e01f      	b.n	80091a6 <HAL_GPIO_Init+0x26a>
 8009166:	2302      	movs	r3, #2
 8009168:	e01d      	b.n	80091a6 <HAL_GPIO_Init+0x26a>
 800916a:	2301      	movs	r3, #1
 800916c:	e01b      	b.n	80091a6 <HAL_GPIO_Init+0x26a>
 800916e:	bf00      	nop
 8009170:	58000080 	.word	0x58000080
 8009174:	58024400 	.word	0x58024400
 8009178:	58000400 	.word	0x58000400
 800917c:	58020000 	.word	0x58020000
 8009180:	58020400 	.word	0x58020400
 8009184:	58020800 	.word	0x58020800
 8009188:	58020c00 	.word	0x58020c00
 800918c:	58021000 	.word	0x58021000
 8009190:	58021400 	.word	0x58021400
 8009194:	58021800 	.word	0x58021800
 8009198:	58021c00 	.word	0x58021c00
 800919c:	58022000 	.word	0x58022000
 80091a0:	58022400 	.word	0x58022400
 80091a4:	2300      	movs	r3, #0
 80091a6:	69fa      	ldr	r2, [r7, #28]
 80091a8:	f002 0203 	and.w	r2, r2, #3
 80091ac:	0092      	lsls	r2, r2, #2
 80091ae:	4093      	lsls	r3, r2
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80091b6:	4938      	ldr	r1, [pc, #224]	; (8009298 <HAL_GPIO_Init+0x35c>)
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	089b      	lsrs	r3, r3, #2
 80091bc:	3302      	adds	r3, #2
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	43db      	mvns	r3, r3
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	4013      	ands	r3, r2
 80091d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	69ba      	ldr	r2, [r7, #24]
 80091ec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	43db      	mvns	r3, r3
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	4013      	ands	r3, r2
 80091fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	43db      	mvns	r3, r3
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	4013      	ands	r3, r2
 8009228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	4313      	orrs	r3, r2
 800923c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800923e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	43db      	mvns	r3, r3
 8009252:	69ba      	ldr	r2, [r7, #24]
 8009254:	4013      	ands	r3, r2
 8009256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8009264:	69ba      	ldr	r2, [r7, #24]
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	4313      	orrs	r3, r2
 800926a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800926c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	3301      	adds	r3, #1
 8009278:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	fa22 f303 	lsr.w	r3, r2, r3
 8009284:	2b00      	cmp	r3, #0
 8009286:	f47f ae63 	bne.w	8008f50 <HAL_GPIO_Init+0x14>
  }
}
 800928a:	bf00      	nop
 800928c:	3724      	adds	r7, #36	; 0x24
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	58000400 	.word	0x58000400

0800929c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691a      	ldr	r2, [r3, #16]
 80092ac:	887b      	ldrh	r3, [r7, #2]
 80092ae:	4013      	ands	r3, r2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092b4:	2301      	movs	r3, #1
 80092b6:	73fb      	strb	r3, [r7, #15]
 80092b8:	e001      	b.n	80092be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	460b      	mov	r3, r1
 80092d6:	807b      	strh	r3, [r7, #2]
 80092d8:	4613      	mov	r3, r2
 80092da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80092dc:	787b      	ldrb	r3, [r7, #1]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80092e2:	887a      	ldrh	r2, [r7, #2]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80092e8:	e003      	b.n	80092f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80092ea:	887b      	ldrh	r3, [r7, #2]
 80092ec:	041a      	lsls	r2, r3, #16
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	619a      	str	r2, [r3, #24]
}
 80092f2:	bf00      	nop
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	460b      	mov	r3, r1
 8009308:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	695a      	ldr	r2, [r3, #20]
 800930e:	887b      	ldrh	r3, [r7, #2]
 8009310:	401a      	ands	r2, r3
 8009312:	887b      	ldrh	r3, [r7, #2]
 8009314:	429a      	cmp	r2, r3
 8009316:	d104      	bne.n	8009322 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009318:	887b      	ldrh	r3, [r7, #2]
 800931a:	041a      	lsls	r2, r3, #16
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009320:	e002      	b.n	8009328 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8009322:	887a      	ldrh	r2, [r7, #2]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	619a      	str	r2, [r3, #24]
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	4603      	mov	r3, r0
 800933c:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800933e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009342:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009346:	88fb      	ldrh	r3, [r7, #6]
 8009348:	4013      	ands	r3, r2
 800934a:	2b00      	cmp	r3, #0
 800934c:	d008      	beq.n	8009360 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800934e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009352:	88fb      	ldrh	r3, [r7, #6]
 8009354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009358:	88fb      	ldrh	r3, [r7, #6]
 800935a:	4618      	mov	r0, r3
 800935c:	f7fb fd5c 	bl	8004e18 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009370:	4b0d      	ldr	r3, [pc, #52]	; (80093a8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009372:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009376:	4a0c      	ldr	r2, [pc, #48]	; (80093a8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009378:	f043 0302 	orr.w	r3, r3, #2
 800937c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009380:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009382:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009386:	f003 0302 	and.w	r3, r3, #2
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800938e:	4b07      	ldr	r3, [pc, #28]	; (80093ac <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	4906      	ldr	r1, [pc, #24]	; (80093ac <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4313      	orrs	r3, r2
 8009398:	604b      	str	r3, [r1, #4]
}
 800939a:	bf00      	nop
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	58024400 	.word	0x58024400
 80093ac:	58000400 	.word	0x58000400

080093b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80093b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b2:	b08f      	sub	sp, #60	; 0x3c
 80093b4:	af0a      	add	r7, sp, #40	; 0x28
 80093b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e116      	b.n	80095f0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d106      	bne.n	80093e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f010 fe43 	bl	801a068 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2203      	movs	r2, #3
 80093e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d102      	bne.n	80093fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4618      	mov	r0, r3
 8009402:	f009 fe48 	bl	8013096 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	603b      	str	r3, [r7, #0]
 800940c:	687e      	ldr	r6, [r7, #4]
 800940e:	466d      	mov	r5, sp
 8009410:	f106 0410 	add.w	r4, r6, #16
 8009414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800941a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800941c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009420:	e885 0003 	stmia.w	r5, {r0, r1}
 8009424:	1d33      	adds	r3, r6, #4
 8009426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009428:	6838      	ldr	r0, [r7, #0]
 800942a:	f009 fd1f 	bl	8012e6c <USB_CoreInit>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d005      	beq.n	8009440 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e0d7      	b.n	80095f0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2100      	movs	r1, #0
 8009446:	4618      	mov	r0, r3
 8009448:	f009 fe36 	bl	80130b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800944c:	2300      	movs	r3, #0
 800944e:	73fb      	strb	r3, [r7, #15]
 8009450:	e04a      	b.n	80094e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009452:	7bfa      	ldrb	r2, [r7, #15]
 8009454:	6879      	ldr	r1, [r7, #4]
 8009456:	4613      	mov	r3, r2
 8009458:	00db      	lsls	r3, r3, #3
 800945a:	1a9b      	subs	r3, r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	440b      	add	r3, r1
 8009460:	333d      	adds	r3, #61	; 0x3d
 8009462:	2201      	movs	r2, #1
 8009464:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009466:	7bfa      	ldrb	r2, [r7, #15]
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	4613      	mov	r3, r2
 800946c:	00db      	lsls	r3, r3, #3
 800946e:	1a9b      	subs	r3, r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	440b      	add	r3, r1
 8009474:	333c      	adds	r3, #60	; 0x3c
 8009476:	7bfa      	ldrb	r2, [r7, #15]
 8009478:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800947a:	7bfa      	ldrb	r2, [r7, #15]
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	b298      	uxth	r0, r3
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	4613      	mov	r3, r2
 8009484:	00db      	lsls	r3, r3, #3
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	440b      	add	r3, r1
 800948c:	3342      	adds	r3, #66	; 0x42
 800948e:	4602      	mov	r2, r0
 8009490:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009492:	7bfa      	ldrb	r2, [r7, #15]
 8009494:	6879      	ldr	r1, [r7, #4]
 8009496:	4613      	mov	r3, r2
 8009498:	00db      	lsls	r3, r3, #3
 800949a:	1a9b      	subs	r3, r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	440b      	add	r3, r1
 80094a0:	333f      	adds	r3, #63	; 0x3f
 80094a2:	2200      	movs	r2, #0
 80094a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80094a6:	7bfa      	ldrb	r2, [r7, #15]
 80094a8:	6879      	ldr	r1, [r7, #4]
 80094aa:	4613      	mov	r3, r2
 80094ac:	00db      	lsls	r3, r3, #3
 80094ae:	1a9b      	subs	r3, r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	440b      	add	r3, r1
 80094b4:	3344      	adds	r3, #68	; 0x44
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80094ba:	7bfa      	ldrb	r2, [r7, #15]
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	4613      	mov	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	1a9b      	subs	r3, r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	440b      	add	r3, r1
 80094c8:	3348      	adds	r3, #72	; 0x48
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80094ce:	7bfa      	ldrb	r2, [r7, #15]
 80094d0:	6879      	ldr	r1, [r7, #4]
 80094d2:	4613      	mov	r3, r2
 80094d4:	00db      	lsls	r3, r3, #3
 80094d6:	1a9b      	subs	r3, r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	440b      	add	r3, r1
 80094dc:	3350      	adds	r3, #80	; 0x50
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	3301      	adds	r3, #1
 80094e6:	73fb      	strb	r3, [r7, #15]
 80094e8:	7bfa      	ldrb	r2, [r7, #15]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d3af      	bcc.n	8009452 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094f2:	2300      	movs	r3, #0
 80094f4:	73fb      	strb	r3, [r7, #15]
 80094f6:	e044      	b.n	8009582 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80094f8:	7bfa      	ldrb	r2, [r7, #15]
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	4613      	mov	r3, r2
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	1a9b      	subs	r3, r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	440b      	add	r3, r1
 8009506:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800950a:	2200      	movs	r2, #0
 800950c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800950e:	7bfa      	ldrb	r2, [r7, #15]
 8009510:	6879      	ldr	r1, [r7, #4]
 8009512:	4613      	mov	r3, r2
 8009514:	00db      	lsls	r3, r3, #3
 8009516:	1a9b      	subs	r3, r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	440b      	add	r3, r1
 800951c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009520:	7bfa      	ldrb	r2, [r7, #15]
 8009522:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009524:	7bfa      	ldrb	r2, [r7, #15]
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	4613      	mov	r3, r2
 800952a:	00db      	lsls	r3, r3, #3
 800952c:	1a9b      	subs	r3, r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	440b      	add	r3, r1
 8009532:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009536:	2200      	movs	r2, #0
 8009538:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800953a:	7bfa      	ldrb	r2, [r7, #15]
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	4613      	mov	r3, r2
 8009540:	00db      	lsls	r3, r3, #3
 8009542:	1a9b      	subs	r3, r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	440b      	add	r3, r1
 8009548:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800954c:	2200      	movs	r2, #0
 800954e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009550:	7bfa      	ldrb	r2, [r7, #15]
 8009552:	6879      	ldr	r1, [r7, #4]
 8009554:	4613      	mov	r3, r2
 8009556:	00db      	lsls	r3, r3, #3
 8009558:	1a9b      	subs	r3, r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	440b      	add	r3, r1
 800955e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009566:	7bfa      	ldrb	r2, [r7, #15]
 8009568:	6879      	ldr	r1, [r7, #4]
 800956a:	4613      	mov	r3, r2
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	1a9b      	subs	r3, r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	440b      	add	r3, r1
 8009574:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	3301      	adds	r3, #1
 8009580:	73fb      	strb	r3, [r7, #15]
 8009582:	7bfa      	ldrb	r2, [r7, #15]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	429a      	cmp	r2, r3
 800958a:	d3b5      	bcc.n	80094f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	603b      	str	r3, [r7, #0]
 8009592:	687e      	ldr	r6, [r7, #4]
 8009594:	466d      	mov	r5, sp
 8009596:	f106 0410 	add.w	r4, r6, #16
 800959a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800959c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800959e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80095a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80095aa:	1d33      	adds	r3, r6, #4
 80095ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095ae:	6838      	ldr	r0, [r7, #0]
 80095b0:	f009 fdac 	bl	801310c <USB_DevInit>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d005      	beq.n	80095c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2202      	movs	r2, #2
 80095be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e014      	b.n	80095f0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d102      	bne.n	80095e4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f001 f8be 	bl	800a760 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f00a fdeb 	bl	80141c4 <USB_DevDisconnect>

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800960c:	2b01      	cmp	r3, #1
 800960e:	d101      	bne.n	8009614 <HAL_PCD_Start+0x1c>
 8009610:	2302      	movs	r3, #2
 8009612:	e020      	b.n	8009656 <HAL_PCD_Start+0x5e>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009620:	2b01      	cmp	r3, #1
 8009622:	d109      	bne.n	8009638 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009628:	2b01      	cmp	r3, #1
 800962a:	d005      	beq.n	8009638 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009630:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4618      	mov	r0, r3
 800963e:	f00a fda9 	bl	8014194 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4618      	mov	r0, r3
 8009648:	f009 fd14 	bl	8013074 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800965e:	b590      	push	{r4, r7, lr}
 8009660:	b08d      	sub	sp, #52	; 0x34
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4618      	mov	r0, r3
 8009676:	f00a fe50 	bl	801431a <USB_GetMode>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	f040 83ca 	bne.w	8009e16 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4618      	mov	r0, r3
 8009688:	f00a fdb4 	bl	80141f4 <USB_ReadInterrupts>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	f000 83c0 	beq.w	8009e14 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4618      	mov	r0, r3
 800969a:	f00a fdab 	bl	80141f4 <USB_ReadInterrupts>
 800969e:	4603      	mov	r3, r0
 80096a0:	f003 0302 	and.w	r3, r3, #2
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d107      	bne.n	80096b8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	695a      	ldr	r2, [r3, #20]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f002 0202 	and.w	r2, r2, #2
 80096b6:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4618      	mov	r0, r3
 80096be:	f00a fd99 	bl	80141f4 <USB_ReadInterrupts>
 80096c2:	4603      	mov	r3, r0
 80096c4:	f003 0310 	and.w	r3, r3, #16
 80096c8:	2b10      	cmp	r3, #16
 80096ca:	d161      	bne.n	8009790 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	699a      	ldr	r2, [r3, #24]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f022 0210 	bic.w	r2, r2, #16
 80096da:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80096dc:	6a3b      	ldr	r3, [r7, #32]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	f003 020f 	and.w	r2, r3, #15
 80096e8:	4613      	mov	r3, r2
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	1a9b      	subs	r3, r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	4413      	add	r3, r2
 80096f8:	3304      	adds	r3, #4
 80096fa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	0c5b      	lsrs	r3, r3, #17
 8009700:	f003 030f 	and.w	r3, r3, #15
 8009704:	2b02      	cmp	r3, #2
 8009706:	d124      	bne.n	8009752 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009708:	69ba      	ldr	r2, [r7, #24]
 800970a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800970e:	4013      	ands	r3, r2
 8009710:	2b00      	cmp	r3, #0
 8009712:	d035      	beq.n	8009780 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	091b      	lsrs	r3, r3, #4
 800971c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800971e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009722:	b29b      	uxth	r3, r3
 8009724:	461a      	mov	r2, r3
 8009726:	6a38      	ldr	r0, [r7, #32]
 8009728:	f00a fc11 	bl	8013f4e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	68da      	ldr	r2, [r3, #12]
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	091b      	lsrs	r3, r3, #4
 8009734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009738:	441a      	add	r2, r3
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	699a      	ldr	r2, [r3, #24]
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	091b      	lsrs	r3, r3, #4
 8009746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800974a:	441a      	add	r2, r3
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	619a      	str	r2, [r3, #24]
 8009750:	e016      	b.n	8009780 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	0c5b      	lsrs	r3, r3, #17
 8009756:	f003 030f 	and.w	r3, r3, #15
 800975a:	2b06      	cmp	r3, #6
 800975c:	d110      	bne.n	8009780 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009764:	2208      	movs	r2, #8
 8009766:	4619      	mov	r1, r3
 8009768:	6a38      	ldr	r0, [r7, #32]
 800976a:	f00a fbf0 	bl	8013f4e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	699a      	ldr	r2, [r3, #24]
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	091b      	lsrs	r3, r3, #4
 8009776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800977a:	441a      	add	r2, r3
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	699a      	ldr	r2, [r3, #24]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f042 0210 	orr.w	r2, r2, #16
 800978e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4618      	mov	r0, r3
 8009796:	f00a fd2d 	bl	80141f4 <USB_ReadInterrupts>
 800979a:	4603      	mov	r3, r0
 800979c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80097a4:	d16e      	bne.n	8009884 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80097a6:	2300      	movs	r3, #0
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f00a fd33 	bl	801421a <USB_ReadDevAllOutEpInterrupt>
 80097b4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80097b6:	e062      	b.n	800987e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80097b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d057      	beq.n	8009872 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c8:	b2d2      	uxtb	r2, r2
 80097ca:	4611      	mov	r1, r2
 80097cc:	4618      	mov	r0, r3
 80097ce:	f00a fd58 	bl	8014282 <USB_ReadDevOutEPInterrupt>
 80097d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00c      	beq.n	80097f8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ea:	461a      	mov	r2, r3
 80097ec:	2301      	movs	r3, #1
 80097ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80097f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fe0a 	bl	800a40c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	f003 0308 	and.w	r3, r3, #8
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00c      	beq.n	800981c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980e:	461a      	mov	r2, r3
 8009810:	2308      	movs	r3, #8
 8009812:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 ff04 	bl	800a624 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	f003 0310 	and.w	r3, r3, #16
 8009822:	2b00      	cmp	r3, #0
 8009824:	d008      	beq.n	8009838 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009832:	461a      	mov	r2, r3
 8009834:	2310      	movs	r3, #16
 8009836:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f003 0320 	and.w	r3, r3, #32
 800983e:	2b00      	cmp	r3, #0
 8009840:	d008      	beq.n	8009854 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	4413      	add	r3, r2
 800984a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800984e:	461a      	mov	r2, r3
 8009850:	2320      	movs	r3, #32
 8009852:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d009      	beq.n	8009872 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	4413      	add	r3, r2
 8009866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800986a:	461a      	mov	r2, r3
 800986c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009870:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	3301      	adds	r3, #1
 8009876:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	085b      	lsrs	r3, r3, #1
 800987c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009880:	2b00      	cmp	r3, #0
 8009882:	d199      	bne.n	80097b8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4618      	mov	r0, r3
 800988a:	f00a fcb3 	bl	80141f4 <USB_ReadInterrupts>
 800988e:	4603      	mov	r3, r0
 8009890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009894:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009898:	f040 80c0 	bne.w	8009a1c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f00a fcd4 	bl	801424e <USB_ReadDevAllInEpInterrupt>
 80098a6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80098a8:	2300      	movs	r3, #0
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80098ac:	e0b2      	b.n	8009a14 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 80a7 	beq.w	8009a08 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098c0:	b2d2      	uxtb	r2, r2
 80098c2:	4611      	mov	r1, r2
 80098c4:	4618      	mov	r0, r3
 80098c6:	f00a fcfa 	bl	80142be <USB_ReadDevInEPInterrupt>
 80098ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d057      	beq.n	8009986 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	f003 030f 	and.w	r3, r3, #15
 80098dc:	2201      	movs	r2, #1
 80098de:	fa02 f303 	lsl.w	r3, r2, r3
 80098e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	43db      	mvns	r3, r3
 80098f0:	69f9      	ldr	r1, [r7, #28]
 80098f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098f6:	4013      	ands	r3, r2
 80098f8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009906:	461a      	mov	r2, r3
 8009908:	2301      	movs	r3, #1
 800990a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d132      	bne.n	800997a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009918:	4613      	mov	r3, r2
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	1a9b      	subs	r3, r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	440b      	add	r3, r1
 8009922:	3348      	adds	r3, #72	; 0x48
 8009924:	6819      	ldr	r1, [r3, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800992a:	4613      	mov	r3, r2
 800992c:	00db      	lsls	r3, r3, #3
 800992e:	1a9b      	subs	r3, r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4403      	add	r3, r0
 8009934:	3344      	adds	r3, #68	; 0x44
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4419      	add	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993e:	4613      	mov	r3, r2
 8009940:	00db      	lsls	r3, r3, #3
 8009942:	1a9b      	subs	r3, r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4403      	add	r3, r0
 8009948:	3348      	adds	r3, #72	; 0x48
 800994a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994e:	2b00      	cmp	r3, #0
 8009950:	d113      	bne.n	800997a <HAL_PCD_IRQHandler+0x31c>
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009956:	4613      	mov	r3, r2
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	1a9b      	subs	r3, r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	440b      	add	r3, r1
 8009960:	3350      	adds	r3, #80	; 0x50
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d108      	bne.n	800997a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6818      	ldr	r0, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009972:	461a      	mov	r2, r3
 8009974:	2101      	movs	r1, #1
 8009976:	f00a fd03 	bl	8014380 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	b2db      	uxtb	r3, r3
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f010 fbf0 	bl	801a166 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f003 0308 	and.w	r3, r3, #8
 800998c:	2b00      	cmp	r3, #0
 800998e:	d008      	beq.n	80099a2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999c:	461a      	mov	r2, r3
 800999e:	2308      	movs	r3, #8
 80099a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	f003 0310 	and.w	r3, r3, #16
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d008      	beq.n	80099be <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b8:	461a      	mov	r2, r3
 80099ba:	2310      	movs	r3, #16
 80099bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d008      	beq.n	80099da <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d4:	461a      	mov	r2, r3
 80099d6:	2340      	movs	r3, #64	; 0x40
 80099d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f003 0302 	and.w	r3, r3, #2
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d008      	beq.n	80099f6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f0:	461a      	mov	r2, r3
 80099f2:	2302      	movs	r3, #2
 80099f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d003      	beq.n	8009a08 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fc75 	bl	800a2f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a10:	085b      	lsrs	r3, r3, #1
 8009a12:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f47f af49 	bne.w	80098ae <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f00a fbe7 	bl	80141f4 <USB_ReadInterrupts>
 8009a26:	4603      	mov	r3, r0
 8009a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a30:	d122      	bne.n	8009a78 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	69fa      	ldr	r2, [r7, #28]
 8009a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a40:	f023 0301 	bic.w	r3, r3, #1
 8009a44:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d108      	bne.n	8009a62 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009a58:	2100      	movs	r1, #0
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fea4 	bl	800a7a8 <HAL_PCDEx_LPM_Callback>
 8009a60:	e002      	b.n	8009a68 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f010 fbf6 	bl	801a254 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	695a      	ldr	r2, [r3, #20]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f00a fbb9 	bl	80141f4 <USB_ReadInterrupts>
 8009a82:	4603      	mov	r3, r0
 8009a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a8c:	d112      	bne.n	8009ab4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d102      	bne.n	8009aa4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f010 fbb2 	bl	801a208 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	695a      	ldr	r2, [r3, #20]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009ab2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f00a fb9b 	bl	80141f4 <USB_ReadInterrupts>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ac8:	d121      	bne.n	8009b0e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	695a      	ldr	r2, [r3, #20]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009ad8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d111      	bne.n	8009b08 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af2:	089b      	lsrs	r3, r3, #2
 8009af4:	f003 020f 	and.w	r2, r3, #15
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009afe:	2101      	movs	r1, #1
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fe51 	bl	800a7a8 <HAL_PCDEx_LPM_Callback>
 8009b06:	e002      	b.n	8009b0e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f010 fb7d 	bl	801a208 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f00a fb6e 	bl	80141f4 <USB_ReadInterrupts>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b22:	f040 80c7 	bne.w	8009cb4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	69fa      	ldr	r2, [r7, #28]
 8009b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b34:	f023 0301 	bic.w	r3, r3, #1
 8009b38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2110      	movs	r1, #16
 8009b40:	4618      	mov	r0, r3
 8009b42:	f009 fc41 	bl	80133c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b46:	2300      	movs	r3, #0
 8009b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b4a:	e056      	b.n	8009bfa <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4e:	015a      	lsls	r2, r3, #5
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	4413      	add	r3, r2
 8009b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b58:	461a      	mov	r2, r3
 8009b5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b62:	015a      	lsls	r2, r3, #5
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	4413      	add	r3, r2
 8009b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b70:	0151      	lsls	r1, r2, #5
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	440a      	add	r2, r1
 8009b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b7e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b82:	015a      	lsls	r2, r3, #5
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	4413      	add	r3, r2
 8009b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b90:	0151      	lsls	r1, r2, #5
 8009b92:	69fa      	ldr	r2, [r7, #28]
 8009b94:	440a      	add	r2, r1
 8009b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bac:	461a      	mov	r2, r3
 8009bae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bb2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	015a      	lsls	r2, r3, #5
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	4413      	add	r3, r2
 8009bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bc4:	0151      	lsls	r1, r2, #5
 8009bc6:	69fa      	ldr	r2, [r7, #28]
 8009bc8:	440a      	add	r2, r1
 8009bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009be4:	0151      	lsls	r1, r2, #5
 8009be6:	69fa      	ldr	r2, [r7, #28]
 8009be8:	440a      	add	r2, r1
 8009bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009bf2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d3a3      	bcc.n	8009b4c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	69fa      	ldr	r2, [r7, #28]
 8009c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c12:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009c16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d016      	beq.n	8009c4e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c2a:	69fa      	ldr	r2, [r7, #28]
 8009c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c30:	f043 030b 	orr.w	r3, r3, #11
 8009c34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c40:	69fa      	ldr	r2, [r7, #28]
 8009c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c46:	f043 030b 	orr.w	r3, r3, #11
 8009c4a:	6453      	str	r3, [r2, #68]	; 0x44
 8009c4c:	e015      	b.n	8009c7a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c54:	695a      	ldr	r2, [r3, #20]
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	f242 032b 	movw	r3, #8235	; 0x202b
 8009c62:	4313      	orrs	r3, r2
 8009c64:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	69fa      	ldr	r2, [r7, #28]
 8009c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c74:	f043 030b 	orr.w	r3, r3, #11
 8009c78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	69fa      	ldr	r2, [r7, #28]
 8009c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f00a fb6e 	bl	8014380 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	695a      	ldr	r2, [r3, #20]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f00a fa9b 	bl	80141f4 <USB_ReadInterrupts>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cc8:	d124      	bne.n	8009d14 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f00a fb32 	bl	8014338 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f009 fbd6 	bl	801348a <USB_GetDevSpeed>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681c      	ldr	r4, [r3, #0]
 8009cea:	f001 fdd9 	bl	800b8a0 <HAL_RCC_GetHCLKFreq>
 8009cee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f009 f919 	bl	8012f30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f010 fa59 	bl	801a1b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	695a      	ldr	r2, [r3, #20]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f00a fa6b 	bl	80141f4 <USB_ReadInterrupts>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	f003 0308 	and.w	r3, r3, #8
 8009d24:	2b08      	cmp	r3, #8
 8009d26:	d10a      	bne.n	8009d3e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f010 fa36 	bl	801a19a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	695a      	ldr	r2, [r3, #20]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f002 0208 	and.w	r2, r2, #8
 8009d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f00a fa56 	bl	80141f4 <USB_ReadInterrupts>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d52:	d10f      	bne.n	8009d74 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f010 fa98 	bl	801a294 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	695a      	ldr	r2, [r3, #20]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009d72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f00a fa3b 	bl	80141f4 <USB_ReadInterrupts>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d88:	d10f      	bne.n	8009daa <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f010 fa6b 	bl	801a270 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	695a      	ldr	r2, [r3, #20]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f00a fa20 	bl	80141f4 <USB_ReadInterrupts>
 8009db4:	4603      	mov	r3, r0
 8009db6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dbe:	d10a      	bne.n	8009dd6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f010 fa79 	bl	801a2b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	695a      	ldr	r2, [r3, #20]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f00a fa0a 	bl	80141f4 <USB_ReadInterrupts>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f003 0304 	and.w	r3, r3, #4
 8009de6:	2b04      	cmp	r3, #4
 8009de8:	d115      	bne.n	8009e16 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	f003 0304 	and.w	r3, r3, #4
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f010 fa69 	bl	801a2d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	6859      	ldr	r1, [r3, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	69ba      	ldr	r2, [r7, #24]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	605a      	str	r2, [r3, #4]
 8009e12:	e000      	b.n	8009e16 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8009e14:	bf00      	nop
    }
  }
}
 8009e16:	3734      	adds	r7, #52	; 0x34
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd90      	pop	{r4, r7, pc}

08009e1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d101      	bne.n	8009e36 <HAL_PCD_SetAddress+0x1a>
 8009e32:	2302      	movs	r3, #2
 8009e34:	e013      	b.n	8009e5e <HAL_PCD_SetAddress+0x42>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	78fa      	ldrb	r2, [r7, #3]
 8009e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	78fa      	ldrb	r2, [r7, #3]
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f00a f97a 	bl	8014148 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	4608      	mov	r0, r1
 8009e70:	4611      	mov	r1, r2
 8009e72:	461a      	mov	r2, r3
 8009e74:	4603      	mov	r3, r0
 8009e76:	70fb      	strb	r3, [r7, #3]
 8009e78:	460b      	mov	r3, r1
 8009e7a:	803b      	strh	r3, [r7, #0]
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	da0f      	bge.n	8009eac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e8c:	78fb      	ldrb	r3, [r7, #3]
 8009e8e:	f003 020f 	and.w	r2, r3, #15
 8009e92:	4613      	mov	r3, r2
 8009e94:	00db      	lsls	r3, r3, #3
 8009e96:	1a9b      	subs	r3, r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	3338      	adds	r3, #56	; 0x38
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	705a      	strb	r2, [r3, #1]
 8009eaa:	e00f      	b.n	8009ecc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009eac:	78fb      	ldrb	r3, [r7, #3]
 8009eae:	f003 020f 	and.w	r2, r3, #15
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	00db      	lsls	r3, r3, #3
 8009eb6:	1a9b      	subs	r3, r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009ecc:	78fb      	ldrb	r3, [r7, #3]
 8009ece:	f003 030f 	and.w	r3, r3, #15
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009ed8:	883a      	ldrh	r2, [r7, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	78ba      	ldrb	r2, [r7, #2]
 8009ee2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	785b      	ldrb	r3, [r3, #1]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d004      	beq.n	8009ef6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009ef6:	78bb      	ldrb	r3, [r7, #2]
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d102      	bne.n	8009f02 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d101      	bne.n	8009f10 <HAL_PCD_EP_Open+0xaa>
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	e00e      	b.n	8009f2e <HAL_PCD_EP_Open+0xc8>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68f9      	ldr	r1, [r7, #12]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f009 fad8 	bl	80134d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009f2c:	7afb      	ldrb	r3, [r7, #11]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b084      	sub	sp, #16
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009f42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	da0f      	bge.n	8009f6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f4a:	78fb      	ldrb	r3, [r7, #3]
 8009f4c:	f003 020f 	and.w	r2, r3, #15
 8009f50:	4613      	mov	r3, r2
 8009f52:	00db      	lsls	r3, r3, #3
 8009f54:	1a9b      	subs	r3, r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	3338      	adds	r3, #56	; 0x38
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	3304      	adds	r3, #4
 8009f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2201      	movs	r2, #1
 8009f66:	705a      	strb	r2, [r3, #1]
 8009f68:	e00f      	b.n	8009f8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f6a:	78fb      	ldrb	r3, [r7, #3]
 8009f6c:	f003 020f 	and.w	r2, r3, #15
 8009f70:	4613      	mov	r3, r2
 8009f72:	00db      	lsls	r3, r3, #3
 8009f74:	1a9b      	subs	r3, r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	4413      	add	r3, r2
 8009f80:	3304      	adds	r3, #4
 8009f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009f8a:	78fb      	ldrb	r3, [r7, #3]
 8009f8c:	f003 030f 	and.w	r3, r3, #15
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d101      	bne.n	8009fa4 <HAL_PCD_EP_Close+0x6e>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	e00e      	b.n	8009fc2 <HAL_PCD_EP_Close+0x8c>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68f9      	ldr	r1, [r7, #12]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f009 fb16 	bl	80135e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b086      	sub	sp, #24
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	60f8      	str	r0, [r7, #12]
 8009fd2:	607a      	str	r2, [r7, #4]
 8009fd4:	603b      	str	r3, [r7, #0]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009fda:	7afb      	ldrb	r3, [r7, #11]
 8009fdc:	f003 020f 	and.w	r2, r3, #15
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	00db      	lsls	r3, r3, #3
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	4413      	add	r3, r2
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	683a      	ldr	r2, [r7, #0]
 8009ffe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2200      	movs	r2, #0
 800a004:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2200      	movs	r2, #0
 800a00a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a00c:	7afb      	ldrb	r3, [r7, #11]
 800a00e:	f003 030f 	and.w	r3, r3, #15
 800a012:	b2da      	uxtb	r2, r3
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d102      	bne.n	800a026 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a026:	7afb      	ldrb	r3, [r7, #11]
 800a028:	f003 030f 	and.w	r3, r3, #15
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d109      	bne.n	800a044 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	461a      	mov	r2, r3
 800a03c:	6979      	ldr	r1, [r7, #20]
 800a03e:	f009 fdf9 	bl	8013c34 <USB_EP0StartXfer>
 800a042:	e008      	b.n	800a056 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6818      	ldr	r0, [r3, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	461a      	mov	r2, r3
 800a050:	6979      	ldr	r1, [r7, #20]
 800a052:	f009 fba3 	bl	801379c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3718      	adds	r7, #24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	f003 020f 	and.w	r2, r3, #15
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	4613      	mov	r3, r2
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	1a9b      	subs	r3, r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a082:	681b      	ldr	r3, [r3, #0]
}
 800a084:	4618      	mov	r0, r3
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	607a      	str	r2, [r7, #4]
 800a09a:	603b      	str	r3, [r7, #0]
 800a09c:	460b      	mov	r3, r1
 800a09e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0a0:	7afb      	ldrb	r3, [r7, #11]
 800a0a2:	f003 020f 	and.w	r2, r3, #15
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	00db      	lsls	r3, r3, #3
 800a0aa:	1a9b      	subs	r3, r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	3338      	adds	r3, #56	; 0x38
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0d0:	7afb      	ldrb	r3, [r7, #11]
 800a0d2:	f003 030f 	and.w	r3, r3, #15
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d102      	bne.n	800a0ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a0ea:	7afb      	ldrb	r3, [r7, #11]
 800a0ec:	f003 030f 	and.w	r3, r3, #15
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d109      	bne.n	800a108 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6818      	ldr	r0, [r3, #0]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	461a      	mov	r2, r3
 800a100:	6979      	ldr	r1, [r7, #20]
 800a102:	f009 fd97 	bl	8013c34 <USB_EP0StartXfer>
 800a106:	e008      	b.n	800a11a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6818      	ldr	r0, [r3, #0]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	b2db      	uxtb	r3, r3
 800a112:	461a      	mov	r2, r3
 800a114:	6979      	ldr	r1, [r7, #20]
 800a116:	f009 fb41 	bl	801379c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3718      	adds	r7, #24
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	f003 020f 	and.w	r2, r3, #15
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d901      	bls.n	800a142 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e050      	b.n	800a1e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a146:	2b00      	cmp	r3, #0
 800a148:	da0f      	bge.n	800a16a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a14a:	78fb      	ldrb	r3, [r7, #3]
 800a14c:	f003 020f 	and.w	r2, r3, #15
 800a150:	4613      	mov	r3, r2
 800a152:	00db      	lsls	r3, r3, #3
 800a154:	1a9b      	subs	r3, r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	3338      	adds	r3, #56	; 0x38
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	4413      	add	r3, r2
 800a15e:	3304      	adds	r3, #4
 800a160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2201      	movs	r2, #1
 800a166:	705a      	strb	r2, [r3, #1]
 800a168:	e00d      	b.n	800a186 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a16a:	78fa      	ldrb	r2, [r7, #3]
 800a16c:	4613      	mov	r3, r2
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	1a9b      	subs	r3, r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	4413      	add	r3, r2
 800a17c:	3304      	adds	r3, #4
 800a17e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2201      	movs	r2, #1
 800a18a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a18c:	78fb      	ldrb	r3, [r7, #3]
 800a18e:	f003 030f 	and.w	r3, r3, #15
 800a192:	b2da      	uxtb	r2, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d101      	bne.n	800a1a6 <HAL_PCD_EP_SetStall+0x82>
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	e01e      	b.n	800a1e4 <HAL_PCD_EP_SetStall+0xc0>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68f9      	ldr	r1, [r7, #12]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f009 fef3 	bl	8013fa0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a1ba:	78fb      	ldrb	r3, [r7, #3]
 800a1bc:	f003 030f 	and.w	r3, r3, #15
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6818      	ldr	r0, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	b2d9      	uxtb	r1, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	f00a f8d3 	bl	8014380 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	f003 020f 	and.w	r2, r3, #15
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	429a      	cmp	r2, r3
 800a204:	d901      	bls.n	800a20a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e042      	b.n	800a290 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a20a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	da0f      	bge.n	800a232 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a212:	78fb      	ldrb	r3, [r7, #3]
 800a214:	f003 020f 	and.w	r2, r3, #15
 800a218:	4613      	mov	r3, r2
 800a21a:	00db      	lsls	r3, r3, #3
 800a21c:	1a9b      	subs	r3, r3, r2
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	3338      	adds	r3, #56	; 0x38
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	4413      	add	r3, r2
 800a226:	3304      	adds	r3, #4
 800a228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2201      	movs	r2, #1
 800a22e:	705a      	strb	r2, [r3, #1]
 800a230:	e00f      	b.n	800a252 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a232:	78fb      	ldrb	r3, [r7, #3]
 800a234:	f003 020f 	and.w	r2, r3, #15
 800a238:	4613      	mov	r3, r2
 800a23a:	00db      	lsls	r3, r3, #3
 800a23c:	1a9b      	subs	r3, r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	4413      	add	r3, r2
 800a248:	3304      	adds	r3, #4
 800a24a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a258:	78fb      	ldrb	r3, [r7, #3]
 800a25a:	f003 030f 	and.w	r3, r3, #15
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d101      	bne.n	800a272 <HAL_PCD_EP_ClrStall+0x86>
 800a26e:	2302      	movs	r3, #2
 800a270:	e00e      	b.n	800a290 <HAL_PCD_EP_ClrStall+0xa4>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68f9      	ldr	r1, [r7, #12]
 800a280:	4618      	mov	r0, r3
 800a282:	f009 fefb 	bl	801407c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d101      	bne.n	800a2b2 <HAL_PCD_EP_Flush+0x1a>
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	e01b      	b.n	800a2ea <HAL_PCD_EP_Flush+0x52>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800a2ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	da09      	bge.n	800a2d6 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	78fb      	ldrb	r3, [r7, #3]
 800a2c8:	f003 030f 	and.w	r3, r3, #15
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	f009 f87a 	bl	80133c8 <USB_FlushTxFifo>
 800a2d4:	e004      	b.n	800a2e0 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f009 f89a 	bl	8013414 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b08a      	sub	sp, #40	; 0x28
 800a2f6:	af02      	add	r7, sp, #8
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	4613      	mov	r3, r2
 800a30a:	00db      	lsls	r3, r3, #3
 800a30c:	1a9b      	subs	r3, r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	3338      	adds	r3, #56	; 0x38
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	4413      	add	r3, r2
 800a316:	3304      	adds	r3, #4
 800a318:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	699a      	ldr	r2, [r3, #24]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	429a      	cmp	r2, r3
 800a324:	d901      	bls.n	800a32a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e06c      	b.n	800a404 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	695a      	ldr	r2, [r3, #20]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	69fa      	ldr	r2, [r7, #28]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d902      	bls.n	800a346 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	3303      	adds	r3, #3
 800a34a:	089b      	lsrs	r3, r3, #2
 800a34c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a34e:	e02b      	b.n	800a3a8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	695a      	ldr	r2, [r3, #20]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	699b      	ldr	r3, [r3, #24]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	69fa      	ldr	r2, [r7, #28]
 800a362:	429a      	cmp	r2, r3
 800a364:	d902      	bls.n	800a36c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	3303      	adds	r3, #3
 800a370:	089b      	lsrs	r3, r3, #2
 800a372:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	68d9      	ldr	r1, [r3, #12]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a384:	b2db      	uxtb	r3, r3
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	4603      	mov	r3, r0
 800a38a:	6978      	ldr	r0, [r7, #20]
 800a38c:	f009 fdaa 	bl	8013ee4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	68da      	ldr	r2, [r3, #12]
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	441a      	add	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	699a      	ldr	r2, [r3, #24]
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	441a      	add	r2, r3
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	69ba      	ldr	r2, [r7, #24]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d809      	bhi.n	800a3d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	699a      	ldr	r2, [r3, #24]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d203      	bcs.n	800a3d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	695b      	ldr	r3, [r3, #20]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1be      	bne.n	800a350 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	695a      	ldr	r2, [r3, #20]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d811      	bhi.n	800a402 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	f003 030f 	and.w	r3, r3, #15
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	43db      	mvns	r3, r3
 800a3f8:	6939      	ldr	r1, [r7, #16]
 800a3fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3fe:	4013      	ands	r3, r2
 800a400:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3720      	adds	r7, #32
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	333c      	adds	r3, #60	; 0x3c
 800a424:	3304      	adds	r3, #4
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	015a      	lsls	r2, r3, #5
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	4413      	add	r3, r2
 800a432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	f040 80a0 	bne.w	800a584 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	f003 0308 	and.w	r3, r3, #8
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d015      	beq.n	800a47a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4a72      	ldr	r2, [pc, #456]	; (800a61c <PCD_EP_OutXfrComplete_int+0x210>)
 800a452:	4293      	cmp	r3, r2
 800a454:	f240 80dd 	bls.w	800a612 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f000 80d7 	beq.w	800a612 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a470:	461a      	mov	r2, r3
 800a472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a476:	6093      	str	r3, [r2, #8]
 800a478:	e0cb      	b.n	800a612 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	f003 0320 	and.w	r3, r3, #32
 800a480:	2b00      	cmp	r3, #0
 800a482:	d009      	beq.n	800a498 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a490:	461a      	mov	r2, r3
 800a492:	2320      	movs	r3, #32
 800a494:	6093      	str	r3, [r2, #8]
 800a496:	e0bc      	b.n	800a612 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f040 80b7 	bne.w	800a612 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	4a5d      	ldr	r2, [pc, #372]	; (800a61c <PCD_EP_OutXfrComplete_int+0x210>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d90f      	bls.n	800a4cc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00a      	beq.n	800a4cc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4c8:	6093      	str	r3, [r2, #8]
 800a4ca:	e0a2      	b.n	800a612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	00db      	lsls	r3, r3, #3
 800a4d4:	1a9b      	subs	r3, r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	440b      	add	r3, r1
 800a4da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a4de:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	0159      	lsls	r1, r3, #5
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	440b      	add	r3, r1
 800a4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a4f2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	1a9b      	subs	r3, r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4403      	add	r3, r0
 800a502:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a506:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a508:	6879      	ldr	r1, [r7, #4]
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	4613      	mov	r3, r2
 800a50e:	00db      	lsls	r3, r3, #3
 800a510:	1a9b      	subs	r3, r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	440b      	add	r3, r1
 800a516:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a51a:	6819      	ldr	r1, [r3, #0]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	4613      	mov	r3, r2
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	1a9b      	subs	r3, r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4403      	add	r3, r0
 800a52a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4419      	add	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	683a      	ldr	r2, [r7, #0]
 800a536:	4613      	mov	r3, r2
 800a538:	00db      	lsls	r3, r3, #3
 800a53a:	1a9b      	subs	r3, r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4403      	add	r3, r0
 800a540:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a544:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d114      	bne.n	800a576 <PCD_EP_OutXfrComplete_int+0x16a>
 800a54c:	6879      	ldr	r1, [r7, #4]
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	4613      	mov	r3, r2
 800a552:	00db      	lsls	r3, r3, #3
 800a554:	1a9b      	subs	r3, r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	440b      	add	r3, r1
 800a55a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d108      	bne.n	800a576 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6818      	ldr	r0, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a56e:	461a      	mov	r2, r3
 800a570:	2101      	movs	r1, #1
 800a572:	f009 ff05 	bl	8014380 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	4619      	mov	r1, r3
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f00f fdd7 	bl	801a130 <HAL_PCD_DataOutStageCallback>
 800a582:	e046      	b.n	800a612 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	4a26      	ldr	r2, [pc, #152]	; (800a620 <PCD_EP_OutXfrComplete_int+0x214>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d124      	bne.n	800a5d6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00a      	beq.n	800a5ac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	015a      	lsls	r2, r3, #5
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	4413      	add	r3, r2
 800a59e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5a8:	6093      	str	r3, [r2, #8]
 800a5aa:	e032      	b.n	800a612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f003 0320 	and.w	r3, r3, #32
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d008      	beq.n	800a5c8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	015a      	lsls	r2, r3, #5
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	4413      	add	r3, r2
 800a5be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	2320      	movs	r3, #32
 800a5c6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f00f fdae 	bl	801a130 <HAL_PCD_DataOutStageCallback>
 800a5d4:	e01d      	b.n	800a612 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d114      	bne.n	800a606 <PCD_EP_OutXfrComplete_int+0x1fa>
 800a5dc:	6879      	ldr	r1, [r7, #4]
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	00db      	lsls	r3, r3, #3
 800a5e4:	1a9b      	subs	r3, r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	440b      	add	r3, r1
 800a5ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d108      	bne.n	800a606 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6818      	ldr	r0, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a5fe:	461a      	mov	r2, r3
 800a600:	2100      	movs	r1, #0
 800a602:	f009 febd 	bl	8014380 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f00f fd8f 	bl	801a130 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	4f54300a 	.word	0x4f54300a
 800a620:	4f54310a 	.word	0x4f54310a

0800a624 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	333c      	adds	r3, #60	; 0x3c
 800a63c:	3304      	adds	r3, #4
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	015a      	lsls	r2, r3, #5
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	4413      	add	r3, r2
 800a64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	4a15      	ldr	r2, [pc, #84]	; (800a6ac <PCD_EP_OutSetupPacket_int+0x88>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d90e      	bls.n	800a678 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a660:	2b00      	cmp	r3, #0
 800a662:	d009      	beq.n	800a678 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	015a      	lsls	r2, r3, #5
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a670:	461a      	mov	r2, r3
 800a672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a676:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f00f fd47 	bl	801a10c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	4a0a      	ldr	r2, [pc, #40]	; (800a6ac <PCD_EP_OutSetupPacket_int+0x88>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d90c      	bls.n	800a6a0 <PCD_EP_OutSetupPacket_int+0x7c>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d108      	bne.n	800a6a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6818      	ldr	r0, [r3, #0]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a698:	461a      	mov	r2, r3
 800a69a:	2101      	movs	r1, #1
 800a69c:	f009 fe70 	bl	8014380 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	4f54300a 	.word	0x4f54300a

0800a6b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	70fb      	strb	r3, [r7, #3]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a6c8:	78fb      	ldrb	r3, [r7, #3]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d107      	bne.n	800a6de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a6ce:	883b      	ldrh	r3, [r7, #0]
 800a6d0:	0419      	lsls	r1, r3, #16
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	430a      	orrs	r2, r1
 800a6da:	629a      	str	r2, [r3, #40]	; 0x28
 800a6dc:	e028      	b.n	800a730 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e4:	0c1b      	lsrs	r3, r3, #16
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	73fb      	strb	r3, [r7, #15]
 800a6f0:	e00d      	b.n	800a70e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
 800a6f8:	3340      	adds	r3, #64	; 0x40
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	0c1b      	lsrs	r3, r3, #16
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	4413      	add	r3, r2
 800a706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	3301      	adds	r3, #1
 800a70c:	73fb      	strb	r3, [r7, #15]
 800a70e:	7bfa      	ldrb	r2, [r7, #15]
 800a710:	78fb      	ldrb	r3, [r7, #3]
 800a712:	3b01      	subs	r3, #1
 800a714:	429a      	cmp	r2, r3
 800a716:	d3ec      	bcc.n	800a6f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a718:	883b      	ldrh	r3, [r7, #0]
 800a71a:	0418      	lsls	r0, r3, #16
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6819      	ldr	r1, [r3, #0]
 800a720:	78fb      	ldrb	r3, [r7, #3]
 800a722:	3b01      	subs	r3, #1
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	4302      	orrs	r2, r0
 800a728:	3340      	adds	r3, #64	; 0x40
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	440b      	add	r3, r1
 800a72e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a73e:	b480      	push	{r7}
 800a740:	b083      	sub	sp, #12
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	460b      	mov	r3, r1
 800a748:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	887a      	ldrh	r2, [r7, #2]
 800a750:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2201      	movs	r2, #1
 800a772:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a78e:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <HAL_PCDEx_ActivateLPM+0x44>)
 800a790:	4313      	orrs	r3, r2
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	10000003 	.word	0x10000003

0800a7a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a7c4:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a04      	ldr	r2, [pc, #16]	; (800a7dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a7ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7ce:	6013      	str	r3, [r2, #0]
}
 800a7d0:	bf00      	nop
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	58024800 	.word	0x58024800

0800a7e0 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d069      	beq.n	800a8c2 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 800a7ee:	4b38      	ldr	r3, [pc, #224]	; (800a8d0 <HAL_PWR_ConfigPVD+0xf0>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4935      	ldr	r1, [pc, #212]	; (800a8d0 <HAL_PWR_ConfigPVD+0xf0>)
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 800a800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a80c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a810:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 800a814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a81c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a824:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 800a828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a836:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 800a838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a846:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a850:	2b00      	cmp	r3, #0
 800a852:	d009      	beq.n	800a868 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 800a854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a85c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a864:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a870:	2b00      	cmp	r3, #0
 800a872:	d009      	beq.n	800a888 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 800a874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a87c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a884:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	f003 0301 	and.w	r3, r3, #1
 800a890:	2b00      	cmp	r3, #0
 800a892:	d007      	beq.n	800a8a4 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 800a894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a89e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8a2:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	f003 0302 	and.w	r3, r3, #2
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d009      	beq.n	800a8c4 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 800a8b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8be:	6053      	str	r3, [r2, #4]
 800a8c0:	e000      	b.n	800a8c4 <HAL_PWR_ConfigPVD+0xe4>
    return;
 800a8c2:	bf00      	nop
  }
}
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	58024800 	.word	0x58024800

0800a8d4 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 800a8d8:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <HAL_PWR_EnablePVD+0x1c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a04      	ldr	r2, [pc, #16]	; (800a8f0 <HAL_PWR_EnablePVD+0x1c>)
 800a8de:	f043 0310 	orr.w	r3, r3, #16
 800a8e2:	6013      	str	r3, [r2, #0]
}
 800a8e4:	bf00      	nop
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	58024800 	.word	0x58024800

0800a8f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a8fc:	4b19      	ldr	r3, [pc, #100]	; (800a964 <HAL_PWREx_ConfigSupply+0x70>)
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	f003 0304 	and.w	r3, r3, #4
 800a904:	2b04      	cmp	r3, #4
 800a906:	d00a      	beq.n	800a91e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a908:	4b16      	ldr	r3, [pc, #88]	; (800a964 <HAL_PWREx_ConfigSupply+0x70>)
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	f003 0307 	and.w	r3, r3, #7
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	429a      	cmp	r2, r3
 800a914:	d001      	beq.n	800a91a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e01f      	b.n	800a95a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	e01d      	b.n	800a95a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a91e:	4b11      	ldr	r3, [pc, #68]	; (800a964 <HAL_PWREx_ConfigSupply+0x70>)
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	f023 0207 	bic.w	r2, r3, #7
 800a926:	490f      	ldr	r1, [pc, #60]	; (800a964 <HAL_PWREx_ConfigSupply+0x70>)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a92e:	f7fa ffa7 	bl	8005880 <HAL_GetTick>
 800a932:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a934:	e009      	b.n	800a94a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a936:	f7fa ffa3 	bl	8005880 <HAL_GetTick>
 800a93a:	4602      	mov	r2, r0
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a944:	d901      	bls.n	800a94a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e007      	b.n	800a95a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a94a:	4b06      	ldr	r3, [pc, #24]	; (800a964 <HAL_PWREx_ConfigSupply+0x70>)
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a956:	d1ee      	bne.n	800a936 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	58024800 	.word	0x58024800

0800a968 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a968:	b480      	push	{r7}
 800a96a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a96c:	4b05      	ldr	r3, [pc, #20]	; (800a984 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	4a04      	ldr	r2, [pc, #16]	; (800a984 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a976:	60d3      	str	r3, [r2, #12]
}
 800a978:	bf00      	nop
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	58024800 	.word	0x58024800

0800a988 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 800a98c:	4b1b      	ldr	r3, [pc, #108]	; (800a9fc <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 0310 	and.w	r3, r3, #16
 800a994:	2b00      	cmp	r3, #0
 800a996:	d014      	beq.n	800a9c2 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 800a998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a99c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9a8:	d10b      	bne.n	800a9c2 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 800a9aa:	f7fa fa75 	bl	8004e98 <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 800a9ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 800a9c2:	4b0e      	ldr	r3, [pc, #56]	; (800a9fc <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d014      	beq.n	800a9f8 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 800a9ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9de:	d10b      	bne.n	800a9f8 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 800a9e0:	f000 f80e 	bl	800aa00 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 800a9e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 800a9f8:	bf00      	nop
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	58024800 	.word	0x58024800

0800aa00 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 800aa00:	b480      	push	{r7}
 800aa02:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 800aa04:	bf00      	nop
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
	...

0800aa10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b08c      	sub	sp, #48	; 0x30
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d101      	bne.n	800aa22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e3ff      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 0301 	and.w	r3, r3, #1
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 8087 	beq.w	800ab3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa30:	4b99      	ldr	r3, [pc, #612]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa38:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa3a:	4b97      	ldr	r3, [pc, #604]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aa3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa42:	2b10      	cmp	r3, #16
 800aa44:	d007      	beq.n	800aa56 <HAL_RCC_OscConfig+0x46>
 800aa46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa48:	2b18      	cmp	r3, #24
 800aa4a:	d110      	bne.n	800aa6e <HAL_RCC_OscConfig+0x5e>
 800aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4e:	f003 0303 	and.w	r3, r3, #3
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d10b      	bne.n	800aa6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa56:	4b90      	ldr	r3, [pc, #576]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d06c      	beq.n	800ab3c <HAL_RCC_OscConfig+0x12c>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d168      	bne.n	800ab3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e3d9      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa76:	d106      	bne.n	800aa86 <HAL_RCC_OscConfig+0x76>
 800aa78:	4b87      	ldr	r3, [pc, #540]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a86      	ldr	r2, [pc, #536]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aa7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	e02e      	b.n	800aae4 <HAL_RCC_OscConfig+0xd4>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10c      	bne.n	800aaa8 <HAL_RCC_OscConfig+0x98>
 800aa8e:	4b82      	ldr	r3, [pc, #520]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a81      	ldr	r2, [pc, #516]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aa94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa98:	6013      	str	r3, [r2, #0]
 800aa9a:	4b7f      	ldr	r3, [pc, #508]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a7e      	ldr	r2, [pc, #504]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aaa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aaa4:	6013      	str	r3, [r2, #0]
 800aaa6:	e01d      	b.n	800aae4 <HAL_RCC_OscConfig+0xd4>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aab0:	d10c      	bne.n	800aacc <HAL_RCC_OscConfig+0xbc>
 800aab2:	4b79      	ldr	r3, [pc, #484]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a78      	ldr	r2, [pc, #480]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aabc:	6013      	str	r3, [r2, #0]
 800aabe:	4b76      	ldr	r3, [pc, #472]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a75      	ldr	r2, [pc, #468]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aac8:	6013      	str	r3, [r2, #0]
 800aaca:	e00b      	b.n	800aae4 <HAL_RCC_OscConfig+0xd4>
 800aacc:	4b72      	ldr	r3, [pc, #456]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a71      	ldr	r2, [pc, #452]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	4b6f      	ldr	r3, [pc, #444]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a6e      	ldr	r2, [pc, #440]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d013      	beq.n	800ab14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaec:	f7fa fec8 	bl	8005880 <HAL_GetTick>
 800aaf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aaf2:	e008      	b.n	800ab06 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aaf4:	f7fa fec4 	bl	8005880 <HAL_GetTick>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	2b64      	cmp	r3, #100	; 0x64
 800ab00:	d901      	bls.n	800ab06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e38d      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab06:	4b64      	ldr	r3, [pc, #400]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d0f0      	beq.n	800aaf4 <HAL_RCC_OscConfig+0xe4>
 800ab12:	e014      	b.n	800ab3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab14:	f7fa feb4 	bl	8005880 <HAL_GetTick>
 800ab18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab1a:	e008      	b.n	800ab2e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab1c:	f7fa feb0 	bl	8005880 <HAL_GetTick>
 800ab20:	4602      	mov	r2, r0
 800ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab24:	1ad3      	subs	r3, r2, r3
 800ab26:	2b64      	cmp	r3, #100	; 0x64
 800ab28:	d901      	bls.n	800ab2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	e379      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab2e:	4b5a      	ldr	r3, [pc, #360]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d1f0      	bne.n	800ab1c <HAL_RCC_OscConfig+0x10c>
 800ab3a:	e000      	b.n	800ab3e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 0302 	and.w	r3, r3, #2
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f000 80ae 	beq.w	800aca8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab4c:	4b52      	ldr	r3, [pc, #328]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab56:	4b50      	ldr	r3, [pc, #320]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ab58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d007      	beq.n	800ab72 <HAL_RCC_OscConfig+0x162>
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	2b18      	cmp	r3, #24
 800ab66:	d13a      	bne.n	800abde <HAL_RCC_OscConfig+0x1ce>
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	f003 0303 	and.w	r3, r3, #3
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d135      	bne.n	800abde <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab72:	4b49      	ldr	r3, [pc, #292]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f003 0304 	and.w	r3, r3, #4
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d005      	beq.n	800ab8a <HAL_RCC_OscConfig+0x17a>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d101      	bne.n	800ab8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	e34b      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab8a:	f7fa fea7 	bl	80058dc <HAL_GetREVID>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	f241 0303 	movw	r3, #4099	; 0x1003
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d817      	bhi.n	800abc8 <HAL_RCC_OscConfig+0x1b8>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	2b40      	cmp	r3, #64	; 0x40
 800ab9e:	d108      	bne.n	800abb2 <HAL_RCC_OscConfig+0x1a2>
 800aba0:	4b3d      	ldr	r3, [pc, #244]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800aba8:	4a3b      	ldr	r2, [pc, #236]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800abaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abae:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abb0:	e07a      	b.n	800aca8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abb2:	4b39      	ldr	r3, [pc, #228]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	031b      	lsls	r3, r3, #12
 800abc0:	4935      	ldr	r1, [pc, #212]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800abc2:	4313      	orrs	r3, r2
 800abc4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abc6:	e06f      	b.n	800aca8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abc8:	4b33      	ldr	r3, [pc, #204]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	061b      	lsls	r3, r3, #24
 800abd6:	4930      	ldr	r1, [pc, #192]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800abd8:	4313      	orrs	r3, r2
 800abda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abdc:	e064      	b.n	800aca8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d045      	beq.n	800ac72 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800abe6:	4b2c      	ldr	r3, [pc, #176]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f023 0219 	bic.w	r2, r3, #25
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	4929      	ldr	r1, [pc, #164]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800abf4:	4313      	orrs	r3, r2
 800abf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abf8:	f7fa fe42 	bl	8005880 <HAL_GetTick>
 800abfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abfe:	e008      	b.n	800ac12 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac00:	f7fa fe3e 	bl	8005880 <HAL_GetTick>
 800ac04:	4602      	mov	r2, r0
 800ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac08:	1ad3      	subs	r3, r2, r3
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d901      	bls.n	800ac12 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800ac0e:	2303      	movs	r3, #3
 800ac10:	e307      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac12:	4b21      	ldr	r3, [pc, #132]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 0304 	and.w	r3, r3, #4
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d0f0      	beq.n	800ac00 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac1e:	f7fa fe5d 	bl	80058dc <HAL_GetREVID>
 800ac22:	4602      	mov	r2, r0
 800ac24:	f241 0303 	movw	r3, #4099	; 0x1003
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d817      	bhi.n	800ac5c <HAL_RCC_OscConfig+0x24c>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	2b40      	cmp	r3, #64	; 0x40
 800ac32:	d108      	bne.n	800ac46 <HAL_RCC_OscConfig+0x236>
 800ac34:	4b18      	ldr	r3, [pc, #96]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ac3c:	4a16      	ldr	r2, [pc, #88]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ac3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac42:	6053      	str	r3, [r2, #4]
 800ac44:	e030      	b.n	800aca8 <HAL_RCC_OscConfig+0x298>
 800ac46:	4b14      	ldr	r3, [pc, #80]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	031b      	lsls	r3, r3, #12
 800ac54:	4910      	ldr	r1, [pc, #64]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ac56:	4313      	orrs	r3, r2
 800ac58:	604b      	str	r3, [r1, #4]
 800ac5a:	e025      	b.n	800aca8 <HAL_RCC_OscConfig+0x298>
 800ac5c:	4b0e      	ldr	r3, [pc, #56]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	061b      	lsls	r3, r3, #24
 800ac6a:	490b      	ldr	r1, [pc, #44]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	604b      	str	r3, [r1, #4]
 800ac70:	e01a      	b.n	800aca8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac72:	4b09      	ldr	r3, [pc, #36]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a08      	ldr	r2, [pc, #32]	; (800ac98 <HAL_RCC_OscConfig+0x288>)
 800ac78:	f023 0301 	bic.w	r3, r3, #1
 800ac7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac7e:	f7fa fdff 	bl	8005880 <HAL_GetTick>
 800ac82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac84:	e00a      	b.n	800ac9c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac86:	f7fa fdfb 	bl	8005880 <HAL_GetTick>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d903      	bls.n	800ac9c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800ac94:	2303      	movs	r3, #3
 800ac96:	e2c4      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
 800ac98:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac9c:	4ba4      	ldr	r3, [pc, #656]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 0304 	and.w	r3, r3, #4
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1ee      	bne.n	800ac86 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f003 0310 	and.w	r3, r3, #16
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f000 80a9 	beq.w	800ae08 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acb6:	4b9e      	ldr	r3, [pc, #632]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800acc0:	4b9b      	ldr	r3, [pc, #620]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800acc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	2b08      	cmp	r3, #8
 800acca:	d007      	beq.n	800acdc <HAL_RCC_OscConfig+0x2cc>
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	2b18      	cmp	r3, #24
 800acd0:	d13a      	bne.n	800ad48 <HAL_RCC_OscConfig+0x338>
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	f003 0303 	and.w	r3, r3, #3
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d135      	bne.n	800ad48 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800acdc:	4b94      	ldr	r3, [pc, #592]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d005      	beq.n	800acf4 <HAL_RCC_OscConfig+0x2e4>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	69db      	ldr	r3, [r3, #28]
 800acec:	2b80      	cmp	r3, #128	; 0x80
 800acee:	d001      	beq.n	800acf4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	e296      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800acf4:	f7fa fdf2 	bl	80058dc <HAL_GetREVID>
 800acf8:	4602      	mov	r2, r0
 800acfa:	f241 0303 	movw	r3, #4099	; 0x1003
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d817      	bhi.n	800ad32 <HAL_RCC_OscConfig+0x322>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a1b      	ldr	r3, [r3, #32]
 800ad06:	2b20      	cmp	r3, #32
 800ad08:	d108      	bne.n	800ad1c <HAL_RCC_OscConfig+0x30c>
 800ad0a:	4b89      	ldr	r3, [pc, #548]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ad12:	4a87      	ldr	r2, [pc, #540]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ad14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad18:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad1a:	e075      	b.n	800ae08 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad1c:	4b84      	ldr	r3, [pc, #528]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a1b      	ldr	r3, [r3, #32]
 800ad28:	069b      	lsls	r3, r3, #26
 800ad2a:	4981      	ldr	r1, [pc, #516]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad30:	e06a      	b.n	800ae08 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad32:	4b7f      	ldr	r3, [pc, #508]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a1b      	ldr	r3, [r3, #32]
 800ad3e:	061b      	lsls	r3, r3, #24
 800ad40:	497b      	ldr	r1, [pc, #492]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ad42:	4313      	orrs	r3, r2
 800ad44:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad46:	e05f      	b.n	800ae08 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	69db      	ldr	r3, [r3, #28]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d042      	beq.n	800add6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ad50:	4b77      	ldr	r3, [pc, #476]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a76      	ldr	r2, [pc, #472]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ad56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad5c:	f7fa fd90 	bl	8005880 <HAL_GetTick>
 800ad60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad62:	e008      	b.n	800ad76 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ad64:	f7fa fd8c 	bl	8005880 <HAL_GetTick>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d901      	bls.n	800ad76 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800ad72:	2303      	movs	r3, #3
 800ad74:	e255      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad76:	4b6e      	ldr	r3, [pc, #440]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0f0      	beq.n	800ad64 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad82:	f7fa fdab 	bl	80058dc <HAL_GetREVID>
 800ad86:	4602      	mov	r2, r0
 800ad88:	f241 0303 	movw	r3, #4099	; 0x1003
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d817      	bhi.n	800adc0 <HAL_RCC_OscConfig+0x3b0>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a1b      	ldr	r3, [r3, #32]
 800ad94:	2b20      	cmp	r3, #32
 800ad96:	d108      	bne.n	800adaa <HAL_RCC_OscConfig+0x39a>
 800ad98:	4b65      	ldr	r3, [pc, #404]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ada0:	4a63      	ldr	r2, [pc, #396]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ada2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ada6:	6053      	str	r3, [r2, #4]
 800ada8:	e02e      	b.n	800ae08 <HAL_RCC_OscConfig+0x3f8>
 800adaa:	4b61      	ldr	r3, [pc, #388]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	069b      	lsls	r3, r3, #26
 800adb8:	495d      	ldr	r1, [pc, #372]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800adba:	4313      	orrs	r3, r2
 800adbc:	604b      	str	r3, [r1, #4]
 800adbe:	e023      	b.n	800ae08 <HAL_RCC_OscConfig+0x3f8>
 800adc0:	4b5b      	ldr	r3, [pc, #364]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a1b      	ldr	r3, [r3, #32]
 800adcc:	061b      	lsls	r3, r3, #24
 800adce:	4958      	ldr	r1, [pc, #352]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800add0:	4313      	orrs	r3, r2
 800add2:	60cb      	str	r3, [r1, #12]
 800add4:	e018      	b.n	800ae08 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800add6:	4b56      	ldr	r3, [pc, #344]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a55      	ldr	r2, [pc, #340]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800addc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ade0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade2:	f7fa fd4d 	bl	8005880 <HAL_GetTick>
 800ade6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ade8:	e008      	b.n	800adfc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800adea:	f7fa fd49 	bl	8005880 <HAL_GetTick>
 800adee:	4602      	mov	r2, r0
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d901      	bls.n	800adfc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800adf8:	2303      	movs	r3, #3
 800adfa:	e212      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800adfc:	4b4c      	ldr	r3, [pc, #304]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1f0      	bne.n	800adea <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0308 	and.w	r3, r3, #8
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d036      	beq.n	800ae82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	695b      	ldr	r3, [r3, #20]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d019      	beq.n	800ae50 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae1c:	4b44      	ldr	r3, [pc, #272]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ae1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae20:	4a43      	ldr	r2, [pc, #268]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ae22:	f043 0301 	orr.w	r3, r3, #1
 800ae26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae28:	f7fa fd2a 	bl	8005880 <HAL_GetTick>
 800ae2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae2e:	e008      	b.n	800ae42 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae30:	f7fa fd26 	bl	8005880 <HAL_GetTick>
 800ae34:	4602      	mov	r2, r0
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d901      	bls.n	800ae42 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e1ef      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae42:	4b3b      	ldr	r3, [pc, #236]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ae44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae46:	f003 0302 	and.w	r3, r3, #2
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d0f0      	beq.n	800ae30 <HAL_RCC_OscConfig+0x420>
 800ae4e:	e018      	b.n	800ae82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae50:	4b37      	ldr	r3, [pc, #220]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ae52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae54:	4a36      	ldr	r2, [pc, #216]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ae56:	f023 0301 	bic.w	r3, r3, #1
 800ae5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae5c:	f7fa fd10 	bl	8005880 <HAL_GetTick>
 800ae60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ae62:	e008      	b.n	800ae76 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae64:	f7fa fd0c 	bl	8005880 <HAL_GetTick>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	d901      	bls.n	800ae76 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800ae72:	2303      	movs	r3, #3
 800ae74:	e1d5      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ae76:	4b2e      	ldr	r3, [pc, #184]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ae78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae7a:	f003 0302 	and.w	r3, r3, #2
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1f0      	bne.n	800ae64 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f003 0320 	and.w	r3, r3, #32
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d036      	beq.n	800aefc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d019      	beq.n	800aeca <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ae96:	4b26      	ldr	r3, [pc, #152]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a25      	ldr	r2, [pc, #148]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800ae9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aea0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aea2:	f7fa fced 	bl	8005880 <HAL_GetTick>
 800aea6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aea8:	e008      	b.n	800aebc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800aeaa:	f7fa fce9 	bl	8005880 <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d901      	bls.n	800aebc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e1b2      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aebc:	4b1c      	ldr	r3, [pc, #112]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d0f0      	beq.n	800aeaa <HAL_RCC_OscConfig+0x49a>
 800aec8:	e018      	b.n	800aefc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aeca:	4b19      	ldr	r3, [pc, #100]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a18      	ldr	r2, [pc, #96]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800aed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aed4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aed6:	f7fa fcd3 	bl	8005880 <HAL_GetTick>
 800aeda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aedc:	e008      	b.n	800aef0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800aede:	f7fa fccf 	bl	8005880 <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d901      	bls.n	800aef0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800aeec:	2303      	movs	r3, #3
 800aeee:	e198      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aef0:	4b0f      	ldr	r3, [pc, #60]	; (800af30 <HAL_RCC_OscConfig+0x520>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1f0      	bne.n	800aede <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 8085 	beq.w	800b014 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800af0a:	4b0a      	ldr	r3, [pc, #40]	; (800af34 <HAL_RCC_OscConfig+0x524>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a09      	ldr	r2, [pc, #36]	; (800af34 <HAL_RCC_OscConfig+0x524>)
 800af10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af16:	f7fa fcb3 	bl	8005880 <HAL_GetTick>
 800af1a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af1c:	e00c      	b.n	800af38 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800af1e:	f7fa fcaf 	bl	8005880 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	2b64      	cmp	r3, #100	; 0x64
 800af2a:	d905      	bls.n	800af38 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e178      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
 800af30:	58024400 	.word	0x58024400
 800af34:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af38:	4b96      	ldr	r3, [pc, #600]	; (800b194 <HAL_RCC_OscConfig+0x784>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af40:	2b00      	cmp	r3, #0
 800af42:	d0ec      	beq.n	800af1e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d106      	bne.n	800af5a <HAL_RCC_OscConfig+0x54a>
 800af4c:	4b92      	ldr	r3, [pc, #584]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800af4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af50:	4a91      	ldr	r2, [pc, #580]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800af52:	f043 0301 	orr.w	r3, r3, #1
 800af56:	6713      	str	r3, [r2, #112]	; 0x70
 800af58:	e02d      	b.n	800afb6 <HAL_RCC_OscConfig+0x5a6>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10c      	bne.n	800af7c <HAL_RCC_OscConfig+0x56c>
 800af62:	4b8d      	ldr	r3, [pc, #564]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800af64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af66:	4a8c      	ldr	r2, [pc, #560]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800af68:	f023 0301 	bic.w	r3, r3, #1
 800af6c:	6713      	str	r3, [r2, #112]	; 0x70
 800af6e:	4b8a      	ldr	r3, [pc, #552]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800af70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af72:	4a89      	ldr	r2, [pc, #548]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800af74:	f023 0304 	bic.w	r3, r3, #4
 800af78:	6713      	str	r3, [r2, #112]	; 0x70
 800af7a:	e01c      	b.n	800afb6 <HAL_RCC_OscConfig+0x5a6>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	2b05      	cmp	r3, #5
 800af82:	d10c      	bne.n	800af9e <HAL_RCC_OscConfig+0x58e>
 800af84:	4b84      	ldr	r3, [pc, #528]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800af86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af88:	4a83      	ldr	r2, [pc, #524]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800af8a:	f043 0304 	orr.w	r3, r3, #4
 800af8e:	6713      	str	r3, [r2, #112]	; 0x70
 800af90:	4b81      	ldr	r3, [pc, #516]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800af92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af94:	4a80      	ldr	r2, [pc, #512]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800af96:	f043 0301 	orr.w	r3, r3, #1
 800af9a:	6713      	str	r3, [r2, #112]	; 0x70
 800af9c:	e00b      	b.n	800afb6 <HAL_RCC_OscConfig+0x5a6>
 800af9e:	4b7e      	ldr	r3, [pc, #504]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800afa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa2:	4a7d      	ldr	r2, [pc, #500]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800afa4:	f023 0301 	bic.w	r3, r3, #1
 800afa8:	6713      	str	r3, [r2, #112]	; 0x70
 800afaa:	4b7b      	ldr	r3, [pc, #492]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800afac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afae:	4a7a      	ldr	r2, [pc, #488]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800afb0:	f023 0304 	bic.w	r3, r3, #4
 800afb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d015      	beq.n	800afea <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afbe:	f7fa fc5f 	bl	8005880 <HAL_GetTick>
 800afc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800afc4:	e00a      	b.n	800afdc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afc6:	f7fa fc5b 	bl	8005880 <HAL_GetTick>
 800afca:	4602      	mov	r2, r0
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	1ad3      	subs	r3, r2, r3
 800afd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d901      	bls.n	800afdc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800afd8:	2303      	movs	r3, #3
 800afda:	e122      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800afdc:	4b6e      	ldr	r3, [pc, #440]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800afde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe0:	f003 0302 	and.w	r3, r3, #2
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d0ee      	beq.n	800afc6 <HAL_RCC_OscConfig+0x5b6>
 800afe8:	e014      	b.n	800b014 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afea:	f7fa fc49 	bl	8005880 <HAL_GetTick>
 800afee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aff0:	e00a      	b.n	800b008 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aff2:	f7fa fc45 	bl	8005880 <HAL_GetTick>
 800aff6:	4602      	mov	r2, r0
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b000:	4293      	cmp	r3, r2
 800b002:	d901      	bls.n	800b008 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800b004:	2303      	movs	r3, #3
 800b006:	e10c      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b008:	4b63      	ldr	r3, [pc, #396]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b00a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b00c:	f003 0302 	and.w	r3, r3, #2
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1ee      	bne.n	800aff2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f000 8101 	beq.w	800b220 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b01e:	4b5e      	ldr	r3, [pc, #376]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b026:	2b18      	cmp	r3, #24
 800b028:	f000 80bc 	beq.w	800b1a4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b030:	2b02      	cmp	r3, #2
 800b032:	f040 8095 	bne.w	800b160 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b036:	4b58      	ldr	r3, [pc, #352]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a57      	ldr	r2, [pc, #348]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b03c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b042:	f7fa fc1d 	bl	8005880 <HAL_GetTick>
 800b046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b048:	e008      	b.n	800b05c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b04a:	f7fa fc19 	bl	8005880 <HAL_GetTick>
 800b04e:	4602      	mov	r2, r0
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	2b02      	cmp	r3, #2
 800b056:	d901      	bls.n	800b05c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800b058:	2303      	movs	r3, #3
 800b05a:	e0e2      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b05c:	4b4e      	ldr	r3, [pc, #312]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1f0      	bne.n	800b04a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b068:	4b4b      	ldr	r3, [pc, #300]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b06a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b06c:	4b4b      	ldr	r3, [pc, #300]	; (800b19c <HAL_RCC_OscConfig+0x78c>)
 800b06e:	4013      	ands	r3, r2
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b078:	0112      	lsls	r2, r2, #4
 800b07a:	430a      	orrs	r2, r1
 800b07c:	4946      	ldr	r1, [pc, #280]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b07e:	4313      	orrs	r3, r2
 800b080:	628b      	str	r3, [r1, #40]	; 0x28
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b086:	3b01      	subs	r3, #1
 800b088:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b090:	3b01      	subs	r3, #1
 800b092:	025b      	lsls	r3, r3, #9
 800b094:	b29b      	uxth	r3, r3
 800b096:	431a      	orrs	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09c:	3b01      	subs	r3, #1
 800b09e:	041b      	lsls	r3, r3, #16
 800b0a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b0a4:	431a      	orrs	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	061b      	lsls	r3, r3, #24
 800b0ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b0b2:	4939      	ldr	r1, [pc, #228]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b0b8:	4b37      	ldr	r3, [pc, #220]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0bc:	4a36      	ldr	r2, [pc, #216]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b0be:	f023 0301 	bic.w	r3, r3, #1
 800b0c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b0c4:	4b34      	ldr	r3, [pc, #208]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b0c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0c8:	4b35      	ldr	r3, [pc, #212]	; (800b1a0 <HAL_RCC_OscConfig+0x790>)
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b0d0:	00d2      	lsls	r2, r2, #3
 800b0d2:	4931      	ldr	r1, [pc, #196]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b0d8:	4b2f      	ldr	r3, [pc, #188]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0dc:	f023 020c 	bic.w	r2, r3, #12
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e4:	492c      	ldr	r1, [pc, #176]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b0ea:	4b2b      	ldr	r3, [pc, #172]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ee:	f023 0202 	bic.w	r2, r3, #2
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f6:	4928      	ldr	r1, [pc, #160]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b0fc:	4b26      	ldr	r3, [pc, #152]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b100:	4a25      	ldr	r2, [pc, #148]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b106:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b108:	4b23      	ldr	r3, [pc, #140]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10c:	4a22      	ldr	r2, [pc, #136]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b10e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b112:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b114:	4b20      	ldr	r3, [pc, #128]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b118:	4a1f      	ldr	r2, [pc, #124]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b11a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b11e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b120:	4b1d      	ldr	r3, [pc, #116]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b124:	4a1c      	ldr	r2, [pc, #112]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b126:	f043 0301 	orr.w	r3, r3, #1
 800b12a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b12c:	4b1a      	ldr	r3, [pc, #104]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a19      	ldr	r2, [pc, #100]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b138:	f7fa fba2 	bl	8005880 <HAL_GetTick>
 800b13c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b13e:	e008      	b.n	800b152 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b140:	f7fa fb9e 	bl	8005880 <HAL_GetTick>
 800b144:	4602      	mov	r2, r0
 800b146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d901      	bls.n	800b152 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800b14e:	2303      	movs	r3, #3
 800b150:	e067      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b152:	4b11      	ldr	r3, [pc, #68]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d0f0      	beq.n	800b140 <HAL_RCC_OscConfig+0x730>
 800b15e:	e05f      	b.n	800b220 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b160:	4b0d      	ldr	r3, [pc, #52]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a0c      	ldr	r2, [pc, #48]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b16a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b16c:	f7fa fb88 	bl	8005880 <HAL_GetTick>
 800b170:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b172:	e008      	b.n	800b186 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b174:	f7fa fb84 	bl	8005880 <HAL_GetTick>
 800b178:	4602      	mov	r2, r0
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d901      	bls.n	800b186 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800b182:	2303      	movs	r3, #3
 800b184:	e04d      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b186:	4b04      	ldr	r3, [pc, #16]	; (800b198 <HAL_RCC_OscConfig+0x788>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1f0      	bne.n	800b174 <HAL_RCC_OscConfig+0x764>
 800b192:	e045      	b.n	800b220 <HAL_RCC_OscConfig+0x810>
 800b194:	58024800 	.word	0x58024800
 800b198:	58024400 	.word	0x58024400
 800b19c:	fffffc0c 	.word	0xfffffc0c
 800b1a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b1a4:	4b21      	ldr	r3, [pc, #132]	; (800b22c <HAL_RCC_OscConfig+0x81c>)
 800b1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b1aa:	4b20      	ldr	r3, [pc, #128]	; (800b22c <HAL_RCC_OscConfig+0x81c>)
 800b1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d031      	beq.n	800b21c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	f003 0203 	and.w	r2, r3, #3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d12a      	bne.n	800b21c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	091b      	lsrs	r3, r3, #4
 800b1ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d122      	bne.n	800b21c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d11a      	bne.n	800b21c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	0a5b      	lsrs	r3, r3, #9
 800b1ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d111      	bne.n	800b21c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	0c1b      	lsrs	r3, r3, #16
 800b1fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b204:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b206:	429a      	cmp	r2, r3
 800b208:	d108      	bne.n	800b21c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	0e1b      	lsrs	r3, r3, #24
 800b20e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b216:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b218:	429a      	cmp	r2, r3
 800b21a:	d001      	beq.n	800b220 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e000      	b.n	800b222 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3730      	adds	r7, #48	; 0x30
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	58024400 	.word	0x58024400

0800b230 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d101      	bne.n	800b244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	e19c      	b.n	800b57e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b244:	4b8a      	ldr	r3, [pc, #552]	; (800b470 <HAL_RCC_ClockConfig+0x240>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 030f 	and.w	r3, r3, #15
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d910      	bls.n	800b274 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b252:	4b87      	ldr	r3, [pc, #540]	; (800b470 <HAL_RCC_ClockConfig+0x240>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f023 020f 	bic.w	r2, r3, #15
 800b25a:	4985      	ldr	r1, [pc, #532]	; (800b470 <HAL_RCC_ClockConfig+0x240>)
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	4313      	orrs	r3, r2
 800b260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b262:	4b83      	ldr	r3, [pc, #524]	; (800b470 <HAL_RCC_ClockConfig+0x240>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 030f 	and.w	r3, r3, #15
 800b26a:	683a      	ldr	r2, [r7, #0]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d001      	beq.n	800b274 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e184      	b.n	800b57e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 0304 	and.w	r3, r3, #4
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d010      	beq.n	800b2a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	691a      	ldr	r2, [r3, #16]
 800b284:	4b7b      	ldr	r3, [pc, #492]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b286:	699b      	ldr	r3, [r3, #24]
 800b288:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d908      	bls.n	800b2a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b290:	4b78      	ldr	r3, [pc, #480]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b292:	699b      	ldr	r3, [r3, #24]
 800b294:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	4975      	ldr	r1, [pc, #468]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 0308 	and.w	r3, r3, #8
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d010      	beq.n	800b2d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	695a      	ldr	r2, [r3, #20]
 800b2b2:	4b70      	ldr	r3, [pc, #448]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b2b4:	69db      	ldr	r3, [r3, #28]
 800b2b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d908      	bls.n	800b2d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b2be:	4b6d      	ldr	r3, [pc, #436]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b2c0:	69db      	ldr	r3, [r3, #28]
 800b2c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	496a      	ldr	r1, [pc, #424]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0310 	and.w	r3, r3, #16
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d010      	beq.n	800b2fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	699a      	ldr	r2, [r3, #24]
 800b2e0:	4b64      	ldr	r3, [pc, #400]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b2e2:	69db      	ldr	r3, [r3, #28]
 800b2e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d908      	bls.n	800b2fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b2ec:	4b61      	ldr	r3, [pc, #388]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b2ee:	69db      	ldr	r3, [r3, #28]
 800b2f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	699b      	ldr	r3, [r3, #24]
 800b2f8:	495e      	ldr	r1, [pc, #376]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 0320 	and.w	r3, r3, #32
 800b306:	2b00      	cmp	r3, #0
 800b308:	d010      	beq.n	800b32c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	69da      	ldr	r2, [r3, #28]
 800b30e:	4b59      	ldr	r3, [pc, #356]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b310:	6a1b      	ldr	r3, [r3, #32]
 800b312:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b316:	429a      	cmp	r2, r3
 800b318:	d908      	bls.n	800b32c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b31a:	4b56      	ldr	r3, [pc, #344]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	69db      	ldr	r3, [r3, #28]
 800b326:	4953      	ldr	r1, [pc, #332]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b328:	4313      	orrs	r3, r2
 800b32a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 0302 	and.w	r3, r3, #2
 800b334:	2b00      	cmp	r3, #0
 800b336:	d010      	beq.n	800b35a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	68da      	ldr	r2, [r3, #12]
 800b33c:	4b4d      	ldr	r3, [pc, #308]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	f003 030f 	and.w	r3, r3, #15
 800b344:	429a      	cmp	r2, r3
 800b346:	d908      	bls.n	800b35a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b348:	4b4a      	ldr	r3, [pc, #296]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	f023 020f 	bic.w	r2, r3, #15
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	4947      	ldr	r1, [pc, #284]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b356:	4313      	orrs	r3, r2
 800b358:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 0301 	and.w	r3, r3, #1
 800b362:	2b00      	cmp	r3, #0
 800b364:	d055      	beq.n	800b412 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b366:	4b43      	ldr	r3, [pc, #268]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b368:	699b      	ldr	r3, [r3, #24]
 800b36a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	4940      	ldr	r1, [pc, #256]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b374:	4313      	orrs	r3, r2
 800b376:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d107      	bne.n	800b390 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b380:	4b3c      	ldr	r3, [pc, #240]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d121      	bne.n	800b3d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b38c:	2301      	movs	r3, #1
 800b38e:	e0f6      	b.n	800b57e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	2b03      	cmp	r3, #3
 800b396:	d107      	bne.n	800b3a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b398:	4b36      	ldr	r3, [pc, #216]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d115      	bne.n	800b3d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e0ea      	b.n	800b57e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d107      	bne.n	800b3c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b3b0:	4b30      	ldr	r3, [pc, #192]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d109      	bne.n	800b3d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e0de      	b.n	800b57e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b3c0:	4b2c      	ldr	r3, [pc, #176]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f003 0304 	and.w	r3, r3, #4
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d101      	bne.n	800b3d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e0d6      	b.n	800b57e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b3d0:	4b28      	ldr	r3, [pc, #160]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	f023 0207 	bic.w	r2, r3, #7
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	4925      	ldr	r1, [pc, #148]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3e2:	f7fa fa4d 	bl	8005880 <HAL_GetTick>
 800b3e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3e8:	e00a      	b.n	800b400 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3ea:	f7fa fa49 	bl	8005880 <HAL_GetTick>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	1ad3      	subs	r3, r2, r3
 800b3f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d901      	bls.n	800b400 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	e0be      	b.n	800b57e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b400:	4b1c      	ldr	r3, [pc, #112]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	00db      	lsls	r3, r3, #3
 800b40e:	429a      	cmp	r2, r3
 800b410:	d1eb      	bne.n	800b3ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f003 0302 	and.w	r3, r3, #2
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d010      	beq.n	800b440 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68da      	ldr	r2, [r3, #12]
 800b422:	4b14      	ldr	r3, [pc, #80]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	f003 030f 	and.w	r3, r3, #15
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d208      	bcs.n	800b440 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b42e:	4b11      	ldr	r3, [pc, #68]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	f023 020f 	bic.w	r2, r3, #15
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	490e      	ldr	r1, [pc, #56]	; (800b474 <HAL_RCC_ClockConfig+0x244>)
 800b43c:	4313      	orrs	r3, r2
 800b43e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b440:	4b0b      	ldr	r3, [pc, #44]	; (800b470 <HAL_RCC_ClockConfig+0x240>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 030f 	and.w	r3, r3, #15
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d214      	bcs.n	800b478 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b44e:	4b08      	ldr	r3, [pc, #32]	; (800b470 <HAL_RCC_ClockConfig+0x240>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f023 020f 	bic.w	r2, r3, #15
 800b456:	4906      	ldr	r1, [pc, #24]	; (800b470 <HAL_RCC_ClockConfig+0x240>)
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b45e:	4b04      	ldr	r3, [pc, #16]	; (800b470 <HAL_RCC_ClockConfig+0x240>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 030f 	and.w	r3, r3, #15
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d005      	beq.n	800b478 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e086      	b.n	800b57e <HAL_RCC_ClockConfig+0x34e>
 800b470:	52002000 	.word	0x52002000
 800b474:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f003 0304 	and.w	r3, r3, #4
 800b480:	2b00      	cmp	r3, #0
 800b482:	d010      	beq.n	800b4a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	691a      	ldr	r2, [r3, #16]
 800b488:	4b3f      	ldr	r3, [pc, #252]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b490:	429a      	cmp	r2, r3
 800b492:	d208      	bcs.n	800b4a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b494:	4b3c      	ldr	r3, [pc, #240]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b496:	699b      	ldr	r3, [r3, #24]
 800b498:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	691b      	ldr	r3, [r3, #16]
 800b4a0:	4939      	ldr	r1, [pc, #228]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 0308 	and.w	r3, r3, #8
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d010      	beq.n	800b4d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	695a      	ldr	r2, [r3, #20]
 800b4b6:	4b34      	ldr	r3, [pc, #208]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b4b8:	69db      	ldr	r3, [r3, #28]
 800b4ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d208      	bcs.n	800b4d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b4c2:	4b31      	ldr	r3, [pc, #196]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b4c4:	69db      	ldr	r3, [r3, #28]
 800b4c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	695b      	ldr	r3, [r3, #20]
 800b4ce:	492e      	ldr	r1, [pc, #184]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 0310 	and.w	r3, r3, #16
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d010      	beq.n	800b502 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	699a      	ldr	r2, [r3, #24]
 800b4e4:	4b28      	ldr	r3, [pc, #160]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b4e6:	69db      	ldr	r3, [r3, #28]
 800b4e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d208      	bcs.n	800b502 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b4f0:	4b25      	ldr	r3, [pc, #148]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b4f2:	69db      	ldr	r3, [r3, #28]
 800b4f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	4922      	ldr	r1, [pc, #136]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 0320 	and.w	r3, r3, #32
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d010      	beq.n	800b530 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	69da      	ldr	r2, [r3, #28]
 800b512:	4b1d      	ldr	r3, [pc, #116]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d208      	bcs.n	800b530 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b51e:	4b1a      	ldr	r3, [pc, #104]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b520:	6a1b      	ldr	r3, [r3, #32]
 800b522:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	69db      	ldr	r3, [r3, #28]
 800b52a:	4917      	ldr	r1, [pc, #92]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b52c:	4313      	orrs	r3, r2
 800b52e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b530:	f000 f844 	bl	800b5bc <HAL_RCC_GetSysClockFreq>
 800b534:	4601      	mov	r1, r0
 800b536:	4b14      	ldr	r3, [pc, #80]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b538:	699b      	ldr	r3, [r3, #24]
 800b53a:	0a1b      	lsrs	r3, r3, #8
 800b53c:	f003 030f 	and.w	r3, r3, #15
 800b540:	4a12      	ldr	r2, [pc, #72]	; (800b58c <HAL_RCC_ClockConfig+0x35c>)
 800b542:	5cd3      	ldrb	r3, [r2, r3]
 800b544:	f003 031f 	and.w	r3, r3, #31
 800b548:	fa21 f303 	lsr.w	r3, r1, r3
 800b54c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b54e:	4b0e      	ldr	r3, [pc, #56]	; (800b588 <HAL_RCC_ClockConfig+0x358>)
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	f003 030f 	and.w	r3, r3, #15
 800b556:	4a0d      	ldr	r2, [pc, #52]	; (800b58c <HAL_RCC_ClockConfig+0x35c>)
 800b558:	5cd3      	ldrb	r3, [r2, r3]
 800b55a:	f003 031f 	and.w	r3, r3, #31
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	fa22 f303 	lsr.w	r3, r2, r3
 800b564:	4a0a      	ldr	r2, [pc, #40]	; (800b590 <HAL_RCC_ClockConfig+0x360>)
 800b566:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b568:	4a0a      	ldr	r2, [pc, #40]	; (800b594 <HAL_RCC_ClockConfig+0x364>)
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b56e:	4b0a      	ldr	r3, [pc, #40]	; (800b598 <HAL_RCC_ClockConfig+0x368>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4618      	mov	r0, r3
 800b574:	f7fa f93a 	bl	80057ec <HAL_InitTick>
 800b578:	4603      	mov	r3, r0
 800b57a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3718      	adds	r7, #24
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	58024400 	.word	0x58024400
 800b58c:	0801ed80 	.word	0x0801ed80
 800b590:	24000014 	.word	0x24000014
 800b594:	24000010 	.word	0x24000010
 800b598:	24000018 	.word	0x24000018

0800b59c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800b59c:	b480      	push	{r7}
 800b59e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800b5a0:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <HAL_RCC_EnableCSS+0x1c>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a04      	ldr	r2, [pc, #16]	; (800b5b8 <HAL_RCC_EnableCSS+0x1c>)
 800b5a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5aa:	6013      	str	r3, [r2, #0]
}
 800b5ac:	bf00      	nop
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	58024400 	.word	0x58024400

0800b5bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b089      	sub	sp, #36	; 0x24
 800b5c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5c2:	4baf      	ldr	r3, [pc, #700]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5ca:	2b18      	cmp	r3, #24
 800b5cc:	f200 814e 	bhi.w	800b86c <HAL_RCC_GetSysClockFreq+0x2b0>
 800b5d0:	a201      	add	r2, pc, #4	; (adr r2, 800b5d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d6:	bf00      	nop
 800b5d8:	0800b63d 	.word	0x0800b63d
 800b5dc:	0800b86d 	.word	0x0800b86d
 800b5e0:	0800b86d 	.word	0x0800b86d
 800b5e4:	0800b86d 	.word	0x0800b86d
 800b5e8:	0800b86d 	.word	0x0800b86d
 800b5ec:	0800b86d 	.word	0x0800b86d
 800b5f0:	0800b86d 	.word	0x0800b86d
 800b5f4:	0800b86d 	.word	0x0800b86d
 800b5f8:	0800b663 	.word	0x0800b663
 800b5fc:	0800b86d 	.word	0x0800b86d
 800b600:	0800b86d 	.word	0x0800b86d
 800b604:	0800b86d 	.word	0x0800b86d
 800b608:	0800b86d 	.word	0x0800b86d
 800b60c:	0800b86d 	.word	0x0800b86d
 800b610:	0800b86d 	.word	0x0800b86d
 800b614:	0800b86d 	.word	0x0800b86d
 800b618:	0800b669 	.word	0x0800b669
 800b61c:	0800b86d 	.word	0x0800b86d
 800b620:	0800b86d 	.word	0x0800b86d
 800b624:	0800b86d 	.word	0x0800b86d
 800b628:	0800b86d 	.word	0x0800b86d
 800b62c:	0800b86d 	.word	0x0800b86d
 800b630:	0800b86d 	.word	0x0800b86d
 800b634:	0800b86d 	.word	0x0800b86d
 800b638:	0800b66f 	.word	0x0800b66f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b63c:	4b90      	ldr	r3, [pc, #576]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 0320 	and.w	r3, r3, #32
 800b644:	2b00      	cmp	r3, #0
 800b646:	d009      	beq.n	800b65c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b648:	4b8d      	ldr	r3, [pc, #564]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	08db      	lsrs	r3, r3, #3
 800b64e:	f003 0303 	and.w	r3, r3, #3
 800b652:	4a8c      	ldr	r2, [pc, #560]	; (800b884 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800b654:	fa22 f303 	lsr.w	r3, r2, r3
 800b658:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b65a:	e10a      	b.n	800b872 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b65c:	4b89      	ldr	r3, [pc, #548]	; (800b884 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800b65e:	61bb      	str	r3, [r7, #24]
    break;
 800b660:	e107      	b.n	800b872 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b662:	4b89      	ldr	r3, [pc, #548]	; (800b888 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800b664:	61bb      	str	r3, [r7, #24]
    break;
 800b666:	e104      	b.n	800b872 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b668:	4b88      	ldr	r3, [pc, #544]	; (800b88c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800b66a:	61bb      	str	r3, [r7, #24]
    break;
 800b66c:	e101      	b.n	800b872 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b66e:	4b84      	ldr	r3, [pc, #528]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b672:	f003 0303 	and.w	r3, r3, #3
 800b676:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b678:	4b81      	ldr	r3, [pc, #516]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b67c:	091b      	lsrs	r3, r3, #4
 800b67e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b682:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b684:	4b7e      	ldr	r3, [pc, #504]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b68e:	4b7c      	ldr	r3, [pc, #496]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b692:	08db      	lsrs	r3, r3, #3
 800b694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	fb02 f303 	mul.w	r3, r2, r3
 800b69e:	ee07 3a90 	vmov	s15, r3
 800b6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f000 80da 	beq.w	800b866 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d05a      	beq.n	800b76e <HAL_RCC_GetSysClockFreq+0x1b2>
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d302      	bcc.n	800b6c2 <HAL_RCC_GetSysClockFreq+0x106>
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d078      	beq.n	800b7b2 <HAL_RCC_GetSysClockFreq+0x1f6>
 800b6c0:	e099      	b.n	800b7f6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6c2:	4b6f      	ldr	r3, [pc, #444]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 0320 	and.w	r3, r3, #32
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d02d      	beq.n	800b72a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b6ce:	4b6c      	ldr	r3, [pc, #432]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	08db      	lsrs	r3, r3, #3
 800b6d4:	f003 0303 	and.w	r3, r3, #3
 800b6d8:	4a6a      	ldr	r2, [pc, #424]	; (800b884 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800b6da:	fa22 f303 	lsr.w	r3, r2, r3
 800b6de:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	ee07 3a90 	vmov	s15, r3
 800b6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	ee07 3a90 	vmov	s15, r3
 800b6f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6f8:	4b61      	ldr	r3, [pc, #388]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b700:	ee07 3a90 	vmov	s15, r3
 800b704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b708:	ed97 6a02 	vldr	s12, [r7, #8]
 800b70c:	eddf 5a60 	vldr	s11, [pc, #384]	; 800b890 <HAL_RCC_GetSysClockFreq+0x2d4>
 800b710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b71c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b720:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b724:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b728:	e087      	b.n	800b83a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	ee07 3a90 	vmov	s15, r3
 800b730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b734:	eddf 6a57 	vldr	s13, [pc, #348]	; 800b894 <HAL_RCC_GetSysClockFreq+0x2d8>
 800b738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b73c:	4b50      	ldr	r3, [pc, #320]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b744:	ee07 3a90 	vmov	s15, r3
 800b748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b74c:	ed97 6a02 	vldr	s12, [r7, #8]
 800b750:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800b890 <HAL_RCC_GetSysClockFreq+0x2d4>
 800b754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b75c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b764:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b768:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b76c:	e065      	b.n	800b83a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	ee07 3a90 	vmov	s15, r3
 800b774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b778:	eddf 6a47 	vldr	s13, [pc, #284]	; 800b898 <HAL_RCC_GetSysClockFreq+0x2dc>
 800b77c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b780:	4b3f      	ldr	r3, [pc, #252]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b788:	ee07 3a90 	vmov	s15, r3
 800b78c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b790:	ed97 6a02 	vldr	s12, [r7, #8]
 800b794:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b890 <HAL_RCC_GetSysClockFreq+0x2d4>
 800b798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b79c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7b0:	e043      	b.n	800b83a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	ee07 3a90 	vmov	s15, r3
 800b7b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7bc:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b89c <HAL_RCC_GetSysClockFreq+0x2e0>
 800b7c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7c4:	4b2e      	ldr	r3, [pc, #184]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7cc:	ee07 3a90 	vmov	s15, r3
 800b7d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7d4:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7d8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800b890 <HAL_RCC_GetSysClockFreq+0x2d4>
 800b7dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7f4:	e021      	b.n	800b83a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	ee07 3a90 	vmov	s15, r3
 800b7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b800:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b898 <HAL_RCC_GetSysClockFreq+0x2dc>
 800b804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b808:	4b1d      	ldr	r3, [pc, #116]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b810:	ee07 3a90 	vmov	s15, r3
 800b814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b818:	ed97 6a02 	vldr	s12, [r7, #8]
 800b81c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800b890 <HAL_RCC_GetSysClockFreq+0x2d4>
 800b820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b82c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b830:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b834:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b838:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b83a:	4b11      	ldr	r3, [pc, #68]	; (800b880 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800b83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b83e:	0a5b      	lsrs	r3, r3, #9
 800b840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b844:	3301      	adds	r3, #1
 800b846:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	ee07 3a90 	vmov	s15, r3
 800b84e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b852:	edd7 6a07 	vldr	s13, [r7, #28]
 800b856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b85a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b85e:	ee17 3a90 	vmov	r3, s15
 800b862:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b864:	e005      	b.n	800b872 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800b866:	2300      	movs	r3, #0
 800b868:	61bb      	str	r3, [r7, #24]
    break;
 800b86a:	e002      	b.n	800b872 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800b86c:	4b06      	ldr	r3, [pc, #24]	; (800b888 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800b86e:	61bb      	str	r3, [r7, #24]
    break;
 800b870:	bf00      	nop
  }

  return sysclockfreq;
 800b872:	69bb      	ldr	r3, [r7, #24]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3724      	adds	r7, #36	; 0x24
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	58024400 	.word	0x58024400
 800b884:	03d09000 	.word	0x03d09000
 800b888:	003d0900 	.word	0x003d0900
 800b88c:	017d7840 	.word	0x017d7840
 800b890:	46000000 	.word	0x46000000
 800b894:	4c742400 	.word	0x4c742400
 800b898:	4a742400 	.word	0x4a742400
 800b89c:	4bbebc20 	.word	0x4bbebc20

0800b8a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b8a6:	f7ff fe89 	bl	800b5bc <HAL_RCC_GetSysClockFreq>
 800b8aa:	4601      	mov	r1, r0
 800b8ac:	4b10      	ldr	r3, [pc, #64]	; (800b8f0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	0a1b      	lsrs	r3, r3, #8
 800b8b2:	f003 030f 	and.w	r3, r3, #15
 800b8b6:	4a0f      	ldr	r2, [pc, #60]	; (800b8f4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b8b8:	5cd3      	ldrb	r3, [r2, r3]
 800b8ba:	f003 031f 	and.w	r3, r3, #31
 800b8be:	fa21 f303 	lsr.w	r3, r1, r3
 800b8c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8c4:	4b0a      	ldr	r3, [pc, #40]	; (800b8f0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	f003 030f 	and.w	r3, r3, #15
 800b8cc:	4a09      	ldr	r2, [pc, #36]	; (800b8f4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b8ce:	5cd3      	ldrb	r3, [r2, r3]
 800b8d0:	f003 031f 	and.w	r3, r3, #31
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b8da:	4a07      	ldr	r2, [pc, #28]	; (800b8f8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b8dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b8de:	4a07      	ldr	r2, [pc, #28]	; (800b8fc <HAL_RCC_GetHCLKFreq+0x5c>)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b8e4:	4b04      	ldr	r3, [pc, #16]	; (800b8f8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	58024400 	.word	0x58024400
 800b8f4:	0801ed80 	.word	0x0801ed80
 800b8f8:	24000014 	.word	0x24000014
 800b8fc:	24000010 	.word	0x24000010

0800b900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b904:	f7ff ffcc 	bl	800b8a0 <HAL_RCC_GetHCLKFreq>
 800b908:	4601      	mov	r1, r0
 800b90a:	4b06      	ldr	r3, [pc, #24]	; (800b924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b90c:	69db      	ldr	r3, [r3, #28]
 800b90e:	091b      	lsrs	r3, r3, #4
 800b910:	f003 0307 	and.w	r3, r3, #7
 800b914:	4a04      	ldr	r2, [pc, #16]	; (800b928 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b916:	5cd3      	ldrb	r3, [r2, r3]
 800b918:	f003 031f 	and.w	r3, r3, #31
 800b91c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b920:	4618      	mov	r0, r3
 800b922:	bd80      	pop	{r7, pc}
 800b924:	58024400 	.word	0x58024400
 800b928:	0801ed80 	.word	0x0801ed80

0800b92c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b930:	f7ff ffb6 	bl	800b8a0 <HAL_RCC_GetHCLKFreq>
 800b934:	4601      	mov	r1, r0
 800b936:	4b06      	ldr	r3, [pc, #24]	; (800b950 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b938:	69db      	ldr	r3, [r3, #28]
 800b93a:	0a1b      	lsrs	r3, r3, #8
 800b93c:	f003 0307 	and.w	r3, r3, #7
 800b940:	4a04      	ldr	r2, [pc, #16]	; (800b954 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b942:	5cd3      	ldrb	r3, [r2, r3]
 800b944:	f003 031f 	and.w	r3, r3, #31
 800b948:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	58024400 	.word	0x58024400
 800b954:	0801ed80 	.word	0x0801ed80

0800b958 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800b95c:	4b07      	ldr	r3, [pc, #28]	; (800b97c <HAL_RCC_NMI_IRQHandler+0x24>)
 800b95e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b968:	d105      	bne.n	800b976 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800b96a:	f000 f809 	bl	800b980 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800b96e:	4b03      	ldr	r3, [pc, #12]	; (800b97c <HAL_RCC_NMI_IRQHandler+0x24>)
 800b970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b974:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800b976:	bf00      	nop
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	58024400 	.word	0x58024400

0800b980 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800b980:	b480      	push	{r7}
 800b982:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800b984:	bf00      	nop
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
	...

0800b990 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b998:	2300      	movs	r3, #0
 800b99a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b99c:	2300      	movs	r3, #0
 800b99e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d03d      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9b4:	d013      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800b9b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9ba:	d802      	bhi.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d007      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800b9c0:	e01f      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800b9c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9c6:	d013      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800b9c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9cc:	d01c      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800b9ce:	e018      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9d0:	4baf      	ldr	r3, [pc, #700]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d4:	4aae      	ldr	r2, [pc, #696]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b9d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b9dc:	e015      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	2102      	movs	r1, #2
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f001 fd33 	bl	800d450 <RCCEx_PLL2_Config>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b9ee:	e00c      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	3324      	adds	r3, #36	; 0x24
 800b9f4:	2102      	movs	r1, #2
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f001 fddc 	bl	800d5b4 <RCCEx_PLL3_Config>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ba00:	e003      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	75fb      	strb	r3, [r7, #23]
      break;
 800ba06:	e000      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800ba08:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba0a:	7dfb      	ldrb	r3, [r7, #23]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d109      	bne.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ba10:	4b9f      	ldr	r3, [pc, #636]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800ba12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba1c:	499c      	ldr	r1, [pc, #624]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	650b      	str	r3, [r1, #80]	; 0x50
 800ba22:	e001      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba24:	7dfb      	ldrb	r3, [r7, #23]
 800ba26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d03d      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba38:	2b04      	cmp	r3, #4
 800ba3a:	d826      	bhi.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800ba3c:	a201      	add	r2, pc, #4	; (adr r2, 800ba44 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800ba3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba42:	bf00      	nop
 800ba44:	0800ba59 	.word	0x0800ba59
 800ba48:	0800ba67 	.word	0x0800ba67
 800ba4c:	0800ba79 	.word	0x0800ba79
 800ba50:	0800ba91 	.word	0x0800ba91
 800ba54:	0800ba91 	.word	0x0800ba91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba58:	4b8d      	ldr	r3, [pc, #564]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5c:	4a8c      	ldr	r2, [pc, #560]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800ba5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba64:	e015      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3304      	adds	r3, #4
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f001 fcef 	bl	800d450 <RCCEx_PLL2_Config>
 800ba72:	4603      	mov	r3, r0
 800ba74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba76:	e00c      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	3324      	adds	r3, #36	; 0x24
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f001 fd98 	bl	800d5b4 <RCCEx_PLL3_Config>
 800ba84:	4603      	mov	r3, r0
 800ba86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba88:	e003      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba8e:	e000      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800ba90:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba92:	7dfb      	ldrb	r3, [r7, #23]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d109      	bne.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba98:	4b7d      	ldr	r3, [pc, #500]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800ba9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba9c:	f023 0207 	bic.w	r2, r3, #7
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baa4:	497a      	ldr	r1, [pc, #488]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800baa6:	4313      	orrs	r3, r2
 800baa8:	650b      	str	r3, [r1, #80]	; 0x50
 800baaa:	e001      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baac:	7dfb      	ldrb	r3, [r7, #23]
 800baae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d03e      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bac0:	2b80      	cmp	r3, #128	; 0x80
 800bac2:	d01c      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800bac4:	2b80      	cmp	r3, #128	; 0x80
 800bac6:	d804      	bhi.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d008      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800bacc:	2b40      	cmp	r3, #64	; 0x40
 800bace:	d00d      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800bad0:	e01e      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800bad2:	2bc0      	cmp	r3, #192	; 0xc0
 800bad4:	d01f      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800bad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bada:	d01e      	beq.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800badc:	e018      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bade:	4b6c      	ldr	r3, [pc, #432]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800bae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae2:	4a6b      	ldr	r2, [pc, #428]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800bae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bae8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800baea:	e017      	b.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	3304      	adds	r3, #4
 800baf0:	2100      	movs	r1, #0
 800baf2:	4618      	mov	r0, r3
 800baf4:	f001 fcac 	bl	800d450 <RCCEx_PLL2_Config>
 800baf8:	4603      	mov	r3, r0
 800bafa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bafc:	e00e      	b.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	3324      	adds	r3, #36	; 0x24
 800bb02:	2100      	movs	r1, #0
 800bb04:	4618      	mov	r0, r3
 800bb06:	f001 fd55 	bl	800d5b4 <RCCEx_PLL3_Config>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bb0e:	e005      	b.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	75fb      	strb	r3, [r7, #23]
      break;
 800bb14:	e002      	b.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800bb16:	bf00      	nop
 800bb18:	e000      	b.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800bb1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb1c:	7dfb      	ldrb	r3, [r7, #23]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d109      	bne.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bb22:	4b5b      	ldr	r3, [pc, #364]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800bb24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb26:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb2e:	4958      	ldr	r1, [pc, #352]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800bb30:	4313      	orrs	r3, r2
 800bb32:	650b      	str	r3, [r1, #80]	; 0x50
 800bb34:	e001      	b.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb36:	7dfb      	ldrb	r3, [r7, #23]
 800bb38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d044      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bb4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb50:	d01f      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bb52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb56:	d805      	bhi.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d00a      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bb5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb60:	d00e      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800bb62:	e01f      	b.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800bb64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb68:	d01f      	beq.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800bb6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb6e:	d01e      	beq.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800bb70:	e018      	b.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb72:	4b47      	ldr	r3, [pc, #284]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800bb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb76:	4a46      	ldr	r2, [pc, #280]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800bb78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb7e:	e017      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3304      	adds	r3, #4
 800bb84:	2100      	movs	r1, #0
 800bb86:	4618      	mov	r0, r3
 800bb88:	f001 fc62 	bl	800d450 <RCCEx_PLL2_Config>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bb90:	e00e      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	3324      	adds	r3, #36	; 0x24
 800bb96:	2100      	movs	r1, #0
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f001 fd0b 	bl	800d5b4 <RCCEx_PLL3_Config>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bba2:	e005      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	75fb      	strb	r3, [r7, #23]
      break;
 800bba8:	e002      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800bbaa:	bf00      	nop
 800bbac:	e000      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800bbae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbb0:	7dfb      	ldrb	r3, [r7, #23]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10a      	bne.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bbb6:	4b36      	ldr	r3, [pc, #216]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800bbb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbba:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bbc4:	4932      	ldr	r1, [pc, #200]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	658b      	str	r3, [r1, #88]	; 0x58
 800bbca:	e001      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbcc:	7dfb      	ldrb	r3, [r7, #23]
 800bbce:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d044      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bbe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbe6:	d01f      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bbe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbec:	d805      	bhi.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00a      	beq.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800bbf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bbf6:	d00e      	beq.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800bbf8:	e01f      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800bbfa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bbfe:	d01f      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800bc00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc04:	d01e      	beq.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800bc06:	e018      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc08:	4b21      	ldr	r3, [pc, #132]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800bc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0c:	4a20      	ldr	r2, [pc, #128]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800bc0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bc14:	e017      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	3304      	adds	r3, #4
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f001 fc17 	bl	800d450 <RCCEx_PLL2_Config>
 800bc22:	4603      	mov	r3, r0
 800bc24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bc26:	e00e      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	3324      	adds	r3, #36	; 0x24
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f001 fcc0 	bl	800d5b4 <RCCEx_PLL3_Config>
 800bc34:	4603      	mov	r3, r0
 800bc36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bc38:	e005      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	75fb      	strb	r3, [r7, #23]
      break;
 800bc3e:	e002      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800bc40:	bf00      	nop
 800bc42:	e000      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800bc44:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10a      	bne.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bc4c:	4b10      	ldr	r3, [pc, #64]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800bc4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bc5a:	490d      	ldr	r1, [pc, #52]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	658b      	str	r3, [r1, #88]	; 0x58
 800bc60:	e001      	b.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc62:	7dfb      	ldrb	r3, [r7, #23]
 800bc64:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d035      	beq.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc76:	2b10      	cmp	r3, #16
 800bc78:	d00c      	beq.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800bc7a:	2b10      	cmp	r3, #16
 800bc7c:	d802      	bhi.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d01b      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800bc82:	e017      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800bc84:	2b20      	cmp	r3, #32
 800bc86:	d00c      	beq.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800bc88:	2b30      	cmp	r3, #48	; 0x30
 800bc8a:	d018      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800bc8c:	e012      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800bc8e:	bf00      	nop
 800bc90:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc94:	4baf      	ldr	r3, [pc, #700]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc98:	4aae      	ldr	r2, [pc, #696]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bc9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bca0:	e00e      	b.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	3304      	adds	r3, #4
 800bca6:	2102      	movs	r1, #2
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f001 fbd1 	bl	800d450 <RCCEx_PLL2_Config>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bcb2:	e005      	b.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	75fb      	strb	r3, [r7, #23]
      break;
 800bcb8:	e002      	b.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800bcba:	bf00      	nop
 800bcbc:	e000      	b.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800bcbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcc0:	7dfb      	ldrb	r3, [r7, #23]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d109      	bne.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bcc6:	4ba3      	ldr	r3, [pc, #652]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bcc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcd2:	49a0      	ldr	r1, [pc, #640]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bcd8:	e001      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
 800bcdc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d042      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcf2:	d01f      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800bcf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcf8:	d805      	bhi.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00a      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800bcfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd02:	d00e      	beq.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x392>
 800bd04:	e01f      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800bd06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd0a:	d01f      	beq.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800bd0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd10:	d01e      	beq.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800bd12:	e018      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd14:	4b8f      	ldr	r3, [pc, #572]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd18:	4a8e      	ldr	r2, [pc, #568]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bd1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bd20:	e017      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	3304      	adds	r3, #4
 800bd26:	2100      	movs	r1, #0
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f001 fb91 	bl	800d450 <RCCEx_PLL2_Config>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bd32:	e00e      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	3324      	adds	r3, #36	; 0x24
 800bd38:	2100      	movs	r1, #0
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f001 fc3a 	bl	800d5b4 <RCCEx_PLL3_Config>
 800bd40:	4603      	mov	r3, r0
 800bd42:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bd44:	e005      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd46:	2301      	movs	r3, #1
 800bd48:	75fb      	strb	r3, [r7, #23]
      break;
 800bd4a:	e002      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800bd4c:	bf00      	nop
 800bd4e:	e000      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800bd50:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d109      	bne.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bd58:	4b7e      	ldr	r3, [pc, #504]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bd5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd5c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd64:	497b      	ldr	r1, [pc, #492]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bd66:	4313      	orrs	r3, r2
 800bd68:	650b      	str	r3, [r1, #80]	; 0x50
 800bd6a:	e001      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd6c:	7dfb      	ldrb	r3, [r7, #23]
 800bd6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d042      	beq.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd84:	d01b      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800bd86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd8a:	d805      	bhi.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d022      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800bd90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd94:	d00a      	beq.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800bd96:	e01b      	b.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800bd98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd9c:	d01d      	beq.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800bd9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bda2:	d01c      	beq.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800bda4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bda8:	d01b      	beq.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800bdaa:	e011      	b.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	3304      	adds	r3, #4
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f001 fb4c 	bl	800d450 <RCCEx_PLL2_Config>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bdbc:	e012      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	3324      	adds	r3, #36	; 0x24
 800bdc2:	2101      	movs	r1, #1
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f001 fbf5 	bl	800d5b4 <RCCEx_PLL3_Config>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bdce:	e009      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	75fb      	strb	r3, [r7, #23]
      break;
 800bdd4:	e006      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800bdd6:	bf00      	nop
 800bdd8:	e004      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800bdda:	bf00      	nop
 800bddc:	e002      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800bdde:	bf00      	nop
 800bde0:	e000      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800bde2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bde4:	7dfb      	ldrb	r3, [r7, #23]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d109      	bne.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bdea:	4b5a      	ldr	r3, [pc, #360]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bdec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdf6:	4957      	ldr	r1, [pc, #348]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	650b      	str	r3, [r1, #80]	; 0x50
 800bdfc:	e001      	b.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdfe:	7dfb      	ldrb	r3, [r7, #23]
 800be00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d044      	beq.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800be14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be18:	d01b      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800be1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be1e:	d805      	bhi.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800be20:	2b00      	cmp	r3, #0
 800be22:	d022      	beq.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800be24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be28:	d00a      	beq.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800be2a:	e01b      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800be2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be30:	d01d      	beq.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800be32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be36:	d01c      	beq.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800be38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be3c:	d01b      	beq.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800be3e:	e011      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	3304      	adds	r3, #4
 800be44:	2101      	movs	r1, #1
 800be46:	4618      	mov	r0, r3
 800be48:	f001 fb02 	bl	800d450 <RCCEx_PLL2_Config>
 800be4c:	4603      	mov	r3, r0
 800be4e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800be50:	e012      	b.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	3324      	adds	r3, #36	; 0x24
 800be56:	2101      	movs	r1, #1
 800be58:	4618      	mov	r0, r3
 800be5a:	f001 fbab 	bl	800d5b4 <RCCEx_PLL3_Config>
 800be5e:	4603      	mov	r3, r0
 800be60:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800be62:	e009      	b.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800be64:	2301      	movs	r3, #1
 800be66:	75fb      	strb	r3, [r7, #23]
      break;
 800be68:	e006      	b.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800be6a:	bf00      	nop
 800be6c:	e004      	b.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800be6e:	bf00      	nop
 800be70:	e002      	b.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800be72:	bf00      	nop
 800be74:	e000      	b.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800be76:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be78:	7dfb      	ldrb	r3, [r7, #23]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10a      	bne.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800be7e:	4b35      	ldr	r3, [pc, #212]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800be80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be82:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800be8c:	4931      	ldr	r1, [pc, #196]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800be8e:	4313      	orrs	r3, r2
 800be90:	658b      	str	r3, [r1, #88]	; 0x58
 800be92:	e001      	b.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be94:	7dfb      	ldrb	r3, [r7, #23]
 800be96:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d02d      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beac:	d005      	beq.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800beae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beb2:	d009      	beq.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d013      	beq.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800beb8:	e00f      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800beba:	4b26      	ldr	r3, [pc, #152]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bebe:	4a25      	ldr	r2, [pc, #148]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bec4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bec6:	e00c      	b.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	3304      	adds	r3, #4
 800becc:	2101      	movs	r1, #1
 800bece:	4618      	mov	r0, r3
 800bed0:	f001 fabe 	bl	800d450 <RCCEx_PLL2_Config>
 800bed4:	4603      	mov	r3, r0
 800bed6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bed8:	e003      	b.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	75fb      	strb	r3, [r7, #23]
      break;
 800bede:	e000      	b.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800bee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bee2:	7dfb      	ldrb	r3, [r7, #23]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d109      	bne.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bee8:	4b1a      	ldr	r3, [pc, #104]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800beea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bef4:	4917      	ldr	r1, [pc, #92]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bef6:	4313      	orrs	r3, r2
 800bef8:	650b      	str	r3, [r1, #80]	; 0x50
 800befa:	e001      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800befc:	7dfb      	ldrb	r3, [r7, #23]
 800befe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d035      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf10:	2b03      	cmp	r3, #3
 800bf12:	d81b      	bhi.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bf14:	a201      	add	r2, pc, #4	; (adr r2, 800bf1c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800bf16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf1a:	bf00      	nop
 800bf1c:	0800bf59 	.word	0x0800bf59
 800bf20:	0800bf2d 	.word	0x0800bf2d
 800bf24:	0800bf3b 	.word	0x0800bf3b
 800bf28:	0800bf59 	.word	0x0800bf59
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf2c:	4b09      	ldr	r3, [pc, #36]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf30:	4a08      	ldr	r2, [pc, #32]	; (800bf54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bf32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bf38:	e00f      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	3304      	adds	r3, #4
 800bf3e:	2102      	movs	r1, #2
 800bf40:	4618      	mov	r0, r3
 800bf42:	f001 fa85 	bl	800d450 <RCCEx_PLL2_Config>
 800bf46:	4603      	mov	r3, r0
 800bf48:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bf4a:	e006      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	75fb      	strb	r3, [r7, #23]
      break;
 800bf50:	e003      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800bf52:	bf00      	nop
 800bf54:	58024400 	.word	0x58024400
      break;
 800bf58:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d109      	bne.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bf60:	4bba      	ldr	r3, [pc, #744]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800bf62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf64:	f023 0203 	bic.w	r2, r3, #3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf6c:	49b7      	ldr	r1, [pc, #732]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bf72:	e001      	b.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
 800bf76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 8086 	beq.w	800c092 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bf86:	4bb2      	ldr	r3, [pc, #712]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4ab1      	ldr	r2, [pc, #708]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800bf8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bf92:	f7f9 fc75 	bl	8005880 <HAL_GetTick>
 800bf96:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf98:	e009      	b.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf9a:	f7f9 fc71 	bl	8005880 <HAL_GetTick>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	2b64      	cmp	r3, #100	; 0x64
 800bfa6:	d902      	bls.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800bfa8:	2303      	movs	r3, #3
 800bfaa:	75fb      	strb	r3, [r7, #23]
        break;
 800bfac:	e005      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bfae:	4ba8      	ldr	r3, [pc, #672]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d0ef      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800bfba:	7dfb      	ldrb	r3, [r7, #23]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d166      	bne.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bfc0:	4ba2      	ldr	r3, [pc, #648]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800bfc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfca:	4053      	eors	r3, r2
 800bfcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d013      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bfd4:	4b9d      	ldr	r3, [pc, #628]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800bfd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfdc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bfde:	4b9b      	ldr	r3, [pc, #620]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800bfe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfe2:	4a9a      	ldr	r2, [pc, #616]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800bfe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfe8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bfea:	4b98      	ldr	r3, [pc, #608]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800bfec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfee:	4a97      	ldr	r2, [pc, #604]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800bff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bff4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bff6:	4a95      	ldr	r2, [pc, #596]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c006:	d115      	bne.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c008:	f7f9 fc3a 	bl	8005880 <HAL_GetTick>
 800c00c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c00e:	e00b      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c010:	f7f9 fc36 	bl	8005880 <HAL_GetTick>
 800c014:	4602      	mov	r2, r0
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	1ad3      	subs	r3, r2, r3
 800c01a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c01e:	4293      	cmp	r3, r2
 800c020:	d902      	bls.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800c022:	2303      	movs	r3, #3
 800c024:	75fb      	strb	r3, [r7, #23]
            break;
 800c026:	e005      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c028:	4b88      	ldr	r3, [pc, #544]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800c02a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c02c:	f003 0302 	and.w	r3, r3, #2
 800c030:	2b00      	cmp	r3, #0
 800c032:	d0ed      	beq.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800c034:	7dfb      	ldrb	r3, [r7, #23]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d126      	bne.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c048:	d10d      	bne.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800c04a:	4b80      	ldr	r3, [pc, #512]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c058:	0919      	lsrs	r1, r3, #4
 800c05a:	4b7e      	ldr	r3, [pc, #504]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800c05c:	400b      	ands	r3, r1
 800c05e:	497b      	ldr	r1, [pc, #492]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800c060:	4313      	orrs	r3, r2
 800c062:	610b      	str	r3, [r1, #16]
 800c064:	e005      	b.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800c066:	4b79      	ldr	r3, [pc, #484]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	4a78      	ldr	r2, [pc, #480]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800c06c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c070:	6113      	str	r3, [r2, #16]
 800c072:	4b76      	ldr	r3, [pc, #472]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800c074:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c07c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c080:	4972      	ldr	r1, [pc, #456]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800c082:	4313      	orrs	r3, r2
 800c084:	670b      	str	r3, [r1, #112]	; 0x70
 800c086:	e004      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c088:	7dfb      	ldrb	r3, [r7, #23]
 800c08a:	75bb      	strb	r3, [r7, #22]
 800c08c:	e001      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f003 0301 	and.w	r3, r3, #1
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d07d      	beq.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0a2:	2b28      	cmp	r3, #40	; 0x28
 800c0a4:	d866      	bhi.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800c0a6:	a201      	add	r2, pc, #4	; (adr r2, 800c0ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ac:	0800c17b 	.word	0x0800c17b
 800c0b0:	0800c175 	.word	0x0800c175
 800c0b4:	0800c175 	.word	0x0800c175
 800c0b8:	0800c175 	.word	0x0800c175
 800c0bc:	0800c175 	.word	0x0800c175
 800c0c0:	0800c175 	.word	0x0800c175
 800c0c4:	0800c175 	.word	0x0800c175
 800c0c8:	0800c175 	.word	0x0800c175
 800c0cc:	0800c151 	.word	0x0800c151
 800c0d0:	0800c175 	.word	0x0800c175
 800c0d4:	0800c175 	.word	0x0800c175
 800c0d8:	0800c175 	.word	0x0800c175
 800c0dc:	0800c175 	.word	0x0800c175
 800c0e0:	0800c175 	.word	0x0800c175
 800c0e4:	0800c175 	.word	0x0800c175
 800c0e8:	0800c175 	.word	0x0800c175
 800c0ec:	0800c163 	.word	0x0800c163
 800c0f0:	0800c175 	.word	0x0800c175
 800c0f4:	0800c175 	.word	0x0800c175
 800c0f8:	0800c175 	.word	0x0800c175
 800c0fc:	0800c175 	.word	0x0800c175
 800c100:	0800c175 	.word	0x0800c175
 800c104:	0800c175 	.word	0x0800c175
 800c108:	0800c175 	.word	0x0800c175
 800c10c:	0800c17b 	.word	0x0800c17b
 800c110:	0800c175 	.word	0x0800c175
 800c114:	0800c175 	.word	0x0800c175
 800c118:	0800c175 	.word	0x0800c175
 800c11c:	0800c175 	.word	0x0800c175
 800c120:	0800c175 	.word	0x0800c175
 800c124:	0800c175 	.word	0x0800c175
 800c128:	0800c175 	.word	0x0800c175
 800c12c:	0800c17b 	.word	0x0800c17b
 800c130:	0800c175 	.word	0x0800c175
 800c134:	0800c175 	.word	0x0800c175
 800c138:	0800c175 	.word	0x0800c175
 800c13c:	0800c175 	.word	0x0800c175
 800c140:	0800c175 	.word	0x0800c175
 800c144:	0800c175 	.word	0x0800c175
 800c148:	0800c175 	.word	0x0800c175
 800c14c:	0800c17b 	.word	0x0800c17b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3304      	adds	r3, #4
 800c154:	2101      	movs	r1, #1
 800c156:	4618      	mov	r0, r3
 800c158:	f001 f97a 	bl	800d450 <RCCEx_PLL2_Config>
 800c15c:	4603      	mov	r3, r0
 800c15e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c160:	e00c      	b.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	3324      	adds	r3, #36	; 0x24
 800c166:	2101      	movs	r1, #1
 800c168:	4618      	mov	r0, r3
 800c16a:	f001 fa23 	bl	800d5b4 <RCCEx_PLL3_Config>
 800c16e:	4603      	mov	r3, r0
 800c170:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c172:	e003      	b.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	75fb      	strb	r3, [r7, #23]
      break;
 800c178:	e000      	b.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800c17a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c17c:	7dfb      	ldrb	r3, [r7, #23]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d109      	bne.n	800c196 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c182:	4b32      	ldr	r3, [pc, #200]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800c184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c186:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c18e:	492f      	ldr	r1, [pc, #188]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800c190:	4313      	orrs	r3, r2
 800c192:	654b      	str	r3, [r1, #84]	; 0x54
 800c194:	e001      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c196:	7dfb      	ldrb	r3, [r7, #23]
 800c198:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 0302 	and.w	r3, r3, #2
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d037      	beq.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1aa:	2b05      	cmp	r3, #5
 800c1ac:	d820      	bhi.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800c1ae:	a201      	add	r2, pc, #4	; (adr r2, 800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800c1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b4:	0800c1f7 	.word	0x0800c1f7
 800c1b8:	0800c1cd 	.word	0x0800c1cd
 800c1bc:	0800c1df 	.word	0x0800c1df
 800c1c0:	0800c1f7 	.word	0x0800c1f7
 800c1c4:	0800c1f7 	.word	0x0800c1f7
 800c1c8:	0800c1f7 	.word	0x0800c1f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	2101      	movs	r1, #1
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f001 f93c 	bl	800d450 <RCCEx_PLL2_Config>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c1dc:	e00c      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	3324      	adds	r3, #36	; 0x24
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f001 f9e5 	bl	800d5b4 <RCCEx_PLL3_Config>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c1ee:	e003      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	75fb      	strb	r3, [r7, #23]
      break;
 800c1f4:	e000      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800c1f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d109      	bne.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c1fe:	4b13      	ldr	r3, [pc, #76]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800c200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c202:	f023 0207 	bic.w	r2, r3, #7
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c20a:	4910      	ldr	r1, [pc, #64]	; (800c24c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800c20c:	4313      	orrs	r3, r2
 800c20e:	654b      	str	r3, [r1, #84]	; 0x54
 800c210:	e001      	b.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c212:	7dfb      	ldrb	r3, [r7, #23]
 800c214:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f003 0304 	and.w	r3, r3, #4
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d040      	beq.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c228:	2b05      	cmp	r3, #5
 800c22a:	d827      	bhi.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800c22c:	a201      	add	r2, pc, #4	; (adr r2, 800c234 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800c22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c232:	bf00      	nop
 800c234:	0800c283 	.word	0x0800c283
 800c238:	0800c259 	.word	0x0800c259
 800c23c:	0800c26b 	.word	0x0800c26b
 800c240:	0800c283 	.word	0x0800c283
 800c244:	0800c283 	.word	0x0800c283
 800c248:	0800c283 	.word	0x0800c283
 800c24c:	58024400 	.word	0x58024400
 800c250:	58024800 	.word	0x58024800
 800c254:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	3304      	adds	r3, #4
 800c25c:	2101      	movs	r1, #1
 800c25e:	4618      	mov	r0, r3
 800c260:	f001 f8f6 	bl	800d450 <RCCEx_PLL2_Config>
 800c264:	4603      	mov	r3, r0
 800c266:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c268:	e00c      	b.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	3324      	adds	r3, #36	; 0x24
 800c26e:	2101      	movs	r1, #1
 800c270:	4618      	mov	r0, r3
 800c272:	f001 f99f 	bl	800d5b4 <RCCEx_PLL3_Config>
 800c276:	4603      	mov	r3, r0
 800c278:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c27a:	e003      	b.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	75fb      	strb	r3, [r7, #23]
      break;
 800c280:	e000      	b.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800c282:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c284:	7dfb      	ldrb	r3, [r7, #23]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10a      	bne.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c28a:	4bb2      	ldr	r3, [pc, #712]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c28c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c28e:	f023 0207 	bic.w	r2, r3, #7
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c298:	49ae      	ldr	r1, [pc, #696]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c29a:	4313      	orrs	r3, r2
 800c29c:	658b      	str	r3, [r1, #88]	; 0x58
 800c29e:	e001      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a0:	7dfb      	ldrb	r3, [r7, #23]
 800c2a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f003 0320 	and.w	r3, r3, #32
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d044      	beq.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2ba:	d01b      	beq.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800c2bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2c0:	d805      	bhi.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d022      	beq.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800c2c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2ca:	d00a      	beq.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800c2cc:	e01b      	b.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800c2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2d2:	d01d      	beq.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800c2d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2d8:	d01c      	beq.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800c2da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2de:	d01b      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800c2e0:	e011      	b.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f001 f8b1 	bl	800d450 <RCCEx_PLL2_Config>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c2f2:	e012      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	3324      	adds	r3, #36	; 0x24
 800c2f8:	2102      	movs	r1, #2
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f001 f95a 	bl	800d5b4 <RCCEx_PLL3_Config>
 800c300:	4603      	mov	r3, r0
 800c302:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c304:	e009      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	75fb      	strb	r3, [r7, #23]
      break;
 800c30a:	e006      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800c30c:	bf00      	nop
 800c30e:	e004      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800c310:	bf00      	nop
 800c312:	e002      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800c314:	bf00      	nop
 800c316:	e000      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800c318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c31a:	7dfb      	ldrb	r3, [r7, #23]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10a      	bne.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c320:	4b8c      	ldr	r3, [pc, #560]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c324:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c32e:	4989      	ldr	r1, [pc, #548]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c330:	4313      	orrs	r3, r2
 800c332:	654b      	str	r3, [r1, #84]	; 0x54
 800c334:	e001      	b.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c336:	7dfb      	ldrb	r3, [r7, #23]
 800c338:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c342:	2b00      	cmp	r3, #0
 800c344:	d044      	beq.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c34c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c350:	d01b      	beq.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800c352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c356:	d805      	bhi.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d022      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800c35c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c360:	d00a      	beq.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800c362:	e01b      	b.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800c364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c368:	d01d      	beq.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800c36a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c36e:	d01c      	beq.n	800c3aa <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800c370:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c374:	d01b      	beq.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800c376:	e011      	b.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3304      	adds	r3, #4
 800c37c:	2100      	movs	r1, #0
 800c37e:	4618      	mov	r0, r3
 800c380:	f001 f866 	bl	800d450 <RCCEx_PLL2_Config>
 800c384:	4603      	mov	r3, r0
 800c386:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c388:	e012      	b.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	3324      	adds	r3, #36	; 0x24
 800c38e:	2102      	movs	r1, #2
 800c390:	4618      	mov	r0, r3
 800c392:	f001 f90f 	bl	800d5b4 <RCCEx_PLL3_Config>
 800c396:	4603      	mov	r3, r0
 800c398:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c39a:	e009      	b.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c39c:	2301      	movs	r3, #1
 800c39e:	75fb      	strb	r3, [r7, #23]
      break;
 800c3a0:	e006      	b.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800c3a2:	bf00      	nop
 800c3a4:	e004      	b.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800c3a6:	bf00      	nop
 800c3a8:	e002      	b.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800c3aa:	bf00      	nop
 800c3ac:	e000      	b.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800c3ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3b0:	7dfb      	ldrb	r3, [r7, #23]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d10a      	bne.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c3b6:	4b67      	ldr	r3, [pc, #412]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c3c4:	4963      	ldr	r1, [pc, #396]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	658b      	str	r3, [r1, #88]	; 0x58
 800c3ca:	e001      	b.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3cc:	7dfb      	ldrb	r3, [r7, #23]
 800c3ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d044      	beq.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c3e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3e6:	d01b      	beq.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800c3e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3ec:	d805      	bhi.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d022      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800c3f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3f6:	d00a      	beq.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c3f8:	e01b      	b.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800c3fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3fe:	d01d      	beq.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800c400:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c404:	d01c      	beq.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800c406:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c40a:	d01b      	beq.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800c40c:	e011      	b.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3304      	adds	r3, #4
 800c412:	2100      	movs	r1, #0
 800c414:	4618      	mov	r0, r3
 800c416:	f001 f81b 	bl	800d450 <RCCEx_PLL2_Config>
 800c41a:	4603      	mov	r3, r0
 800c41c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c41e:	e012      	b.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	3324      	adds	r3, #36	; 0x24
 800c424:	2102      	movs	r1, #2
 800c426:	4618      	mov	r0, r3
 800c428:	f001 f8c4 	bl	800d5b4 <RCCEx_PLL3_Config>
 800c42c:	4603      	mov	r3, r0
 800c42e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c430:	e009      	b.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c432:	2301      	movs	r3, #1
 800c434:	75fb      	strb	r3, [r7, #23]
      break;
 800c436:	e006      	b.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800c438:	bf00      	nop
 800c43a:	e004      	b.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800c43c:	bf00      	nop
 800c43e:	e002      	b.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800c440:	bf00      	nop
 800c442:	e000      	b.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800c444:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c446:	7dfb      	ldrb	r3, [r7, #23]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10a      	bne.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c44c:	4b41      	ldr	r3, [pc, #260]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c44e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c450:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c45a:	493e      	ldr	r1, [pc, #248]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c45c:	4313      	orrs	r3, r2
 800c45e:	658b      	str	r3, [r1, #88]	; 0x58
 800c460:	e001      	b.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c462:	7dfb      	ldrb	r3, [r7, #23]
 800c464:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 0308 	and.w	r3, r3, #8
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d01a      	beq.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c47c:	d10a      	bne.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	3324      	adds	r3, #36	; 0x24
 800c482:	2102      	movs	r1, #2
 800c484:	4618      	mov	r0, r3
 800c486:	f001 f895 	bl	800d5b4 <RCCEx_PLL3_Config>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d001      	beq.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c494:	4b2f      	ldr	r3, [pc, #188]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c498:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4a2:	492c      	ldr	r1, [pc, #176]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f003 0310 	and.w	r3, r3, #16
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d01a      	beq.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4be:	d10a      	bne.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	3324      	adds	r3, #36	; 0x24
 800c4c4:	2102      	movs	r1, #2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f001 f874 	bl	800d5b4 <RCCEx_PLL3_Config>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d001      	beq.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c4d6:	4b1f      	ldr	r3, [pc, #124]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c4d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4e4:	491b      	ldr	r1, [pc, #108]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d032      	beq.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c500:	d00d      	beq.n	800c51e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800c502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c506:	d016      	beq.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d111      	bne.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	3304      	adds	r3, #4
 800c510:	2100      	movs	r1, #0
 800c512:	4618      	mov	r0, r3
 800c514:	f000 ff9c 	bl	800d450 <RCCEx_PLL2_Config>
 800c518:	4603      	mov	r3, r0
 800c51a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c51c:	e00c      	b.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3324      	adds	r3, #36	; 0x24
 800c522:	2102      	movs	r1, #2
 800c524:	4618      	mov	r0, r3
 800c526:	f001 f845 	bl	800d5b4 <RCCEx_PLL3_Config>
 800c52a:	4603      	mov	r3, r0
 800c52c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c52e:	e003      	b.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c530:	2301      	movs	r3, #1
 800c532:	75fb      	strb	r3, [r7, #23]
      break;
 800c534:	e000      	b.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800c536:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c538:	7dfb      	ldrb	r3, [r7, #23]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10c      	bne.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c53e:	4b05      	ldr	r3, [pc, #20]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c542:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c54c:	4901      	ldr	r1, [pc, #4]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800c54e:	4313      	orrs	r3, r2
 800c550:	658b      	str	r3, [r1, #88]	; 0x58
 800c552:	e003      	b.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800c554:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c558:	7dfb      	ldrb	r3, [r7, #23]
 800c55a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c564:	2b00      	cmp	r3, #0
 800c566:	d02f      	beq.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c56e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c572:	d00c      	beq.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c574:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c578:	d015      	beq.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800c57a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c57e:	d10f      	bne.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c580:	4b79      	ldr	r3, [pc, #484]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c584:	4a78      	ldr	r2, [pc, #480]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c58a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c58c:	e00c      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	3324      	adds	r3, #36	; 0x24
 800c592:	2101      	movs	r1, #1
 800c594:	4618      	mov	r0, r3
 800c596:	f001 f80d 	bl	800d5b4 <RCCEx_PLL3_Config>
 800c59a:	4603      	mov	r3, r0
 800c59c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c59e:	e003      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	75fb      	strb	r3, [r7, #23]
      break;
 800c5a4:	e000      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800c5a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5a8:	7dfb      	ldrb	r3, [r7, #23]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10a      	bne.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c5ae:	4b6e      	ldr	r3, [pc, #440]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5bc:	496a      	ldr	r1, [pc, #424]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	654b      	str	r3, [r1, #84]	; 0x54
 800c5c2:	e001      	b.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5c4:	7dfb      	ldrb	r3, [r7, #23]
 800c5c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d029      	beq.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d003      	beq.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800c5dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5e0:	d007      	beq.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800c5e2:	e00f      	b.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5e4:	4b60      	ldr	r3, [pc, #384]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e8:	4a5f      	ldr	r2, [pc, #380]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c5ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c5f0:	e00b      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	3304      	adds	r3, #4
 800c5f6:	2102      	movs	r1, #2
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f000 ff29 	bl	800d450 <RCCEx_PLL2_Config>
 800c5fe:	4603      	mov	r3, r0
 800c600:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c602:	e002      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	75fb      	strb	r3, [r7, #23]
      break;
 800c608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c60a:	7dfb      	ldrb	r3, [r7, #23]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d109      	bne.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c610:	4b55      	ldr	r3, [pc, #340]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c614:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c61c:	4952      	ldr	r1, [pc, #328]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c61e:	4313      	orrs	r3, r2
 800c620:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c622:	e001      	b.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c624:	7dfb      	ldrb	r3, [r7, #23]
 800c626:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00a      	beq.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	3324      	adds	r3, #36	; 0x24
 800c638:	2102      	movs	r1, #2
 800c63a:	4618      	mov	r0, r3
 800c63c:	f000 ffba 	bl	800d5b4 <RCCEx_PLL3_Config>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d001      	beq.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c652:	2b00      	cmp	r3, #0
 800c654:	d02f      	beq.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c65a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c65e:	d00c      	beq.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800c660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c664:	d802      	bhi.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800c666:	2b00      	cmp	r3, #0
 800c668:	d011      	beq.n	800c68e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800c66a:	e00d      	b.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800c66c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c670:	d00f      	beq.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800c672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c676:	d00e      	beq.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800c678:	e006      	b.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c67a:	4b3b      	ldr	r3, [pc, #236]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67e:	4a3a      	ldr	r2, [pc, #232]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c684:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c686:	e007      	b.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	75fb      	strb	r3, [r7, #23]
      break;
 800c68c:	e004      	b.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800c68e:	bf00      	nop
 800c690:	e002      	b.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800c692:	bf00      	nop
 800c694:	e000      	b.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800c696:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c698:	7dfb      	ldrb	r3, [r7, #23]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d109      	bne.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c69e:	4b32      	ldr	r3, [pc, #200]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6aa:	492f      	ldr	r1, [pc, #188]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	654b      	str	r3, [r1, #84]	; 0x54
 800c6b0:	e001      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6b2:	7dfb      	ldrb	r3, [r7, #23]
 800c6b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d008      	beq.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c6c2:	4b29      	ldr	r3, [pc, #164]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c6c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ce:	4926      	ldr	r1, [pc, #152]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d009      	beq.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c6e0:	4b21      	ldr	r3, [pc, #132]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c6ee:	491e      	ldr	r1, [pc, #120]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d008      	beq.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c700:	4b19      	ldr	r3, [pc, #100]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c704:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c70c:	4916      	ldr	r1, [pc, #88]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c70e:	4313      	orrs	r3, r2
 800c710:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00d      	beq.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c71e:	4b12      	ldr	r3, [pc, #72]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	4a11      	ldr	r2, [pc, #68]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c724:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c728:	6113      	str	r3, [r2, #16]
 800c72a:	4b0f      	ldr	r3, [pc, #60]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c72c:	691a      	ldr	r2, [r3, #16]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c734:	490c      	ldr	r1, [pc, #48]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c736:	4313      	orrs	r3, r2
 800c738:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	da08      	bge.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c742:	4b09      	ldr	r3, [pc, #36]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c746:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c74e:	4906      	ldr	r1, [pc, #24]	; (800c768 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800c750:	4313      	orrs	r3, r2
 800c752:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800c754:	7dbb      	ldrb	r3, [r7, #22]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d101      	bne.n	800c75e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800c75a:	2300      	movs	r3, #0
 800c75c:	e000      	b.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800c75e:	2301      	movs	r3, #1
}
 800c760:	4618      	mov	r0, r3
 800c762:	3718      	adds	r7, #24
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	58024400 	.word	0x58024400

0800c76c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b090      	sub	sp, #64	; 0x40
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c77a:	d150      	bne.n	800c81e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800c77c:	4ba1      	ldr	r3, [pc, #644]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c77e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c780:	f003 0307 	and.w	r3, r3, #7
 800c784:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c788:	2b04      	cmp	r3, #4
 800c78a:	d844      	bhi.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800c78c:	a201      	add	r2, pc, #4	; (adr r2, 800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800c78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c792:	bf00      	nop
 800c794:	0800c7a9 	.word	0x0800c7a9
 800c798:	0800c7b9 	.word	0x0800c7b9
 800c79c:	0800c7c9 	.word	0x0800c7c9
 800c7a0:	0800c811 	.word	0x0800c811
 800c7a4:	0800c7d9 	.word	0x0800c7d9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 fd03 	bl	800d1b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c7b6:	e241      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7b8:	f107 0318 	add.w	r3, r7, #24
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f000 fa63 	bl	800cc88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c7c6:	e239      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7c8:	f107 030c 	add.w	r3, r7, #12
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 fba7 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c7d6:	e231      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c7d8:	4b8a      	ldr	r3, [pc, #552]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c7da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7e0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800c7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d102      	bne.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800c7e8:	4b87      	ldr	r3, [pc, #540]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800c7ec:	e226      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800c7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7f4:	d102      	bne.n	800c7fc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800c7f6:	4b85      	ldr	r3, [pc, #532]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c7fa:	e21f      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800c7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c802:	d102      	bne.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800c804:	4b82      	ldr	r3, [pc, #520]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c806:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c808:	e218      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c80e:	e215      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c810:	4b80      	ldr	r3, [pc, #512]	; (800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c812:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c814:	e212      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800c816:	2300      	movs	r3, #0
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c81a:	bf00      	nop
 800c81c:	e20e      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c824:	d14f      	bne.n	800c8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800c826:	4b77      	ldr	r3, [pc, #476]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c82a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c82e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	2b80      	cmp	r3, #128	; 0x80
 800c834:	d01c      	beq.n	800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800c836:	2b80      	cmp	r3, #128	; 0x80
 800c838:	d804      	bhi.n	800c844 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d008      	beq.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800c83e:	2b40      	cmp	r3, #64	; 0x40
 800c840:	d00e      	beq.n	800c860 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800c842:	e03c      	b.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800c844:	2bc0      	cmp	r3, #192	; 0xc0
 800c846:	d037      	beq.n	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800c848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c84c:	d018      	beq.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800c84e:	e036      	b.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c854:	4618      	mov	r0, r3
 800c856:	f000 fcaf 	bl	800d1b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c85e:	e1ed      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c860:	f107 0318 	add.w	r3, r7, #24
 800c864:	4618      	mov	r0, r3
 800c866:	f000 fa0f 	bl	800cc88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c86e:	e1e5      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c870:	f107 030c 	add.w	r3, r7, #12
 800c874:	4618      	mov	r0, r3
 800c876:	f000 fb53 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c87e:	e1dd      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c880:	4b60      	ldr	r3, [pc, #384]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c884:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c888:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800c88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d102      	bne.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800c890:	4b5d      	ldr	r3, [pc, #372]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c892:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800c894:	e1d2      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800c896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c89c:	d102      	bne.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800c89e:	4b5b      	ldr	r3, [pc, #364]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c8a2:	e1cb      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800c8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8aa:	d102      	bne.n	800c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800c8ac:	4b58      	ldr	r3, [pc, #352]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c8b0:	e1c4      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c8b6:	e1c1      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c8b8:	4b56      	ldr	r3, [pc, #344]	; (800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c8bc:	e1be      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c8c2:	bf00      	nop
 800c8c4:	e1ba      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8cc:	d153      	bne.n	800c976 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800c8ce:	4b4d      	ldr	r3, [pc, #308]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c8d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8de:	d01f      	beq.n	800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800c8e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8e4:	d805      	bhi.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00a      	beq.n	800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800c8ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8ee:	d00f      	beq.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800c8f0:	e03d      	b.n	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800c8f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c8f6:	d037      	beq.n	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800c8f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c8fc:	d018      	beq.n	800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800c8fe:	e036      	b.n	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c904:	4618      	mov	r0, r3
 800c906:	f000 fc57 	bl	800d1b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c90e:	e195      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c910:	f107 0318 	add.w	r3, r7, #24
 800c914:	4618      	mov	r0, r3
 800c916:	f000 f9b7 	bl	800cc88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c91e:	e18d      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c920:	f107 030c 	add.w	r3, r7, #12
 800c924:	4618      	mov	r0, r3
 800c926:	f000 fafb 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c92e:	e185      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c930:	4b34      	ldr	r3, [pc, #208]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c934:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c938:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800c93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d102      	bne.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800c940:	4b31      	ldr	r3, [pc, #196]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c942:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800c944:	e17a      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800c946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c94c:	d102      	bne.n	800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800c94e:	4b2f      	ldr	r3, [pc, #188]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c952:	e173      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800c954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c95a:	d102      	bne.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800c95c:	4b2c      	ldr	r3, [pc, #176]	; (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c95e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c960:	e16c      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c966:	e169      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c968:	4b2a      	ldr	r3, [pc, #168]	; (800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c96a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c96c:	e166      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c972:	bf00      	nop
 800c974:	e162      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c97c:	d15d      	bne.n	800ca3a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800c97e:	4b21      	ldr	r3, [pc, #132]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c982:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c986:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c98e:	d01f      	beq.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800c990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c994:	d805      	bhi.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00a      	beq.n	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c99a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c99e:	d00f      	beq.n	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800c9a0:	e047      	b.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800c9a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c9a6:	d041      	beq.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800c9a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c9ac:	d018      	beq.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800c9ae:	e040      	b.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f000 fbff 	bl	800d1b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c9be:	e13d      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9c0:	f107 0318 	add.w	r3, r7, #24
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f000 f95f 	bl	800cc88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c9ce:	e135      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9d0:	f107 030c 	add.w	r3, r7, #12
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 faa3 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c9de:	e12d      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c9e0:	4b08      	ldr	r3, [pc, #32]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c9e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c9e8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800c9ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d102      	bne.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800c9f0:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800c9f4:	e122      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800c9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9fc:	d10c      	bne.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800c9fe:	4b03      	ldr	r3, [pc, #12]	; (800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ca00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca02:	e11b      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800ca04:	58024400 	.word	0x58024400
 800ca08:	03d09000 	.word	0x03d09000
 800ca0c:	003d0900 	.word	0x003d0900
 800ca10:	017d7840 	.word	0x017d7840
 800ca14:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800ca18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca1e:	d102      	bne.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800ca20:	4b89      	ldr	r3, [pc, #548]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800ca22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca24:	e10a      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca2a:	e107      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ca2c:	4b87      	ldr	r3, [pc, #540]	; (800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800ca2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca30:	e104      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca36:	bf00      	nop
 800ca38:	e100      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca40:	d153      	bne.n	800caea <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800ca42:	4b83      	ldr	r3, [pc, #524]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800ca44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca46:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ca4a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca52:	d01f      	beq.n	800ca94 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800ca54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca58:	d805      	bhi.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00a      	beq.n	800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800ca5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca62:	d00f      	beq.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800ca64:	e03d      	b.n	800cae2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800ca66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca6a:	d037      	beq.n	800cadc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800ca6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca70:	d018      	beq.n	800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800ca72:	e036      	b.n	800cae2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 fb9d 	bl	800d1b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca82:	e0db      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca84:	f107 0318 	add.w	r3, r7, #24
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f000 f8fd 	bl	800cc88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca92:	e0d3      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca94:	f107 030c 	add.w	r3, r7, #12
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f000 fa41 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800caa2:	e0cb      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800caa4:	4b6a      	ldr	r3, [pc, #424]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800caa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caa8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800caac:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800caae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d102      	bne.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800cab4:	4b67      	ldr	r3, [pc, #412]	; (800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800cab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800cab8:	e0c0      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800caba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cabc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cac0:	d102      	bne.n	800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800cac2:	4b65      	ldr	r3, [pc, #404]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800cac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cac6:	e0b9      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800cac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cace:	d102      	bne.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800cad0:	4b5d      	ldr	r3, [pc, #372]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800cad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cad4:	e0b2      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cada:	e0af      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800cadc:	4b5b      	ldr	r3, [pc, #364]	; (800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800cade:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cae0:	e0ac      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800cae2:	2300      	movs	r3, #0
 800cae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cae6:	bf00      	nop
 800cae8:	e0a8      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800caf0:	d13d      	bne.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800caf2:	4b57      	ldr	r3, [pc, #348]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800caf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cafa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb02:	d00c      	beq.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cb04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb08:	d011      	beq.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d12b      	bne.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb0e:	f107 0318 	add.w	r3, r7, #24
 800cb12:	4618      	mov	r0, r3
 800cb14:	f000 f8b8 	bl	800cc88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb1c:	e08e      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb1e:	f107 030c 	add.w	r3, r7, #12
 800cb22:	4618      	mov	r0, r3
 800cb24:	f000 f9fc 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb2c:	e086      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cb2e:	4b48      	ldr	r3, [pc, #288]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800cb30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb36:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800cb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d102      	bne.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800cb3e:	4b45      	ldr	r3, [pc, #276]	; (800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800cb40:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800cb42:	e07b      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800cb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb4a:	d102      	bne.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800cb4c:	4b42      	ldr	r3, [pc, #264]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800cb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb50:	e074      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800cb52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb58:	d102      	bne.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800cb5a:	4b3b      	ldr	r3, [pc, #236]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800cb5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb5e:	e06d      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800cb60:	2300      	movs	r3, #0
 800cb62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb64:	e06a      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800cb66:	2300      	movs	r3, #0
 800cb68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb6a:	bf00      	nop
 800cb6c:	e066      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb74:	d11f      	bne.n	800cbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800cb76:	4b36      	ldr	r3, [pc, #216]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800cb78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb7e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d003      	beq.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800cb86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb8a:	d008      	beq.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800cb8c:	e00f      	b.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb92:	4618      	mov	r0, r3
 800cb94:	f000 fb10 	bl	800d1b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb9c:	e04e      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb9e:	f107 0318 	add.w	r3, r7, #24
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 f870 	bl	800cc88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cba8:	6a3b      	ldr	r3, [r7, #32]
 800cbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cbac:	e046      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cbb2:	bf00      	nop
 800cbb4:	e042      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbbc:	d13c      	bne.n	800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800cbbe:	4b24      	ldr	r3, [pc, #144]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800cbc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbc2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cbc6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbce:	d01e      	beq.n	800cc0e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800cbd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbd4:	d805      	bhi.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00d      	beq.n	800cbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cbda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbde:	d00e      	beq.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800cbe0:	e026      	b.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800cbe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbe6:	d01d      	beq.n	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800cbe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cbec:	d01d      	beq.n	800cc2a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800cbee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cbf2:	d014      	beq.n	800cc1e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800cbf4:	e01c      	b.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cbf6:	f000 f831 	bl	800cc5c <HAL_RCCEx_GetD3PCLK1Freq>
 800cbfa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800cbfc:	e01e      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbfe:	f107 0318 	add.w	r3, r7, #24
 800cc02:	4618      	mov	r0, r3
 800cc04:	f000 f840 	bl	800cc88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc0c:	e016      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc0e:	f107 030c 	add.w	r3, r7, #12
 800cc12:	4618      	mov	r0, r3
 800cc14:	f000 f984 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc1c:	e00e      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800cc1e:	4b0d      	ldr	r3, [pc, #52]	; (800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800cc20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc22:	e00b      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800cc24:	4b0c      	ldr	r3, [pc, #48]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800cc26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc28:	e008      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800cc2a:	4b07      	ldr	r3, [pc, #28]	; (800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800cc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc2e:	e005      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc34:	bf00      	nop
 800cc36:	e001      	b.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800cc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3740      	adds	r7, #64	; 0x40
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	017d7840 	.word	0x017d7840
 800cc4c:	00bb8000 	.word	0x00bb8000
 800cc50:	58024400 	.word	0x58024400
 800cc54:	03d09000 	.word	0x03d09000
 800cc58:	003d0900 	.word	0x003d0900

0800cc5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cc60:	f7fe fe1e 	bl	800b8a0 <HAL_RCC_GetHCLKFreq>
 800cc64:	4601      	mov	r1, r0
 800cc66:	4b06      	ldr	r3, [pc, #24]	; (800cc80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cc68:	6a1b      	ldr	r3, [r3, #32]
 800cc6a:	091b      	lsrs	r3, r3, #4
 800cc6c:	f003 0307 	and.w	r3, r3, #7
 800cc70:	4a04      	ldr	r2, [pc, #16]	; (800cc84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cc72:	5cd3      	ldrb	r3, [r2, r3]
 800cc74:	f003 031f 	and.w	r3, r3, #31
 800cc78:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	58024400 	.word	0x58024400
 800cc84:	0801ed80 	.word	0x0801ed80

0800cc88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b089      	sub	sp, #36	; 0x24
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc90:	4b9d      	ldr	r3, [pc, #628]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800cc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc94:	f003 0303 	and.w	r3, r3, #3
 800cc98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800cc9a:	4b9b      	ldr	r3, [pc, #620]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800cc9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc9e:	0b1b      	lsrs	r3, r3, #12
 800cca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cca4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cca6:	4b98      	ldr	r3, [pc, #608]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800cca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccaa:	091b      	lsrs	r3, r3, #4
 800ccac:	f003 0301 	and.w	r3, r3, #1
 800ccb0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ccb2:	4b95      	ldr	r3, [pc, #596]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ccb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccb6:	08db      	lsrs	r3, r3, #3
 800ccb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ccbc:	693a      	ldr	r2, [r7, #16]
 800ccbe:	fb02 f303 	mul.w	r3, r2, r3
 800ccc2:	ee07 3a90 	vmov	s15, r3
 800ccc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f000 810a 	beq.w	800ceea <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d05a      	beq.n	800cd92 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d302      	bcc.n	800cce6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d078      	beq.n	800cdd6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800cce4:	e099      	b.n	800ce1a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cce6:	4b88      	ldr	r3, [pc, #544]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f003 0320 	and.w	r3, r3, #32
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d02d      	beq.n	800cd4e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ccf2:	4b85      	ldr	r3, [pc, #532]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	08db      	lsrs	r3, r3, #3
 800ccf8:	f003 0303 	and.w	r3, r3, #3
 800ccfc:	4a83      	ldr	r2, [pc, #524]	; (800cf0c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800ccfe:	fa22 f303 	lsr.w	r3, r2, r3
 800cd02:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	ee07 3a90 	vmov	s15, r3
 800cd0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	ee07 3a90 	vmov	s15, r3
 800cd14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd1c:	4b7a      	ldr	r3, [pc, #488]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800cd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd24:	ee07 3a90 	vmov	s15, r3
 800cd28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd30:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800cd34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd48:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cd4c:	e087      	b.n	800ce5e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	ee07 3a90 	vmov	s15, r3
 800cd54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd58:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cf14 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800cd5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd60:	4b69      	ldr	r3, [pc, #420]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800cd62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd68:	ee07 3a90 	vmov	s15, r3
 800cd6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd70:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd74:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800cd78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd90:	e065      	b.n	800ce5e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	ee07 3a90 	vmov	s15, r3
 800cd98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd9c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cf18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800cda0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cda4:	4b58      	ldr	r3, [pc, #352]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800cda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdac:	ee07 3a90 	vmov	s15, r3
 800cdb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdb8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800cdbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cdd4:	e043      	b.n	800ce5e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	ee07 3a90 	vmov	s15, r3
 800cddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cde0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cf1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800cde4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cde8:	4b47      	ldr	r3, [pc, #284]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800cdea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdf0:	ee07 3a90 	vmov	s15, r3
 800cdf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdfc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ce00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce18:	e021      	b.n	800ce5e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	ee07 3a90 	vmov	s15, r3
 800ce20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce24:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800cf18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800ce28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce2c:	4b36      	ldr	r3, [pc, #216]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ce2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce34:	ee07 3a90 	vmov	s15, r3
 800ce38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce40:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ce44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce5c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ce5e:	4b2a      	ldr	r3, [pc, #168]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ce60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce62:	0a5b      	lsrs	r3, r3, #9
 800ce64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce68:	ee07 3a90 	vmov	s15, r3
 800ce6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce78:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce84:	ee17 2a90 	vmov	r2, s15
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ce8c:	4b1e      	ldr	r3, [pc, #120]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ce8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce90:	0c1b      	lsrs	r3, r3, #16
 800ce92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce96:	ee07 3a90 	vmov	s15, r3
 800ce9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cea6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceb2:	ee17 2a90 	vmov	r2, s15
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ceba:	4b13      	ldr	r3, [pc, #76]	; (800cf08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800cebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cebe:	0e1b      	lsrs	r3, r3, #24
 800cec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cec4:	ee07 3a90 	vmov	s15, r3
 800cec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ced0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ced4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ced8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cedc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cee0:	ee17 2a90 	vmov	r2, s15
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cee8:	e008      	b.n	800cefc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	609a      	str	r2, [r3, #8]
}
 800cefc:	bf00      	nop
 800cefe:	3724      	adds	r7, #36	; 0x24
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr
 800cf08:	58024400 	.word	0x58024400
 800cf0c:	03d09000 	.word	0x03d09000
 800cf10:	46000000 	.word	0x46000000
 800cf14:	4c742400 	.word	0x4c742400
 800cf18:	4a742400 	.word	0x4a742400
 800cf1c:	4bbebc20 	.word	0x4bbebc20

0800cf20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b089      	sub	sp, #36	; 0x24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf28:	4b9d      	ldr	r3, [pc, #628]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800cf2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2c:	f003 0303 	and.w	r3, r3, #3
 800cf30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800cf32:	4b9b      	ldr	r3, [pc, #620]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800cf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf36:	0d1b      	lsrs	r3, r3, #20
 800cf38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cf3e:	4b98      	ldr	r3, [pc, #608]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800cf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf42:	0a1b      	lsrs	r3, r3, #8
 800cf44:	f003 0301 	and.w	r3, r3, #1
 800cf48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800cf4a:	4b95      	ldr	r3, [pc, #596]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800cf4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf4e:	08db      	lsrs	r3, r3, #3
 800cf50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf54:	693a      	ldr	r2, [r7, #16]
 800cf56:	fb02 f303 	mul.w	r3, r2, r3
 800cf5a:	ee07 3a90 	vmov	s15, r3
 800cf5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	f000 810a 	beq.w	800d182 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d05a      	beq.n	800d02a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d302      	bcc.n	800cf7e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800cf78:	2b02      	cmp	r3, #2
 800cf7a:	d078      	beq.n	800d06e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800cf7c:	e099      	b.n	800d0b2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf7e:	4b88      	ldr	r3, [pc, #544]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f003 0320 	and.w	r3, r3, #32
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d02d      	beq.n	800cfe6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cf8a:	4b85      	ldr	r3, [pc, #532]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	08db      	lsrs	r3, r3, #3
 800cf90:	f003 0303 	and.w	r3, r3, #3
 800cf94:	4a83      	ldr	r2, [pc, #524]	; (800d1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800cf96:	fa22 f303 	lsr.w	r3, r2, r3
 800cf9a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	ee07 3a90 	vmov	s15, r3
 800cfa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	ee07 3a90 	vmov	s15, r3
 800cfac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfb4:	4b7a      	ldr	r3, [pc, #488]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800cfb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfbc:	ee07 3a90 	vmov	s15, r3
 800cfc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfc4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfc8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800cfcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfe0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cfe4:	e087      	b.n	800d0f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	ee07 3a90 	vmov	s15, r3
 800cfec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cff0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d1ac <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800cff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cff8:	4b69      	ldr	r3, [pc, #420]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800cffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d000:	ee07 3a90 	vmov	s15, r3
 800d004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d008:	ed97 6a03 	vldr	s12, [r7, #12]
 800d00c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800d010:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d018:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d01c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d020:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d024:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d028:	e065      	b.n	800d0f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	ee07 3a90 	vmov	s15, r3
 800d030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d034:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800d038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d03c:	4b58      	ldr	r3, [pc, #352]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800d03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d044:	ee07 3a90 	vmov	s15, r3
 800d048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d04c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d050:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800d054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d05c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d064:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d068:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d06c:	e043      	b.n	800d0f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	ee07 3a90 	vmov	s15, r3
 800d074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d078:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800d07c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d080:	4b47      	ldr	r3, [pc, #284]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800d082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d088:	ee07 3a90 	vmov	s15, r3
 800d08c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d090:	ed97 6a03 	vldr	s12, [r7, #12]
 800d094:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800d098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d09c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d0b0:	e021      	b.n	800d0f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	ee07 3a90 	vmov	s15, r3
 800d0b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0bc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800d1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800d0c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0c4:	4b36      	ldr	r3, [pc, #216]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800d0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0cc:	ee07 3a90 	vmov	s15, r3
 800d0d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800d0dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d0f4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d0f6:	4b2a      	ldr	r3, [pc, #168]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800d0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0fa:	0a5b      	lsrs	r3, r3, #9
 800d0fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d100:	ee07 3a90 	vmov	s15, r3
 800d104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d108:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d10c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d110:	edd7 6a07 	vldr	s13, [r7, #28]
 800d114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d11c:	ee17 2a90 	vmov	r2, s15
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d124:	4b1e      	ldr	r3, [pc, #120]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800d126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d128:	0c1b      	lsrs	r3, r3, #16
 800d12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d12e:	ee07 3a90 	vmov	s15, r3
 800d132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d13a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d13e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d14a:	ee17 2a90 	vmov	r2, s15
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d152:	4b13      	ldr	r3, [pc, #76]	; (800d1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800d154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d156:	0e1b      	lsrs	r3, r3, #24
 800d158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d15c:	ee07 3a90 	vmov	s15, r3
 800d160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d164:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d168:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d16c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d178:	ee17 2a90 	vmov	r2, s15
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d180:	e008      	b.n	800d194 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2200      	movs	r2, #0
 800d192:	609a      	str	r2, [r3, #8]
}
 800d194:	bf00      	nop
 800d196:	3724      	adds	r7, #36	; 0x24
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr
 800d1a0:	58024400 	.word	0x58024400
 800d1a4:	03d09000 	.word	0x03d09000
 800d1a8:	46000000 	.word	0x46000000
 800d1ac:	4c742400 	.word	0x4c742400
 800d1b0:	4a742400 	.word	0x4a742400
 800d1b4:	4bbebc20 	.word	0x4bbebc20

0800d1b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b089      	sub	sp, #36	; 0x24
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d1c0:	4b9d      	ldr	r3, [pc, #628]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c4:	f003 0303 	and.w	r3, r3, #3
 800d1c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800d1ca:	4b9b      	ldr	r3, [pc, #620]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ce:	091b      	lsrs	r3, r3, #4
 800d1d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d1d6:	4b98      	ldr	r3, [pc, #608]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1da:	f003 0301 	and.w	r3, r3, #1
 800d1de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d1e0:	4b95      	ldr	r3, [pc, #596]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e4:	08db      	lsrs	r3, r3, #3
 800d1e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1ea:	693a      	ldr	r2, [r7, #16]
 800d1ec:	fb02 f303 	mul.w	r3, r2, r3
 800d1f0:	ee07 3a90 	vmov	s15, r3
 800d1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f000 810a 	beq.w	800d418 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	2b01      	cmp	r3, #1
 800d208:	d05a      	beq.n	800d2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d302      	bcc.n	800d214 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800d20e:	2b02      	cmp	r3, #2
 800d210:	d078      	beq.n	800d304 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800d212:	e099      	b.n	800d348 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d214:	4b88      	ldr	r3, [pc, #544]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 0320 	and.w	r3, r3, #32
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d02d      	beq.n	800d27c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d220:	4b85      	ldr	r3, [pc, #532]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	08db      	lsrs	r3, r3, #3
 800d226:	f003 0303 	and.w	r3, r3, #3
 800d22a:	4a84      	ldr	r2, [pc, #528]	; (800d43c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800d22c:	fa22 f303 	lsr.w	r3, r2, r3
 800d230:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	ee07 3a90 	vmov	s15, r3
 800d238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	ee07 3a90 	vmov	s15, r3
 800d242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d24a:	4b7b      	ldr	r3, [pc, #492]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d24e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d252:	ee07 3a90 	vmov	s15, r3
 800d256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d25a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d25e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d440 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800d262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d26a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d26e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d272:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d276:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d27a:	e087      	b.n	800d38c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	ee07 3a90 	vmov	s15, r3
 800d282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d286:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d444 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800d28a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d28e:	4b6a      	ldr	r3, [pc, #424]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d296:	ee07 3a90 	vmov	s15, r3
 800d29a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d29e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d440 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800d2a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d2be:	e065      	b.n	800d38c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	ee07 3a90 	vmov	s15, r3
 800d2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d448 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800d2ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2d2:	4b59      	ldr	r3, [pc, #356]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2da:	ee07 3a90 	vmov	s15, r3
 800d2de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d440 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800d2ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d302:	e043      	b.n	800d38c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	ee07 3a90 	vmov	s15, r3
 800d30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d30e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d44c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d316:	4b48      	ldr	r3, [pc, #288]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d31e:	ee07 3a90 	vmov	s15, r3
 800d322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d326:	ed97 6a03 	vldr	s12, [r7, #12]
 800d32a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d440 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800d32e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d342:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d346:	e021      	b.n	800d38c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	ee07 3a90 	vmov	s15, r3
 800d34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d352:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d448 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800d356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d35a:	4b37      	ldr	r3, [pc, #220]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d35e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d362:	ee07 3a90 	vmov	s15, r3
 800d366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d36a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d36e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d440 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800d372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d37a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d37e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d382:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d386:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d38a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800d38c:	4b2a      	ldr	r3, [pc, #168]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d390:	0a5b      	lsrs	r3, r3, #9
 800d392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d396:	ee07 3a90 	vmov	s15, r3
 800d39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d39e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3b2:	ee17 2a90 	vmov	r2, s15
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800d3ba:	4b1f      	ldr	r3, [pc, #124]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3be:	0c1b      	lsrs	r3, r3, #16
 800d3c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3c4:	ee07 3a90 	vmov	s15, r3
 800d3c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3e0:	ee17 2a90 	vmov	r2, s15
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800d3e8:	4b13      	ldr	r3, [pc, #76]	; (800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800d3ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ec:	0e1b      	lsrs	r3, r3, #24
 800d3ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3f2:	ee07 3a90 	vmov	s15, r3
 800d3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d402:	edd7 6a07 	vldr	s13, [r7, #28]
 800d406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d40a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d40e:	ee17 2a90 	vmov	r2, s15
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d416:	e008      	b.n	800d42a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2200      	movs	r2, #0
 800d41c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2200      	movs	r2, #0
 800d422:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	609a      	str	r2, [r3, #8]
}
 800d42a:	bf00      	nop
 800d42c:	3724      	adds	r7, #36	; 0x24
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	58024400 	.word	0x58024400
 800d43c:	03d09000 	.word	0x03d09000
 800d440:	46000000 	.word	0x46000000
 800d444:	4c742400 	.word	0x4c742400
 800d448:	4a742400 	.word	0x4a742400
 800d44c:	4bbebc20 	.word	0x4bbebc20

0800d450 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d45a:	2300      	movs	r3, #0
 800d45c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d45e:	4b53      	ldr	r3, [pc, #332]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d462:	f003 0303 	and.w	r3, r3, #3
 800d466:	2b03      	cmp	r3, #3
 800d468:	d101      	bne.n	800d46e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d46a:	2301      	movs	r3, #1
 800d46c:	e099      	b.n	800d5a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d46e:	4b4f      	ldr	r3, [pc, #316]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	4a4e      	ldr	r2, [pc, #312]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d474:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d47a:	f7f8 fa01 	bl	8005880 <HAL_GetTick>
 800d47e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d480:	e008      	b.n	800d494 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d482:	f7f8 f9fd 	bl	8005880 <HAL_GetTick>
 800d486:	4602      	mov	r2, r0
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	d901      	bls.n	800d494 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d490:	2303      	movs	r3, #3
 800d492:	e086      	b.n	800d5a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d494:	4b45      	ldr	r3, [pc, #276]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1f0      	bne.n	800d482 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d4a0:	4b42      	ldr	r3, [pc, #264]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	031b      	lsls	r3, r3, #12
 800d4ae:	493f      	ldr	r1, [pc, #252]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	628b      	str	r3, [r1, #40]	; 0x28
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	3b01      	subs	r3, #1
 800d4c4:	025b      	lsls	r3, r3, #9
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	431a      	orrs	r2, r3
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	041b      	lsls	r3, r3, #16
 800d4d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d4d6:	431a      	orrs	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	691b      	ldr	r3, [r3, #16]
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	061b      	lsls	r3, r3, #24
 800d4e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d4e4:	4931      	ldr	r1, [pc, #196]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d4ea:	4b30      	ldr	r3, [pc, #192]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	492d      	ldr	r1, [pc, #180]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d4fc:	4b2b      	ldr	r3, [pc, #172]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d500:	f023 0220 	bic.w	r2, r3, #32
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	699b      	ldr	r3, [r3, #24]
 800d508:	4928      	ldr	r1, [pc, #160]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d50a:	4313      	orrs	r3, r2
 800d50c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d50e:	4b27      	ldr	r3, [pc, #156]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d512:	4a26      	ldr	r2, [pc, #152]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d514:	f023 0310 	bic.w	r3, r3, #16
 800d518:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d51a:	4b24      	ldr	r3, [pc, #144]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d51c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d51e:	4b24      	ldr	r3, [pc, #144]	; (800d5b0 <RCCEx_PLL2_Config+0x160>)
 800d520:	4013      	ands	r3, r2
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	69d2      	ldr	r2, [r2, #28]
 800d526:	00d2      	lsls	r2, r2, #3
 800d528:	4920      	ldr	r1, [pc, #128]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d52a:	4313      	orrs	r3, r2
 800d52c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d52e:	4b1f      	ldr	r3, [pc, #124]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d532:	4a1e      	ldr	r2, [pc, #120]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d534:	f043 0310 	orr.w	r3, r3, #16
 800d538:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d106      	bne.n	800d54e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d540:	4b1a      	ldr	r3, [pc, #104]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d544:	4a19      	ldr	r2, [pc, #100]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d54a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d54c:	e00f      	b.n	800d56e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d106      	bne.n	800d562 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d554:	4b15      	ldr	r3, [pc, #84]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d558:	4a14      	ldr	r2, [pc, #80]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d55a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d55e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d560:	e005      	b.n	800d56e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d562:	4b12      	ldr	r3, [pc, #72]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d566:	4a11      	ldr	r2, [pc, #68]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d568:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d56c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d56e:	4b0f      	ldr	r3, [pc, #60]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a0e      	ldr	r2, [pc, #56]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d574:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d57a:	f7f8 f981 	bl	8005880 <HAL_GetTick>
 800d57e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d580:	e008      	b.n	800d594 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d582:	f7f8 f97d 	bl	8005880 <HAL_GetTick>
 800d586:	4602      	mov	r2, r0
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	1ad3      	subs	r3, r2, r3
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d901      	bls.n	800d594 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d590:	2303      	movs	r3, #3
 800d592:	e006      	b.n	800d5a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d594:	4b05      	ldr	r3, [pc, #20]	; (800d5ac <RCCEx_PLL2_Config+0x15c>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d0f0      	beq.n	800d582 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	58024400 	.word	0x58024400
 800d5b0:	ffff0007 	.word	0xffff0007

0800d5b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d5c2:	4b53      	ldr	r3, [pc, #332]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c6:	f003 0303 	and.w	r3, r3, #3
 800d5ca:	2b03      	cmp	r3, #3
 800d5cc:	d101      	bne.n	800d5d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e099      	b.n	800d706 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d5d2:	4b4f      	ldr	r3, [pc, #316]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a4e      	ldr	r2, [pc, #312]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d5d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d5dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5de:	f7f8 f94f 	bl	8005880 <HAL_GetTick>
 800d5e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d5e4:	e008      	b.n	800d5f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d5e6:	f7f8 f94b 	bl	8005880 <HAL_GetTick>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	2b02      	cmp	r3, #2
 800d5f2:	d901      	bls.n	800d5f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	e086      	b.n	800d706 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d5f8:	4b45      	ldr	r3, [pc, #276]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1f0      	bne.n	800d5e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d604:	4b42      	ldr	r3, [pc, #264]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d608:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	051b      	lsls	r3, r3, #20
 800d612:	493f      	ldr	r1, [pc, #252]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d614:	4313      	orrs	r3, r2
 800d616:	628b      	str	r3, [r1, #40]	; 0x28
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	3b01      	subs	r3, #1
 800d61e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	689b      	ldr	r3, [r3, #8]
 800d626:	3b01      	subs	r3, #1
 800d628:	025b      	lsls	r3, r3, #9
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	431a      	orrs	r2, r3
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	3b01      	subs	r3, #1
 800d634:	041b      	lsls	r3, r3, #16
 800d636:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d63a:	431a      	orrs	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	691b      	ldr	r3, [r3, #16]
 800d640:	3b01      	subs	r3, #1
 800d642:	061b      	lsls	r3, r3, #24
 800d644:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d648:	4931      	ldr	r1, [pc, #196]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d64a:	4313      	orrs	r3, r2
 800d64c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d64e:	4b30      	ldr	r3, [pc, #192]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d652:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	695b      	ldr	r3, [r3, #20]
 800d65a:	492d      	ldr	r1, [pc, #180]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d65c:	4313      	orrs	r3, r2
 800d65e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d660:	4b2b      	ldr	r3, [pc, #172]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d664:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	699b      	ldr	r3, [r3, #24]
 800d66c:	4928      	ldr	r1, [pc, #160]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d66e:	4313      	orrs	r3, r2
 800d670:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d672:	4b27      	ldr	r3, [pc, #156]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d676:	4a26      	ldr	r2, [pc, #152]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d67c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d67e:	4b24      	ldr	r3, [pc, #144]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d682:	4b24      	ldr	r3, [pc, #144]	; (800d714 <RCCEx_PLL3_Config+0x160>)
 800d684:	4013      	ands	r3, r2
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	69d2      	ldr	r2, [r2, #28]
 800d68a:	00d2      	lsls	r2, r2, #3
 800d68c:	4920      	ldr	r1, [pc, #128]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d68e:	4313      	orrs	r3, r2
 800d690:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d692:	4b1f      	ldr	r3, [pc, #124]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d696:	4a1e      	ldr	r2, [pc, #120]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d69c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d106      	bne.n	800d6b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d6a4:	4b1a      	ldr	r3, [pc, #104]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a8:	4a19      	ldr	r2, [pc, #100]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d6aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d6ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6b0:	e00f      	b.n	800d6d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d106      	bne.n	800d6c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d6b8:	4b15      	ldr	r3, [pc, #84]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6bc:	4a14      	ldr	r2, [pc, #80]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d6be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d6c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6c4:	e005      	b.n	800d6d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d6c6:	4b12      	ldr	r3, [pc, #72]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ca:	4a11      	ldr	r2, [pc, #68]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d6cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d6d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d6d2:	4b0f      	ldr	r3, [pc, #60]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a0e      	ldr	r2, [pc, #56]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d6d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6de:	f7f8 f8cf 	bl	8005880 <HAL_GetTick>
 800d6e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d6e4:	e008      	b.n	800d6f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d6e6:	f7f8 f8cb 	bl	8005880 <HAL_GetTick>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	1ad3      	subs	r3, r2, r3
 800d6f0:	2b02      	cmp	r3, #2
 800d6f2:	d901      	bls.n	800d6f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	e006      	b.n	800d706 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d6f8:	4b05      	ldr	r3, [pc, #20]	; (800d710 <RCCEx_PLL3_Config+0x15c>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d700:	2b00      	cmp	r3, #0
 800d702:	d0f0      	beq.n	800d6e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d704:	7bfb      	ldrb	r3, [r7, #15]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	58024400 	.word	0x58024400
 800d714:	ffff0007 	.word	0xffff0007

0800d718 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d720:	2301      	movs	r3, #1
 800d722:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d067      	beq.n	800d7fa <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d730:	b2db      	uxtb	r3, r3
 800d732:	2b00      	cmp	r3, #0
 800d734:	d106      	bne.n	800d744 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7f7 fce2 	bl	8005108 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2202      	movs	r2, #2
 800d748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	22ca      	movs	r2, #202	; 0xca
 800d752:	625a      	str	r2, [r3, #36]	; 0x24
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2253      	movs	r2, #83	; 0x53
 800d75a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 fa49 	bl	800dbf4 <RTC_EnterInitMode>
 800d762:	4603      	mov	r3, r0
 800d764:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800d766:	7bfb      	ldrb	r3, [r7, #15]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d13b      	bne.n	800d7e4 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	6899      	ldr	r1, [r3, #8]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	4b23      	ldr	r3, [pc, #140]	; (800d804 <HAL_RTC_Init+0xec>)
 800d778:	400b      	ands	r3, r1
 800d77a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	6899      	ldr	r1, [r3, #8]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	685a      	ldr	r2, [r3, #4]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	691b      	ldr	r3, [r3, #16]
 800d78a:	431a      	orrs	r2, r3
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	699b      	ldr	r3, [r3, #24]
 800d790:	431a      	orrs	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	430a      	orrs	r2, r1
 800d798:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	0419      	lsls	r1, r3, #16
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	68da      	ldr	r2, [r3, #12]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	430a      	orrs	r2, r1
 800d7aa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fa51 	bl	800dc54 <RTC_ExitInitMode>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800d7b6:	7bfb      	ldrb	r3, [r7, #15]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d113      	bne.n	800d7e4 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f022 0203 	bic.w	r2, r2, #3
 800d7ca:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	69da      	ldr	r2, [r3, #28]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	695b      	ldr	r3, [r3, #20]
 800d7da:	431a      	orrs	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	430a      	orrs	r2, r1
 800d7e2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	22ff      	movs	r2, #255	; 0xff
 800d7ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800d7ec:	7bfb      	ldrb	r3, [r7, #15]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d103      	bne.n	800d7fa <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d7fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3710      	adds	r7, #16
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	ff8fffbf 	.word	0xff8fffbf

0800d808 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d808:	b590      	push	{r4, r7, lr}
 800d80a:	b087      	sub	sp, #28
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d101      	bne.n	800d822 <HAL_RTC_SetTime+0x1a>
 800d81e:	2302      	movs	r3, #2
 800d820:	e089      	b.n	800d936 <HAL_RTC_SetTime+0x12e>
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2201      	movs	r2, #1
 800d826:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2202      	movs	r2, #2
 800d82e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	22ca      	movs	r2, #202	; 0xca
 800d838:	625a      	str	r2, [r3, #36]	; 0x24
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2253      	movs	r2, #83	; 0x53
 800d840:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f000 f9d6 	bl	800dbf4 <RTC_EnterInitMode>
 800d848:	4603      	mov	r3, r0
 800d84a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d84c:	7cfb      	ldrb	r3, [r7, #19]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d161      	bne.n	800d916 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d126      	bne.n	800d8a6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d862:	2b00      	cmp	r3, #0
 800d864:	d102      	bne.n	800d86c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	2200      	movs	r2, #0
 800d86a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	4618      	mov	r0, r3
 800d872:	f000 fa2d 	bl	800dcd0 <RTC_ByteToBcd2>
 800d876:	4603      	mov	r3, r0
 800d878:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	785b      	ldrb	r3, [r3, #1]
 800d87e:	4618      	mov	r0, r3
 800d880:	f000 fa26 	bl	800dcd0 <RTC_ByteToBcd2>
 800d884:	4603      	mov	r3, r0
 800d886:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d888:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	789b      	ldrb	r3, [r3, #2]
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 fa1e 	bl	800dcd0 <RTC_ByteToBcd2>
 800d894:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d896:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	78db      	ldrb	r3, [r3, #3]
 800d89e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	617b      	str	r3, [r7, #20]
 800d8a4:	e018      	b.n	800d8d8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	689b      	ldr	r3, [r3, #8]
 800d8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d102      	bne.n	800d8ba <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	785b      	ldrb	r3, [r3, #1]
 800d8c4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d8c6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d8cc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	78db      	ldrb	r3, [r3, #3]
 800d8d2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	6979      	ldr	r1, [r7, #20]
 800d8de:	4b18      	ldr	r3, [pc, #96]	; (800d940 <HAL_RTC_SetTime+0x138>)
 800d8e0:	400b      	ands	r3, r1
 800d8e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	689a      	ldr	r2, [r3, #8]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d8f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	6899      	ldr	r1, [r3, #8]
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	68da      	ldr	r2, [r3, #12]
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	691b      	ldr	r3, [r3, #16]
 800d902:	431a      	orrs	r2, r3
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	430a      	orrs	r2, r1
 800d90a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f000 f9a1 	bl	800dc54 <RTC_ExitInitMode>
 800d912:	4603      	mov	r3, r0
 800d914:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	22ff      	movs	r2, #255	; 0xff
 800d91c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d91e:	7cfb      	ldrb	r3, [r7, #19]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d103      	bne.n	800d92c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2201      	movs	r2, #1
 800d928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d934:	7cfb      	ldrb	r3, [r7, #19]
}
 800d936:	4618      	mov	r0, r3
 800d938:	371c      	adds	r7, #28
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd90      	pop	{r4, r7, pc}
 800d93e:	bf00      	nop
 800d940:	007f7f7f 	.word	0x007f7f7f

0800d944 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	691b      	ldr	r3, [r3, #16]
 800d960:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	4b22      	ldr	r3, [pc, #136]	; (800d9f8 <HAL_RTC_GetTime+0xb4>)
 800d970:	4013      	ands	r3, r2
 800d972:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	0c1b      	lsrs	r3, r3, #16
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	0a1b      	lsrs	r3, r3, #8
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d98e:	b2da      	uxtb	r2, r3
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	b2db      	uxtb	r3, r3
 800d998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d99c:	b2da      	uxtb	r2, r3
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	0d9b      	lsrs	r3, r3, #22
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	f003 0301 	and.w	r3, r3, #1
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d11a      	bne.n	800d9ee <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f000 f9a7 	bl	800dd10 <RTC_Bcd2ToByte>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	785b      	ldrb	r3, [r3, #1]
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f000 f99e 	bl	800dd10 <RTC_Bcd2ToByte>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	789b      	ldrb	r3, [r3, #2]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f000 f995 	bl	800dd10 <RTC_Bcd2ToByte>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3718      	adds	r7, #24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	007f7f7f 	.word	0x007f7f7f

0800d9fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d9fc:	b590      	push	{r4, r7, lr}
 800d9fe:	b087      	sub	sp, #28
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d101      	bne.n	800da16 <HAL_RTC_SetDate+0x1a>
 800da12:	2302      	movs	r3, #2
 800da14:	e073      	b.n	800dafe <HAL_RTC_SetDate+0x102>
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2201      	movs	r2, #1
 800da1a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2202      	movs	r2, #2
 800da22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10e      	bne.n	800da4a <HAL_RTC_SetDate+0x4e>
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	785b      	ldrb	r3, [r3, #1]
 800da30:	f003 0310 	and.w	r3, r3, #16
 800da34:	2b00      	cmp	r3, #0
 800da36:	d008      	beq.n	800da4a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	785b      	ldrb	r3, [r3, #1]
 800da3c:	f023 0310 	bic.w	r3, r3, #16
 800da40:	b2db      	uxtb	r3, r3
 800da42:	330a      	adds	r3, #10
 800da44:	b2da      	uxtb	r2, r3
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d11c      	bne.n	800da8a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	78db      	ldrb	r3, [r3, #3]
 800da54:	4618      	mov	r0, r3
 800da56:	f000 f93b 	bl	800dcd0 <RTC_ByteToBcd2>
 800da5a:	4603      	mov	r3, r0
 800da5c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	785b      	ldrb	r3, [r3, #1]
 800da62:	4618      	mov	r0, r3
 800da64:	f000 f934 	bl	800dcd0 <RTC_ByteToBcd2>
 800da68:	4603      	mov	r3, r0
 800da6a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800da6c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	789b      	ldrb	r3, [r3, #2]
 800da72:	4618      	mov	r0, r3
 800da74:	f000 f92c 	bl	800dcd0 <RTC_ByteToBcd2>
 800da78:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800da7a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800da84:	4313      	orrs	r3, r2
 800da86:	617b      	str	r3, [r7, #20]
 800da88:	e00e      	b.n	800daa8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	78db      	ldrb	r3, [r3, #3]
 800da8e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	785b      	ldrb	r3, [r3, #1]
 800da94:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800da96:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800da98:	68ba      	ldr	r2, [r7, #8]
 800da9a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800da9c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800daa4:	4313      	orrs	r3, r2
 800daa6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	22ca      	movs	r2, #202	; 0xca
 800daae:	625a      	str	r2, [r3, #36]	; 0x24
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2253      	movs	r2, #83	; 0x53
 800dab6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f000 f89b 	bl	800dbf4 <RTC_EnterInitMode>
 800dabe:	4603      	mov	r3, r0
 800dac0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dac2:	7cfb      	ldrb	r3, [r7, #19]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10a      	bne.n	800dade <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	6979      	ldr	r1, [r7, #20]
 800dace:	4b0e      	ldr	r3, [pc, #56]	; (800db08 <HAL_RTC_SetDate+0x10c>)
 800dad0:	400b      	ands	r3, r1
 800dad2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f000 f8bd 	bl	800dc54 <RTC_ExitInitMode>
 800dada:	4603      	mov	r3, r0
 800dadc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	22ff      	movs	r2, #255	; 0xff
 800dae4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dae6:	7cfb      	ldrb	r3, [r7, #19]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d103      	bne.n	800daf4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dafc:	7cfb      	ldrb	r3, [r7, #19]


}
 800dafe:	4618      	mov	r0, r3
 800db00:	371c      	adds	r7, #28
 800db02:	46bd      	mov	sp, r7
 800db04:	bd90      	pop	{r4, r7, pc}
 800db06:	bf00      	nop
 800db08:	00ffff3f 	.word	0x00ffff3f

0800db0c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b086      	sub	sp, #24
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	685a      	ldr	r2, [r3, #4]
 800db1e:	4b21      	ldr	r3, [pc, #132]	; (800dba4 <HAL_RTC_GetDate+0x98>)
 800db20:	4013      	ands	r3, r2
 800db22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	0c1b      	lsrs	r3, r3, #16
 800db28:	b2da      	uxtb	r2, r3
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	0a1b      	lsrs	r3, r3, #8
 800db32:	b2db      	uxtb	r3, r3
 800db34:	f003 031f 	and.w	r3, r3, #31
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	b2db      	uxtb	r3, r3
 800db42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db46:	b2da      	uxtb	r2, r3
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	0b5b      	lsrs	r3, r3, #13
 800db50:	b2db      	uxtb	r3, r3
 800db52:	f003 0307 	and.w	r3, r3, #7
 800db56:	b2da      	uxtb	r2, r3
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d11a      	bne.n	800db98 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	78db      	ldrb	r3, [r3, #3]
 800db66:	4618      	mov	r0, r3
 800db68:	f000 f8d2 	bl	800dd10 <RTC_Bcd2ToByte>
 800db6c:	4603      	mov	r3, r0
 800db6e:	461a      	mov	r2, r3
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	785b      	ldrb	r3, [r3, #1]
 800db78:	4618      	mov	r0, r3
 800db7a:	f000 f8c9 	bl	800dd10 <RTC_Bcd2ToByte>
 800db7e:	4603      	mov	r3, r0
 800db80:	461a      	mov	r2, r3
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	789b      	ldrb	r3, [r3, #2]
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 f8c0 	bl	800dd10 <RTC_Bcd2ToByte>
 800db90:	4603      	mov	r3, r0
 800db92:	461a      	mov	r2, r3
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3718      	adds	r7, #24
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	00ffff3f 	.word	0x00ffff3f

0800dba8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	68da      	ldr	r2, [r3, #12]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800dbbe:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800dbc0:	f7f7 fe5e 	bl	8005880 <HAL_GetTick>
 800dbc4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dbc6:	e009      	b.n	800dbdc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dbc8:	f7f7 fe5a 	bl	8005880 <HAL_GetTick>
 800dbcc:	4602      	mov	r2, r0
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	1ad3      	subs	r3, r2, r3
 800dbd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dbd6:	d901      	bls.n	800dbdc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800dbd8:	2303      	movs	r3, #3
 800dbda:	e007      	b.n	800dbec <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	f003 0320 	and.w	r3, r3, #32
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d0ee      	beq.n	800dbc8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	68db      	ldr	r3, [r3, #12]
 800dc06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d11d      	bne.n	800dc4a <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f04f 32ff 	mov.w	r2, #4294967295
 800dc16:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dc18:	f7f7 fe32 	bl	8005880 <HAL_GetTick>
 800dc1c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dc1e:	e00d      	b.n	800dc3c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dc20:	f7f7 fe2e 	bl	8005880 <HAL_GetTick>
 800dc24:	4602      	mov	r2, r0
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc2e:	d905      	bls.n	800dc3c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dc30:	2303      	movs	r3, #3
 800dc32:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2203      	movs	r2, #3
 800dc38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68db      	ldr	r3, [r3, #12]
 800dc42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d0ea      	beq.n	800dc20 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800dc4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800dc60:	4b1a      	ldr	r3, [pc, #104]	; (800dccc <RTC_ExitInitMode+0x78>)
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	4a19      	ldr	r2, [pc, #100]	; (800dccc <RTC_ExitInitMode+0x78>)
 800dc66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc6a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dc6c:	4b17      	ldr	r3, [pc, #92]	; (800dccc <RTC_ExitInitMode+0x78>)
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	f003 0320 	and.w	r3, r3, #32
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d10c      	bne.n	800dc92 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f7ff ff95 	bl	800dba8 <HAL_RTC_WaitForSynchro>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d01e      	beq.n	800dcc2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2203      	movs	r2, #3
 800dc88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dc8c:	2303      	movs	r3, #3
 800dc8e:	73fb      	strb	r3, [r7, #15]
 800dc90:	e017      	b.n	800dcc2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dc92:	4b0e      	ldr	r3, [pc, #56]	; (800dccc <RTC_ExitInitMode+0x78>)
 800dc94:	689b      	ldr	r3, [r3, #8]
 800dc96:	4a0d      	ldr	r2, [pc, #52]	; (800dccc <RTC_ExitInitMode+0x78>)
 800dc98:	f023 0320 	bic.w	r3, r3, #32
 800dc9c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f7ff ff82 	bl	800dba8 <HAL_RTC_WaitForSynchro>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d005      	beq.n	800dcb6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2203      	movs	r2, #3
 800dcae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dcb2:	2303      	movs	r3, #3
 800dcb4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dcb6:	4b05      	ldr	r3, [pc, #20]	; (800dccc <RTC_ExitInitMode+0x78>)
 800dcb8:	689b      	ldr	r3, [r3, #8]
 800dcba:	4a04      	ldr	r2, [pc, #16]	; (800dccc <RTC_ExitInitMode+0x78>)
 800dcbc:	f043 0320 	orr.w	r3, r3, #32
 800dcc0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dcc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	58004000 	.word	0x58004000

0800dcd0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b085      	sub	sp, #20
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800dcde:	79fb      	ldrb	r3, [r7, #7]
 800dce0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800dce2:	e005      	b.n	800dcf0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	3301      	adds	r3, #1
 800dce8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800dcea:	7afb      	ldrb	r3, [r7, #11]
 800dcec:	3b0a      	subs	r3, #10
 800dcee:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800dcf0:	7afb      	ldrb	r3, [r7, #11]
 800dcf2:	2b09      	cmp	r3, #9
 800dcf4:	d8f6      	bhi.n	800dce4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	011b      	lsls	r3, r3, #4
 800dcfc:	b2da      	uxtb	r2, r3
 800dcfe:	7afb      	ldrb	r3, [r7, #11]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	b2db      	uxtb	r3, r3
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr

0800dd10 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b085      	sub	sp, #20
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	4603      	mov	r3, r0
 800dd18:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dd1a:	79fb      	ldrb	r3, [r7, #7]
 800dd1c:	091b      	lsrs	r3, r3, #4
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	461a      	mov	r2, r3
 800dd22:	0092      	lsls	r2, r2, #2
 800dd24:	4413      	add	r3, r2
 800dd26:	005b      	lsls	r3, r3, #1
 800dd28:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800dd2a:	79fb      	ldrb	r3, [r7, #7]
 800dd2c:	f003 030f 	and.w	r3, r3, #15
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	7bfb      	ldrb	r3, [r7, #15]
 800dd34:	4413      	add	r3, r2
 800dd36:	b2db      	uxtb	r3, r3
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3714      	adds	r7, #20
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b08a      	sub	sp, #40	; 0x28
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d101      	bne.n	800dd56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800dd52:	2301      	movs	r3, #1
 800dd54:	e07c      	b.n	800de50 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d10c      	bne.n	800dd7c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2200      	movs	r2, #0
 800dd66:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	699b      	ldr	r3, [r3, #24]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d102      	bne.n	800dd76 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2202      	movs	r2, #2
 800dd74:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7f7 f9e0 	bl	800513c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2203      	movs	r2, #3
 800dd80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 f867 	bl	800de58 <HAL_SD_InitCard>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d001      	beq.n	800dd94 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800dd90:	2301      	movs	r3, #1
 800dd92:	e05d      	b.n	800de50 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800dd94:	f107 0308 	add.w	r3, r7, #8
 800dd98:	4619      	mov	r1, r3
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f001 f8ce 	bl	800ef3c <HAL_SD_GetCardStatus>
 800dda0:	4603      	mov	r3, r0
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d001      	beq.n	800ddaa <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800dda6:	2301      	movs	r3, #1
 800dda8:	e052      	b.n	800de50 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ddaa:	7e3b      	ldrb	r3, [r7, #24]
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ddb0:	7e7b      	ldrb	r3, [r7, #25]
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d10a      	bne.n	800ddd4 <HAL_SD_Init+0x90>
 800ddbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d102      	bne.n	800ddca <HAL_SD_Init+0x86>
 800ddc4:	6a3b      	ldr	r3, [r7, #32]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d004      	beq.n	800ddd4 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ddd0:	65da      	str	r2, [r3, #92]	; 0x5c
 800ddd2:	e00b      	b.n	800ddec <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d104      	bne.n	800dde6 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dde2:	65da      	str	r2, [r3, #92]	; 0x5c
 800dde4:	e002      	b.n	800ddec <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f001 f984 	bl	800f100 <HAL_SD_ConfigWideBusOperation>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d001      	beq.n	800de02 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800ddfe:	2301      	movs	r3, #1
 800de00:	e026      	b.n	800de50 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800de02:	f7f7 fd3d 	bl	8005880 <HAL_GetTick>
 800de06:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800de08:	e011      	b.n	800de2e <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800de0a:	f7f7 fd39 	bl	8005880 <HAL_GetTick>
 800de0e:	4602      	mov	r2, r0
 800de10:	69fb      	ldr	r3, [r7, #28]
 800de12:	1ad3      	subs	r3, r2, r3
 800de14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de18:	d109      	bne.n	800de2e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800de20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2201      	movs	r2, #1
 800de26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800de2a:	2303      	movs	r3, #3
 800de2c:	e010      	b.n	800de50 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f001 fa10 	bl	800f254 <HAL_SD_GetCardState>
 800de34:	4603      	mov	r3, r0
 800de36:	2b04      	cmp	r3, #4
 800de38:	d1e7      	bne.n	800de0a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2201      	movs	r2, #1
 800de4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800de4e:	2300      	movs	r3, #0
}
 800de50:	4618      	mov	r0, r3
 800de52:	3728      	adds	r7, #40	; 0x28
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800de58:	b5b0      	push	{r4, r5, r7, lr}
 800de5a:	b08e      	sub	sp, #56	; 0x38
 800de5c:	af04      	add	r7, sp, #16
 800de5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800de60:	2300      	movs	r3, #0
 800de62:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800de64:	2300      	movs	r3, #0
 800de66:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800de68:	2300      	movs	r3, #0
 800de6a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800de6c:	2300      	movs	r3, #0
 800de6e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800de70:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800de74:	f7fe fc7a 	bl	800c76c <HAL_RCCEx_GetPeriphCLKFreq>
 800de78:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7c:	0a1b      	lsrs	r3, r3, #8
 800de7e:	4a40      	ldr	r2, [pc, #256]	; (800df80 <HAL_SD_InitCard+0x128>)
 800de80:	fba2 2303 	umull	r2, r3, r2, r3
 800de84:	091b      	lsrs	r3, r3, #4
 800de86:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	699b      	ldr	r3, [r3, #24]
 800de8c:	2b02      	cmp	r3, #2
 800de8e:	d107      	bne.n	800dea0 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f042 0210 	orr.w	r2, r2, #16
 800de9e:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681d      	ldr	r5, [r3, #0]
 800dea4:	466c      	mov	r4, sp
 800dea6:	f107 0314 	add.w	r3, r7, #20
 800deaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800deae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800deb2:	f107 0308 	add.w	r3, r7, #8
 800deb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800deb8:	4628      	mov	r0, r5
 800deba:	f004 f9eb 	bl	8012294 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f004 fa2e 	bl	8012324 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	005b      	lsls	r3, r3, #1
 800decc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dece:	fbb2 f3f3 	udiv	r3, r2, r3
 800ded2:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800ded4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d008      	beq.n	800deec <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800deda:	4a2a      	ldr	r2, [pc, #168]	; (800df84 <HAL_SD_InitCard+0x12c>)
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	fbb2 f3f3 	udiv	r3, r2, r3
 800dee2:	3301      	adds	r3, #1
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7f7 fcd7 	bl	8005898 <HAL_Delay>
 800deea:	e002      	b.n	800def2 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800deec:	2002      	movs	r0, #2
 800deee:	f7f7 fcd3 	bl	8005898 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f001 fa8c 	bl	800f410 <SD_PowerON>
 800def8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800defa:	6a3b      	ldr	r3, [r7, #32]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d00b      	beq.n	800df18 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2201      	movs	r2, #1
 800df04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df0c:	6a3b      	ldr	r3, [r7, #32]
 800df0e:	431a      	orrs	r2, r3
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800df14:	2301      	movs	r3, #1
 800df16:	e02e      	b.n	800df76 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f001 f9bb 	bl	800f294 <SD_InitCard>
 800df1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df20:	6a3b      	ldr	r3, [r7, #32]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d00b      	beq.n	800df3e <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2201      	movs	r2, #1
 800df2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df32:	6a3b      	ldr	r3, [r7, #32]
 800df34:	431a      	orrs	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800df3a:	2301      	movs	r3, #1
 800df3c:	e01b      	b.n	800df76 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df46:	4618      	mov	r0, r3
 800df48:	f004 fa82 	bl	8012450 <SDMMC_CmdBlockLength>
 800df4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df4e:	6a3b      	ldr	r3, [r7, #32]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d00f      	beq.n	800df74 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a0b      	ldr	r2, [pc, #44]	; (800df88 <HAL_SD_InitCard+0x130>)
 800df5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df60:	6a3b      	ldr	r3, [r7, #32]
 800df62:	431a      	orrs	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2201      	movs	r2, #1
 800df6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800df70:	2301      	movs	r3, #1
 800df72:	e000      	b.n	800df76 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800df74:	2300      	movs	r3, #0
}
 800df76:	4618      	mov	r0, r3
 800df78:	3728      	adds	r7, #40	; 0x28
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bdb0      	pop	{r4, r5, r7, pc}
 800df7e:	bf00      	nop
 800df80:	014f8b59 	.word	0x014f8b59
 800df84:	00012110 	.word	0x00012110
 800df88:	1fe00fff 	.word	0x1fe00fff

0800df8c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b092      	sub	sp, #72	; 0x48
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	607a      	str	r2, [r7, #4]
 800df98:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800df9a:	f7f7 fc71 	bl	8005880 <HAL_GetTick>
 800df9e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d107      	bne.n	800dfbe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	e167      	b.n	800e28e <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	f040 815a 	bne.w	800e280 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dfd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	441a      	add	r2, r3
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d907      	bls.n	800dff0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800dfec:	2301      	movs	r3, #1
 800dfee:	e14e      	b.n	800e28e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2203      	movs	r2, #3
 800dff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2200      	movs	r2, #0
 800dffe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e004:	2b01      	cmp	r3, #1
 800e006:	d002      	beq.n	800e00e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800e008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00a:	025b      	lsls	r3, r3, #9
 800e00c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e00e:	f04f 33ff 	mov.w	r3, #4294967295
 800e012:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	025b      	lsls	r3, r3, #9
 800e018:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e01a:	2390      	movs	r3, #144	; 0x90
 800e01c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e01e:	2302      	movs	r3, #2
 800e020:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e022:	2300      	movs	r3, #0
 800e024:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e026:	2300      	movs	r3, #0
 800e028:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f107 0214 	add.w	r2, r7, #20
 800e032:	4611      	mov	r1, r2
 800e034:	4618      	mov	r0, r3
 800e036:	f004 f9df 	bl	80123f8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	68da      	ldr	r2, [r3, #12]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e048:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d90a      	bls.n	800e066 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2202      	movs	r2, #2
 800e054:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e05c:	4618      	mov	r0, r3
 800e05e:	f004 fa3d 	bl	80124dc <SDMMC_CmdReadMultiBlock>
 800e062:	6478      	str	r0, [r7, #68]	; 0x44
 800e064:	e009      	b.n	800e07a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2201      	movs	r2, #1
 800e06a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e072:	4618      	mov	r0, r3
 800e074:	f004 fa0f 	bl	8012496 <SDMMC_CmdReadSingleBlock>
 800e078:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e07a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d012      	beq.n	800e0a6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4a84      	ldr	r2, [pc, #528]	; (800e298 <HAL_SD_ReadBlocks+0x30c>)
 800e086:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e08c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e08e:	431a      	orrs	r2, r3
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2201      	movs	r2, #1
 800e098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	e0f3      	b.n	800e28e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800e0a6:	69bb      	ldr	r3, [r7, #24]
 800e0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e0aa:	e058      	b.n	800e15e <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d033      	beq.n	800e122 <HAL_SD_ReadBlocks+0x196>
 800e0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0bc:	2b1f      	cmp	r3, #31
 800e0be:	d930      	bls.n	800e122 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	643b      	str	r3, [r7, #64]	; 0x40
 800e0c4:	e027      	b.n	800e116 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f004 f90c 	bl	80122e8 <SDMMC_ReadFIFO>
 800e0d0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800e0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d4:	b2da      	uxtb	r2, r3
 800e0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0d8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0dc:	3301      	adds	r3, #1
 800e0de:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800e0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e2:	0a1b      	lsrs	r3, r3, #8
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800e0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f2:	0c1b      	lsrs	r3, r3, #16
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800e100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e102:	0e1b      	lsrs	r3, r3, #24
 800e104:	b2da      	uxtb	r2, r3
 800e106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e108:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e10c:	3301      	adds	r3, #1
 800e10e:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800e110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e112:	3301      	adds	r3, #1
 800e114:	643b      	str	r3, [r7, #64]	; 0x40
 800e116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e118:	2b07      	cmp	r3, #7
 800e11a:	d9d4      	bls.n	800e0c6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800e11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e11e:	3b20      	subs	r3, #32
 800e120:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800e122:	f7f7 fbad 	bl	8005880 <HAL_GetTick>
 800e126:	4602      	mov	r2, r0
 800e128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12a:	1ad3      	subs	r3, r2, r3
 800e12c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e12e:	429a      	cmp	r2, r3
 800e130:	d902      	bls.n	800e138 <HAL_SD_ReadBlocks+0x1ac>
 800e132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e134:	2b00      	cmp	r3, #0
 800e136:	d112      	bne.n	800e15e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a56      	ldr	r2, [pc, #344]	; (800e298 <HAL_SD_ReadBlocks+0x30c>)
 800e13e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e144:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800e15a:	2303      	movs	r3, #3
 800e15c:	e097      	b.n	800e28e <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e164:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d09f      	beq.n	800e0ac <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	68da      	ldr	r2, [r3, #12]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e17a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e186:	2b00      	cmp	r3, #0
 800e188:	d022      	beq.n	800e1d0 <HAL_SD_ReadBlocks+0x244>
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d91f      	bls.n	800e1d0 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e194:	2b03      	cmp	r3, #3
 800e196:	d01b      	beq.n	800e1d0 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4618      	mov	r0, r3
 800e19e:	f004 fa07 	bl	80125b0 <SDMMC_CmdStopTransfer>
 800e1a2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800e1a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d012      	beq.n	800e1d0 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a3a      	ldr	r2, [pc, #232]	; (800e298 <HAL_SD_ReadBlocks+0x30c>)
 800e1b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1b8:	431a      	orrs	r2, r3
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e05e      	b.n	800e28e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d6:	f003 0308 	and.w	r3, r3, #8
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d012      	beq.n	800e204 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a2d      	ldr	r2, [pc, #180]	; (800e298 <HAL_SD_ReadBlocks+0x30c>)
 800e1e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ea:	f043 0208 	orr.w	r2, r3, #8
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e200:	2301      	movs	r3, #1
 800e202:	e044      	b.n	800e28e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e20a:	f003 0302 	and.w	r3, r3, #2
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d012      	beq.n	800e238 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4a20      	ldr	r2, [pc, #128]	; (800e298 <HAL_SD_ReadBlocks+0x30c>)
 800e218:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e21e:	f043 0202 	orr.w	r2, r3, #2
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2201      	movs	r2, #1
 800e22a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2200      	movs	r2, #0
 800e232:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e234:	2301      	movs	r3, #1
 800e236:	e02a      	b.n	800e28e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e23e:	f003 0320 	and.w	r3, r3, #32
 800e242:	2b00      	cmp	r3, #0
 800e244:	d012      	beq.n	800e26c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a13      	ldr	r2, [pc, #76]	; (800e298 <HAL_SD_ReadBlocks+0x30c>)
 800e24c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e252:	f043 0220 	orr.w	r2, r3, #32
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2201      	movs	r2, #1
 800e25e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2200      	movs	r2, #0
 800e266:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	e010      	b.n	800e28e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a0a      	ldr	r2, [pc, #40]	; (800e29c <HAL_SD_ReadBlocks+0x310>)
 800e272:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	e006      	b.n	800e28e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e284:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e28c:	2301      	movs	r3, #1
  }
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3748      	adds	r7, #72	; 0x48
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	1fe00fff 	.word	0x1fe00fff
 800e29c:	18000f3a 	.word	0x18000f3a

0800e2a0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b092      	sub	sp, #72	; 0x48
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	607a      	str	r2, [r7, #4]
 800e2ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e2ae:	f7f7 fae7 	bl	8005880 <HAL_GetTick>
 800e2b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d107      	bne.n	800e2d2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	e16b      	b.n	800e5aa <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	f040 815e 	bne.w	800e59c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e2e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	441a      	add	r2, r3
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d907      	bls.n	800e304 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e300:	2301      	movs	r3, #1
 800e302:	e152      	b.n	800e5aa <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2203      	movs	r2, #3
 800e308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2200      	movs	r2, #0
 800e312:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d002      	beq.n	800e322 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800e31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31e:	025b      	lsls	r3, r3, #9
 800e320:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e322:	f04f 33ff 	mov.w	r3, #4294967295
 800e326:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	025b      	lsls	r3, r3, #9
 800e32c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e32e:	2390      	movs	r3, #144	; 0x90
 800e330:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e332:	2300      	movs	r3, #0
 800e334:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e336:	2300      	movs	r3, #0
 800e338:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e33a:	2300      	movs	r3, #0
 800e33c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f107 0218 	add.w	r2, r7, #24
 800e346:	4611      	mov	r1, r2
 800e348:	4618      	mov	r0, r3
 800e34a:	f004 f855 	bl	80123f8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	68da      	ldr	r2, [r3, #12]
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e35c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d90a      	bls.n	800e37a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2220      	movs	r2, #32
 800e368:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e370:	4618      	mov	r0, r3
 800e372:	f004 f8f9 	bl	8012568 <SDMMC_CmdWriteMultiBlock>
 800e376:	6478      	str	r0, [r7, #68]	; 0x44
 800e378:	e009      	b.n	800e38e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2210      	movs	r2, #16
 800e37e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e386:	4618      	mov	r0, r3
 800e388:	f004 f8cb 	bl	8012522 <SDMMC_CmdWriteSingleBlock>
 800e38c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e38e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e390:	2b00      	cmp	r3, #0
 800e392:	d012      	beq.n	800e3ba <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4a86      	ldr	r2, [pc, #536]	; (800e5b4 <HAL_SD_WriteBlocks+0x314>)
 800e39a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3a2:	431a      	orrs	r2, r3
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e0f7      	b.n	800e5aa <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800e3ba:	69fb      	ldr	r3, [r7, #28]
 800e3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e3be:	e05c      	b.n	800e47a <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d037      	beq.n	800e43e <HAL_SD_WriteBlocks+0x19e>
 800e3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3d0:	2b1f      	cmp	r3, #31
 800e3d2:	d934      	bls.n	800e43e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	643b      	str	r3, [r7, #64]	; 0x40
 800e3d8:	e02b      	b.n	800e432 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800e3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800e3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	021a      	lsls	r2, r3, #8
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800e3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	041a      	lsls	r2, r3, #16
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	4313      	orrs	r3, r2
 800e402:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e406:	3301      	adds	r3, #1
 800e408:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800e40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	061a      	lsls	r2, r3, #24
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	4313      	orrs	r3, r2
 800e414:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e418:	3301      	adds	r3, #1
 800e41a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f107 0214 	add.w	r2, r7, #20
 800e424:	4611      	mov	r1, r2
 800e426:	4618      	mov	r0, r3
 800e428:	f003 ff6b 	bl	8012302 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800e42c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e42e:	3301      	adds	r3, #1
 800e430:	643b      	str	r3, [r7, #64]	; 0x40
 800e432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e434:	2b07      	cmp	r3, #7
 800e436:	d9d0      	bls.n	800e3da <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800e438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e43a:	3b20      	subs	r3, #32
 800e43c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800e43e:	f7f7 fa1f 	bl	8005880 <HAL_GetTick>
 800e442:	4602      	mov	r2, r0
 800e444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e446:	1ad3      	subs	r3, r2, r3
 800e448:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d902      	bls.n	800e454 <HAL_SD_WriteBlocks+0x1b4>
 800e44e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e450:	2b00      	cmp	r3, #0
 800e452:	d112      	bne.n	800e47a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a56      	ldr	r2, [pc, #344]	; (800e5b4 <HAL_SD_WriteBlocks+0x314>)
 800e45a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e462:	431a      	orrs	r2, r3
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2201      	movs	r2, #1
 800e46c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2200      	movs	r2, #0
 800e474:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800e476:	2303      	movs	r3, #3
 800e478:	e097      	b.n	800e5aa <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e480:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800e484:	2b00      	cmp	r3, #0
 800e486:	d09b      	beq.n	800e3c0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	68da      	ldr	r2, [r3, #12]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e496:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e49e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d022      	beq.n	800e4ec <HAL_SD_WriteBlocks+0x24c>
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d91f      	bls.n	800e4ec <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4b0:	2b03      	cmp	r3, #3
 800e4b2:	d01b      	beq.n	800e4ec <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f004 f879 	bl	80125b0 <SDMMC_CmdStopTransfer>
 800e4be:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800e4c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d012      	beq.n	800e4ec <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a3a      	ldr	r2, [pc, #232]	; (800e5b4 <HAL_SD_WriteBlocks+0x314>)
 800e4cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4d4:	431a      	orrs	r2, r3
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2201      	movs	r2, #1
 800e4de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	e05e      	b.n	800e5aa <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4f2:	f003 0308 	and.w	r3, r3, #8
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d012      	beq.n	800e520 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	4a2d      	ldr	r2, [pc, #180]	; (800e5b4 <HAL_SD_WriteBlocks+0x314>)
 800e500:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e506:	f043 0208 	orr.w	r2, r3, #8
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2201      	movs	r2, #1
 800e512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2200      	movs	r2, #0
 800e51a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e51c:	2301      	movs	r3, #1
 800e51e:	e044      	b.n	800e5aa <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e526:	f003 0302 	and.w	r3, r3, #2
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d012      	beq.n	800e554 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	4a20      	ldr	r2, [pc, #128]	; (800e5b4 <HAL_SD_WriteBlocks+0x314>)
 800e534:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e53a:	f043 0202 	orr.w	r2, r3, #2
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2201      	movs	r2, #1
 800e546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2200      	movs	r2, #0
 800e54e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e550:	2301      	movs	r3, #1
 800e552:	e02a      	b.n	800e5aa <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e55a:	f003 0310 	and.w	r3, r3, #16
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d012      	beq.n	800e588 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	4a13      	ldr	r2, [pc, #76]	; (800e5b4 <HAL_SD_WriteBlocks+0x314>)
 800e568:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e56e:	f043 0210 	orr.w	r2, r3, #16
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2201      	movs	r2, #1
 800e57a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2200      	movs	r2, #0
 800e582:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e584:	2301      	movs	r3, #1
 800e586:	e010      	b.n	800e5aa <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a0a      	ldr	r2, [pc, #40]	; (800e5b8 <HAL_SD_WriteBlocks+0x318>)
 800e58e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2201      	movs	r2, #1
 800e594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800e598:	2300      	movs	r3, #0
 800e59a:	e006      	b.n	800e5aa <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e5a8:	2301      	movs	r3, #1
  }
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3748      	adds	r7, #72	; 0x48
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	1fe00fff 	.word	0x1fe00fff
 800e5b8:	18000f3a 	.word	0x18000f3a

0800e5bc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b08c      	sub	sp, #48	; 0x30
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	607a      	str	r2, [r7, #4]
 800e5c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d107      	bne.n	800e5e4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	e08d      	b.n	800e700 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	f040 8086 	bne.w	800e6fe <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e5f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	441a      	add	r2, r3
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e602:	429a      	cmp	r2, r3
 800e604:	d907      	bls.n	800e616 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e60a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e612:	2301      	movs	r3, #1
 800e614:	e074      	b.n	800e700 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2203      	movs	r2, #3
 800e61a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2200      	movs	r2, #0
 800e624:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	025a      	lsls	r2, r3, #9
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e638:	2b01      	cmp	r3, #1
 800e63a:	d002      	beq.n	800e642 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63e:	025b      	lsls	r3, r3, #9
 800e640:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e642:	f04f 33ff 	mov.w	r3, #4294967295
 800e646:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	025b      	lsls	r3, r3, #9
 800e64c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e64e:	2390      	movs	r3, #144	; 0x90
 800e650:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e652:	2302      	movs	r3, #2
 800e654:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e656:	2300      	movs	r3, #0
 800e658:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e65a:	2300      	movs	r3, #0
 800e65c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f107 0210 	add.w	r2, r7, #16
 800e666:	4611      	mov	r1, r2
 800e668:	4618      	mov	r0, r3
 800e66a:	f003 fec5 	bl	80123f8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	68da      	ldr	r2, [r3, #12]
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e67c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	68ba      	ldr	r2, [r7, #8]
 800e684:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2201      	movs	r2, #1
 800e68c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	2b01      	cmp	r3, #1
 800e692:	d90a      	bls.n	800e6aa <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2282      	movs	r2, #130	; 0x82
 800e698:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f003 ff1b 	bl	80124dc <SDMMC_CmdReadMultiBlock>
 800e6a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e6a8:	e009      	b.n	800e6be <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2281      	movs	r2, #129	; 0x81
 800e6ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f003 feed 	bl	8012496 <SDMMC_CmdReadSingleBlock>
 800e6bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d012      	beq.n	800e6ea <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4a0f      	ldr	r2, [pc, #60]	; (800e708 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e6ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d2:	431a      	orrs	r2, r3
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e00a      	b.n	800e700 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e6f8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	e000      	b.n	800e700 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e6fe:	2302      	movs	r3, #2
  }
}
 800e700:	4618      	mov	r0, r3
 800e702:	3730      	adds	r7, #48	; 0x30
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	1fe00fff 	.word	0x1fe00fff

0800e70c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b08c      	sub	sp, #48	; 0x30
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
 800e718:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d107      	bne.n	800e734 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e728:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e730:	2301      	movs	r3, #1
 800e732:	e08d      	b.n	800e850 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	f040 8086 	bne.w	800e84e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	441a      	add	r2, r3
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e752:	429a      	cmp	r2, r3
 800e754:	d907      	bls.n	800e766 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e75a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e762:	2301      	movs	r3, #1
 800e764:	e074      	b.n	800e850 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2203      	movs	r2, #3
 800e76a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2200      	movs	r2, #0
 800e774:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	68ba      	ldr	r2, [r7, #8]
 800e77a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	025a      	lsls	r2, r3, #9
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d002      	beq.n	800e792 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78e:	025b      	lsls	r3, r3, #9
 800e790:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e792:	f04f 33ff 	mov.w	r3, #4294967295
 800e796:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	025b      	lsls	r3, r3, #9
 800e79c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e79e:	2390      	movs	r3, #144	; 0x90
 800e7a0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f107 0210 	add.w	r2, r7, #16
 800e7b6:	4611      	mov	r1, r2
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f003 fe1d 	bl	80123f8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	68da      	ldr	r2, [r3, #12]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7cc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	68ba      	ldr	r2, [r7, #8]
 800e7d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d90a      	bls.n	800e7fa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	22a0      	movs	r2, #160	; 0xa0
 800e7e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f003 feb9 	bl	8012568 <SDMMC_CmdWriteMultiBlock>
 800e7f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e7f8:	e009      	b.n	800e80e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2290      	movs	r2, #144	; 0x90
 800e7fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e806:	4618      	mov	r0, r3
 800e808:	f003 fe8b 	bl	8012522 <SDMMC_CmdWriteSingleBlock>
 800e80c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e810:	2b00      	cmp	r3, #0
 800e812:	d012      	beq.n	800e83a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	4a0f      	ldr	r2, [pc, #60]	; (800e858 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e81a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e822:	431a      	orrs	r2, r3
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2200      	movs	r2, #0
 800e834:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e836:	2301      	movs	r3, #1
 800e838:	e00a      	b.n	800e850 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e848:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e84a:	2300      	movs	r3, #0
 800e84c:	e000      	b.n	800e850 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e84e:	2302      	movs	r3, #2
  }
}
 800e850:	4618      	mov	r0, r3
 800e852:	3730      	adds	r7, #48	; 0x30
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	1fe00fff 	.word	0x1fe00fff

0800e85c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e868:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e874:	2b00      	cmp	r3, #0
 800e876:	d008      	beq.n	800e88a <HAL_SD_IRQHandler+0x2e>
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f003 0308 	and.w	r3, r3, #8
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d003      	beq.n	800e88a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f001 f92a 	bl	800fadc <SD_Read_IT>
 800e888:	e19a      	b.n	800ebc0 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e894:	2b00      	cmp	r3, #0
 800e896:	f000 80ac 	beq.w	800e9f2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e8a2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	4b9d      	ldr	r3, [pc, #628]	; (800eb24 <HAL_SD_IRQHandler+0x2c8>)
 800e8b0:	400b      	ands	r3, r1
 800e8b2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e8c2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	68da      	ldr	r2, [r3, #12]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8d2:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f003 0308 	and.w	r3, r3, #8
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d038      	beq.n	800e950 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f003 0302 	and.w	r3, r3, #2
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d104      	bne.n	800e8f2 <HAL_SD_IRQHandler+0x96>
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f003 0320 	and.w	r3, r3, #32
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d011      	beq.n	800e916 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f003 fe5a 	bl	80125b0 <SDMMC_CmdStopTransfer>
 800e8fc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d008      	beq.n	800e916 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	431a      	orrs	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 f959 	bl	800ebc8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a83      	ldr	r2, [pc, #524]	; (800eb28 <HAL_SD_IRQHandler+0x2cc>)
 800e91c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2201      	movs	r2, #1
 800e922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f003 0301 	and.w	r3, r3, #1
 800e932:	2b00      	cmp	r3, #0
 800e934:	d104      	bne.n	800e940 <HAL_SD_IRQHandler+0xe4>
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f003 0302 	and.w	r3, r3, #2
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d003      	beq.n	800e948 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f005 fe4b 	bl	80145dc <HAL_SD_RxCpltCallback>
 800e946:	e13b      	b.n	800ebc0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f005 fe3d 	bl	80145c8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e94e:	e137      	b.n	800ebc0 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e956:	2b00      	cmp	r3, #0
 800e958:	f000 8132 	beq.w	800ebc0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	2200      	movs	r2, #0
 800e962:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2200      	movs	r2, #0
 800e96a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2200      	movs	r2, #0
 800e972:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f003 0302 	and.w	r3, r3, #2
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d104      	bne.n	800e988 <HAL_SD_IRQHandler+0x12c>
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f003 0320 	and.w	r3, r3, #32
 800e984:	2b00      	cmp	r3, #0
 800e986:	d011      	beq.n	800e9ac <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	4618      	mov	r0, r3
 800e98e:	f003 fe0f 	bl	80125b0 <SDMMC_CmdStopTransfer>
 800e992:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d008      	beq.n	800e9ac <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	431a      	orrs	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 f90e 	bl	800ebc8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f003 0310 	and.w	r3, r3, #16
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d104      	bne.n	800e9ce <HAL_SD_IRQHandler+0x172>
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f003 0320 	and.w	r3, r3, #32
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d002      	beq.n	800e9d4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f005 fdfa 	bl	80145c8 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f003 0301 	and.w	r3, r3, #1
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d105      	bne.n	800e9ea <HAL_SD_IRQHandler+0x18e>
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f003 0302 	and.w	r3, r3, #2
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f000 80eb 	beq.w	800ebc0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f005 fdf6 	bl	80145dc <HAL_SD_RxCpltCallback>
}
 800e9f0:	e0e6      	b.n	800ebc0 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d008      	beq.n	800ea12 <HAL_SD_IRQHandler+0x1b6>
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f003 0308 	and.w	r3, r3, #8
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d003      	beq.n	800ea12 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f001 f8ac 	bl	800fb68 <SD_Write_IT>
 800ea10:	e0d6      	b.n	800ebc0 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea18:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	f000 80a2 	beq.w	800eb66 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea28:	f003 0302 	and.w	r3, r3, #2
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d005      	beq.n	800ea3c <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea34:	f043 0202 	orr.w	r2, r3, #2
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea42:	f003 0308 	and.w	r3, r3, #8
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d005      	beq.n	800ea56 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea4e:	f043 0208 	orr.w	r2, r3, #8
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea5c:	f003 0320 	and.w	r3, r3, #32
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d005      	beq.n	800ea70 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea68:	f043 0220 	orr.w	r2, r3, #32
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea76:	f003 0310 	and.w	r3, r3, #16
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d005      	beq.n	800ea8a <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea82:	f043 0210 	orr.w	r2, r3, #16
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	4a26      	ldr	r2, [pc, #152]	; (800eb28 <HAL_SD_IRQHandler+0x2cc>)
 800ea90:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800eaa0:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	68da      	ldr	r2, [r3, #12]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eab0:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eac0:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	68da      	ldr	r2, [r3, #12]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ead0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f003 fd6a 	bl	80125b0 <SDMMC_CmdStopTransfer>
 800eadc:	4602      	mov	r2, r0
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eae2:	431a      	orrs	r2, r3
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68da      	ldr	r2, [r3, #12]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eaf6:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb00:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f003 0308 	and.w	r3, r3, #8
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00f      	beq.n	800eb2c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 f854 	bl	800ebc8 <HAL_SD_ErrorCallback>
}
 800eb20:	e04e      	b.n	800ebc0 <HAL_SD_IRQHandler+0x364>
 800eb22:	bf00      	nop
 800eb24:	ffff3ec5 	.word	0xffff3ec5
 800eb28:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d044      	beq.n	800ebc0 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d040      	beq.n	800ebc0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800eb4c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2200      	movs	r2, #0
 800eb54:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f000 f832 	bl	800ebc8 <HAL_SD_ErrorCallback>
}
 800eb64:	e02c      	b.n	800ebc0 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d025      	beq.n	800ebc0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb7c:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb84:	f003 0304 	and.w	r3, r3, #4
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d10c      	bne.n	800eba6 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f003 0320 	and.w	r3, r3, #32
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d003      	beq.n	800eb9e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f001 f84e 	bl	800fc38 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800eb9c:	e010      	b.n	800ebc0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f001 f836 	bl	800fc10 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800eba4:	e00c      	b.n	800ebc0 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f003 0320 	and.w	r3, r3, #32
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d003      	beq.n	800ebb8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f001 f837 	bl	800fc24 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800ebb6:	e003      	b.n	800ebc0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f001 f81f 	bl	800fbfc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ebbe:	e7ff      	b.n	800ebc0 <HAL_SD_IRQHandler+0x364>
 800ebc0:	bf00      	nop
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ebd0:	bf00      	nop
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr

0800ebdc <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800ebe6:	bf00      	nop
 800ebe8:	370c      	adds	r7, #12
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
	...

0800ebf4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec02:	0f9b      	lsrs	r3, r3, #30
 800ec04:	b2da      	uxtb	r2, r3
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec0e:	0e9b      	lsrs	r3, r3, #26
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	f003 030f 	and.w	r3, r3, #15
 800ec16:	b2da      	uxtb	r2, r3
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec20:	0e1b      	lsrs	r3, r3, #24
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	f003 0303 	and.w	r3, r3, #3
 800ec28:	b2da      	uxtb	r2, r3
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec32:	0c1b      	lsrs	r3, r3, #16
 800ec34:	b2da      	uxtb	r2, r3
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec3e:	0a1b      	lsrs	r3, r3, #8
 800ec40:	b2da      	uxtb	r2, r3
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec4a:	b2da      	uxtb	r2, r3
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec54:	0d1b      	lsrs	r3, r3, #20
 800ec56:	b29a      	uxth	r2, r3
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec60:	0c1b      	lsrs	r3, r3, #16
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	f003 030f 	and.w	r3, r3, #15
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec72:	0bdb      	lsrs	r3, r3, #15
 800ec74:	b2db      	uxtb	r3, r3
 800ec76:	f003 0301 	and.w	r3, r3, #1
 800ec7a:	b2da      	uxtb	r2, r3
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec84:	0b9b      	lsrs	r3, r3, #14
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	f003 0301 	and.w	r3, r3, #1
 800ec8c:	b2da      	uxtb	r2, r3
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec96:	0b5b      	lsrs	r3, r3, #13
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	f003 0301 	and.w	r3, r3, #1
 800ec9e:	b2da      	uxtb	r2, r3
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eca8:	0b1b      	lsrs	r3, r3, #12
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	f003 0301 	and.w	r3, r3, #1
 800ecb0:	b2da      	uxtb	r2, r3
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d163      	bne.n	800ed8c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecc8:	009a      	lsls	r2, r3, #2
 800ecca:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ecce:	4013      	ands	r3, r2
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ecd4:	0f92      	lsrs	r2, r2, #30
 800ecd6:	431a      	orrs	r2, r3
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ece0:	0edb      	lsrs	r3, r3, #27
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	f003 0307 	and.w	r3, r3, #7
 800ece8:	b2da      	uxtb	r2, r3
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ecf2:	0e1b      	lsrs	r3, r3, #24
 800ecf4:	b2db      	uxtb	r3, r3
 800ecf6:	f003 0307 	and.w	r3, r3, #7
 800ecfa:	b2da      	uxtb	r2, r3
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed04:	0d5b      	lsrs	r3, r3, #21
 800ed06:	b2db      	uxtb	r3, r3
 800ed08:	f003 0307 	and.w	r3, r3, #7
 800ed0c:	b2da      	uxtb	r2, r3
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed16:	0c9b      	lsrs	r3, r3, #18
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	f003 0307 	and.w	r3, r3, #7
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed28:	0bdb      	lsrs	r3, r3, #15
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	f003 0307 	and.w	r3, r3, #7
 800ed30:	b2da      	uxtb	r2, r3
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	691b      	ldr	r3, [r3, #16]
 800ed3a:	1c5a      	adds	r2, r3, #1
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	7e1b      	ldrb	r3, [r3, #24]
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	f003 0307 	and.w	r3, r3, #7
 800ed4a:	3302      	adds	r3, #2
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ed56:	fb02 f203 	mul.w	r2, r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	7a1b      	ldrb	r3, [r3, #8]
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	f003 030f 	and.w	r3, r3, #15
 800ed68:	2201      	movs	r2, #1
 800ed6a:	409a      	lsls	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed74:	687a      	ldr	r2, [r7, #4]
 800ed76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ed78:	0a52      	lsrs	r2, r2, #9
 800ed7a:	fb02 f203 	mul.w	r2, r2, r3
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed88:	659a      	str	r2, [r3, #88]	; 0x58
 800ed8a:	e031      	b.n	800edf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d11d      	bne.n	800edd0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed98:	041b      	lsls	r3, r3, #16
 800ed9a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eda2:	0c1b      	lsrs	r3, r3, #16
 800eda4:	431a      	orrs	r2, r3
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	691b      	ldr	r3, [r3, #16]
 800edae:	3301      	adds	r3, #1
 800edb0:	029a      	lsls	r2, r3, #10
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800edc4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	659a      	str	r2, [r3, #88]	; 0x58
 800edce:	e00f      	b.n	800edf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a58      	ldr	r2, [pc, #352]	; (800ef38 <HAL_SD_GetCardCSD+0x344>)
 800edd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eddc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2201      	movs	r2, #1
 800ede8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800edec:	2301      	movs	r3, #1
 800edee:	e09d      	b.n	800ef2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800edf4:	0b9b      	lsrs	r3, r3, #14
 800edf6:	b2db      	uxtb	r3, r3
 800edf8:	f003 0301 	and.w	r3, r3, #1
 800edfc:	b2da      	uxtb	r2, r3
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee06:	09db      	lsrs	r3, r3, #7
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee0e:	b2da      	uxtb	r2, r3
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee1e:	b2da      	uxtb	r2, r3
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee28:	0fdb      	lsrs	r3, r3, #31
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee34:	0f5b      	lsrs	r3, r3, #29
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	f003 0303 	and.w	r3, r3, #3
 800ee3c:	b2da      	uxtb	r2, r3
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee46:	0e9b      	lsrs	r3, r3, #26
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	f003 0307 	and.w	r3, r3, #7
 800ee4e:	b2da      	uxtb	r2, r3
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee58:	0d9b      	lsrs	r3, r3, #22
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	f003 030f 	and.w	r3, r3, #15
 800ee60:	b2da      	uxtb	r2, r3
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee6a:	0d5b      	lsrs	r3, r3, #21
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	f003 0301 	and.w	r3, r3, #1
 800ee72:	b2da      	uxtb	r2, r3
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee86:	0c1b      	lsrs	r3, r3, #16
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	f003 0301 	and.w	r3, r3, #1
 800ee8e:	b2da      	uxtb	r2, r3
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee9a:	0bdb      	lsrs	r3, r3, #15
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	f003 0301 	and.w	r3, r3, #1
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeae:	0b9b      	lsrs	r3, r3, #14
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	f003 0301 	and.w	r3, r3, #1
 800eeb6:	b2da      	uxtb	r2, r3
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eec2:	0b5b      	lsrs	r3, r3, #13
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	f003 0301 	and.w	r3, r3, #1
 800eeca:	b2da      	uxtb	r2, r3
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eed6:	0b1b      	lsrs	r3, r3, #12
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	f003 0301 	and.w	r3, r3, #1
 800eede:	b2da      	uxtb	r2, r3
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeea:	0a9b      	lsrs	r3, r3, #10
 800eeec:	b2db      	uxtb	r3, r3
 800eeee:	f003 0303 	and.w	r3, r3, #3
 800eef2:	b2da      	uxtb	r2, r3
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eefe:	0a1b      	lsrs	r3, r3, #8
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	f003 0303 	and.w	r3, r3, #3
 800ef06:	b2da      	uxtb	r2, r3
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef12:	085b      	lsrs	r3, r3, #1
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef1a:	b2da      	uxtb	r2, r3
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	2201      	movs	r2, #1
 800ef26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ef2a:	2300      	movs	r3, #0
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	370c      	adds	r7, #12
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr
 800ef38:	1fe00fff 	.word	0x1fe00fff

0800ef3c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b094      	sub	sp, #80	; 0x50
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ef46:	2300      	movs	r3, #0
 800ef48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ef4c:	f107 0308 	add.w	r3, r7, #8
 800ef50:	4619      	mov	r1, r3
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fb64 	bl	800f620 <SD_SendSDStatus>
 800ef58:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ef5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d011      	beq.n	800ef84 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a4f      	ldr	r2, [pc, #316]	; (800f0a4 <HAL_SD_GetCardStatus+0x168>)
 800ef66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef6e:	431a      	orrs	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2201      	movs	r2, #1
 800ef78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ef82:	e070      	b.n	800f066 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	099b      	lsrs	r3, r3, #6
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	f003 0303 	and.w	r3, r3, #3
 800ef8e:	b2da      	uxtb	r2, r3
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	095b      	lsrs	r3, r3, #5
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	f003 0301 	and.w	r3, r3, #1
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	0a1b      	lsrs	r3, r3, #8
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800efae:	b29a      	uxth	r2, r3
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	0e1b      	lsrs	r3, r3, #24
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	4313      	orrs	r3, r2
 800efb8:	b29a      	uxth	r2, r3
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	061a      	lsls	r2, r3, #24
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	021b      	lsls	r3, r3, #8
 800efc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800efca:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	0a1b      	lsrs	r3, r3, #8
 800efd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800efd4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	0e1b      	lsrs	r3, r3, #24
 800efda:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	b2da      	uxtb	r2, r3
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	0a1b      	lsrs	r3, r3, #8
 800efec:	b2da      	uxtb	r2, r3
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	0d1b      	lsrs	r3, r3, #20
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	f003 030f 	and.w	r3, r3, #15
 800effc:	b2da      	uxtb	r2, r3
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	0c1b      	lsrs	r3, r3, #16
 800f006:	b29b      	uxth	r3, r3
 800f008:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f00c:	b29a      	uxth	r2, r3
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	b29b      	uxth	r3, r3
 800f012:	b2db      	uxtb	r3, r3
 800f014:	b29b      	uxth	r3, r3
 800f016:	4313      	orrs	r3, r2
 800f018:	b29a      	uxth	r2, r3
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	0a9b      	lsrs	r3, r3, #10
 800f022:	b2db      	uxtb	r3, r3
 800f024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f028:	b2da      	uxtb	r2, r3
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	0a1b      	lsrs	r3, r3, #8
 800f032:	b2db      	uxtb	r3, r3
 800f034:	f003 0303 	and.w	r3, r3, #3
 800f038:	b2da      	uxtb	r2, r3
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	091b      	lsrs	r3, r3, #4
 800f042:	b2db      	uxtb	r3, r3
 800f044:	f003 030f 	and.w	r3, r3, #15
 800f048:	b2da      	uxtb	r2, r3
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	b2db      	uxtb	r3, r3
 800f052:	f003 030f 	and.w	r3, r3, #15
 800f056:	b2da      	uxtb	r2, r3
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	0e1b      	lsrs	r3, r3, #24
 800f060:	b2da      	uxtb	r2, r3
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f06e:	4618      	mov	r0, r3
 800f070:	f003 f9ee 	bl	8012450 <SDMMC_CmdBlockLength>
 800f074:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800f076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d00d      	beq.n	800f098 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	4a08      	ldr	r2, [pc, #32]	; (800f0a4 <HAL_SD_GetCardStatus+0x168>)
 800f082:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f088:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2201      	movs	r2, #1
 800f08e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800f092:	2301      	movs	r3, #1
 800f094:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800f098:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3750      	adds	r7, #80	; 0x50
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	1fe00fff 	.word	0x1fe00fff

0800f0a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800f0f2:	2300      	movs	r3, #0
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f100:	b5b0      	push	{r4, r5, r7, lr}
 800f102:	b08e      	sub	sp, #56	; 0x38
 800f104:	af04      	add	r7, sp, #16
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800f10a:	2300      	movs	r3, #0
 800f10c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2203      	movs	r2, #3
 800f114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f11c:	2b03      	cmp	r3, #3
 800f11e:	d02e      	beq.n	800f17e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f126:	d106      	bne.n	800f136 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f12c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	639a      	str	r2, [r3, #56]	; 0x38
 800f134:	e029      	b.n	800f18a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f13c:	d10a      	bne.n	800f154 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 fb66 	bl	800f810 <SD_WideBus_Enable>
 800f144:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f14a:	6a3b      	ldr	r3, [r7, #32]
 800f14c:	431a      	orrs	r2, r3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	639a      	str	r2, [r3, #56]	; 0x38
 800f152:	e01a      	b.n	800f18a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d10a      	bne.n	800f170 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 fba3 	bl	800f8a6 <SD_WideBus_Disable>
 800f160:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	431a      	orrs	r2, r3
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	639a      	str	r2, [r3, #56]	; 0x38
 800f16e:	e00c      	b.n	800f18a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f174:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	639a      	str	r2, [r3, #56]	; 0x38
 800f17c:	e005      	b.n	800f18a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f182:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d007      	beq.n	800f1a2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4a2e      	ldr	r2, [pc, #184]	; (800f250 <HAL_SD_ConfigWideBusOperation+0x150>)
 800f198:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800f19a:	2301      	movs	r3, #1
 800f19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f1a0:	e034      	b.n	800f20c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	691b      	ldr	r3, [r3, #16]
 800f1b6:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	2b03      	cmp	r3, #3
 800f1be:	d903      	bls.n	800f1c8 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	695b      	ldr	r3, [r3, #20]
 800f1c4:	61bb      	str	r3, [r7, #24]
 800f1c6:	e012      	b.n	800f1ee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1d0:	d103      	bne.n	800f1da <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	695b      	ldr	r3, [r3, #20]
 800f1d6:	61bb      	str	r3, [r7, #24]
 800f1d8:	e009      	b.n	800f1ee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1e2:	d102      	bne.n	800f1ea <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800f1e4:	2302      	movs	r3, #2
 800f1e6:	61bb      	str	r3, [r7, #24]
 800f1e8:	e001      	b.n	800f1ee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800f1ea:	2304      	movs	r3, #4
 800f1ec:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681d      	ldr	r5, [r3, #0]
 800f1f2:	466c      	mov	r4, sp
 800f1f4:	f107 0314 	add.w	r3, r7, #20
 800f1f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f1fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f200:	f107 0308 	add.w	r3, r7, #8
 800f204:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f206:	4628      	mov	r0, r5
 800f208:	f003 f844 	bl	8012294 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f214:	4618      	mov	r0, r3
 800f216:	f003 f91b 	bl	8012450 <SDMMC_CmdBlockLength>
 800f21a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f21c:	6a3b      	ldr	r3, [r7, #32]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00c      	beq.n	800f23c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	4a0a      	ldr	r2, [pc, #40]	; (800f250 <HAL_SD_ConfigWideBusOperation+0x150>)
 800f228:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f22e:	6a3b      	ldr	r3, [r7, #32]
 800f230:	431a      	orrs	r2, r3
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800f236:	2301      	movs	r3, #1
 800f238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2201      	movs	r2, #1
 800f240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800f244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3728      	adds	r7, #40	; 0x28
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bdb0      	pop	{r4, r5, r7, pc}
 800f250:	1fe00fff 	.word	0x1fe00fff

0800f254 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f25c:	2300      	movs	r3, #0
 800f25e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f260:	f107 030c 	add.w	r3, r7, #12
 800f264:	4619      	mov	r1, r3
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 faaa 	bl	800f7c0 <SD_SendStatus>
 800f26c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d005      	beq.n	800f280 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	431a      	orrs	r2, r3
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	0a5b      	lsrs	r3, r3, #9
 800f284:	f003 030f 	and.w	r3, r3, #15
 800f288:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f28a:	693b      	ldr	r3, [r7, #16]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3718      	adds	r7, #24
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f294:	b590      	push	{r4, r7, lr}
 800f296:	b091      	sub	sp, #68	; 0x44
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800f29c:	2301      	movs	r3, #1
 800f29e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f003 f84e 	bl	8012346 <SDMMC_GetPowerState>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d102      	bne.n	800f2b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f2b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f2b4:	e0a8      	b.n	800f408 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2ba:	2b03      	cmp	r3, #3
 800f2bc:	d02e      	beq.n	800f31c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f003 fa9a 	bl	80127fc <SDMMC_CmdSendCID>
 800f2c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d001      	beq.n	800f2d4 <SD_InitCard+0x40>
    {
      return errorstate;
 800f2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2d2:	e099      	b.n	800f408 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	2100      	movs	r1, #0
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f003 f879 	bl	80123d2 <SDMMC_GetResponse>
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	2104      	movs	r1, #4
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f003 f870 	bl	80123d2 <SDMMC_GetResponse>
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	2108      	movs	r1, #8
 800f2fe:	4618      	mov	r0, r3
 800f300:	f003 f867 	bl	80123d2 <SDMMC_GetResponse>
 800f304:	4602      	mov	r2, r0
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	210c      	movs	r1, #12
 800f310:	4618      	mov	r0, r3
 800f312:	f003 f85e 	bl	80123d2 <SDMMC_GetResponse>
 800f316:	4602      	mov	r2, r0
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f320:	2b03      	cmp	r3, #3
 800f322:	d00d      	beq.n	800f340 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f107 020e 	add.w	r2, r7, #14
 800f32c:	4611      	mov	r1, r2
 800f32e:	4618      	mov	r0, r3
 800f330:	f003 faa3 	bl	801287a <SDMMC_CmdSetRelAdd>
 800f334:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d001      	beq.n	800f340 <SD_InitCard+0xac>
    {
      return errorstate;
 800f33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f33e:	e063      	b.n	800f408 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f344:	2b03      	cmp	r3, #3
 800f346:	d036      	beq.n	800f3b6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f348:	89fb      	ldrh	r3, [r7, #14]
 800f34a:	461a      	mov	r2, r3
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f358:	041b      	lsls	r3, r3, #16
 800f35a:	4619      	mov	r1, r3
 800f35c:	4610      	mov	r0, r2
 800f35e:	f003 fa6c 	bl	801283a <SDMMC_CmdSendCSD>
 800f362:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f366:	2b00      	cmp	r3, #0
 800f368:	d001      	beq.n	800f36e <SD_InitCard+0xda>
    {
      return errorstate;
 800f36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f36c:	e04c      	b.n	800f408 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2100      	movs	r1, #0
 800f374:	4618      	mov	r0, r3
 800f376:	f003 f82c 	bl	80123d2 <SDMMC_GetResponse>
 800f37a:	4602      	mov	r2, r0
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	2104      	movs	r1, #4
 800f386:	4618      	mov	r0, r3
 800f388:	f003 f823 	bl	80123d2 <SDMMC_GetResponse>
 800f38c:	4602      	mov	r2, r0
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	2108      	movs	r1, #8
 800f398:	4618      	mov	r0, r3
 800f39a:	f003 f81a 	bl	80123d2 <SDMMC_GetResponse>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	210c      	movs	r1, #12
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f003 f811 	bl	80123d2 <SDMMC_GetResponse>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	2104      	movs	r1, #4
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f003 f808 	bl	80123d2 <SDMMC_GetResponse>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	0d1a      	lsrs	r2, r3, #20
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f3ca:	f107 0310 	add.w	r3, r7, #16
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f7ff fc0f 	bl	800ebf4 <HAL_SD_GetCardCSD>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d002      	beq.n	800f3e2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f3dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f3e0:	e012      	b.n	800f408 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6819      	ldr	r1, [r3, #0]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3ea:	041b      	lsls	r3, r3, #16
 800f3ec:	f04f 0400 	mov.w	r4, #0
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	4623      	mov	r3, r4
 800f3f4:	4608      	mov	r0, r1
 800f3f6:	f003 f917 	bl	8012628 <SDMMC_CmdSelDesel>
 800f3fa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800f3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d001      	beq.n	800f406 <SD_InitCard+0x172>
  {
    return errorstate;
 800f402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f404:	e000      	b.n	800f408 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f406:	2300      	movs	r3, #0
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3744      	adds	r7, #68	; 0x44
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd90      	pop	{r4, r7, pc}

0800f410 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b088      	sub	sp, #32
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f418:	2300      	movs	r3, #0
 800f41a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800f41c:	2300      	movs	r3, #0
 800f41e:	61fb      	str	r3, [r7, #28]
 800f420:	2300      	movs	r3, #0
 800f422:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800f424:	f7f6 fa2c 	bl	8005880 <HAL_GetTick>
 800f428:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	4618      	mov	r0, r3
 800f430:	f003 f91e 	bl	8012670 <SDMMC_CmdGoIdleState>
 800f434:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f436:	693b      	ldr	r3, [r7, #16]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d001      	beq.n	800f440 <SD_PowerON+0x30>
  {
    return errorstate;
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	e0e9      	b.n	800f614 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	4618      	mov	r0, r3
 800f446:	f003 f931 	bl	80126ac <SDMMC_CmdOperCond>
 800f44a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d00d      	beq.n	800f46e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2200      	movs	r2, #0
 800f456:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	4618      	mov	r0, r3
 800f45e:	f003 f907 	bl	8012670 <SDMMC_CmdGoIdleState>
 800f462:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d004      	beq.n	800f474 <SD_PowerON+0x64>
    {
      return errorstate;
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	e0d2      	b.n	800f614 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2201      	movs	r2, #1
 800f472:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f478:	2b01      	cmp	r3, #1
 800f47a:	d137      	bne.n	800f4ec <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	2100      	movs	r1, #0
 800f482:	4618      	mov	r0, r3
 800f484:	f003 f932 	bl	80126ec <SDMMC_CmdAppCommand>
 800f488:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d02d      	beq.n	800f4ec <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f490:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f494:	e0be      	b.n	800f614 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	2100      	movs	r1, #0
 800f49c:	4618      	mov	r0, r3
 800f49e:	f003 f925 	bl	80126ec <SDMMC_CmdAppCommand>
 800f4a2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d001      	beq.n	800f4ae <SD_PowerON+0x9e>
    {
      return errorstate;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	e0b2      	b.n	800f614 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	495a      	ldr	r1, [pc, #360]	; (800f61c <SD_PowerON+0x20c>)
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f003 f93c 	bl	8012732 <SDMMC_CmdAppOperCommand>
 800f4ba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d002      	beq.n	800f4c8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f4c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f4c6:	e0a5      	b.n	800f614 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	2100      	movs	r1, #0
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f002 ff7f 	bl	80123d2 <SDMMC_GetResponse>
 800f4d4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f4d6:	69fb      	ldr	r3, [r7, #28]
 800f4d8:	0fdb      	lsrs	r3, r3, #31
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d101      	bne.n	800f4e2 <SD_PowerON+0xd2>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	e000      	b.n	800f4e4 <SD_PowerON+0xd4>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	61bb      	str	r3, [r7, #24]

    count++;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d802      	bhi.n	800f4fc <SD_PowerON+0xec>
 800f4f6:	69bb      	ldr	r3, [r7, #24]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d0cc      	beq.n	800f496 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f502:	4293      	cmp	r3, r2
 800f504:	d902      	bls.n	800f50c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f50a:	e083      	b.n	800f614 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f512:	2b00      	cmp	r3, #0
 800f514:	d07d      	beq.n	800f612 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2201      	movs	r2, #1
 800f51a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	699b      	ldr	r3, [r3, #24]
 800f520:	2b02      	cmp	r3, #2
 800f522:	d176      	bne.n	800f612 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d071      	beq.n	800f612 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f534:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f042 0208 	orr.w	r2, r2, #8
 800f544:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	4618      	mov	r0, r3
 800f54c:	f003 f9fc 	bl	8012948 <SDMMC_CmdVoltageSwitch>
 800f550:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d00c      	beq.n	800f572 <SD_PowerON+0x162>
        {
          return errorstate;
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	e05b      	b.n	800f614 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f55c:	f7f6 f990 	bl	8005880 <HAL_GetTick>
 800f560:	4602      	mov	r2, r0
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	1ad3      	subs	r3, r2, r3
 800f566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f56a:	d102      	bne.n	800f572 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800f56c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f570:	e050      	b.n	800f614 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f578:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f57c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f580:	d1ec      	bne.n	800f55c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f58a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f59a:	d002      	beq.n	800f5a2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800f59c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f5a0:	e038      	b.n	800f614 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800f5a2:	2001      	movs	r0, #1
 800f5a4:	f7ff fb1a 	bl	800ebdc <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f042 0204 	orr.w	r2, r2, #4
 800f5b6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800f5b8:	e00a      	b.n	800f5d0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f5ba:	f7f6 f961 	bl	8005880 <HAL_GetTick>
 800f5be:	4602      	mov	r2, r0
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	1ad3      	subs	r3, r2, r3
 800f5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c8:	d102      	bne.n	800f5d0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800f5ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f5ce:	e021      	b.n	800f614 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f5da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f5de:	d1ec      	bne.n	800f5ba <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f5e8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f5f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f5f8:	d102      	bne.n	800f600 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f5fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f5fe:	e009      	b.n	800f614 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2213      	movs	r2, #19
 800f606:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f04f 32ff 	mov.w	r2, #4294967295
 800f610:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f612:	2300      	movs	r3, #0
}
 800f614:	4618      	mov	r0, r3
 800f616:	3720      	adds	r7, #32
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	c1100000 	.word	0xc1100000

0800f620 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b08c      	sub	sp, #48	; 0x30
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f62a:	f7f6 f929 	bl	8005880 <HAL_GetTick>
 800f62e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2100      	movs	r1, #0
 800f63a:	4618      	mov	r0, r3
 800f63c:	f002 fec9 	bl	80123d2 <SDMMC_GetResponse>
 800f640:	4603      	mov	r3, r0
 800f642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f646:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f64a:	d102      	bne.n	800f652 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f64c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f650:	e0b0      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	2140      	movs	r1, #64	; 0x40
 800f658:	4618      	mov	r0, r3
 800f65a:	f002 fef9 	bl	8012450 <SDMMC_CmdBlockLength>
 800f65e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f660:	6a3b      	ldr	r3, [r7, #32]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d005      	beq.n	800f672 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800f66e:	6a3b      	ldr	r3, [r7, #32]
 800f670:	e0a0      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f67a:	041b      	lsls	r3, r3, #16
 800f67c:	4619      	mov	r1, r3
 800f67e:	4610      	mov	r0, r2
 800f680:	f003 f834 	bl	80126ec <SDMMC_CmdAppCommand>
 800f684:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f686:	6a3b      	ldr	r3, [r7, #32]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d005      	beq.n	800f698 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800f694:	6a3b      	ldr	r3, [r7, #32]
 800f696:	e08d      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f698:	f04f 33ff 	mov.w	r3, #4294967295
 800f69c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f69e:	2340      	movs	r3, #64	; 0x40
 800f6a0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f6a2:	2360      	movs	r3, #96	; 0x60
 800f6a4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f6a6:	2302      	movs	r3, #2
 800f6a8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f107 0208 	add.w	r2, r7, #8
 800f6ba:	4611      	mov	r1, r2
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f002 fe9b 	bl	80123f8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f003 f91c 	bl	8012904 <SDMMC_CmdStatusRegister>
 800f6cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f6ce:	6a3b      	ldr	r3, [r7, #32]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d02b      	beq.n	800f72c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800f6dc:	6a3b      	ldr	r3, [r7, #32]
 800f6de:	e069      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d013      	beq.n	800f716 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6f2:	e00d      	b.n	800f710 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f002 fdf5 	bl	80122e8 <SDMMC_ReadFIFO>
 800f6fe:	4602      	mov	r2, r0
 800f700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f702:	601a      	str	r2, [r3, #0]
        pData++;
 800f704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f706:	3304      	adds	r3, #4
 800f708:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800f70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f70c:	3301      	adds	r3, #1
 800f70e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f712:	2b07      	cmp	r3, #7
 800f714:	d9ee      	bls.n	800f6f4 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f716:	f7f6 f8b3 	bl	8005880 <HAL_GetTick>
 800f71a:	4602      	mov	r2, r0
 800f71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71e:	1ad3      	subs	r3, r2, r3
 800f720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f724:	d102      	bne.n	800f72c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f726:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f72a:	e043      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f732:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f736:	2b00      	cmp	r3, #0
 800f738:	d0d2      	beq.n	800f6e0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f740:	f003 0308 	and.w	r3, r3, #8
 800f744:	2b00      	cmp	r3, #0
 800f746:	d001      	beq.n	800f74c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f748:	2308      	movs	r3, #8
 800f74a:	e033      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f752:	f003 0302 	and.w	r3, r3, #2
 800f756:	2b00      	cmp	r3, #0
 800f758:	d001      	beq.n	800f75e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f75a:	2302      	movs	r3, #2
 800f75c:	e02a      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f764:	f003 0320 	and.w	r3, r3, #32
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d017      	beq.n	800f79c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f76c:	2320      	movs	r3, #32
 800f76e:	e021      	b.n	800f7b4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4618      	mov	r0, r3
 800f776:	f002 fdb7 	bl	80122e8 <SDMMC_ReadFIFO>
 800f77a:	4602      	mov	r2, r0
 800f77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77e:	601a      	str	r2, [r3, #0]
    pData++;
 800f780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f782:	3304      	adds	r3, #4
 800f784:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f786:	f7f6 f87b 	bl	8005880 <HAL_GetTick>
 800f78a:	4602      	mov	r2, r0
 800f78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78e:	1ad3      	subs	r3, r2, r3
 800f790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f794:	d102      	bne.n	800f79c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f796:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f79a:	e00b      	b.n	800f7b4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d1e2      	bne.n	800f770 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	4a03      	ldr	r2, [pc, #12]	; (800f7bc <SD_SendSDStatus+0x19c>)
 800f7b0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f7b2:	2300      	movs	r3, #0
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3730      	adds	r7, #48	; 0x30
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	18000f3a 	.word	0x18000f3a

0800f7c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d102      	bne.n	800f7d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f7d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f7d4:	e018      	b.n	800f808 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7de:	041b      	lsls	r3, r3, #16
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	4610      	mov	r0, r2
 800f7e4:	f003 f86b 	bl	80128be <SDMMC_CmdSendStatus>
 800f7e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d001      	beq.n	800f7f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	e009      	b.n	800f808 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f002 fde9 	bl	80123d2 <SDMMC_GetResponse>
 800f800:	4602      	mov	r2, r0
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f806:	2300      	movs	r3, #0
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b086      	sub	sp, #24
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f818:	2300      	movs	r3, #0
 800f81a:	60fb      	str	r3, [r7, #12]
 800f81c:	2300      	movs	r3, #0
 800f81e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	2100      	movs	r1, #0
 800f826:	4618      	mov	r0, r3
 800f828:	f002 fdd3 	bl	80123d2 <SDMMC_GetResponse>
 800f82c:	4603      	mov	r3, r0
 800f82e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f832:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f836:	d102      	bne.n	800f83e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f838:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f83c:	e02f      	b.n	800f89e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f83e:	f107 030c 	add.w	r3, r7, #12
 800f842:	4619      	mov	r1, r3
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 f879 	bl	800f93c <SD_FindSCR>
 800f84a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d001      	beq.n	800f856 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	e023      	b.n	800f89e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d01c      	beq.n	800f89a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f868:	041b      	lsls	r3, r3, #16
 800f86a:	4619      	mov	r1, r3
 800f86c:	4610      	mov	r0, r2
 800f86e:	f002 ff3d 	bl	80126ec <SDMMC_CmdAppCommand>
 800f872:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d001      	beq.n	800f87e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	e00f      	b.n	800f89e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2102      	movs	r1, #2
 800f884:	4618      	mov	r0, r3
 800f886:	f002 ff74 	bl	8012772 <SDMMC_CmdBusWidth>
 800f88a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d001      	beq.n	800f896 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	e003      	b.n	800f89e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f896:	2300      	movs	r3, #0
 800f898:	e001      	b.n	800f89e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f89a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3718      	adds	r7, #24
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}

0800f8a6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f8a6:	b580      	push	{r7, lr}
 800f8a8:	b086      	sub	sp, #24
 800f8aa:	af00      	add	r7, sp, #0
 800f8ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	60fb      	str	r3, [r7, #12]
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2100      	movs	r1, #0
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f002 fd88 	bl	80123d2 <SDMMC_GetResponse>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f8cc:	d102      	bne.n	800f8d4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f8ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f8d2:	e02f      	b.n	800f934 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f8d4:	f107 030c 	add.w	r3, r7, #12
 800f8d8:	4619      	mov	r1, r3
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f000 f82e 	bl	800f93c <SD_FindSCR>
 800f8e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d001      	beq.n	800f8ec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	e023      	b.n	800f934 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d01c      	beq.n	800f930 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8fe:	041b      	lsls	r3, r3, #16
 800f900:	4619      	mov	r1, r3
 800f902:	4610      	mov	r0, r2
 800f904:	f002 fef2 	bl	80126ec <SDMMC_CmdAppCommand>
 800f908:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d001      	beq.n	800f914 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	e00f      	b.n	800f934 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2100      	movs	r1, #0
 800f91a:	4618      	mov	r0, r3
 800f91c:	f002 ff29 	bl	8012772 <SDMMC_CmdBusWidth>
 800f920:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d001      	beq.n	800f92c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	e003      	b.n	800f934 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f92c:	2300      	movs	r3, #0
 800f92e:	e001      	b.n	800f934 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f930:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f934:	4618      	mov	r0, r3
 800f936:	3718      	adds	r7, #24
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b08e      	sub	sp, #56	; 0x38
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f946:	f7f5 ff9b 	bl	8005880 <HAL_GetTick>
 800f94a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f94c:	2300      	movs	r3, #0
 800f94e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f950:	2300      	movs	r3, #0
 800f952:	60bb      	str	r3, [r7, #8]
 800f954:	2300      	movs	r3, #0
 800f956:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2108      	movs	r1, #8
 800f962:	4618      	mov	r0, r3
 800f964:	f002 fd74 	bl	8012450 <SDMMC_CmdBlockLength>
 800f968:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d001      	beq.n	800f974 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f972:	e0ad      	b.n	800fad0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f97c:	041b      	lsls	r3, r3, #16
 800f97e:	4619      	mov	r1, r3
 800f980:	4610      	mov	r0, r2
 800f982:	f002 feb3 	bl	80126ec <SDMMC_CmdAppCommand>
 800f986:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d001      	beq.n	800f992 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f990:	e09e      	b.n	800fad0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f992:	f04f 33ff 	mov.w	r3, #4294967295
 800f996:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f998:	2308      	movs	r3, #8
 800f99a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f99c:	2330      	movs	r3, #48	; 0x30
 800f99e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f9a0:	2302      	movs	r3, #2
 800f9a2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f107 0210 	add.w	r2, r7, #16
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f002 fd1e 	bl	80123f8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f002 fef9 	bl	80127b8 <SDMMC_CmdSendSCR>
 800f9c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d027      	beq.n	800fa1e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d0:	e07e      	b.n	800fad0 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d113      	bne.n	800fa08 <SD_FindSCR+0xcc>
 800f9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d110      	bne.n	800fa08 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f002 fc7c 	bl	80122e8 <SDMMC_ReadFIFO>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f002 fc75 	bl	80122e8 <SDMMC_ReadFIFO>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	60fb      	str	r3, [r7, #12]
      index++;
 800fa02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa04:	3301      	adds	r3, #1
 800fa06:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fa08:	f7f5 ff3a 	bl	8005880 <HAL_GetTick>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa10:	1ad3      	subs	r3, r2, r3
 800fa12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa16:	d102      	bne.n	800fa1e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800fa18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fa1c:	e058      	b.n	800fad0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa24:	f240 532a 	movw	r3, #1322	; 0x52a
 800fa28:	4013      	ands	r3, r2
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d0d1      	beq.n	800f9d2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa34:	f003 0308 	and.w	r3, r3, #8
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d005      	beq.n	800fa48 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	2208      	movs	r2, #8
 800fa42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800fa44:	2308      	movs	r3, #8
 800fa46:	e043      	b.n	800fad0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa4e:	f003 0302 	and.w	r3, r3, #2
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d005      	beq.n	800fa62 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2202      	movs	r2, #2
 800fa5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800fa5e:	2302      	movs	r3, #2
 800fa60:	e036      	b.n	800fad0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa68:	f003 0320 	and.w	r3, r3, #32
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d005      	beq.n	800fa7c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2220      	movs	r2, #32
 800fa76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800fa78:	2320      	movs	r3, #32
 800fa7a:	e029      	b.n	800fad0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a15      	ldr	r2, [pc, #84]	; (800fad8 <SD_FindSCR+0x19c>)
 800fa82:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	061a      	lsls	r2, r3, #24
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	021b      	lsls	r3, r3, #8
 800fa8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fa90:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	0a1b      	lsrs	r3, r3, #8
 800fa96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fa9a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	0e1b      	lsrs	r3, r3, #24
 800faa0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800faa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa4:	601a      	str	r2, [r3, #0]
    scr++;
 800faa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa8:	3304      	adds	r3, #4
 800faaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	061a      	lsls	r2, r3, #24
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	021b      	lsls	r3, r3, #8
 800fab4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fab8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	0a1b      	lsrs	r3, r3, #8
 800fabe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fac2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	0e1b      	lsrs	r3, r3, #24
 800fac8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800faca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800facc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800face:	2300      	movs	r3, #0
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	3738      	adds	r7, #56	; 0x38
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	18000f3a 	.word	0x18000f3a

0800fadc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b086      	sub	sp, #24
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fae8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faee:	2b1f      	cmp	r3, #31
 800faf0:	d936      	bls.n	800fb60 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800faf2:	2300      	movs	r3, #0
 800faf4:	617b      	str	r3, [r7, #20]
 800faf6:	e027      	b.n	800fb48 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4618      	mov	r0, r3
 800fafe:	f002 fbf3 	bl	80122e8 <SDMMC_ReadFIFO>
 800fb02:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	3301      	adds	r3, #1
 800fb10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	0a1b      	lsrs	r3, r3, #8
 800fb16:	b2da      	uxtb	r2, r3
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	0c1b      	lsrs	r3, r3, #16
 800fb26:	b2da      	uxtb	r2, r3
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	0e1b      	lsrs	r3, r3, #24
 800fb36:	b2da      	uxtb	r2, r3
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	3301      	adds	r3, #1
 800fb46:	617b      	str	r3, [r7, #20]
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	2b07      	cmp	r3, #7
 800fb4c:	d9d4      	bls.n	800faf8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	693a      	ldr	r2, [r7, #16]
 800fb52:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb58:	f1a3 0220 	sub.w	r2, r3, #32
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800fb60:	bf00      	nop
 800fb62:	3718      	adds	r7, #24
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b086      	sub	sp, #24
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6a1b      	ldr	r3, [r3, #32]
 800fb74:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb7a:	2b1f      	cmp	r3, #31
 800fb7c:	d93a      	bls.n	800fbf4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800fb7e:	2300      	movs	r3, #0
 800fb80:	617b      	str	r3, [r7, #20]
 800fb82:	e02b      	b.n	800fbdc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	021a      	lsls	r2, r3, #8
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	041a      	lsls	r2, r3, #16
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	061a      	lsls	r2, r3, #24
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	60fb      	str	r3, [r7, #12]
      tmp++;
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f107 020c 	add.w	r2, r7, #12
 800fbce:	4611      	mov	r1, r2
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f002 fb96 	bl	8012302 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	617b      	str	r3, [r7, #20]
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	2b07      	cmp	r3, #7
 800fbe0:	d9d0      	bls.n	800fb84 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	693a      	ldr	r2, [r7, #16]
 800fbe6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbec:	f1a3 0220 	sub.w	r2, r3, #32
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800fbf4:	bf00      	nop
 800fbf6:	3718      	adds	r7, #24
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800fc04:	bf00      	nop
 800fc06:	370c      	adds	r7, #12
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr

0800fc10 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800fc18:	bf00      	nop
 800fc1a:	370c      	adds	r7, #12
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800fc2c:	bf00      	nop
 800fc2e:	370c      	adds	r7, #12
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr

0800fc38 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800fc40:	bf00      	nop
 800fc42:	370c      	adds	r7, #12
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b084      	sub	sp, #16
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800fc54:	2300      	movs	r3, #0
 800fc56:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d101      	bne.n	800fc62 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e0e2      	b.n	800fe28 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2200      	movs	r2, #0
 800fc66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a70      	ldr	r2, [pc, #448]	; (800fe30 <HAL_SPI_Init+0x1e4>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d00f      	beq.n	800fc92 <HAL_SPI_Init+0x46>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4a6f      	ldr	r2, [pc, #444]	; (800fe34 <HAL_SPI_Init+0x1e8>)
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d00a      	beq.n	800fc92 <HAL_SPI_Init+0x46>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a6d      	ldr	r2, [pc, #436]	; (800fe38 <HAL_SPI_Init+0x1ec>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d005      	beq.n	800fc92 <HAL_SPI_Init+0x46>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	68db      	ldr	r3, [r3, #12]
 800fc8a:	2b0f      	cmp	r3, #15
 800fc8c:	d901      	bls.n	800fc92 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800fc8e:	2301      	movs	r3, #1
 800fc90:	e0ca      	b.n	800fe28 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f001 f870 	bl	8010d78 <SPI_GetPacketSize>
 800fc98:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	4a64      	ldr	r2, [pc, #400]	; (800fe30 <HAL_SPI_Init+0x1e4>)
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d00c      	beq.n	800fcbe <HAL_SPI_Init+0x72>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4a62      	ldr	r2, [pc, #392]	; (800fe34 <HAL_SPI_Init+0x1e8>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d007      	beq.n	800fcbe <HAL_SPI_Init+0x72>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4a61      	ldr	r2, [pc, #388]	; (800fe38 <HAL_SPI_Init+0x1ec>)
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	d002      	beq.n	800fcbe <HAL_SPI_Init+0x72>
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	2b08      	cmp	r3, #8
 800fcbc:	d811      	bhi.n	800fce2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fcc2:	4a5b      	ldr	r2, [pc, #364]	; (800fe30 <HAL_SPI_Init+0x1e4>)
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d009      	beq.n	800fcdc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a59      	ldr	r2, [pc, #356]	; (800fe34 <HAL_SPI_Init+0x1e8>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d004      	beq.n	800fcdc <HAL_SPI_Init+0x90>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a58      	ldr	r2, [pc, #352]	; (800fe38 <HAL_SPI_Init+0x1ec>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d104      	bne.n	800fce6 <HAL_SPI_Init+0x9a>
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	2b10      	cmp	r3, #16
 800fce0:	d901      	bls.n	800fce6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800fce2:	2301      	movs	r3, #1
 800fce4:	e0a0      	b.n	800fe28 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d106      	bne.n	800fd00 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f7f5 fa92 	bl	8005224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2202      	movs	r2, #2
 800fd04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f022 0201 	bic.w	r2, r2, #1
 800fd16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	699b      	ldr	r3, [r3, #24]
 800fd1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fd20:	d110      	bne.n	800fd44 <HAL_SPI_Init+0xf8>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	685b      	ldr	r3, [r3, #4]
 800fd26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fd2a:	d10b      	bne.n	800fd44 <HAL_SPI_Init+0xf8>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d107      	bne.n	800fd44 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	681a      	ldr	r2, [r3, #0]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fd42:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	69da      	ldr	r2, [r3, #28]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd4c:	431a      	orrs	r2, r3
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	431a      	orrs	r2, r3
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd56:	ea42 0103 	orr.w	r1, r2, r3
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	68da      	ldr	r2, [r3, #12]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	430a      	orrs	r2, r1
 800fd64:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd6e:	431a      	orrs	r2, r3
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd74:	431a      	orrs	r2, r3
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	699b      	ldr	r3, [r3, #24]
 800fd7a:	431a      	orrs	r2, r3
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	691b      	ldr	r3, [r3, #16]
 800fd80:	431a      	orrs	r2, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	695b      	ldr	r3, [r3, #20]
 800fd86:	431a      	orrs	r2, r3
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6a1b      	ldr	r3, [r3, #32]
 800fd8c:	431a      	orrs	r2, r3
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	431a      	orrs	r2, r3
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd98:	431a      	orrs	r2, r3
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	431a      	orrs	r2, r3
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fda4:	ea42 0103 	orr.w	r1, r2, r3
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	430a      	orrs	r2, r1
 800fdb2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d113      	bne.n	800fde4 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	689b      	ldr	r3, [r3, #8]
 800fdc2:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fdce:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	689b      	ldr	r3, [r3, #8]
 800fdd6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fde2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	f022 0201 	bic.w	r2, r2, #1
 800fdf2:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	685b      	ldr	r3, [r3, #4]
 800fdf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d00a      	beq.n	800fe16 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	68db      	ldr	r3, [r3, #12]
 800fe06:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	430a      	orrs	r2, r1
 800fe14:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2201      	movs	r2, #1
 800fe22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800fe26:	2300      	movs	r3, #0
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3710      	adds	r7, #16
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	40013000 	.word	0x40013000
 800fe34:	40003800 	.word	0x40003800
 800fe38:	40003c00 	.word	0x40003c00

0800fe3c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b08a      	sub	sp, #40	; 0x28
 800fe40:	af02      	add	r7, sp, #8
 800fe42:	60f8      	str	r0, [r7, #12]
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	603b      	str	r3, [r7, #0]
 800fe48:	4613      	mov	r3, r2
 800fe4a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	3320      	adds	r3, #32
 800fe52:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fe54:	2300      	movs	r3, #0
 800fe56:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fe5e:	2b01      	cmp	r3, #1
 800fe60:	d101      	bne.n	800fe66 <HAL_SPI_Transmit+0x2a>
 800fe62:	2302      	movs	r3, #2
 800fe64:	e1d7      	b.n	8010216 <HAL_SPI_Transmit+0x3da>
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2201      	movs	r2, #1
 800fe6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fe6e:	f7f5 fd07 	bl	8005880 <HAL_GetTick>
 800fe72:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fe7a:	b2db      	uxtb	r3, r3
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d007      	beq.n	800fe90 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800fe80:	2302      	movs	r3, #2
 800fe82:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2200      	movs	r2, #0
 800fe88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fe8c:	7efb      	ldrb	r3, [r7, #27]
 800fe8e:	e1c2      	b.n	8010216 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d002      	beq.n	800fe9c <HAL_SPI_Transmit+0x60>
 800fe96:	88fb      	ldrh	r3, [r7, #6]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d107      	bne.n	800feac <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2200      	movs	r2, #0
 800fea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fea8:	7efb      	ldrb	r3, [r7, #27]
 800feaa:	e1b4      	b.n	8010216 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2203      	movs	r2, #3
 800feb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	68ba      	ldr	r2, [r7, #8]
 800fec0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	88fa      	ldrh	r2, [r7, #6]
 800fec6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	88fa      	ldrh	r2, [r7, #6]
 800fece:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	2200      	movs	r2, #0
 800fed6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2200      	movs	r2, #0
 800fedc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2200      	movs	r2, #0
 800fee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2200      	movs	r2, #0
 800feec:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2200      	movs	r2, #0
 800fef2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	689b      	ldr	r3, [r3, #8]
 800fef8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fefc:	d107      	bne.n	800ff0e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	685a      	ldr	r2, [r3, #4]
 800ff14:	4b96      	ldr	r3, [pc, #600]	; (8010170 <HAL_SPI_Transmit+0x334>)
 800ff16:	4013      	ands	r3, r2
 800ff18:	88f9      	ldrh	r1, [r7, #6]
 800ff1a:	68fa      	ldr	r2, [r7, #12]
 800ff1c:	6812      	ldr	r2, [r2, #0]
 800ff1e:	430b      	orrs	r3, r1
 800ff20:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f042 0201 	orr.w	r2, r2, #1
 800ff30:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ff3a:	d107      	bne.n	800ff4c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	681a      	ldr	r2, [r3, #0]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ff4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	2b0f      	cmp	r3, #15
 800ff52:	d947      	bls.n	800ffe4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ff54:	e03f      	b.n	800ffd6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	695b      	ldr	r3, [r3, #20]
 800ff5c:	f003 0302 	and.w	r3, r3, #2
 800ff60:	2b02      	cmp	r3, #2
 800ff62:	d114      	bne.n	800ff8e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	6812      	ldr	r2, [r2, #0]
 800ff6e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff74:	1d1a      	adds	r2, r3, #4
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	3b01      	subs	r3, #1
 800ff84:	b29a      	uxth	r2, r3
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ff8c:	e023      	b.n	800ffd6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff8e:	f7f5 fc77 	bl	8005880 <HAL_GetTick>
 800ff92:	4602      	mov	r2, r0
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	1ad3      	subs	r3, r2, r3
 800ff98:	683a      	ldr	r2, [r7, #0]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d803      	bhi.n	800ffa6 <HAL_SPI_Transmit+0x16a>
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa4:	d102      	bne.n	800ffac <HAL_SPI_Transmit+0x170>
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d114      	bne.n	800ffd6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f000 fe15 	bl	8010bdc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2201      	movs	r2, #1
 800ffce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	e11f      	b.n	8010216 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d1b9      	bne.n	800ff56 <HAL_SPI_Transmit+0x11a>
 800ffe2:	e0f2      	b.n	80101ca <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	2b07      	cmp	r3, #7
 800ffea:	f240 80e7 	bls.w	80101bc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ffee:	e05d      	b.n	80100ac <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	695b      	ldr	r3, [r3, #20]
 800fff6:	f003 0302 	and.w	r3, r3, #2
 800fffa:	2b02      	cmp	r3, #2
 800fffc:	d132      	bne.n	8010064 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010004:	b29b      	uxth	r3, r3
 8010006:	2b01      	cmp	r3, #1
 8010008:	d918      	bls.n	801003c <HAL_SPI_Transmit+0x200>
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801000e:	2b00      	cmp	r3, #0
 8010010:	d014      	beq.n	801003c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	6812      	ldr	r2, [r2, #0]
 801001c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010022:	1d1a      	adds	r2, r3, #4
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801002e:	b29b      	uxth	r3, r3
 8010030:	3b02      	subs	r3, #2
 8010032:	b29a      	uxth	r2, r3
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801003a:	e037      	b.n	80100ac <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010040:	881a      	ldrh	r2, [r3, #0]
 8010042:	69fb      	ldr	r3, [r7, #28]
 8010044:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801004a:	1c9a      	adds	r2, r3, #2
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010056:	b29b      	uxth	r3, r3
 8010058:	3b01      	subs	r3, #1
 801005a:	b29a      	uxth	r2, r3
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010062:	e023      	b.n	80100ac <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010064:	f7f5 fc0c 	bl	8005880 <HAL_GetTick>
 8010068:	4602      	mov	r2, r0
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	1ad3      	subs	r3, r2, r3
 801006e:	683a      	ldr	r2, [r7, #0]
 8010070:	429a      	cmp	r2, r3
 8010072:	d803      	bhi.n	801007c <HAL_SPI_Transmit+0x240>
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	f1b3 3fff 	cmp.w	r3, #4294967295
 801007a:	d102      	bne.n	8010082 <HAL_SPI_Transmit+0x246>
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d114      	bne.n	80100ac <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f000 fdaa 	bl	8010bdc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2200      	movs	r2, #0
 801008c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010096:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2201      	movs	r2, #1
 80100a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80100a8:	2301      	movs	r3, #1
 80100aa:	e0b4      	b.n	8010216 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d19b      	bne.n	800fff0 <HAL_SPI_Transmit+0x1b4>
 80100b8:	e087      	b.n	80101ca <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	695b      	ldr	r3, [r3, #20]
 80100c0:	f003 0302 	and.w	r3, r3, #2
 80100c4:	2b02      	cmp	r3, #2
 80100c6:	d155      	bne.n	8010174 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	2b03      	cmp	r3, #3
 80100d2:	d918      	bls.n	8010106 <HAL_SPI_Transmit+0x2ca>
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100d8:	2b40      	cmp	r3, #64	; 0x40
 80100da:	d914      	bls.n	8010106 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	6812      	ldr	r2, [r2, #0]
 80100e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80100ec:	1d1a      	adds	r2, r3, #4
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	3b04      	subs	r3, #4
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010104:	e05a      	b.n	80101bc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801010c:	b29b      	uxth	r3, r3
 801010e:	2b01      	cmp	r3, #1
 8010110:	d917      	bls.n	8010142 <HAL_SPI_Transmit+0x306>
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010116:	2b00      	cmp	r3, #0
 8010118:	d013      	beq.n	8010142 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801011e:	881a      	ldrh	r2, [r3, #0]
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010128:	1c9a      	adds	r2, r3, #2
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010134:	b29b      	uxth	r3, r3
 8010136:	3b02      	subs	r3, #2
 8010138:	b29a      	uxth	r2, r3
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010140:	e03c      	b.n	80101bc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	3320      	adds	r3, #32
 801014c:	7812      	ldrb	r2, [r2, #0]
 801014e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010154:	1c5a      	adds	r2, r3, #1
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010160:	b29b      	uxth	r3, r3
 8010162:	3b01      	subs	r3, #1
 8010164:	b29a      	uxth	r2, r3
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801016c:	e026      	b.n	80101bc <HAL_SPI_Transmit+0x380>
 801016e:	bf00      	nop
 8010170:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010174:	f7f5 fb84 	bl	8005880 <HAL_GetTick>
 8010178:	4602      	mov	r2, r0
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	1ad3      	subs	r3, r2, r3
 801017e:	683a      	ldr	r2, [r7, #0]
 8010180:	429a      	cmp	r2, r3
 8010182:	d803      	bhi.n	801018c <HAL_SPI_Transmit+0x350>
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801018a:	d102      	bne.n	8010192 <HAL_SPI_Transmit+0x356>
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d114      	bne.n	80101bc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f000 fd22 	bl	8010bdc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2200      	movs	r2, #0
 801019c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	2201      	movs	r2, #1
 80101b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80101b8:	2301      	movs	r3, #1
 80101ba:	e02c      	b.n	8010216 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f47f af78 	bne.w	80100ba <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	9300      	str	r3, [sp, #0]
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	2200      	movs	r2, #0
 80101d2:	2108      	movs	r1, #8
 80101d4:	68f8      	ldr	r0, [r7, #12]
 80101d6:	f000 fda1 	bl	8010d1c <SPI_WaitOnFlagUntilTimeout>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d007      	beq.n	80101f0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101e6:	f043 0220 	orr.w	r2, r3, #32
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80101f0:	68f8      	ldr	r0, [r7, #12]
 80101f2:	f000 fcf3 	bl	8010bdc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2200      	movs	r2, #0
 80101fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2201      	movs	r2, #1
 8010202:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801020c:	2b00      	cmp	r3, #0
 801020e:	d001      	beq.n	8010214 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8010210:	2301      	movs	r3, #1
 8010212:	e000      	b.n	8010216 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8010214:	7efb      	ldrb	r3, [r7, #27]
}
 8010216:	4618      	mov	r0, r3
 8010218:	3720      	adds	r7, #32
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop

08010220 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b08a      	sub	sp, #40	; 0x28
 8010224:	af02      	add	r7, sp, #8
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	603b      	str	r3, [r7, #0]
 801022c:	4613      	mov	r3, r2
 801022e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010230:	2300      	movs	r3, #0
 8010232:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	3330      	adds	r3, #48	; 0x30
 801023a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010244:	d112      	bne.n	801026c <HAL_SPI_Receive+0x4c>
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	689b      	ldr	r3, [r3, #8]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d10e      	bne.n	801026c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2204      	movs	r2, #4
 8010252:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010256:	88fa      	ldrh	r2, [r7, #6]
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	9300      	str	r3, [sp, #0]
 801025c:	4613      	mov	r3, r2
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	68b9      	ldr	r1, [r7, #8]
 8010262:	68f8      	ldr	r0, [r7, #12]
 8010264:	f000 f9ce 	bl	8010604 <HAL_SPI_TransmitReceive>
 8010268:	4603      	mov	r3, r0
 801026a:	e1c7      	b.n	80105fc <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010272:	2b01      	cmp	r3, #1
 8010274:	d101      	bne.n	801027a <HAL_SPI_Receive+0x5a>
 8010276:	2302      	movs	r3, #2
 8010278:	e1c0      	b.n	80105fc <HAL_SPI_Receive+0x3dc>
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2201      	movs	r2, #1
 801027e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010282:	f7f5 fafd 	bl	8005880 <HAL_GetTick>
 8010286:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801028e:	b2db      	uxtb	r3, r3
 8010290:	2b01      	cmp	r3, #1
 8010292:	d007      	beq.n	80102a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8010294:	2302      	movs	r3, #2
 8010296:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	2200      	movs	r2, #0
 801029c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80102a0:	7ffb      	ldrb	r3, [r7, #31]
 80102a2:	e1ab      	b.n	80105fc <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d002      	beq.n	80102b0 <HAL_SPI_Receive+0x90>
 80102aa:	88fb      	ldrh	r3, [r7, #6]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d107      	bne.n	80102c0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80102b0:	2301      	movs	r3, #1
 80102b2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2200      	movs	r2, #0
 80102b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80102bc:	7ffb      	ldrb	r3, [r7, #31]
 80102be:	e19d      	b.n	80105fc <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	2204      	movs	r2, #4
 80102c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	2200      	movs	r2, #0
 80102cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	68ba      	ldr	r2, [r7, #8]
 80102d4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	88fa      	ldrh	r2, [r7, #6]
 80102da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	88fa      	ldrh	r2, [r7, #6]
 80102e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2200      	movs	r2, #0
 80102ea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2200      	movs	r2, #0
 80102f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2200      	movs	r2, #0
 80102f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2200      	movs	r2, #0
 8010300:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2200      	movs	r2, #0
 8010306:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	689b      	ldr	r3, [r3, #8]
 801030c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010310:	d107      	bne.n	8010322 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010320:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	685a      	ldr	r2, [r3, #4]
 8010328:	4b94      	ldr	r3, [pc, #592]	; (801057c <HAL_SPI_Receive+0x35c>)
 801032a:	4013      	ands	r3, r2
 801032c:	88f9      	ldrh	r1, [r7, #6]
 801032e:	68fa      	ldr	r2, [r7, #12]
 8010330:	6812      	ldr	r2, [r2, #0]
 8010332:	430b      	orrs	r3, r1
 8010334:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	681a      	ldr	r2, [r3, #0]
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	f042 0201 	orr.w	r2, r2, #1
 8010344:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801034e:	d107      	bne.n	8010360 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801035e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	68db      	ldr	r3, [r3, #12]
 8010364:	2b0f      	cmp	r3, #15
 8010366:	d948      	bls.n	80103fa <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010368:	e040      	b.n	80103ec <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	695a      	ldr	r2, [r3, #20]
 8010370:	f248 0308 	movw	r3, #32776	; 0x8008
 8010374:	4013      	ands	r3, r2
 8010376:	2b00      	cmp	r3, #0
 8010378:	d014      	beq.n	80103a4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	681a      	ldr	r2, [r3, #0]
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010382:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010384:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801038a:	1d1a      	adds	r2, r3, #4
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010396:	b29b      	uxth	r3, r3
 8010398:	3b01      	subs	r3, #1
 801039a:	b29a      	uxth	r2, r3
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80103a2:	e023      	b.n	80103ec <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80103a4:	f7f5 fa6c 	bl	8005880 <HAL_GetTick>
 80103a8:	4602      	mov	r2, r0
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	1ad3      	subs	r3, r2, r3
 80103ae:	683a      	ldr	r2, [r7, #0]
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d803      	bhi.n	80103bc <HAL_SPI_Receive+0x19c>
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ba:	d102      	bne.n	80103c2 <HAL_SPI_Receive+0x1a2>
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d114      	bne.n	80103ec <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80103c2:	68f8      	ldr	r0, [r7, #12]
 80103c4:	f000 fc0a 	bl	8010bdc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2200      	movs	r2, #0
 80103cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	2201      	movs	r2, #1
 80103e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80103e8:	2301      	movs	r3, #1
 80103ea:	e107      	b.n	80105fc <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d1b8      	bne.n	801036a <HAL_SPI_Receive+0x14a>
 80103f8:	e0ed      	b.n	80105d6 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	68db      	ldr	r3, [r3, #12]
 80103fe:	2b07      	cmp	r3, #7
 8010400:	f240 80e2 	bls.w	80105c8 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010404:	e05b      	b.n	80104be <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	695b      	ldr	r3, [r3, #20]
 801040c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010410:	2b00      	cmp	r3, #0
 8010412:	d030      	beq.n	8010476 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	695b      	ldr	r3, [r3, #20]
 801041a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801041e:	2b00      	cmp	r3, #0
 8010420:	d014      	beq.n	801044c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801042a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801042c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010432:	1d1a      	adds	r2, r3, #4
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801043e:	b29b      	uxth	r3, r3
 8010440:	3b02      	subs	r3, #2
 8010442:	b29a      	uxth	r2, r3
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801044a:	e038      	b.n	80104be <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010450:	69ba      	ldr	r2, [r7, #24]
 8010452:	8812      	ldrh	r2, [r2, #0]
 8010454:	b292      	uxth	r2, r2
 8010456:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801045c:	1c9a      	adds	r2, r3, #2
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010468:	b29b      	uxth	r3, r3
 801046a:	3b01      	subs	r3, #1
 801046c:	b29a      	uxth	r2, r3
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010474:	e023      	b.n	80104be <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010476:	f7f5 fa03 	bl	8005880 <HAL_GetTick>
 801047a:	4602      	mov	r2, r0
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	1ad3      	subs	r3, r2, r3
 8010480:	683a      	ldr	r2, [r7, #0]
 8010482:	429a      	cmp	r2, r3
 8010484:	d803      	bhi.n	801048e <HAL_SPI_Receive+0x26e>
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	f1b3 3fff 	cmp.w	r3, #4294967295
 801048c:	d102      	bne.n	8010494 <HAL_SPI_Receive+0x274>
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d114      	bne.n	80104be <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010494:	68f8      	ldr	r0, [r7, #12]
 8010496:	f000 fba1 	bl	8010bdc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2200      	movs	r2, #0
 801049e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80104a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	2201      	movs	r2, #1
 80104b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80104ba:	2301      	movs	r3, #1
 80104bc:	e09e      	b.n	80105fc <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d19d      	bne.n	8010406 <HAL_SPI_Receive+0x1e6>
 80104ca:	e084      	b.n	80105d6 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	695b      	ldr	r3, [r3, #20]
 80104d2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d052      	beq.n	8010580 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	695b      	ldr	r3, [r3, #20]
 80104e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d014      	beq.n	8010512 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681a      	ldr	r2, [r3, #0]
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80104f2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104f8:	1d1a      	adds	r2, r3, #4
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010504:	b29b      	uxth	r3, r3
 8010506:	3b04      	subs	r3, #4
 8010508:	b29a      	uxth	r2, r3
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010510:	e05a      	b.n	80105c8 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	695b      	ldr	r3, [r3, #20]
 8010518:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 801051c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010520:	d914      	bls.n	801054c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010526:	69ba      	ldr	r2, [r7, #24]
 8010528:	8812      	ldrh	r2, [r2, #0]
 801052a:	b292      	uxth	r2, r2
 801052c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010532:	1c9a      	adds	r2, r3, #2
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801053e:	b29b      	uxth	r3, r3
 8010540:	3b02      	subs	r3, #2
 8010542:	b29a      	uxth	r2, r3
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801054a:	e03d      	b.n	80105c8 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010558:	7812      	ldrb	r2, [r2, #0]
 801055a:	b2d2      	uxtb	r2, r2
 801055c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010562:	1c5a      	adds	r2, r3, #1
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801056e:	b29b      	uxth	r3, r3
 8010570:	3b01      	subs	r3, #1
 8010572:	b29a      	uxth	r2, r3
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801057a:	e025      	b.n	80105c8 <HAL_SPI_Receive+0x3a8>
 801057c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010580:	f7f5 f97e 	bl	8005880 <HAL_GetTick>
 8010584:	4602      	mov	r2, r0
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	1ad3      	subs	r3, r2, r3
 801058a:	683a      	ldr	r2, [r7, #0]
 801058c:	429a      	cmp	r2, r3
 801058e:	d803      	bhi.n	8010598 <HAL_SPI_Receive+0x378>
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010596:	d102      	bne.n	801059e <HAL_SPI_Receive+0x37e>
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d114      	bne.n	80105c8 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801059e:	68f8      	ldr	r0, [r7, #12]
 80105a0:	f000 fb1c 	bl	8010bdc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	2200      	movs	r2, #0
 80105a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80105b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	2201      	movs	r2, #1
 80105c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80105c4:	2301      	movs	r3, #1
 80105c6:	e019      	b.n	80105fc <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	f47f af7b 	bne.w	80104cc <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80105d6:	68f8      	ldr	r0, [r7, #12]
 80105d8:	f000 fb00 	bl	8010bdc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	2200      	movs	r2, #0
 80105e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2201      	movs	r2, #1
 80105e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d001      	beq.n	80105fa <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 80105f6:	2301      	movs	r3, #1
 80105f8:	e000      	b.n	80105fc <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 80105fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3720      	adds	r7, #32
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b08e      	sub	sp, #56	; 0x38
 8010608:	af02      	add	r7, sp, #8
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	60b9      	str	r1, [r7, #8]
 801060e:	607a      	str	r2, [r7, #4]
 8010610:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010612:	2300      	movs	r3, #0
 8010614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	3320      	adds	r3, #32
 801061e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	3330      	adds	r3, #48	; 0x30
 8010626:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801062e:	2b01      	cmp	r3, #1
 8010630:	d101      	bne.n	8010636 <HAL_SPI_TransmitReceive+0x32>
 8010632:	2302      	movs	r3, #2
 8010634:	e2ce      	b.n	8010bd4 <HAL_SPI_TransmitReceive+0x5d0>
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	2201      	movs	r2, #1
 801063a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801063e:	f7f5 f91f 	bl	8005880 <HAL_GetTick>
 8010642:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8010644:	887b      	ldrh	r3, [r7, #2]
 8010646:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8010648:	887b      	ldrh	r3, [r7, #2]
 801064a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010652:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801065a:	7efb      	ldrb	r3, [r7, #27]
 801065c:	2b01      	cmp	r3, #1
 801065e:	d014      	beq.n	801068a <HAL_SPI_TransmitReceive+0x86>
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010666:	d106      	bne.n	8010676 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	689b      	ldr	r3, [r3, #8]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d102      	bne.n	8010676 <HAL_SPI_TransmitReceive+0x72>
 8010670:	7efb      	ldrb	r3, [r7, #27]
 8010672:	2b04      	cmp	r3, #4
 8010674:	d009      	beq.n	801068a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8010676:	2302      	movs	r3, #2
 8010678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2200      	movs	r2, #0
 8010680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010688:	e2a4      	b.n	8010bd4 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d005      	beq.n	801069c <HAL_SPI_TransmitReceive+0x98>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d002      	beq.n	801069c <HAL_SPI_TransmitReceive+0x98>
 8010696:	887b      	ldrh	r3, [r7, #2]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d109      	bne.n	80106b0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 801069c:	2301      	movs	r3, #1
 801069e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	2200      	movs	r2, #0
 80106a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80106aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80106ae:	e291      	b.n	8010bd4 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	2b04      	cmp	r3, #4
 80106ba:	d003      	beq.n	80106c4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2205      	movs	r2, #5
 80106c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2200      	movs	r2, #0
 80106c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	687a      	ldr	r2, [r7, #4]
 80106d0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	887a      	ldrh	r2, [r7, #2]
 80106d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	887a      	ldrh	r2, [r7, #2]
 80106de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	68ba      	ldr	r2, [r7, #8]
 80106e6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	887a      	ldrh	r2, [r7, #2]
 80106ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	887a      	ldrh	r2, [r7, #2]
 80106f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2200      	movs	r2, #0
 80106fc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2200      	movs	r2, #0
 8010702:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	685a      	ldr	r2, [r3, #4]
 801070a:	4b9f      	ldr	r3, [pc, #636]	; (8010988 <HAL_SPI_TransmitReceive+0x384>)
 801070c:	4013      	ands	r3, r2
 801070e:	8879      	ldrh	r1, [r7, #2]
 8010710:	68fa      	ldr	r2, [r7, #12]
 8010712:	6812      	ldr	r2, [r2, #0]
 8010714:	430b      	orrs	r3, r1
 8010716:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f042 0201 	orr.w	r2, r2, #1
 8010726:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010730:	d107      	bne.n	8010742 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	681a      	ldr	r2, [r3, #0]
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010740:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	2b0f      	cmp	r3, #15
 8010748:	d970      	bls.n	801082c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801074a:	e068      	b.n	801081e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	695b      	ldr	r3, [r3, #20]
 8010752:	f003 0302 	and.w	r3, r3, #2
 8010756:	2b02      	cmp	r3, #2
 8010758:	d11a      	bne.n	8010790 <HAL_SPI_TransmitReceive+0x18c>
 801075a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801075c:	2b00      	cmp	r3, #0
 801075e:	d017      	beq.n	8010790 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	6812      	ldr	r2, [r2, #0]
 801076a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010770:	1d1a      	adds	r2, r3, #4
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801077c:	b29b      	uxth	r3, r3
 801077e:	3b01      	subs	r3, #1
 8010780:	b29a      	uxth	r2, r3
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801078e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	695a      	ldr	r2, [r3, #20]
 8010796:	f248 0308 	movw	r3, #32776	; 0x8008
 801079a:	4013      	ands	r3, r2
 801079c:	2b00      	cmp	r3, #0
 801079e:	d01a      	beq.n	80107d6 <HAL_SPI_TransmitReceive+0x1d2>
 80107a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d017      	beq.n	80107d6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681a      	ldr	r2, [r3, #0]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80107b0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107b6:	1d1a      	adds	r2, r3, #4
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80107c2:	b29b      	uxth	r3, r3
 80107c4:	3b01      	subs	r3, #1
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80107d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80107d6:	f7f5 f853 	bl	8005880 <HAL_GetTick>
 80107da:	4602      	mov	r2, r0
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	1ad3      	subs	r3, r2, r3
 80107e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d803      	bhi.n	80107ee <HAL_SPI_TransmitReceive+0x1ea>
 80107e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ec:	d102      	bne.n	80107f4 <HAL_SPI_TransmitReceive+0x1f0>
 80107ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d114      	bne.n	801081e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80107f4:	68f8      	ldr	r0, [r7, #12]
 80107f6:	f000 f9f1 	bl	8010bdc <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2200      	movs	r2, #0
 80107fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010808:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	2201      	movs	r2, #1
 8010816:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 801081a:	2301      	movs	r3, #1
 801081c:	e1da      	b.n	8010bd4 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801081e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010820:	2b00      	cmp	r3, #0
 8010822:	d193      	bne.n	801074c <HAL_SPI_TransmitReceive+0x148>
 8010824:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010826:	2b00      	cmp	r3, #0
 8010828:	d190      	bne.n	801074c <HAL_SPI_TransmitReceive+0x148>
 801082a:	e1ac      	b.n	8010b86 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	2b07      	cmp	r3, #7
 8010832:	f240 81a0 	bls.w	8010b76 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010836:	e0a9      	b.n	801098c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	695b      	ldr	r3, [r3, #20]
 801083e:	f003 0302 	and.w	r3, r3, #2
 8010842:	2b02      	cmp	r3, #2
 8010844:	d139      	bne.n	80108ba <HAL_SPI_TransmitReceive+0x2b6>
 8010846:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010848:	2b00      	cmp	r3, #0
 801084a:	d036      	beq.n	80108ba <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801084c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801084e:	2b01      	cmp	r3, #1
 8010850:	d91c      	bls.n	801088c <HAL_SPI_TransmitReceive+0x288>
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010856:	2b00      	cmp	r3, #0
 8010858:	d018      	beq.n	801088c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	6812      	ldr	r2, [r2, #0]
 8010864:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801086a:	1d1a      	adds	r2, r3, #4
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010876:	b29b      	uxth	r3, r3
 8010878:	3b02      	subs	r3, #2
 801087a:	b29a      	uxth	r2, r3
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010888:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801088a:	e016      	b.n	80108ba <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010890:	881a      	ldrh	r2, [r3, #0]
 8010892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010894:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801089a:	1c9a      	adds	r2, r3, #2
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80108a6:	b29b      	uxth	r3, r3
 80108a8:	3b01      	subs	r3, #1
 80108aa:	b29a      	uxth	r2, r3
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80108b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	695b      	ldr	r3, [r3, #20]
 80108c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d03a      	beq.n	801093e <HAL_SPI_TransmitReceive+0x33a>
 80108c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d037      	beq.n	801093e <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	695b      	ldr	r3, [r3, #20]
 80108d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d018      	beq.n	801090e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80108e6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108ec:	1d1a      	adds	r2, r3, #4
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80108f8:	b29b      	uxth	r3, r3
 80108fa:	3b02      	subs	r3, #2
 80108fc:	b29a      	uxth	r2, r3
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801090a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801090c:	e017      	b.n	801093e <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010912:	6a3a      	ldr	r2, [r7, #32]
 8010914:	8812      	ldrh	r2, [r2, #0]
 8010916:	b292      	uxth	r2, r2
 8010918:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801091e:	1c9a      	adds	r2, r3, #2
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801092a:	b29b      	uxth	r3, r3
 801092c:	3b01      	subs	r3, #1
 801092e:	b29a      	uxth	r2, r3
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801093c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801093e:	f7f4 ff9f 	bl	8005880 <HAL_GetTick>
 8010942:	4602      	mov	r2, r0
 8010944:	69fb      	ldr	r3, [r7, #28]
 8010946:	1ad3      	subs	r3, r2, r3
 8010948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801094a:	429a      	cmp	r2, r3
 801094c:	d803      	bhi.n	8010956 <HAL_SPI_TransmitReceive+0x352>
 801094e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010954:	d102      	bne.n	801095c <HAL_SPI_TransmitReceive+0x358>
 8010956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010958:	2b00      	cmp	r3, #0
 801095a:	d117      	bne.n	801098c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 801095c:	68f8      	ldr	r0, [r7, #12]
 801095e:	f000 f93d 	bl	8010bdc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	2200      	movs	r2, #0
 8010966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010970:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2201      	movs	r2, #1
 801097e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8010982:	2301      	movs	r3, #1
 8010984:	e126      	b.n	8010bd4 <HAL_SPI_TransmitReceive+0x5d0>
 8010986:	bf00      	nop
 8010988:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801098c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801098e:	2b00      	cmp	r3, #0
 8010990:	f47f af52 	bne.w	8010838 <HAL_SPI_TransmitReceive+0x234>
 8010994:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010996:	2b00      	cmp	r3, #0
 8010998:	f47f af4e 	bne.w	8010838 <HAL_SPI_TransmitReceive+0x234>
 801099c:	e0f3      	b.n	8010b86 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	695b      	ldr	r3, [r3, #20]
 80109a4:	f003 0302 	and.w	r3, r3, #2
 80109a8:	2b02      	cmp	r3, #2
 80109aa:	d15a      	bne.n	8010a62 <HAL_SPI_TransmitReceive+0x45e>
 80109ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d057      	beq.n	8010a62 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80109b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80109b4:	2b03      	cmp	r3, #3
 80109b6:	d91c      	bls.n	80109f2 <HAL_SPI_TransmitReceive+0x3ee>
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109bc:	2b40      	cmp	r3, #64	; 0x40
 80109be:	d918      	bls.n	80109f2 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	6812      	ldr	r2, [r2, #0]
 80109ca:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109d0:	1d1a      	adds	r2, r3, #4
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109dc:	b29b      	uxth	r3, r3
 80109de:	3b04      	subs	r3, #4
 80109e0:	b29a      	uxth	r2, r3
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80109f0:	e037      	b.n	8010a62 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80109f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d91b      	bls.n	8010a30 <HAL_SPI_TransmitReceive+0x42c>
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d017      	beq.n	8010a30 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a04:	881a      	ldrh	r2, [r3, #0]
 8010a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a08:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a0e:	1c9a      	adds	r2, r3, #2
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	3b02      	subs	r3, #2
 8010a1e:	b29a      	uxth	r2, r3
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010a2e:	e018      	b.n	8010a62 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	3320      	adds	r3, #32
 8010a3a:	7812      	ldrb	r2, [r2, #0]
 8010a3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a42:	1c5a      	adds	r2, r3, #1
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	3b01      	subs	r3, #1
 8010a52:	b29a      	uxth	r2, r3
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a60:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	695b      	ldr	r3, [r3, #20]
 8010a68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d05e      	beq.n	8010b2e <HAL_SPI_TransmitReceive+0x52a>
 8010a70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d05b      	beq.n	8010b2e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	695b      	ldr	r3, [r3, #20]
 8010a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d018      	beq.n	8010ab6 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010a8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010a8e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010a94:	1d1a      	adds	r2, r3, #4
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	3b04      	subs	r3, #4
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010ab2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010ab4:	e03b      	b.n	8010b2e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	695b      	ldr	r3, [r3, #20]
 8010abc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8010ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010ac4:	d918      	bls.n	8010af8 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010aca:	6a3a      	ldr	r2, [r7, #32]
 8010acc:	8812      	ldrh	r2, [r2, #0]
 8010ace:	b292      	uxth	r2, r2
 8010ad0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ad6:	1c9a      	adds	r2, r3, #2
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	3b02      	subs	r3, #2
 8010ae6:	b29a      	uxth	r2, r3
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010af4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010af6:	e01a      	b.n	8010b2e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b04:	7812      	ldrb	r2, [r2, #0]
 8010b06:	b2d2      	uxtb	r2, r2
 8010b08:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b0e:	1c5a      	adds	r2, r3, #1
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	3b01      	subs	r3, #1
 8010b1e:	b29a      	uxth	r2, r3
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010b2c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010b2e:	f7f4 fea7 	bl	8005880 <HAL_GetTick>
 8010b32:	4602      	mov	r2, r0
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	1ad3      	subs	r3, r2, r3
 8010b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d803      	bhi.n	8010b46 <HAL_SPI_TransmitReceive+0x542>
 8010b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b44:	d102      	bne.n	8010b4c <HAL_SPI_TransmitReceive+0x548>
 8010b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d114      	bne.n	8010b76 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010b4c:	68f8      	ldr	r0, [r7, #12]
 8010b4e:	f000 f845 	bl	8010bdc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2200      	movs	r2, #0
 8010b56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	2201      	movs	r2, #1
 8010b6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8010b72:	2301      	movs	r3, #1
 8010b74:	e02e      	b.n	8010bd4 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010b76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	f47f af10 	bne.w	801099e <HAL_SPI_TransmitReceive+0x39a>
 8010b7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	f47f af0c 	bne.w	801099e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8010b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b88:	9300      	str	r3, [sp, #0]
 8010b8a:	69fb      	ldr	r3, [r7, #28]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	2108      	movs	r1, #8
 8010b90:	68f8      	ldr	r0, [r7, #12]
 8010b92:	f000 f8c3 	bl	8010d1c <SPI_WaitOnFlagUntilTimeout>
 8010b96:	4603      	mov	r3, r0
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d007      	beq.n	8010bac <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ba2:	f043 0220 	orr.w	r2, r3, #32
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010bac:	68f8      	ldr	r0, [r7, #12]
 8010bae:	f000 f815 	bl	8010bdc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2201      	movs	r2, #1
 8010bbe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d001      	beq.n	8010bd0 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8010bcc:	2301      	movs	r3, #1
 8010bce:	e001      	b.n	8010bd4 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8010bd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3730      	adds	r7, #48	; 0x30
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010bdc:	b480      	push	{r7}
 8010bde:	b085      	sub	sp, #20
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	695b      	ldr	r3, [r3, #20]
 8010bea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	699a      	ldr	r2, [r3, #24]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	f042 0208 	orr.w	r2, r2, #8
 8010bfa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	699a      	ldr	r2, [r3, #24]
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	f042 0210 	orr.w	r2, r2, #16
 8010c0a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	681a      	ldr	r2, [r3, #0]
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	f022 0201 	bic.w	r2, r2, #1
 8010c1a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	6919      	ldr	r1, [r3, #16]
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681a      	ldr	r2, [r3, #0]
 8010c26:	4b3c      	ldr	r3, [pc, #240]	; (8010d18 <SPI_CloseTransfer+0x13c>)
 8010c28:	400b      	ands	r3, r1
 8010c2a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	689a      	ldr	r2, [r3, #8]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010c3a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010c42:	b2db      	uxtb	r3, r3
 8010c44:	2b04      	cmp	r3, #4
 8010c46:	d014      	beq.n	8010c72 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f003 0320 	and.w	r3, r3, #32
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d00f      	beq.n	8010c72 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	699a      	ldr	r2, [r3, #24]
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	f042 0220 	orr.w	r2, r2, #32
 8010c70:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	2b03      	cmp	r3, #3
 8010c7c:	d014      	beq.n	8010ca8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d00f      	beq.n	8010ca8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c8e:	f043 0204 	orr.w	r2, r3, #4
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	699a      	ldr	r2, [r3, #24]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010ca6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d00f      	beq.n	8010cd2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cb8:	f043 0201 	orr.w	r2, r3, #1
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	699a      	ldr	r2, [r3, #24]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010cd0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d00f      	beq.n	8010cfc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ce2:	f043 0208 	orr.w	r2, r3, #8
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	699a      	ldr	r2, [r3, #24]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010cfa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2200      	movs	r2, #0
 8010d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010d0c:	bf00      	nop
 8010d0e:	3714      	adds	r7, #20
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr
 8010d18:	fffffc90 	.word	0xfffffc90

08010d1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	60f8      	str	r0, [r7, #12]
 8010d24:	60b9      	str	r1, [r7, #8]
 8010d26:	603b      	str	r3, [r7, #0]
 8010d28:	4613      	mov	r3, r2
 8010d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010d2c:	e010      	b.n	8010d50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010d2e:	f7f4 fda7 	bl	8005880 <HAL_GetTick>
 8010d32:	4602      	mov	r2, r0
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	1ad3      	subs	r3, r2, r3
 8010d38:	69ba      	ldr	r2, [r7, #24]
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d803      	bhi.n	8010d46 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010d3e:	69bb      	ldr	r3, [r7, #24]
 8010d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d44:	d102      	bne.n	8010d4c <SPI_WaitOnFlagUntilTimeout+0x30>
 8010d46:	69bb      	ldr	r3, [r7, #24]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d101      	bne.n	8010d50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010d4c:	2303      	movs	r3, #3
 8010d4e:	e00f      	b.n	8010d70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	695a      	ldr	r2, [r3, #20]
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	4013      	ands	r3, r2
 8010d5a:	68ba      	ldr	r2, [r7, #8]
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	bf0c      	ite	eq
 8010d60:	2301      	moveq	r3, #1
 8010d62:	2300      	movne	r3, #0
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	461a      	mov	r2, r3
 8010d68:	79fb      	ldrb	r3, [r7, #7]
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d0df      	beq.n	8010d2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010d6e:	2300      	movs	r3, #0
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	3710      	adds	r7, #16
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b085      	sub	sp, #20
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d84:	095b      	lsrs	r3, r3, #5
 8010d86:	3301      	adds	r3, #1
 8010d88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	68db      	ldr	r3, [r3, #12]
 8010d8e:	3301      	adds	r3, #1
 8010d90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	3307      	adds	r3, #7
 8010d96:	08db      	lsrs	r3, r3, #3
 8010d98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	68fa      	ldr	r2, [r7, #12]
 8010d9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3714      	adds	r7, #20
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr

08010dae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010dae:	b580      	push	{r7, lr}
 8010db0:	b082      	sub	sp, #8
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d101      	bne.n	8010dc0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	e042      	b.n	8010e46 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d106      	bne.n	8010dd8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f7f4 fa70 	bl	80052b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2224      	movs	r2, #36	; 0x24
 8010ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	681a      	ldr	r2, [r3, #0]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	f022 0201 	bic.w	r2, r2, #1
 8010dee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 f955 	bl	80110a0 <UART_SetConfig>
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b01      	cmp	r3, #1
 8010dfa:	d101      	bne.n	8010e00 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	e022      	b.n	8010e46 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d002      	beq.n	8010e0e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f000 fef9 	bl	8011c00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	685a      	ldr	r2, [r3, #4]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010e1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	689a      	ldr	r2, [r3, #8]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010e2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	681a      	ldr	r2, [r3, #0]
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	f042 0201 	orr.w	r2, r2, #1
 8010e3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f000 ff80 	bl	8011d44 <UART_CheckIdleState>
 8010e44:	4603      	mov	r3, r0
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3708      	adds	r7, #8
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}

08010e4e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010e4e:	b580      	push	{r7, lr}
 8010e50:	b08a      	sub	sp, #40	; 0x28
 8010e52:	af02      	add	r7, sp, #8
 8010e54:	60f8      	str	r0, [r7, #12]
 8010e56:	60b9      	str	r1, [r7, #8]
 8010e58:	603b      	str	r3, [r7, #0]
 8010e5a:	4613      	mov	r3, r2
 8010e5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e64:	2b20      	cmp	r3, #32
 8010e66:	f040 8083 	bne.w	8010f70 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d002      	beq.n	8010e76 <HAL_UART_Transmit+0x28>
 8010e70:	88fb      	ldrh	r3, [r7, #6]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d101      	bne.n	8010e7a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8010e76:	2301      	movs	r3, #1
 8010e78:	e07b      	b.n	8010f72 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010e80:	2b01      	cmp	r3, #1
 8010e82:	d101      	bne.n	8010e88 <HAL_UART_Transmit+0x3a>
 8010e84:	2302      	movs	r3, #2
 8010e86:	e074      	b.n	8010f72 <HAL_UART_Transmit+0x124>
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	2201      	movs	r2, #1
 8010e8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2200      	movs	r2, #0
 8010e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	2221      	movs	r2, #33	; 0x21
 8010e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8010ea0:	f7f4 fcee 	bl	8005880 <HAL_GetTick>
 8010ea4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	88fa      	ldrh	r2, [r7, #6]
 8010eaa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	88fa      	ldrh	r2, [r7, #6]
 8010eb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	689b      	ldr	r3, [r3, #8]
 8010eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ebe:	d108      	bne.n	8010ed2 <HAL_UART_Transmit+0x84>
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	691b      	ldr	r3, [r3, #16]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d104      	bne.n	8010ed2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	61bb      	str	r3, [r7, #24]
 8010ed0:	e003      	b.n	8010eda <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2200      	movs	r2, #0
 8010ede:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8010ee2:	e02c      	b.n	8010f3e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	2200      	movs	r2, #0
 8010eec:	2180      	movs	r1, #128	; 0x80
 8010eee:	68f8      	ldr	r0, [r7, #12]
 8010ef0:	f000 ff70 	bl	8011dd4 <UART_WaitOnFlagUntilTimeout>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d001      	beq.n	8010efe <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8010efa:	2303      	movs	r3, #3
 8010efc:	e039      	b.n	8010f72 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d10b      	bne.n	8010f1c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010f04:	69bb      	ldr	r3, [r7, #24]
 8010f06:	881b      	ldrh	r3, [r3, #0]
 8010f08:	461a      	mov	r2, r3
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010f12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	3302      	adds	r3, #2
 8010f18:	61bb      	str	r3, [r7, #24]
 8010f1a:	e007      	b.n	8010f2c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	781a      	ldrb	r2, [r3, #0]
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010f26:	69fb      	ldr	r3, [r7, #28]
 8010f28:	3301      	adds	r3, #1
 8010f2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	3b01      	subs	r3, #1
 8010f36:	b29a      	uxth	r2, r3
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010f44:	b29b      	uxth	r3, r3
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d1cc      	bne.n	8010ee4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	9300      	str	r3, [sp, #0]
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	2200      	movs	r2, #0
 8010f52:	2140      	movs	r1, #64	; 0x40
 8010f54:	68f8      	ldr	r0, [r7, #12]
 8010f56:	f000 ff3d 	bl	8011dd4 <UART_WaitOnFlagUntilTimeout>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d001      	beq.n	8010f64 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8010f60:	2303      	movs	r3, #3
 8010f62:	e006      	b.n	8010f72 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2220      	movs	r2, #32
 8010f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	e000      	b.n	8010f72 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8010f70:	2302      	movs	r3, #2
  }
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3720      	adds	r7, #32
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}
	...

08010f7c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b084      	sub	sp, #16
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	4613      	mov	r3, r2
 8010f88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f90:	2b20      	cmp	r3, #32
 8010f92:	d170      	bne.n	8011076 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d002      	beq.n	8010fa0 <HAL_UART_Receive_DMA+0x24>
 8010f9a:	88fb      	ldrh	r3, [r7, #6]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d101      	bne.n	8010fa4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	e069      	b.n	8011078 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d101      	bne.n	8010fb2 <HAL_UART_Receive_DMA+0x36>
 8010fae:	2302      	movs	r3, #2
 8010fb0:	e062      	b.n	8011078 <HAL_UART_Receive_DMA+0xfc>
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	68ba      	ldr	r2, [r7, #8]
 8010fbe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	88fa      	ldrh	r2, [r7, #6]
 8010fc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	2222      	movs	r2, #34	; 0x22
 8010fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d02c      	beq.n	801103a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fe4:	4a26      	ldr	r2, [pc, #152]	; (8011080 <HAL_UART_Receive_DMA+0x104>)
 8010fe6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fec:	4a25      	ldr	r2, [pc, #148]	; (8011084 <HAL_UART_Receive_DMA+0x108>)
 8010fee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ff4:	4a24      	ldr	r2, [pc, #144]	; (8011088 <HAL_UART_Receive_DMA+0x10c>)
 8010ff6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	3324      	adds	r3, #36	; 0x24
 801100a:	4619      	mov	r1, r3
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011010:	461a      	mov	r2, r3
 8011012:	88fb      	ldrh	r3, [r7, #6]
 8011014:	f7f5 f8da 	bl	80061cc <HAL_DMA_Start_IT>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d00d      	beq.n	801103a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	2210      	movs	r2, #16
 8011022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	2200      	movs	r2, #0
 801102a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	2220      	movs	r2, #32
 8011032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8011036:	2301      	movs	r3, #1
 8011038:	e01e      	b.n	8011078 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2200      	movs	r2, #0
 801103e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011050:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	689a      	ldr	r2, [r3, #8]
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	f042 0201 	orr.w	r2, r2, #1
 8011060:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	689a      	ldr	r2, [r3, #8]
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011070:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8011072:	2300      	movs	r3, #0
 8011074:	e000      	b.n	8011078 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8011076:	2302      	movs	r3, #2
  }
}
 8011078:	4618      	mov	r0, r3
 801107a:	3710      	adds	r7, #16
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	08011f59 	.word	0x08011f59
 8011084:	08011fbf 	.word	0x08011fbf
 8011088:	08011fdb 	.word	0x08011fdb

0801108c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801108c:	b480      	push	{r7}
 801108e:	b083      	sub	sp, #12
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011094:	bf00      	nop
 8011096:	370c      	adds	r7, #12
 8011098:	46bd      	mov	sp, r7
 801109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109e:	4770      	bx	lr

080110a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80110a0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80110a4:	b08e      	sub	sp, #56	; 0x38
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80110aa:	2300      	movs	r3, #0
 80110ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	689a      	ldr	r2, [r3, #8]
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	691b      	ldr	r3, [r3, #16]
 80110b8:	431a      	orrs	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	695b      	ldr	r3, [r3, #20]
 80110be:	431a      	orrs	r2, r3
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	69db      	ldr	r3, [r3, #28]
 80110c4:	4313      	orrs	r3, r2
 80110c6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80110cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110ce:	4313      	orrs	r3, r2
 80110d0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	681a      	ldr	r2, [r3, #0]
 80110d8:	4bc1      	ldr	r3, [pc, #772]	; (80113e0 <UART_SetConfig+0x340>)
 80110da:	4013      	ands	r3, r2
 80110dc:	687a      	ldr	r2, [r7, #4]
 80110de:	6812      	ldr	r2, [r2, #0]
 80110e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80110e2:	430b      	orrs	r3, r1
 80110e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	68da      	ldr	r2, [r3, #12]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	430a      	orrs	r2, r1
 80110fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	699b      	ldr	r3, [r3, #24]
 8011100:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	4ab7      	ldr	r2, [pc, #732]	; (80113e4 <UART_SetConfig+0x344>)
 8011108:	4293      	cmp	r3, r2
 801110a:	d004      	beq.n	8011116 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6a1b      	ldr	r3, [r3, #32]
 8011110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011112:	4313      	orrs	r3, r2
 8011114:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	689a      	ldr	r2, [r3, #8]
 801111c:	4bb2      	ldr	r3, [pc, #712]	; (80113e8 <UART_SetConfig+0x348>)
 801111e:	4013      	ands	r3, r2
 8011120:	687a      	ldr	r2, [r7, #4]
 8011122:	6812      	ldr	r2, [r2, #0]
 8011124:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011126:	430b      	orrs	r3, r1
 8011128:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011130:	f023 010f 	bic.w	r1, r3, #15
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	430a      	orrs	r2, r1
 801113e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	4aa9      	ldr	r2, [pc, #676]	; (80113ec <UART_SetConfig+0x34c>)
 8011146:	4293      	cmp	r3, r2
 8011148:	d177      	bne.n	801123a <UART_SetConfig+0x19a>
 801114a:	4ba9      	ldr	r3, [pc, #676]	; (80113f0 <UART_SetConfig+0x350>)
 801114c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801114e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011152:	2b28      	cmp	r3, #40	; 0x28
 8011154:	d86c      	bhi.n	8011230 <UART_SetConfig+0x190>
 8011156:	a201      	add	r2, pc, #4	; (adr r2, 801115c <UART_SetConfig+0xbc>)
 8011158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801115c:	08011201 	.word	0x08011201
 8011160:	08011231 	.word	0x08011231
 8011164:	08011231 	.word	0x08011231
 8011168:	08011231 	.word	0x08011231
 801116c:	08011231 	.word	0x08011231
 8011170:	08011231 	.word	0x08011231
 8011174:	08011231 	.word	0x08011231
 8011178:	08011231 	.word	0x08011231
 801117c:	08011209 	.word	0x08011209
 8011180:	08011231 	.word	0x08011231
 8011184:	08011231 	.word	0x08011231
 8011188:	08011231 	.word	0x08011231
 801118c:	08011231 	.word	0x08011231
 8011190:	08011231 	.word	0x08011231
 8011194:	08011231 	.word	0x08011231
 8011198:	08011231 	.word	0x08011231
 801119c:	08011211 	.word	0x08011211
 80111a0:	08011231 	.word	0x08011231
 80111a4:	08011231 	.word	0x08011231
 80111a8:	08011231 	.word	0x08011231
 80111ac:	08011231 	.word	0x08011231
 80111b0:	08011231 	.word	0x08011231
 80111b4:	08011231 	.word	0x08011231
 80111b8:	08011231 	.word	0x08011231
 80111bc:	08011219 	.word	0x08011219
 80111c0:	08011231 	.word	0x08011231
 80111c4:	08011231 	.word	0x08011231
 80111c8:	08011231 	.word	0x08011231
 80111cc:	08011231 	.word	0x08011231
 80111d0:	08011231 	.word	0x08011231
 80111d4:	08011231 	.word	0x08011231
 80111d8:	08011231 	.word	0x08011231
 80111dc:	08011221 	.word	0x08011221
 80111e0:	08011231 	.word	0x08011231
 80111e4:	08011231 	.word	0x08011231
 80111e8:	08011231 	.word	0x08011231
 80111ec:	08011231 	.word	0x08011231
 80111f0:	08011231 	.word	0x08011231
 80111f4:	08011231 	.word	0x08011231
 80111f8:	08011231 	.word	0x08011231
 80111fc:	08011229 	.word	0x08011229
 8011200:	2301      	movs	r3, #1
 8011202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011206:	e233      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011208:	2304      	movs	r3, #4
 801120a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801120e:	e22f      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011210:	2308      	movs	r3, #8
 8011212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011216:	e22b      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011218:	2310      	movs	r3, #16
 801121a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801121e:	e227      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011220:	2320      	movs	r3, #32
 8011222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011226:	e223      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011228:	2340      	movs	r3, #64	; 0x40
 801122a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801122e:	e21f      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011230:	2380      	movs	r3, #128	; 0x80
 8011232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011236:	bf00      	nop
 8011238:	e21a      	b.n	8011670 <UART_SetConfig+0x5d0>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	4a6d      	ldr	r2, [pc, #436]	; (80113f4 <UART_SetConfig+0x354>)
 8011240:	4293      	cmp	r3, r2
 8011242:	d132      	bne.n	80112aa <UART_SetConfig+0x20a>
 8011244:	4b6a      	ldr	r3, [pc, #424]	; (80113f0 <UART_SetConfig+0x350>)
 8011246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011248:	f003 0307 	and.w	r3, r3, #7
 801124c:	2b05      	cmp	r3, #5
 801124e:	d827      	bhi.n	80112a0 <UART_SetConfig+0x200>
 8011250:	a201      	add	r2, pc, #4	; (adr r2, 8011258 <UART_SetConfig+0x1b8>)
 8011252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011256:	bf00      	nop
 8011258:	08011271 	.word	0x08011271
 801125c:	08011279 	.word	0x08011279
 8011260:	08011281 	.word	0x08011281
 8011264:	08011289 	.word	0x08011289
 8011268:	08011291 	.word	0x08011291
 801126c:	08011299 	.word	0x08011299
 8011270:	2300      	movs	r3, #0
 8011272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011276:	e1fb      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011278:	2304      	movs	r3, #4
 801127a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801127e:	e1f7      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011280:	2308      	movs	r3, #8
 8011282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011286:	e1f3      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011288:	2310      	movs	r3, #16
 801128a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801128e:	e1ef      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011290:	2320      	movs	r3, #32
 8011292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011296:	e1eb      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011298:	2340      	movs	r3, #64	; 0x40
 801129a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801129e:	e1e7      	b.n	8011670 <UART_SetConfig+0x5d0>
 80112a0:	2380      	movs	r3, #128	; 0x80
 80112a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80112a6:	bf00      	nop
 80112a8:	e1e2      	b.n	8011670 <UART_SetConfig+0x5d0>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	4a52      	ldr	r2, [pc, #328]	; (80113f8 <UART_SetConfig+0x358>)
 80112b0:	4293      	cmp	r3, r2
 80112b2:	d132      	bne.n	801131a <UART_SetConfig+0x27a>
 80112b4:	4b4e      	ldr	r3, [pc, #312]	; (80113f0 <UART_SetConfig+0x350>)
 80112b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112b8:	f003 0307 	and.w	r3, r3, #7
 80112bc:	2b05      	cmp	r3, #5
 80112be:	d827      	bhi.n	8011310 <UART_SetConfig+0x270>
 80112c0:	a201      	add	r2, pc, #4	; (adr r2, 80112c8 <UART_SetConfig+0x228>)
 80112c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c6:	bf00      	nop
 80112c8:	080112e1 	.word	0x080112e1
 80112cc:	080112e9 	.word	0x080112e9
 80112d0:	080112f1 	.word	0x080112f1
 80112d4:	080112f9 	.word	0x080112f9
 80112d8:	08011301 	.word	0x08011301
 80112dc:	08011309 	.word	0x08011309
 80112e0:	2300      	movs	r3, #0
 80112e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80112e6:	e1c3      	b.n	8011670 <UART_SetConfig+0x5d0>
 80112e8:	2304      	movs	r3, #4
 80112ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80112ee:	e1bf      	b.n	8011670 <UART_SetConfig+0x5d0>
 80112f0:	2308      	movs	r3, #8
 80112f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80112f6:	e1bb      	b.n	8011670 <UART_SetConfig+0x5d0>
 80112f8:	2310      	movs	r3, #16
 80112fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80112fe:	e1b7      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011300:	2320      	movs	r3, #32
 8011302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011306:	e1b3      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011308:	2340      	movs	r3, #64	; 0x40
 801130a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801130e:	e1af      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011310:	2380      	movs	r3, #128	; 0x80
 8011312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011316:	bf00      	nop
 8011318:	e1aa      	b.n	8011670 <UART_SetConfig+0x5d0>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4a37      	ldr	r2, [pc, #220]	; (80113fc <UART_SetConfig+0x35c>)
 8011320:	4293      	cmp	r3, r2
 8011322:	d132      	bne.n	801138a <UART_SetConfig+0x2ea>
 8011324:	4b32      	ldr	r3, [pc, #200]	; (80113f0 <UART_SetConfig+0x350>)
 8011326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011328:	f003 0307 	and.w	r3, r3, #7
 801132c:	2b05      	cmp	r3, #5
 801132e:	d827      	bhi.n	8011380 <UART_SetConfig+0x2e0>
 8011330:	a201      	add	r2, pc, #4	; (adr r2, 8011338 <UART_SetConfig+0x298>)
 8011332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011336:	bf00      	nop
 8011338:	08011351 	.word	0x08011351
 801133c:	08011359 	.word	0x08011359
 8011340:	08011361 	.word	0x08011361
 8011344:	08011369 	.word	0x08011369
 8011348:	08011371 	.word	0x08011371
 801134c:	08011379 	.word	0x08011379
 8011350:	2300      	movs	r3, #0
 8011352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011356:	e18b      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011358:	2304      	movs	r3, #4
 801135a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801135e:	e187      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011360:	2308      	movs	r3, #8
 8011362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011366:	e183      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011368:	2310      	movs	r3, #16
 801136a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801136e:	e17f      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011370:	2320      	movs	r3, #32
 8011372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011376:	e17b      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011378:	2340      	movs	r3, #64	; 0x40
 801137a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801137e:	e177      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011380:	2380      	movs	r3, #128	; 0x80
 8011382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011386:	bf00      	nop
 8011388:	e172      	b.n	8011670 <UART_SetConfig+0x5d0>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	4a1c      	ldr	r2, [pc, #112]	; (8011400 <UART_SetConfig+0x360>)
 8011390:	4293      	cmp	r3, r2
 8011392:	d144      	bne.n	801141e <UART_SetConfig+0x37e>
 8011394:	4b16      	ldr	r3, [pc, #88]	; (80113f0 <UART_SetConfig+0x350>)
 8011396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011398:	f003 0307 	and.w	r3, r3, #7
 801139c:	2b05      	cmp	r3, #5
 801139e:	d839      	bhi.n	8011414 <UART_SetConfig+0x374>
 80113a0:	a201      	add	r2, pc, #4	; (adr r2, 80113a8 <UART_SetConfig+0x308>)
 80113a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113a6:	bf00      	nop
 80113a8:	080113c1 	.word	0x080113c1
 80113ac:	080113c9 	.word	0x080113c9
 80113b0:	080113d1 	.word	0x080113d1
 80113b4:	080113d9 	.word	0x080113d9
 80113b8:	08011405 	.word	0x08011405
 80113bc:	0801140d 	.word	0x0801140d
 80113c0:	2300      	movs	r3, #0
 80113c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80113c6:	e153      	b.n	8011670 <UART_SetConfig+0x5d0>
 80113c8:	2304      	movs	r3, #4
 80113ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80113ce:	e14f      	b.n	8011670 <UART_SetConfig+0x5d0>
 80113d0:	2308      	movs	r3, #8
 80113d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80113d6:	e14b      	b.n	8011670 <UART_SetConfig+0x5d0>
 80113d8:	2310      	movs	r3, #16
 80113da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80113de:	e147      	b.n	8011670 <UART_SetConfig+0x5d0>
 80113e0:	cfff69f3 	.word	0xcfff69f3
 80113e4:	58000c00 	.word	0x58000c00
 80113e8:	11fff4ff 	.word	0x11fff4ff
 80113ec:	40011000 	.word	0x40011000
 80113f0:	58024400 	.word	0x58024400
 80113f4:	40004400 	.word	0x40004400
 80113f8:	40004800 	.word	0x40004800
 80113fc:	40004c00 	.word	0x40004c00
 8011400:	40005000 	.word	0x40005000
 8011404:	2320      	movs	r3, #32
 8011406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801140a:	e131      	b.n	8011670 <UART_SetConfig+0x5d0>
 801140c:	2340      	movs	r3, #64	; 0x40
 801140e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011412:	e12d      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011414:	2380      	movs	r3, #128	; 0x80
 8011416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801141a:	bf00      	nop
 801141c:	e128      	b.n	8011670 <UART_SetConfig+0x5d0>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	4ab6      	ldr	r2, [pc, #728]	; (80116fc <UART_SetConfig+0x65c>)
 8011424:	4293      	cmp	r3, r2
 8011426:	d178      	bne.n	801151a <UART_SetConfig+0x47a>
 8011428:	4bb5      	ldr	r3, [pc, #724]	; (8011700 <UART_SetConfig+0x660>)
 801142a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801142c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011430:	2b28      	cmp	r3, #40	; 0x28
 8011432:	d86d      	bhi.n	8011510 <UART_SetConfig+0x470>
 8011434:	a201      	add	r2, pc, #4	; (adr r2, 801143c <UART_SetConfig+0x39c>)
 8011436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801143a:	bf00      	nop
 801143c:	080114e1 	.word	0x080114e1
 8011440:	08011511 	.word	0x08011511
 8011444:	08011511 	.word	0x08011511
 8011448:	08011511 	.word	0x08011511
 801144c:	08011511 	.word	0x08011511
 8011450:	08011511 	.word	0x08011511
 8011454:	08011511 	.word	0x08011511
 8011458:	08011511 	.word	0x08011511
 801145c:	080114e9 	.word	0x080114e9
 8011460:	08011511 	.word	0x08011511
 8011464:	08011511 	.word	0x08011511
 8011468:	08011511 	.word	0x08011511
 801146c:	08011511 	.word	0x08011511
 8011470:	08011511 	.word	0x08011511
 8011474:	08011511 	.word	0x08011511
 8011478:	08011511 	.word	0x08011511
 801147c:	080114f1 	.word	0x080114f1
 8011480:	08011511 	.word	0x08011511
 8011484:	08011511 	.word	0x08011511
 8011488:	08011511 	.word	0x08011511
 801148c:	08011511 	.word	0x08011511
 8011490:	08011511 	.word	0x08011511
 8011494:	08011511 	.word	0x08011511
 8011498:	08011511 	.word	0x08011511
 801149c:	080114f9 	.word	0x080114f9
 80114a0:	08011511 	.word	0x08011511
 80114a4:	08011511 	.word	0x08011511
 80114a8:	08011511 	.word	0x08011511
 80114ac:	08011511 	.word	0x08011511
 80114b0:	08011511 	.word	0x08011511
 80114b4:	08011511 	.word	0x08011511
 80114b8:	08011511 	.word	0x08011511
 80114bc:	08011501 	.word	0x08011501
 80114c0:	08011511 	.word	0x08011511
 80114c4:	08011511 	.word	0x08011511
 80114c8:	08011511 	.word	0x08011511
 80114cc:	08011511 	.word	0x08011511
 80114d0:	08011511 	.word	0x08011511
 80114d4:	08011511 	.word	0x08011511
 80114d8:	08011511 	.word	0x08011511
 80114dc:	08011509 	.word	0x08011509
 80114e0:	2301      	movs	r3, #1
 80114e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80114e6:	e0c3      	b.n	8011670 <UART_SetConfig+0x5d0>
 80114e8:	2304      	movs	r3, #4
 80114ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80114ee:	e0bf      	b.n	8011670 <UART_SetConfig+0x5d0>
 80114f0:	2308      	movs	r3, #8
 80114f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80114f6:	e0bb      	b.n	8011670 <UART_SetConfig+0x5d0>
 80114f8:	2310      	movs	r3, #16
 80114fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80114fe:	e0b7      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011500:	2320      	movs	r3, #32
 8011502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011506:	e0b3      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011508:	2340      	movs	r3, #64	; 0x40
 801150a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801150e:	e0af      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011510:	2380      	movs	r3, #128	; 0x80
 8011512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011516:	bf00      	nop
 8011518:	e0aa      	b.n	8011670 <UART_SetConfig+0x5d0>
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	4a79      	ldr	r2, [pc, #484]	; (8011704 <UART_SetConfig+0x664>)
 8011520:	4293      	cmp	r3, r2
 8011522:	d132      	bne.n	801158a <UART_SetConfig+0x4ea>
 8011524:	4b76      	ldr	r3, [pc, #472]	; (8011700 <UART_SetConfig+0x660>)
 8011526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011528:	f003 0307 	and.w	r3, r3, #7
 801152c:	2b05      	cmp	r3, #5
 801152e:	d827      	bhi.n	8011580 <UART_SetConfig+0x4e0>
 8011530:	a201      	add	r2, pc, #4	; (adr r2, 8011538 <UART_SetConfig+0x498>)
 8011532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011536:	bf00      	nop
 8011538:	08011551 	.word	0x08011551
 801153c:	08011559 	.word	0x08011559
 8011540:	08011561 	.word	0x08011561
 8011544:	08011569 	.word	0x08011569
 8011548:	08011571 	.word	0x08011571
 801154c:	08011579 	.word	0x08011579
 8011550:	2300      	movs	r3, #0
 8011552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011556:	e08b      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011558:	2304      	movs	r3, #4
 801155a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801155e:	e087      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011560:	2308      	movs	r3, #8
 8011562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011566:	e083      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011568:	2310      	movs	r3, #16
 801156a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801156e:	e07f      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011570:	2320      	movs	r3, #32
 8011572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011576:	e07b      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011578:	2340      	movs	r3, #64	; 0x40
 801157a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801157e:	e077      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011580:	2380      	movs	r3, #128	; 0x80
 8011582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011586:	bf00      	nop
 8011588:	e072      	b.n	8011670 <UART_SetConfig+0x5d0>
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	4a5e      	ldr	r2, [pc, #376]	; (8011708 <UART_SetConfig+0x668>)
 8011590:	4293      	cmp	r3, r2
 8011592:	d132      	bne.n	80115fa <UART_SetConfig+0x55a>
 8011594:	4b5a      	ldr	r3, [pc, #360]	; (8011700 <UART_SetConfig+0x660>)
 8011596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011598:	f003 0307 	and.w	r3, r3, #7
 801159c:	2b05      	cmp	r3, #5
 801159e:	d827      	bhi.n	80115f0 <UART_SetConfig+0x550>
 80115a0:	a201      	add	r2, pc, #4	; (adr r2, 80115a8 <UART_SetConfig+0x508>)
 80115a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115a6:	bf00      	nop
 80115a8:	080115c1 	.word	0x080115c1
 80115ac:	080115c9 	.word	0x080115c9
 80115b0:	080115d1 	.word	0x080115d1
 80115b4:	080115d9 	.word	0x080115d9
 80115b8:	080115e1 	.word	0x080115e1
 80115bc:	080115e9 	.word	0x080115e9
 80115c0:	2300      	movs	r3, #0
 80115c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80115c6:	e053      	b.n	8011670 <UART_SetConfig+0x5d0>
 80115c8:	2304      	movs	r3, #4
 80115ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80115ce:	e04f      	b.n	8011670 <UART_SetConfig+0x5d0>
 80115d0:	2308      	movs	r3, #8
 80115d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80115d6:	e04b      	b.n	8011670 <UART_SetConfig+0x5d0>
 80115d8:	2310      	movs	r3, #16
 80115da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80115de:	e047      	b.n	8011670 <UART_SetConfig+0x5d0>
 80115e0:	2320      	movs	r3, #32
 80115e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80115e6:	e043      	b.n	8011670 <UART_SetConfig+0x5d0>
 80115e8:	2340      	movs	r3, #64	; 0x40
 80115ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80115ee:	e03f      	b.n	8011670 <UART_SetConfig+0x5d0>
 80115f0:	2380      	movs	r3, #128	; 0x80
 80115f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80115f6:	bf00      	nop
 80115f8:	e03a      	b.n	8011670 <UART_SetConfig+0x5d0>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	4a43      	ldr	r2, [pc, #268]	; (801170c <UART_SetConfig+0x66c>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d132      	bne.n	801166a <UART_SetConfig+0x5ca>
 8011604:	4b3e      	ldr	r3, [pc, #248]	; (8011700 <UART_SetConfig+0x660>)
 8011606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011608:	f003 0307 	and.w	r3, r3, #7
 801160c:	2b05      	cmp	r3, #5
 801160e:	d827      	bhi.n	8011660 <UART_SetConfig+0x5c0>
 8011610:	a201      	add	r2, pc, #4	; (adr r2, 8011618 <UART_SetConfig+0x578>)
 8011612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011616:	bf00      	nop
 8011618:	08011631 	.word	0x08011631
 801161c:	08011639 	.word	0x08011639
 8011620:	08011641 	.word	0x08011641
 8011624:	08011649 	.word	0x08011649
 8011628:	08011651 	.word	0x08011651
 801162c:	08011659 	.word	0x08011659
 8011630:	2302      	movs	r3, #2
 8011632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011636:	e01b      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011638:	2304      	movs	r3, #4
 801163a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801163e:	e017      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011640:	2308      	movs	r3, #8
 8011642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011646:	e013      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011648:	2310      	movs	r3, #16
 801164a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801164e:	e00f      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011650:	2320      	movs	r3, #32
 8011652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011656:	e00b      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011658:	2340      	movs	r3, #64	; 0x40
 801165a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801165e:	e007      	b.n	8011670 <UART_SetConfig+0x5d0>
 8011660:	2380      	movs	r3, #128	; 0x80
 8011662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011666:	bf00      	nop
 8011668:	e002      	b.n	8011670 <UART_SetConfig+0x5d0>
 801166a:	2380      	movs	r3, #128	; 0x80
 801166c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	4a25      	ldr	r2, [pc, #148]	; (801170c <UART_SetConfig+0x66c>)
 8011676:	4293      	cmp	r3, r2
 8011678:	f040 80b8 	bne.w	80117ec <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801167c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011680:	2b08      	cmp	r3, #8
 8011682:	d019      	beq.n	80116b8 <UART_SetConfig+0x618>
 8011684:	2b08      	cmp	r3, #8
 8011686:	dc04      	bgt.n	8011692 <UART_SetConfig+0x5f2>
 8011688:	2b02      	cmp	r3, #2
 801168a:	d009      	beq.n	80116a0 <UART_SetConfig+0x600>
 801168c:	2b04      	cmp	r3, #4
 801168e:	d00b      	beq.n	80116a8 <UART_SetConfig+0x608>
 8011690:	e042      	b.n	8011718 <UART_SetConfig+0x678>
 8011692:	2b20      	cmp	r3, #32
 8011694:	d02b      	beq.n	80116ee <UART_SetConfig+0x64e>
 8011696:	2b40      	cmp	r3, #64	; 0x40
 8011698:	d02c      	beq.n	80116f4 <UART_SetConfig+0x654>
 801169a:	2b10      	cmp	r3, #16
 801169c:	d014      	beq.n	80116c8 <UART_SetConfig+0x628>
 801169e:	e03b      	b.n	8011718 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80116a0:	f7fb fadc 	bl	800cc5c <HAL_RCCEx_GetD3PCLK1Freq>
 80116a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80116a6:	e03d      	b.n	8011724 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116a8:	f107 0314 	add.w	r3, r7, #20
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7fb faeb 	bl	800cc88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80116b2:	69bb      	ldr	r3, [r7, #24]
 80116b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80116b6:	e035      	b.n	8011724 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80116b8:	f107 0308 	add.w	r3, r7, #8
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fb fc2f 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80116c6:	e02d      	b.n	8011724 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116c8:	4b0d      	ldr	r3, [pc, #52]	; (8011700 <UART_SetConfig+0x660>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	f003 0320 	and.w	r3, r3, #32
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d009      	beq.n	80116e8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80116d4:	4b0a      	ldr	r3, [pc, #40]	; (8011700 <UART_SetConfig+0x660>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	08db      	lsrs	r3, r3, #3
 80116da:	f003 0303 	and.w	r3, r3, #3
 80116de:	4a0c      	ldr	r2, [pc, #48]	; (8011710 <UART_SetConfig+0x670>)
 80116e0:	fa22 f303 	lsr.w	r3, r2, r3
 80116e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80116e6:	e01d      	b.n	8011724 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80116e8:	4b09      	ldr	r3, [pc, #36]	; (8011710 <UART_SetConfig+0x670>)
 80116ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80116ec:	e01a      	b.n	8011724 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80116ee:	4b09      	ldr	r3, [pc, #36]	; (8011714 <UART_SetConfig+0x674>)
 80116f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80116f2:	e017      	b.n	8011724 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80116fa:	e013      	b.n	8011724 <UART_SetConfig+0x684>
 80116fc:	40011400 	.word	0x40011400
 8011700:	58024400 	.word	0x58024400
 8011704:	40007800 	.word	0x40007800
 8011708:	40007c00 	.word	0x40007c00
 801170c:	58000c00 	.word	0x58000c00
 8011710:	03d09000 	.word	0x03d09000
 8011714:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8011718:	2300      	movs	r3, #0
 801171a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801171c:	2301      	movs	r3, #1
 801171e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8011722:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011726:	2b00      	cmp	r3, #0
 8011728:	f000 824d 	beq.w	8011bc6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011730:	4aad      	ldr	r2, [pc, #692]	; (80119e8 <UART_SetConfig+0x948>)
 8011732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011736:	461a      	mov	r2, r3
 8011738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173a:	fbb3 f3f2 	udiv	r3, r3, r2
 801173e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	685a      	ldr	r2, [r3, #4]
 8011744:	4613      	mov	r3, r2
 8011746:	005b      	lsls	r3, r3, #1
 8011748:	4413      	add	r3, r2
 801174a:	6a3a      	ldr	r2, [r7, #32]
 801174c:	429a      	cmp	r2, r3
 801174e:	d305      	bcc.n	801175c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	685b      	ldr	r3, [r3, #4]
 8011754:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011756:	6a3a      	ldr	r2, [r7, #32]
 8011758:	429a      	cmp	r2, r3
 801175a:	d903      	bls.n	8011764 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 801175c:	2301      	movs	r3, #1
 801175e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8011762:	e230      	b.n	8011bc6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011766:	4618      	mov	r0, r3
 8011768:	f04f 0100 	mov.w	r1, #0
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011770:	4a9d      	ldr	r2, [pc, #628]	; (80119e8 <UART_SetConfig+0x948>)
 8011772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011776:	b29b      	uxth	r3, r3
 8011778:	f04f 0400 	mov.w	r4, #0
 801177c:	461a      	mov	r2, r3
 801177e:	4623      	mov	r3, r4
 8011780:	f7ee ffc2 	bl	8000708 <__aeabi_uldivmod>
 8011784:	4603      	mov	r3, r0
 8011786:	460c      	mov	r4, r1
 8011788:	4619      	mov	r1, r3
 801178a:	4622      	mov	r2, r4
 801178c:	f04f 0300 	mov.w	r3, #0
 8011790:	f04f 0400 	mov.w	r4, #0
 8011794:	0214      	lsls	r4, r2, #8
 8011796:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 801179a:	020b      	lsls	r3, r1, #8
 801179c:	687a      	ldr	r2, [r7, #4]
 801179e:	6852      	ldr	r2, [r2, #4]
 80117a0:	0852      	lsrs	r2, r2, #1
 80117a2:	4611      	mov	r1, r2
 80117a4:	f04f 0200 	mov.w	r2, #0
 80117a8:	eb13 0b01 	adds.w	fp, r3, r1
 80117ac:	eb44 0c02 	adc.w	ip, r4, r2
 80117b0:	4658      	mov	r0, fp
 80117b2:	4661      	mov	r1, ip
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	685b      	ldr	r3, [r3, #4]
 80117b8:	f04f 0400 	mov.w	r4, #0
 80117bc:	461a      	mov	r2, r3
 80117be:	4623      	mov	r3, r4
 80117c0:	f7ee ffa2 	bl	8000708 <__aeabi_uldivmod>
 80117c4:	4603      	mov	r3, r0
 80117c6:	460c      	mov	r4, r1
 80117c8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80117ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80117d0:	d308      	bcc.n	80117e4 <UART_SetConfig+0x744>
 80117d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80117d8:	d204      	bcs.n	80117e4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117e0:	60da      	str	r2, [r3, #12]
 80117e2:	e1f0      	b.n	8011bc6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80117e4:	2301      	movs	r3, #1
 80117e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80117ea:	e1ec      	b.n	8011bc6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	69db      	ldr	r3, [r3, #28]
 80117f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80117f4:	f040 8100 	bne.w	80119f8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80117f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80117fc:	2b40      	cmp	r3, #64	; 0x40
 80117fe:	f200 80b7 	bhi.w	8011970 <UART_SetConfig+0x8d0>
 8011802:	a201      	add	r2, pc, #4	; (adr r2, 8011808 <UART_SetConfig+0x768>)
 8011804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011808:	0801190d 	.word	0x0801190d
 801180c:	08011915 	.word	0x08011915
 8011810:	08011971 	.word	0x08011971
 8011814:	08011971 	.word	0x08011971
 8011818:	0801191d 	.word	0x0801191d
 801181c:	08011971 	.word	0x08011971
 8011820:	08011971 	.word	0x08011971
 8011824:	08011971 	.word	0x08011971
 8011828:	0801192d 	.word	0x0801192d
 801182c:	08011971 	.word	0x08011971
 8011830:	08011971 	.word	0x08011971
 8011834:	08011971 	.word	0x08011971
 8011838:	08011971 	.word	0x08011971
 801183c:	08011971 	.word	0x08011971
 8011840:	08011971 	.word	0x08011971
 8011844:	08011971 	.word	0x08011971
 8011848:	0801193d 	.word	0x0801193d
 801184c:	08011971 	.word	0x08011971
 8011850:	08011971 	.word	0x08011971
 8011854:	08011971 	.word	0x08011971
 8011858:	08011971 	.word	0x08011971
 801185c:	08011971 	.word	0x08011971
 8011860:	08011971 	.word	0x08011971
 8011864:	08011971 	.word	0x08011971
 8011868:	08011971 	.word	0x08011971
 801186c:	08011971 	.word	0x08011971
 8011870:	08011971 	.word	0x08011971
 8011874:	08011971 	.word	0x08011971
 8011878:	08011971 	.word	0x08011971
 801187c:	08011971 	.word	0x08011971
 8011880:	08011971 	.word	0x08011971
 8011884:	08011971 	.word	0x08011971
 8011888:	08011963 	.word	0x08011963
 801188c:	08011971 	.word	0x08011971
 8011890:	08011971 	.word	0x08011971
 8011894:	08011971 	.word	0x08011971
 8011898:	08011971 	.word	0x08011971
 801189c:	08011971 	.word	0x08011971
 80118a0:	08011971 	.word	0x08011971
 80118a4:	08011971 	.word	0x08011971
 80118a8:	08011971 	.word	0x08011971
 80118ac:	08011971 	.word	0x08011971
 80118b0:	08011971 	.word	0x08011971
 80118b4:	08011971 	.word	0x08011971
 80118b8:	08011971 	.word	0x08011971
 80118bc:	08011971 	.word	0x08011971
 80118c0:	08011971 	.word	0x08011971
 80118c4:	08011971 	.word	0x08011971
 80118c8:	08011971 	.word	0x08011971
 80118cc:	08011971 	.word	0x08011971
 80118d0:	08011971 	.word	0x08011971
 80118d4:	08011971 	.word	0x08011971
 80118d8:	08011971 	.word	0x08011971
 80118dc:	08011971 	.word	0x08011971
 80118e0:	08011971 	.word	0x08011971
 80118e4:	08011971 	.word	0x08011971
 80118e8:	08011971 	.word	0x08011971
 80118ec:	08011971 	.word	0x08011971
 80118f0:	08011971 	.word	0x08011971
 80118f4:	08011971 	.word	0x08011971
 80118f8:	08011971 	.word	0x08011971
 80118fc:	08011971 	.word	0x08011971
 8011900:	08011971 	.word	0x08011971
 8011904:	08011971 	.word	0x08011971
 8011908:	08011969 	.word	0x08011969
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801190c:	f7f9 fff8 	bl	800b900 <HAL_RCC_GetPCLK1Freq>
 8011910:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011912:	e033      	b.n	801197c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011914:	f7fa f80a 	bl	800b92c <HAL_RCC_GetPCLK2Freq>
 8011918:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801191a:	e02f      	b.n	801197c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801191c:	f107 0314 	add.w	r3, r7, #20
 8011920:	4618      	mov	r0, r3
 8011922:	f7fb f9b1 	bl	800cc88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011926:	69bb      	ldr	r3, [r7, #24]
 8011928:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801192a:	e027      	b.n	801197c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801192c:	f107 0308 	add.w	r3, r7, #8
 8011930:	4618      	mov	r0, r3
 8011932:	f7fb faf5 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801193a:	e01f      	b.n	801197c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801193c:	4b2b      	ldr	r3, [pc, #172]	; (80119ec <UART_SetConfig+0x94c>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	f003 0320 	and.w	r3, r3, #32
 8011944:	2b00      	cmp	r3, #0
 8011946:	d009      	beq.n	801195c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011948:	4b28      	ldr	r3, [pc, #160]	; (80119ec <UART_SetConfig+0x94c>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	08db      	lsrs	r3, r3, #3
 801194e:	f003 0303 	and.w	r3, r3, #3
 8011952:	4a27      	ldr	r2, [pc, #156]	; (80119f0 <UART_SetConfig+0x950>)
 8011954:	fa22 f303 	lsr.w	r3, r2, r3
 8011958:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801195a:	e00f      	b.n	801197c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 801195c:	4b24      	ldr	r3, [pc, #144]	; (80119f0 <UART_SetConfig+0x950>)
 801195e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011960:	e00c      	b.n	801197c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011962:	4b24      	ldr	r3, [pc, #144]	; (80119f4 <UART_SetConfig+0x954>)
 8011964:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011966:	e009      	b.n	801197c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801196c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801196e:	e005      	b.n	801197c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8011970:	2300      	movs	r3, #0
 8011972:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8011974:	2301      	movs	r3, #1
 8011976:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801197a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801197e:	2b00      	cmp	r3, #0
 8011980:	f000 8121 	beq.w	8011bc6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011988:	4a17      	ldr	r2, [pc, #92]	; (80119e8 <UART_SetConfig+0x948>)
 801198a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801198e:	461a      	mov	r2, r3
 8011990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011992:	fbb3 f3f2 	udiv	r3, r3, r2
 8011996:	005a      	lsls	r2, r3, #1
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	685b      	ldr	r3, [r3, #4]
 801199c:	085b      	lsrs	r3, r3, #1
 801199e:	441a      	add	r2, r3
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80119ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ae:	2b0f      	cmp	r3, #15
 80119b0:	d916      	bls.n	80119e0 <UART_SetConfig+0x940>
 80119b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80119b8:	d212      	bcs.n	80119e0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80119ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119bc:	b29b      	uxth	r3, r3
 80119be:	f023 030f 	bic.w	r3, r3, #15
 80119c2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80119c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c6:	085b      	lsrs	r3, r3, #1
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	f003 0307 	and.w	r3, r3, #7
 80119ce:	b29a      	uxth	r2, r3
 80119d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80119d2:	4313      	orrs	r3, r2
 80119d4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80119dc:	60da      	str	r2, [r3, #12]
 80119de:	e0f2      	b.n	8011bc6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80119e0:	2301      	movs	r3, #1
 80119e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80119e6:	e0ee      	b.n	8011bc6 <UART_SetConfig+0xb26>
 80119e8:	0801eda8 	.word	0x0801eda8
 80119ec:	58024400 	.word	0x58024400
 80119f0:	03d09000 	.word	0x03d09000
 80119f4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80119f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80119fc:	2b40      	cmp	r3, #64	; 0x40
 80119fe:	f200 80b7 	bhi.w	8011b70 <UART_SetConfig+0xad0>
 8011a02:	a201      	add	r2, pc, #4	; (adr r2, 8011a08 <UART_SetConfig+0x968>)
 8011a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a08:	08011b0d 	.word	0x08011b0d
 8011a0c:	08011b15 	.word	0x08011b15
 8011a10:	08011b71 	.word	0x08011b71
 8011a14:	08011b71 	.word	0x08011b71
 8011a18:	08011b1d 	.word	0x08011b1d
 8011a1c:	08011b71 	.word	0x08011b71
 8011a20:	08011b71 	.word	0x08011b71
 8011a24:	08011b71 	.word	0x08011b71
 8011a28:	08011b2d 	.word	0x08011b2d
 8011a2c:	08011b71 	.word	0x08011b71
 8011a30:	08011b71 	.word	0x08011b71
 8011a34:	08011b71 	.word	0x08011b71
 8011a38:	08011b71 	.word	0x08011b71
 8011a3c:	08011b71 	.word	0x08011b71
 8011a40:	08011b71 	.word	0x08011b71
 8011a44:	08011b71 	.word	0x08011b71
 8011a48:	08011b3d 	.word	0x08011b3d
 8011a4c:	08011b71 	.word	0x08011b71
 8011a50:	08011b71 	.word	0x08011b71
 8011a54:	08011b71 	.word	0x08011b71
 8011a58:	08011b71 	.word	0x08011b71
 8011a5c:	08011b71 	.word	0x08011b71
 8011a60:	08011b71 	.word	0x08011b71
 8011a64:	08011b71 	.word	0x08011b71
 8011a68:	08011b71 	.word	0x08011b71
 8011a6c:	08011b71 	.word	0x08011b71
 8011a70:	08011b71 	.word	0x08011b71
 8011a74:	08011b71 	.word	0x08011b71
 8011a78:	08011b71 	.word	0x08011b71
 8011a7c:	08011b71 	.word	0x08011b71
 8011a80:	08011b71 	.word	0x08011b71
 8011a84:	08011b71 	.word	0x08011b71
 8011a88:	08011b63 	.word	0x08011b63
 8011a8c:	08011b71 	.word	0x08011b71
 8011a90:	08011b71 	.word	0x08011b71
 8011a94:	08011b71 	.word	0x08011b71
 8011a98:	08011b71 	.word	0x08011b71
 8011a9c:	08011b71 	.word	0x08011b71
 8011aa0:	08011b71 	.word	0x08011b71
 8011aa4:	08011b71 	.word	0x08011b71
 8011aa8:	08011b71 	.word	0x08011b71
 8011aac:	08011b71 	.word	0x08011b71
 8011ab0:	08011b71 	.word	0x08011b71
 8011ab4:	08011b71 	.word	0x08011b71
 8011ab8:	08011b71 	.word	0x08011b71
 8011abc:	08011b71 	.word	0x08011b71
 8011ac0:	08011b71 	.word	0x08011b71
 8011ac4:	08011b71 	.word	0x08011b71
 8011ac8:	08011b71 	.word	0x08011b71
 8011acc:	08011b71 	.word	0x08011b71
 8011ad0:	08011b71 	.word	0x08011b71
 8011ad4:	08011b71 	.word	0x08011b71
 8011ad8:	08011b71 	.word	0x08011b71
 8011adc:	08011b71 	.word	0x08011b71
 8011ae0:	08011b71 	.word	0x08011b71
 8011ae4:	08011b71 	.word	0x08011b71
 8011ae8:	08011b71 	.word	0x08011b71
 8011aec:	08011b71 	.word	0x08011b71
 8011af0:	08011b71 	.word	0x08011b71
 8011af4:	08011b71 	.word	0x08011b71
 8011af8:	08011b71 	.word	0x08011b71
 8011afc:	08011b71 	.word	0x08011b71
 8011b00:	08011b71 	.word	0x08011b71
 8011b04:	08011b71 	.word	0x08011b71
 8011b08:	08011b69 	.word	0x08011b69
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011b0c:	f7f9 fef8 	bl	800b900 <HAL_RCC_GetPCLK1Freq>
 8011b10:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011b12:	e033      	b.n	8011b7c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011b14:	f7f9 ff0a 	bl	800b92c <HAL_RCC_GetPCLK2Freq>
 8011b18:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011b1a:	e02f      	b.n	8011b7c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011b1c:	f107 0314 	add.w	r3, r7, #20
 8011b20:	4618      	mov	r0, r3
 8011b22:	f7fb f8b1 	bl	800cc88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011b26:	69bb      	ldr	r3, [r7, #24]
 8011b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011b2a:	e027      	b.n	8011b7c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b2c:	f107 0308 	add.w	r3, r7, #8
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7fb f9f5 	bl	800cf20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011b3a:	e01f      	b.n	8011b7c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011b3c:	4b2c      	ldr	r3, [pc, #176]	; (8011bf0 <UART_SetConfig+0xb50>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	f003 0320 	and.w	r3, r3, #32
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d009      	beq.n	8011b5c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011b48:	4b29      	ldr	r3, [pc, #164]	; (8011bf0 <UART_SetConfig+0xb50>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	08db      	lsrs	r3, r3, #3
 8011b4e:	f003 0303 	and.w	r3, r3, #3
 8011b52:	4a28      	ldr	r2, [pc, #160]	; (8011bf4 <UART_SetConfig+0xb54>)
 8011b54:	fa22 f303 	lsr.w	r3, r2, r3
 8011b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011b5a:	e00f      	b.n	8011b7c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8011b5c:	4b25      	ldr	r3, [pc, #148]	; (8011bf4 <UART_SetConfig+0xb54>)
 8011b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011b60:	e00c      	b.n	8011b7c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011b62:	4b25      	ldr	r3, [pc, #148]	; (8011bf8 <UART_SetConfig+0xb58>)
 8011b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011b66:	e009      	b.n	8011b7c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011b6e:	e005      	b.n	8011b7c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8011b70:	2300      	movs	r3, #0
 8011b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8011b74:	2301      	movs	r3, #1
 8011b76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8011b7a:	bf00      	nop
    }

    if (pclk != 0U)
 8011b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d021      	beq.n	8011bc6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b86:	4a1d      	ldr	r2, [pc, #116]	; (8011bfc <UART_SetConfig+0xb5c>)
 8011b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b90:	fbb3 f2f2 	udiv	r2, r3, r2
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	685b      	ldr	r3, [r3, #4]
 8011b98:	085b      	lsrs	r3, r3, #1
 8011b9a:	441a      	add	r2, r3
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011baa:	2b0f      	cmp	r3, #15
 8011bac:	d908      	bls.n	8011bc0 <UART_SetConfig+0xb20>
 8011bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bb4:	d204      	bcs.n	8011bc0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bbc:	60da      	str	r2, [r3, #12]
 8011bbe:	e002      	b.n	8011bc6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2201      	movs	r2, #1
 8011bca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2201      	movs	r2, #1
 8011bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2200      	movs	r2, #0
 8011bda:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2200      	movs	r2, #0
 8011be0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8011be2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3738      	adds	r7, #56	; 0x38
 8011bea:	46bd      	mov	sp, r7
 8011bec:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8011bf0:	58024400 	.word	0x58024400
 8011bf4:	03d09000 	.word	0x03d09000
 8011bf8:	003d0900 	.word	0x003d0900
 8011bfc:	0801eda8 	.word	0x0801eda8

08011c00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c0c:	f003 0301 	and.w	r3, r3, #1
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d00a      	beq.n	8011c2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	430a      	orrs	r2, r1
 8011c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c2e:	f003 0302 	and.w	r3, r3, #2
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d00a      	beq.n	8011c4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	685b      	ldr	r3, [r3, #4]
 8011c3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	430a      	orrs	r2, r1
 8011c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c50:	f003 0304 	and.w	r3, r3, #4
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d00a      	beq.n	8011c6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	430a      	orrs	r2, r1
 8011c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c72:	f003 0308 	and.w	r3, r3, #8
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d00a      	beq.n	8011c90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	430a      	orrs	r2, r1
 8011c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c94:	f003 0310 	and.w	r3, r3, #16
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d00a      	beq.n	8011cb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	689b      	ldr	r3, [r3, #8]
 8011ca2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	430a      	orrs	r2, r1
 8011cb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cb6:	f003 0320 	and.w	r3, r3, #32
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d00a      	beq.n	8011cd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	689b      	ldr	r3, [r3, #8]
 8011cc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	430a      	orrs	r2, r1
 8011cd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d01a      	beq.n	8011d16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	430a      	orrs	r2, r1
 8011cf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011cfe:	d10a      	bne.n	8011d16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	430a      	orrs	r2, r1
 8011d14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d00a      	beq.n	8011d38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	685b      	ldr	r3, [r3, #4]
 8011d28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	430a      	orrs	r2, r1
 8011d36:	605a      	str	r2, [r3, #4]
  }
}
 8011d38:	bf00      	nop
 8011d3a:	370c      	adds	r7, #12
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d42:	4770      	bx	lr

08011d44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b086      	sub	sp, #24
 8011d48:	af02      	add	r7, sp, #8
 8011d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8011d54:	f7f3 fd94 	bl	8005880 <HAL_GetTick>
 8011d58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f003 0308 	and.w	r3, r3, #8
 8011d64:	2b08      	cmp	r3, #8
 8011d66:	d10e      	bne.n	8011d86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d6c:	9300      	str	r3, [sp, #0]
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2200      	movs	r2, #0
 8011d72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f000 f82c 	bl	8011dd4 <UART_WaitOnFlagUntilTimeout>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d001      	beq.n	8011d86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011d82:	2303      	movs	r3, #3
 8011d84:	e022      	b.n	8011dcc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	f003 0304 	and.w	r3, r3, #4
 8011d90:	2b04      	cmp	r3, #4
 8011d92:	d10e      	bne.n	8011db2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d98:	9300      	str	r3, [sp, #0]
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f000 f816 	bl	8011dd4 <UART_WaitOnFlagUntilTimeout>
 8011da8:	4603      	mov	r3, r0
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d001      	beq.n	8011db2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011dae:	2303      	movs	r3, #3
 8011db0:	e00c      	b.n	8011dcc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2220      	movs	r2, #32
 8011db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2220      	movs	r2, #32
 8011dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8011dca:	2300      	movs	r3, #0
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	3710      	adds	r7, #16
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}

08011dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b084      	sub	sp, #16
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	60f8      	str	r0, [r7, #12]
 8011ddc:	60b9      	str	r1, [r7, #8]
 8011dde:	603b      	str	r3, [r7, #0]
 8011de0:	4613      	mov	r3, r2
 8011de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011de4:	e062      	b.n	8011eac <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011de6:	69bb      	ldr	r3, [r7, #24]
 8011de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dec:	d05e      	beq.n	8011eac <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011dee:	f7f3 fd47 	bl	8005880 <HAL_GetTick>
 8011df2:	4602      	mov	r2, r0
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	1ad3      	subs	r3, r2, r3
 8011df8:	69ba      	ldr	r2, [r7, #24]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d302      	bcc.n	8011e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d11d      	bne.n	8011e40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	681a      	ldr	r2, [r3, #0]
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011e12:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	689a      	ldr	r2, [r3, #8]
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	f022 0201 	bic.w	r2, r2, #1
 8011e22:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	2220      	movs	r2, #32
 8011e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2220      	movs	r2, #32
 8011e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	2200      	movs	r2, #0
 8011e38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8011e3c:	2303      	movs	r3, #3
 8011e3e:	e045      	b.n	8011ecc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	f003 0304 	and.w	r3, r3, #4
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d02e      	beq.n	8011eac <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	69db      	ldr	r3, [r3, #28]
 8011e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e5c:	d126      	bne.n	8011eac <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e66:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	681a      	ldr	r2, [r3, #0]
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011e76:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	689a      	ldr	r2, [r3, #8]
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	f022 0201 	bic.w	r2, r2, #1
 8011e86:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	2220      	movs	r2, #32
 8011e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	2220      	movs	r2, #32
 8011e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	2220      	movs	r2, #32
 8011e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8011ea8:	2303      	movs	r3, #3
 8011eaa:	e00f      	b.n	8011ecc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	69da      	ldr	r2, [r3, #28]
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	4013      	ands	r3, r2
 8011eb6:	68ba      	ldr	r2, [r7, #8]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	bf0c      	ite	eq
 8011ebc:	2301      	moveq	r3, #1
 8011ebe:	2300      	movne	r3, #0
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	79fb      	ldrb	r3, [r7, #7]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d08d      	beq.n	8011de6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011eca:	2300      	movs	r3, #0
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3710      	adds	r7, #16
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}

08011ed4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	681a      	ldr	r2, [r3, #0]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8011eea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	689a      	ldr	r2, [r3, #8]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8011efa:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2220      	movs	r2, #32
 8011f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8011f04:	bf00      	nop
 8011f06:	370c      	adds	r7, #12
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0e:	4770      	bx	lr

08011f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011f10:	b480      	push	{r7}
 8011f12:	b083      	sub	sp, #12
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	681a      	ldr	r2, [r3, #0]
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8011f26:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	6899      	ldr	r1, [r3, #8]
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681a      	ldr	r2, [r3, #0]
 8011f32:	4b08      	ldr	r3, [pc, #32]	; (8011f54 <UART_EndRxTransfer+0x44>)
 8011f34:	400b      	ands	r3, r1
 8011f36:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2220      	movs	r2, #32
 8011f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2200      	movs	r2, #0
 8011f44:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8011f46:	bf00      	nop
 8011f48:	370c      	adds	r7, #12
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	effffffe 	.word	0xeffffffe

08011f58 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f64:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	69db      	ldr	r3, [r3, #28]
 8011f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f6e:	d01f      	beq.n	8011fb0 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2200      	movs	r2, #0
 8011f74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	681a      	ldr	r2, [r3, #0]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011f86:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	689a      	ldr	r2, [r3, #8]
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	f022 0201 	bic.w	r2, r2, #1
 8011f96:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	689a      	ldr	r2, [r3, #8]
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011fa6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	2220      	movs	r2, #32
 8011fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8011fb0:	68f8      	ldr	r0, [r7, #12]
 8011fb2:	f7ef faeb 	bl	800158c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011fb6:	bf00      	nop
 8011fb8:	3710      	adds	r7, #16
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}

08011fbe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011fbe:	b580      	push	{r7, lr}
 8011fc0:	b084      	sub	sp, #16
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8011fcc:	68f8      	ldr	r0, [r7, #12]
 8011fce:	f7ef fac7 	bl	8001560 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011fd2:	bf00      	nop
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	b086      	sub	sp, #24
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fe6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011fee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ff6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011ff8:	697b      	ldr	r3, [r7, #20]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	689b      	ldr	r3, [r3, #8]
 8011ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012002:	2b80      	cmp	r3, #128	; 0x80
 8012004:	d109      	bne.n	801201a <UART_DMAError+0x40>
 8012006:	693b      	ldr	r3, [r7, #16]
 8012008:	2b21      	cmp	r3, #33	; 0x21
 801200a:	d106      	bne.n	801201a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	2200      	movs	r2, #0
 8012010:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8012014:	6978      	ldr	r0, [r7, #20]
 8012016:	f7ff ff5d 	bl	8011ed4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	689b      	ldr	r3, [r3, #8]
 8012020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012024:	2b40      	cmp	r3, #64	; 0x40
 8012026:	d109      	bne.n	801203c <UART_DMAError+0x62>
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	2b22      	cmp	r3, #34	; 0x22
 801202c:	d106      	bne.n	801203c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	2200      	movs	r2, #0
 8012032:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8012036:	6978      	ldr	r0, [r7, #20]
 8012038:	f7ff ff6a 	bl	8011f10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801203c:	697b      	ldr	r3, [r7, #20]
 801203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012042:	f043 0210 	orr.w	r2, r3, #16
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801204c:	6978      	ldr	r0, [r7, #20]
 801204e:	f7ff f81d 	bl	801108c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012052:	bf00      	nop
 8012054:	3718      	adds	r7, #24
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}

0801205a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801205a:	b480      	push	{r7}
 801205c:	b085      	sub	sp, #20
 801205e:	af00      	add	r7, sp, #0
 8012060:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012068:	2b01      	cmp	r3, #1
 801206a:	d101      	bne.n	8012070 <HAL_UARTEx_DisableFifoMode+0x16>
 801206c:	2302      	movs	r3, #2
 801206e:	e027      	b.n	80120c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2201      	movs	r2, #1
 8012074:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2224      	movs	r2, #36	; 0x24
 801207c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	681a      	ldr	r2, [r3, #0]
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	f022 0201 	bic.w	r2, r2, #1
 8012096:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801209e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2200      	movs	r2, #0
 80120a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	68fa      	ldr	r2, [r7, #12]
 80120ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2220      	movs	r2, #32
 80120b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2200      	movs	r2, #0
 80120ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80120be:	2300      	movs	r3, #0
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3714      	adds	r7, #20
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr

080120cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b084      	sub	sp, #16
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80120dc:	2b01      	cmp	r3, #1
 80120de:	d101      	bne.n	80120e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80120e0:	2302      	movs	r3, #2
 80120e2:	e02d      	b.n	8012140 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2201      	movs	r2, #1
 80120e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2224      	movs	r2, #36	; 0x24
 80120f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	f022 0201 	bic.w	r2, r2, #1
 801210a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	689b      	ldr	r3, [r3, #8]
 8012112:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	683a      	ldr	r2, [r7, #0]
 801211c:	430a      	orrs	r2, r1
 801211e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f000 f84f 	bl	80121c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	68fa      	ldr	r2, [r7, #12]
 801212c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2220      	movs	r2, #32
 8012132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2200      	movs	r2, #0
 801213a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801213e:	2300      	movs	r3, #0
}
 8012140:	4618      	mov	r0, r3
 8012142:	3710      	adds	r7, #16
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012158:	2b01      	cmp	r3, #1
 801215a:	d101      	bne.n	8012160 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801215c:	2302      	movs	r3, #2
 801215e:	e02d      	b.n	80121bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2201      	movs	r2, #1
 8012164:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2224      	movs	r2, #36	; 0x24
 801216c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	681a      	ldr	r2, [r3, #0]
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	f022 0201 	bic.w	r2, r2, #1
 8012186:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	689b      	ldr	r3, [r3, #8]
 801218e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	683a      	ldr	r2, [r7, #0]
 8012198:	430a      	orrs	r2, r1
 801219a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f000 f811 	bl	80121c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	68fa      	ldr	r2, [r7, #12]
 80121a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2220      	movs	r2, #32
 80121ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2200      	movs	r2, #0
 80121b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80121ba:	2300      	movs	r3, #0
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3710      	adds	r7, #16
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}

080121c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80121c4:	b480      	push	{r7}
 80121c6:	b089      	sub	sp, #36	; 0x24
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80121cc:	4a2f      	ldr	r2, [pc, #188]	; (801228c <UARTEx_SetNbDataToProcess+0xc8>)
 80121ce:	f107 0314 	add.w	r3, r7, #20
 80121d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121d6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80121da:	4a2d      	ldr	r2, [pc, #180]	; (8012290 <UARTEx_SetNbDataToProcess+0xcc>)
 80121dc:	f107 030c 	add.w	r3, r7, #12
 80121e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121e4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d108      	bne.n	8012202 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2201      	movs	r2, #1
 80121f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2201      	movs	r2, #1
 80121fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012200:	e03d      	b.n	801227e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012202:	2310      	movs	r3, #16
 8012204:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012206:	2310      	movs	r3, #16
 8012208:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	689b      	ldr	r3, [r3, #8]
 8012210:	0e5b      	lsrs	r3, r3, #25
 8012212:	b2db      	uxtb	r3, r3
 8012214:	f003 0307 	and.w	r3, r3, #7
 8012218:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	689b      	ldr	r3, [r3, #8]
 8012220:	0f5b      	lsrs	r3, r3, #29
 8012222:	b2db      	uxtb	r3, r3
 8012224:	f003 0307 	and.w	r3, r3, #7
 8012228:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 801222a:	7fbb      	ldrb	r3, [r7, #30]
 801222c:	7f3a      	ldrb	r2, [r7, #28]
 801222e:	f107 0120 	add.w	r1, r7, #32
 8012232:	440a      	add	r2, r1
 8012234:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8012238:	fb02 f303 	mul.w	r3, r2, r3
 801223c:	7f3a      	ldrb	r2, [r7, #28]
 801223e:	f107 0120 	add.w	r1, r7, #32
 8012242:	440a      	add	r2, r1
 8012244:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8012248:	fb93 f3f2 	sdiv	r3, r3, r2
 801224c:	b29a      	uxth	r2, r3
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8012254:	7ffb      	ldrb	r3, [r7, #31]
 8012256:	7f7a      	ldrb	r2, [r7, #29]
 8012258:	f107 0120 	add.w	r1, r7, #32
 801225c:	440a      	add	r2, r1
 801225e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8012262:	fb02 f303 	mul.w	r3, r2, r3
 8012266:	7f7a      	ldrb	r2, [r7, #29]
 8012268:	f107 0120 	add.w	r1, r7, #32
 801226c:	440a      	add	r2, r1
 801226e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8012272:	fb93 f3f2 	sdiv	r3, r3, r2
 8012276:	b29a      	uxth	r2, r3
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801227e:	bf00      	nop
 8012280:	3724      	adds	r7, #36	; 0x24
 8012282:	46bd      	mov	sp, r7
 8012284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012288:	4770      	bx	lr
 801228a:	bf00      	nop
 801228c:	0801ece8 	.word	0x0801ece8
 8012290:	0801ecf0 	.word	0x0801ecf0

08012294 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012294:	b084      	sub	sp, #16
 8012296:	b480      	push	{r7}
 8012298:	b085      	sub	sp, #20
 801229a:	af00      	add	r7, sp, #0
 801229c:	6078      	str	r0, [r7, #4]
 801229e:	f107 001c 	add.w	r0, r7, #28
 80122a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80122a6:	2300      	movs	r3, #0
 80122a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80122aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80122ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80122ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80122b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80122b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80122b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80122b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80122b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80122ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80122bc:	68fa      	ldr	r2, [r7, #12]
 80122be:	4313      	orrs	r3, r2
 80122c0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	685a      	ldr	r2, [r3, #4]
 80122c6:	4b07      	ldr	r3, [pc, #28]	; (80122e4 <SDMMC_Init+0x50>)
 80122c8:	4013      	ands	r3, r2
 80122ca:	68fa      	ldr	r2, [r7, #12]
 80122cc:	431a      	orrs	r2, r3
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80122d2:	2300      	movs	r3, #0
}
 80122d4:	4618      	mov	r0, r3
 80122d6:	3714      	adds	r7, #20
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	b004      	add	sp, #16
 80122e0:	4770      	bx	lr
 80122e2:	bf00      	nop
 80122e4:	ffc02c00 	.word	0xffc02c00

080122e8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80122e8:	b480      	push	{r7}
 80122ea:	b083      	sub	sp, #12
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80122f6:	4618      	mov	r0, r3
 80122f8:	370c      	adds	r7, #12
 80122fa:	46bd      	mov	sp, r7
 80122fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012300:	4770      	bx	lr

08012302 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012302:	b480      	push	{r7}
 8012304:	b083      	sub	sp, #12
 8012306:	af00      	add	r7, sp, #0
 8012308:	6078      	str	r0, [r7, #4]
 801230a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	681a      	ldr	r2, [r3, #0]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012316:	2300      	movs	r3, #0
}
 8012318:	4618      	mov	r0, r3
 801231a:	370c      	adds	r7, #12
 801231c:	46bd      	mov	sp, r7
 801231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012322:	4770      	bx	lr

08012324 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012324:	b480      	push	{r7}
 8012326:	b083      	sub	sp, #12
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	f043 0203 	orr.w	r2, r3, #3
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012338:	2300      	movs	r3, #0
}
 801233a:	4618      	mov	r0, r3
 801233c:	370c      	adds	r7, #12
 801233e:	46bd      	mov	sp, r7
 8012340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012344:	4770      	bx	lr

08012346 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012346:	b480      	push	{r7}
 8012348:	b083      	sub	sp, #12
 801234a:	af00      	add	r7, sp, #0
 801234c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	f003 0303 	and.w	r3, r3, #3
}
 8012356:	4618      	mov	r0, r3
 8012358:	370c      	adds	r7, #12
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr
	...

08012364 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012364:	b480      	push	{r7}
 8012366:	b085      	sub	sp, #20
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801236e:	2300      	movs	r3, #0
 8012370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	681a      	ldr	r2, [r3, #0]
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012382:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8012388:	431a      	orrs	r2, r3
                       Command->CPSM);
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801238e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012390:	68fa      	ldr	r2, [r7, #12]
 8012392:	4313      	orrs	r3, r2
 8012394:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	68da      	ldr	r2, [r3, #12]
 801239a:	4b06      	ldr	r3, [pc, #24]	; (80123b4 <SDMMC_SendCommand+0x50>)
 801239c:	4013      	ands	r3, r2
 801239e:	68fa      	ldr	r2, [r7, #12]
 80123a0:	431a      	orrs	r2, r3
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80123a6:	2300      	movs	r3, #0
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3714      	adds	r7, #20
 80123ac:	46bd      	mov	sp, r7
 80123ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b2:	4770      	bx	lr
 80123b4:	fffee0c0 	.word	0xfffee0c0

080123b8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80123b8:	b480      	push	{r7}
 80123ba:	b083      	sub	sp, #12
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	691b      	ldr	r3, [r3, #16]
 80123c4:	b2db      	uxtb	r3, r3
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	370c      	adds	r7, #12
 80123ca:	46bd      	mov	sp, r7
 80123cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d0:	4770      	bx	lr

080123d2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80123d2:	b480      	push	{r7}
 80123d4:	b085      	sub	sp, #20
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	6078      	str	r0, [r7, #4]
 80123da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	3314      	adds	r3, #20
 80123e0:	461a      	mov	r2, r3
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	4413      	add	r3, r2
 80123e6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	681b      	ldr	r3, [r3, #0]
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3714      	adds	r7, #20
 80123f0:	46bd      	mov	sp, r7
 80123f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f6:	4770      	bx	lr

080123f8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b085      	sub	sp, #20
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
 8012400:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012402:	2300      	movs	r3, #0
 8012404:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	685a      	ldr	r2, [r3, #4]
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801241e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8012424:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801242a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801242c:	68fa      	ldr	r2, [r7, #12]
 801242e:	4313      	orrs	r3, r2
 8012430:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012436:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	431a      	orrs	r2, r3
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012442:	2300      	movs	r3, #0

}
 8012444:	4618      	mov	r0, r3
 8012446:	3714      	adds	r7, #20
 8012448:	46bd      	mov	sp, r7
 801244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244e:	4770      	bx	lr

08012450 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b088      	sub	sp, #32
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801245e:	2310      	movs	r3, #16
 8012460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012468:	2300      	movs	r3, #0
 801246a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801246c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012470:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012472:	f107 0308 	add.w	r3, r7, #8
 8012476:	4619      	mov	r1, r3
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f7ff ff73 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801247e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012482:	2110      	movs	r1, #16
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f000 faaf 	bl	80129e8 <SDMMC_GetCmdResp1>
 801248a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801248c:	69fb      	ldr	r3, [r7, #28]
}
 801248e:	4618      	mov	r0, r3
 8012490:	3720      	adds	r7, #32
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}

08012496 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012496:	b580      	push	{r7, lr}
 8012498:	b088      	sub	sp, #32
 801249a:	af00      	add	r7, sp, #0
 801249c:	6078      	str	r0, [r7, #4]
 801249e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80124a4:	2311      	movs	r3, #17
 80124a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124ae:	2300      	movs	r3, #0
 80124b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124b8:	f107 0308 	add.w	r3, r7, #8
 80124bc:	4619      	mov	r1, r3
 80124be:	6878      	ldr	r0, [r7, #4]
 80124c0:	f7ff ff50 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80124c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80124c8:	2111      	movs	r1, #17
 80124ca:	6878      	ldr	r0, [r7, #4]
 80124cc:	f000 fa8c 	bl	80129e8 <SDMMC_GetCmdResp1>
 80124d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124d2:	69fb      	ldr	r3, [r7, #28]
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3720      	adds	r7, #32
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b088      	sub	sp, #32
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80124ea:	2312      	movs	r3, #18
 80124ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124f4:	2300      	movs	r3, #0
 80124f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124fe:	f107 0308 	add.w	r3, r7, #8
 8012502:	4619      	mov	r1, r3
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	f7ff ff2d 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801250a:	f241 3288 	movw	r2, #5000	; 0x1388
 801250e:	2112      	movs	r1, #18
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f000 fa69 	bl	80129e8 <SDMMC_GetCmdResp1>
 8012516:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012518:	69fb      	ldr	r3, [r7, #28]
}
 801251a:	4618      	mov	r0, r3
 801251c:	3720      	adds	r7, #32
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012522:	b580      	push	{r7, lr}
 8012524:	b088      	sub	sp, #32
 8012526:	af00      	add	r7, sp, #0
 8012528:	6078      	str	r0, [r7, #4]
 801252a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012530:	2318      	movs	r3, #24
 8012532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801253a:	2300      	movs	r3, #0
 801253c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801253e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012542:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012544:	f107 0308 	add.w	r3, r7, #8
 8012548:	4619      	mov	r1, r3
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f7ff ff0a 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012550:	f241 3288 	movw	r2, #5000	; 0x1388
 8012554:	2118      	movs	r1, #24
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f000 fa46 	bl	80129e8 <SDMMC_GetCmdResp1>
 801255c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801255e:	69fb      	ldr	r3, [r7, #28]
}
 8012560:	4618      	mov	r0, r3
 8012562:	3720      	adds	r7, #32
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}

08012568 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b088      	sub	sp, #32
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012576:	2319      	movs	r3, #25
 8012578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801257a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801257e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012580:	2300      	movs	r3, #0
 8012582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012588:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801258a:	f107 0308 	add.w	r3, r7, #8
 801258e:	4619      	mov	r1, r3
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f7ff fee7 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012596:	f241 3288 	movw	r2, #5000	; 0x1388
 801259a:	2119      	movs	r1, #25
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f000 fa23 	bl	80129e8 <SDMMC_GetCmdResp1>
 80125a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125a4:	69fb      	ldr	r3, [r7, #28]
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3720      	adds	r7, #32
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
	...

080125b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b088      	sub	sp, #32
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80125b8:	2300      	movs	r3, #0
 80125ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80125bc:	230c      	movs	r3, #12
 80125be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125c6:	2300      	movs	r3, #0
 80125c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125ce:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	68db      	ldr	r3, [r3, #12]
 80125d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	68db      	ldr	r3, [r3, #12]
 80125e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125e8:	f107 0308 	add.w	r3, r7, #8
 80125ec:	4619      	mov	r1, r3
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f7ff feb8 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80125f4:	4a0b      	ldr	r2, [pc, #44]	; (8012624 <SDMMC_CmdStopTransfer+0x74>)
 80125f6:	210c      	movs	r1, #12
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f000 f9f5 	bl	80129e8 <SDMMC_GetCmdResp1>
 80125fe:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	68db      	ldr	r3, [r3, #12]
 8012604:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801260c:	69fb      	ldr	r3, [r7, #28]
 801260e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012612:	d101      	bne.n	8012618 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012614:	2300      	movs	r3, #0
 8012616:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012618:	69fb      	ldr	r3, [r7, #28]
}
 801261a:	4618      	mov	r0, r3
 801261c:	3720      	adds	r7, #32
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}
 8012622:	bf00      	nop
 8012624:	05f5e100 	.word	0x05f5e100

08012628 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b08a      	sub	sp, #40	; 0x28
 801262c:	af00      	add	r7, sp, #0
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012638:	2307      	movs	r3, #7
 801263a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801263c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012640:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012642:	2300      	movs	r3, #0
 8012644:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801264a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801264c:	f107 0310 	add.w	r3, r7, #16
 8012650:	4619      	mov	r1, r3
 8012652:	68f8      	ldr	r0, [r7, #12]
 8012654:	f7ff fe86 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012658:	f241 3288 	movw	r2, #5000	; 0x1388
 801265c:	2107      	movs	r1, #7
 801265e:	68f8      	ldr	r0, [r7, #12]
 8012660:	f000 f9c2 	bl	80129e8 <SDMMC_GetCmdResp1>
 8012664:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8012666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012668:	4618      	mov	r0, r3
 801266a:	3728      	adds	r7, #40	; 0x28
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b088      	sub	sp, #32
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012678:	2300      	movs	r3, #0
 801267a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801267c:	2300      	movs	r3, #0
 801267e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012680:	2300      	movs	r3, #0
 8012682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012684:	2300      	movs	r3, #0
 8012686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801268c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801268e:	f107 0308 	add.w	r3, r7, #8
 8012692:	4619      	mov	r1, r3
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f7ff fe65 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f000 f976 	bl	801298c <SDMMC_GetCmdError>
 80126a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126a2:	69fb      	ldr	r3, [r7, #28]
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3720      	adds	r7, #32
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b088      	sub	sp, #32
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80126b4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80126b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80126ba:	2308      	movs	r3, #8
 80126bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80126be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126c4:	2300      	movs	r3, #0
 80126c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126ce:	f107 0308 	add.w	r3, r7, #8
 80126d2:	4619      	mov	r1, r3
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f7ff fe45 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 fb78 	bl	8012dd0 <SDMMC_GetCmdResp7>
 80126e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126e2:	69fb      	ldr	r3, [r7, #28]
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	3720      	adds	r7, #32
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}

080126ec <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b088      	sub	sp, #32
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
 80126f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80126fa:	2337      	movs	r3, #55	; 0x37
 80126fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80126fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012704:	2300      	movs	r3, #0
 8012706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801270c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801270e:	f107 0308 	add.w	r3, r7, #8
 8012712:	4619      	mov	r1, r3
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f7ff fe25 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801271a:	f241 3288 	movw	r2, #5000	; 0x1388
 801271e:	2137      	movs	r1, #55	; 0x37
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f000 f961 	bl	80129e8 <SDMMC_GetCmdResp1>
 8012726:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012728:	69fb      	ldr	r3, [r7, #28]
}
 801272a:	4618      	mov	r0, r3
 801272c:	3720      	adds	r7, #32
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}

08012732 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012732:	b580      	push	{r7, lr}
 8012734:	b088      	sub	sp, #32
 8012736:	af00      	add	r7, sp, #0
 8012738:	6078      	str	r0, [r7, #4]
 801273a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012740:	2329      	movs	r3, #41	; 0x29
 8012742:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801274a:	2300      	movs	r3, #0
 801274c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801274e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012752:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012754:	f107 0308 	add.w	r3, r7, #8
 8012758:	4619      	mov	r1, r3
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f7ff fe02 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f000 fa7d 	bl	8012c60 <SDMMC_GetCmdResp3>
 8012766:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012768:	69fb      	ldr	r3, [r7, #28]
}
 801276a:	4618      	mov	r0, r3
 801276c:	3720      	adds	r7, #32
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}

08012772 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012772:	b580      	push	{r7, lr}
 8012774:	b088      	sub	sp, #32
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
 801277a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012780:	2306      	movs	r3, #6
 8012782:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801278a:	2300      	movs	r3, #0
 801278c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801278e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012792:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012794:	f107 0308 	add.w	r3, r7, #8
 8012798:	4619      	mov	r1, r3
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f7ff fde2 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80127a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80127a4:	2106      	movs	r1, #6
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f000 f91e 	bl	80129e8 <SDMMC_GetCmdResp1>
 80127ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127ae:	69fb      	ldr	r3, [r7, #28]
}
 80127b0:	4618      	mov	r0, r3
 80127b2:	3720      	adds	r7, #32
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd80      	pop	{r7, pc}

080127b8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b088      	sub	sp, #32
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80127c0:	2300      	movs	r3, #0
 80127c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80127c4:	2333      	movs	r3, #51	; 0x33
 80127c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127ce:	2300      	movs	r3, #0
 80127d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127d8:	f107 0308 	add.w	r3, r7, #8
 80127dc:	4619      	mov	r1, r3
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f7ff fdc0 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80127e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80127e8:	2133      	movs	r1, #51	; 0x33
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f000 f8fc 	bl	80129e8 <SDMMC_GetCmdResp1>
 80127f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127f2:	69fb      	ldr	r3, [r7, #28]
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3720      	adds	r7, #32
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b088      	sub	sp, #32
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012804:	2300      	movs	r3, #0
 8012806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012808:	2302      	movs	r3, #2
 801280a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801280c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012812:	2300      	movs	r3, #0
 8012814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801281a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801281c:	f107 0308 	add.w	r3, r7, #8
 8012820:	4619      	mov	r1, r3
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f7ff fd9e 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 f9cf 	bl	8012bcc <SDMMC_GetCmdResp2>
 801282e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012830:	69fb      	ldr	r3, [r7, #28]
}
 8012832:	4618      	mov	r0, r3
 8012834:	3720      	adds	r7, #32
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}

0801283a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801283a:	b580      	push	{r7, lr}
 801283c:	b088      	sub	sp, #32
 801283e:	af00      	add	r7, sp, #0
 8012840:	6078      	str	r0, [r7, #4]
 8012842:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012848:	2309      	movs	r3, #9
 801284a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801284c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012850:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012852:	2300      	movs	r3, #0
 8012854:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801285a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801285c:	f107 0308 	add.w	r3, r7, #8
 8012860:	4619      	mov	r1, r3
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7ff fd7e 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012868:	6878      	ldr	r0, [r7, #4]
 801286a:	f000 f9af 	bl	8012bcc <SDMMC_GetCmdResp2>
 801286e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012870:	69fb      	ldr	r3, [r7, #28]
}
 8012872:	4618      	mov	r0, r3
 8012874:	3720      	adds	r7, #32
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}

0801287a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801287a:	b580      	push	{r7, lr}
 801287c:	b088      	sub	sp, #32
 801287e:	af00      	add	r7, sp, #0
 8012880:	6078      	str	r0, [r7, #4]
 8012882:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012884:	2300      	movs	r3, #0
 8012886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012888:	2303      	movs	r3, #3
 801288a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801288c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012892:	2300      	movs	r3, #0
 8012894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801289a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801289c:	f107 0308 	add.w	r3, r7, #8
 80128a0:	4619      	mov	r1, r3
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f7ff fd5e 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80128a8:	683a      	ldr	r2, [r7, #0]
 80128aa:	2103      	movs	r1, #3
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f000 fa17 	bl	8012ce0 <SDMMC_GetCmdResp6>
 80128b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128b4:	69fb      	ldr	r3, [r7, #28]
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3720      	adds	r7, #32
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}

080128be <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80128be:	b580      	push	{r7, lr}
 80128c0:	b088      	sub	sp, #32
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
 80128c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80128cc:	230d      	movs	r3, #13
 80128ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128d6:	2300      	movs	r3, #0
 80128d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128e0:	f107 0308 	add.w	r3, r7, #8
 80128e4:	4619      	mov	r1, r3
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f7ff fd3c 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80128ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80128f0:	210d      	movs	r1, #13
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f000 f878 	bl	80129e8 <SDMMC_GetCmdResp1>
 80128f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128fa:	69fb      	ldr	r3, [r7, #28]
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3720      	adds	r7, #32
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}

08012904 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b088      	sub	sp, #32
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801290c:	2300      	movs	r3, #0
 801290e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012910:	230d      	movs	r3, #13
 8012912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012914:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801291a:	2300      	movs	r3, #0
 801291c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801291e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012922:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012924:	f107 0308 	add.w	r3, r7, #8
 8012928:	4619      	mov	r1, r3
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f7ff fd1a 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012930:	f241 3288 	movw	r2, #5000	; 0x1388
 8012934:	210d      	movs	r1, #13
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f000 f856 	bl	80129e8 <SDMMC_GetCmdResp1>
 801293c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801293e:	69fb      	ldr	r3, [r7, #28]
}
 8012940:	4618      	mov	r0, r3
 8012942:	3720      	adds	r7, #32
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b088      	sub	sp, #32
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8012950:	2300      	movs	r3, #0
 8012952:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8012954:	230b      	movs	r3, #11
 8012956:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012958:	f44f 7380 	mov.w	r3, #256	; 0x100
 801295c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801295e:	2300      	movs	r3, #0
 8012960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012966:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012968:	f107 0308 	add.w	r3, r7, #8
 801296c:	4619      	mov	r1, r3
 801296e:	6878      	ldr	r0, [r7, #4]
 8012970:	f7ff fcf8 	bl	8012364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8012974:	f241 3288 	movw	r2, #5000	; 0x1388
 8012978:	210b      	movs	r1, #11
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f000 f834 	bl	80129e8 <SDMMC_GetCmdResp1>
 8012980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012982:	69fb      	ldr	r3, [r7, #28]
}
 8012984:	4618      	mov	r0, r3
 8012986:	3720      	adds	r7, #32
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}

0801298c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801298c:	b480      	push	{r7}
 801298e:	b085      	sub	sp, #20
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012994:	4b11      	ldr	r3, [pc, #68]	; (80129dc <SDMMC_GetCmdError+0x50>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	4a11      	ldr	r2, [pc, #68]	; (80129e0 <SDMMC_GetCmdError+0x54>)
 801299a:	fba2 2303 	umull	r2, r3, r2, r3
 801299e:	0a5b      	lsrs	r3, r3, #9
 80129a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80129a4:	fb02 f303 	mul.w	r3, r2, r3
 80129a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	1e5a      	subs	r2, r3, #1
 80129ae:	60fa      	str	r2, [r7, #12]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d102      	bne.n	80129ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129b8:	e009      	b.n	80129ce <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d0f1      	beq.n	80129aa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	4a06      	ldr	r2, [pc, #24]	; (80129e4 <SDMMC_GetCmdError+0x58>)
 80129ca:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80129cc:	2300      	movs	r3, #0
}
 80129ce:	4618      	mov	r0, r3
 80129d0:	3714      	adds	r7, #20
 80129d2:	46bd      	mov	sp, r7
 80129d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d8:	4770      	bx	lr
 80129da:	bf00      	nop
 80129dc:	24000010 	.word	0x24000010
 80129e0:	10624dd3 	.word	0x10624dd3
 80129e4:	002000c5 	.word	0x002000c5

080129e8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b088      	sub	sp, #32
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	460b      	mov	r3, r1
 80129f2:	607a      	str	r2, [r7, #4]
 80129f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80129f6:	4b70      	ldr	r3, [pc, #448]	; (8012bb8 <SDMMC_GetCmdResp1+0x1d0>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	4a70      	ldr	r2, [pc, #448]	; (8012bbc <SDMMC_GetCmdResp1+0x1d4>)
 80129fc:	fba2 2303 	umull	r2, r3, r2, r3
 8012a00:	0a5a      	lsrs	r2, r3, #9
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	fb02 f303 	mul.w	r3, r2, r3
 8012a08:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012a0a:	69fb      	ldr	r3, [r7, #28]
 8012a0c:	1e5a      	subs	r2, r3, #1
 8012a0e:	61fa      	str	r2, [r7, #28]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d102      	bne.n	8012a1a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a18:	e0c9      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a1e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012a20:	69ba      	ldr	r2, [r7, #24]
 8012a22:	4b67      	ldr	r3, [pc, #412]	; (8012bc0 <SDMMC_GetCmdResp1+0x1d8>)
 8012a24:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d0ef      	beq.n	8012a0a <SDMMC_GetCmdResp1+0x22>
 8012a2a:	69bb      	ldr	r3, [r7, #24]
 8012a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d1ea      	bne.n	8012a0a <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a38:	f003 0304 	and.w	r3, r3, #4
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d004      	beq.n	8012a4a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	2204      	movs	r2, #4
 8012a44:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a46:	2304      	movs	r3, #4
 8012a48:	e0b1      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a4e:	f003 0301 	and.w	r3, r3, #1
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d004      	beq.n	8012a60 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	2201      	movs	r2, #1
 8012a5a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	e0a6      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	4a58      	ldr	r2, [pc, #352]	; (8012bc4 <SDMMC_GetCmdResp1+0x1dc>)
 8012a64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012a66:	68f8      	ldr	r0, [r7, #12]
 8012a68:	f7ff fca6 	bl	80123b8 <SDMMC_GetCommandResponse>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	461a      	mov	r2, r3
 8012a70:	7afb      	ldrb	r3, [r7, #11]
 8012a72:	4293      	cmp	r3, r2
 8012a74:	d001      	beq.n	8012a7a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a76:	2301      	movs	r3, #1
 8012a78:	e099      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012a7a:	2100      	movs	r1, #0
 8012a7c:	68f8      	ldr	r0, [r7, #12]
 8012a7e:	f7ff fca8 	bl	80123d2 <SDMMC_GetResponse>
 8012a82:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012a84:	697a      	ldr	r2, [r7, #20]
 8012a86:	4b50      	ldr	r3, [pc, #320]	; (8012bc8 <SDMMC_GetCmdResp1+0x1e0>)
 8012a88:	4013      	ands	r3, r2
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d101      	bne.n	8012a92 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	e08d      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	da02      	bge.n	8012a9e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012a98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012a9c:	e087      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d001      	beq.n	8012aac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012aa8:	2340      	movs	r3, #64	; 0x40
 8012aaa:	e080      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012aac:	697b      	ldr	r3, [r7, #20]
 8012aae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d001      	beq.n	8012aba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012ab6:	2380      	movs	r3, #128	; 0x80
 8012ab8:	e079      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d002      	beq.n	8012aca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ac8:	e071      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d002      	beq.n	8012ada <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ad8:	e069      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d002      	beq.n	8012aea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ae8:	e061      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d002      	beq.n	8012afa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012af4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012af8:	e059      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d002      	beq.n	8012b0a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b08:	e051      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d002      	beq.n	8012b1a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012b18:	e049      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d002      	beq.n	8012b2a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012b24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012b28:	e041      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d002      	beq.n	8012b3a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012b38:	e039      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d002      	beq.n	8012b4a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012b44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012b48:	e031      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d002      	beq.n	8012b5a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012b54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012b58:	e029      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d002      	beq.n	8012b6a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012b64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012b68:	e021      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d002      	beq.n	8012b7a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012b74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012b78:	e019      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d002      	beq.n	8012b8a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012b84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012b88:	e011      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d002      	beq.n	8012b9a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012b94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012b98:	e009      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	f003 0308 	and.w	r3, r3, #8
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d002      	beq.n	8012baa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012ba4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012ba8:	e001      	b.n	8012bae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012bae:	4618      	mov	r0, r3
 8012bb0:	3720      	adds	r7, #32
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}
 8012bb6:	bf00      	nop
 8012bb8:	24000010 	.word	0x24000010
 8012bbc:	10624dd3 	.word	0x10624dd3
 8012bc0:	00200045 	.word	0x00200045
 8012bc4:	002000c5 	.word	0x002000c5
 8012bc8:	fdffe008 	.word	0xfdffe008

08012bcc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b085      	sub	sp, #20
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012bd4:	4b1f      	ldr	r3, [pc, #124]	; (8012c54 <SDMMC_GetCmdResp2+0x88>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	4a1f      	ldr	r2, [pc, #124]	; (8012c58 <SDMMC_GetCmdResp2+0x8c>)
 8012bda:	fba2 2303 	umull	r2, r3, r2, r3
 8012bde:	0a5b      	lsrs	r3, r3, #9
 8012be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012be4:	fb02 f303 	mul.w	r3, r2, r3
 8012be8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	1e5a      	subs	r2, r3, #1
 8012bee:	60fa      	str	r2, [r7, #12]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d102      	bne.n	8012bfa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012bf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012bf8:	e026      	b.n	8012c48 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d0ef      	beq.n	8012bea <SDMMC_GetCmdResp2+0x1e>
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d1ea      	bne.n	8012bea <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c18:	f003 0304 	and.w	r3, r3, #4
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d004      	beq.n	8012c2a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2204      	movs	r2, #4
 8012c24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c26:	2304      	movs	r3, #4
 8012c28:	e00e      	b.n	8012c48 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c2e:	f003 0301 	and.w	r3, r3, #1
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d004      	beq.n	8012c40 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	2201      	movs	r2, #1
 8012c3a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	e003      	b.n	8012c48 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	4a06      	ldr	r2, [pc, #24]	; (8012c5c <SDMMC_GetCmdResp2+0x90>)
 8012c44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012c46:	2300      	movs	r3, #0
}
 8012c48:	4618      	mov	r0, r3
 8012c4a:	3714      	adds	r7, #20
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr
 8012c54:	24000010 	.word	0x24000010
 8012c58:	10624dd3 	.word	0x10624dd3
 8012c5c:	002000c5 	.word	0x002000c5

08012c60 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012c60:	b480      	push	{r7}
 8012c62:	b085      	sub	sp, #20
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012c68:	4b1a      	ldr	r3, [pc, #104]	; (8012cd4 <SDMMC_GetCmdResp3+0x74>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	4a1a      	ldr	r2, [pc, #104]	; (8012cd8 <SDMMC_GetCmdResp3+0x78>)
 8012c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8012c72:	0a5b      	lsrs	r3, r3, #9
 8012c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c78:	fb02 f303 	mul.w	r3, r2, r3
 8012c7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	1e5a      	subs	r2, r3, #1
 8012c82:	60fa      	str	r2, [r7, #12]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d102      	bne.n	8012c8e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012c88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c8c:	e01b      	b.n	8012cc6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c94:	68bb      	ldr	r3, [r7, #8]
 8012c96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d0ef      	beq.n	8012c7e <SDMMC_GetCmdResp3+0x1e>
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d1ea      	bne.n	8012c7e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cac:	f003 0304 	and.w	r3, r3, #4
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d004      	beq.n	8012cbe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2204      	movs	r2, #4
 8012cb8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012cba:	2304      	movs	r3, #4
 8012cbc:	e003      	b.n	8012cc6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	4a06      	ldr	r2, [pc, #24]	; (8012cdc <SDMMC_GetCmdResp3+0x7c>)
 8012cc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012cc4:	2300      	movs	r3, #0
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3714      	adds	r7, #20
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr
 8012cd2:	bf00      	nop
 8012cd4:	24000010 	.word	0x24000010
 8012cd8:	10624dd3 	.word	0x10624dd3
 8012cdc:	002000c5 	.word	0x002000c5

08012ce0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b088      	sub	sp, #32
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	60f8      	str	r0, [r7, #12]
 8012ce8:	460b      	mov	r3, r1
 8012cea:	607a      	str	r2, [r7, #4]
 8012cec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012cee:	4b35      	ldr	r3, [pc, #212]	; (8012dc4 <SDMMC_GetCmdResp6+0xe4>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	4a35      	ldr	r2, [pc, #212]	; (8012dc8 <SDMMC_GetCmdResp6+0xe8>)
 8012cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8012cf8:	0a5b      	lsrs	r3, r3, #9
 8012cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8012cfe:	fb02 f303 	mul.w	r3, r2, r3
 8012d02:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	1e5a      	subs	r2, r3, #1
 8012d08:	61fa      	str	r2, [r7, #28]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d102      	bne.n	8012d14 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012d0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012d12:	e052      	b.n	8012dba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d18:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d1a:	69bb      	ldr	r3, [r7, #24]
 8012d1c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d0ef      	beq.n	8012d04 <SDMMC_GetCmdResp6+0x24>
 8012d24:	69bb      	ldr	r3, [r7, #24]
 8012d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d1ea      	bne.n	8012d04 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d32:	f003 0304 	and.w	r3, r3, #4
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d004      	beq.n	8012d44 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	2204      	movs	r2, #4
 8012d3e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012d40:	2304      	movs	r3, #4
 8012d42:	e03a      	b.n	8012dba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d48:	f003 0301 	and.w	r3, r3, #1
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d004      	beq.n	8012d5a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	2201      	movs	r2, #1
 8012d54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d56:	2301      	movs	r3, #1
 8012d58:	e02f      	b.n	8012dba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012d5a:	68f8      	ldr	r0, [r7, #12]
 8012d5c:	f7ff fb2c 	bl	80123b8 <SDMMC_GetCommandResponse>
 8012d60:	4603      	mov	r3, r0
 8012d62:	461a      	mov	r2, r3
 8012d64:	7afb      	ldrb	r3, [r7, #11]
 8012d66:	4293      	cmp	r3, r2
 8012d68:	d001      	beq.n	8012d6e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	e025      	b.n	8012dba <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	4a16      	ldr	r2, [pc, #88]	; (8012dcc <SDMMC_GetCmdResp6+0xec>)
 8012d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012d74:	2100      	movs	r1, #0
 8012d76:	68f8      	ldr	r0, [r7, #12]
 8012d78:	f7ff fb2b 	bl	80123d2 <SDMMC_GetResponse>
 8012d7c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d106      	bne.n	8012d96 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	0c1b      	lsrs	r3, r3, #16
 8012d8c:	b29a      	uxth	r2, r3
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012d92:	2300      	movs	r3, #0
 8012d94:	e011      	b.n	8012dba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d002      	beq.n	8012da6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012da4:	e009      	b.n	8012dba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012da6:	697b      	ldr	r3, [r7, #20]
 8012da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d002      	beq.n	8012db6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012db4:	e001      	b.n	8012dba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012db6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3720      	adds	r7, #32
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	24000010 	.word	0x24000010
 8012dc8:	10624dd3 	.word	0x10624dd3
 8012dcc:	002000c5 	.word	0x002000c5

08012dd0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b085      	sub	sp, #20
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012dd8:	4b22      	ldr	r3, [pc, #136]	; (8012e64 <SDMMC_GetCmdResp7+0x94>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	4a22      	ldr	r2, [pc, #136]	; (8012e68 <SDMMC_GetCmdResp7+0x98>)
 8012dde:	fba2 2303 	umull	r2, r3, r2, r3
 8012de2:	0a5b      	lsrs	r3, r3, #9
 8012de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012de8:	fb02 f303 	mul.w	r3, r2, r3
 8012dec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	1e5a      	subs	r2, r3, #1
 8012df2:	60fa      	str	r2, [r7, #12]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d102      	bne.n	8012dfe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012df8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012dfc:	e02c      	b.n	8012e58 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d0ef      	beq.n	8012dee <SDMMC_GetCmdResp7+0x1e>
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d1ea      	bne.n	8012dee <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e1c:	f003 0304 	and.w	r3, r3, #4
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d004      	beq.n	8012e2e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2204      	movs	r2, #4
 8012e28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012e2a:	2304      	movs	r3, #4
 8012e2c:	e014      	b.n	8012e58 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e32:	f003 0301 	and.w	r3, r3, #1
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d004      	beq.n	8012e44 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2201      	movs	r2, #1
 8012e3e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e40:	2301      	movs	r3, #1
 8012e42:	e009      	b.n	8012e58 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d002      	beq.n	8012e56 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2240      	movs	r2, #64	; 0x40
 8012e54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012e56:	2300      	movs	r3, #0

}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3714      	adds	r7, #20
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e62:	4770      	bx	lr
 8012e64:	24000010 	.word	0x24000010
 8012e68:	10624dd3 	.word	0x10624dd3

08012e6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012e6c:	b084      	sub	sp, #16
 8012e6e:	b580      	push	{r7, lr}
 8012e70:	b084      	sub	sp, #16
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	6078      	str	r0, [r7, #4]
 8012e76:	f107 001c 	add.w	r0, r7, #28
 8012e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e80:	2b01      	cmp	r3, #1
 8012e82:	d120      	bne.n	8012ec6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	68da      	ldr	r2, [r3, #12]
 8012e94:	4b25      	ldr	r3, [pc, #148]	; (8012f2c <USB_CoreInit+0xc0>)
 8012e96:	4013      	ands	r3, r2
 8012e98:	687a      	ldr	r2, [r7, #4]
 8012e9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	68db      	ldr	r3, [r3, #12]
 8012ea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012eaa:	2b01      	cmp	r3, #1
 8012eac:	d105      	bne.n	8012eba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	68db      	ldr	r3, [r3, #12]
 8012eb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f001 fabe 	bl	801443c <USB_CoreReset>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	73fb      	strb	r3, [r7, #15]
 8012ec4:	e01a      	b.n	8012efc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	68db      	ldr	r3, [r3, #12]
 8012eca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f001 fab2 	bl	801443c <USB_CoreReset>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d106      	bne.n	8012ef0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ee6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	639a      	str	r2, [r3, #56]	; 0x38
 8012eee:	e005      	b.n	8012efc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ef4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	d10b      	bne.n	8012f1a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	689b      	ldr	r3, [r3, #8]
 8012f06:	f043 0206 	orr.w	r2, r3, #6
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	689b      	ldr	r3, [r3, #8]
 8012f12:	f043 0220 	orr.w	r2, r3, #32
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3710      	adds	r7, #16
 8012f20:	46bd      	mov	sp, r7
 8012f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012f26:	b004      	add	sp, #16
 8012f28:	4770      	bx	lr
 8012f2a:	bf00      	nop
 8012f2c:	ffbdffbf 	.word	0xffbdffbf

08012f30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012f30:	b480      	push	{r7}
 8012f32:	b087      	sub	sp, #28
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	60f8      	str	r0, [r7, #12]
 8012f38:	60b9      	str	r1, [r7, #8]
 8012f3a:	4613      	mov	r3, r2
 8012f3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012f3e:	79fb      	ldrb	r3, [r7, #7]
 8012f40:	2b02      	cmp	r3, #2
 8012f42:	d165      	bne.n	8013010 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	4a41      	ldr	r2, [pc, #260]	; (801304c <USB_SetTurnaroundTime+0x11c>)
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	d906      	bls.n	8012f5a <USB_SetTurnaroundTime+0x2a>
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	4a40      	ldr	r2, [pc, #256]	; (8013050 <USB_SetTurnaroundTime+0x120>)
 8012f50:	4293      	cmp	r3, r2
 8012f52:	d802      	bhi.n	8012f5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012f54:	230f      	movs	r3, #15
 8012f56:	617b      	str	r3, [r7, #20]
 8012f58:	e062      	b.n	8013020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	4a3c      	ldr	r2, [pc, #240]	; (8013050 <USB_SetTurnaroundTime+0x120>)
 8012f5e:	4293      	cmp	r3, r2
 8012f60:	d906      	bls.n	8012f70 <USB_SetTurnaroundTime+0x40>
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	4a3b      	ldr	r2, [pc, #236]	; (8013054 <USB_SetTurnaroundTime+0x124>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d802      	bhi.n	8012f70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012f6a:	230e      	movs	r3, #14
 8012f6c:	617b      	str	r3, [r7, #20]
 8012f6e:	e057      	b.n	8013020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	4a38      	ldr	r2, [pc, #224]	; (8013054 <USB_SetTurnaroundTime+0x124>)
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d906      	bls.n	8012f86 <USB_SetTurnaroundTime+0x56>
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	4a37      	ldr	r2, [pc, #220]	; (8013058 <USB_SetTurnaroundTime+0x128>)
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	d802      	bhi.n	8012f86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012f80:	230d      	movs	r3, #13
 8012f82:	617b      	str	r3, [r7, #20]
 8012f84:	e04c      	b.n	8013020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	4a33      	ldr	r2, [pc, #204]	; (8013058 <USB_SetTurnaroundTime+0x128>)
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	d906      	bls.n	8012f9c <USB_SetTurnaroundTime+0x6c>
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	4a32      	ldr	r2, [pc, #200]	; (801305c <USB_SetTurnaroundTime+0x12c>)
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d802      	bhi.n	8012f9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012f96:	230c      	movs	r3, #12
 8012f98:	617b      	str	r3, [r7, #20]
 8012f9a:	e041      	b.n	8013020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	4a2f      	ldr	r2, [pc, #188]	; (801305c <USB_SetTurnaroundTime+0x12c>)
 8012fa0:	4293      	cmp	r3, r2
 8012fa2:	d906      	bls.n	8012fb2 <USB_SetTurnaroundTime+0x82>
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	4a2e      	ldr	r2, [pc, #184]	; (8013060 <USB_SetTurnaroundTime+0x130>)
 8012fa8:	4293      	cmp	r3, r2
 8012faa:	d802      	bhi.n	8012fb2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012fac:	230b      	movs	r3, #11
 8012fae:	617b      	str	r3, [r7, #20]
 8012fb0:	e036      	b.n	8013020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	4a2a      	ldr	r2, [pc, #168]	; (8013060 <USB_SetTurnaroundTime+0x130>)
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d906      	bls.n	8012fc8 <USB_SetTurnaroundTime+0x98>
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	4a29      	ldr	r2, [pc, #164]	; (8013064 <USB_SetTurnaroundTime+0x134>)
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d802      	bhi.n	8012fc8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012fc2:	230a      	movs	r3, #10
 8012fc4:	617b      	str	r3, [r7, #20]
 8012fc6:	e02b      	b.n	8013020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	4a26      	ldr	r2, [pc, #152]	; (8013064 <USB_SetTurnaroundTime+0x134>)
 8012fcc:	4293      	cmp	r3, r2
 8012fce:	d906      	bls.n	8012fde <USB_SetTurnaroundTime+0xae>
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	4a25      	ldr	r2, [pc, #148]	; (8013068 <USB_SetTurnaroundTime+0x138>)
 8012fd4:	4293      	cmp	r3, r2
 8012fd6:	d802      	bhi.n	8012fde <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012fd8:	2309      	movs	r3, #9
 8012fda:	617b      	str	r3, [r7, #20]
 8012fdc:	e020      	b.n	8013020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	4a21      	ldr	r2, [pc, #132]	; (8013068 <USB_SetTurnaroundTime+0x138>)
 8012fe2:	4293      	cmp	r3, r2
 8012fe4:	d906      	bls.n	8012ff4 <USB_SetTurnaroundTime+0xc4>
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	4a20      	ldr	r2, [pc, #128]	; (801306c <USB_SetTurnaroundTime+0x13c>)
 8012fea:	4293      	cmp	r3, r2
 8012fec:	d802      	bhi.n	8012ff4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012fee:	2308      	movs	r3, #8
 8012ff0:	617b      	str	r3, [r7, #20]
 8012ff2:	e015      	b.n	8013020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	4a1d      	ldr	r2, [pc, #116]	; (801306c <USB_SetTurnaroundTime+0x13c>)
 8012ff8:	4293      	cmp	r3, r2
 8012ffa:	d906      	bls.n	801300a <USB_SetTurnaroundTime+0xda>
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	4a1c      	ldr	r2, [pc, #112]	; (8013070 <USB_SetTurnaroundTime+0x140>)
 8013000:	4293      	cmp	r3, r2
 8013002:	d802      	bhi.n	801300a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013004:	2307      	movs	r3, #7
 8013006:	617b      	str	r3, [r7, #20]
 8013008:	e00a      	b.n	8013020 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801300a:	2306      	movs	r3, #6
 801300c:	617b      	str	r3, [r7, #20]
 801300e:	e007      	b.n	8013020 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013010:	79fb      	ldrb	r3, [r7, #7]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d102      	bne.n	801301c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013016:	2309      	movs	r3, #9
 8013018:	617b      	str	r3, [r7, #20]
 801301a:	e001      	b.n	8013020 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801301c:	2309      	movs	r3, #9
 801301e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	68da      	ldr	r2, [r3, #12]
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	029b      	lsls	r3, r3, #10
 8013034:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013038:	431a      	orrs	r2, r3
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801303e:	2300      	movs	r3, #0
}
 8013040:	4618      	mov	r0, r3
 8013042:	371c      	adds	r7, #28
 8013044:	46bd      	mov	sp, r7
 8013046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304a:	4770      	bx	lr
 801304c:	00d8acbf 	.word	0x00d8acbf
 8013050:	00e4e1bf 	.word	0x00e4e1bf
 8013054:	00f423ff 	.word	0x00f423ff
 8013058:	0106737f 	.word	0x0106737f
 801305c:	011a499f 	.word	0x011a499f
 8013060:	01312cff 	.word	0x01312cff
 8013064:	014ca43f 	.word	0x014ca43f
 8013068:	016e35ff 	.word	0x016e35ff
 801306c:	01a6ab1f 	.word	0x01a6ab1f
 8013070:	01e847ff 	.word	0x01e847ff

08013074 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013074:	b480      	push	{r7}
 8013076:	b083      	sub	sp, #12
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	689b      	ldr	r3, [r3, #8]
 8013080:	f043 0201 	orr.w	r2, r3, #1
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013088:	2300      	movs	r3, #0
}
 801308a:	4618      	mov	r0, r3
 801308c:	370c      	adds	r7, #12
 801308e:	46bd      	mov	sp, r7
 8013090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013094:	4770      	bx	lr

08013096 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013096:	b480      	push	{r7}
 8013098:	b083      	sub	sp, #12
 801309a:	af00      	add	r7, sp, #0
 801309c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	689b      	ldr	r3, [r3, #8]
 80130a2:	f023 0201 	bic.w	r2, r3, #1
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80130aa:	2300      	movs	r3, #0
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	370c      	adds	r7, #12
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr

080130b8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b082      	sub	sp, #8
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	460b      	mov	r3, r1
 80130c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	68db      	ldr	r3, [r3, #12]
 80130c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80130d0:	78fb      	ldrb	r3, [r7, #3]
 80130d2:	2b01      	cmp	r3, #1
 80130d4:	d106      	bne.n	80130e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	60da      	str	r2, [r3, #12]
 80130e2:	e00b      	b.n	80130fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80130e4:	78fb      	ldrb	r3, [r7, #3]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d106      	bne.n	80130f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	68db      	ldr	r3, [r3, #12]
 80130ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	60da      	str	r2, [r3, #12]
 80130f6:	e001      	b.n	80130fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80130f8:	2301      	movs	r3, #1
 80130fa:	e003      	b.n	8013104 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80130fc:	2032      	movs	r0, #50	; 0x32
 80130fe:	f7f2 fbcb 	bl	8005898 <HAL_Delay>

  return HAL_OK;
 8013102:	2300      	movs	r3, #0
}
 8013104:	4618      	mov	r0, r3
 8013106:	3708      	adds	r7, #8
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801310c:	b084      	sub	sp, #16
 801310e:	b580      	push	{r7, lr}
 8013110:	b086      	sub	sp, #24
 8013112:	af00      	add	r7, sp, #0
 8013114:	6078      	str	r0, [r7, #4]
 8013116:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801311a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801311e:	2300      	movs	r3, #0
 8013120:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013126:	2300      	movs	r3, #0
 8013128:	613b      	str	r3, [r7, #16]
 801312a:	e009      	b.n	8013140 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801312c:	687a      	ldr	r2, [r7, #4]
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	3340      	adds	r3, #64	; 0x40
 8013132:	009b      	lsls	r3, r3, #2
 8013134:	4413      	add	r3, r2
 8013136:	2200      	movs	r2, #0
 8013138:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801313a:	693b      	ldr	r3, [r7, #16]
 801313c:	3301      	adds	r3, #1
 801313e:	613b      	str	r3, [r7, #16]
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	2b0e      	cmp	r3, #14
 8013144:	d9f2      	bls.n	801312c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013148:	2b00      	cmp	r3, #0
 801314a:	d11c      	bne.n	8013186 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013152:	685b      	ldr	r3, [r3, #4]
 8013154:	68fa      	ldr	r2, [r7, #12]
 8013156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801315a:	f043 0302 	orr.w	r3, r3, #2
 801315e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013164:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	601a      	str	r2, [r3, #0]
 8013184:	e005      	b.n	8013192 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801318a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013198:	461a      	mov	r2, r3
 801319a:	2300      	movs	r3, #0
 801319c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131a4:	4619      	mov	r1, r3
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131ac:	461a      	mov	r2, r3
 80131ae:	680b      	ldr	r3, [r1, #0]
 80131b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80131b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b4:	2b01      	cmp	r3, #1
 80131b6:	d10c      	bne.n	80131d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80131b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d104      	bne.n	80131c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80131be:	2100      	movs	r1, #0
 80131c0:	6878      	ldr	r0, [r7, #4]
 80131c2:	f000 f949 	bl	8013458 <USB_SetDevSpeed>
 80131c6:	e008      	b.n	80131da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80131c8:	2101      	movs	r1, #1
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f000 f944 	bl	8013458 <USB_SetDevSpeed>
 80131d0:	e003      	b.n	80131da <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80131d2:	2103      	movs	r1, #3
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f000 f93f 	bl	8013458 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80131da:	2110      	movs	r1, #16
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f000 f8f3 	bl	80133c8 <USB_FlushTxFifo>
 80131e2:	4603      	mov	r3, r0
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d001      	beq.n	80131ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80131e8:	2301      	movs	r3, #1
 80131ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f000 f911 	bl	8013414 <USB_FlushRxFifo>
 80131f2:	4603      	mov	r3, r0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d001      	beq.n	80131fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80131f8:	2301      	movs	r3, #1
 80131fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013202:	461a      	mov	r2, r3
 8013204:	2300      	movs	r3, #0
 8013206:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801320e:	461a      	mov	r2, r3
 8013210:	2300      	movs	r3, #0
 8013212:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801321a:	461a      	mov	r2, r3
 801321c:	2300      	movs	r3, #0
 801321e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013220:	2300      	movs	r3, #0
 8013222:	613b      	str	r3, [r7, #16]
 8013224:	e043      	b.n	80132ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	015a      	lsls	r2, r3, #5
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	4413      	add	r3, r2
 801322e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801323c:	d118      	bne.n	8013270 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801323e:	693b      	ldr	r3, [r7, #16]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d10a      	bne.n	801325a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	015a      	lsls	r2, r3, #5
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	4413      	add	r3, r2
 801324c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013250:	461a      	mov	r2, r3
 8013252:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013256:	6013      	str	r3, [r2, #0]
 8013258:	e013      	b.n	8013282 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	015a      	lsls	r2, r3, #5
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	4413      	add	r3, r2
 8013262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013266:	461a      	mov	r2, r3
 8013268:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801326c:	6013      	str	r3, [r2, #0]
 801326e:	e008      	b.n	8013282 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	015a      	lsls	r2, r3, #5
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	4413      	add	r3, r2
 8013278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801327c:	461a      	mov	r2, r3
 801327e:	2300      	movs	r3, #0
 8013280:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	015a      	lsls	r2, r3, #5
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	4413      	add	r3, r2
 801328a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801328e:	461a      	mov	r2, r3
 8013290:	2300      	movs	r3, #0
 8013292:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	015a      	lsls	r2, r3, #5
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	4413      	add	r3, r2
 801329c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132a0:	461a      	mov	r2, r3
 80132a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80132a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	3301      	adds	r3, #1
 80132ac:	613b      	str	r3, [r7, #16]
 80132ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b0:	693a      	ldr	r2, [r7, #16]
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d3b7      	bcc.n	8013226 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80132b6:	2300      	movs	r3, #0
 80132b8:	613b      	str	r3, [r7, #16]
 80132ba:	e043      	b.n	8013344 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80132bc:	693b      	ldr	r3, [r7, #16]
 80132be:	015a      	lsls	r2, r3, #5
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	4413      	add	r3, r2
 80132c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132d2:	d118      	bne.n	8013306 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d10a      	bne.n	80132f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	015a      	lsls	r2, r3, #5
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	4413      	add	r3, r2
 80132e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132e6:	461a      	mov	r2, r3
 80132e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80132ec:	6013      	str	r3, [r2, #0]
 80132ee:	e013      	b.n	8013318 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80132f0:	693b      	ldr	r3, [r7, #16]
 80132f2:	015a      	lsls	r2, r3, #5
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	4413      	add	r3, r2
 80132f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132fc:	461a      	mov	r2, r3
 80132fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013302:	6013      	str	r3, [r2, #0]
 8013304:	e008      	b.n	8013318 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	015a      	lsls	r2, r3, #5
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	4413      	add	r3, r2
 801330e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013312:	461a      	mov	r2, r3
 8013314:	2300      	movs	r3, #0
 8013316:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	015a      	lsls	r2, r3, #5
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	4413      	add	r3, r2
 8013320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013324:	461a      	mov	r2, r3
 8013326:	2300      	movs	r3, #0
 8013328:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	015a      	lsls	r2, r3, #5
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	4413      	add	r3, r2
 8013332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013336:	461a      	mov	r2, r3
 8013338:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801333c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801333e:	693b      	ldr	r3, [r7, #16]
 8013340:	3301      	adds	r3, #1
 8013342:	613b      	str	r3, [r7, #16]
 8013344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013346:	693a      	ldr	r2, [r7, #16]
 8013348:	429a      	cmp	r2, r3
 801334a:	d3b7      	bcc.n	80132bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013352:	691b      	ldr	r3, [r3, #16]
 8013354:	68fa      	ldr	r2, [r7, #12]
 8013356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801335a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801335e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2200      	movs	r2, #0
 8013364:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801336c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013370:	2b00      	cmp	r3, #0
 8013372:	d105      	bne.n	8013380 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	699b      	ldr	r3, [r3, #24]
 8013378:	f043 0210 	orr.w	r2, r3, #16
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	699a      	ldr	r2, [r3, #24]
 8013384:	4b0e      	ldr	r3, [pc, #56]	; (80133c0 <USB_DevInit+0x2b4>)
 8013386:	4313      	orrs	r3, r2
 8013388:	687a      	ldr	r2, [r7, #4]
 801338a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801338c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801338e:	2b00      	cmp	r3, #0
 8013390:	d005      	beq.n	801339e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	699b      	ldr	r3, [r3, #24]
 8013396:	f043 0208 	orr.w	r2, r3, #8
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801339e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133a0:	2b01      	cmp	r3, #1
 80133a2:	d105      	bne.n	80133b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	699a      	ldr	r2, [r3, #24]
 80133a8:	4b06      	ldr	r3, [pc, #24]	; (80133c4 <USB_DevInit+0x2b8>)
 80133aa:	4313      	orrs	r3, r2
 80133ac:	687a      	ldr	r2, [r7, #4]
 80133ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80133b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3718      	adds	r7, #24
 80133b6:	46bd      	mov	sp, r7
 80133b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80133bc:	b004      	add	sp, #16
 80133be:	4770      	bx	lr
 80133c0:	803c3800 	.word	0x803c3800
 80133c4:	40000004 	.word	0x40000004

080133c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80133c8:	b480      	push	{r7}
 80133ca:	b085      	sub	sp, #20
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80133d2:	2300      	movs	r3, #0
 80133d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	019b      	lsls	r3, r3, #6
 80133da:	f043 0220 	orr.w	r2, r3, #32
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	3301      	adds	r3, #1
 80133e6:	60fb      	str	r3, [r7, #12]
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	4a09      	ldr	r2, [pc, #36]	; (8013410 <USB_FlushTxFifo+0x48>)
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d901      	bls.n	80133f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80133f0:	2303      	movs	r3, #3
 80133f2:	e006      	b.n	8013402 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	691b      	ldr	r3, [r3, #16]
 80133f8:	f003 0320 	and.w	r3, r3, #32
 80133fc:	2b20      	cmp	r3, #32
 80133fe:	d0f0      	beq.n	80133e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8013400:	2300      	movs	r3, #0
}
 8013402:	4618      	mov	r0, r3
 8013404:	3714      	adds	r7, #20
 8013406:	46bd      	mov	sp, r7
 8013408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340c:	4770      	bx	lr
 801340e:	bf00      	nop
 8013410:	00030d40 	.word	0x00030d40

08013414 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013414:	b480      	push	{r7}
 8013416:	b085      	sub	sp, #20
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801341c:	2300      	movs	r3, #0
 801341e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	2210      	movs	r2, #16
 8013424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	3301      	adds	r3, #1
 801342a:	60fb      	str	r3, [r7, #12]
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	4a09      	ldr	r2, [pc, #36]	; (8013454 <USB_FlushRxFifo+0x40>)
 8013430:	4293      	cmp	r3, r2
 8013432:	d901      	bls.n	8013438 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8013434:	2303      	movs	r3, #3
 8013436:	e006      	b.n	8013446 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	691b      	ldr	r3, [r3, #16]
 801343c:	f003 0310 	and.w	r3, r3, #16
 8013440:	2b10      	cmp	r3, #16
 8013442:	d0f0      	beq.n	8013426 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8013444:	2300      	movs	r3, #0
}
 8013446:	4618      	mov	r0, r3
 8013448:	3714      	adds	r7, #20
 801344a:	46bd      	mov	sp, r7
 801344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013450:	4770      	bx	lr
 8013452:	bf00      	nop
 8013454:	00030d40 	.word	0x00030d40

08013458 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013458:	b480      	push	{r7}
 801345a:	b085      	sub	sp, #20
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
 8013460:	460b      	mov	r3, r1
 8013462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801346e:	681a      	ldr	r2, [r3, #0]
 8013470:	78fb      	ldrb	r3, [r7, #3]
 8013472:	68f9      	ldr	r1, [r7, #12]
 8013474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013478:	4313      	orrs	r3, r2
 801347a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801347c:	2300      	movs	r3, #0
}
 801347e:	4618      	mov	r0, r3
 8013480:	3714      	adds	r7, #20
 8013482:	46bd      	mov	sp, r7
 8013484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013488:	4770      	bx	lr

0801348a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801348a:	b480      	push	{r7}
 801348c:	b087      	sub	sp, #28
 801348e:	af00      	add	r7, sp, #0
 8013490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801349c:	689b      	ldr	r3, [r3, #8]
 801349e:	f003 0306 	and.w	r3, r3, #6
 80134a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d102      	bne.n	80134b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80134aa:	2300      	movs	r3, #0
 80134ac:	75fb      	strb	r3, [r7, #23]
 80134ae:	e00a      	b.n	80134c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	2b02      	cmp	r3, #2
 80134b4:	d002      	beq.n	80134bc <USB_GetDevSpeed+0x32>
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	2b06      	cmp	r3, #6
 80134ba:	d102      	bne.n	80134c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80134bc:	2302      	movs	r3, #2
 80134be:	75fb      	strb	r3, [r7, #23]
 80134c0:	e001      	b.n	80134c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80134c2:	230f      	movs	r3, #15
 80134c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80134c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	371c      	adds	r7, #28
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr

080134d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80134d4:	b480      	push	{r7}
 80134d6:	b085      	sub	sp, #20
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	785b      	ldrb	r3, [r3, #1]
 80134ec:	2b01      	cmp	r3, #1
 80134ee:	d139      	bne.n	8013564 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134f6:	69da      	ldr	r2, [r3, #28]
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	f003 030f 	and.w	r3, r3, #15
 8013500:	2101      	movs	r1, #1
 8013502:	fa01 f303 	lsl.w	r3, r1, r3
 8013506:	b29b      	uxth	r3, r3
 8013508:	68f9      	ldr	r1, [r7, #12]
 801350a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801350e:	4313      	orrs	r3, r2
 8013510:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	015a      	lsls	r2, r3, #5
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	4413      	add	r3, r2
 801351a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013524:	2b00      	cmp	r3, #0
 8013526:	d153      	bne.n	80135d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	015a      	lsls	r2, r3, #5
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	4413      	add	r3, r2
 8013530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013534:	681a      	ldr	r2, [r3, #0]
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	689b      	ldr	r3, [r3, #8]
 801353a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	78db      	ldrb	r3, [r3, #3]
 8013542:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013544:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	059b      	lsls	r3, r3, #22
 801354a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801354c:	431a      	orrs	r2, r3
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	0159      	lsls	r1, r3, #5
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	440b      	add	r3, r1
 8013556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801355a:	4619      	mov	r1, r3
 801355c:	4b20      	ldr	r3, [pc, #128]	; (80135e0 <USB_ActivateEndpoint+0x10c>)
 801355e:	4313      	orrs	r3, r2
 8013560:	600b      	str	r3, [r1, #0]
 8013562:	e035      	b.n	80135d0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801356a:	69da      	ldr	r2, [r3, #28]
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	f003 030f 	and.w	r3, r3, #15
 8013574:	2101      	movs	r1, #1
 8013576:	fa01 f303 	lsl.w	r3, r1, r3
 801357a:	041b      	lsls	r3, r3, #16
 801357c:	68f9      	ldr	r1, [r7, #12]
 801357e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013582:	4313      	orrs	r3, r2
 8013584:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	015a      	lsls	r2, r3, #5
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	4413      	add	r3, r2
 801358e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013598:	2b00      	cmp	r3, #0
 801359a:	d119      	bne.n	80135d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	015a      	lsls	r2, r3, #5
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	4413      	add	r3, r2
 80135a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135a8:	681a      	ldr	r2, [r3, #0]
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	689b      	ldr	r3, [r3, #8]
 80135ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	78db      	ldrb	r3, [r3, #3]
 80135b6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80135b8:	430b      	orrs	r3, r1
 80135ba:	431a      	orrs	r2, r3
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	0159      	lsls	r1, r3, #5
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	440b      	add	r3, r1
 80135c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135c8:	4619      	mov	r1, r3
 80135ca:	4b05      	ldr	r3, [pc, #20]	; (80135e0 <USB_ActivateEndpoint+0x10c>)
 80135cc:	4313      	orrs	r3, r2
 80135ce:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80135d0:	2300      	movs	r3, #0
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3714      	adds	r7, #20
 80135d6:	46bd      	mov	sp, r7
 80135d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135dc:	4770      	bx	lr
 80135de:	bf00      	nop
 80135e0:	10008000 	.word	0x10008000

080135e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b085      	sub	sp, #20
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	785b      	ldrb	r3, [r3, #1]
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d161      	bne.n	80136c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	015a      	lsls	r2, r3, #5
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	4413      	add	r3, r2
 8013608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013616:	d11f      	bne.n	8013658 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	015a      	lsls	r2, r3, #5
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	4413      	add	r3, r2
 8013620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	68ba      	ldr	r2, [r7, #8]
 8013628:	0151      	lsls	r1, r2, #5
 801362a:	68fa      	ldr	r2, [r7, #12]
 801362c:	440a      	add	r2, r1
 801362e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013636:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	015a      	lsls	r2, r3, #5
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	4413      	add	r3, r2
 8013640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	68ba      	ldr	r2, [r7, #8]
 8013648:	0151      	lsls	r1, r2, #5
 801364a:	68fa      	ldr	r2, [r7, #12]
 801364c:	440a      	add	r2, r1
 801364e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013652:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801365e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013660:	683b      	ldr	r3, [r7, #0]
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	f003 030f 	and.w	r3, r3, #15
 8013668:	2101      	movs	r1, #1
 801366a:	fa01 f303 	lsl.w	r3, r1, r3
 801366e:	b29b      	uxth	r3, r3
 8013670:	43db      	mvns	r3, r3
 8013672:	68f9      	ldr	r1, [r7, #12]
 8013674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013678:	4013      	ands	r3, r2
 801367a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013682:	69da      	ldr	r2, [r3, #28]
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	f003 030f 	and.w	r3, r3, #15
 801368c:	2101      	movs	r1, #1
 801368e:	fa01 f303 	lsl.w	r3, r1, r3
 8013692:	b29b      	uxth	r3, r3
 8013694:	43db      	mvns	r3, r3
 8013696:	68f9      	ldr	r1, [r7, #12]
 8013698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801369c:	4013      	ands	r3, r2
 801369e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	015a      	lsls	r2, r3, #5
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	4413      	add	r3, r2
 80136a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136ac:	681a      	ldr	r2, [r3, #0]
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	0159      	lsls	r1, r3, #5
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	440b      	add	r3, r1
 80136b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136ba:	4619      	mov	r1, r3
 80136bc:	4b35      	ldr	r3, [pc, #212]	; (8013794 <USB_DeactivateEndpoint+0x1b0>)
 80136be:	4013      	ands	r3, r2
 80136c0:	600b      	str	r3, [r1, #0]
 80136c2:	e060      	b.n	8013786 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	015a      	lsls	r2, r3, #5
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	4413      	add	r3, r2
 80136cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80136d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80136da:	d11f      	bne.n	801371c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	015a      	lsls	r2, r3, #5
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	4413      	add	r3, r2
 80136e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	68ba      	ldr	r2, [r7, #8]
 80136ec:	0151      	lsls	r1, r2, #5
 80136ee:	68fa      	ldr	r2, [r7, #12]
 80136f0:	440a      	add	r2, r1
 80136f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80136fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	015a      	lsls	r2, r3, #5
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	4413      	add	r3, r2
 8013704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	68ba      	ldr	r2, [r7, #8]
 801370c:	0151      	lsls	r1, r2, #5
 801370e:	68fa      	ldr	r2, [r7, #12]
 8013710:	440a      	add	r2, r1
 8013712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013716:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801371a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	f003 030f 	and.w	r3, r3, #15
 801372c:	2101      	movs	r1, #1
 801372e:	fa01 f303 	lsl.w	r3, r1, r3
 8013732:	041b      	lsls	r3, r3, #16
 8013734:	43db      	mvns	r3, r3
 8013736:	68f9      	ldr	r1, [r7, #12]
 8013738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801373c:	4013      	ands	r3, r2
 801373e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013746:	69da      	ldr	r2, [r3, #28]
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	f003 030f 	and.w	r3, r3, #15
 8013750:	2101      	movs	r1, #1
 8013752:	fa01 f303 	lsl.w	r3, r1, r3
 8013756:	041b      	lsls	r3, r3, #16
 8013758:	43db      	mvns	r3, r3
 801375a:	68f9      	ldr	r1, [r7, #12]
 801375c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013760:	4013      	ands	r3, r2
 8013762:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	015a      	lsls	r2, r3, #5
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	4413      	add	r3, r2
 801376c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013770:	681a      	ldr	r2, [r3, #0]
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	0159      	lsls	r1, r3, #5
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	440b      	add	r3, r1
 801377a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801377e:	4619      	mov	r1, r3
 8013780:	4b05      	ldr	r3, [pc, #20]	; (8013798 <USB_DeactivateEndpoint+0x1b4>)
 8013782:	4013      	ands	r3, r2
 8013784:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013786:	2300      	movs	r3, #0
}
 8013788:	4618      	mov	r0, r3
 801378a:	3714      	adds	r7, #20
 801378c:	46bd      	mov	sp, r7
 801378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013792:	4770      	bx	lr
 8013794:	ec337800 	.word	0xec337800
 8013798:	eff37800 	.word	0xeff37800

0801379c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b08a      	sub	sp, #40	; 0x28
 80137a0:	af02      	add	r7, sp, #8
 80137a2:	60f8      	str	r0, [r7, #12]
 80137a4:	60b9      	str	r1, [r7, #8]
 80137a6:	4613      	mov	r3, r2
 80137a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80137b4:	68bb      	ldr	r3, [r7, #8]
 80137b6:	785b      	ldrb	r3, [r3, #1]
 80137b8:	2b01      	cmp	r3, #1
 80137ba:	f040 8163 	bne.w	8013a84 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	695b      	ldr	r3, [r3, #20]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d132      	bne.n	801382c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80137c6:	69bb      	ldr	r3, [r7, #24]
 80137c8:	015a      	lsls	r2, r3, #5
 80137ca:	69fb      	ldr	r3, [r7, #28]
 80137cc:	4413      	add	r3, r2
 80137ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137d2:	691a      	ldr	r2, [r3, #16]
 80137d4:	69bb      	ldr	r3, [r7, #24]
 80137d6:	0159      	lsls	r1, r3, #5
 80137d8:	69fb      	ldr	r3, [r7, #28]
 80137da:	440b      	add	r3, r1
 80137dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137e0:	4619      	mov	r1, r3
 80137e2:	4ba5      	ldr	r3, [pc, #660]	; (8013a78 <USB_EPStartXfer+0x2dc>)
 80137e4:	4013      	ands	r3, r2
 80137e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80137e8:	69bb      	ldr	r3, [r7, #24]
 80137ea:	015a      	lsls	r2, r3, #5
 80137ec:	69fb      	ldr	r3, [r7, #28]
 80137ee:	4413      	add	r3, r2
 80137f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137f4:	691b      	ldr	r3, [r3, #16]
 80137f6:	69ba      	ldr	r2, [r7, #24]
 80137f8:	0151      	lsls	r1, r2, #5
 80137fa:	69fa      	ldr	r2, [r7, #28]
 80137fc:	440a      	add	r2, r1
 80137fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013806:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013808:	69bb      	ldr	r3, [r7, #24]
 801380a:	015a      	lsls	r2, r3, #5
 801380c:	69fb      	ldr	r3, [r7, #28]
 801380e:	4413      	add	r3, r2
 8013810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013814:	691a      	ldr	r2, [r3, #16]
 8013816:	69bb      	ldr	r3, [r7, #24]
 8013818:	0159      	lsls	r1, r3, #5
 801381a:	69fb      	ldr	r3, [r7, #28]
 801381c:	440b      	add	r3, r1
 801381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013822:	4619      	mov	r1, r3
 8013824:	4b95      	ldr	r3, [pc, #596]	; (8013a7c <USB_EPStartXfer+0x2e0>)
 8013826:	4013      	ands	r3, r2
 8013828:	610b      	str	r3, [r1, #16]
 801382a:	e074      	b.n	8013916 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801382c:	69bb      	ldr	r3, [r7, #24]
 801382e:	015a      	lsls	r2, r3, #5
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	4413      	add	r3, r2
 8013834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013838:	691a      	ldr	r2, [r3, #16]
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	0159      	lsls	r1, r3, #5
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	440b      	add	r3, r1
 8013842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013846:	4619      	mov	r1, r3
 8013848:	4b8c      	ldr	r3, [pc, #560]	; (8013a7c <USB_EPStartXfer+0x2e0>)
 801384a:	4013      	ands	r3, r2
 801384c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801384e:	69bb      	ldr	r3, [r7, #24]
 8013850:	015a      	lsls	r2, r3, #5
 8013852:	69fb      	ldr	r3, [r7, #28]
 8013854:	4413      	add	r3, r2
 8013856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801385a:	691a      	ldr	r2, [r3, #16]
 801385c:	69bb      	ldr	r3, [r7, #24]
 801385e:	0159      	lsls	r1, r3, #5
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	440b      	add	r3, r1
 8013864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013868:	4619      	mov	r1, r3
 801386a:	4b83      	ldr	r3, [pc, #524]	; (8013a78 <USB_EPStartXfer+0x2dc>)
 801386c:	4013      	ands	r3, r2
 801386e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013870:	69bb      	ldr	r3, [r7, #24]
 8013872:	015a      	lsls	r2, r3, #5
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	4413      	add	r3, r2
 8013878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801387c:	691a      	ldr	r2, [r3, #16]
 801387e:	68bb      	ldr	r3, [r7, #8]
 8013880:	6959      	ldr	r1, [r3, #20]
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	689b      	ldr	r3, [r3, #8]
 8013886:	440b      	add	r3, r1
 8013888:	1e59      	subs	r1, r3, #1
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	689b      	ldr	r3, [r3, #8]
 801388e:	fbb1 f3f3 	udiv	r3, r1, r3
 8013892:	04d9      	lsls	r1, r3, #19
 8013894:	4b7a      	ldr	r3, [pc, #488]	; (8013a80 <USB_EPStartXfer+0x2e4>)
 8013896:	400b      	ands	r3, r1
 8013898:	69b9      	ldr	r1, [r7, #24]
 801389a:	0148      	lsls	r0, r1, #5
 801389c:	69f9      	ldr	r1, [r7, #28]
 801389e:	4401      	add	r1, r0
 80138a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80138a4:	4313      	orrs	r3, r2
 80138a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80138a8:	69bb      	ldr	r3, [r7, #24]
 80138aa:	015a      	lsls	r2, r3, #5
 80138ac:	69fb      	ldr	r3, [r7, #28]
 80138ae:	4413      	add	r3, r2
 80138b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138b4:	691a      	ldr	r2, [r3, #16]
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	695b      	ldr	r3, [r3, #20]
 80138ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138be:	69b9      	ldr	r1, [r7, #24]
 80138c0:	0148      	lsls	r0, r1, #5
 80138c2:	69f9      	ldr	r1, [r7, #28]
 80138c4:	4401      	add	r1, r0
 80138c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80138ca:	4313      	orrs	r3, r2
 80138cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	78db      	ldrb	r3, [r3, #3]
 80138d2:	2b01      	cmp	r3, #1
 80138d4:	d11f      	bne.n	8013916 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80138d6:	69bb      	ldr	r3, [r7, #24]
 80138d8:	015a      	lsls	r2, r3, #5
 80138da:	69fb      	ldr	r3, [r7, #28]
 80138dc:	4413      	add	r3, r2
 80138de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138e2:	691b      	ldr	r3, [r3, #16]
 80138e4:	69ba      	ldr	r2, [r7, #24]
 80138e6:	0151      	lsls	r1, r2, #5
 80138e8:	69fa      	ldr	r2, [r7, #28]
 80138ea:	440a      	add	r2, r1
 80138ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80138f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80138f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80138f6:	69bb      	ldr	r3, [r7, #24]
 80138f8:	015a      	lsls	r2, r3, #5
 80138fa:	69fb      	ldr	r3, [r7, #28]
 80138fc:	4413      	add	r3, r2
 80138fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013902:	691b      	ldr	r3, [r3, #16]
 8013904:	69ba      	ldr	r2, [r7, #24]
 8013906:	0151      	lsls	r1, r2, #5
 8013908:	69fa      	ldr	r2, [r7, #28]
 801390a:	440a      	add	r2, r1
 801390c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013910:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013914:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013916:	79fb      	ldrb	r3, [r7, #7]
 8013918:	2b01      	cmp	r3, #1
 801391a:	d14b      	bne.n	80139b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	691b      	ldr	r3, [r3, #16]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d009      	beq.n	8013938 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013924:	69bb      	ldr	r3, [r7, #24]
 8013926:	015a      	lsls	r2, r3, #5
 8013928:	69fb      	ldr	r3, [r7, #28]
 801392a:	4413      	add	r3, r2
 801392c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013930:	461a      	mov	r2, r3
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	691b      	ldr	r3, [r3, #16]
 8013936:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	78db      	ldrb	r3, [r3, #3]
 801393c:	2b01      	cmp	r3, #1
 801393e:	d128      	bne.n	8013992 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013940:	69fb      	ldr	r3, [r7, #28]
 8013942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013946:	689b      	ldr	r3, [r3, #8]
 8013948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801394c:	2b00      	cmp	r3, #0
 801394e:	d110      	bne.n	8013972 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013950:	69bb      	ldr	r3, [r7, #24]
 8013952:	015a      	lsls	r2, r3, #5
 8013954:	69fb      	ldr	r3, [r7, #28]
 8013956:	4413      	add	r3, r2
 8013958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	69ba      	ldr	r2, [r7, #24]
 8013960:	0151      	lsls	r1, r2, #5
 8013962:	69fa      	ldr	r2, [r7, #28]
 8013964:	440a      	add	r2, r1
 8013966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801396a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801396e:	6013      	str	r3, [r2, #0]
 8013970:	e00f      	b.n	8013992 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013972:	69bb      	ldr	r3, [r7, #24]
 8013974:	015a      	lsls	r2, r3, #5
 8013976:	69fb      	ldr	r3, [r7, #28]
 8013978:	4413      	add	r3, r2
 801397a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	69ba      	ldr	r2, [r7, #24]
 8013982:	0151      	lsls	r1, r2, #5
 8013984:	69fa      	ldr	r2, [r7, #28]
 8013986:	440a      	add	r2, r1
 8013988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801398c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013990:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013992:	69bb      	ldr	r3, [r7, #24]
 8013994:	015a      	lsls	r2, r3, #5
 8013996:	69fb      	ldr	r3, [r7, #28]
 8013998:	4413      	add	r3, r2
 801399a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	69ba      	ldr	r2, [r7, #24]
 80139a2:	0151      	lsls	r1, r2, #5
 80139a4:	69fa      	ldr	r2, [r7, #28]
 80139a6:	440a      	add	r2, r1
 80139a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80139b0:	6013      	str	r3, [r2, #0]
 80139b2:	e133      	b.n	8013c1c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80139b4:	69bb      	ldr	r3, [r7, #24]
 80139b6:	015a      	lsls	r2, r3, #5
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	4413      	add	r3, r2
 80139bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	69ba      	ldr	r2, [r7, #24]
 80139c4:	0151      	lsls	r1, r2, #5
 80139c6:	69fa      	ldr	r2, [r7, #28]
 80139c8:	440a      	add	r2, r1
 80139ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80139d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	78db      	ldrb	r3, [r3, #3]
 80139d8:	2b01      	cmp	r3, #1
 80139da:	d015      	beq.n	8013a08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80139dc:	68bb      	ldr	r3, [r7, #8]
 80139de:	695b      	ldr	r3, [r3, #20]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	f000 811b 	beq.w	8013c1c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80139e6:	69fb      	ldr	r3, [r7, #28]
 80139e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	781b      	ldrb	r3, [r3, #0]
 80139f2:	f003 030f 	and.w	r3, r3, #15
 80139f6:	2101      	movs	r1, #1
 80139f8:	fa01 f303 	lsl.w	r3, r1, r3
 80139fc:	69f9      	ldr	r1, [r7, #28]
 80139fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a02:	4313      	orrs	r3, r2
 8013a04:	634b      	str	r3, [r1, #52]	; 0x34
 8013a06:	e109      	b.n	8013c1c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a0e:	689b      	ldr	r3, [r3, #8]
 8013a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d110      	bne.n	8013a3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013a18:	69bb      	ldr	r3, [r7, #24]
 8013a1a:	015a      	lsls	r2, r3, #5
 8013a1c:	69fb      	ldr	r3, [r7, #28]
 8013a1e:	4413      	add	r3, r2
 8013a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	69ba      	ldr	r2, [r7, #24]
 8013a28:	0151      	lsls	r1, r2, #5
 8013a2a:	69fa      	ldr	r2, [r7, #28]
 8013a2c:	440a      	add	r2, r1
 8013a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013a36:	6013      	str	r3, [r2, #0]
 8013a38:	e00f      	b.n	8013a5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013a3a:	69bb      	ldr	r3, [r7, #24]
 8013a3c:	015a      	lsls	r2, r3, #5
 8013a3e:	69fb      	ldr	r3, [r7, #28]
 8013a40:	4413      	add	r3, r2
 8013a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	69ba      	ldr	r2, [r7, #24]
 8013a4a:	0151      	lsls	r1, r2, #5
 8013a4c:	69fa      	ldr	r2, [r7, #28]
 8013a4e:	440a      	add	r2, r1
 8013a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	68d9      	ldr	r1, [r3, #12]
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	781a      	ldrb	r2, [r3, #0]
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	695b      	ldr	r3, [r3, #20]
 8013a66:	b298      	uxth	r0, r3
 8013a68:	79fb      	ldrb	r3, [r7, #7]
 8013a6a:	9300      	str	r3, [sp, #0]
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	68f8      	ldr	r0, [r7, #12]
 8013a70:	f000 fa38 	bl	8013ee4 <USB_WritePacket>
 8013a74:	e0d2      	b.n	8013c1c <USB_EPStartXfer+0x480>
 8013a76:	bf00      	nop
 8013a78:	e007ffff 	.word	0xe007ffff
 8013a7c:	fff80000 	.word	0xfff80000
 8013a80:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013a84:	69bb      	ldr	r3, [r7, #24]
 8013a86:	015a      	lsls	r2, r3, #5
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	4413      	add	r3, r2
 8013a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a90:	691a      	ldr	r2, [r3, #16]
 8013a92:	69bb      	ldr	r3, [r7, #24]
 8013a94:	0159      	lsls	r1, r3, #5
 8013a96:	69fb      	ldr	r3, [r7, #28]
 8013a98:	440b      	add	r3, r1
 8013a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a9e:	4619      	mov	r1, r3
 8013aa0:	4b61      	ldr	r3, [pc, #388]	; (8013c28 <USB_EPStartXfer+0x48c>)
 8013aa2:	4013      	ands	r3, r2
 8013aa4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013aa6:	69bb      	ldr	r3, [r7, #24]
 8013aa8:	015a      	lsls	r2, r3, #5
 8013aaa:	69fb      	ldr	r3, [r7, #28]
 8013aac:	4413      	add	r3, r2
 8013aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ab2:	691a      	ldr	r2, [r3, #16]
 8013ab4:	69bb      	ldr	r3, [r7, #24]
 8013ab6:	0159      	lsls	r1, r3, #5
 8013ab8:	69fb      	ldr	r3, [r7, #28]
 8013aba:	440b      	add	r3, r1
 8013abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	4b5a      	ldr	r3, [pc, #360]	; (8013c2c <USB_EPStartXfer+0x490>)
 8013ac4:	4013      	ands	r3, r2
 8013ac6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	695b      	ldr	r3, [r3, #20]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d123      	bne.n	8013b18 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013ad0:	69bb      	ldr	r3, [r7, #24]
 8013ad2:	015a      	lsls	r2, r3, #5
 8013ad4:	69fb      	ldr	r3, [r7, #28]
 8013ad6:	4413      	add	r3, r2
 8013ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013adc:	691a      	ldr	r2, [r3, #16]
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	689b      	ldr	r3, [r3, #8]
 8013ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013ae6:	69b9      	ldr	r1, [r7, #24]
 8013ae8:	0148      	lsls	r0, r1, #5
 8013aea:	69f9      	ldr	r1, [r7, #28]
 8013aec:	4401      	add	r1, r0
 8013aee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013af2:	4313      	orrs	r3, r2
 8013af4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013af6:	69bb      	ldr	r3, [r7, #24]
 8013af8:	015a      	lsls	r2, r3, #5
 8013afa:	69fb      	ldr	r3, [r7, #28]
 8013afc:	4413      	add	r3, r2
 8013afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b02:	691b      	ldr	r3, [r3, #16]
 8013b04:	69ba      	ldr	r2, [r7, #24]
 8013b06:	0151      	lsls	r1, r2, #5
 8013b08:	69fa      	ldr	r2, [r7, #28]
 8013b0a:	440a      	add	r2, r1
 8013b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013b14:	6113      	str	r3, [r2, #16]
 8013b16:	e033      	b.n	8013b80 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	695a      	ldr	r2, [r3, #20]
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	689b      	ldr	r3, [r3, #8]
 8013b20:	4413      	add	r3, r2
 8013b22:	1e5a      	subs	r2, r3, #1
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	689b      	ldr	r3, [r3, #8]
 8013b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b2c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b2e:	69bb      	ldr	r3, [r7, #24]
 8013b30:	015a      	lsls	r2, r3, #5
 8013b32:	69fb      	ldr	r3, [r7, #28]
 8013b34:	4413      	add	r3, r2
 8013b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b3a:	691a      	ldr	r2, [r3, #16]
 8013b3c:	8afb      	ldrh	r3, [r7, #22]
 8013b3e:	04d9      	lsls	r1, r3, #19
 8013b40:	4b3b      	ldr	r3, [pc, #236]	; (8013c30 <USB_EPStartXfer+0x494>)
 8013b42:	400b      	ands	r3, r1
 8013b44:	69b9      	ldr	r1, [r7, #24]
 8013b46:	0148      	lsls	r0, r1, #5
 8013b48:	69f9      	ldr	r1, [r7, #28]
 8013b4a:	4401      	add	r1, r0
 8013b4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013b50:	4313      	orrs	r3, r2
 8013b52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8013b54:	69bb      	ldr	r3, [r7, #24]
 8013b56:	015a      	lsls	r2, r3, #5
 8013b58:	69fb      	ldr	r3, [r7, #28]
 8013b5a:	4413      	add	r3, r2
 8013b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b60:	691a      	ldr	r2, [r3, #16]
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	689b      	ldr	r3, [r3, #8]
 8013b66:	8af9      	ldrh	r1, [r7, #22]
 8013b68:	fb01 f303 	mul.w	r3, r1, r3
 8013b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b70:	69b9      	ldr	r1, [r7, #24]
 8013b72:	0148      	lsls	r0, r1, #5
 8013b74:	69f9      	ldr	r1, [r7, #28]
 8013b76:	4401      	add	r1, r0
 8013b78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013b7c:	4313      	orrs	r3, r2
 8013b7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013b80:	79fb      	ldrb	r3, [r7, #7]
 8013b82:	2b01      	cmp	r3, #1
 8013b84:	d10d      	bne.n	8013ba2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	68db      	ldr	r3, [r3, #12]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d009      	beq.n	8013ba2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	68d9      	ldr	r1, [r3, #12]
 8013b92:	69bb      	ldr	r3, [r7, #24]
 8013b94:	015a      	lsls	r2, r3, #5
 8013b96:	69fb      	ldr	r3, [r7, #28]
 8013b98:	4413      	add	r3, r2
 8013b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b9e:	460a      	mov	r2, r1
 8013ba0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	78db      	ldrb	r3, [r3, #3]
 8013ba6:	2b01      	cmp	r3, #1
 8013ba8:	d128      	bne.n	8013bfc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013baa:	69fb      	ldr	r3, [r7, #28]
 8013bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bb0:	689b      	ldr	r3, [r3, #8]
 8013bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d110      	bne.n	8013bdc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013bba:	69bb      	ldr	r3, [r7, #24]
 8013bbc:	015a      	lsls	r2, r3, #5
 8013bbe:	69fb      	ldr	r3, [r7, #28]
 8013bc0:	4413      	add	r3, r2
 8013bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	69ba      	ldr	r2, [r7, #24]
 8013bca:	0151      	lsls	r1, r2, #5
 8013bcc:	69fa      	ldr	r2, [r7, #28]
 8013bce:	440a      	add	r2, r1
 8013bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013bd8:	6013      	str	r3, [r2, #0]
 8013bda:	e00f      	b.n	8013bfc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013bdc:	69bb      	ldr	r3, [r7, #24]
 8013bde:	015a      	lsls	r2, r3, #5
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	4413      	add	r3, r2
 8013be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	69ba      	ldr	r2, [r7, #24]
 8013bec:	0151      	lsls	r1, r2, #5
 8013bee:	69fa      	ldr	r2, [r7, #28]
 8013bf0:	440a      	add	r2, r1
 8013bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013bfa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013bfc:	69bb      	ldr	r3, [r7, #24]
 8013bfe:	015a      	lsls	r2, r3, #5
 8013c00:	69fb      	ldr	r3, [r7, #28]
 8013c02:	4413      	add	r3, r2
 8013c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	69ba      	ldr	r2, [r7, #24]
 8013c0c:	0151      	lsls	r1, r2, #5
 8013c0e:	69fa      	ldr	r2, [r7, #28]
 8013c10:	440a      	add	r2, r1
 8013c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013c1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013c1c:	2300      	movs	r3, #0
}
 8013c1e:	4618      	mov	r0, r3
 8013c20:	3720      	adds	r7, #32
 8013c22:	46bd      	mov	sp, r7
 8013c24:	bd80      	pop	{r7, pc}
 8013c26:	bf00      	nop
 8013c28:	fff80000 	.word	0xfff80000
 8013c2c:	e007ffff 	.word	0xe007ffff
 8013c30:	1ff80000 	.word	0x1ff80000

08013c34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013c34:	b480      	push	{r7}
 8013c36:	b087      	sub	sp, #28
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	60f8      	str	r0, [r7, #12]
 8013c3c:	60b9      	str	r1, [r7, #8]
 8013c3e:	4613      	mov	r3, r2
 8013c40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8013c46:	68bb      	ldr	r3, [r7, #8]
 8013c48:	781b      	ldrb	r3, [r3, #0]
 8013c4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	785b      	ldrb	r3, [r3, #1]
 8013c50:	2b01      	cmp	r3, #1
 8013c52:	f040 80cd 	bne.w	8013df0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	695b      	ldr	r3, [r3, #20]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d132      	bne.n	8013cc4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	015a      	lsls	r2, r3, #5
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	4413      	add	r3, r2
 8013c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c6a:	691a      	ldr	r2, [r3, #16]
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	0159      	lsls	r1, r3, #5
 8013c70:	697b      	ldr	r3, [r7, #20]
 8013c72:	440b      	add	r3, r1
 8013c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c78:	4619      	mov	r1, r3
 8013c7a:	4b98      	ldr	r3, [pc, #608]	; (8013edc <USB_EP0StartXfer+0x2a8>)
 8013c7c:	4013      	ands	r3, r2
 8013c7e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013c80:	693b      	ldr	r3, [r7, #16]
 8013c82:	015a      	lsls	r2, r3, #5
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	4413      	add	r3, r2
 8013c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c8c:	691b      	ldr	r3, [r3, #16]
 8013c8e:	693a      	ldr	r2, [r7, #16]
 8013c90:	0151      	lsls	r1, r2, #5
 8013c92:	697a      	ldr	r2, [r7, #20]
 8013c94:	440a      	add	r2, r1
 8013c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013c9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013ca0:	693b      	ldr	r3, [r7, #16]
 8013ca2:	015a      	lsls	r2, r3, #5
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	4413      	add	r3, r2
 8013ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cac:	691a      	ldr	r2, [r3, #16]
 8013cae:	693b      	ldr	r3, [r7, #16]
 8013cb0:	0159      	lsls	r1, r3, #5
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	440b      	add	r3, r1
 8013cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cba:	4619      	mov	r1, r3
 8013cbc:	4b88      	ldr	r3, [pc, #544]	; (8013ee0 <USB_EP0StartXfer+0x2ac>)
 8013cbe:	4013      	ands	r3, r2
 8013cc0:	610b      	str	r3, [r1, #16]
 8013cc2:	e04e      	b.n	8013d62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013cc4:	693b      	ldr	r3, [r7, #16]
 8013cc6:	015a      	lsls	r2, r3, #5
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	4413      	add	r3, r2
 8013ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cd0:	691a      	ldr	r2, [r3, #16]
 8013cd2:	693b      	ldr	r3, [r7, #16]
 8013cd4:	0159      	lsls	r1, r3, #5
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	440b      	add	r3, r1
 8013cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cde:	4619      	mov	r1, r3
 8013ce0:	4b7f      	ldr	r3, [pc, #508]	; (8013ee0 <USB_EP0StartXfer+0x2ac>)
 8013ce2:	4013      	ands	r3, r2
 8013ce4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	015a      	lsls	r2, r3, #5
 8013cea:	697b      	ldr	r3, [r7, #20]
 8013cec:	4413      	add	r3, r2
 8013cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cf2:	691a      	ldr	r2, [r3, #16]
 8013cf4:	693b      	ldr	r3, [r7, #16]
 8013cf6:	0159      	lsls	r1, r3, #5
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	440b      	add	r3, r1
 8013cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d00:	4619      	mov	r1, r3
 8013d02:	4b76      	ldr	r3, [pc, #472]	; (8013edc <USB_EP0StartXfer+0x2a8>)
 8013d04:	4013      	ands	r3, r2
 8013d06:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	695a      	ldr	r2, [r3, #20]
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	689b      	ldr	r3, [r3, #8]
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d903      	bls.n	8013d1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	689a      	ldr	r2, [r3, #8]
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013d1c:	693b      	ldr	r3, [r7, #16]
 8013d1e:	015a      	lsls	r2, r3, #5
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	4413      	add	r3, r2
 8013d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d28:	691b      	ldr	r3, [r3, #16]
 8013d2a:	693a      	ldr	r2, [r7, #16]
 8013d2c:	0151      	lsls	r1, r2, #5
 8013d2e:	697a      	ldr	r2, [r7, #20]
 8013d30:	440a      	add	r2, r1
 8013d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013d3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	015a      	lsls	r2, r3, #5
 8013d40:	697b      	ldr	r3, [r7, #20]
 8013d42:	4413      	add	r3, r2
 8013d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d48:	691a      	ldr	r2, [r3, #16]
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	695b      	ldr	r3, [r3, #20]
 8013d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013d52:	6939      	ldr	r1, [r7, #16]
 8013d54:	0148      	lsls	r0, r1, #5
 8013d56:	6979      	ldr	r1, [r7, #20]
 8013d58:	4401      	add	r1, r0
 8013d5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013d5e:	4313      	orrs	r3, r2
 8013d60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013d62:	79fb      	ldrb	r3, [r7, #7]
 8013d64:	2b01      	cmp	r3, #1
 8013d66:	d11e      	bne.n	8013da6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	691b      	ldr	r3, [r3, #16]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d009      	beq.n	8013d84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013d70:	693b      	ldr	r3, [r7, #16]
 8013d72:	015a      	lsls	r2, r3, #5
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	4413      	add	r3, r2
 8013d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	68bb      	ldr	r3, [r7, #8]
 8013d80:	691b      	ldr	r3, [r3, #16]
 8013d82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013d84:	693b      	ldr	r3, [r7, #16]
 8013d86:	015a      	lsls	r2, r3, #5
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	4413      	add	r3, r2
 8013d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	693a      	ldr	r2, [r7, #16]
 8013d94:	0151      	lsls	r1, r2, #5
 8013d96:	697a      	ldr	r2, [r7, #20]
 8013d98:	440a      	add	r2, r1
 8013d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013da2:	6013      	str	r3, [r2, #0]
 8013da4:	e092      	b.n	8013ecc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	015a      	lsls	r2, r3, #5
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	4413      	add	r3, r2
 8013dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	693a      	ldr	r2, [r7, #16]
 8013db6:	0151      	lsls	r1, r2, #5
 8013db8:	697a      	ldr	r2, [r7, #20]
 8013dba:	440a      	add	r2, r1
 8013dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013dc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013dc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	695b      	ldr	r3, [r3, #20]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d07e      	beq.n	8013ecc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013dd6:	68bb      	ldr	r3, [r7, #8]
 8013dd8:	781b      	ldrb	r3, [r3, #0]
 8013dda:	f003 030f 	and.w	r3, r3, #15
 8013dde:	2101      	movs	r1, #1
 8013de0:	fa01 f303 	lsl.w	r3, r1, r3
 8013de4:	6979      	ldr	r1, [r7, #20]
 8013de6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013dea:	4313      	orrs	r3, r2
 8013dec:	634b      	str	r3, [r1, #52]	; 0x34
 8013dee:	e06d      	b.n	8013ecc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013df0:	693b      	ldr	r3, [r7, #16]
 8013df2:	015a      	lsls	r2, r3, #5
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	4413      	add	r3, r2
 8013df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dfc:	691a      	ldr	r2, [r3, #16]
 8013dfe:	693b      	ldr	r3, [r7, #16]
 8013e00:	0159      	lsls	r1, r3, #5
 8013e02:	697b      	ldr	r3, [r7, #20]
 8013e04:	440b      	add	r3, r1
 8013e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e0a:	4619      	mov	r1, r3
 8013e0c:	4b34      	ldr	r3, [pc, #208]	; (8013ee0 <USB_EP0StartXfer+0x2ac>)
 8013e0e:	4013      	ands	r3, r2
 8013e10:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	015a      	lsls	r2, r3, #5
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	4413      	add	r3, r2
 8013e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e1e:	691a      	ldr	r2, [r3, #16]
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	0159      	lsls	r1, r3, #5
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	440b      	add	r3, r1
 8013e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e2c:	4619      	mov	r1, r3
 8013e2e:	4b2b      	ldr	r3, [pc, #172]	; (8013edc <USB_EP0StartXfer+0x2a8>)
 8013e30:	4013      	ands	r3, r2
 8013e32:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	695b      	ldr	r3, [r3, #20]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d003      	beq.n	8013e44 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8013e3c:	68bb      	ldr	r3, [r7, #8]
 8013e3e:	689a      	ldr	r2, [r3, #8]
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013e44:	693b      	ldr	r3, [r7, #16]
 8013e46:	015a      	lsls	r2, r3, #5
 8013e48:	697b      	ldr	r3, [r7, #20]
 8013e4a:	4413      	add	r3, r2
 8013e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e50:	691b      	ldr	r3, [r3, #16]
 8013e52:	693a      	ldr	r2, [r7, #16]
 8013e54:	0151      	lsls	r1, r2, #5
 8013e56:	697a      	ldr	r2, [r7, #20]
 8013e58:	440a      	add	r2, r1
 8013e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013e62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8013e64:	693b      	ldr	r3, [r7, #16]
 8013e66:	015a      	lsls	r2, r3, #5
 8013e68:	697b      	ldr	r3, [r7, #20]
 8013e6a:	4413      	add	r3, r2
 8013e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e70:	691a      	ldr	r2, [r3, #16]
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	689b      	ldr	r3, [r3, #8]
 8013e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013e7a:	6939      	ldr	r1, [r7, #16]
 8013e7c:	0148      	lsls	r0, r1, #5
 8013e7e:	6979      	ldr	r1, [r7, #20]
 8013e80:	4401      	add	r1, r0
 8013e82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013e86:	4313      	orrs	r3, r2
 8013e88:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8013e8a:	79fb      	ldrb	r3, [r7, #7]
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d10d      	bne.n	8013eac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	68db      	ldr	r3, [r3, #12]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d009      	beq.n	8013eac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	68d9      	ldr	r1, [r3, #12]
 8013e9c:	693b      	ldr	r3, [r7, #16]
 8013e9e:	015a      	lsls	r2, r3, #5
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	4413      	add	r3, r2
 8013ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ea8:	460a      	mov	r2, r1
 8013eaa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013eac:	693b      	ldr	r3, [r7, #16]
 8013eae:	015a      	lsls	r2, r3, #5
 8013eb0:	697b      	ldr	r3, [r7, #20]
 8013eb2:	4413      	add	r3, r2
 8013eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	693a      	ldr	r2, [r7, #16]
 8013ebc:	0151      	lsls	r1, r2, #5
 8013ebe:	697a      	ldr	r2, [r7, #20]
 8013ec0:	440a      	add	r2, r1
 8013ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ec6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013eca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013ecc:	2300      	movs	r3, #0
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	371c      	adds	r7, #28
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed8:	4770      	bx	lr
 8013eda:	bf00      	nop
 8013edc:	e007ffff 	.word	0xe007ffff
 8013ee0:	fff80000 	.word	0xfff80000

08013ee4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013ee4:	b480      	push	{r7}
 8013ee6:	b089      	sub	sp, #36	; 0x24
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	60f8      	str	r0, [r7, #12]
 8013eec:	60b9      	str	r1, [r7, #8]
 8013eee:	4611      	mov	r1, r2
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	460b      	mov	r3, r1
 8013ef4:	71fb      	strb	r3, [r7, #7]
 8013ef6:	4613      	mov	r3, r2
 8013ef8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8013f02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d11a      	bne.n	8013f40 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013f0a:	88bb      	ldrh	r3, [r7, #4]
 8013f0c:	3303      	adds	r3, #3
 8013f0e:	089b      	lsrs	r3, r3, #2
 8013f10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013f12:	2300      	movs	r3, #0
 8013f14:	61bb      	str	r3, [r7, #24]
 8013f16:	e00f      	b.n	8013f38 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013f18:	79fb      	ldrb	r3, [r7, #7]
 8013f1a:	031a      	lsls	r2, r3, #12
 8013f1c:	697b      	ldr	r3, [r7, #20]
 8013f1e:	4413      	add	r3, r2
 8013f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013f24:	461a      	mov	r2, r3
 8013f26:	69fb      	ldr	r3, [r7, #28]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013f2c:	69fb      	ldr	r3, [r7, #28]
 8013f2e:	3304      	adds	r3, #4
 8013f30:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013f32:	69bb      	ldr	r3, [r7, #24]
 8013f34:	3301      	adds	r3, #1
 8013f36:	61bb      	str	r3, [r7, #24]
 8013f38:	69ba      	ldr	r2, [r7, #24]
 8013f3a:	693b      	ldr	r3, [r7, #16]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d3eb      	bcc.n	8013f18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013f40:	2300      	movs	r3, #0
}
 8013f42:	4618      	mov	r0, r3
 8013f44:	3724      	adds	r7, #36	; 0x24
 8013f46:	46bd      	mov	sp, r7
 8013f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4c:	4770      	bx	lr

08013f4e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013f4e:	b480      	push	{r7}
 8013f50:	b089      	sub	sp, #36	; 0x24
 8013f52:	af00      	add	r7, sp, #0
 8013f54:	60f8      	str	r0, [r7, #12]
 8013f56:	60b9      	str	r1, [r7, #8]
 8013f58:	4613      	mov	r3, r2
 8013f5a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8013f64:	88fb      	ldrh	r3, [r7, #6]
 8013f66:	3303      	adds	r3, #3
 8013f68:	089b      	lsrs	r3, r3, #2
 8013f6a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	61bb      	str	r3, [r7, #24]
 8013f70:	e00b      	b.n	8013f8a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013f78:	681a      	ldr	r2, [r3, #0]
 8013f7a:	69fb      	ldr	r3, [r7, #28]
 8013f7c:	601a      	str	r2, [r3, #0]
    pDest++;
 8013f7e:	69fb      	ldr	r3, [r7, #28]
 8013f80:	3304      	adds	r3, #4
 8013f82:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8013f84:	69bb      	ldr	r3, [r7, #24]
 8013f86:	3301      	adds	r3, #1
 8013f88:	61bb      	str	r3, [r7, #24]
 8013f8a:	69ba      	ldr	r2, [r7, #24]
 8013f8c:	693b      	ldr	r3, [r7, #16]
 8013f8e:	429a      	cmp	r2, r3
 8013f90:	d3ef      	bcc.n	8013f72 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8013f92:	69fb      	ldr	r3, [r7, #28]
}
 8013f94:	4618      	mov	r0, r3
 8013f96:	3724      	adds	r7, #36	; 0x24
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9e:	4770      	bx	lr

08013fa0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013fa0:	b480      	push	{r7}
 8013fa2:	b085      	sub	sp, #20
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
 8013fa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	781b      	ldrb	r3, [r3, #0]
 8013fb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	785b      	ldrb	r3, [r3, #1]
 8013fb8:	2b01      	cmp	r3, #1
 8013fba:	d12c      	bne.n	8014016 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013fbc:	68bb      	ldr	r3, [r7, #8]
 8013fbe:	015a      	lsls	r2, r3, #5
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	4413      	add	r3, r2
 8013fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	db12      	blt.n	8013ff4 <USB_EPSetStall+0x54>
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d00f      	beq.n	8013ff4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	015a      	lsls	r2, r3, #5
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	4413      	add	r3, r2
 8013fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	68ba      	ldr	r2, [r7, #8]
 8013fe4:	0151      	lsls	r1, r2, #5
 8013fe6:	68fa      	ldr	r2, [r7, #12]
 8013fe8:	440a      	add	r2, r1
 8013fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013ff2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	015a      	lsls	r2, r3, #5
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	4413      	add	r3, r2
 8013ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	68ba      	ldr	r2, [r7, #8]
 8014004:	0151      	lsls	r1, r2, #5
 8014006:	68fa      	ldr	r2, [r7, #12]
 8014008:	440a      	add	r2, r1
 801400a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801400e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014012:	6013      	str	r3, [r2, #0]
 8014014:	e02b      	b.n	801406e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	015a      	lsls	r2, r3, #5
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	4413      	add	r3, r2
 801401e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	db12      	blt.n	801404e <USB_EPSetStall+0xae>
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d00f      	beq.n	801404e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801402e:	68bb      	ldr	r3, [r7, #8]
 8014030:	015a      	lsls	r2, r3, #5
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	4413      	add	r3, r2
 8014036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	68ba      	ldr	r2, [r7, #8]
 801403e:	0151      	lsls	r1, r2, #5
 8014040:	68fa      	ldr	r2, [r7, #12]
 8014042:	440a      	add	r2, r1
 8014044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014048:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801404c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	015a      	lsls	r2, r3, #5
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	4413      	add	r3, r2
 8014056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	68ba      	ldr	r2, [r7, #8]
 801405e:	0151      	lsls	r1, r2, #5
 8014060:	68fa      	ldr	r2, [r7, #12]
 8014062:	440a      	add	r2, r1
 8014064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801406c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801406e:	2300      	movs	r3, #0
}
 8014070:	4618      	mov	r0, r3
 8014072:	3714      	adds	r7, #20
 8014074:	46bd      	mov	sp, r7
 8014076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407a:	4770      	bx	lr

0801407c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801407c:	b480      	push	{r7}
 801407e:	b085      	sub	sp, #20
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801408a:	683b      	ldr	r3, [r7, #0]
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	785b      	ldrb	r3, [r3, #1]
 8014094:	2b01      	cmp	r3, #1
 8014096:	d128      	bne.n	80140ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	015a      	lsls	r2, r3, #5
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	4413      	add	r3, r2
 80140a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	68ba      	ldr	r2, [r7, #8]
 80140a8:	0151      	lsls	r1, r2, #5
 80140aa:	68fa      	ldr	r2, [r7, #12]
 80140ac:	440a      	add	r2, r1
 80140ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80140b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	78db      	ldrb	r3, [r3, #3]
 80140bc:	2b03      	cmp	r3, #3
 80140be:	d003      	beq.n	80140c8 <USB_EPClearStall+0x4c>
 80140c0:	683b      	ldr	r3, [r7, #0]
 80140c2:	78db      	ldrb	r3, [r3, #3]
 80140c4:	2b02      	cmp	r3, #2
 80140c6:	d138      	bne.n	801413a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	015a      	lsls	r2, r3, #5
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	4413      	add	r3, r2
 80140d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	68ba      	ldr	r2, [r7, #8]
 80140d8:	0151      	lsls	r1, r2, #5
 80140da:	68fa      	ldr	r2, [r7, #12]
 80140dc:	440a      	add	r2, r1
 80140de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80140e6:	6013      	str	r3, [r2, #0]
 80140e8:	e027      	b.n	801413a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80140ea:	68bb      	ldr	r3, [r7, #8]
 80140ec:	015a      	lsls	r2, r3, #5
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	4413      	add	r3, r2
 80140f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	68ba      	ldr	r2, [r7, #8]
 80140fa:	0151      	lsls	r1, r2, #5
 80140fc:	68fa      	ldr	r2, [r7, #12]
 80140fe:	440a      	add	r2, r1
 8014100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014104:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014108:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	78db      	ldrb	r3, [r3, #3]
 801410e:	2b03      	cmp	r3, #3
 8014110:	d003      	beq.n	801411a <USB_EPClearStall+0x9e>
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	78db      	ldrb	r3, [r3, #3]
 8014116:	2b02      	cmp	r3, #2
 8014118:	d10f      	bne.n	801413a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	015a      	lsls	r2, r3, #5
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	4413      	add	r3, r2
 8014122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	68ba      	ldr	r2, [r7, #8]
 801412a:	0151      	lsls	r1, r2, #5
 801412c:	68fa      	ldr	r2, [r7, #12]
 801412e:	440a      	add	r2, r1
 8014130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014138:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801413a:	2300      	movs	r3, #0
}
 801413c:	4618      	mov	r0, r3
 801413e:	3714      	adds	r7, #20
 8014140:	46bd      	mov	sp, r7
 8014142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014146:	4770      	bx	lr

08014148 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014148:	b480      	push	{r7}
 801414a:	b085      	sub	sp, #20
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	460b      	mov	r3, r1
 8014152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	68fa      	ldr	r2, [r7, #12]
 8014162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014166:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801416a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014172:	681a      	ldr	r2, [r3, #0]
 8014174:	78fb      	ldrb	r3, [r7, #3]
 8014176:	011b      	lsls	r3, r3, #4
 8014178:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801417c:	68f9      	ldr	r1, [r7, #12]
 801417e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014182:	4313      	orrs	r3, r2
 8014184:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014186:	2300      	movs	r3, #0
}
 8014188:	4618      	mov	r0, r3
 801418a:	3714      	adds	r7, #20
 801418c:	46bd      	mov	sp, r7
 801418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014192:	4770      	bx	lr

08014194 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b084      	sub	sp, #16
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141a6:	685b      	ldr	r3, [r3, #4]
 80141a8:	68fa      	ldr	r2, [r7, #12]
 80141aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80141ae:	f023 0302 	bic.w	r3, r3, #2
 80141b2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80141b4:	2003      	movs	r0, #3
 80141b6:	f7f1 fb6f 	bl	8005898 <HAL_Delay>

  return HAL_OK;
 80141ba:	2300      	movs	r3, #0
}
 80141bc:	4618      	mov	r0, r3
 80141be:	3710      	adds	r7, #16
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}

080141c4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b084      	sub	sp, #16
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141d6:	685b      	ldr	r3, [r3, #4]
 80141d8:	68fa      	ldr	r2, [r7, #12]
 80141da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80141de:	f043 0302 	orr.w	r3, r3, #2
 80141e2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80141e4:	2003      	movs	r0, #3
 80141e6:	f7f1 fb57 	bl	8005898 <HAL_Delay>

  return HAL_OK;
 80141ea:	2300      	movs	r3, #0
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	3710      	adds	r7, #16
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}

080141f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80141f4:	b480      	push	{r7}
 80141f6:	b085      	sub	sp, #20
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	695b      	ldr	r3, [r3, #20]
 8014200:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	699b      	ldr	r3, [r3, #24]
 8014206:	68fa      	ldr	r2, [r7, #12]
 8014208:	4013      	ands	r3, r2
 801420a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801420c:	68fb      	ldr	r3, [r7, #12]
}
 801420e:	4618      	mov	r0, r3
 8014210:	3714      	adds	r7, #20
 8014212:	46bd      	mov	sp, r7
 8014214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014218:	4770      	bx	lr

0801421a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801421a:	b480      	push	{r7}
 801421c:	b085      	sub	sp, #20
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801422c:	699b      	ldr	r3, [r3, #24]
 801422e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014236:	69db      	ldr	r3, [r3, #28]
 8014238:	68ba      	ldr	r2, [r7, #8]
 801423a:	4013      	ands	r3, r2
 801423c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	0c1b      	lsrs	r3, r3, #16
}
 8014242:	4618      	mov	r0, r3
 8014244:	3714      	adds	r7, #20
 8014246:	46bd      	mov	sp, r7
 8014248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424c:	4770      	bx	lr

0801424e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801424e:	b480      	push	{r7}
 8014250:	b085      	sub	sp, #20
 8014252:	af00      	add	r7, sp, #0
 8014254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014260:	699b      	ldr	r3, [r3, #24]
 8014262:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801426a:	69db      	ldr	r3, [r3, #28]
 801426c:	68ba      	ldr	r2, [r7, #8]
 801426e:	4013      	ands	r3, r2
 8014270:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	b29b      	uxth	r3, r3
}
 8014276:	4618      	mov	r0, r3
 8014278:	3714      	adds	r7, #20
 801427a:	46bd      	mov	sp, r7
 801427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014280:	4770      	bx	lr

08014282 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014282:	b480      	push	{r7}
 8014284:	b085      	sub	sp, #20
 8014286:	af00      	add	r7, sp, #0
 8014288:	6078      	str	r0, [r7, #4]
 801428a:	460b      	mov	r3, r1
 801428c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014292:	78fb      	ldrb	r3, [r7, #3]
 8014294:	015a      	lsls	r2, r3, #5
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	4413      	add	r3, r2
 801429a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801429e:	689b      	ldr	r3, [r3, #8]
 80142a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142a8:	695b      	ldr	r3, [r3, #20]
 80142aa:	68ba      	ldr	r2, [r7, #8]
 80142ac:	4013      	ands	r3, r2
 80142ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80142b0:	68bb      	ldr	r3, [r7, #8]
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3714      	adds	r7, #20
 80142b6:	46bd      	mov	sp, r7
 80142b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142bc:	4770      	bx	lr

080142be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80142be:	b480      	push	{r7}
 80142c0:	b087      	sub	sp, #28
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
 80142c6:	460b      	mov	r3, r1
 80142c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142d4:	691b      	ldr	r3, [r3, #16]
 80142d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80142e2:	78fb      	ldrb	r3, [r7, #3]
 80142e4:	f003 030f 	and.w	r3, r3, #15
 80142e8:	68fa      	ldr	r2, [r7, #12]
 80142ea:	fa22 f303 	lsr.w	r3, r2, r3
 80142ee:	01db      	lsls	r3, r3, #7
 80142f0:	b2db      	uxtb	r3, r3
 80142f2:	693a      	ldr	r2, [r7, #16]
 80142f4:	4313      	orrs	r3, r2
 80142f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80142f8:	78fb      	ldrb	r3, [r7, #3]
 80142fa:	015a      	lsls	r2, r3, #5
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	4413      	add	r3, r2
 8014300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014304:	689b      	ldr	r3, [r3, #8]
 8014306:	693a      	ldr	r2, [r7, #16]
 8014308:	4013      	ands	r3, r2
 801430a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801430c:	68bb      	ldr	r3, [r7, #8]
}
 801430e:	4618      	mov	r0, r3
 8014310:	371c      	adds	r7, #28
 8014312:	46bd      	mov	sp, r7
 8014314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014318:	4770      	bx	lr

0801431a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801431a:	b480      	push	{r7}
 801431c:	b083      	sub	sp, #12
 801431e:	af00      	add	r7, sp, #0
 8014320:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	695b      	ldr	r3, [r3, #20]
 8014326:	f003 0301 	and.w	r3, r3, #1
}
 801432a:	4618      	mov	r0, r3
 801432c:	370c      	adds	r7, #12
 801432e:	46bd      	mov	sp, r7
 8014330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014334:	4770      	bx	lr
	...

08014338 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014338:	b480      	push	{r7}
 801433a:	b085      	sub	sp, #20
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801434a:	681a      	ldr	r2, [r3, #0]
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014352:	4619      	mov	r1, r3
 8014354:	4b09      	ldr	r3, [pc, #36]	; (801437c <USB_ActivateSetup+0x44>)
 8014356:	4013      	ands	r3, r2
 8014358:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	68fa      	ldr	r2, [r7, #12]
 8014364:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801436c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801436e:	2300      	movs	r3, #0
}
 8014370:	4618      	mov	r0, r3
 8014372:	3714      	adds	r7, #20
 8014374:	46bd      	mov	sp, r7
 8014376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437a:	4770      	bx	lr
 801437c:	fffff800 	.word	0xfffff800

08014380 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014380:	b480      	push	{r7}
 8014382:	b087      	sub	sp, #28
 8014384:	af00      	add	r7, sp, #0
 8014386:	60f8      	str	r0, [r7, #12]
 8014388:	460b      	mov	r3, r1
 801438a:	607a      	str	r2, [r7, #4]
 801438c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	333c      	adds	r3, #60	; 0x3c
 8014396:	3304      	adds	r3, #4
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801439c:	693b      	ldr	r3, [r7, #16]
 801439e:	4a26      	ldr	r2, [pc, #152]	; (8014438 <USB_EP0_OutStart+0xb8>)
 80143a0:	4293      	cmp	r3, r2
 80143a2:	d90a      	bls.n	80143ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80143b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80143b4:	d101      	bne.n	80143ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80143b6:	2300      	movs	r3, #0
 80143b8:	e037      	b.n	801442a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80143ba:	697b      	ldr	r3, [r7, #20]
 80143bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143c0:	461a      	mov	r2, r3
 80143c2:	2300      	movs	r3, #0
 80143c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143cc:	691b      	ldr	r3, [r3, #16]
 80143ce:	697a      	ldr	r2, [r7, #20]
 80143d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80143d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80143da:	697b      	ldr	r3, [r7, #20]
 80143dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143e0:	691b      	ldr	r3, [r3, #16]
 80143e2:	697a      	ldr	r2, [r7, #20]
 80143e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143e8:	f043 0318 	orr.w	r3, r3, #24
 80143ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143f4:	691b      	ldr	r3, [r3, #16]
 80143f6:	697a      	ldr	r2, [r7, #20]
 80143f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014400:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014402:	7afb      	ldrb	r3, [r7, #11]
 8014404:	2b01      	cmp	r3, #1
 8014406:	d10f      	bne.n	8014428 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014408:	697b      	ldr	r3, [r7, #20]
 801440a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801440e:	461a      	mov	r2, r3
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	697a      	ldr	r2, [r7, #20]
 801441e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014422:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014426:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014428:	2300      	movs	r3, #0
}
 801442a:	4618      	mov	r0, r3
 801442c:	371c      	adds	r7, #28
 801442e:	46bd      	mov	sp, r7
 8014430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014434:	4770      	bx	lr
 8014436:	bf00      	nop
 8014438:	4f54300a 	.word	0x4f54300a

0801443c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801443c:	b480      	push	{r7}
 801443e:	b085      	sub	sp, #20
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8014444:	2300      	movs	r3, #0
 8014446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	3301      	adds	r3, #1
 801444c:	60fb      	str	r3, [r7, #12]
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	4a13      	ldr	r2, [pc, #76]	; (80144a0 <USB_CoreReset+0x64>)
 8014452:	4293      	cmp	r3, r2
 8014454:	d901      	bls.n	801445a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014456:	2303      	movs	r3, #3
 8014458:	e01b      	b.n	8014492 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	691b      	ldr	r3, [r3, #16]
 801445e:	2b00      	cmp	r3, #0
 8014460:	daf2      	bge.n	8014448 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014462:	2300      	movs	r3, #0
 8014464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	691b      	ldr	r3, [r3, #16]
 801446a:	f043 0201 	orr.w	r2, r3, #1
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	3301      	adds	r3, #1
 8014476:	60fb      	str	r3, [r7, #12]
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	4a09      	ldr	r2, [pc, #36]	; (80144a0 <USB_CoreReset+0x64>)
 801447c:	4293      	cmp	r3, r2
 801447e:	d901      	bls.n	8014484 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014480:	2303      	movs	r3, #3
 8014482:	e006      	b.n	8014492 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	691b      	ldr	r3, [r3, #16]
 8014488:	f003 0301 	and.w	r3, r3, #1
 801448c:	2b01      	cmp	r3, #1
 801448e:	d0f0      	beq.n	8014472 <USB_CoreReset+0x36>

  return HAL_OK;
 8014490:	2300      	movs	r3, #0
}
 8014492:	4618      	mov	r0, r3
 8014494:	3714      	adds	r7, #20
 8014496:	46bd      	mov	sp, r7
 8014498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449c:	4770      	bx	lr
 801449e:	bf00      	nop
 80144a0:	00030d40 	.word	0x00030d40

080144a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80144a8:	4904      	ldr	r1, [pc, #16]	; (80144bc <MX_FATFS_Init+0x18>)
 80144aa:	4805      	ldr	r0, [pc, #20]	; (80144c0 <MX_FATFS_Init+0x1c>)
 80144ac:	f005 fbec 	bl	8019c88 <FATFS_LinkDriver>
 80144b0:	4603      	mov	r3, r0
 80144b2:	461a      	mov	r2, r3
 80144b4:	4b03      	ldr	r3, [pc, #12]	; (80144c4 <MX_FATFS_Init+0x20>)
 80144b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80144b8:	bf00      	nop
 80144ba:	bd80      	pop	{r7, pc}
 80144bc:	240053a4 	.word	0x240053a4
 80144c0:	0801edc0 	.word	0x0801edc0
 80144c4:	240053a0 	.word	0x240053a0

080144c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80144c8:	b480      	push	{r7}
 80144ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80144cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	46bd      	mov	sp, r7
 80144d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d6:	4770      	bx	lr

080144d8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80144de:	2300      	movs	r3, #0
 80144e0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80144e2:	f000 f885 	bl	80145f0 <BSP_SD_IsDetected>
 80144e6:	4603      	mov	r3, r0
 80144e8:	2b01      	cmp	r3, #1
 80144ea:	d001      	beq.n	80144f0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80144ec:	2302      	movs	r3, #2
 80144ee:	e012      	b.n	8014516 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80144f0:	480b      	ldr	r0, [pc, #44]	; (8014520 <BSP_SD_Init+0x48>)
 80144f2:	f7f9 fc27 	bl	800dd44 <HAL_SD_Init>
 80144f6:	4603      	mov	r3, r0
 80144f8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80144fa:	79fb      	ldrb	r3, [r7, #7]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d109      	bne.n	8014514 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014500:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014504:	4806      	ldr	r0, [pc, #24]	; (8014520 <BSP_SD_Init+0x48>)
 8014506:	f7fa fdfb 	bl	800f100 <HAL_SD_ConfigWideBusOperation>
 801450a:	4603      	mov	r3, r0
 801450c:	2b00      	cmp	r3, #0
 801450e:	d001      	beq.n	8014514 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014510:	2301      	movs	r3, #1
 8014512:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014514:	79fb      	ldrb	r3, [r7, #7]
}
 8014516:	4618      	mov	r0, r3
 8014518:	3708      	adds	r7, #8
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop
 8014520:	240050a4 	.word	0x240050a4

08014524 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b086      	sub	sp, #24
 8014528:	af00      	add	r7, sp, #0
 801452a:	60f8      	str	r0, [r7, #12]
 801452c:	60b9      	str	r1, [r7, #8]
 801452e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014530:	2300      	movs	r3, #0
 8014532:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	68ba      	ldr	r2, [r7, #8]
 8014538:	68f9      	ldr	r1, [r7, #12]
 801453a:	4806      	ldr	r0, [pc, #24]	; (8014554 <BSP_SD_ReadBlocks_DMA+0x30>)
 801453c:	f7fa f83e 	bl	800e5bc <HAL_SD_ReadBlocks_DMA>
 8014540:	4603      	mov	r3, r0
 8014542:	2b00      	cmp	r3, #0
 8014544:	d001      	beq.n	801454a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014546:	2301      	movs	r3, #1
 8014548:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801454a:	7dfb      	ldrb	r3, [r7, #23]
}
 801454c:	4618      	mov	r0, r3
 801454e:	3718      	adds	r7, #24
 8014550:	46bd      	mov	sp, r7
 8014552:	bd80      	pop	{r7, pc}
 8014554:	240050a4 	.word	0x240050a4

08014558 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b086      	sub	sp, #24
 801455c:	af00      	add	r7, sp, #0
 801455e:	60f8      	str	r0, [r7, #12]
 8014560:	60b9      	str	r1, [r7, #8]
 8014562:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014564:	2300      	movs	r3, #0
 8014566:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	68ba      	ldr	r2, [r7, #8]
 801456c:	68f9      	ldr	r1, [r7, #12]
 801456e:	4806      	ldr	r0, [pc, #24]	; (8014588 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014570:	f7fa f8cc 	bl	800e70c <HAL_SD_WriteBlocks_DMA>
 8014574:	4603      	mov	r3, r0
 8014576:	2b00      	cmp	r3, #0
 8014578:	d001      	beq.n	801457e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801457a:	2301      	movs	r3, #1
 801457c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801457e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014580:	4618      	mov	r0, r3
 8014582:	3718      	adds	r7, #24
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}
 8014588:	240050a4 	.word	0x240050a4

0801458c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014590:	4805      	ldr	r0, [pc, #20]	; (80145a8 <BSP_SD_GetCardState+0x1c>)
 8014592:	f7fa fe5f 	bl	800f254 <HAL_SD_GetCardState>
 8014596:	4603      	mov	r3, r0
 8014598:	2b04      	cmp	r3, #4
 801459a:	bf14      	ite	ne
 801459c:	2301      	movne	r3, #1
 801459e:	2300      	moveq	r3, #0
 80145a0:	b2db      	uxtb	r3, r3
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	bd80      	pop	{r7, pc}
 80145a6:	bf00      	nop
 80145a8:	240050a4 	.word	0x240050a4

080145ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80145b4:	6879      	ldr	r1, [r7, #4]
 80145b6:	4803      	ldr	r0, [pc, #12]	; (80145c4 <BSP_SD_GetCardInfo+0x18>)
 80145b8:	f7fa fd76 	bl	800f0a8 <HAL_SD_GetCardInfo>
}
 80145bc:	bf00      	nop
 80145be:	3708      	adds	r7, #8
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}
 80145c4:	240050a4 	.word	0x240050a4

080145c8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b082      	sub	sp, #8
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80145d0:	f000 f9a0 	bl	8014914 <BSP_SD_WriteCpltCallback>
}
 80145d4:	bf00      	nop
 80145d6:	3708      	adds	r7, #8
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80145e4:	f000 f9a2 	bl	801492c <BSP_SD_ReadCpltCallback>
}
 80145e8:	bf00      	nop
 80145ea:	3708      	adds	r7, #8
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}

080145f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b082      	sub	sp, #8
 80145f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80145f6:	2301      	movs	r3, #1
 80145f8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80145fa:	f000 f80b 	bl	8014614 <BSP_PlatformIsDetected>
 80145fe:	4603      	mov	r3, r0
 8014600:	2b00      	cmp	r3, #0
 8014602:	d101      	bne.n	8014608 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014604:	2300      	movs	r3, #0
 8014606:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014608:	79fb      	ldrb	r3, [r7, #7]
 801460a:	b2db      	uxtb	r3, r3
}
 801460c:	4618      	mov	r0, r3
 801460e:	3708      	adds	r7, #8
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014614:	b580      	push	{r7, lr}
 8014616:	b082      	sub	sp, #8
 8014618:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801461a:	2301      	movs	r3, #1
 801461c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801461e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014622:	4806      	ldr	r0, [pc, #24]	; (801463c <BSP_PlatformIsDetected+0x28>)
 8014624:	f7f4 fe3a 	bl	800929c <HAL_GPIO_ReadPin>
 8014628:	4603      	mov	r3, r0
 801462a:	2b00      	cmp	r3, #0
 801462c:	d001      	beq.n	8014632 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801462e:	2300      	movs	r3, #0
 8014630:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014632:	79fb      	ldrb	r3, [r7, #7]
}
 8014634:	4618      	mov	r0, r3
 8014636:	3708      	adds	r7, #8
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}
 801463c:	58020000 	.word	0x58020000

08014640 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b084      	sub	sp, #16
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014648:	f7f1 f91a 	bl	8005880 <HAL_GetTick>
 801464c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801464e:	e006      	b.n	801465e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014650:	f7ff ff9c 	bl	801458c <BSP_SD_GetCardState>
 8014654:	4603      	mov	r3, r0
 8014656:	2b00      	cmp	r3, #0
 8014658:	d101      	bne.n	801465e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801465a:	2300      	movs	r3, #0
 801465c:	e009      	b.n	8014672 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801465e:	f7f1 f90f 	bl	8005880 <HAL_GetTick>
 8014662:	4602      	mov	r2, r0
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	1ad3      	subs	r3, r2, r3
 8014668:	687a      	ldr	r2, [r7, #4]
 801466a:	429a      	cmp	r2, r3
 801466c:	d8f0      	bhi.n	8014650 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801466e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014672:	4618      	mov	r0, r3
 8014674:	3710      	adds	r7, #16
 8014676:	46bd      	mov	sp, r7
 8014678:	bd80      	pop	{r7, pc}
	...

0801467c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b082      	sub	sp, #8
 8014680:	af00      	add	r7, sp, #0
 8014682:	4603      	mov	r3, r0
 8014684:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014686:	4b0b      	ldr	r3, [pc, #44]	; (80146b4 <SD_CheckStatus+0x38>)
 8014688:	2201      	movs	r2, #1
 801468a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801468c:	f7ff ff7e 	bl	801458c <BSP_SD_GetCardState>
 8014690:	4603      	mov	r3, r0
 8014692:	2b00      	cmp	r3, #0
 8014694:	d107      	bne.n	80146a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014696:	4b07      	ldr	r3, [pc, #28]	; (80146b4 <SD_CheckStatus+0x38>)
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	b2db      	uxtb	r3, r3
 801469c:	f023 0301 	bic.w	r3, r3, #1
 80146a0:	b2da      	uxtb	r2, r3
 80146a2:	4b04      	ldr	r3, [pc, #16]	; (80146b4 <SD_CheckStatus+0x38>)
 80146a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80146a6:	4b03      	ldr	r3, [pc, #12]	; (80146b4 <SD_CheckStatus+0x38>)
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	b2db      	uxtb	r3, r3
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	3708      	adds	r7, #8
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}
 80146b4:	2400001d 	.word	0x2400001d

080146b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b082      	sub	sp, #8
 80146bc:	af00      	add	r7, sp, #0
 80146be:	4603      	mov	r3, r0
 80146c0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80146c2:	f7ff ff09 	bl	80144d8 <BSP_SD_Init>
 80146c6:	4603      	mov	r3, r0
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d107      	bne.n	80146dc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80146cc:	79fb      	ldrb	r3, [r7, #7]
 80146ce:	4618      	mov	r0, r3
 80146d0:	f7ff ffd4 	bl	801467c <SD_CheckStatus>
 80146d4:	4603      	mov	r3, r0
 80146d6:	461a      	mov	r2, r3
 80146d8:	4b04      	ldr	r3, [pc, #16]	; (80146ec <SD_initialize+0x34>)
 80146da:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80146dc:	4b03      	ldr	r3, [pc, #12]	; (80146ec <SD_initialize+0x34>)
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	b2db      	uxtb	r3, r3
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3708      	adds	r7, #8
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
 80146ea:	bf00      	nop
 80146ec:	2400001d 	.word	0x2400001d

080146f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	4603      	mov	r3, r0
 80146f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80146fa:	79fb      	ldrb	r3, [r7, #7]
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7ff ffbd 	bl	801467c <SD_CheckStatus>
 8014702:	4603      	mov	r3, r0
}
 8014704:	4618      	mov	r0, r3
 8014706:	3708      	adds	r7, #8
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}

0801470c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b086      	sub	sp, #24
 8014710:	af00      	add	r7, sp, #0
 8014712:	60b9      	str	r1, [r7, #8]
 8014714:	607a      	str	r2, [r7, #4]
 8014716:	603b      	str	r3, [r7, #0]
 8014718:	4603      	mov	r3, r0
 801471a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801471c:	2301      	movs	r3, #1
 801471e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014720:	f247 5030 	movw	r0, #30000	; 0x7530
 8014724:	f7ff ff8c 	bl	8014640 <SD_CheckStatusWithTimeout>
 8014728:	4603      	mov	r3, r0
 801472a:	2b00      	cmp	r3, #0
 801472c:	da01      	bge.n	8014732 <SD_read+0x26>
  {
    return res;
 801472e:	7dfb      	ldrb	r3, [r7, #23]
 8014730:	e03b      	b.n	80147aa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014732:	683a      	ldr	r2, [r7, #0]
 8014734:	6879      	ldr	r1, [r7, #4]
 8014736:	68b8      	ldr	r0, [r7, #8]
 8014738:	f7ff fef4 	bl	8014524 <BSP_SD_ReadBlocks_DMA>
 801473c:	4603      	mov	r3, r0
 801473e:	2b00      	cmp	r3, #0
 8014740:	d132      	bne.n	80147a8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014742:	4b1c      	ldr	r3, [pc, #112]	; (80147b4 <SD_read+0xa8>)
 8014744:	2200      	movs	r2, #0
 8014746:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014748:	f7f1 f89a 	bl	8005880 <HAL_GetTick>
 801474c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801474e:	bf00      	nop
 8014750:	4b18      	ldr	r3, [pc, #96]	; (80147b4 <SD_read+0xa8>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d108      	bne.n	801476a <SD_read+0x5e>
 8014758:	f7f1 f892 	bl	8005880 <HAL_GetTick>
 801475c:	4602      	mov	r2, r0
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	1ad3      	subs	r3, r2, r3
 8014762:	f247 522f 	movw	r2, #29999	; 0x752f
 8014766:	4293      	cmp	r3, r2
 8014768:	d9f2      	bls.n	8014750 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801476a:	4b12      	ldr	r3, [pc, #72]	; (80147b4 <SD_read+0xa8>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d102      	bne.n	8014778 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014772:	2301      	movs	r3, #1
 8014774:	75fb      	strb	r3, [r7, #23]
 8014776:	e017      	b.n	80147a8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014778:	4b0e      	ldr	r3, [pc, #56]	; (80147b4 <SD_read+0xa8>)
 801477a:	2200      	movs	r2, #0
 801477c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801477e:	f7f1 f87f 	bl	8005880 <HAL_GetTick>
 8014782:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014784:	e007      	b.n	8014796 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014786:	f7ff ff01 	bl	801458c <BSP_SD_GetCardState>
 801478a:	4603      	mov	r3, r0
 801478c:	2b00      	cmp	r3, #0
 801478e:	d102      	bne.n	8014796 <SD_read+0x8a>
          {
            res = RES_OK;
 8014790:	2300      	movs	r3, #0
 8014792:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014794:	e008      	b.n	80147a8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014796:	f7f1 f873 	bl	8005880 <HAL_GetTick>
 801479a:	4602      	mov	r2, r0
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	1ad3      	subs	r3, r2, r3
 80147a0:	f247 522f 	movw	r2, #29999	; 0x752f
 80147a4:	4293      	cmp	r3, r2
 80147a6:	d9ee      	bls.n	8014786 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80147a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80147aa:	4618      	mov	r0, r3
 80147ac:	3718      	adds	r7, #24
 80147ae:	46bd      	mov	sp, r7
 80147b0:	bd80      	pop	{r7, pc}
 80147b2:	bf00      	nop
 80147b4:	24000cc8 	.word	0x24000cc8

080147b8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b086      	sub	sp, #24
 80147bc:	af00      	add	r7, sp, #0
 80147be:	60b9      	str	r1, [r7, #8]
 80147c0:	607a      	str	r2, [r7, #4]
 80147c2:	603b      	str	r3, [r7, #0]
 80147c4:	4603      	mov	r3, r0
 80147c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80147c8:	2301      	movs	r3, #1
 80147ca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80147cc:	4b24      	ldr	r3, [pc, #144]	; (8014860 <SD_write+0xa8>)
 80147ce:	2200      	movs	r2, #0
 80147d0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80147d2:	f247 5030 	movw	r0, #30000	; 0x7530
 80147d6:	f7ff ff33 	bl	8014640 <SD_CheckStatusWithTimeout>
 80147da:	4603      	mov	r3, r0
 80147dc:	2b00      	cmp	r3, #0
 80147de:	da01      	bge.n	80147e4 <SD_write+0x2c>
  {
    return res;
 80147e0:	7dfb      	ldrb	r3, [r7, #23]
 80147e2:	e038      	b.n	8014856 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80147e4:	683a      	ldr	r2, [r7, #0]
 80147e6:	6879      	ldr	r1, [r7, #4]
 80147e8:	68b8      	ldr	r0, [r7, #8]
 80147ea:	f7ff feb5 	bl	8014558 <BSP_SD_WriteBlocks_DMA>
 80147ee:	4603      	mov	r3, r0
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d12f      	bne.n	8014854 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80147f4:	f7f1 f844 	bl	8005880 <HAL_GetTick>
 80147f8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80147fa:	bf00      	nop
 80147fc:	4b18      	ldr	r3, [pc, #96]	; (8014860 <SD_write+0xa8>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d108      	bne.n	8014816 <SD_write+0x5e>
 8014804:	f7f1 f83c 	bl	8005880 <HAL_GetTick>
 8014808:	4602      	mov	r2, r0
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	1ad3      	subs	r3, r2, r3
 801480e:	f247 522f 	movw	r2, #29999	; 0x752f
 8014812:	4293      	cmp	r3, r2
 8014814:	d9f2      	bls.n	80147fc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8014816:	4b12      	ldr	r3, [pc, #72]	; (8014860 <SD_write+0xa8>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d102      	bne.n	8014824 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801481e:	2301      	movs	r3, #1
 8014820:	75fb      	strb	r3, [r7, #23]
 8014822:	e017      	b.n	8014854 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014824:	4b0e      	ldr	r3, [pc, #56]	; (8014860 <SD_write+0xa8>)
 8014826:	2200      	movs	r2, #0
 8014828:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801482a:	f7f1 f829 	bl	8005880 <HAL_GetTick>
 801482e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014830:	e007      	b.n	8014842 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014832:	f7ff feab 	bl	801458c <BSP_SD_GetCardState>
 8014836:	4603      	mov	r3, r0
 8014838:	2b00      	cmp	r3, #0
 801483a:	d102      	bne.n	8014842 <SD_write+0x8a>
          {
            res = RES_OK;
 801483c:	2300      	movs	r3, #0
 801483e:	75fb      	strb	r3, [r7, #23]
            break;
 8014840:	e008      	b.n	8014854 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014842:	f7f1 f81d 	bl	8005880 <HAL_GetTick>
 8014846:	4602      	mov	r2, r0
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	1ad3      	subs	r3, r2, r3
 801484c:	f247 522f 	movw	r2, #29999	; 0x752f
 8014850:	4293      	cmp	r3, r2
 8014852:	d9ee      	bls.n	8014832 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014854:	7dfb      	ldrb	r3, [r7, #23]
}
 8014856:	4618      	mov	r0, r3
 8014858:	3718      	adds	r7, #24
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}
 801485e:	bf00      	nop
 8014860:	24000cc4 	.word	0x24000cc4

08014864 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b08c      	sub	sp, #48	; 0x30
 8014868:	af00      	add	r7, sp, #0
 801486a:	4603      	mov	r3, r0
 801486c:	603a      	str	r2, [r7, #0]
 801486e:	71fb      	strb	r3, [r7, #7]
 8014870:	460b      	mov	r3, r1
 8014872:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014874:	2301      	movs	r3, #1
 8014876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801487a:	4b25      	ldr	r3, [pc, #148]	; (8014910 <SD_ioctl+0xac>)
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	b2db      	uxtb	r3, r3
 8014880:	f003 0301 	and.w	r3, r3, #1
 8014884:	2b00      	cmp	r3, #0
 8014886:	d001      	beq.n	801488c <SD_ioctl+0x28>
 8014888:	2303      	movs	r3, #3
 801488a:	e03c      	b.n	8014906 <SD_ioctl+0xa2>

  switch (cmd)
 801488c:	79bb      	ldrb	r3, [r7, #6]
 801488e:	2b03      	cmp	r3, #3
 8014890:	d834      	bhi.n	80148fc <SD_ioctl+0x98>
 8014892:	a201      	add	r2, pc, #4	; (adr r2, 8014898 <SD_ioctl+0x34>)
 8014894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014898:	080148a9 	.word	0x080148a9
 801489c:	080148b1 	.word	0x080148b1
 80148a0:	080148c9 	.word	0x080148c9
 80148a4:	080148e3 	.word	0x080148e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80148a8:	2300      	movs	r3, #0
 80148aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148ae:	e028      	b.n	8014902 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80148b0:	f107 0308 	add.w	r3, r7, #8
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7ff fe79 	bl	80145ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80148ba:	6a3a      	ldr	r2, [r7, #32]
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80148c0:	2300      	movs	r3, #0
 80148c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148c6:	e01c      	b.n	8014902 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80148c8:	f107 0308 	add.w	r3, r7, #8
 80148cc:	4618      	mov	r0, r3
 80148ce:	f7ff fe6d 	bl	80145ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80148d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d4:	b29a      	uxth	r2, r3
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80148da:	2300      	movs	r3, #0
 80148dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148e0:	e00f      	b.n	8014902 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80148e2:	f107 0308 	add.w	r3, r7, #8
 80148e6:	4618      	mov	r0, r3
 80148e8:	f7ff fe60 	bl	80145ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80148ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ee:	0a5a      	lsrs	r2, r3, #9
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80148f4:	2300      	movs	r3, #0
 80148f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148fa:	e002      	b.n	8014902 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80148fc:	2304      	movs	r3, #4
 80148fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014906:	4618      	mov	r0, r3
 8014908:	3730      	adds	r7, #48	; 0x30
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}
 801490e:	bf00      	nop
 8014910:	2400001d 	.word	0x2400001d

08014914 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014914:	b480      	push	{r7}
 8014916:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014918:	4b03      	ldr	r3, [pc, #12]	; (8014928 <BSP_SD_WriteCpltCallback+0x14>)
 801491a:	2201      	movs	r2, #1
 801491c:	601a      	str	r2, [r3, #0]
}
 801491e:	bf00      	nop
 8014920:	46bd      	mov	sp, r7
 8014922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014926:	4770      	bx	lr
 8014928:	24000cc4 	.word	0x24000cc4

0801492c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801492c:	b480      	push	{r7}
 801492e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014930:	4b03      	ldr	r3, [pc, #12]	; (8014940 <BSP_SD_ReadCpltCallback+0x14>)
 8014932:	2201      	movs	r2, #1
 8014934:	601a      	str	r2, [r3, #0]
}
 8014936:	bf00      	nop
 8014938:	46bd      	mov	sp, r7
 801493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493e:	4770      	bx	lr
 8014940:	24000cc8 	.word	0x24000cc8

08014944 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b084      	sub	sp, #16
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
 801494c:	460b      	mov	r3, r1
 801494e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8014950:	f248 0074 	movw	r0, #32884	; 0x8074
 8014954:	f006 fcc4 	bl	801b2e0 <malloc>
 8014958:	4603      	mov	r3, r0
 801495a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d105      	bne.n	801496e <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	2200      	movs	r2, #0
 8014966:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801496a:	2302      	movs	r3, #2
 801496c:	e034      	b.n	80149d8 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	68fa      	ldr	r2, [r7, #12]
 8014972:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	7c1b      	ldrb	r3, [r3, #16]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d115      	bne.n	80149aa <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801497e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014982:	2202      	movs	r2, #2
 8014984:	2101      	movs	r1, #1
 8014986:	6878      	ldr	r0, [r7, #4]
 8014988:	f005 fd1d 	bl	801a3c6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2201      	movs	r2, #1
 8014990:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8014994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014998:	2202      	movs	r2, #2
 801499a:	2181      	movs	r1, #129	; 0x81
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f005 fd12 	bl	801a3c6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2201      	movs	r2, #1
 80149a6:	871a      	strh	r2, [r3, #56]	; 0x38
 80149a8:	e012      	b.n	80149d0 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80149aa:	2340      	movs	r3, #64	; 0x40
 80149ac:	2202      	movs	r2, #2
 80149ae:	2101      	movs	r1, #1
 80149b0:	6878      	ldr	r0, [r7, #4]
 80149b2:	f005 fd08 	bl	801a3c6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	2201      	movs	r2, #1
 80149ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80149be:	2340      	movs	r3, #64	; 0x40
 80149c0:	2202      	movs	r2, #2
 80149c2:	2181      	movs	r1, #129	; 0x81
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f005 fcfe 	bl	801a3c6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	2201      	movs	r2, #1
 80149ce:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f000 f98e 	bl	8014cf2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80149d6:	2300      	movs	r3, #0
}
 80149d8:	4618      	mov	r0, r3
 80149da:	3710      	adds	r7, #16
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}

080149e0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b082      	sub	sp, #8
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	460b      	mov	r3, r1
 80149ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80149ec:	2101      	movs	r1, #1
 80149ee:	6878      	ldr	r0, [r7, #4]
 80149f0:	f005 fd0f 	bl	801a412 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2200      	movs	r2, #0
 80149f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80149fc:	2181      	movs	r1, #129	; 0x81
 80149fe:	6878      	ldr	r0, [r7, #4]
 8014a00:	f005 fd07 	bl	801a412 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	2200      	movs	r2, #0
 8014a08:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8014a0a:	6878      	ldr	r0, [r7, #4]
 8014a0c:	f000 f9cf 	bl	8014dae <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d009      	beq.n	8014a2e <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014a20:	4618      	mov	r0, r3
 8014a22:	f006 fc65 	bl	801b2f0 <free>
    pdev->pClassData = NULL;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	2200      	movs	r2, #0
 8014a2a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014a2e:	2300      	movs	r3, #0
}
 8014a30:	4618      	mov	r0, r3
 8014a32:	3708      	adds	r7, #8
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd80      	pop	{r7, pc}

08014a38 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b086      	sub	sp, #24
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
 8014a40:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014a48:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a52:	683b      	ldr	r3, [r7, #0]
 8014a54:	781b      	ldrb	r3, [r3, #0]
 8014a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d04d      	beq.n	8014afa <USBD_MSC_Setup+0xc2>
 8014a5e:	2b20      	cmp	r3, #32
 8014a60:	f040 80c6 	bne.w	8014bf0 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8014a64:	683b      	ldr	r3, [r7, #0]
 8014a66:	785b      	ldrb	r3, [r3, #1]
 8014a68:	2bfe      	cmp	r3, #254	; 0xfe
 8014a6a:	d002      	beq.n	8014a72 <USBD_MSC_Setup+0x3a>
 8014a6c:	2bff      	cmp	r3, #255	; 0xff
 8014a6e:	d024      	beq.n	8014aba <USBD_MSC_Setup+0x82>
 8014a70:	e03b      	b.n	8014aea <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	885b      	ldrh	r3, [r3, #2]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d118      	bne.n	8014aac <USBD_MSC_Setup+0x74>
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	88db      	ldrh	r3, [r3, #6]
 8014a7e:	2b01      	cmp	r3, #1
 8014a80:	d114      	bne.n	8014aac <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 8014a82:	683b      	ldr	r3, [r7, #0]
 8014a84:	781b      	ldrb	r3, [r3, #0]
 8014a86:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	da0f      	bge.n	8014aac <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a92:	699b      	ldr	r3, [r3, #24]
 8014a94:	4798      	blx	r3
 8014a96:	4603      	mov	r3, r0
 8014a98:	461a      	mov	r2, r3
 8014a9a:	693b      	ldr	r3, [r7, #16]
 8014a9c:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8014a9e:	693b      	ldr	r3, [r7, #16]
 8014aa0:	2201      	movs	r2, #1
 8014aa2:	4619      	mov	r1, r3
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f002 fdaa 	bl	80175fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8014aaa:	e025      	b.n	8014af8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8014aac:	6839      	ldr	r1, [r7, #0]
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f002 fd34 	bl	801751c <USBD_CtlError>
        ret = USBD_FAIL;
 8014ab4:	2303      	movs	r3, #3
 8014ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8014ab8:	e01e      	b.n	8014af8 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	885b      	ldrh	r3, [r3, #2]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d10c      	bne.n	8014adc <USBD_MSC_Setup+0xa4>
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	88db      	ldrh	r3, [r3, #6]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d108      	bne.n	8014adc <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	db03      	blt.n	8014adc <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f000 f947 	bl	8014d68 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8014ada:	e00d      	b.n	8014af8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8014adc:	6839      	ldr	r1, [r7, #0]
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	f002 fd1c 	bl	801751c <USBD_CtlError>
        ret = USBD_FAIL;
 8014ae4:	2303      	movs	r3, #3
 8014ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8014ae8:	e006      	b.n	8014af8 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8014aea:	6839      	ldr	r1, [r7, #0]
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f002 fd15 	bl	801751c <USBD_CtlError>
      ret = USBD_FAIL;
 8014af2:	2303      	movs	r3, #3
 8014af4:	75fb      	strb	r3, [r7, #23]
      break;
 8014af6:	bf00      	nop
    }
    break;
 8014af8:	e081      	b.n	8014bfe <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	785b      	ldrb	r3, [r3, #1]
 8014afe:	2b0b      	cmp	r3, #11
 8014b00:	d86d      	bhi.n	8014bde <USBD_MSC_Setup+0x1a6>
 8014b02:	a201      	add	r2, pc, #4	; (adr r2, 8014b08 <USBD_MSC_Setup+0xd0>)
 8014b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b08:	08014b39 	.word	0x08014b39
 8014b0c:	08014baf 	.word	0x08014baf
 8014b10:	08014bdf 	.word	0x08014bdf
 8014b14:	08014bdf 	.word	0x08014bdf
 8014b18:	08014bdf 	.word	0x08014bdf
 8014b1c:	08014bdf 	.word	0x08014bdf
 8014b20:	08014bdf 	.word	0x08014bdf
 8014b24:	08014bdf 	.word	0x08014bdf
 8014b28:	08014bdf 	.word	0x08014bdf
 8014b2c:	08014bdf 	.word	0x08014bdf
 8014b30:	08014b61 	.word	0x08014b61
 8014b34:	08014b89 	.word	0x08014b89
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b3e:	2b03      	cmp	r3, #3
 8014b40:	d107      	bne.n	8014b52 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014b42:	f107 030e 	add.w	r3, r7, #14
 8014b46:	2202      	movs	r2, #2
 8014b48:	4619      	mov	r1, r3
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	f002 fd57 	bl	80175fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8014b50:	e04d      	b.n	8014bee <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8014b52:	6839      	ldr	r1, [r7, #0]
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f002 fce1 	bl	801751c <USBD_CtlError>
        ret = USBD_FAIL;
 8014b5a:	2303      	movs	r3, #3
 8014b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8014b5e:	e046      	b.n	8014bee <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b66:	2b03      	cmp	r3, #3
 8014b68:	d107      	bne.n	8014b7a <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8014b6a:	693b      	ldr	r3, [r7, #16]
 8014b6c:	3304      	adds	r3, #4
 8014b6e:	2201      	movs	r2, #1
 8014b70:	4619      	mov	r1, r3
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f002 fd43 	bl	80175fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8014b78:	e039      	b.n	8014bee <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8014b7a:	6839      	ldr	r1, [r7, #0]
 8014b7c:	6878      	ldr	r0, [r7, #4]
 8014b7e:	f002 fccd 	bl	801751c <USBD_CtlError>
        ret = USBD_FAIL;
 8014b82:	2303      	movs	r3, #3
 8014b84:	75fb      	strb	r3, [r7, #23]
      break;
 8014b86:	e032      	b.n	8014bee <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b8e:	2b03      	cmp	r3, #3
 8014b90:	d106      	bne.n	8014ba0 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	885b      	ldrh	r3, [r3, #2]
 8014b96:	b2db      	uxtb	r3, r3
 8014b98:	461a      	mov	r2, r3
 8014b9a:	693b      	ldr	r3, [r7, #16]
 8014b9c:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8014b9e:	e026      	b.n	8014bee <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8014ba0:	6839      	ldr	r1, [r7, #0]
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	f002 fcba 	bl	801751c <USBD_CtlError>
        ret = USBD_FAIL;
 8014ba8:	2303      	movs	r3, #3
 8014baa:	75fb      	strb	r3, [r7, #23]
      break;
 8014bac:	e01f      	b.n	8014bee <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014bb4:	2b03      	cmp	r3, #3
 8014bb6:	d119      	bne.n	8014bec <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	885b      	ldrh	r3, [r3, #2]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d115      	bne.n	8014bec <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	889b      	ldrh	r3, [r3, #4]
 8014bc4:	b2db      	uxtb	r3, r3
 8014bc6:	4619      	mov	r1, r3
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f005 fc41 	bl	801a450 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	889b      	ldrh	r3, [r3, #4]
 8014bd2:	b2db      	uxtb	r3, r3
 8014bd4:	4619      	mov	r1, r3
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f000 fa90 	bl	80150fc <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8014bdc:	e006      	b.n	8014bec <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8014bde:	6839      	ldr	r1, [r7, #0]
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f002 fc9b 	bl	801751c <USBD_CtlError>
      ret = USBD_FAIL;
 8014be6:	2303      	movs	r3, #3
 8014be8:	75fb      	strb	r3, [r7, #23]
      break;
 8014bea:	e000      	b.n	8014bee <USBD_MSC_Setup+0x1b6>
      break;
 8014bec:	bf00      	nop
    }
    break;
 8014bee:	e006      	b.n	8014bfe <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8014bf0:	6839      	ldr	r1, [r7, #0]
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	f002 fc92 	bl	801751c <USBD_CtlError>
    ret = USBD_FAIL;
 8014bf8:	2303      	movs	r3, #3
 8014bfa:	75fb      	strb	r3, [r7, #23]
    break;
 8014bfc:	bf00      	nop
  }

  return (uint8_t)ret;
 8014bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c00:	4618      	mov	r0, r3
 8014c02:	3718      	adds	r7, #24
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}

08014c08 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b082      	sub	sp, #8
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	460b      	mov	r3, r1
 8014c12:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8014c14:	78fb      	ldrb	r3, [r7, #3]
 8014c16:	4619      	mov	r1, r3
 8014c18:	6878      	ldr	r0, [r7, #4]
 8014c1a:	f000 f8d9 	bl	8014dd0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8014c1e:	2300      	movs	r3, #0
}
 8014c20:	4618      	mov	r0, r3
 8014c22:	3708      	adds	r7, #8
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd80      	pop	{r7, pc}

08014c28 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b082      	sub	sp, #8
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
 8014c30:	460b      	mov	r3, r1
 8014c32:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8014c34:	78fb      	ldrb	r3, [r7, #3]
 8014c36:	4619      	mov	r1, r3
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f000 f8fd 	bl	8014e38 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8014c3e:	2300      	movs	r3, #0
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3708      	adds	r7, #8
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}

08014c48 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8014c48:	b480      	push	{r7}
 8014c4a:	b083      	sub	sp, #12
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2220      	movs	r2, #32
 8014c54:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8014c56:	4b03      	ldr	r3, [pc, #12]	; (8014c64 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	370c      	adds	r7, #12
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c62:	4770      	bx	lr
 8014c64:	24000058 	.word	0x24000058

08014c68 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8014c68:	b480      	push	{r7}
 8014c6a:	b083      	sub	sp, #12
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2220      	movs	r2, #32
 8014c74:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8014c76:	4b03      	ldr	r3, [pc, #12]	; (8014c84 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8014c78:	4618      	mov	r0, r3
 8014c7a:	370c      	adds	r7, #12
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c82:	4770      	bx	lr
 8014c84:	24000078 	.word	0x24000078

08014c88 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014c88:	b480      	push	{r7}
 8014c8a:	b083      	sub	sp, #12
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	2220      	movs	r2, #32
 8014c94:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8014c96:	4b03      	ldr	r3, [pc, #12]	; (8014ca4 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	370c      	adds	r7, #12
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca2:	4770      	bx	lr
 8014ca4:	24000098 	.word	0x24000098

08014ca8 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014ca8:	b480      	push	{r7}
 8014caa:	b083      	sub	sp, #12
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	220a      	movs	r2, #10
 8014cb4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8014cb6:	4b03      	ldr	r3, [pc, #12]	; (8014cc4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	370c      	adds	r7, #12
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc2:	4770      	bx	lr
 8014cc4:	240000b8 	.word	0x240000b8

08014cc8 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8014cc8:	b480      	push	{r7}
 8014cca:	b083      	sub	sp, #12
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d101      	bne.n	8014cdc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014cd8:	2303      	movs	r3, #3
 8014cda:	e004      	b.n	8014ce6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	683a      	ldr	r2, [r7, #0]
 8014ce0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8014ce4:	2300      	movs	r3, #0
}
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	370c      	adds	r7, #12
 8014cea:	46bd      	mov	sp, r7
 8014cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf0:	4770      	bx	lr

08014cf2 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8014cf2:	b580      	push	{r7, lr}
 8014cf4:	b084      	sub	sp, #16
 8014cf6:	af00      	add	r7, sp, #0
 8014cf8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d00:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	2200      	movs	r2, #0
 8014d06:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8014d0e:	68fa      	ldr	r2, [r7, #12]
 8014d10:	f248 0361 	movw	r3, #32865	; 0x8061
 8014d14:	4413      	add	r3, r2
 8014d16:	2200      	movs	r2, #0
 8014d18:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8014d1a:	68fa      	ldr	r2, [r7, #12]
 8014d1c:	f248 0360 	movw	r3, #32864	; 0x8060
 8014d20:	4413      	add	r3, r2
 8014d22:	2200      	movs	r2, #0
 8014d24:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014d26:	68fa      	ldr	r2, [r7, #12]
 8014d28:	f248 0362 	movw	r3, #32866	; 0x8062
 8014d2c:	4413      	add	r3, r2
 8014d2e:	2200      	movs	r2, #0
 8014d30:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	2000      	movs	r0, #0
 8014d3c:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8014d3e:	2101      	movs	r1, #1
 8014d40:	6878      	ldr	r0, [r7, #4]
 8014d42:	f005 fb85 	bl	801a450 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8014d46:	2181      	movs	r1, #129	; 0x81
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f005 fb81 	bl	801a450 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	f248 0210 	movw	r2, #32784	; 0x8010
 8014d54:	441a      	add	r2, r3
 8014d56:	231f      	movs	r3, #31
 8014d58:	2101      	movs	r1, #1
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f005 fc41 	bl	801a5e2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8014d60:	bf00      	nop
 8014d62:	3710      	adds	r7, #16
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}

08014d68 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b084      	sub	sp, #16
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d76:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	2201      	movs	r2, #1
 8014d82:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8014d84:	2181      	movs	r1, #129	; 0x81
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f005 fba0 	bl	801a4cc <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8014d8c:	2101      	movs	r1, #1
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f005 fb9c 	bl	801a4cc <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	f248 0210 	movw	r2, #32784	; 0x8010
 8014d9a:	441a      	add	r2, r3
 8014d9c:	231f      	movs	r3, #31
 8014d9e:	2101      	movs	r1, #1
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f005 fc1e 	bl	801a5e2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8014da6:	bf00      	nop
 8014da8:	3710      	adds	r7, #16
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}

08014dae <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8014dae:	b480      	push	{r7}
 8014db0:	b085      	sub	sp, #20
 8014db2:	af00      	add	r7, sp, #0
 8014db4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014dbc:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	721a      	strb	r2, [r3, #8]
}
 8014dc4:	bf00      	nop
 8014dc6:	3714      	adds	r7, #20
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dce:	4770      	bx	lr

08014dd0 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b084      	sub	sp, #16
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
 8014dd8:	460b      	mov	r3, r1
 8014dda:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014de2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	7a1b      	ldrb	r3, [r3, #8]
 8014de8:	2b02      	cmp	r3, #2
 8014dea:	d004      	beq.n	8014df6 <MSC_BOT_DataIn+0x26>
 8014dec:	2b02      	cmp	r3, #2
 8014dee:	db1c      	blt.n	8014e2a <MSC_BOT_DataIn+0x5a>
 8014df0:	2b04      	cmp	r3, #4
 8014df2:	dc1a      	bgt.n	8014e2a <MSC_BOT_DataIn+0x5a>
 8014df4:	e014      	b.n	8014e20 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8014df6:	68fa      	ldr	r2, [r7, #12]
 8014df8:	f248 031d 	movw	r3, #32797	; 0x801d
 8014dfc:	4413      	add	r3, r2
 8014dfe:	7819      	ldrb	r1, [r3, #0]
 8014e00:	68fa      	ldr	r2, [r7, #12]
 8014e02:	f248 031f 	movw	r3, #32799	; 0x801f
 8014e06:	4413      	add	r3, r2
 8014e08:	461a      	mov	r2, r3
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f000 f99e 	bl	801514c <SCSI_ProcessCmd>
 8014e10:	4603      	mov	r3, r0
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	da0b      	bge.n	8014e2e <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014e16:	2101      	movs	r1, #1
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f000 f90b 	bl	8015034 <MSC_BOT_SendCSW>
    }
    break;
 8014e1e:	e006      	b.n	8014e2e <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014e20:	2100      	movs	r1, #0
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f000 f906 	bl	8015034 <MSC_BOT_SendCSW>
    break;
 8014e28:	e002      	b.n	8014e30 <MSC_BOT_DataIn+0x60>

  default:
    break;
 8014e2a:	bf00      	nop
 8014e2c:	e000      	b.n	8014e30 <MSC_BOT_DataIn+0x60>
    break;
 8014e2e:	bf00      	nop
  }
}
 8014e30:	bf00      	nop
 8014e32:	3710      	adds	r7, #16
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}

08014e38 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b084      	sub	sp, #16
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	460b      	mov	r3, r1
 8014e42:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e4a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	7a1b      	ldrb	r3, [r3, #8]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d002      	beq.n	8014e5a <MSC_BOT_DataOut+0x22>
 8014e54:	2b01      	cmp	r3, #1
 8014e56:	d004      	beq.n	8014e62 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8014e58:	e018      	b.n	8014e8c <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8014e5a:	6878      	ldr	r0, [r7, #4]
 8014e5c:	f000 f81a 	bl	8014e94 <MSC_BOT_CBW_Decode>
      break;
 8014e60:	e014      	b.n	8014e8c <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8014e62:	68fa      	ldr	r2, [r7, #12]
 8014e64:	f248 031d 	movw	r3, #32797	; 0x801d
 8014e68:	4413      	add	r3, r2
 8014e6a:	7819      	ldrb	r1, [r3, #0]
 8014e6c:	68fa      	ldr	r2, [r7, #12]
 8014e6e:	f248 031f 	movw	r3, #32799	; 0x801f
 8014e72:	4413      	add	r3, r2
 8014e74:	461a      	mov	r2, r3
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	f000 f968 	bl	801514c <SCSI_ProcessCmd>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	da03      	bge.n	8014e8a <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014e82:	2101      	movs	r1, #1
 8014e84:	6878      	ldr	r0, [r7, #4]
 8014e86:	f000 f8d5 	bl	8015034 <MSC_BOT_SendCSW>
      break;
 8014e8a:	bf00      	nop
  }
}
 8014e8c:	bf00      	nop
 8014e8e:	3710      	adds	r7, #16
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bd80      	pop	{r7, pc}

08014e94 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b084      	sub	sp, #16
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ea2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8014ea4:	68fa      	ldr	r2, [r7, #12]
 8014ea6:	f248 0314 	movw	r3, #32788	; 0x8014
 8014eaa:	4413      	add	r3, r2
 8014eac:	681a      	ldr	r2, [r3, #0]
 8014eae:	68f9      	ldr	r1, [r7, #12]
 8014eb0:	f248 0334 	movw	r3, #32820	; 0x8034
 8014eb4:	440b      	add	r3, r1
 8014eb6:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8014eb8:	68fa      	ldr	r2, [r7, #12]
 8014eba:	f248 0318 	movw	r3, #32792	; 0x8018
 8014ebe:	4413      	add	r3, r2
 8014ec0:	681a      	ldr	r2, [r3, #0]
 8014ec2:	68f9      	ldr	r1, [r7, #12]
 8014ec4:	f248 0338 	movw	r3, #32824	; 0x8038
 8014ec8:	440b      	add	r3, r1
 8014eca:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8014ecc:	2101      	movs	r1, #1
 8014ece:	6878      	ldr	r0, [r7, #4]
 8014ed0:	f005 fba8 	bl	801a624 <USBD_LL_GetRxDataSize>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	2b1f      	cmp	r3, #31
 8014ed8:	d11c      	bne.n	8014f14 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014eda:	68fa      	ldr	r2, [r7, #12]
 8014edc:	f248 0310 	movw	r3, #32784	; 0x8010
 8014ee0:	4413      	add	r3, r2
 8014ee2:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8014ee4:	4a38      	ldr	r2, [pc, #224]	; (8014fc8 <MSC_BOT_CBW_Decode+0x134>)
 8014ee6:	4293      	cmp	r3, r2
 8014ee8:	d114      	bne.n	8014f14 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014eea:	68fa      	ldr	r2, [r7, #12]
 8014eec:	f248 031d 	movw	r3, #32797	; 0x801d
 8014ef0:	4413      	add	r3, r2
 8014ef2:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014ef4:	2b01      	cmp	r3, #1
 8014ef6:	d80d      	bhi.n	8014f14 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014ef8:	68fa      	ldr	r2, [r7, #12]
 8014efa:	f248 031e 	movw	r3, #32798	; 0x801e
 8014efe:	4413      	add	r3, r2
 8014f00:	781b      	ldrb	r3, [r3, #0]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d006      	beq.n	8014f14 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8014f06:	68fa      	ldr	r2, [r7, #12]
 8014f08:	f248 031e 	movw	r3, #32798	; 0x801e
 8014f0c:	4413      	add	r3, r2
 8014f0e:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014f10:	2b10      	cmp	r3, #16
 8014f12:	d910      	bls.n	8014f36 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014f14:	68fa      	ldr	r2, [r7, #12]
 8014f16:	f248 031d 	movw	r3, #32797	; 0x801d
 8014f1a:	4413      	add	r3, r2
 8014f1c:	7819      	ldrb	r1, [r3, #0]
 8014f1e:	2320      	movs	r3, #32
 8014f20:	2205      	movs	r2, #5
 8014f22:	6878      	ldr	r0, [r7, #4]
 8014f24:	f000 fd36 	bl	8015994 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	2202      	movs	r2, #2
 8014f2c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f000 f8b2 	bl	8015098 <MSC_BOT_Abort>
 8014f34:	e044      	b.n	8014fc0 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8014f36:	68fa      	ldr	r2, [r7, #12]
 8014f38:	f248 031d 	movw	r3, #32797	; 0x801d
 8014f3c:	4413      	add	r3, r2
 8014f3e:	7819      	ldrb	r1, [r3, #0]
 8014f40:	68fa      	ldr	r2, [r7, #12]
 8014f42:	f248 031f 	movw	r3, #32799	; 0x801f
 8014f46:	4413      	add	r3, r2
 8014f48:	461a      	mov	r2, r3
 8014f4a:	6878      	ldr	r0, [r7, #4]
 8014f4c:	f000 f8fe 	bl	801514c <SCSI_ProcessCmd>
 8014f50:	4603      	mov	r3, r0
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	da0c      	bge.n	8014f70 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	7a1b      	ldrb	r3, [r3, #8]
 8014f5a:	2b05      	cmp	r3, #5
 8014f5c:	d104      	bne.n	8014f68 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014f5e:	2101      	movs	r1, #1
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f000 f867 	bl	8015034 <MSC_BOT_SendCSW>
 8014f66:	e02b      	b.n	8014fc0 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8014f68:	6878      	ldr	r0, [r7, #4]
 8014f6a:	f000 f895 	bl	8015098 <MSC_BOT_Abort>
 8014f6e:	e027      	b.n	8014fc0 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	7a1b      	ldrb	r3, [r3, #8]
 8014f74:	2b02      	cmp	r3, #2
 8014f76:	d022      	beq.n	8014fbe <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8014f7c:	2b01      	cmp	r3, #1
 8014f7e:	d01e      	beq.n	8014fbe <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8014f84:	2b03      	cmp	r3, #3
 8014f86:	d01a      	beq.n	8014fbe <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d009      	beq.n	8014fa4 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	f103 0110 	add.w	r1, r3, #16
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	68db      	ldr	r3, [r3, #12]
 8014f9a:	461a      	mov	r2, r3
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f000 f815 	bl	8014fcc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8014fa2:	e00d      	b.n	8014fc0 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	68db      	ldr	r3, [r3, #12]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d104      	bne.n	8014fb6 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014fac:	2100      	movs	r1, #0
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	f000 f840 	bl	8015034 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8014fb4:	e004      	b.n	8014fc0 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8014fb6:	6878      	ldr	r0, [r7, #4]
 8014fb8:	f000 f86e 	bl	8015098 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8014fbc:	e000      	b.n	8014fc0 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8014fbe:	bf00      	nop
    }
  }
}
 8014fc0:	3710      	adds	r7, #16
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}
 8014fc6:	bf00      	nop
 8014fc8:	43425355 	.word	0x43425355

08014fcc <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b086      	sub	sp, #24
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	60f8      	str	r0, [r7, #12]
 8014fd4:	60b9      	str	r1, [r7, #8]
 8014fd6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fde:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8014fe0:	697a      	ldr	r2, [r7, #20]
 8014fe2:	f248 0318 	movw	r3, #32792	; 0x8018
 8014fe6:	4413      	add	r3, r2
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	687a      	ldr	r2, [r7, #4]
 8014fec:	4293      	cmp	r3, r2
 8014fee:	bf28      	it	cs
 8014ff0:	4613      	movcs	r3, r2
 8014ff2:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8014ff4:	697a      	ldr	r2, [r7, #20]
 8014ff6:	f248 0338 	movw	r3, #32824	; 0x8038
 8014ffa:	4413      	add	r3, r2
 8014ffc:	681a      	ldr	r2, [r3, #0]
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	1ad2      	subs	r2, r2, r3
 8015002:	6979      	ldr	r1, [r7, #20]
 8015004:	f248 0338 	movw	r3, #32824	; 0x8038
 8015008:	440b      	add	r3, r1
 801500a:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801500c:	697a      	ldr	r2, [r7, #20]
 801500e:	f248 033c 	movw	r3, #32828	; 0x803c
 8015012:	4413      	add	r3, r2
 8015014:	2200      	movs	r2, #0
 8015016:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	2204      	movs	r2, #4
 801501c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 801501e:	693b      	ldr	r3, [r7, #16]
 8015020:	68ba      	ldr	r2, [r7, #8]
 8015022:	2181      	movs	r1, #129	; 0x81
 8015024:	68f8      	ldr	r0, [r7, #12]
 8015026:	f005 fabb 	bl	801a5a0 <USBD_LL_Transmit>
}
 801502a:	bf00      	nop
 801502c:	3718      	adds	r7, #24
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}
	...

08015034 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b084      	sub	sp, #16
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	460b      	mov	r3, r1
 801503e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015046:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8015048:	68fa      	ldr	r2, [r7, #12]
 801504a:	f248 0330 	movw	r3, #32816	; 0x8030
 801504e:	4413      	add	r3, r2
 8015050:	4a10      	ldr	r2, [pc, #64]	; (8015094 <MSC_BOT_SendCSW+0x60>)
 8015052:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8015054:	68fa      	ldr	r2, [r7, #12]
 8015056:	f248 033c 	movw	r3, #32828	; 0x803c
 801505a:	4413      	add	r3, r2
 801505c:	78fa      	ldrb	r2, [r7, #3]
 801505e:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	2200      	movs	r2, #0
 8015064:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	f248 0230 	movw	r2, #32816	; 0x8030
 801506c:	441a      	add	r2, r3
 801506e:	230d      	movs	r3, #13
 8015070:	2181      	movs	r1, #129	; 0x81
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f005 fa94 	bl	801a5a0 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	f248 0210 	movw	r2, #32784	; 0x8010
 801507e:	441a      	add	r2, r3
 8015080:	231f      	movs	r3, #31
 8015082:	2101      	movs	r1, #1
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f005 faac 	bl	801a5e2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 801508a:	bf00      	nop
 801508c:	3710      	adds	r7, #16
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}
 8015092:	bf00      	nop
 8015094:	53425355 	.word	0x53425355

08015098 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b084      	sub	sp, #16
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80150a6:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 80150a8:	68fa      	ldr	r2, [r7, #12]
 80150aa:	f248 031c 	movw	r3, #32796	; 0x801c
 80150ae:	4413      	add	r3, r2
 80150b0:	781b      	ldrb	r3, [r3, #0]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d10e      	bne.n	80150d4 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 80150b6:	68fa      	ldr	r2, [r7, #12]
 80150b8:	f248 0318 	movw	r3, #32792	; 0x8018
 80150bc:	4413      	add	r3, r2
 80150be:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d007      	beq.n	80150d4 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d103      	bne.n	80150d4 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80150cc:	2101      	movs	r1, #1
 80150ce:	6878      	ldr	r0, [r7, #4]
 80150d0:	f005 f9dd 	bl	801a48e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80150d4:	2181      	movs	r1, #129	; 0x81
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f005 f9d9 	bl	801a48e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	7a5b      	ldrb	r3, [r3, #9]
 80150e0:	2b02      	cmp	r3, #2
 80150e2:	d107      	bne.n	80150f4 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80150e4:	2181      	movs	r1, #129	; 0x81
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f005 f9d1 	bl	801a48e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80150ec:	2101      	movs	r1, #1
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f005 f9cd 	bl	801a48e <USBD_LL_StallEP>
  }
}
 80150f4:	bf00      	nop
 80150f6:	3710      	adds	r7, #16
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b084      	sub	sp, #16
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	460b      	mov	r3, r1
 8015106:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801510e:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	7a5b      	ldrb	r3, [r3, #9]
 8015114:	2b02      	cmp	r3, #2
 8015116:	d108      	bne.n	801512a <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8015118:	2181      	movs	r1, #129	; 0x81
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f005 f9b7 	bl	801a48e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8015120:	2101      	movs	r1, #1
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f005 f9b3 	bl	801a48e <USBD_LL_StallEP>
 8015128:	e00d      	b.n	8015146 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801512a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801512e:	2b00      	cmp	r3, #0
 8015130:	da08      	bge.n	8015144 <MSC_BOT_CplClrFeature+0x48>
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	7a5b      	ldrb	r3, [r3, #9]
 8015136:	2b01      	cmp	r3, #1
 8015138:	d004      	beq.n	8015144 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801513a:	2101      	movs	r1, #1
 801513c:	6878      	ldr	r0, [r7, #4]
 801513e:	f7ff ff79 	bl	8015034 <MSC_BOT_SendCSW>
 8015142:	e000      	b.n	8015146 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8015144:	bf00      	nop
  }
}
 8015146:	3710      	adds	r7, #16
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}

0801514c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b086      	sub	sp, #24
 8015150:	af00      	add	r7, sp, #0
 8015152:	60f8      	str	r0, [r7, #12]
 8015154:	460b      	mov	r3, r1
 8015156:	607a      	str	r2, [r7, #4]
 8015158:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015160:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	781b      	ldrb	r3, [r3, #0]
 8015166:	2b25      	cmp	r3, #37	; 0x25
 8015168:	d06e      	beq.n	8015248 <SCSI_ProcessCmd+0xfc>
 801516a:	2b25      	cmp	r3, #37	; 0x25
 801516c:	dc11      	bgt.n	8015192 <SCSI_ProcessCmd+0x46>
 801516e:	2b1a      	cmp	r3, #26
 8015170:	d04f      	beq.n	8015212 <SCSI_ProcessCmd+0xc6>
 8015172:	2b1a      	cmp	r3, #26
 8015174:	dc06      	bgt.n	8015184 <SCSI_ProcessCmd+0x38>
 8015176:	2b03      	cmp	r3, #3
 8015178:	d027      	beq.n	80151ca <SCSI_ProcessCmd+0x7e>
 801517a:	2b12      	cmp	r3, #18
 801517c:	d02e      	beq.n	80151dc <SCSI_ProcessCmd+0x90>
 801517e:	2b00      	cmp	r3, #0
 8015180:	d01a      	beq.n	80151b8 <SCSI_ProcessCmd+0x6c>
 8015182:	e0a0      	b.n	80152c6 <SCSI_ProcessCmd+0x17a>
 8015184:	2b1e      	cmp	r3, #30
 8015186:	d03b      	beq.n	8015200 <SCSI_ProcessCmd+0xb4>
 8015188:	2b23      	cmp	r3, #35	; 0x23
 801518a:	d054      	beq.n	8015236 <SCSI_ProcessCmd+0xea>
 801518c:	2b1b      	cmp	r3, #27
 801518e:	d02e      	beq.n	80151ee <SCSI_ProcessCmd+0xa2>
 8015190:	e099      	b.n	80152c6 <SCSI_ProcessCmd+0x17a>
 8015192:	2b5a      	cmp	r3, #90	; 0x5a
 8015194:	d046      	beq.n	8015224 <SCSI_ProcessCmd+0xd8>
 8015196:	2b5a      	cmp	r3, #90	; 0x5a
 8015198:	dc07      	bgt.n	80151aa <SCSI_ProcessCmd+0x5e>
 801519a:	2b2a      	cmp	r3, #42	; 0x2a
 801519c:	d078      	beq.n	8015290 <SCSI_ProcessCmd+0x144>
 801519e:	2b2f      	cmp	r3, #47	; 0x2f
 80151a0:	f000 8088 	beq.w	80152b4 <SCSI_ProcessCmd+0x168>
 80151a4:	2b28      	cmp	r3, #40	; 0x28
 80151a6:	d061      	beq.n	801526c <SCSI_ProcessCmd+0x120>
 80151a8:	e08d      	b.n	80152c6 <SCSI_ProcessCmd+0x17a>
 80151aa:	2ba8      	cmp	r3, #168	; 0xa8
 80151ac:	d067      	beq.n	801527e <SCSI_ProcessCmd+0x132>
 80151ae:	2baa      	cmp	r3, #170	; 0xaa
 80151b0:	d077      	beq.n	80152a2 <SCSI_ProcessCmd+0x156>
 80151b2:	2b9e      	cmp	r3, #158	; 0x9e
 80151b4:	d051      	beq.n	801525a <SCSI_ProcessCmd+0x10e>
 80151b6:	e086      	b.n	80152c6 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80151b8:	7afb      	ldrb	r3, [r7, #11]
 80151ba:	687a      	ldr	r2, [r7, #4]
 80151bc:	4619      	mov	r1, r3
 80151be:	68f8      	ldr	r0, [r7, #12]
 80151c0:	f000 f893 	bl	80152ea <SCSI_TestUnitReady>
 80151c4:	4603      	mov	r3, r0
 80151c6:	75fb      	strb	r3, [r7, #23]
    break;
 80151c8:	e089      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 80151ca:	7afb      	ldrb	r3, [r7, #11]
 80151cc:	687a      	ldr	r2, [r7, #4]
 80151ce:	4619      	mov	r1, r3
 80151d0:	68f8      	ldr	r0, [r7, #12]
 80151d2:	f000 fb47 	bl	8015864 <SCSI_RequestSense>
 80151d6:	4603      	mov	r3, r0
 80151d8:	75fb      	strb	r3, [r7, #23]
    break;
 80151da:	e080      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 80151dc:	7afb      	ldrb	r3, [r7, #11]
 80151de:	687a      	ldr	r2, [r7, #4]
 80151e0:	4619      	mov	r1, r3
 80151e2:	68f8      	ldr	r0, [r7, #12]
 80151e4:	f000 f8d2 	bl	801538c <SCSI_Inquiry>
 80151e8:	4603      	mov	r3, r0
 80151ea:	75fb      	strb	r3, [r7, #23]
    break;
 80151ec:	e077      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80151ee:	7afb      	ldrb	r3, [r7, #11]
 80151f0:	687a      	ldr	r2, [r7, #4]
 80151f2:	4619      	mov	r1, r3
 80151f4:	68f8      	ldr	r0, [r7, #12]
 80151f6:	f000 fc27 	bl	8015a48 <SCSI_StartStopUnit>
 80151fa:	4603      	mov	r3, r0
 80151fc:	75fb      	strb	r3, [r7, #23]
    break;
 80151fe:	e06e      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8015200:	7afb      	ldrb	r3, [r7, #11]
 8015202:	687a      	ldr	r2, [r7, #4]
 8015204:	4619      	mov	r1, r3
 8015206:	68f8      	ldr	r0, [r7, #12]
 8015208:	f000 fc71 	bl	8015aee <SCSI_AllowPreventRemovable>
 801520c:	4603      	mov	r3, r0
 801520e:	75fb      	strb	r3, [r7, #23]
    break;
 8015210:	e065      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8015212:	7afb      	ldrb	r3, [r7, #11]
 8015214:	687a      	ldr	r2, [r7, #4]
 8015216:	4619      	mov	r1, r3
 8015218:	68f8      	ldr	r0, [r7, #12]
 801521a:	f000 fad7 	bl	80157cc <SCSI_ModeSense6>
 801521e:	4603      	mov	r3, r0
 8015220:	75fb      	strb	r3, [r7, #23]
    break;
 8015222:	e05c      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8015224:	7afb      	ldrb	r3, [r7, #11]
 8015226:	687a      	ldr	r2, [r7, #4]
 8015228:	4619      	mov	r1, r3
 801522a:	68f8      	ldr	r0, [r7, #12]
 801522c:	f000 faf4 	bl	8015818 <SCSI_ModeSense10>
 8015230:	4603      	mov	r3, r0
 8015232:	75fb      	strb	r3, [r7, #23]
    break;
 8015234:	e053      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8015236:	7afb      	ldrb	r3, [r7, #11]
 8015238:	687a      	ldr	r2, [r7, #4]
 801523a:	4619      	mov	r1, r3
 801523c:	68f8      	ldr	r0, [r7, #12]
 801523e:	f000 fa56 	bl	80156ee <SCSI_ReadFormatCapacity>
 8015242:	4603      	mov	r3, r0
 8015244:	75fb      	strb	r3, [r7, #23]
    break;
 8015246:	e04a      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8015248:	7afb      	ldrb	r3, [r7, #11]
 801524a:	687a      	ldr	r2, [r7, #4]
 801524c:	4619      	mov	r1, r3
 801524e:	68f8      	ldr	r0, [r7, #12]
 8015250:	f000 f910 	bl	8015474 <SCSI_ReadCapacity10>
 8015254:	4603      	mov	r3, r0
 8015256:	75fb      	strb	r3, [r7, #23]
    break;
 8015258:	e041      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801525a:	7afb      	ldrb	r3, [r7, #11]
 801525c:	687a      	ldr	r2, [r7, #4]
 801525e:	4619      	mov	r1, r3
 8015260:	68f8      	ldr	r0, [r7, #12]
 8015262:	f000 f98b 	bl	801557c <SCSI_ReadCapacity16>
 8015266:	4603      	mov	r3, r0
 8015268:	75fb      	strb	r3, [r7, #23]
    break;
 801526a:	e038      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 801526c:	7afb      	ldrb	r3, [r7, #11]
 801526e:	687a      	ldr	r2, [r7, #4]
 8015270:	4619      	mov	r1, r3
 8015272:	68f8      	ldr	r0, [r7, #12]
 8015274:	f000 fc62 	bl	8015b3c <SCSI_Read10>
 8015278:	4603      	mov	r3, r0
 801527a:	75fb      	strb	r3, [r7, #23]
    break;
 801527c:	e02f      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 801527e:	7afb      	ldrb	r3, [r7, #11]
 8015280:	687a      	ldr	r2, [r7, #4]
 8015282:	4619      	mov	r1, r3
 8015284:	68f8      	ldr	r0, [r7, #12]
 8015286:	f000 fd0b 	bl	8015ca0 <SCSI_Read12>
 801528a:	4603      	mov	r3, r0
 801528c:	75fb      	strb	r3, [r7, #23]
    break;
 801528e:	e026      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8015290:	7afb      	ldrb	r3, [r7, #11]
 8015292:	687a      	ldr	r2, [r7, #4]
 8015294:	4619      	mov	r1, r3
 8015296:	68f8      	ldr	r0, [r7, #12]
 8015298:	f000 fdbe 	bl	8015e18 <SCSI_Write10>
 801529c:	4603      	mov	r3, r0
 801529e:	75fb      	strb	r3, [r7, #23]
    break;
 80152a0:	e01d      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 80152a2:	7afb      	ldrb	r3, [r7, #11]
 80152a4:	687a      	ldr	r2, [r7, #4]
 80152a6:	4619      	mov	r1, r3
 80152a8:	68f8      	ldr	r0, [r7, #12]
 80152aa:	f000 fe8d 	bl	8015fc8 <SCSI_Write12>
 80152ae:	4603      	mov	r3, r0
 80152b0:	75fb      	strb	r3, [r7, #23]
    break;
 80152b2:	e014      	b.n	80152de <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 80152b4:	7afb      	ldrb	r3, [r7, #11]
 80152b6:	687a      	ldr	r2, [r7, #4]
 80152b8:	4619      	mov	r1, r3
 80152ba:	68f8      	ldr	r0, [r7, #12]
 80152bc:	f000 ff6c 	bl	8016198 <SCSI_Verify10>
 80152c0:	4603      	mov	r3, r0
 80152c2:	75fb      	strb	r3, [r7, #23]
    break;
 80152c4:	e00b      	b.n	80152de <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80152c6:	7af9      	ldrb	r1, [r7, #11]
 80152c8:	2320      	movs	r3, #32
 80152ca:	2205      	movs	r2, #5
 80152cc:	68f8      	ldr	r0, [r7, #12]
 80152ce:	f000 fb61 	bl	8015994 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80152d2:	693b      	ldr	r3, [r7, #16]
 80152d4:	2202      	movs	r2, #2
 80152d6:	725a      	strb	r2, [r3, #9]
    ret = -1;
 80152d8:	23ff      	movs	r3, #255	; 0xff
 80152da:	75fb      	strb	r3, [r7, #23]
    break;
 80152dc:	bf00      	nop
  }

  return ret;
 80152de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152e2:	4618      	mov	r0, r3
 80152e4:	3718      	adds	r7, #24
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bd80      	pop	{r7, pc}

080152ea <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80152ea:	b580      	push	{r7, lr}
 80152ec:	b086      	sub	sp, #24
 80152ee:	af00      	add	r7, sp, #0
 80152f0:	60f8      	str	r0, [r7, #12]
 80152f2:	460b      	mov	r3, r1
 80152f4:	607a      	str	r2, [r7, #4]
 80152f6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80152fe:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8015300:	697a      	ldr	r2, [r7, #20]
 8015302:	f248 0318 	movw	r3, #32792	; 0x8018
 8015306:	4413      	add	r3, r2
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d00c      	beq.n	8015328 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801530e:	697a      	ldr	r2, [r7, #20]
 8015310:	f248 031d 	movw	r3, #32797	; 0x801d
 8015314:	4413      	add	r3, r2
 8015316:	7819      	ldrb	r1, [r3, #0]
 8015318:	2320      	movs	r3, #32
 801531a:	2205      	movs	r2, #5
 801531c:	68f8      	ldr	r0, [r7, #12]
 801531e:	f000 fb39 	bl	8015994 <SCSI_SenseCode>

    return -1;
 8015322:	f04f 33ff 	mov.w	r3, #4294967295
 8015326:	e02c      	b.n	8015382 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8015328:	697a      	ldr	r2, [r7, #20]
 801532a:	f248 0362 	movw	r3, #32866	; 0x8062
 801532e:	4413      	add	r3, r2
 8015330:	781b      	ldrb	r3, [r3, #0]
 8015332:	2b02      	cmp	r3, #2
 8015334:	d10b      	bne.n	801534e <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015336:	7af9      	ldrb	r1, [r7, #11]
 8015338:	233a      	movs	r3, #58	; 0x3a
 801533a:	2202      	movs	r2, #2
 801533c:	68f8      	ldr	r0, [r7, #12]
 801533e:	f000 fb29 	bl	8015994 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	2205      	movs	r2, #5
 8015346:	721a      	strb	r2, [r3, #8]
    return -1;
 8015348:	f04f 33ff 	mov.w	r3, #4294967295
 801534c:	e019      	b.n	8015382 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015354:	689b      	ldr	r3, [r3, #8]
 8015356:	7afa      	ldrb	r2, [r7, #11]
 8015358:	4610      	mov	r0, r2
 801535a:	4798      	blx	r3
 801535c:	4603      	mov	r3, r0
 801535e:	2b00      	cmp	r3, #0
 8015360:	d00b      	beq.n	801537a <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015362:	7af9      	ldrb	r1, [r7, #11]
 8015364:	233a      	movs	r3, #58	; 0x3a
 8015366:	2202      	movs	r2, #2
 8015368:	68f8      	ldr	r0, [r7, #12]
 801536a:	f000 fb13 	bl	8015994 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801536e:	697b      	ldr	r3, [r7, #20]
 8015370:	2205      	movs	r2, #5
 8015372:	721a      	strb	r2, [r3, #8]

    return -1;
 8015374:	f04f 33ff 	mov.w	r3, #4294967295
 8015378:	e003      	b.n	8015382 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801537a:	697b      	ldr	r3, [r7, #20]
 801537c:	2200      	movs	r2, #0
 801537e:	60da      	str	r2, [r3, #12]

  return 0;
 8015380:	2300      	movs	r3, #0
}
 8015382:	4618      	mov	r0, r3
 8015384:	3718      	adds	r7, #24
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}
	...

0801538c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b088      	sub	sp, #32
 8015390:	af00      	add	r7, sp, #0
 8015392:	60f8      	str	r0, [r7, #12]
 8015394:	460b      	mov	r3, r1
 8015396:	607a      	str	r2, [r7, #4]
 8015398:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80153a0:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80153a2:	69ba      	ldr	r2, [r7, #24]
 80153a4:	f248 0318 	movw	r3, #32792	; 0x8018
 80153a8:	4413      	add	r3, r2
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d10c      	bne.n	80153ca <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80153b0:	69ba      	ldr	r2, [r7, #24]
 80153b2:	f248 031d 	movw	r3, #32797	; 0x801d
 80153b6:	4413      	add	r3, r2
 80153b8:	7819      	ldrb	r1, [r3, #0]
 80153ba:	2320      	movs	r3, #32
 80153bc:	2205      	movs	r2, #5
 80153be:	68f8      	ldr	r0, [r7, #12]
 80153c0:	f000 fae8 	bl	8015994 <SCSI_SenseCode>
    return -1;
 80153c4:	f04f 33ff 	mov.w	r3, #4294967295
 80153c8:	e04c      	b.n	8015464 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	3301      	adds	r3, #1
 80153ce:	781b      	ldrb	r3, [r3, #0]
 80153d0:	f003 0301 	and.w	r3, r3, #1
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d022      	beq.n	801541e <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	3302      	adds	r3, #2
 80153dc:	781b      	ldrb	r3, [r3, #0]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d105      	bne.n	80153ee <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80153e2:	2206      	movs	r2, #6
 80153e4:	4921      	ldr	r1, [pc, #132]	; (801546c <SCSI_Inquiry+0xe0>)
 80153e6:	69b8      	ldr	r0, [r7, #24]
 80153e8:	f001 f862 	bl	80164b0 <SCSI_UpdateBotData>
 80153ec:	e039      	b.n	8015462 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	3302      	adds	r3, #2
 80153f2:	781b      	ldrb	r3, [r3, #0]
 80153f4:	2b80      	cmp	r3, #128	; 0x80
 80153f6:	d105      	bne.n	8015404 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80153f8:	2208      	movs	r2, #8
 80153fa:	491d      	ldr	r1, [pc, #116]	; (8015470 <SCSI_Inquiry+0xe4>)
 80153fc:	69b8      	ldr	r0, [r7, #24]
 80153fe:	f001 f857 	bl	80164b0 <SCSI_UpdateBotData>
 8015402:	e02e      	b.n	8015462 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8015404:	69ba      	ldr	r2, [r7, #24]
 8015406:	f248 031d 	movw	r3, #32797	; 0x801d
 801540a:	4413      	add	r3, r2
 801540c:	7819      	ldrb	r1, [r3, #0]
 801540e:	2324      	movs	r3, #36	; 0x24
 8015410:	2205      	movs	r2, #5
 8015412:	68f8      	ldr	r0, [r7, #12]
 8015414:	f000 fabe 	bl	8015994 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8015418:	f04f 33ff 	mov.w	r3, #4294967295
 801541c:	e022      	b.n	8015464 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015424:	69d9      	ldr	r1, [r3, #28]
 8015426:	7afa      	ldrb	r2, [r7, #11]
 8015428:	4613      	mov	r3, r2
 801542a:	00db      	lsls	r3, r3, #3
 801542c:	4413      	add	r3, r2
 801542e:	009b      	lsls	r3, r3, #2
 8015430:	440b      	add	r3, r1
 8015432:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8015434:	697b      	ldr	r3, [r7, #20]
 8015436:	3304      	adds	r3, #4
 8015438:	781b      	ldrb	r3, [r3, #0]
 801543a:	b29b      	uxth	r3, r3
 801543c:	3305      	adds	r3, #5
 801543e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	3304      	adds	r3, #4
 8015444:	781b      	ldrb	r3, [r3, #0]
 8015446:	b29b      	uxth	r3, r3
 8015448:	8bfa      	ldrh	r2, [r7, #30]
 801544a:	429a      	cmp	r2, r3
 801544c:	d303      	bcc.n	8015456 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	3304      	adds	r3, #4
 8015452:	781b      	ldrb	r3, [r3, #0]
 8015454:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8015456:	8bfb      	ldrh	r3, [r7, #30]
 8015458:	461a      	mov	r2, r3
 801545a:	6979      	ldr	r1, [r7, #20]
 801545c:	69b8      	ldr	r0, [r7, #24]
 801545e:	f001 f827 	bl	80164b0 <SCSI_UpdateBotData>
  }

  return 0;
 8015462:	2300      	movs	r3, #0
}
 8015464:	4618      	mov	r0, r3
 8015466:	3720      	adds	r7, #32
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}
 801546c:	240000c4 	.word	0x240000c4
 8015470:	240000cc 	.word	0x240000cc

08015474 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015474:	b590      	push	{r4, r7, lr}
 8015476:	b087      	sub	sp, #28
 8015478:	af00      	add	r7, sp, #0
 801547a:	60f8      	str	r0, [r7, #12]
 801547c:	460b      	mov	r3, r1
 801547e:	607a      	str	r2, [r7, #4]
 8015480:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015488:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015490:	685c      	ldr	r4, [r3, #4]
 8015492:	697a      	ldr	r2, [r7, #20]
 8015494:	f248 0368 	movw	r3, #32872	; 0x8068
 8015498:	4413      	add	r3, r2
 801549a:	6979      	ldr	r1, [r7, #20]
 801549c:	f248 0264 	movw	r2, #32868	; 0x8064
 80154a0:	440a      	add	r2, r1
 80154a2:	7af8      	ldrb	r0, [r7, #11]
 80154a4:	4619      	mov	r1, r3
 80154a6:	47a0      	blx	r4
 80154a8:	4603      	mov	r3, r0
 80154aa:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80154ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d106      	bne.n	80154c2 <SCSI_ReadCapacity10+0x4e>
 80154b4:	697a      	ldr	r2, [r7, #20]
 80154b6:	f248 0362 	movw	r3, #32866	; 0x8062
 80154ba:	4413      	add	r3, r2
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	2b02      	cmp	r3, #2
 80154c0:	d108      	bne.n	80154d4 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80154c2:	7af9      	ldrb	r1, [r7, #11]
 80154c4:	233a      	movs	r3, #58	; 0x3a
 80154c6:	2202      	movs	r2, #2
 80154c8:	68f8      	ldr	r0, [r7, #12]
 80154ca:	f000 fa63 	bl	8015994 <SCSI_SenseCode>
    return -1;
 80154ce:	f04f 33ff 	mov.w	r3, #4294967295
 80154d2:	e04f      	b.n	8015574 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80154d4:	697a      	ldr	r2, [r7, #20]
 80154d6:	f248 0368 	movw	r3, #32872	; 0x8068
 80154da:	4413      	add	r3, r2
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	3b01      	subs	r3, #1
 80154e0:	0e1b      	lsrs	r3, r3, #24
 80154e2:	b2da      	uxtb	r2, r3
 80154e4:	697b      	ldr	r3, [r7, #20]
 80154e6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80154e8:	697a      	ldr	r2, [r7, #20]
 80154ea:	f248 0368 	movw	r3, #32872	; 0x8068
 80154ee:	4413      	add	r3, r2
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	3b01      	subs	r3, #1
 80154f4:	0c1b      	lsrs	r3, r3, #16
 80154f6:	b2da      	uxtb	r2, r3
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80154fc:	697a      	ldr	r2, [r7, #20]
 80154fe:	f248 0368 	movw	r3, #32872	; 0x8068
 8015502:	4413      	add	r3, r2
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	3b01      	subs	r3, #1
 8015508:	0a1b      	lsrs	r3, r3, #8
 801550a:	b2da      	uxtb	r2, r3
 801550c:	697b      	ldr	r3, [r7, #20]
 801550e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8015510:	697a      	ldr	r2, [r7, #20]
 8015512:	f248 0368 	movw	r3, #32872	; 0x8068
 8015516:	4413      	add	r3, r2
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	b2db      	uxtb	r3, r3
 801551c:	3b01      	subs	r3, #1
 801551e:	b2da      	uxtb	r2, r3
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8015524:	697a      	ldr	r2, [r7, #20]
 8015526:	f248 0364 	movw	r3, #32868	; 0x8064
 801552a:	4413      	add	r3, r2
 801552c:	881b      	ldrh	r3, [r3, #0]
 801552e:	161b      	asrs	r3, r3, #24
 8015530:	b2da      	uxtb	r2, r3
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8015536:	697a      	ldr	r2, [r7, #20]
 8015538:	f248 0364 	movw	r3, #32868	; 0x8064
 801553c:	4413      	add	r3, r2
 801553e:	881b      	ldrh	r3, [r3, #0]
 8015540:	141b      	asrs	r3, r3, #16
 8015542:	b2da      	uxtb	r2, r3
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8015548:	697a      	ldr	r2, [r7, #20]
 801554a:	f248 0364 	movw	r3, #32868	; 0x8064
 801554e:	4413      	add	r3, r2
 8015550:	881b      	ldrh	r3, [r3, #0]
 8015552:	0a1b      	lsrs	r3, r3, #8
 8015554:	b29b      	uxth	r3, r3
 8015556:	b2da      	uxtb	r2, r3
 8015558:	697b      	ldr	r3, [r7, #20]
 801555a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801555c:	697a      	ldr	r2, [r7, #20]
 801555e:	f248 0364 	movw	r3, #32868	; 0x8064
 8015562:	4413      	add	r3, r2
 8015564:	881b      	ldrh	r3, [r3, #0]
 8015566:	b2da      	uxtb	r2, r3
 8015568:	697b      	ldr	r3, [r7, #20]
 801556a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801556c:	697b      	ldr	r3, [r7, #20]
 801556e:	2208      	movs	r2, #8
 8015570:	60da      	str	r2, [r3, #12]

  return 0;
 8015572:	2300      	movs	r3, #0

}
 8015574:	4618      	mov	r0, r3
 8015576:	371c      	adds	r7, #28
 8015578:	46bd      	mov	sp, r7
 801557a:	bd90      	pop	{r4, r7, pc}

0801557c <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801557c:	b590      	push	{r4, r7, lr}
 801557e:	b089      	sub	sp, #36	; 0x24
 8015580:	af00      	add	r7, sp, #0
 8015582:	60f8      	str	r0, [r7, #12]
 8015584:	460b      	mov	r3, r1
 8015586:	607a      	str	r2, [r7, #4]
 8015588:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015590:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015598:	685c      	ldr	r4, [r3, #4]
 801559a:	69ba      	ldr	r2, [r7, #24]
 801559c:	f248 0368 	movw	r3, #32872	; 0x8068
 80155a0:	4413      	add	r3, r2
 80155a2:	69b9      	ldr	r1, [r7, #24]
 80155a4:	f248 0264 	movw	r2, #32868	; 0x8064
 80155a8:	440a      	add	r2, r1
 80155aa:	7af8      	ldrb	r0, [r7, #11]
 80155ac:	4619      	mov	r1, r3
 80155ae:	47a0      	blx	r4
 80155b0:	4603      	mov	r3, r0
 80155b2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80155b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d106      	bne.n	80155ca <SCSI_ReadCapacity16+0x4e>
 80155bc:	69ba      	ldr	r2, [r7, #24]
 80155be:	f248 0362 	movw	r3, #32866	; 0x8062
 80155c2:	4413      	add	r3, r2
 80155c4:	781b      	ldrb	r3, [r3, #0]
 80155c6:	2b02      	cmp	r3, #2
 80155c8:	d108      	bne.n	80155dc <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80155ca:	7af9      	ldrb	r1, [r7, #11]
 80155cc:	233a      	movs	r3, #58	; 0x3a
 80155ce:	2202      	movs	r2, #2
 80155d0:	68f8      	ldr	r0, [r7, #12]
 80155d2:	f000 f9df 	bl	8015994 <SCSI_SenseCode>
    return -1;
 80155d6:	f04f 33ff 	mov.w	r3, #4294967295
 80155da:	e084      	b.n	80156e6 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	330a      	adds	r3, #10
 80155e0:	781b      	ldrb	r3, [r3, #0]
 80155e2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	330b      	adds	r3, #11
 80155e8:	781b      	ldrb	r3, [r3, #0]
 80155ea:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80155ec:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	330c      	adds	r3, #12
 80155f2:	781b      	ldrb	r3, [r3, #0]
 80155f4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80155f6:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80155f8:	687a      	ldr	r2, [r7, #4]
 80155fa:	320d      	adds	r2, #13
 80155fc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80155fe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8015600:	69bb      	ldr	r3, [r7, #24]
 8015602:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8015604:	2300      	movs	r3, #0
 8015606:	77fb      	strb	r3, [r7, #31]
 8015608:	e007      	b.n	801561a <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 801560a:	7ffb      	ldrb	r3, [r7, #31]
 801560c:	69ba      	ldr	r2, [r7, #24]
 801560e:	4413      	add	r3, r2
 8015610:	2200      	movs	r2, #0
 8015612:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8015614:	7ffb      	ldrb	r3, [r7, #31]
 8015616:	3301      	adds	r3, #1
 8015618:	77fb      	strb	r3, [r7, #31]
 801561a:	7ffa      	ldrb	r2, [r7, #31]
 801561c:	69bb      	ldr	r3, [r7, #24]
 801561e:	68db      	ldr	r3, [r3, #12]
 8015620:	429a      	cmp	r2, r3
 8015622:	d3f2      	bcc.n	801560a <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8015624:	69ba      	ldr	r2, [r7, #24]
 8015626:	f248 0368 	movw	r3, #32872	; 0x8068
 801562a:	4413      	add	r3, r2
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	3b01      	subs	r3, #1
 8015630:	0e1b      	lsrs	r3, r3, #24
 8015632:	b2da      	uxtb	r2, r3
 8015634:	69bb      	ldr	r3, [r7, #24]
 8015636:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8015638:	69ba      	ldr	r2, [r7, #24]
 801563a:	f248 0368 	movw	r3, #32872	; 0x8068
 801563e:	4413      	add	r3, r2
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	3b01      	subs	r3, #1
 8015644:	0c1b      	lsrs	r3, r3, #16
 8015646:	b2da      	uxtb	r2, r3
 8015648:	69bb      	ldr	r3, [r7, #24]
 801564a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801564c:	69ba      	ldr	r2, [r7, #24]
 801564e:	f248 0368 	movw	r3, #32872	; 0x8068
 8015652:	4413      	add	r3, r2
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	3b01      	subs	r3, #1
 8015658:	0a1b      	lsrs	r3, r3, #8
 801565a:	b2da      	uxtb	r2, r3
 801565c:	69bb      	ldr	r3, [r7, #24]
 801565e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8015660:	69ba      	ldr	r2, [r7, #24]
 8015662:	f248 0368 	movw	r3, #32872	; 0x8068
 8015666:	4413      	add	r3, r2
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	b2db      	uxtb	r3, r3
 801566c:	3b01      	subs	r3, #1
 801566e:	b2da      	uxtb	r2, r3
 8015670:	69bb      	ldr	r3, [r7, #24]
 8015672:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8015674:	69ba      	ldr	r2, [r7, #24]
 8015676:	f248 0364 	movw	r3, #32868	; 0x8064
 801567a:	4413      	add	r3, r2
 801567c:	881b      	ldrh	r3, [r3, #0]
 801567e:	161b      	asrs	r3, r3, #24
 8015680:	b2da      	uxtb	r2, r3
 8015682:	69bb      	ldr	r3, [r7, #24]
 8015684:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8015686:	69ba      	ldr	r2, [r7, #24]
 8015688:	f248 0364 	movw	r3, #32868	; 0x8064
 801568c:	4413      	add	r3, r2
 801568e:	881b      	ldrh	r3, [r3, #0]
 8015690:	141b      	asrs	r3, r3, #16
 8015692:	b2da      	uxtb	r2, r3
 8015694:	69bb      	ldr	r3, [r7, #24]
 8015696:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8015698:	69ba      	ldr	r2, [r7, #24]
 801569a:	f248 0364 	movw	r3, #32868	; 0x8064
 801569e:	4413      	add	r3, r2
 80156a0:	881b      	ldrh	r3, [r3, #0]
 80156a2:	0a1b      	lsrs	r3, r3, #8
 80156a4:	b29b      	uxth	r3, r3
 80156a6:	b2da      	uxtb	r2, r3
 80156a8:	69bb      	ldr	r3, [r7, #24]
 80156aa:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80156ac:	69ba      	ldr	r2, [r7, #24]
 80156ae:	f248 0364 	movw	r3, #32868	; 0x8064
 80156b2:	4413      	add	r3, r2
 80156b4:	881b      	ldrh	r3, [r3, #0]
 80156b6:	b2da      	uxtb	r2, r3
 80156b8:	69bb      	ldr	r3, [r7, #24]
 80156ba:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	330a      	adds	r3, #10
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	330b      	adds	r3, #11
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80156cc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	330c      	adds	r3, #12
 80156d2:	781b      	ldrb	r3, [r3, #0]
 80156d4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80156d6:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80156d8:	687a      	ldr	r2, [r7, #4]
 80156da:	320d      	adds	r2, #13
 80156dc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80156de:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80156e0:	69bb      	ldr	r3, [r7, #24]
 80156e2:	60da      	str	r2, [r3, #12]

  return 0;
 80156e4:	2300      	movs	r3, #0
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	3724      	adds	r7, #36	; 0x24
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd90      	pop	{r4, r7, pc}

080156ee <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80156ee:	b580      	push	{r7, lr}
 80156f0:	b088      	sub	sp, #32
 80156f2:	af00      	add	r7, sp, #0
 80156f4:	60f8      	str	r0, [r7, #12]
 80156f6:	460b      	mov	r3, r1
 80156f8:	607a      	str	r2, [r7, #4]
 80156fa:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015702:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801570a:	685b      	ldr	r3, [r3, #4]
 801570c:	f107 0214 	add.w	r2, r7, #20
 8015710:	f107 0110 	add.w	r1, r7, #16
 8015714:	7af8      	ldrb	r0, [r7, #11]
 8015716:	4798      	blx	r3
 8015718:	4603      	mov	r3, r0
 801571a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801571c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d106      	bne.n	8015732 <SCSI_ReadFormatCapacity+0x44>
 8015724:	69ba      	ldr	r2, [r7, #24]
 8015726:	f248 0362 	movw	r3, #32866	; 0x8062
 801572a:	4413      	add	r3, r2
 801572c:	781b      	ldrb	r3, [r3, #0]
 801572e:	2b02      	cmp	r3, #2
 8015730:	d108      	bne.n	8015744 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015732:	7af9      	ldrb	r1, [r7, #11]
 8015734:	233a      	movs	r3, #58	; 0x3a
 8015736:	2202      	movs	r2, #2
 8015738:	68f8      	ldr	r0, [r7, #12]
 801573a:	f000 f92b 	bl	8015994 <SCSI_SenseCode>
    return -1;
 801573e:	f04f 33ff 	mov.w	r3, #4294967295
 8015742:	e03e      	b.n	80157c2 <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 8015744:	2300      	movs	r3, #0
 8015746:	83fb      	strh	r3, [r7, #30]
 8015748:	e007      	b.n	801575a <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 801574a:	8bfb      	ldrh	r3, [r7, #30]
 801574c:	69ba      	ldr	r2, [r7, #24]
 801574e:	4413      	add	r3, r2
 8015750:	2200      	movs	r2, #0
 8015752:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8015754:	8bfb      	ldrh	r3, [r7, #30]
 8015756:	3301      	adds	r3, #1
 8015758:	83fb      	strh	r3, [r7, #30]
 801575a:	8bfb      	ldrh	r3, [r7, #30]
 801575c:	2b0b      	cmp	r3, #11
 801575e:	d9f4      	bls.n	801574a <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8015760:	69bb      	ldr	r3, [r7, #24]
 8015762:	2208      	movs	r2, #8
 8015764:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8015766:	693b      	ldr	r3, [r7, #16]
 8015768:	3b01      	subs	r3, #1
 801576a:	0e1b      	lsrs	r3, r3, #24
 801576c:	b2da      	uxtb	r2, r3
 801576e:	69bb      	ldr	r3, [r7, #24]
 8015770:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8015772:	693b      	ldr	r3, [r7, #16]
 8015774:	3b01      	subs	r3, #1
 8015776:	0c1b      	lsrs	r3, r3, #16
 8015778:	b2da      	uxtb	r2, r3
 801577a:	69bb      	ldr	r3, [r7, #24]
 801577c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 801577e:	693b      	ldr	r3, [r7, #16]
 8015780:	3b01      	subs	r3, #1
 8015782:	0a1b      	lsrs	r3, r3, #8
 8015784:	b2da      	uxtb	r2, r3
 8015786:	69bb      	ldr	r3, [r7, #24]
 8015788:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 801578a:	693b      	ldr	r3, [r7, #16]
 801578c:	b2db      	uxtb	r3, r3
 801578e:	3b01      	subs	r3, #1
 8015790:	b2da      	uxtb	r2, r3
 8015792:	69bb      	ldr	r3, [r7, #24]
 8015794:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8015796:	69bb      	ldr	r3, [r7, #24]
 8015798:	2202      	movs	r2, #2
 801579a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801579c:	8abb      	ldrh	r3, [r7, #20]
 801579e:	141b      	asrs	r3, r3, #16
 80157a0:	b2da      	uxtb	r2, r3
 80157a2:	69bb      	ldr	r3, [r7, #24]
 80157a4:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80157a6:	8abb      	ldrh	r3, [r7, #20]
 80157a8:	0a1b      	lsrs	r3, r3, #8
 80157aa:	b29b      	uxth	r3, r3
 80157ac:	b2da      	uxtb	r2, r3
 80157ae:	69bb      	ldr	r3, [r7, #24]
 80157b0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80157b2:	8abb      	ldrh	r3, [r7, #20]
 80157b4:	b2da      	uxtb	r2, r3
 80157b6:	69bb      	ldr	r3, [r7, #24]
 80157b8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80157ba:	69bb      	ldr	r3, [r7, #24]
 80157bc:	220c      	movs	r2, #12
 80157be:	60da      	str	r2, [r3, #12]

  return 0;
 80157c0:	2300      	movs	r3, #0
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3720      	adds	r7, #32
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}
	...

080157cc <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b086      	sub	sp, #24
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	60f8      	str	r0, [r7, #12]
 80157d4:	460b      	mov	r3, r1
 80157d6:	607a      	str	r2, [r7, #4]
 80157d8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80157e0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80157e2:	2317      	movs	r3, #23
 80157e4:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	3304      	adds	r3, #4
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	b29b      	uxth	r3, r3
 80157ee:	8afa      	ldrh	r2, [r7, #22]
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d303      	bcc.n	80157fc <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	3304      	adds	r3, #4
 80157f8:	781b      	ldrb	r3, [r3, #0]
 80157fa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80157fc:	8afb      	ldrh	r3, [r7, #22]
 80157fe:	461a      	mov	r2, r3
 8015800:	4904      	ldr	r1, [pc, #16]	; (8015814 <SCSI_ModeSense6+0x48>)
 8015802:	6938      	ldr	r0, [r7, #16]
 8015804:	f000 fe54 	bl	80164b0 <SCSI_UpdateBotData>

  return 0;
 8015808:	2300      	movs	r3, #0
}
 801580a:	4618      	mov	r0, r3
 801580c:	3718      	adds	r7, #24
 801580e:	46bd      	mov	sp, r7
 8015810:	bd80      	pop	{r7, pc}
 8015812:	bf00      	nop
 8015814:	240000d4 	.word	0x240000d4

08015818 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015818:	b580      	push	{r7, lr}
 801581a:	b086      	sub	sp, #24
 801581c:	af00      	add	r7, sp, #0
 801581e:	60f8      	str	r0, [r7, #12]
 8015820:	460b      	mov	r3, r1
 8015822:	607a      	str	r2, [r7, #4]
 8015824:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801582c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801582e:	231b      	movs	r3, #27
 8015830:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	3308      	adds	r3, #8
 8015836:	781b      	ldrb	r3, [r3, #0]
 8015838:	b29b      	uxth	r3, r3
 801583a:	8afa      	ldrh	r2, [r7, #22]
 801583c:	429a      	cmp	r2, r3
 801583e:	d303      	bcc.n	8015848 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	3308      	adds	r3, #8
 8015844:	781b      	ldrb	r3, [r3, #0]
 8015846:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8015848:	8afb      	ldrh	r3, [r7, #22]
 801584a:	461a      	mov	r2, r3
 801584c:	4904      	ldr	r1, [pc, #16]	; (8015860 <SCSI_ModeSense10+0x48>)
 801584e:	6938      	ldr	r0, [r7, #16]
 8015850:	f000 fe2e 	bl	80164b0 <SCSI_UpdateBotData>

  return 0;
 8015854:	2300      	movs	r3, #0
}
 8015856:	4618      	mov	r0, r3
 8015858:	3718      	adds	r7, #24
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	240000ec 	.word	0x240000ec

08015864 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b086      	sub	sp, #24
 8015868:	af00      	add	r7, sp, #0
 801586a:	60f8      	str	r0, [r7, #12]
 801586c:	460b      	mov	r3, r1
 801586e:	607a      	str	r2, [r7, #4]
 8015870:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015878:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 801587a:	693a      	ldr	r2, [r7, #16]
 801587c:	f248 0318 	movw	r3, #32792	; 0x8018
 8015880:	4413      	add	r3, r2
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d10c      	bne.n	80158a2 <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015888:	693a      	ldr	r2, [r7, #16]
 801588a:	f248 031d 	movw	r3, #32797	; 0x801d
 801588e:	4413      	add	r3, r2
 8015890:	7819      	ldrb	r1, [r3, #0]
 8015892:	2320      	movs	r3, #32
 8015894:	2205      	movs	r2, #5
 8015896:	68f8      	ldr	r0, [r7, #12]
 8015898:	f000 f87c 	bl	8015994 <SCSI_SenseCode>
    return -1;
 801589c:	f04f 33ff 	mov.w	r3, #4294967295
 80158a0:	e074      	b.n	801598c <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80158a2:	2300      	movs	r3, #0
 80158a4:	75fb      	strb	r3, [r7, #23]
 80158a6:	e007      	b.n	80158b8 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 80158a8:	7dfb      	ldrb	r3, [r7, #23]
 80158aa:	693a      	ldr	r2, [r7, #16]
 80158ac:	4413      	add	r3, r2
 80158ae:	2200      	movs	r2, #0
 80158b0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80158b2:	7dfb      	ldrb	r3, [r7, #23]
 80158b4:	3301      	adds	r3, #1
 80158b6:	75fb      	strb	r3, [r7, #23]
 80158b8:	7dfb      	ldrb	r3, [r7, #23]
 80158ba:	2b11      	cmp	r3, #17
 80158bc:	d9f4      	bls.n	80158a8 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 80158be:	693b      	ldr	r3, [r7, #16]
 80158c0:	2270      	movs	r2, #112	; 0x70
 80158c2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80158c4:	693b      	ldr	r3, [r7, #16]
 80158c6:	220c      	movs	r2, #12
 80158c8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80158ca:	693a      	ldr	r2, [r7, #16]
 80158cc:	f248 0360 	movw	r3, #32864	; 0x8060
 80158d0:	4413      	add	r3, r2
 80158d2:	781a      	ldrb	r2, [r3, #0]
 80158d4:	6939      	ldr	r1, [r7, #16]
 80158d6:	f248 0361 	movw	r3, #32865	; 0x8061
 80158da:	440b      	add	r3, r1
 80158dc:	781b      	ldrb	r3, [r3, #0]
 80158de:	429a      	cmp	r2, r3
 80158e0:	d045      	beq.n	801596e <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80158e2:	693a      	ldr	r2, [r7, #16]
 80158e4:	f248 0360 	movw	r3, #32864	; 0x8060
 80158e8:	4413      	add	r3, r2
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	4619      	mov	r1, r3
 80158ee:	693a      	ldr	r2, [r7, #16]
 80158f0:	f241 0308 	movw	r3, #4104	; 0x1008
 80158f4:	440b      	add	r3, r1
 80158f6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80158fa:	693b      	ldr	r3, [r7, #16]
 80158fc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80158fe:	693a      	ldr	r2, [r7, #16]
 8015900:	f248 0360 	movw	r3, #32864	; 0x8060
 8015904:	4413      	add	r3, r2
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	4619      	mov	r1, r3
 801590a:	693a      	ldr	r2, [r7, #16]
 801590c:	f241 0308 	movw	r3, #4104	; 0x1008
 8015910:	440b      	add	r3, r1
 8015912:	00db      	lsls	r3, r3, #3
 8015914:	4413      	add	r3, r2
 8015916:	791a      	ldrb	r2, [r3, #4]
 8015918:	693b      	ldr	r3, [r7, #16]
 801591a:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801591c:	693a      	ldr	r2, [r7, #16]
 801591e:	f248 0360 	movw	r3, #32864	; 0x8060
 8015922:	4413      	add	r3, r2
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	4619      	mov	r1, r3
 8015928:	693a      	ldr	r2, [r7, #16]
 801592a:	f241 0308 	movw	r3, #4104	; 0x1008
 801592e:	440b      	add	r3, r1
 8015930:	00db      	lsls	r3, r3, #3
 8015932:	4413      	add	r3, r2
 8015934:	795a      	ldrb	r2, [r3, #5]
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 801593a:	693a      	ldr	r2, [r7, #16]
 801593c:	f248 0360 	movw	r3, #32864	; 0x8060
 8015940:	4413      	add	r3, r2
 8015942:	781b      	ldrb	r3, [r3, #0]
 8015944:	3301      	adds	r3, #1
 8015946:	b2d9      	uxtb	r1, r3
 8015948:	693a      	ldr	r2, [r7, #16]
 801594a:	f248 0360 	movw	r3, #32864	; 0x8060
 801594e:	4413      	add	r3, r2
 8015950:	460a      	mov	r2, r1
 8015952:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8015954:	693a      	ldr	r2, [r7, #16]
 8015956:	f248 0360 	movw	r3, #32864	; 0x8060
 801595a:	4413      	add	r3, r2
 801595c:	781b      	ldrb	r3, [r3, #0]
 801595e:	2b04      	cmp	r3, #4
 8015960:	d105      	bne.n	801596e <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 8015962:	693a      	ldr	r2, [r7, #16]
 8015964:	f248 0360 	movw	r3, #32864	; 0x8060
 8015968:	4413      	add	r3, r2
 801596a:	2200      	movs	r2, #0
 801596c:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 801596e:	693b      	ldr	r3, [r7, #16]
 8015970:	2212      	movs	r2, #18
 8015972:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	3304      	adds	r3, #4
 8015978:	781b      	ldrb	r3, [r3, #0]
 801597a:	2b12      	cmp	r3, #18
 801597c:	d805      	bhi.n	801598a <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	3304      	adds	r3, #4
 8015982:	781b      	ldrb	r3, [r3, #0]
 8015984:	461a      	mov	r2, r3
 8015986:	693b      	ldr	r3, [r7, #16]
 8015988:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801598a:	2300      	movs	r3, #0
}
 801598c:	4618      	mov	r0, r3
 801598e:	3718      	adds	r7, #24
 8015990:	46bd      	mov	sp, r7
 8015992:	bd80      	pop	{r7, pc}

08015994 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8015994:	b480      	push	{r7}
 8015996:	b085      	sub	sp, #20
 8015998:	af00      	add	r7, sp, #0
 801599a:	6078      	str	r0, [r7, #4]
 801599c:	4608      	mov	r0, r1
 801599e:	4611      	mov	r1, r2
 80159a0:	461a      	mov	r2, r3
 80159a2:	4603      	mov	r3, r0
 80159a4:	70fb      	strb	r3, [r7, #3]
 80159a6:	460b      	mov	r3, r1
 80159a8:	70bb      	strb	r3, [r7, #2]
 80159aa:	4613      	mov	r3, r2
 80159ac:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80159b4:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80159b6:	68fa      	ldr	r2, [r7, #12]
 80159b8:	f248 0361 	movw	r3, #32865	; 0x8061
 80159bc:	4413      	add	r3, r2
 80159be:	781b      	ldrb	r3, [r3, #0]
 80159c0:	4619      	mov	r1, r3
 80159c2:	68fa      	ldr	r2, [r7, #12]
 80159c4:	f241 0308 	movw	r3, #4104	; 0x1008
 80159c8:	440b      	add	r3, r1
 80159ca:	78b9      	ldrb	r1, [r7, #2]
 80159cc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80159d0:	68fa      	ldr	r2, [r7, #12]
 80159d2:	f248 0361 	movw	r3, #32865	; 0x8061
 80159d6:	4413      	add	r3, r2
 80159d8:	781b      	ldrb	r3, [r3, #0]
 80159da:	4619      	mov	r1, r3
 80159dc:	68fa      	ldr	r2, [r7, #12]
 80159de:	f241 0308 	movw	r3, #4104	; 0x1008
 80159e2:	440b      	add	r3, r1
 80159e4:	00db      	lsls	r3, r3, #3
 80159e6:	4413      	add	r3, r2
 80159e8:	787a      	ldrb	r2, [r7, #1]
 80159ea:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80159ec:	68fa      	ldr	r2, [r7, #12]
 80159ee:	f248 0361 	movw	r3, #32865	; 0x8061
 80159f2:	4413      	add	r3, r2
 80159f4:	781b      	ldrb	r3, [r3, #0]
 80159f6:	4619      	mov	r1, r3
 80159f8:	68fa      	ldr	r2, [r7, #12]
 80159fa:	f241 0308 	movw	r3, #4104	; 0x1008
 80159fe:	440b      	add	r3, r1
 8015a00:	00db      	lsls	r3, r3, #3
 8015a02:	4413      	add	r3, r2
 8015a04:	2200      	movs	r2, #0
 8015a06:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8015a08:	68fa      	ldr	r2, [r7, #12]
 8015a0a:	f248 0361 	movw	r3, #32865	; 0x8061
 8015a0e:	4413      	add	r3, r2
 8015a10:	781b      	ldrb	r3, [r3, #0]
 8015a12:	3301      	adds	r3, #1
 8015a14:	b2d9      	uxtb	r1, r3
 8015a16:	68fa      	ldr	r2, [r7, #12]
 8015a18:	f248 0361 	movw	r3, #32865	; 0x8061
 8015a1c:	4413      	add	r3, r2
 8015a1e:	460a      	mov	r2, r1
 8015a20:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8015a22:	68fa      	ldr	r2, [r7, #12]
 8015a24:	f248 0361 	movw	r3, #32865	; 0x8061
 8015a28:	4413      	add	r3, r2
 8015a2a:	781b      	ldrb	r3, [r3, #0]
 8015a2c:	2b04      	cmp	r3, #4
 8015a2e:	d105      	bne.n	8015a3c <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 8015a30:	68fa      	ldr	r2, [r7, #12]
 8015a32:	f248 0361 	movw	r3, #32865	; 0x8061
 8015a36:	4413      	add	r3, r2
 8015a38:	2200      	movs	r2, #0
 8015a3a:	701a      	strb	r2, [r3, #0]
  }
}
 8015a3c:	bf00      	nop
 8015a3e:	3714      	adds	r7, #20
 8015a40:	46bd      	mov	sp, r7
 8015a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a46:	4770      	bx	lr

08015a48 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b086      	sub	sp, #24
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	60f8      	str	r0, [r7, #12]
 8015a50:	460b      	mov	r3, r1
 8015a52:	607a      	str	r2, [r7, #4]
 8015a54:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015a5c:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8015a5e:	697a      	ldr	r2, [r7, #20]
 8015a60:	f248 0362 	movw	r3, #32866	; 0x8062
 8015a64:	4413      	add	r3, r2
 8015a66:	781b      	ldrb	r3, [r3, #0]
 8015a68:	2b01      	cmp	r3, #1
 8015a6a:	d10f      	bne.n	8015a8c <SCSI_StartStopUnit+0x44>
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	3304      	adds	r3, #4
 8015a70:	781b      	ldrb	r3, [r3, #0]
 8015a72:	f003 0303 	and.w	r3, r3, #3
 8015a76:	2b02      	cmp	r3, #2
 8015a78:	d108      	bne.n	8015a8c <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8015a7a:	7af9      	ldrb	r1, [r7, #11]
 8015a7c:	2324      	movs	r3, #36	; 0x24
 8015a7e:	2205      	movs	r2, #5
 8015a80:	68f8      	ldr	r0, [r7, #12]
 8015a82:	f7ff ff87 	bl	8015994 <SCSI_SenseCode>

    return -1;
 8015a86:	f04f 33ff 	mov.w	r3, #4294967295
 8015a8a:	e02c      	b.n	8015ae6 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	3304      	adds	r3, #4
 8015a90:	781b      	ldrb	r3, [r3, #0]
 8015a92:	f003 0303 	and.w	r3, r3, #3
 8015a96:	2b01      	cmp	r3, #1
 8015a98:	d106      	bne.n	8015aa8 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015a9a:	697a      	ldr	r2, [r7, #20]
 8015a9c:	f248 0362 	movw	r3, #32866	; 0x8062
 8015aa0:	4413      	add	r3, r2
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	701a      	strb	r2, [r3, #0]
 8015aa6:	e01a      	b.n	8015ade <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	3304      	adds	r3, #4
 8015aac:	781b      	ldrb	r3, [r3, #0]
 8015aae:	f003 0303 	and.w	r3, r3, #3
 8015ab2:	2b02      	cmp	r3, #2
 8015ab4:	d106      	bne.n	8015ac4 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8015ab6:	697a      	ldr	r2, [r7, #20]
 8015ab8:	f248 0362 	movw	r3, #32866	; 0x8062
 8015abc:	4413      	add	r3, r2
 8015abe:	2202      	movs	r2, #2
 8015ac0:	701a      	strb	r2, [r3, #0]
 8015ac2:	e00c      	b.n	8015ade <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	3304      	adds	r3, #4
 8015ac8:	781b      	ldrb	r3, [r3, #0]
 8015aca:	f003 0303 	and.w	r3, r3, #3
 8015ace:	2b03      	cmp	r3, #3
 8015ad0:	d105      	bne.n	8015ade <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015ad2:	697a      	ldr	r2, [r7, #20]
 8015ad4:	f248 0362 	movw	r3, #32866	; 0x8062
 8015ad8:	4413      	add	r3, r2
 8015ada:	2200      	movs	r2, #0
 8015adc:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8015ade:	697b      	ldr	r3, [r7, #20]
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	60da      	str	r2, [r3, #12]

  return 0;
 8015ae4:	2300      	movs	r3, #0
}
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	3718      	adds	r7, #24
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}

08015aee <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015aee:	b480      	push	{r7}
 8015af0:	b087      	sub	sp, #28
 8015af2:	af00      	add	r7, sp, #0
 8015af4:	60f8      	str	r0, [r7, #12]
 8015af6:	460b      	mov	r3, r1
 8015af8:	607a      	str	r2, [r7, #4]
 8015afa:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015b02:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	3304      	adds	r3, #4
 8015b08:	781b      	ldrb	r3, [r3, #0]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d106      	bne.n	8015b1c <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015b0e:	697a      	ldr	r2, [r7, #20]
 8015b10:	f248 0362 	movw	r3, #32866	; 0x8062
 8015b14:	4413      	add	r3, r2
 8015b16:	2200      	movs	r2, #0
 8015b18:	701a      	strb	r2, [r3, #0]
 8015b1a:	e005      	b.n	8015b28 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8015b1c:	697a      	ldr	r2, [r7, #20]
 8015b1e:	f248 0362 	movw	r3, #32866	; 0x8062
 8015b22:	4413      	add	r3, r2
 8015b24:	2201      	movs	r2, #1
 8015b26:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8015b28:	697b      	ldr	r3, [r7, #20]
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	60da      	str	r2, [r3, #12]

  return 0;
 8015b2e:	2300      	movs	r3, #0
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	371c      	adds	r7, #28
 8015b34:	46bd      	mov	sp, r7
 8015b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3a:	4770      	bx	lr

08015b3c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b086      	sub	sp, #24
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	60f8      	str	r0, [r7, #12]
 8015b44:	460b      	mov	r3, r1
 8015b46:	607a      	str	r2, [r7, #4]
 8015b48:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015b50:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015b52:	697b      	ldr	r3, [r7, #20]
 8015b54:	7a1b      	ldrb	r3, [r3, #8]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	f040 8094 	bne.w	8015c84 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8015b5c:	697a      	ldr	r2, [r7, #20]
 8015b5e:	f248 031c 	movw	r3, #32796	; 0x801c
 8015b62:	4413      	add	r3, r2
 8015b64:	781b      	ldrb	r3, [r3, #0]
 8015b66:	b25b      	sxtb	r3, r3
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	db0c      	blt.n	8015b86 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015b6c:	697a      	ldr	r2, [r7, #20]
 8015b6e:	f248 031d 	movw	r3, #32797	; 0x801d
 8015b72:	4413      	add	r3, r2
 8015b74:	7819      	ldrb	r1, [r3, #0]
 8015b76:	2320      	movs	r3, #32
 8015b78:	2205      	movs	r2, #5
 8015b7a:	68f8      	ldr	r0, [r7, #12]
 8015b7c:	f7ff ff0a 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8015b80:	f04f 33ff 	mov.w	r3, #4294967295
 8015b84:	e088      	b.n	8015c98 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8015b86:	697a      	ldr	r2, [r7, #20]
 8015b88:	f248 0362 	movw	r3, #32866	; 0x8062
 8015b8c:	4413      	add	r3, r2
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	2b02      	cmp	r3, #2
 8015b92:	d108      	bne.n	8015ba6 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015b94:	7af9      	ldrb	r1, [r7, #11]
 8015b96:	233a      	movs	r3, #58	; 0x3a
 8015b98:	2202      	movs	r2, #2
 8015b9a:	68f8      	ldr	r0, [r7, #12]
 8015b9c:	f7ff fefa 	bl	8015994 <SCSI_SenseCode>

      return -1;
 8015ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ba4:	e078      	b.n	8015c98 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015bac:	689b      	ldr	r3, [r3, #8]
 8015bae:	7afa      	ldrb	r2, [r7, #11]
 8015bb0:	4610      	mov	r0, r2
 8015bb2:	4798      	blx	r3
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d008      	beq.n	8015bcc <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015bba:	7af9      	ldrb	r1, [r7, #11]
 8015bbc:	233a      	movs	r3, #58	; 0x3a
 8015bbe:	2202      	movs	r2, #2
 8015bc0:	68f8      	ldr	r0, [r7, #12]
 8015bc2:	f7ff fee7 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8015bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8015bca:	e065      	b.n	8015c98 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	3302      	adds	r3, #2
 8015bd0:	781b      	ldrb	r3, [r3, #0]
 8015bd2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	3303      	adds	r3, #3
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015bdc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	3304      	adds	r3, #4
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015be6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015be8:	687a      	ldr	r2, [r7, #4]
 8015bea:	3205      	adds	r2, #5
 8015bec:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8015bee:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015bf0:	6979      	ldr	r1, [r7, #20]
 8015bf2:	f248 036c 	movw	r3, #32876	; 0x806c
 8015bf6:	440b      	add	r3, r1
 8015bf8:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	3307      	adds	r3, #7
 8015bfe:	781b      	ldrb	r3, [r3, #0]
 8015c00:	021b      	lsls	r3, r3, #8
 8015c02:	687a      	ldr	r2, [r7, #4]
 8015c04:	3208      	adds	r2, #8
 8015c06:	7812      	ldrb	r2, [r2, #0]
 8015c08:	431a      	orrs	r2, r3
 8015c0a:	6979      	ldr	r1, [r7, #20]
 8015c0c:	f248 0370 	movw	r3, #32880	; 0x8070
 8015c10:	440b      	add	r3, r1
 8015c12:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015c14:	697a      	ldr	r2, [r7, #20]
 8015c16:	f248 036c 	movw	r3, #32876	; 0x806c
 8015c1a:	4413      	add	r3, r2
 8015c1c:	6818      	ldr	r0, [r3, #0]
 8015c1e:	697a      	ldr	r2, [r7, #20]
 8015c20:	f248 0370 	movw	r3, #32880	; 0x8070
 8015c24:	4413      	add	r3, r2
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	7af9      	ldrb	r1, [r7, #11]
 8015c2a:	4602      	mov	r2, r0
 8015c2c:	68f8      	ldr	r0, [r7, #12]
 8015c2e:	f000 faeb 	bl	8016208 <SCSI_CheckAddressRange>
 8015c32:	4603      	mov	r3, r0
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	da02      	bge.n	8015c3e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015c38:	f04f 33ff 	mov.w	r3, #4294967295
 8015c3c:	e02c      	b.n	8015c98 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8015c3e:	697a      	ldr	r2, [r7, #20]
 8015c40:	f248 0318 	movw	r3, #32792	; 0x8018
 8015c44:	4413      	add	r3, r2
 8015c46:	681a      	ldr	r2, [r3, #0]
 8015c48:	6979      	ldr	r1, [r7, #20]
 8015c4a:	f248 0370 	movw	r3, #32880	; 0x8070
 8015c4e:	440b      	add	r3, r1
 8015c50:	6819      	ldr	r1, [r3, #0]
 8015c52:	6978      	ldr	r0, [r7, #20]
 8015c54:	f248 0364 	movw	r3, #32868	; 0x8064
 8015c58:	4403      	add	r3, r0
 8015c5a:	881b      	ldrh	r3, [r3, #0]
 8015c5c:	fb03 f301 	mul.w	r3, r3, r1
 8015c60:	429a      	cmp	r2, r3
 8015c62:	d00c      	beq.n	8015c7e <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015c64:	697a      	ldr	r2, [r7, #20]
 8015c66:	f248 031d 	movw	r3, #32797	; 0x801d
 8015c6a:	4413      	add	r3, r2
 8015c6c:	7819      	ldrb	r1, [r3, #0]
 8015c6e:	2320      	movs	r3, #32
 8015c70:	2205      	movs	r2, #5
 8015c72:	68f8      	ldr	r0, [r7, #12]
 8015c74:	f7ff fe8e 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8015c78:	f04f 33ff 	mov.w	r3, #4294967295
 8015c7c:	e00c      	b.n	8015c98 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8015c7e:	697b      	ldr	r3, [r7, #20]
 8015c80:	2202      	movs	r2, #2
 8015c82:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8015c84:	697b      	ldr	r3, [r7, #20]
 8015c86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8015c8a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8015c8c:	7afb      	ldrb	r3, [r7, #11]
 8015c8e:	4619      	mov	r1, r3
 8015c90:	68f8      	ldr	r0, [r7, #12]
 8015c92:	f000 fadd 	bl	8016250 <SCSI_ProcessRead>
 8015c96:	4603      	mov	r3, r0
}
 8015c98:	4618      	mov	r0, r3
 8015c9a:	3718      	adds	r7, #24
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	bd80      	pop	{r7, pc}

08015ca0 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b086      	sub	sp, #24
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	60f8      	str	r0, [r7, #12]
 8015ca8:	460b      	mov	r3, r1
 8015caa:	607a      	str	r2, [r7, #4]
 8015cac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015cb4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015cb6:	697b      	ldr	r3, [r7, #20]
 8015cb8:	7a1b      	ldrb	r3, [r3, #8]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	f040 809e 	bne.w	8015dfc <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8015cc0:	697a      	ldr	r2, [r7, #20]
 8015cc2:	f248 031c 	movw	r3, #32796	; 0x801c
 8015cc6:	4413      	add	r3, r2
 8015cc8:	781b      	ldrb	r3, [r3, #0]
 8015cca:	b25b      	sxtb	r3, r3
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	db0c      	blt.n	8015cea <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015cd0:	697a      	ldr	r2, [r7, #20]
 8015cd2:	f248 031d 	movw	r3, #32797	; 0x801d
 8015cd6:	4413      	add	r3, r2
 8015cd8:	7819      	ldrb	r1, [r3, #0]
 8015cda:	2320      	movs	r3, #32
 8015cdc:	2205      	movs	r2, #5
 8015cde:	68f8      	ldr	r0, [r7, #12]
 8015ce0:	f7ff fe58 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8015ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ce8:	e092      	b.n	8015e10 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8015cea:	697a      	ldr	r2, [r7, #20]
 8015cec:	f248 0362 	movw	r3, #32866	; 0x8062
 8015cf0:	4413      	add	r3, r2
 8015cf2:	781b      	ldrb	r3, [r3, #0]
 8015cf4:	2b02      	cmp	r3, #2
 8015cf6:	d108      	bne.n	8015d0a <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015cf8:	7af9      	ldrb	r1, [r7, #11]
 8015cfa:	233a      	movs	r3, #58	; 0x3a
 8015cfc:	2202      	movs	r2, #2
 8015cfe:	68f8      	ldr	r0, [r7, #12]
 8015d00:	f7ff fe48 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8015d04:	f04f 33ff 	mov.w	r3, #4294967295
 8015d08:	e082      	b.n	8015e10 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015d10:	689b      	ldr	r3, [r3, #8]
 8015d12:	7afa      	ldrb	r2, [r7, #11]
 8015d14:	4610      	mov	r0, r2
 8015d16:	4798      	blx	r3
 8015d18:	4603      	mov	r3, r0
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d008      	beq.n	8015d30 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015d1e:	7af9      	ldrb	r1, [r7, #11]
 8015d20:	233a      	movs	r3, #58	; 0x3a
 8015d22:	2202      	movs	r2, #2
 8015d24:	68f8      	ldr	r0, [r7, #12]
 8015d26:	f7ff fe35 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8015d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8015d2e:	e06f      	b.n	8015e10 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	3302      	adds	r3, #2
 8015d34:	781b      	ldrb	r3, [r3, #0]
 8015d36:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	3303      	adds	r3, #3
 8015d3c:	781b      	ldrb	r3, [r3, #0]
 8015d3e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015d40:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	3304      	adds	r3, #4
 8015d46:	781b      	ldrb	r3, [r3, #0]
 8015d48:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015d4a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015d4c:	687a      	ldr	r2, [r7, #4]
 8015d4e:	3205      	adds	r2, #5
 8015d50:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8015d52:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015d54:	6979      	ldr	r1, [r7, #20]
 8015d56:	f248 036c 	movw	r3, #32876	; 0x806c
 8015d5a:	440b      	add	r3, r1
 8015d5c:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	3306      	adds	r3, #6
 8015d62:	781b      	ldrb	r3, [r3, #0]
 8015d64:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	3307      	adds	r3, #7
 8015d6a:	781b      	ldrb	r3, [r3, #0]
 8015d6c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015d6e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	3308      	adds	r3, #8
 8015d74:	781b      	ldrb	r3, [r3, #0]
 8015d76:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8015d78:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8015d7a:	687a      	ldr	r2, [r7, #4]
 8015d7c:	3209      	adds	r2, #9
 8015d7e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8015d80:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015d82:	6979      	ldr	r1, [r7, #20]
 8015d84:	f248 0370 	movw	r3, #32880	; 0x8070
 8015d88:	440b      	add	r3, r1
 8015d8a:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015d8c:	697a      	ldr	r2, [r7, #20]
 8015d8e:	f248 036c 	movw	r3, #32876	; 0x806c
 8015d92:	4413      	add	r3, r2
 8015d94:	6818      	ldr	r0, [r3, #0]
 8015d96:	697a      	ldr	r2, [r7, #20]
 8015d98:	f248 0370 	movw	r3, #32880	; 0x8070
 8015d9c:	4413      	add	r3, r2
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	7af9      	ldrb	r1, [r7, #11]
 8015da2:	4602      	mov	r2, r0
 8015da4:	68f8      	ldr	r0, [r7, #12]
 8015da6:	f000 fa2f 	bl	8016208 <SCSI_CheckAddressRange>
 8015daa:	4603      	mov	r3, r0
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	da02      	bge.n	8015db6 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015db0:	f04f 33ff 	mov.w	r3, #4294967295
 8015db4:	e02c      	b.n	8015e10 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8015db6:	697a      	ldr	r2, [r7, #20]
 8015db8:	f248 0318 	movw	r3, #32792	; 0x8018
 8015dbc:	4413      	add	r3, r2
 8015dbe:	681a      	ldr	r2, [r3, #0]
 8015dc0:	6979      	ldr	r1, [r7, #20]
 8015dc2:	f248 0370 	movw	r3, #32880	; 0x8070
 8015dc6:	440b      	add	r3, r1
 8015dc8:	6819      	ldr	r1, [r3, #0]
 8015dca:	6978      	ldr	r0, [r7, #20]
 8015dcc:	f248 0364 	movw	r3, #32868	; 0x8064
 8015dd0:	4403      	add	r3, r0
 8015dd2:	881b      	ldrh	r3, [r3, #0]
 8015dd4:	fb03 f301 	mul.w	r3, r3, r1
 8015dd8:	429a      	cmp	r2, r3
 8015dda:	d00c      	beq.n	8015df6 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015ddc:	697a      	ldr	r2, [r7, #20]
 8015dde:	f248 031d 	movw	r3, #32797	; 0x801d
 8015de2:	4413      	add	r3, r2
 8015de4:	7819      	ldrb	r1, [r3, #0]
 8015de6:	2320      	movs	r3, #32
 8015de8:	2205      	movs	r2, #5
 8015dea:	68f8      	ldr	r0, [r7, #12]
 8015dec:	f7ff fdd2 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8015df0:	f04f 33ff 	mov.w	r3, #4294967295
 8015df4:	e00c      	b.n	8015e10 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8015df6:	697b      	ldr	r3, [r7, #20]
 8015df8:	2202      	movs	r2, #2
 8015dfa:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8015dfc:	697b      	ldr	r3, [r7, #20]
 8015dfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8015e02:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8015e04:	7afb      	ldrb	r3, [r7, #11]
 8015e06:	4619      	mov	r1, r3
 8015e08:	68f8      	ldr	r0, [r7, #12]
 8015e0a:	f000 fa21 	bl	8016250 <SCSI_ProcessRead>
 8015e0e:	4603      	mov	r3, r0
}
 8015e10:	4618      	mov	r0, r3
 8015e12:	3718      	adds	r7, #24
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}

08015e18 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b086      	sub	sp, #24
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	60f8      	str	r0, [r7, #12]
 8015e20:	460b      	mov	r3, r1
 8015e22:	607a      	str	r2, [r7, #4]
 8015e24:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015e2c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015e2e:	697b      	ldr	r3, [r7, #20]
 8015e30:	7a1b      	ldrb	r3, [r3, #8]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	f040 80be 	bne.w	8015fb4 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015e38:	697a      	ldr	r2, [r7, #20]
 8015e3a:	f248 0318 	movw	r3, #32792	; 0x8018
 8015e3e:	4413      	add	r3, r2
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d10c      	bne.n	8015e60 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015e46:	697a      	ldr	r2, [r7, #20]
 8015e48:	f248 031d 	movw	r3, #32797	; 0x801d
 8015e4c:	4413      	add	r3, r2
 8015e4e:	7819      	ldrb	r1, [r3, #0]
 8015e50:	2320      	movs	r3, #32
 8015e52:	2205      	movs	r2, #5
 8015e54:	68f8      	ldr	r0, [r7, #12]
 8015e56:	f7ff fd9d 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8015e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e5e:	e0af      	b.n	8015fc0 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015e60:	697a      	ldr	r2, [r7, #20]
 8015e62:	f248 031c 	movw	r3, #32796	; 0x801c
 8015e66:	4413      	add	r3, r2
 8015e68:	781b      	ldrb	r3, [r3, #0]
 8015e6a:	b25b      	sxtb	r3, r3
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	da0c      	bge.n	8015e8a <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015e70:	697a      	ldr	r2, [r7, #20]
 8015e72:	f248 031d 	movw	r3, #32797	; 0x801d
 8015e76:	4413      	add	r3, r2
 8015e78:	7819      	ldrb	r1, [r3, #0]
 8015e7a:	2320      	movs	r3, #32
 8015e7c:	2205      	movs	r2, #5
 8015e7e:	68f8      	ldr	r0, [r7, #12]
 8015e80:	f7ff fd88 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8015e84:	f04f 33ff 	mov.w	r3, #4294967295
 8015e88:	e09a      	b.n	8015fc0 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015e90:	689b      	ldr	r3, [r3, #8]
 8015e92:	7afa      	ldrb	r2, [r7, #11]
 8015e94:	4610      	mov	r0, r2
 8015e96:	4798      	blx	r3
 8015e98:	4603      	mov	r3, r0
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d008      	beq.n	8015eb0 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015e9e:	7af9      	ldrb	r1, [r7, #11]
 8015ea0:	233a      	movs	r3, #58	; 0x3a
 8015ea2:	2202      	movs	r2, #2
 8015ea4:	68f8      	ldr	r0, [r7, #12]
 8015ea6:	f7ff fd75 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8015eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8015eae:	e087      	b.n	8015fc0 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015eb6:	68db      	ldr	r3, [r3, #12]
 8015eb8:	7afa      	ldrb	r2, [r7, #11]
 8015eba:	4610      	mov	r0, r2
 8015ebc:	4798      	blx	r3
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d008      	beq.n	8015ed6 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8015ec4:	7af9      	ldrb	r1, [r7, #11]
 8015ec6:	2327      	movs	r3, #39	; 0x27
 8015ec8:	2202      	movs	r2, #2
 8015eca:	68f8      	ldr	r0, [r7, #12]
 8015ecc:	f7ff fd62 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8015ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ed4:	e074      	b.n	8015fc0 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	3302      	adds	r3, #2
 8015eda:	781b      	ldrb	r3, [r3, #0]
 8015edc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	3303      	adds	r3, #3
 8015ee2:	781b      	ldrb	r3, [r3, #0]
 8015ee4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015ee6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	3304      	adds	r3, #4
 8015eec:	781b      	ldrb	r3, [r3, #0]
 8015eee:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015ef0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015ef2:	687a      	ldr	r2, [r7, #4]
 8015ef4:	3205      	adds	r2, #5
 8015ef6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015ef8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015efa:	6979      	ldr	r1, [r7, #20]
 8015efc:	f248 036c 	movw	r3, #32876	; 0x806c
 8015f00:	440b      	add	r3, r1
 8015f02:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	3307      	adds	r3, #7
 8015f08:	781b      	ldrb	r3, [r3, #0]
 8015f0a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8015f0c:	687a      	ldr	r2, [r7, #4]
 8015f0e:	3208      	adds	r2, #8
 8015f10:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015f12:	431a      	orrs	r2, r3
 8015f14:	6979      	ldr	r1, [r7, #20]
 8015f16:	f248 0370 	movw	r3, #32880	; 0x8070
 8015f1a:	440b      	add	r3, r1
 8015f1c:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015f1e:	697a      	ldr	r2, [r7, #20]
 8015f20:	f248 036c 	movw	r3, #32876	; 0x806c
 8015f24:	4413      	add	r3, r2
 8015f26:	6818      	ldr	r0, [r3, #0]
 8015f28:	697a      	ldr	r2, [r7, #20]
 8015f2a:	f248 0370 	movw	r3, #32880	; 0x8070
 8015f2e:	4413      	add	r3, r2
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	7af9      	ldrb	r1, [r7, #11]
 8015f34:	4602      	mov	r2, r0
 8015f36:	68f8      	ldr	r0, [r7, #12]
 8015f38:	f000 f966 	bl	8016208 <SCSI_CheckAddressRange>
 8015f3c:	4603      	mov	r3, r0
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	da02      	bge.n	8015f48 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015f42:	f04f 33ff 	mov.w	r3, #4294967295
 8015f46:	e03b      	b.n	8015fc0 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015f48:	697a      	ldr	r2, [r7, #20]
 8015f4a:	f248 0370 	movw	r3, #32880	; 0x8070
 8015f4e:	4413      	add	r3, r2
 8015f50:	681a      	ldr	r2, [r3, #0]
 8015f52:	6979      	ldr	r1, [r7, #20]
 8015f54:	f248 0364 	movw	r3, #32868	; 0x8064
 8015f58:	440b      	add	r3, r1
 8015f5a:	881b      	ldrh	r3, [r3, #0]
 8015f5c:	fb03 f302 	mul.w	r3, r3, r2
 8015f60:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015f62:	697a      	ldr	r2, [r7, #20]
 8015f64:	f248 0318 	movw	r3, #32792	; 0x8018
 8015f68:	4413      	add	r3, r2
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	693a      	ldr	r2, [r7, #16]
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	d00c      	beq.n	8015f8c <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015f72:	697a      	ldr	r2, [r7, #20]
 8015f74:	f248 031d 	movw	r3, #32797	; 0x801d
 8015f78:	4413      	add	r3, r2
 8015f7a:	7819      	ldrb	r1, [r3, #0]
 8015f7c:	2320      	movs	r3, #32
 8015f7e:	2205      	movs	r2, #5
 8015f80:	68f8      	ldr	r0, [r7, #12]
 8015f82:	f7ff fd07 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8015f86:	f04f 33ff 	mov.w	r3, #4294967295
 8015f8a:	e019      	b.n	8015fc0 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8015f8c:	693b      	ldr	r3, [r7, #16]
 8015f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015f92:	bf28      	it	cs
 8015f94:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8015f98:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8015f9a:	697b      	ldr	r3, [r7, #20]
 8015f9c:	2201      	movs	r2, #1
 8015f9e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8015fa0:	697b      	ldr	r3, [r7, #20]
 8015fa2:	f103 0210 	add.w	r2, r3, #16
 8015fa6:	693b      	ldr	r3, [r7, #16]
 8015fa8:	2101      	movs	r1, #1
 8015faa:	68f8      	ldr	r0, [r7, #12]
 8015fac:	f004 fb19 	bl	801a5e2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	e005      	b.n	8015fc0 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8015fb4:	7afb      	ldrb	r3, [r7, #11]
 8015fb6:	4619      	mov	r1, r3
 8015fb8:	68f8      	ldr	r0, [r7, #12]
 8015fba:	f000 f9d7 	bl	801636c <SCSI_ProcessWrite>
 8015fbe:	4603      	mov	r3, r0
}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	3718      	adds	r7, #24
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd80      	pop	{r7, pc}

08015fc8 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b086      	sub	sp, #24
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	60f8      	str	r0, [r7, #12]
 8015fd0:	460b      	mov	r3, r1
 8015fd2:	607a      	str	r2, [r7, #4]
 8015fd4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015fdc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015fde:	697b      	ldr	r3, [r7, #20]
 8015fe0:	7a1b      	ldrb	r3, [r3, #8]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	f040 80ce 	bne.w	8016184 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015fe8:	697a      	ldr	r2, [r7, #20]
 8015fea:	f248 0318 	movw	r3, #32792	; 0x8018
 8015fee:	4413      	add	r3, r2
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d10c      	bne.n	8016010 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015ff6:	697a      	ldr	r2, [r7, #20]
 8015ff8:	f248 031d 	movw	r3, #32797	; 0x801d
 8015ffc:	4413      	add	r3, r2
 8015ffe:	7819      	ldrb	r1, [r3, #0]
 8016000:	2320      	movs	r3, #32
 8016002:	2205      	movs	r2, #5
 8016004:	68f8      	ldr	r0, [r7, #12]
 8016006:	f7ff fcc5 	bl	8015994 <SCSI_SenseCode>
      return -1;
 801600a:	f04f 33ff 	mov.w	r3, #4294967295
 801600e:	e0bf      	b.n	8016190 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8016010:	697a      	ldr	r2, [r7, #20]
 8016012:	f248 031c 	movw	r3, #32796	; 0x801c
 8016016:	4413      	add	r3, r2
 8016018:	781b      	ldrb	r3, [r3, #0]
 801601a:	b25b      	sxtb	r3, r3
 801601c:	2b00      	cmp	r3, #0
 801601e:	da0c      	bge.n	801603a <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016020:	697a      	ldr	r2, [r7, #20]
 8016022:	f248 031d 	movw	r3, #32797	; 0x801d
 8016026:	4413      	add	r3, r2
 8016028:	7819      	ldrb	r1, [r3, #0]
 801602a:	2320      	movs	r3, #32
 801602c:	2205      	movs	r2, #5
 801602e:	68f8      	ldr	r0, [r7, #12]
 8016030:	f7ff fcb0 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8016034:	f04f 33ff 	mov.w	r3, #4294967295
 8016038:	e0aa      	b.n	8016190 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016040:	689b      	ldr	r3, [r3, #8]
 8016042:	7afa      	ldrb	r2, [r7, #11]
 8016044:	4610      	mov	r0, r2
 8016046:	4798      	blx	r3
 8016048:	4603      	mov	r3, r0
 801604a:	2b00      	cmp	r3, #0
 801604c:	d00b      	beq.n	8016066 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801604e:	7af9      	ldrb	r1, [r7, #11]
 8016050:	233a      	movs	r3, #58	; 0x3a
 8016052:	2202      	movs	r2, #2
 8016054:	68f8      	ldr	r0, [r7, #12]
 8016056:	f7ff fc9d 	bl	8015994 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	2205      	movs	r2, #5
 801605e:	721a      	strb	r2, [r3, #8]
      return -1;
 8016060:	f04f 33ff 	mov.w	r3, #4294967295
 8016064:	e094      	b.n	8016190 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801606c:	68db      	ldr	r3, [r3, #12]
 801606e:	7afa      	ldrb	r2, [r7, #11]
 8016070:	4610      	mov	r0, r2
 8016072:	4798      	blx	r3
 8016074:	4603      	mov	r3, r0
 8016076:	2b00      	cmp	r3, #0
 8016078:	d00b      	beq.n	8016092 <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801607a:	7af9      	ldrb	r1, [r7, #11]
 801607c:	2327      	movs	r3, #39	; 0x27
 801607e:	2202      	movs	r2, #2
 8016080:	68f8      	ldr	r0, [r7, #12]
 8016082:	f7ff fc87 	bl	8015994 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8016086:	697b      	ldr	r3, [r7, #20]
 8016088:	2205      	movs	r2, #5
 801608a:	721a      	strb	r2, [r3, #8]
      return -1;
 801608c:	f04f 33ff 	mov.w	r3, #4294967295
 8016090:	e07e      	b.n	8016190 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	3302      	adds	r3, #2
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	3303      	adds	r3, #3
 801609e:	781b      	ldrb	r3, [r3, #0]
 80160a0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80160a2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	3304      	adds	r3, #4
 80160a8:	781b      	ldrb	r3, [r3, #0]
 80160aa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80160ac:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80160ae:	687a      	ldr	r2, [r7, #4]
 80160b0:	3205      	adds	r2, #5
 80160b2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80160b4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80160b6:	6979      	ldr	r1, [r7, #20]
 80160b8:	f248 036c 	movw	r3, #32876	; 0x806c
 80160bc:	440b      	add	r3, r1
 80160be:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	3306      	adds	r3, #6
 80160c4:	781b      	ldrb	r3, [r3, #0]
 80160c6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	3307      	adds	r3, #7
 80160cc:	781b      	ldrb	r3, [r3, #0]
 80160ce:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80160d0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	3308      	adds	r3, #8
 80160d6:	781b      	ldrb	r3, [r3, #0]
 80160d8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80160da:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80160dc:	687a      	ldr	r2, [r7, #4]
 80160de:	3209      	adds	r2, #9
 80160e0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80160e2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80160e4:	6979      	ldr	r1, [r7, #20]
 80160e6:	f248 0370 	movw	r3, #32880	; 0x8070
 80160ea:	440b      	add	r3, r1
 80160ec:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80160ee:	697a      	ldr	r2, [r7, #20]
 80160f0:	f248 036c 	movw	r3, #32876	; 0x806c
 80160f4:	4413      	add	r3, r2
 80160f6:	6818      	ldr	r0, [r3, #0]
 80160f8:	697a      	ldr	r2, [r7, #20]
 80160fa:	f248 0370 	movw	r3, #32880	; 0x8070
 80160fe:	4413      	add	r3, r2
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	7af9      	ldrb	r1, [r7, #11]
 8016104:	4602      	mov	r2, r0
 8016106:	68f8      	ldr	r0, [r7, #12]
 8016108:	f000 f87e 	bl	8016208 <SCSI_CheckAddressRange>
 801610c:	4603      	mov	r3, r0
 801610e:	2b00      	cmp	r3, #0
 8016110:	da02      	bge.n	8016118 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8016112:	f04f 33ff 	mov.w	r3, #4294967295
 8016116:	e03b      	b.n	8016190 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8016118:	697a      	ldr	r2, [r7, #20]
 801611a:	f248 0370 	movw	r3, #32880	; 0x8070
 801611e:	4413      	add	r3, r2
 8016120:	681a      	ldr	r2, [r3, #0]
 8016122:	6979      	ldr	r1, [r7, #20]
 8016124:	f248 0364 	movw	r3, #32868	; 0x8064
 8016128:	440b      	add	r3, r1
 801612a:	881b      	ldrh	r3, [r3, #0]
 801612c:	fb03 f302 	mul.w	r3, r3, r2
 8016130:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8016132:	697a      	ldr	r2, [r7, #20]
 8016134:	f248 0318 	movw	r3, #32792	; 0x8018
 8016138:	4413      	add	r3, r2
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	693a      	ldr	r2, [r7, #16]
 801613e:	429a      	cmp	r2, r3
 8016140:	d00c      	beq.n	801615c <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016142:	697a      	ldr	r2, [r7, #20]
 8016144:	f248 031d 	movw	r3, #32797	; 0x801d
 8016148:	4413      	add	r3, r2
 801614a:	7819      	ldrb	r1, [r3, #0]
 801614c:	2320      	movs	r3, #32
 801614e:	2205      	movs	r2, #5
 8016150:	68f8      	ldr	r0, [r7, #12]
 8016152:	f7ff fc1f 	bl	8015994 <SCSI_SenseCode>
      return -1;
 8016156:	f04f 33ff 	mov.w	r3, #4294967295
 801615a:	e019      	b.n	8016190 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801615c:	693b      	ldr	r3, [r7, #16]
 801615e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016162:	bf28      	it	cs
 8016164:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8016168:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	2201      	movs	r2, #1
 801616e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8016170:	697b      	ldr	r3, [r7, #20]
 8016172:	f103 0210 	add.w	r2, r3, #16
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	2101      	movs	r1, #1
 801617a:	68f8      	ldr	r0, [r7, #12]
 801617c:	f004 fa31 	bl	801a5e2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8016180:	2300      	movs	r3, #0
 8016182:	e005      	b.n	8016190 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8016184:	7afb      	ldrb	r3, [r7, #11]
 8016186:	4619      	mov	r1, r3
 8016188:	68f8      	ldr	r0, [r7, #12]
 801618a:	f000 f8ef 	bl	801636c <SCSI_ProcessWrite>
 801618e:	4603      	mov	r3, r0
}
 8016190:	4618      	mov	r0, r3
 8016192:	3718      	adds	r7, #24
 8016194:	46bd      	mov	sp, r7
 8016196:	bd80      	pop	{r7, pc}

08016198 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b086      	sub	sp, #24
 801619c:	af00      	add	r7, sp, #0
 801619e:	60f8      	str	r0, [r7, #12]
 80161a0:	460b      	mov	r3, r1
 80161a2:	607a      	str	r2, [r7, #4]
 80161a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80161ac:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	3301      	adds	r3, #1
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	f003 0302 	and.w	r3, r3, #2
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d008      	beq.n	80161ce <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80161bc:	7af9      	ldrb	r1, [r7, #11]
 80161be:	2324      	movs	r3, #36	; 0x24
 80161c0:	2205      	movs	r2, #5
 80161c2:	68f8      	ldr	r0, [r7, #12]
 80161c4:	f7ff fbe6 	bl	8015994 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80161c8:	f04f 33ff 	mov.w	r3, #4294967295
 80161cc:	e018      	b.n	8016200 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80161ce:	697a      	ldr	r2, [r7, #20]
 80161d0:	f248 036c 	movw	r3, #32876	; 0x806c
 80161d4:	4413      	add	r3, r2
 80161d6:	6818      	ldr	r0, [r3, #0]
 80161d8:	697a      	ldr	r2, [r7, #20]
 80161da:	f248 0370 	movw	r3, #32880	; 0x8070
 80161de:	4413      	add	r3, r2
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	7af9      	ldrb	r1, [r7, #11]
 80161e4:	4602      	mov	r2, r0
 80161e6:	68f8      	ldr	r0, [r7, #12]
 80161e8:	f000 f80e 	bl	8016208 <SCSI_CheckAddressRange>
 80161ec:	4603      	mov	r3, r0
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	da02      	bge.n	80161f8 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 80161f2:	f04f 33ff 	mov.w	r3, #4294967295
 80161f6:	e003      	b.n	8016200 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 80161f8:	697b      	ldr	r3, [r7, #20]
 80161fa:	2200      	movs	r2, #0
 80161fc:	60da      	str	r2, [r3, #12]

  return 0;
 80161fe:	2300      	movs	r3, #0
}
 8016200:	4618      	mov	r0, r3
 8016202:	3718      	adds	r7, #24
 8016204:	46bd      	mov	sp, r7
 8016206:	bd80      	pop	{r7, pc}

08016208 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b086      	sub	sp, #24
 801620c:	af00      	add	r7, sp, #0
 801620e:	60f8      	str	r0, [r7, #12]
 8016210:	607a      	str	r2, [r7, #4]
 8016212:	603b      	str	r3, [r7, #0]
 8016214:	460b      	mov	r3, r1
 8016216:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801621e:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8016220:	687a      	ldr	r2, [r7, #4]
 8016222:	683b      	ldr	r3, [r7, #0]
 8016224:	441a      	add	r2, r3
 8016226:	6979      	ldr	r1, [r7, #20]
 8016228:	f248 0368 	movw	r3, #32872	; 0x8068
 801622c:	440b      	add	r3, r1
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	429a      	cmp	r2, r3
 8016232:	d908      	bls.n	8016246 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8016234:	7af9      	ldrb	r1, [r7, #11]
 8016236:	2321      	movs	r3, #33	; 0x21
 8016238:	2205      	movs	r2, #5
 801623a:	68f8      	ldr	r0, [r7, #12]
 801623c:	f7ff fbaa 	bl	8015994 <SCSI_SenseCode>
    return -1;
 8016240:	f04f 33ff 	mov.w	r3, #4294967295
 8016244:	e000      	b.n	8016248 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8016246:	2300      	movs	r3, #0
}
 8016248:	4618      	mov	r0, r3
 801624a:	3718      	adds	r7, #24
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}

08016250 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8016250:	b5b0      	push	{r4, r5, r7, lr}
 8016252:	b084      	sub	sp, #16
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
 8016258:	460b      	mov	r3, r1
 801625a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016262:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8016264:	68fa      	ldr	r2, [r7, #12]
 8016266:	f248 0370 	movw	r3, #32880	; 0x8070
 801626a:	4413      	add	r3, r2
 801626c:	681a      	ldr	r2, [r3, #0]
 801626e:	68f9      	ldr	r1, [r7, #12]
 8016270:	f248 0364 	movw	r3, #32868	; 0x8064
 8016274:	440b      	add	r3, r1
 8016276:	881b      	ldrh	r3, [r3, #0]
 8016278:	fb03 f302 	mul.w	r3, r3, r2
 801627c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016284:	bf28      	it	cs
 8016286:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801628a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016292:	691c      	ldr	r4, [r3, #16]
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	f103 0110 	add.w	r1, r3, #16
 801629a:	68fa      	ldr	r2, [r7, #12]
 801629c:	f248 036c 	movw	r3, #32876	; 0x806c
 80162a0:	4413      	add	r3, r2
 80162a2:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80162a4:	68fa      	ldr	r2, [r7, #12]
 80162a6:	f248 0364 	movw	r3, #32868	; 0x8064
 80162aa:	4413      	add	r3, r2
 80162ac:	881b      	ldrh	r3, [r3, #0]
 80162ae:	461a      	mov	r2, r3
 80162b0:	68bb      	ldr	r3, [r7, #8]
 80162b2:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	78f8      	ldrb	r0, [r7, #3]
 80162ba:	462a      	mov	r2, r5
 80162bc:	47a0      	blx	r4
 80162be:	4603      	mov	r3, r0
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	da08      	bge.n	80162d6 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80162c4:	78f9      	ldrb	r1, [r7, #3]
 80162c6:	2311      	movs	r3, #17
 80162c8:	2204      	movs	r2, #4
 80162ca:	6878      	ldr	r0, [r7, #4]
 80162cc:	f7ff fb62 	bl	8015994 <SCSI_SenseCode>
    return -1;
 80162d0:	f04f 33ff 	mov.w	r3, #4294967295
 80162d4:	e046      	b.n	8016364 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	f103 0210 	add.w	r2, r3, #16
 80162dc:	68bb      	ldr	r3, [r7, #8]
 80162de:	2181      	movs	r1, #129	; 0x81
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f004 f95d 	bl	801a5a0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80162e6:	68fa      	ldr	r2, [r7, #12]
 80162e8:	f248 036c 	movw	r3, #32876	; 0x806c
 80162ec:	4413      	add	r3, r2
 80162ee:	681a      	ldr	r2, [r3, #0]
 80162f0:	68f9      	ldr	r1, [r7, #12]
 80162f2:	f248 0364 	movw	r3, #32868	; 0x8064
 80162f6:	440b      	add	r3, r1
 80162f8:	881b      	ldrh	r3, [r3, #0]
 80162fa:	4619      	mov	r1, r3
 80162fc:	68bb      	ldr	r3, [r7, #8]
 80162fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8016302:	441a      	add	r2, r3
 8016304:	68f9      	ldr	r1, [r7, #12]
 8016306:	f248 036c 	movw	r3, #32876	; 0x806c
 801630a:	440b      	add	r3, r1
 801630c:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801630e:	68fa      	ldr	r2, [r7, #12]
 8016310:	f248 0370 	movw	r3, #32880	; 0x8070
 8016314:	4413      	add	r3, r2
 8016316:	681a      	ldr	r2, [r3, #0]
 8016318:	68f9      	ldr	r1, [r7, #12]
 801631a:	f248 0364 	movw	r3, #32868	; 0x8064
 801631e:	440b      	add	r3, r1
 8016320:	881b      	ldrh	r3, [r3, #0]
 8016322:	4619      	mov	r1, r3
 8016324:	68bb      	ldr	r3, [r7, #8]
 8016326:	fbb3 f3f1 	udiv	r3, r3, r1
 801632a:	1ad2      	subs	r2, r2, r3
 801632c:	68f9      	ldr	r1, [r7, #12]
 801632e:	f248 0370 	movw	r3, #32880	; 0x8070
 8016332:	440b      	add	r3, r1
 8016334:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8016336:	68fa      	ldr	r2, [r7, #12]
 8016338:	f248 0338 	movw	r3, #32824	; 0x8038
 801633c:	4413      	add	r3, r2
 801633e:	681a      	ldr	r2, [r3, #0]
 8016340:	68bb      	ldr	r3, [r7, #8]
 8016342:	1ad2      	subs	r2, r2, r3
 8016344:	68f9      	ldr	r1, [r7, #12]
 8016346:	f248 0338 	movw	r3, #32824	; 0x8038
 801634a:	440b      	add	r3, r1
 801634c:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 801634e:	68fa      	ldr	r2, [r7, #12]
 8016350:	f248 0370 	movw	r3, #32880	; 0x8070
 8016354:	4413      	add	r3, r2
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d102      	bne.n	8016362 <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	2203      	movs	r2, #3
 8016360:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8016362:	2300      	movs	r3, #0
}
 8016364:	4618      	mov	r0, r3
 8016366:	3710      	adds	r7, #16
 8016368:	46bd      	mov	sp, r7
 801636a:	bdb0      	pop	{r4, r5, r7, pc}

0801636c <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801636c:	b5b0      	push	{r4, r5, r7, lr}
 801636e:	b084      	sub	sp, #16
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
 8016374:	460b      	mov	r3, r1
 8016376:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801637e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8016380:	68fa      	ldr	r2, [r7, #12]
 8016382:	f248 0370 	movw	r3, #32880	; 0x8070
 8016386:	4413      	add	r3, r2
 8016388:	681a      	ldr	r2, [r3, #0]
 801638a:	68f9      	ldr	r1, [r7, #12]
 801638c:	f248 0364 	movw	r3, #32868	; 0x8064
 8016390:	440b      	add	r3, r1
 8016392:	881b      	ldrh	r3, [r3, #0]
 8016394:	fb03 f302 	mul.w	r3, r3, r2
 8016398:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801639a:	68bb      	ldr	r3, [r7, #8]
 801639c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80163a0:	bf28      	it	cs
 80163a2:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80163a6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80163ae:	695c      	ldr	r4, [r3, #20]
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	f103 0110 	add.w	r1, r3, #16
 80163b6:	68fa      	ldr	r2, [r7, #12]
 80163b8:	f248 036c 	movw	r3, #32876	; 0x806c
 80163bc:	4413      	add	r3, r2
 80163be:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80163c0:	68fa      	ldr	r2, [r7, #12]
 80163c2:	f248 0364 	movw	r3, #32868	; 0x8064
 80163c6:	4413      	add	r3, r2
 80163c8:	881b      	ldrh	r3, [r3, #0]
 80163ca:	461a      	mov	r2, r3
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80163d2:	b29b      	uxth	r3, r3
 80163d4:	78f8      	ldrb	r0, [r7, #3]
 80163d6:	462a      	mov	r2, r5
 80163d8:	47a0      	blx	r4
 80163da:	4603      	mov	r3, r0
 80163dc:	2b00      	cmp	r3, #0
 80163de:	da08      	bge.n	80163f2 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80163e0:	78f9      	ldrb	r1, [r7, #3]
 80163e2:	2303      	movs	r3, #3
 80163e4:	2204      	movs	r2, #4
 80163e6:	6878      	ldr	r0, [r7, #4]
 80163e8:	f7ff fad4 	bl	8015994 <SCSI_SenseCode>
    return -1;
 80163ec:	f04f 33ff 	mov.w	r3, #4294967295
 80163f0:	e05a      	b.n	80164a8 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80163f2:	68fa      	ldr	r2, [r7, #12]
 80163f4:	f248 036c 	movw	r3, #32876	; 0x806c
 80163f8:	4413      	add	r3, r2
 80163fa:	681a      	ldr	r2, [r3, #0]
 80163fc:	68f9      	ldr	r1, [r7, #12]
 80163fe:	f248 0364 	movw	r3, #32868	; 0x8064
 8016402:	440b      	add	r3, r1
 8016404:	881b      	ldrh	r3, [r3, #0]
 8016406:	4619      	mov	r1, r3
 8016408:	68bb      	ldr	r3, [r7, #8]
 801640a:	fbb3 f3f1 	udiv	r3, r3, r1
 801640e:	441a      	add	r2, r3
 8016410:	68f9      	ldr	r1, [r7, #12]
 8016412:	f248 036c 	movw	r3, #32876	; 0x806c
 8016416:	440b      	add	r3, r1
 8016418:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801641a:	68fa      	ldr	r2, [r7, #12]
 801641c:	f248 0370 	movw	r3, #32880	; 0x8070
 8016420:	4413      	add	r3, r2
 8016422:	681a      	ldr	r2, [r3, #0]
 8016424:	68f9      	ldr	r1, [r7, #12]
 8016426:	f248 0364 	movw	r3, #32868	; 0x8064
 801642a:	440b      	add	r3, r1
 801642c:	881b      	ldrh	r3, [r3, #0]
 801642e:	4619      	mov	r1, r3
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	fbb3 f3f1 	udiv	r3, r3, r1
 8016436:	1ad2      	subs	r2, r2, r3
 8016438:	68f9      	ldr	r1, [r7, #12]
 801643a:	f248 0370 	movw	r3, #32880	; 0x8070
 801643e:	440b      	add	r3, r1
 8016440:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8016442:	68fa      	ldr	r2, [r7, #12]
 8016444:	f248 0338 	movw	r3, #32824	; 0x8038
 8016448:	4413      	add	r3, r2
 801644a:	681a      	ldr	r2, [r3, #0]
 801644c:	68bb      	ldr	r3, [r7, #8]
 801644e:	1ad2      	subs	r2, r2, r3
 8016450:	68f9      	ldr	r1, [r7, #12]
 8016452:	f248 0338 	movw	r3, #32824	; 0x8038
 8016456:	440b      	add	r3, r1
 8016458:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 801645a:	68fa      	ldr	r2, [r7, #12]
 801645c:	f248 0370 	movw	r3, #32880	; 0x8070
 8016460:	4413      	add	r3, r2
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d104      	bne.n	8016472 <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8016468:	2100      	movs	r1, #0
 801646a:	6878      	ldr	r0, [r7, #4]
 801646c:	f7fe fde2 	bl	8015034 <MSC_BOT_SendCSW>
 8016470:	e019      	b.n	80164a6 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8016472:	68fa      	ldr	r2, [r7, #12]
 8016474:	f248 0370 	movw	r3, #32880	; 0x8070
 8016478:	4413      	add	r3, r2
 801647a:	681a      	ldr	r2, [r3, #0]
 801647c:	68f9      	ldr	r1, [r7, #12]
 801647e:	f248 0364 	movw	r3, #32868	; 0x8064
 8016482:	440b      	add	r3, r1
 8016484:	881b      	ldrh	r3, [r3, #0]
 8016486:	fb03 f302 	mul.w	r3, r3, r2
 801648a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801648e:	bf28      	it	cs
 8016490:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8016494:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	f103 0210 	add.w	r2, r3, #16
 801649c:	68bb      	ldr	r3, [r7, #8]
 801649e:	2101      	movs	r1, #1
 80164a0:	6878      	ldr	r0, [r7, #4]
 80164a2:	f004 f89e 	bl	801a5e2 <USBD_LL_PrepareReceive>
  }

  return 0;
 80164a6:	2300      	movs	r3, #0
}
 80164a8:	4618      	mov	r0, r3
 80164aa:	3710      	adds	r7, #16
 80164ac:	46bd      	mov	sp, r7
 80164ae:	bdb0      	pop	{r4, r5, r7, pc}

080164b0 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80164b0:	b480      	push	{r7}
 80164b2:	b087      	sub	sp, #28
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	60f8      	str	r0, [r7, #12]
 80164b8:	60b9      	str	r1, [r7, #8]
 80164ba:	4613      	mov	r3, r2
 80164bc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80164be:	88fb      	ldrh	r3, [r7, #6]
 80164c0:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 80164c2:	8afa      	ldrh	r2, [r7, #22]
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80164c8:	e00b      	b.n	80164e2 <SCSI_UpdateBotData+0x32>
  {
    len--;
 80164ca:	8afb      	ldrh	r3, [r7, #22]
 80164cc:	3b01      	subs	r3, #1
 80164ce:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80164d0:	8afb      	ldrh	r3, [r7, #22]
 80164d2:	68ba      	ldr	r2, [r7, #8]
 80164d4:	441a      	add	r2, r3
 80164d6:	8afb      	ldrh	r3, [r7, #22]
 80164d8:	7811      	ldrb	r1, [r2, #0]
 80164da:	68fa      	ldr	r2, [r7, #12]
 80164dc:	4413      	add	r3, r2
 80164de:	460a      	mov	r2, r1
 80164e0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80164e2:	8afb      	ldrh	r3, [r7, #22]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d1f0      	bne.n	80164ca <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 80164e8:	2300      	movs	r3, #0
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	371c      	adds	r7, #28
 80164ee:	46bd      	mov	sp, r7
 80164f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f4:	4770      	bx	lr

080164f6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80164f6:	b580      	push	{r7, lr}
 80164f8:	b086      	sub	sp, #24
 80164fa:	af00      	add	r7, sp, #0
 80164fc:	60f8      	str	r0, [r7, #12]
 80164fe:	60b9      	str	r1, [r7, #8]
 8016500:	4613      	mov	r3, r2
 8016502:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d101      	bne.n	801650e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801650a:	2303      	movs	r3, #3
 801650c:	e025      	b.n	801655a <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016514:	2b00      	cmp	r3, #0
 8016516:	d003      	beq.n	8016520 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	2200      	movs	r2, #0
 801651c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8016526:	2b00      	cmp	r3, #0
 8016528:	d003      	beq.n	8016532 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	2200      	movs	r2, #0
 801652e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016532:	68bb      	ldr	r3, [r7, #8]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d003      	beq.n	8016540 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	68ba      	ldr	r2, [r7, #8]
 801653c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	2201      	movs	r2, #1
 8016544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	79fa      	ldrb	r2, [r7, #7]
 801654c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801654e:	68f8      	ldr	r0, [r7, #12]
 8016550:	f003 fece 	bl	801a2f0 <USBD_LL_Init>
 8016554:	4603      	mov	r3, r0
 8016556:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016558:	7dfb      	ldrb	r3, [r7, #23]
}
 801655a:	4618      	mov	r0, r3
 801655c:	3718      	adds	r7, #24
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}

08016562 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016562:	b580      	push	{r7, lr}
 8016564:	b084      	sub	sp, #16
 8016566:	af00      	add	r7, sp, #0
 8016568:	6078      	str	r0, [r7, #4]
 801656a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801656c:	2300      	movs	r3, #0
 801656e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016570:	683b      	ldr	r3, [r7, #0]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d101      	bne.n	801657a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8016576:	2303      	movs	r3, #3
 8016578:	e010      	b.n	801659c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	683a      	ldr	r2, [r7, #0]
 801657e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801658a:	f107 020e 	add.w	r2, r7, #14
 801658e:	4610      	mov	r0, r2
 8016590:	4798      	blx	r3
 8016592:	4602      	mov	r2, r0
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 801659a:	2300      	movs	r3, #0
}
 801659c:	4618      	mov	r0, r3
 801659e:	3710      	adds	r7, #16
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}

080165a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80165a4:	b580      	push	{r7, lr}
 80165a6:	b082      	sub	sp, #8
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80165ac:	6878      	ldr	r0, [r7, #4]
 80165ae:	f003 feef 	bl	801a390 <USBD_LL_Start>
 80165b2:	4603      	mov	r3, r0
}
 80165b4:	4618      	mov	r0, r3
 80165b6:	3708      	adds	r7, #8
 80165b8:	46bd      	mov	sp, r7
 80165ba:	bd80      	pop	{r7, pc}

080165bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80165bc:	b480      	push	{r7}
 80165be:	b083      	sub	sp, #12
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80165c4:	2300      	movs	r3, #0
}
 80165c6:	4618      	mov	r0, r3
 80165c8:	370c      	adds	r7, #12
 80165ca:	46bd      	mov	sp, r7
 80165cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d0:	4770      	bx	lr

080165d2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80165d2:	b580      	push	{r7, lr}
 80165d4:	b084      	sub	sp, #16
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	6078      	str	r0, [r7, #4]
 80165da:	460b      	mov	r3, r1
 80165dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80165de:	2303      	movs	r3, #3
 80165e0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d009      	beq.n	8016600 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	78fa      	ldrb	r2, [r7, #3]
 80165f6:	4611      	mov	r1, r2
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	4798      	blx	r3
 80165fc:	4603      	mov	r3, r0
 80165fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8016600:	7bfb      	ldrb	r3, [r7, #15]
}
 8016602:	4618      	mov	r0, r3
 8016604:	3710      	adds	r7, #16
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}

0801660a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801660a:	b580      	push	{r7, lr}
 801660c:	b082      	sub	sp, #8
 801660e:	af00      	add	r7, sp, #0
 8016610:	6078      	str	r0, [r7, #4]
 8016612:	460b      	mov	r3, r1
 8016614:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801661c:	2b00      	cmp	r3, #0
 801661e:	d007      	beq.n	8016630 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016626:	685b      	ldr	r3, [r3, #4]
 8016628:	78fa      	ldrb	r2, [r7, #3]
 801662a:	4611      	mov	r1, r2
 801662c:	6878      	ldr	r0, [r7, #4]
 801662e:	4798      	blx	r3
  }

  return USBD_OK;
 8016630:	2300      	movs	r3, #0
}
 8016632:	4618      	mov	r0, r3
 8016634:	3708      	adds	r7, #8
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}

0801663a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801663a:	b580      	push	{r7, lr}
 801663c:	b084      	sub	sp, #16
 801663e:	af00      	add	r7, sp, #0
 8016640:	6078      	str	r0, [r7, #4]
 8016642:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801664a:	6839      	ldr	r1, [r7, #0]
 801664c:	4618      	mov	r0, r3
 801664e:	f000 ff2b 	bl	80174a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	2201      	movs	r2, #1
 8016656:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016660:	461a      	mov	r2, r3
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801666e:	f003 031f 	and.w	r3, r3, #31
 8016672:	2b01      	cmp	r3, #1
 8016674:	d00e      	beq.n	8016694 <USBD_LL_SetupStage+0x5a>
 8016676:	2b01      	cmp	r3, #1
 8016678:	d302      	bcc.n	8016680 <USBD_LL_SetupStage+0x46>
 801667a:	2b02      	cmp	r3, #2
 801667c:	d014      	beq.n	80166a8 <USBD_LL_SetupStage+0x6e>
 801667e:	e01d      	b.n	80166bc <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016686:	4619      	mov	r1, r3
 8016688:	6878      	ldr	r0, [r7, #4]
 801668a:	f000 fa17 	bl	8016abc <USBD_StdDevReq>
 801668e:	4603      	mov	r3, r0
 8016690:	73fb      	strb	r3, [r7, #15]
      break;
 8016692:	e020      	b.n	80166d6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801669a:	4619      	mov	r1, r3
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f000 fa7b 	bl	8016b98 <USBD_StdItfReq>
 80166a2:	4603      	mov	r3, r0
 80166a4:	73fb      	strb	r3, [r7, #15]
      break;
 80166a6:	e016      	b.n	80166d6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80166ae:	4619      	mov	r1, r3
 80166b0:	6878      	ldr	r0, [r7, #4]
 80166b2:	f000 fab7 	bl	8016c24 <USBD_StdEPReq>
 80166b6:	4603      	mov	r3, r0
 80166b8:	73fb      	strb	r3, [r7, #15]
      break;
 80166ba:	e00c      	b.n	80166d6 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80166c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80166c6:	b2db      	uxtb	r3, r3
 80166c8:	4619      	mov	r1, r3
 80166ca:	6878      	ldr	r0, [r7, #4]
 80166cc:	f003 fedf 	bl	801a48e <USBD_LL_StallEP>
 80166d0:	4603      	mov	r3, r0
 80166d2:	73fb      	strb	r3, [r7, #15]
      break;
 80166d4:	bf00      	nop
  }

  return ret;
 80166d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80166d8:	4618      	mov	r0, r3
 80166da:	3710      	adds	r7, #16
 80166dc:	46bd      	mov	sp, r7
 80166de:	bd80      	pop	{r7, pc}

080166e0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b086      	sub	sp, #24
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	60f8      	str	r0, [r7, #12]
 80166e8:	460b      	mov	r3, r1
 80166ea:	607a      	str	r2, [r7, #4]
 80166ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80166ee:	7afb      	ldrb	r3, [r7, #11]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d137      	bne.n	8016764 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80166fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016702:	2b03      	cmp	r3, #3
 8016704:	d14a      	bne.n	801679c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8016706:	693b      	ldr	r3, [r7, #16]
 8016708:	689a      	ldr	r2, [r3, #8]
 801670a:	693b      	ldr	r3, [r7, #16]
 801670c:	68db      	ldr	r3, [r3, #12]
 801670e:	429a      	cmp	r2, r3
 8016710:	d913      	bls.n	801673a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016712:	693b      	ldr	r3, [r7, #16]
 8016714:	689a      	ldr	r2, [r3, #8]
 8016716:	693b      	ldr	r3, [r7, #16]
 8016718:	68db      	ldr	r3, [r3, #12]
 801671a:	1ad2      	subs	r2, r2, r3
 801671c:	693b      	ldr	r3, [r7, #16]
 801671e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016720:	693b      	ldr	r3, [r7, #16]
 8016722:	68da      	ldr	r2, [r3, #12]
 8016724:	693b      	ldr	r3, [r7, #16]
 8016726:	689b      	ldr	r3, [r3, #8]
 8016728:	4293      	cmp	r3, r2
 801672a:	bf28      	it	cs
 801672c:	4613      	movcs	r3, r2
 801672e:	461a      	mov	r2, r3
 8016730:	6879      	ldr	r1, [r7, #4]
 8016732:	68f8      	ldr	r0, [r7, #12]
 8016734:	f000 ff8f 	bl	8017656 <USBD_CtlContinueRx>
 8016738:	e030      	b.n	801679c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016740:	691b      	ldr	r3, [r3, #16]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d00a      	beq.n	801675c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801674c:	2b03      	cmp	r3, #3
 801674e:	d105      	bne.n	801675c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016756:	691b      	ldr	r3, [r3, #16]
 8016758:	68f8      	ldr	r0, [r7, #12]
 801675a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 801675c:	68f8      	ldr	r0, [r7, #12]
 801675e:	f000 ff8b 	bl	8017678 <USBD_CtlSendStatus>
 8016762:	e01b      	b.n	801679c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801676a:	699b      	ldr	r3, [r3, #24]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d013      	beq.n	8016798 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8016776:	2b03      	cmp	r3, #3
 8016778:	d10e      	bne.n	8016798 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016780:	699b      	ldr	r3, [r3, #24]
 8016782:	7afa      	ldrb	r2, [r7, #11]
 8016784:	4611      	mov	r1, r2
 8016786:	68f8      	ldr	r0, [r7, #12]
 8016788:	4798      	blx	r3
 801678a:	4603      	mov	r3, r0
 801678c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 801678e:	7dfb      	ldrb	r3, [r7, #23]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d003      	beq.n	801679c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8016794:	7dfb      	ldrb	r3, [r7, #23]
 8016796:	e002      	b.n	801679e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8016798:	2303      	movs	r3, #3
 801679a:	e000      	b.n	801679e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 801679c:	2300      	movs	r3, #0
}
 801679e:	4618      	mov	r0, r3
 80167a0:	3718      	adds	r7, #24
 80167a2:	46bd      	mov	sp, r7
 80167a4:	bd80      	pop	{r7, pc}

080167a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80167a6:	b580      	push	{r7, lr}
 80167a8:	b086      	sub	sp, #24
 80167aa:	af00      	add	r7, sp, #0
 80167ac:	60f8      	str	r0, [r7, #12]
 80167ae:	460b      	mov	r3, r1
 80167b0:	607a      	str	r2, [r7, #4]
 80167b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80167b4:	7afb      	ldrb	r3, [r7, #11]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d16a      	bne.n	8016890 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	3314      	adds	r3, #20
 80167be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80167c6:	2b02      	cmp	r3, #2
 80167c8:	d155      	bne.n	8016876 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80167ca:	693b      	ldr	r3, [r7, #16]
 80167cc:	689a      	ldr	r2, [r3, #8]
 80167ce:	693b      	ldr	r3, [r7, #16]
 80167d0:	68db      	ldr	r3, [r3, #12]
 80167d2:	429a      	cmp	r2, r3
 80167d4:	d914      	bls.n	8016800 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80167d6:	693b      	ldr	r3, [r7, #16]
 80167d8:	689a      	ldr	r2, [r3, #8]
 80167da:	693b      	ldr	r3, [r7, #16]
 80167dc:	68db      	ldr	r3, [r3, #12]
 80167de:	1ad2      	subs	r2, r2, r3
 80167e0:	693b      	ldr	r3, [r7, #16]
 80167e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80167e4:	693b      	ldr	r3, [r7, #16]
 80167e6:	689b      	ldr	r3, [r3, #8]
 80167e8:	461a      	mov	r2, r3
 80167ea:	6879      	ldr	r1, [r7, #4]
 80167ec:	68f8      	ldr	r0, [r7, #12]
 80167ee:	f000 ff21 	bl	8017634 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80167f2:	2300      	movs	r3, #0
 80167f4:	2200      	movs	r2, #0
 80167f6:	2100      	movs	r1, #0
 80167f8:	68f8      	ldr	r0, [r7, #12]
 80167fa:	f003 fef2 	bl	801a5e2 <USBD_LL_PrepareReceive>
 80167fe:	e03a      	b.n	8016876 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016800:	693b      	ldr	r3, [r7, #16]
 8016802:	68da      	ldr	r2, [r3, #12]
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	689b      	ldr	r3, [r3, #8]
 8016808:	429a      	cmp	r2, r3
 801680a:	d11c      	bne.n	8016846 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801680c:	693b      	ldr	r3, [r7, #16]
 801680e:	685a      	ldr	r2, [r3, #4]
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016814:	429a      	cmp	r2, r3
 8016816:	d316      	bcc.n	8016846 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	685a      	ldr	r2, [r3, #4]
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016822:	429a      	cmp	r2, r3
 8016824:	d20f      	bcs.n	8016846 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016826:	2200      	movs	r2, #0
 8016828:	2100      	movs	r1, #0
 801682a:	68f8      	ldr	r0, [r7, #12]
 801682c:	f000 ff02 	bl	8017634 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	2200      	movs	r2, #0
 8016834:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016838:	2300      	movs	r3, #0
 801683a:	2200      	movs	r2, #0
 801683c:	2100      	movs	r1, #0
 801683e:	68f8      	ldr	r0, [r7, #12]
 8016840:	f003 fecf 	bl	801a5e2 <USBD_LL_PrepareReceive>
 8016844:	e017      	b.n	8016876 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801684c:	68db      	ldr	r3, [r3, #12]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d00a      	beq.n	8016868 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8016858:	2b03      	cmp	r3, #3
 801685a:	d105      	bne.n	8016868 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016862:	68db      	ldr	r3, [r3, #12]
 8016864:	68f8      	ldr	r0, [r7, #12]
 8016866:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016868:	2180      	movs	r1, #128	; 0x80
 801686a:	68f8      	ldr	r0, [r7, #12]
 801686c:	f003 fe0f 	bl	801a48e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016870:	68f8      	ldr	r0, [r7, #12]
 8016872:	f000 ff14 	bl	801769e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801687c:	2b01      	cmp	r3, #1
 801687e:	d123      	bne.n	80168c8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8016880:	68f8      	ldr	r0, [r7, #12]
 8016882:	f7ff fe9b 	bl	80165bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	2200      	movs	r2, #0
 801688a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801688e:	e01b      	b.n	80168c8 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016896:	695b      	ldr	r3, [r3, #20]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d013      	beq.n	80168c4 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80168a2:	2b03      	cmp	r3, #3
 80168a4:	d10e      	bne.n	80168c4 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168ac:	695b      	ldr	r3, [r3, #20]
 80168ae:	7afa      	ldrb	r2, [r7, #11]
 80168b0:	4611      	mov	r1, r2
 80168b2:	68f8      	ldr	r0, [r7, #12]
 80168b4:	4798      	blx	r3
 80168b6:	4603      	mov	r3, r0
 80168b8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80168ba:	7dfb      	ldrb	r3, [r7, #23]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d003      	beq.n	80168c8 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80168c0:	7dfb      	ldrb	r3, [r7, #23]
 80168c2:	e002      	b.n	80168ca <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80168c4:	2303      	movs	r3, #3
 80168c6:	e000      	b.n	80168ca <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80168c8:	2300      	movs	r3, #0
}
 80168ca:	4618      	mov	r0, r3
 80168cc:	3718      	adds	r7, #24
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd80      	pop	{r7, pc}

080168d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80168d2:	b580      	push	{r7, lr}
 80168d4:	b082      	sub	sp, #8
 80168d6:	af00      	add	r7, sp, #0
 80168d8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	2201      	movs	r2, #1
 80168de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2200      	movs	r2, #0
 80168e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	2200      	movs	r2, #0
 80168ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2200      	movs	r2, #0
 80168f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d009      	beq.n	8016916 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016908:	685b      	ldr	r3, [r3, #4]
 801690a:	687a      	ldr	r2, [r7, #4]
 801690c:	6852      	ldr	r2, [r2, #4]
 801690e:	b2d2      	uxtb	r2, r2
 8016910:	4611      	mov	r1, r2
 8016912:	6878      	ldr	r0, [r7, #4]
 8016914:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016916:	2340      	movs	r3, #64	; 0x40
 8016918:	2200      	movs	r2, #0
 801691a:	2100      	movs	r1, #0
 801691c:	6878      	ldr	r0, [r7, #4]
 801691e:	f003 fd52 	bl	801a3c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	2201      	movs	r2, #1
 8016926:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2240      	movs	r2, #64	; 0x40
 801692e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016932:	2340      	movs	r3, #64	; 0x40
 8016934:	2200      	movs	r2, #0
 8016936:	2180      	movs	r1, #128	; 0x80
 8016938:	6878      	ldr	r0, [r7, #4]
 801693a:	f003 fd44 	bl	801a3c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	2201      	movs	r2, #1
 8016942:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	2240      	movs	r2, #64	; 0x40
 8016948:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801694a:	2300      	movs	r3, #0
}
 801694c:	4618      	mov	r0, r3
 801694e:	3708      	adds	r7, #8
 8016950:	46bd      	mov	sp, r7
 8016952:	bd80      	pop	{r7, pc}

08016954 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016954:	b480      	push	{r7}
 8016956:	b083      	sub	sp, #12
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
 801695c:	460b      	mov	r3, r1
 801695e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	78fa      	ldrb	r2, [r7, #3]
 8016964:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016966:	2300      	movs	r3, #0
}
 8016968:	4618      	mov	r0, r3
 801696a:	370c      	adds	r7, #12
 801696c:	46bd      	mov	sp, r7
 801696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016972:	4770      	bx	lr

08016974 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016974:	b480      	push	{r7}
 8016976:	b083      	sub	sp, #12
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2204      	movs	r2, #4
 801698c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016990:	2300      	movs	r3, #0
}
 8016992:	4618      	mov	r0, r3
 8016994:	370c      	adds	r7, #12
 8016996:	46bd      	mov	sp, r7
 8016998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699c:	4770      	bx	lr

0801699e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801699e:	b480      	push	{r7}
 80169a0:	b083      	sub	sp, #12
 80169a2:	af00      	add	r7, sp, #0
 80169a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169ac:	2b04      	cmp	r3, #4
 80169ae:	d105      	bne.n	80169bc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80169bc:	2300      	movs	r3, #0
}
 80169be:	4618      	mov	r0, r3
 80169c0:	370c      	adds	r7, #12
 80169c2:	46bd      	mov	sp, r7
 80169c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c8:	4770      	bx	lr

080169ca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80169ca:	b580      	push	{r7, lr}
 80169cc:	b082      	sub	sp, #8
 80169ce:	af00      	add	r7, sp, #0
 80169d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169d8:	2b03      	cmp	r3, #3
 80169da:	d10b      	bne.n	80169f4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80169e2:	69db      	ldr	r3, [r3, #28]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d005      	beq.n	80169f4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80169ee:	69db      	ldr	r3, [r3, #28]
 80169f0:	6878      	ldr	r0, [r7, #4]
 80169f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80169f4:	2300      	movs	r3, #0
}
 80169f6:	4618      	mov	r0, r3
 80169f8:	3708      	adds	r7, #8
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bd80      	pop	{r7, pc}

080169fe <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80169fe:	b480      	push	{r7}
 8016a00:	b083      	sub	sp, #12
 8016a02:	af00      	add	r7, sp, #0
 8016a04:	6078      	str	r0, [r7, #4]
 8016a06:	460b      	mov	r3, r1
 8016a08:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8016a0a:	2300      	movs	r3, #0
}
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	370c      	adds	r7, #12
 8016a10:	46bd      	mov	sp, r7
 8016a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a16:	4770      	bx	lr

08016a18 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016a18:	b480      	push	{r7}
 8016a1a:	b083      	sub	sp, #12
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
 8016a20:	460b      	mov	r3, r1
 8016a22:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8016a24:	2300      	movs	r3, #0
}
 8016a26:	4618      	mov	r0, r3
 8016a28:	370c      	adds	r7, #12
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a30:	4770      	bx	lr

08016a32 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016a32:	b480      	push	{r7}
 8016a34:	b083      	sub	sp, #12
 8016a36:	af00      	add	r7, sp, #0
 8016a38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016a3a:	2300      	movs	r3, #0
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	370c      	adds	r7, #12
 8016a40:	46bd      	mov	sp, r7
 8016a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a46:	4770      	bx	lr

08016a48 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b082      	sub	sp, #8
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	2201      	movs	r2, #1
 8016a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d009      	beq.n	8016a76 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	687a      	ldr	r2, [r7, #4]
 8016a6c:	6852      	ldr	r2, [r2, #4]
 8016a6e:	b2d2      	uxtb	r2, r2
 8016a70:	4611      	mov	r1, r2
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	4798      	blx	r3
  }

  return USBD_OK;
 8016a76:	2300      	movs	r3, #0
}
 8016a78:	4618      	mov	r0, r3
 8016a7a:	3708      	adds	r7, #8
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}

08016a80 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016a80:	b480      	push	{r7}
 8016a82:	b087      	sub	sp, #28
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016a8c:	697b      	ldr	r3, [r7, #20]
 8016a8e:	781b      	ldrb	r3, [r3, #0]
 8016a90:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	3301      	adds	r3, #1
 8016a96:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016a98:	697b      	ldr	r3, [r7, #20]
 8016a9a:	781b      	ldrb	r3, [r3, #0]
 8016a9c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016a9e:	8a3b      	ldrh	r3, [r7, #16]
 8016aa0:	021b      	lsls	r3, r3, #8
 8016aa2:	b21a      	sxth	r2, r3
 8016aa4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016aa8:	4313      	orrs	r3, r2
 8016aaa:	b21b      	sxth	r3, r3
 8016aac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016aae:	89fb      	ldrh	r3, [r7, #14]
}
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	371c      	adds	r7, #28
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aba:	4770      	bx	lr

08016abc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b084      	sub	sp, #16
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
 8016ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016aca:	683b      	ldr	r3, [r7, #0]
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016ad2:	2b20      	cmp	r3, #32
 8016ad4:	d004      	beq.n	8016ae0 <USBD_StdDevReq+0x24>
 8016ad6:	2b40      	cmp	r3, #64	; 0x40
 8016ad8:	d002      	beq.n	8016ae0 <USBD_StdDevReq+0x24>
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d00a      	beq.n	8016af4 <USBD_StdDevReq+0x38>
 8016ade:	e050      	b.n	8016b82 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ae6:	689b      	ldr	r3, [r3, #8]
 8016ae8:	6839      	ldr	r1, [r7, #0]
 8016aea:	6878      	ldr	r0, [r7, #4]
 8016aec:	4798      	blx	r3
 8016aee:	4603      	mov	r3, r0
 8016af0:	73fb      	strb	r3, [r7, #15]
    break;
 8016af2:	e04b      	b.n	8016b8c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8016af4:	683b      	ldr	r3, [r7, #0]
 8016af6:	785b      	ldrb	r3, [r3, #1]
 8016af8:	2b09      	cmp	r3, #9
 8016afa:	d83c      	bhi.n	8016b76 <USBD_StdDevReq+0xba>
 8016afc:	a201      	add	r2, pc, #4	; (adr r2, 8016b04 <USBD_StdDevReq+0x48>)
 8016afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b02:	bf00      	nop
 8016b04:	08016b59 	.word	0x08016b59
 8016b08:	08016b6d 	.word	0x08016b6d
 8016b0c:	08016b77 	.word	0x08016b77
 8016b10:	08016b63 	.word	0x08016b63
 8016b14:	08016b77 	.word	0x08016b77
 8016b18:	08016b37 	.word	0x08016b37
 8016b1c:	08016b2d 	.word	0x08016b2d
 8016b20:	08016b77 	.word	0x08016b77
 8016b24:	08016b4f 	.word	0x08016b4f
 8016b28:	08016b41 	.word	0x08016b41
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8016b2c:	6839      	ldr	r1, [r7, #0]
 8016b2e:	6878      	ldr	r0, [r7, #4]
 8016b30:	f000 f9ce 	bl	8016ed0 <USBD_GetDescriptor>
      break;
 8016b34:	e024      	b.n	8016b80 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8016b36:	6839      	ldr	r1, [r7, #0]
 8016b38:	6878      	ldr	r0, [r7, #4]
 8016b3a:	f000 fb33 	bl	80171a4 <USBD_SetAddress>
      break;
 8016b3e:	e01f      	b.n	8016b80 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8016b40:	6839      	ldr	r1, [r7, #0]
 8016b42:	6878      	ldr	r0, [r7, #4]
 8016b44:	f000 fb70 	bl	8017228 <USBD_SetConfig>
 8016b48:	4603      	mov	r3, r0
 8016b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8016b4c:	e018      	b.n	8016b80 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8016b4e:	6839      	ldr	r1, [r7, #0]
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f000 fc0d 	bl	8017370 <USBD_GetConfig>
      break;
 8016b56:	e013      	b.n	8016b80 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8016b58:	6839      	ldr	r1, [r7, #0]
 8016b5a:	6878      	ldr	r0, [r7, #4]
 8016b5c:	f000 fc3c 	bl	80173d8 <USBD_GetStatus>
      break;
 8016b60:	e00e      	b.n	8016b80 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8016b62:	6839      	ldr	r1, [r7, #0]
 8016b64:	6878      	ldr	r0, [r7, #4]
 8016b66:	f000 fc6a 	bl	801743e <USBD_SetFeature>
      break;
 8016b6a:	e009      	b.n	8016b80 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8016b6c:	6839      	ldr	r1, [r7, #0]
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f000 fc79 	bl	8017466 <USBD_ClrFeature>
      break;
 8016b74:	e004      	b.n	8016b80 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8016b76:	6839      	ldr	r1, [r7, #0]
 8016b78:	6878      	ldr	r0, [r7, #4]
 8016b7a:	f000 fccf 	bl	801751c <USBD_CtlError>
      break;
 8016b7e:	bf00      	nop
    }
    break;
 8016b80:	e004      	b.n	8016b8c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8016b82:	6839      	ldr	r1, [r7, #0]
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f000 fcc9 	bl	801751c <USBD_CtlError>
    break;
 8016b8a:	bf00      	nop
  }

  return ret;
 8016b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	3710      	adds	r7, #16
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}
 8016b96:	bf00      	nop

08016b98 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b084      	sub	sp, #16
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
 8016ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016ba6:	683b      	ldr	r3, [r7, #0]
 8016ba8:	781b      	ldrb	r3, [r3, #0]
 8016baa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016bae:	2b20      	cmp	r3, #32
 8016bb0:	d003      	beq.n	8016bba <USBD_StdItfReq+0x22>
 8016bb2:	2b40      	cmp	r3, #64	; 0x40
 8016bb4:	d001      	beq.n	8016bba <USBD_StdItfReq+0x22>
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d12a      	bne.n	8016c10 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016bc0:	3b01      	subs	r3, #1
 8016bc2:	2b02      	cmp	r3, #2
 8016bc4:	d81d      	bhi.n	8016c02 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	889b      	ldrh	r3, [r3, #4]
 8016bca:	b2db      	uxtb	r3, r3
 8016bcc:	2b01      	cmp	r3, #1
 8016bce:	d813      	bhi.n	8016bf8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bd6:	689b      	ldr	r3, [r3, #8]
 8016bd8:	6839      	ldr	r1, [r7, #0]
 8016bda:	6878      	ldr	r0, [r7, #4]
 8016bdc:	4798      	blx	r3
 8016bde:	4603      	mov	r3, r0
 8016be0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	88db      	ldrh	r3, [r3, #6]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d110      	bne.n	8016c0c <USBD_StdItfReq+0x74>
 8016bea:	7bfb      	ldrb	r3, [r7, #15]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d10d      	bne.n	8016c0c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8016bf0:	6878      	ldr	r0, [r7, #4]
 8016bf2:	f000 fd41 	bl	8017678 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8016bf6:	e009      	b.n	8016c0c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8016bf8:	6839      	ldr	r1, [r7, #0]
 8016bfa:	6878      	ldr	r0, [r7, #4]
 8016bfc:	f000 fc8e 	bl	801751c <USBD_CtlError>
      break;
 8016c00:	e004      	b.n	8016c0c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8016c02:	6839      	ldr	r1, [r7, #0]
 8016c04:	6878      	ldr	r0, [r7, #4]
 8016c06:	f000 fc89 	bl	801751c <USBD_CtlError>
      break;
 8016c0a:	e000      	b.n	8016c0e <USBD_StdItfReq+0x76>
      break;
 8016c0c:	bf00      	nop
    }
    break;
 8016c0e:	e004      	b.n	8016c1a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8016c10:	6839      	ldr	r1, [r7, #0]
 8016c12:	6878      	ldr	r0, [r7, #4]
 8016c14:	f000 fc82 	bl	801751c <USBD_CtlError>
    break;
 8016c18:	bf00      	nop
  }

  return ret;
 8016c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	3710      	adds	r7, #16
 8016c20:	46bd      	mov	sp, r7
 8016c22:	bd80      	pop	{r7, pc}

08016c24 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b084      	sub	sp, #16
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
 8016c2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8016c2e:	2300      	movs	r3, #0
 8016c30:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8016c32:	683b      	ldr	r3, [r7, #0]
 8016c34:	889b      	ldrh	r3, [r3, #4]
 8016c36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	781b      	ldrb	r3, [r3, #0]
 8016c3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016c40:	2b20      	cmp	r3, #32
 8016c42:	d004      	beq.n	8016c4e <USBD_StdEPReq+0x2a>
 8016c44:	2b40      	cmp	r3, #64	; 0x40
 8016c46:	d002      	beq.n	8016c4e <USBD_StdEPReq+0x2a>
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d00a      	beq.n	8016c62 <USBD_StdEPReq+0x3e>
 8016c4c:	e135      	b.n	8016eba <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c54:	689b      	ldr	r3, [r3, #8]
 8016c56:	6839      	ldr	r1, [r7, #0]
 8016c58:	6878      	ldr	r0, [r7, #4]
 8016c5a:	4798      	blx	r3
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8016c60:	e130      	b.n	8016ec4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8016c62:	683b      	ldr	r3, [r7, #0]
 8016c64:	785b      	ldrb	r3, [r3, #1]
 8016c66:	2b01      	cmp	r3, #1
 8016c68:	d03e      	beq.n	8016ce8 <USBD_StdEPReq+0xc4>
 8016c6a:	2b03      	cmp	r3, #3
 8016c6c:	d002      	beq.n	8016c74 <USBD_StdEPReq+0x50>
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d077      	beq.n	8016d62 <USBD_StdEPReq+0x13e>
 8016c72:	e11c      	b.n	8016eae <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c7a:	2b02      	cmp	r3, #2
 8016c7c:	d002      	beq.n	8016c84 <USBD_StdEPReq+0x60>
 8016c7e:	2b03      	cmp	r3, #3
 8016c80:	d015      	beq.n	8016cae <USBD_StdEPReq+0x8a>
 8016c82:	e02b      	b.n	8016cdc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016c84:	7bbb      	ldrb	r3, [r7, #14]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d00c      	beq.n	8016ca4 <USBD_StdEPReq+0x80>
 8016c8a:	7bbb      	ldrb	r3, [r7, #14]
 8016c8c:	2b80      	cmp	r3, #128	; 0x80
 8016c8e:	d009      	beq.n	8016ca4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8016c90:	7bbb      	ldrb	r3, [r7, #14]
 8016c92:	4619      	mov	r1, r3
 8016c94:	6878      	ldr	r0, [r7, #4]
 8016c96:	f003 fbfa 	bl	801a48e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016c9a:	2180      	movs	r1, #128	; 0x80
 8016c9c:	6878      	ldr	r0, [r7, #4]
 8016c9e:	f003 fbf6 	bl	801a48e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8016ca2:	e020      	b.n	8016ce6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8016ca4:	6839      	ldr	r1, [r7, #0]
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	f000 fc38 	bl	801751c <USBD_CtlError>
        break;
 8016cac:	e01b      	b.n	8016ce6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8016cae:	683b      	ldr	r3, [r7, #0]
 8016cb0:	885b      	ldrh	r3, [r3, #2]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d10e      	bne.n	8016cd4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016cb6:	7bbb      	ldrb	r3, [r7, #14]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d00b      	beq.n	8016cd4 <USBD_StdEPReq+0xb0>
 8016cbc:	7bbb      	ldrb	r3, [r7, #14]
 8016cbe:	2b80      	cmp	r3, #128	; 0x80
 8016cc0:	d008      	beq.n	8016cd4 <USBD_StdEPReq+0xb0>
 8016cc2:	683b      	ldr	r3, [r7, #0]
 8016cc4:	88db      	ldrh	r3, [r3, #6]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d104      	bne.n	8016cd4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8016cca:	7bbb      	ldrb	r3, [r7, #14]
 8016ccc:	4619      	mov	r1, r3
 8016cce:	6878      	ldr	r0, [r7, #4]
 8016cd0:	f003 fbdd 	bl	801a48e <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f000 fccf 	bl	8017678 <USBD_CtlSendStatus>

        break;
 8016cda:	e004      	b.n	8016ce6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8016cdc:	6839      	ldr	r1, [r7, #0]
 8016cde:	6878      	ldr	r0, [r7, #4]
 8016ce0:	f000 fc1c 	bl	801751c <USBD_CtlError>
        break;
 8016ce4:	bf00      	nop
      }
      break;
 8016ce6:	e0e7      	b.n	8016eb8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016cee:	2b02      	cmp	r3, #2
 8016cf0:	d002      	beq.n	8016cf8 <USBD_StdEPReq+0xd4>
 8016cf2:	2b03      	cmp	r3, #3
 8016cf4:	d015      	beq.n	8016d22 <USBD_StdEPReq+0xfe>
 8016cf6:	e02d      	b.n	8016d54 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016cf8:	7bbb      	ldrb	r3, [r7, #14]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d00c      	beq.n	8016d18 <USBD_StdEPReq+0xf4>
 8016cfe:	7bbb      	ldrb	r3, [r7, #14]
 8016d00:	2b80      	cmp	r3, #128	; 0x80
 8016d02:	d009      	beq.n	8016d18 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8016d04:	7bbb      	ldrb	r3, [r7, #14]
 8016d06:	4619      	mov	r1, r3
 8016d08:	6878      	ldr	r0, [r7, #4]
 8016d0a:	f003 fbc0 	bl	801a48e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016d0e:	2180      	movs	r1, #128	; 0x80
 8016d10:	6878      	ldr	r0, [r7, #4]
 8016d12:	f003 fbbc 	bl	801a48e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8016d16:	e023      	b.n	8016d60 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8016d18:	6839      	ldr	r1, [r7, #0]
 8016d1a:	6878      	ldr	r0, [r7, #4]
 8016d1c:	f000 fbfe 	bl	801751c <USBD_CtlError>
        break;
 8016d20:	e01e      	b.n	8016d60 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8016d22:	683b      	ldr	r3, [r7, #0]
 8016d24:	885b      	ldrh	r3, [r3, #2]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d119      	bne.n	8016d5e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8016d2a:	7bbb      	ldrb	r3, [r7, #14]
 8016d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d004      	beq.n	8016d3e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016d34:	7bbb      	ldrb	r3, [r7, #14]
 8016d36:	4619      	mov	r1, r3
 8016d38:	6878      	ldr	r0, [r7, #4]
 8016d3a:	f003 fbc7 	bl	801a4cc <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8016d3e:	6878      	ldr	r0, [r7, #4]
 8016d40:	f000 fc9a 	bl	8017678 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d4a:	689b      	ldr	r3, [r3, #8]
 8016d4c:	6839      	ldr	r1, [r7, #0]
 8016d4e:	6878      	ldr	r0, [r7, #4]
 8016d50:	4798      	blx	r3
        }
        break;
 8016d52:	e004      	b.n	8016d5e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8016d54:	6839      	ldr	r1, [r7, #0]
 8016d56:	6878      	ldr	r0, [r7, #4]
 8016d58:	f000 fbe0 	bl	801751c <USBD_CtlError>
        break;
 8016d5c:	e000      	b.n	8016d60 <USBD_StdEPReq+0x13c>
        break;
 8016d5e:	bf00      	nop
      }
      break;
 8016d60:	e0aa      	b.n	8016eb8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d68:	2b02      	cmp	r3, #2
 8016d6a:	d002      	beq.n	8016d72 <USBD_StdEPReq+0x14e>
 8016d6c:	2b03      	cmp	r3, #3
 8016d6e:	d032      	beq.n	8016dd6 <USBD_StdEPReq+0x1b2>
 8016d70:	e097      	b.n	8016ea2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016d72:	7bbb      	ldrb	r3, [r7, #14]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d007      	beq.n	8016d88 <USBD_StdEPReq+0x164>
 8016d78:	7bbb      	ldrb	r3, [r7, #14]
 8016d7a:	2b80      	cmp	r3, #128	; 0x80
 8016d7c:	d004      	beq.n	8016d88 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8016d7e:	6839      	ldr	r1, [r7, #0]
 8016d80:	6878      	ldr	r0, [r7, #4]
 8016d82:	f000 fbcb 	bl	801751c <USBD_CtlError>
          break;
 8016d86:	e091      	b.n	8016eac <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	da0b      	bge.n	8016da8 <USBD_StdEPReq+0x184>
 8016d90:	7bbb      	ldrb	r3, [r7, #14]
 8016d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016d96:	4613      	mov	r3, r2
 8016d98:	009b      	lsls	r3, r3, #2
 8016d9a:	4413      	add	r3, r2
 8016d9c:	009b      	lsls	r3, r3, #2
 8016d9e:	3310      	adds	r3, #16
 8016da0:	687a      	ldr	r2, [r7, #4]
 8016da2:	4413      	add	r3, r2
 8016da4:	3304      	adds	r3, #4
 8016da6:	e00b      	b.n	8016dc0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8016da8:	7bbb      	ldrb	r3, [r7, #14]
 8016daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016dae:	4613      	mov	r3, r2
 8016db0:	009b      	lsls	r3, r3, #2
 8016db2:	4413      	add	r3, r2
 8016db4:	009b      	lsls	r3, r3, #2
 8016db6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016dba:	687a      	ldr	r2, [r7, #4]
 8016dbc:	4413      	add	r3, r2
 8016dbe:	3304      	adds	r3, #4
 8016dc0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	2202      	movs	r2, #2
 8016dcc:	4619      	mov	r1, r3
 8016dce:	6878      	ldr	r0, [r7, #4]
 8016dd0:	f000 fc15 	bl	80175fe <USBD_CtlSendData>
        break;
 8016dd4:	e06a      	b.n	8016eac <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8016dd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	da11      	bge.n	8016e02 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016dde:	7bbb      	ldrb	r3, [r7, #14]
 8016de0:	f003 020f 	and.w	r2, r3, #15
 8016de4:	6879      	ldr	r1, [r7, #4]
 8016de6:	4613      	mov	r3, r2
 8016de8:	009b      	lsls	r3, r3, #2
 8016dea:	4413      	add	r3, r2
 8016dec:	009b      	lsls	r3, r3, #2
 8016dee:	440b      	add	r3, r1
 8016df0:	3324      	adds	r3, #36	; 0x24
 8016df2:	881b      	ldrh	r3, [r3, #0]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d117      	bne.n	8016e28 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8016df8:	6839      	ldr	r1, [r7, #0]
 8016dfa:	6878      	ldr	r0, [r7, #4]
 8016dfc:	f000 fb8e 	bl	801751c <USBD_CtlError>
            break;
 8016e00:	e054      	b.n	8016eac <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016e02:	7bbb      	ldrb	r3, [r7, #14]
 8016e04:	f003 020f 	and.w	r2, r3, #15
 8016e08:	6879      	ldr	r1, [r7, #4]
 8016e0a:	4613      	mov	r3, r2
 8016e0c:	009b      	lsls	r3, r3, #2
 8016e0e:	4413      	add	r3, r2
 8016e10:	009b      	lsls	r3, r3, #2
 8016e12:	440b      	add	r3, r1
 8016e14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016e18:	881b      	ldrh	r3, [r3, #0]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d104      	bne.n	8016e28 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8016e1e:	6839      	ldr	r1, [r7, #0]
 8016e20:	6878      	ldr	r0, [r7, #4]
 8016e22:	f000 fb7b 	bl	801751c <USBD_CtlError>
            break;
 8016e26:	e041      	b.n	8016eac <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	da0b      	bge.n	8016e48 <USBD_StdEPReq+0x224>
 8016e30:	7bbb      	ldrb	r3, [r7, #14]
 8016e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e36:	4613      	mov	r3, r2
 8016e38:	009b      	lsls	r3, r3, #2
 8016e3a:	4413      	add	r3, r2
 8016e3c:	009b      	lsls	r3, r3, #2
 8016e3e:	3310      	adds	r3, #16
 8016e40:	687a      	ldr	r2, [r7, #4]
 8016e42:	4413      	add	r3, r2
 8016e44:	3304      	adds	r3, #4
 8016e46:	e00b      	b.n	8016e60 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8016e48:	7bbb      	ldrb	r3, [r7, #14]
 8016e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016e4e:	4613      	mov	r3, r2
 8016e50:	009b      	lsls	r3, r3, #2
 8016e52:	4413      	add	r3, r2
 8016e54:	009b      	lsls	r3, r3, #2
 8016e56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016e5a:	687a      	ldr	r2, [r7, #4]
 8016e5c:	4413      	add	r3, r2
 8016e5e:	3304      	adds	r3, #4
 8016e60:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016e62:	7bbb      	ldrb	r3, [r7, #14]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d002      	beq.n	8016e6e <USBD_StdEPReq+0x24a>
 8016e68:	7bbb      	ldrb	r3, [r7, #14]
 8016e6a:	2b80      	cmp	r3, #128	; 0x80
 8016e6c:	d103      	bne.n	8016e76 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8016e6e:	68bb      	ldr	r3, [r7, #8]
 8016e70:	2200      	movs	r2, #0
 8016e72:	601a      	str	r2, [r3, #0]
 8016e74:	e00e      	b.n	8016e94 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016e76:	7bbb      	ldrb	r3, [r7, #14]
 8016e78:	4619      	mov	r1, r3
 8016e7a:	6878      	ldr	r0, [r7, #4]
 8016e7c:	f003 fb45 	bl	801a50a <USBD_LL_IsStallEP>
 8016e80:	4603      	mov	r3, r0
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d003      	beq.n	8016e8e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	2201      	movs	r2, #1
 8016e8a:	601a      	str	r2, [r3, #0]
 8016e8c:	e002      	b.n	8016e94 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8016e8e:	68bb      	ldr	r3, [r7, #8]
 8016e90:	2200      	movs	r2, #0
 8016e92:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016e94:	68bb      	ldr	r3, [r7, #8]
 8016e96:	2202      	movs	r2, #2
 8016e98:	4619      	mov	r1, r3
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f000 fbaf 	bl	80175fe <USBD_CtlSendData>
          break;
 8016ea0:	e004      	b.n	8016eac <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8016ea2:	6839      	ldr	r1, [r7, #0]
 8016ea4:	6878      	ldr	r0, [r7, #4]
 8016ea6:	f000 fb39 	bl	801751c <USBD_CtlError>
        break;
 8016eaa:	bf00      	nop
      }
      break;
 8016eac:	e004      	b.n	8016eb8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8016eae:	6839      	ldr	r1, [r7, #0]
 8016eb0:	6878      	ldr	r0, [r7, #4]
 8016eb2:	f000 fb33 	bl	801751c <USBD_CtlError>
      break;
 8016eb6:	bf00      	nop
    }
    break;
 8016eb8:	e004      	b.n	8016ec4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8016eba:	6839      	ldr	r1, [r7, #0]
 8016ebc:	6878      	ldr	r0, [r7, #4]
 8016ebe:	f000 fb2d 	bl	801751c <USBD_CtlError>
    break;
 8016ec2:	bf00      	nop
  }

  return ret;
 8016ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	3710      	adds	r7, #16
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	bd80      	pop	{r7, pc}
	...

08016ed0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b084      	sub	sp, #16
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
 8016ed8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016eda:	2300      	movs	r3, #0
 8016edc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016ee6:	683b      	ldr	r3, [r7, #0]
 8016ee8:	885b      	ldrh	r3, [r3, #2]
 8016eea:	0a1b      	lsrs	r3, r3, #8
 8016eec:	b29b      	uxth	r3, r3
 8016eee:	3b01      	subs	r3, #1
 8016ef0:	2b06      	cmp	r3, #6
 8016ef2:	f200 8128 	bhi.w	8017146 <USBD_GetDescriptor+0x276>
 8016ef6:	a201      	add	r2, pc, #4	; (adr r2, 8016efc <USBD_GetDescriptor+0x2c>)
 8016ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016efc:	08016f19 	.word	0x08016f19
 8016f00:	08016f31 	.word	0x08016f31
 8016f04:	08016f71 	.word	0x08016f71
 8016f08:	08017147 	.word	0x08017147
 8016f0c:	08017147 	.word	0x08017147
 8016f10:	080170e7 	.word	0x080170e7
 8016f14:	08017113 	.word	0x08017113
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	687a      	ldr	r2, [r7, #4]
 8016f22:	7c12      	ldrb	r2, [r2, #16]
 8016f24:	f107 0108 	add.w	r1, r7, #8
 8016f28:	4610      	mov	r0, r2
 8016f2a:	4798      	blx	r3
 8016f2c:	60f8      	str	r0, [r7, #12]
    break;
 8016f2e:	e112      	b.n	8017156 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	7c1b      	ldrb	r3, [r3, #16]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d10d      	bne.n	8016f54 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f40:	f107 0208 	add.w	r2, r7, #8
 8016f44:	4610      	mov	r0, r2
 8016f46:	4798      	blx	r3
 8016f48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	3301      	adds	r3, #1
 8016f4e:	2202      	movs	r2, #2
 8016f50:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8016f52:	e100      	b.n	8017156 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f5c:	f107 0208 	add.w	r2, r7, #8
 8016f60:	4610      	mov	r0, r2
 8016f62:	4798      	blx	r3
 8016f64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	3301      	adds	r3, #1
 8016f6a:	2202      	movs	r2, #2
 8016f6c:	701a      	strb	r2, [r3, #0]
    break;
 8016f6e:	e0f2      	b.n	8017156 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	885b      	ldrh	r3, [r3, #2]
 8016f74:	b2db      	uxtb	r3, r3
 8016f76:	2b05      	cmp	r3, #5
 8016f78:	f200 80ac 	bhi.w	80170d4 <USBD_GetDescriptor+0x204>
 8016f7c:	a201      	add	r2, pc, #4	; (adr r2, 8016f84 <USBD_GetDescriptor+0xb4>)
 8016f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f82:	bf00      	nop
 8016f84:	08016f9d 	.word	0x08016f9d
 8016f88:	08016fd1 	.word	0x08016fd1
 8016f8c:	08017005 	.word	0x08017005
 8016f90:	08017039 	.word	0x08017039
 8016f94:	0801706d 	.word	0x0801706d
 8016f98:	080170a1 	.word	0x080170a1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fa2:	685b      	ldr	r3, [r3, #4]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d00b      	beq.n	8016fc0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fae:	685b      	ldr	r3, [r3, #4]
 8016fb0:	687a      	ldr	r2, [r7, #4]
 8016fb2:	7c12      	ldrb	r2, [r2, #16]
 8016fb4:	f107 0108 	add.w	r1, r7, #8
 8016fb8:	4610      	mov	r0, r2
 8016fba:	4798      	blx	r3
 8016fbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016fbe:	e091      	b.n	80170e4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8016fc0:	6839      	ldr	r1, [r7, #0]
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f000 faaa 	bl	801751c <USBD_CtlError>
        err++;
 8016fc8:	7afb      	ldrb	r3, [r7, #11]
 8016fca:	3301      	adds	r3, #1
 8016fcc:	72fb      	strb	r3, [r7, #11]
      break;
 8016fce:	e089      	b.n	80170e4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fd6:	689b      	ldr	r3, [r3, #8]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d00b      	beq.n	8016ff4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fe2:	689b      	ldr	r3, [r3, #8]
 8016fe4:	687a      	ldr	r2, [r7, #4]
 8016fe6:	7c12      	ldrb	r2, [r2, #16]
 8016fe8:	f107 0108 	add.w	r1, r7, #8
 8016fec:	4610      	mov	r0, r2
 8016fee:	4798      	blx	r3
 8016ff0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016ff2:	e077      	b.n	80170e4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8016ff4:	6839      	ldr	r1, [r7, #0]
 8016ff6:	6878      	ldr	r0, [r7, #4]
 8016ff8:	f000 fa90 	bl	801751c <USBD_CtlError>
        err++;
 8016ffc:	7afb      	ldrb	r3, [r7, #11]
 8016ffe:	3301      	adds	r3, #1
 8017000:	72fb      	strb	r3, [r7, #11]
      break;
 8017002:	e06f      	b.n	80170e4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801700a:	68db      	ldr	r3, [r3, #12]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d00b      	beq.n	8017028 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017016:	68db      	ldr	r3, [r3, #12]
 8017018:	687a      	ldr	r2, [r7, #4]
 801701a:	7c12      	ldrb	r2, [r2, #16]
 801701c:	f107 0108 	add.w	r1, r7, #8
 8017020:	4610      	mov	r0, r2
 8017022:	4798      	blx	r3
 8017024:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017026:	e05d      	b.n	80170e4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8017028:	6839      	ldr	r1, [r7, #0]
 801702a:	6878      	ldr	r0, [r7, #4]
 801702c:	f000 fa76 	bl	801751c <USBD_CtlError>
        err++;
 8017030:	7afb      	ldrb	r3, [r7, #11]
 8017032:	3301      	adds	r3, #1
 8017034:	72fb      	strb	r3, [r7, #11]
      break;
 8017036:	e055      	b.n	80170e4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801703e:	691b      	ldr	r3, [r3, #16]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d00b      	beq.n	801705c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801704a:	691b      	ldr	r3, [r3, #16]
 801704c:	687a      	ldr	r2, [r7, #4]
 801704e:	7c12      	ldrb	r2, [r2, #16]
 8017050:	f107 0108 	add.w	r1, r7, #8
 8017054:	4610      	mov	r0, r2
 8017056:	4798      	blx	r3
 8017058:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801705a:	e043      	b.n	80170e4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801705c:	6839      	ldr	r1, [r7, #0]
 801705e:	6878      	ldr	r0, [r7, #4]
 8017060:	f000 fa5c 	bl	801751c <USBD_CtlError>
        err++;
 8017064:	7afb      	ldrb	r3, [r7, #11]
 8017066:	3301      	adds	r3, #1
 8017068:	72fb      	strb	r3, [r7, #11]
      break;
 801706a:	e03b      	b.n	80170e4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017072:	695b      	ldr	r3, [r3, #20]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d00b      	beq.n	8017090 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801707e:	695b      	ldr	r3, [r3, #20]
 8017080:	687a      	ldr	r2, [r7, #4]
 8017082:	7c12      	ldrb	r2, [r2, #16]
 8017084:	f107 0108 	add.w	r1, r7, #8
 8017088:	4610      	mov	r0, r2
 801708a:	4798      	blx	r3
 801708c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801708e:	e029      	b.n	80170e4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8017090:	6839      	ldr	r1, [r7, #0]
 8017092:	6878      	ldr	r0, [r7, #4]
 8017094:	f000 fa42 	bl	801751c <USBD_CtlError>
        err++;
 8017098:	7afb      	ldrb	r3, [r7, #11]
 801709a:	3301      	adds	r3, #1
 801709c:	72fb      	strb	r3, [r7, #11]
      break;
 801709e:	e021      	b.n	80170e4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80170a6:	699b      	ldr	r3, [r3, #24]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d00b      	beq.n	80170c4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80170b2:	699b      	ldr	r3, [r3, #24]
 80170b4:	687a      	ldr	r2, [r7, #4]
 80170b6:	7c12      	ldrb	r2, [r2, #16]
 80170b8:	f107 0108 	add.w	r1, r7, #8
 80170bc:	4610      	mov	r0, r2
 80170be:	4798      	blx	r3
 80170c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80170c2:	e00f      	b.n	80170e4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80170c4:	6839      	ldr	r1, [r7, #0]
 80170c6:	6878      	ldr	r0, [r7, #4]
 80170c8:	f000 fa28 	bl	801751c <USBD_CtlError>
        err++;
 80170cc:	7afb      	ldrb	r3, [r7, #11]
 80170ce:	3301      	adds	r3, #1
 80170d0:	72fb      	strb	r3, [r7, #11]
      break;
 80170d2:	e007      	b.n	80170e4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80170d4:	6839      	ldr	r1, [r7, #0]
 80170d6:	6878      	ldr	r0, [r7, #4]
 80170d8:	f000 fa20 	bl	801751c <USBD_CtlError>
      err++;
 80170dc:	7afb      	ldrb	r3, [r7, #11]
 80170de:	3301      	adds	r3, #1
 80170e0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80170e2:	bf00      	nop
    }
    break;
 80170e4:	e037      	b.n	8017156 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	7c1b      	ldrb	r3, [r3, #16]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d109      	bne.n	8017102 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170f6:	f107 0208 	add.w	r2, r7, #8
 80170fa:	4610      	mov	r0, r2
 80170fc:	4798      	blx	r3
 80170fe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8017100:	e029      	b.n	8017156 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8017102:	6839      	ldr	r1, [r7, #0]
 8017104:	6878      	ldr	r0, [r7, #4]
 8017106:	f000 fa09 	bl	801751c <USBD_CtlError>
      err++;
 801710a:	7afb      	ldrb	r3, [r7, #11]
 801710c:	3301      	adds	r3, #1
 801710e:	72fb      	strb	r3, [r7, #11]
    break;
 8017110:	e021      	b.n	8017156 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	7c1b      	ldrb	r3, [r3, #16]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d10d      	bne.n	8017136 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017122:	f107 0208 	add.w	r2, r7, #8
 8017126:	4610      	mov	r0, r2
 8017128:	4798      	blx	r3
 801712a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	3301      	adds	r3, #1
 8017130:	2207      	movs	r2, #7
 8017132:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8017134:	e00f      	b.n	8017156 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8017136:	6839      	ldr	r1, [r7, #0]
 8017138:	6878      	ldr	r0, [r7, #4]
 801713a:	f000 f9ef 	bl	801751c <USBD_CtlError>
      err++;
 801713e:	7afb      	ldrb	r3, [r7, #11]
 8017140:	3301      	adds	r3, #1
 8017142:	72fb      	strb	r3, [r7, #11]
    break;
 8017144:	e007      	b.n	8017156 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8017146:	6839      	ldr	r1, [r7, #0]
 8017148:	6878      	ldr	r0, [r7, #4]
 801714a:	f000 f9e7 	bl	801751c <USBD_CtlError>
    err++;
 801714e:	7afb      	ldrb	r3, [r7, #11]
 8017150:	3301      	adds	r3, #1
 8017152:	72fb      	strb	r3, [r7, #11]
    break;
 8017154:	bf00      	nop
  }

  if (err != 0U)
 8017156:	7afb      	ldrb	r3, [r7, #11]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d11e      	bne.n	801719a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	88db      	ldrh	r3, [r3, #6]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d016      	beq.n	8017192 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8017164:	893b      	ldrh	r3, [r7, #8]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d00e      	beq.n	8017188 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	88da      	ldrh	r2, [r3, #6]
 801716e:	893b      	ldrh	r3, [r7, #8]
 8017170:	4293      	cmp	r3, r2
 8017172:	bf28      	it	cs
 8017174:	4613      	movcs	r3, r2
 8017176:	b29b      	uxth	r3, r3
 8017178:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801717a:	893b      	ldrh	r3, [r7, #8]
 801717c:	461a      	mov	r2, r3
 801717e:	68f9      	ldr	r1, [r7, #12]
 8017180:	6878      	ldr	r0, [r7, #4]
 8017182:	f000 fa3c 	bl	80175fe <USBD_CtlSendData>
 8017186:	e009      	b.n	801719c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8017188:	6839      	ldr	r1, [r7, #0]
 801718a:	6878      	ldr	r0, [r7, #4]
 801718c:	f000 f9c6 	bl	801751c <USBD_CtlError>
 8017190:	e004      	b.n	801719c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8017192:	6878      	ldr	r0, [r7, #4]
 8017194:	f000 fa70 	bl	8017678 <USBD_CtlSendStatus>
 8017198:	e000      	b.n	801719c <USBD_GetDescriptor+0x2cc>
    return;
 801719a:	bf00      	nop
    }
  }
}
 801719c:	3710      	adds	r7, #16
 801719e:	46bd      	mov	sp, r7
 80171a0:	bd80      	pop	{r7, pc}
 80171a2:	bf00      	nop

080171a4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b084      	sub	sp, #16
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
 80171ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	889b      	ldrh	r3, [r3, #4]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d130      	bne.n	8017218 <USBD_SetAddress+0x74>
 80171b6:	683b      	ldr	r3, [r7, #0]
 80171b8:	88db      	ldrh	r3, [r3, #6]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d12c      	bne.n	8017218 <USBD_SetAddress+0x74>
 80171be:	683b      	ldr	r3, [r7, #0]
 80171c0:	885b      	ldrh	r3, [r3, #2]
 80171c2:	2b7f      	cmp	r3, #127	; 0x7f
 80171c4:	d828      	bhi.n	8017218 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	885b      	ldrh	r3, [r3, #2]
 80171ca:	b2db      	uxtb	r3, r3
 80171cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80171d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80171d8:	2b03      	cmp	r3, #3
 80171da:	d104      	bne.n	80171e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80171dc:	6839      	ldr	r1, [r7, #0]
 80171de:	6878      	ldr	r0, [r7, #4]
 80171e0:	f000 f99c 	bl	801751c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171e4:	e01c      	b.n	8017220 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	7bfa      	ldrb	r2, [r7, #15]
 80171ea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80171ee:	7bfb      	ldrb	r3, [r7, #15]
 80171f0:	4619      	mov	r1, r3
 80171f2:	6878      	ldr	r0, [r7, #4]
 80171f4:	f003 f9b5 	bl	801a562 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80171f8:	6878      	ldr	r0, [r7, #4]
 80171fa:	f000 fa3d 	bl	8017678 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80171fe:	7bfb      	ldrb	r3, [r7, #15]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d004      	beq.n	801720e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	2202      	movs	r2, #2
 8017208:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801720c:	e008      	b.n	8017220 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	2201      	movs	r2, #1
 8017212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017216:	e003      	b.n	8017220 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017218:	6839      	ldr	r1, [r7, #0]
 801721a:	6878      	ldr	r0, [r7, #4]
 801721c:	f000 f97e 	bl	801751c <USBD_CtlError>
  }
}
 8017220:	bf00      	nop
 8017222:	3710      	adds	r7, #16
 8017224:	46bd      	mov	sp, r7
 8017226:	bd80      	pop	{r7, pc}

08017228 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017228:	b580      	push	{r7, lr}
 801722a:	b084      	sub	sp, #16
 801722c:	af00      	add	r7, sp, #0
 801722e:	6078      	str	r0, [r7, #4]
 8017230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017232:	2300      	movs	r3, #0
 8017234:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	885b      	ldrh	r3, [r3, #2]
 801723a:	b2da      	uxtb	r2, r3
 801723c:	4b4b      	ldr	r3, [pc, #300]	; (801736c <USBD_SetConfig+0x144>)
 801723e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017240:	4b4a      	ldr	r3, [pc, #296]	; (801736c <USBD_SetConfig+0x144>)
 8017242:	781b      	ldrb	r3, [r3, #0]
 8017244:	2b01      	cmp	r3, #1
 8017246:	d905      	bls.n	8017254 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017248:	6839      	ldr	r1, [r7, #0]
 801724a:	6878      	ldr	r0, [r7, #4]
 801724c:	f000 f966 	bl	801751c <USBD_CtlError>
    return USBD_FAIL;
 8017250:	2303      	movs	r3, #3
 8017252:	e087      	b.n	8017364 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801725a:	2b02      	cmp	r3, #2
 801725c:	d002      	beq.n	8017264 <USBD_SetConfig+0x3c>
 801725e:	2b03      	cmp	r3, #3
 8017260:	d025      	beq.n	80172ae <USBD_SetConfig+0x86>
 8017262:	e071      	b.n	8017348 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8017264:	4b41      	ldr	r3, [pc, #260]	; (801736c <USBD_SetConfig+0x144>)
 8017266:	781b      	ldrb	r3, [r3, #0]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d01c      	beq.n	80172a6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 801726c:	4b3f      	ldr	r3, [pc, #252]	; (801736c <USBD_SetConfig+0x144>)
 801726e:	781b      	ldrb	r3, [r3, #0]
 8017270:	461a      	mov	r2, r3
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8017276:	4b3d      	ldr	r3, [pc, #244]	; (801736c <USBD_SetConfig+0x144>)
 8017278:	781b      	ldrb	r3, [r3, #0]
 801727a:	4619      	mov	r1, r3
 801727c:	6878      	ldr	r0, [r7, #4]
 801727e:	f7ff f9a8 	bl	80165d2 <USBD_SetClassConfig>
 8017282:	4603      	mov	r3, r0
 8017284:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8017286:	7bfb      	ldrb	r3, [r7, #15]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d004      	beq.n	8017296 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 801728c:	6839      	ldr	r1, [r7, #0]
 801728e:	6878      	ldr	r0, [r7, #4]
 8017290:	f000 f944 	bl	801751c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8017294:	e065      	b.n	8017362 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	f000 f9ee 	bl	8017678 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	2203      	movs	r2, #3
 80172a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80172a4:	e05d      	b.n	8017362 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80172a6:	6878      	ldr	r0, [r7, #4]
 80172a8:	f000 f9e6 	bl	8017678 <USBD_CtlSendStatus>
    break;
 80172ac:	e059      	b.n	8017362 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80172ae:	4b2f      	ldr	r3, [pc, #188]	; (801736c <USBD_SetConfig+0x144>)
 80172b0:	781b      	ldrb	r3, [r3, #0]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d112      	bne.n	80172dc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	2202      	movs	r2, #2
 80172ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80172be:	4b2b      	ldr	r3, [pc, #172]	; (801736c <USBD_SetConfig+0x144>)
 80172c0:	781b      	ldrb	r3, [r3, #0]
 80172c2:	461a      	mov	r2, r3
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80172c8:	4b28      	ldr	r3, [pc, #160]	; (801736c <USBD_SetConfig+0x144>)
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	4619      	mov	r1, r3
 80172ce:	6878      	ldr	r0, [r7, #4]
 80172d0:	f7ff f99b 	bl	801660a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80172d4:	6878      	ldr	r0, [r7, #4]
 80172d6:	f000 f9cf 	bl	8017678 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80172da:	e042      	b.n	8017362 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80172dc:	4b23      	ldr	r3, [pc, #140]	; (801736c <USBD_SetConfig+0x144>)
 80172de:	781b      	ldrb	r3, [r3, #0]
 80172e0:	461a      	mov	r2, r3
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	685b      	ldr	r3, [r3, #4]
 80172e6:	429a      	cmp	r2, r3
 80172e8:	d02a      	beq.n	8017340 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	685b      	ldr	r3, [r3, #4]
 80172ee:	b2db      	uxtb	r3, r3
 80172f0:	4619      	mov	r1, r3
 80172f2:	6878      	ldr	r0, [r7, #4]
 80172f4:	f7ff f989 	bl	801660a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80172f8:	4b1c      	ldr	r3, [pc, #112]	; (801736c <USBD_SetConfig+0x144>)
 80172fa:	781b      	ldrb	r3, [r3, #0]
 80172fc:	461a      	mov	r2, r3
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8017302:	4b1a      	ldr	r3, [pc, #104]	; (801736c <USBD_SetConfig+0x144>)
 8017304:	781b      	ldrb	r3, [r3, #0]
 8017306:	4619      	mov	r1, r3
 8017308:	6878      	ldr	r0, [r7, #4]
 801730a:	f7ff f962 	bl	80165d2 <USBD_SetClassConfig>
 801730e:	4603      	mov	r3, r0
 8017310:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8017312:	7bfb      	ldrb	r3, [r7, #15]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d00f      	beq.n	8017338 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8017318:	6839      	ldr	r1, [r7, #0]
 801731a:	6878      	ldr	r0, [r7, #4]
 801731c:	f000 f8fe 	bl	801751c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	685b      	ldr	r3, [r3, #4]
 8017324:	b2db      	uxtb	r3, r3
 8017326:	4619      	mov	r1, r3
 8017328:	6878      	ldr	r0, [r7, #4]
 801732a:	f7ff f96e 	bl	801660a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	2202      	movs	r2, #2
 8017332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8017336:	e014      	b.n	8017362 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8017338:	6878      	ldr	r0, [r7, #4]
 801733a:	f000 f99d 	bl	8017678 <USBD_CtlSendStatus>
    break;
 801733e:	e010      	b.n	8017362 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8017340:	6878      	ldr	r0, [r7, #4]
 8017342:	f000 f999 	bl	8017678 <USBD_CtlSendStatus>
    break;
 8017346:	e00c      	b.n	8017362 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8017348:	6839      	ldr	r1, [r7, #0]
 801734a:	6878      	ldr	r0, [r7, #4]
 801734c:	f000 f8e6 	bl	801751c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017350:	4b06      	ldr	r3, [pc, #24]	; (801736c <USBD_SetConfig+0x144>)
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	4619      	mov	r1, r3
 8017356:	6878      	ldr	r0, [r7, #4]
 8017358:	f7ff f957 	bl	801660a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801735c:	2303      	movs	r3, #3
 801735e:	73fb      	strb	r3, [r7, #15]
    break;
 8017360:	bf00      	nop
  }

  return ret;
 8017362:	7bfb      	ldrb	r3, [r7, #15]
}
 8017364:	4618      	mov	r0, r3
 8017366:	3710      	adds	r7, #16
 8017368:	46bd      	mov	sp, r7
 801736a:	bd80      	pop	{r7, pc}
 801736c:	24000ccc 	.word	0x24000ccc

08017370 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b082      	sub	sp, #8
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
 8017378:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801737a:	683b      	ldr	r3, [r7, #0]
 801737c:	88db      	ldrh	r3, [r3, #6]
 801737e:	2b01      	cmp	r3, #1
 8017380:	d004      	beq.n	801738c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017382:	6839      	ldr	r1, [r7, #0]
 8017384:	6878      	ldr	r0, [r7, #4]
 8017386:	f000 f8c9 	bl	801751c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801738a:	e021      	b.n	80173d0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017392:	2b01      	cmp	r3, #1
 8017394:	db17      	blt.n	80173c6 <USBD_GetConfig+0x56>
 8017396:	2b02      	cmp	r3, #2
 8017398:	dd02      	ble.n	80173a0 <USBD_GetConfig+0x30>
 801739a:	2b03      	cmp	r3, #3
 801739c:	d00b      	beq.n	80173b6 <USBD_GetConfig+0x46>
 801739e:	e012      	b.n	80173c6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	2200      	movs	r2, #0
 80173a4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	3308      	adds	r3, #8
 80173aa:	2201      	movs	r2, #1
 80173ac:	4619      	mov	r1, r3
 80173ae:	6878      	ldr	r0, [r7, #4]
 80173b0:	f000 f925 	bl	80175fe <USBD_CtlSendData>
      break;
 80173b4:	e00c      	b.n	80173d0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	3304      	adds	r3, #4
 80173ba:	2201      	movs	r2, #1
 80173bc:	4619      	mov	r1, r3
 80173be:	6878      	ldr	r0, [r7, #4]
 80173c0:	f000 f91d 	bl	80175fe <USBD_CtlSendData>
      break;
 80173c4:	e004      	b.n	80173d0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80173c6:	6839      	ldr	r1, [r7, #0]
 80173c8:	6878      	ldr	r0, [r7, #4]
 80173ca:	f000 f8a7 	bl	801751c <USBD_CtlError>
      break;
 80173ce:	bf00      	nop
}
 80173d0:	bf00      	nop
 80173d2:	3708      	adds	r7, #8
 80173d4:	46bd      	mov	sp, r7
 80173d6:	bd80      	pop	{r7, pc}

080173d8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80173d8:	b580      	push	{r7, lr}
 80173da:	b082      	sub	sp, #8
 80173dc:	af00      	add	r7, sp, #0
 80173de:	6078      	str	r0, [r7, #4]
 80173e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80173e8:	3b01      	subs	r3, #1
 80173ea:	2b02      	cmp	r3, #2
 80173ec:	d81e      	bhi.n	801742c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80173ee:	683b      	ldr	r3, [r7, #0]
 80173f0:	88db      	ldrh	r3, [r3, #6]
 80173f2:	2b02      	cmp	r3, #2
 80173f4:	d004      	beq.n	8017400 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80173f6:	6839      	ldr	r1, [r7, #0]
 80173f8:	6878      	ldr	r0, [r7, #4]
 80173fa:	f000 f88f 	bl	801751c <USBD_CtlError>
      break;
 80173fe:	e01a      	b.n	8017436 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	2201      	movs	r2, #1
 8017404:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801740c:	2b00      	cmp	r3, #0
 801740e:	d005      	beq.n	801741c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	68db      	ldr	r3, [r3, #12]
 8017414:	f043 0202 	orr.w	r2, r3, #2
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	330c      	adds	r3, #12
 8017420:	2202      	movs	r2, #2
 8017422:	4619      	mov	r1, r3
 8017424:	6878      	ldr	r0, [r7, #4]
 8017426:	f000 f8ea 	bl	80175fe <USBD_CtlSendData>
    break;
 801742a:	e004      	b.n	8017436 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801742c:	6839      	ldr	r1, [r7, #0]
 801742e:	6878      	ldr	r0, [r7, #4]
 8017430:	f000 f874 	bl	801751c <USBD_CtlError>
    break;
 8017434:	bf00      	nop
  }
}
 8017436:	bf00      	nop
 8017438:	3708      	adds	r7, #8
 801743a:	46bd      	mov	sp, r7
 801743c:	bd80      	pop	{r7, pc}

0801743e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801743e:	b580      	push	{r7, lr}
 8017440:	b082      	sub	sp, #8
 8017442:	af00      	add	r7, sp, #0
 8017444:	6078      	str	r0, [r7, #4]
 8017446:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017448:	683b      	ldr	r3, [r7, #0]
 801744a:	885b      	ldrh	r3, [r3, #2]
 801744c:	2b01      	cmp	r3, #1
 801744e:	d106      	bne.n	801745e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2201      	movs	r2, #1
 8017454:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017458:	6878      	ldr	r0, [r7, #4]
 801745a:	f000 f90d 	bl	8017678 <USBD_CtlSendStatus>
  }
}
 801745e:	bf00      	nop
 8017460:	3708      	adds	r7, #8
 8017462:	46bd      	mov	sp, r7
 8017464:	bd80      	pop	{r7, pc}

08017466 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017466:	b580      	push	{r7, lr}
 8017468:	b082      	sub	sp, #8
 801746a:	af00      	add	r7, sp, #0
 801746c:	6078      	str	r0, [r7, #4]
 801746e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017476:	3b01      	subs	r3, #1
 8017478:	2b02      	cmp	r3, #2
 801747a:	d80b      	bhi.n	8017494 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801747c:	683b      	ldr	r3, [r7, #0]
 801747e:	885b      	ldrh	r3, [r3, #2]
 8017480:	2b01      	cmp	r3, #1
 8017482:	d10c      	bne.n	801749e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	2200      	movs	r2, #0
 8017488:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	f000 f8f3 	bl	8017678 <USBD_CtlSendStatus>
      }
      break;
 8017492:	e004      	b.n	801749e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8017494:	6839      	ldr	r1, [r7, #0]
 8017496:	6878      	ldr	r0, [r7, #4]
 8017498:	f000 f840 	bl	801751c <USBD_CtlError>
      break;
 801749c:	e000      	b.n	80174a0 <USBD_ClrFeature+0x3a>
      break;
 801749e:	bf00      	nop
  }
}
 80174a0:	bf00      	nop
 80174a2:	3708      	adds	r7, #8
 80174a4:	46bd      	mov	sp, r7
 80174a6:	bd80      	pop	{r7, pc}

080174a8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80174a8:	b580      	push	{r7, lr}
 80174aa:	b084      	sub	sp, #16
 80174ac:	af00      	add	r7, sp, #0
 80174ae:	6078      	str	r0, [r7, #4]
 80174b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80174b2:	683b      	ldr	r3, [r7, #0]
 80174b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	781a      	ldrb	r2, [r3, #0]
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	3301      	adds	r3, #1
 80174c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	781a      	ldrb	r2, [r3, #0]
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	3301      	adds	r3, #1
 80174d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80174d2:	68f8      	ldr	r0, [r7, #12]
 80174d4:	f7ff fad4 	bl	8016a80 <SWAPBYTE>
 80174d8:	4603      	mov	r3, r0
 80174da:	461a      	mov	r2, r3
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	3301      	adds	r3, #1
 80174e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	3301      	adds	r3, #1
 80174ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80174ec:	68f8      	ldr	r0, [r7, #12]
 80174ee:	f7ff fac7 	bl	8016a80 <SWAPBYTE>
 80174f2:	4603      	mov	r3, r0
 80174f4:	461a      	mov	r2, r3
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	3301      	adds	r3, #1
 80174fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	3301      	adds	r3, #1
 8017504:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017506:	68f8      	ldr	r0, [r7, #12]
 8017508:	f7ff faba 	bl	8016a80 <SWAPBYTE>
 801750c:	4603      	mov	r3, r0
 801750e:	461a      	mov	r2, r3
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	80da      	strh	r2, [r3, #6]
}
 8017514:	bf00      	nop
 8017516:	3710      	adds	r7, #16
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}

0801751c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b082      	sub	sp, #8
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
 8017524:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017526:	2180      	movs	r1, #128	; 0x80
 8017528:	6878      	ldr	r0, [r7, #4]
 801752a:	f002 ffb0 	bl	801a48e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801752e:	2100      	movs	r1, #0
 8017530:	6878      	ldr	r0, [r7, #4]
 8017532:	f002 ffac 	bl	801a48e <USBD_LL_StallEP>
}
 8017536:	bf00      	nop
 8017538:	3708      	adds	r7, #8
 801753a:	46bd      	mov	sp, r7
 801753c:	bd80      	pop	{r7, pc}

0801753e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801753e:	b580      	push	{r7, lr}
 8017540:	b086      	sub	sp, #24
 8017542:	af00      	add	r7, sp, #0
 8017544:	60f8      	str	r0, [r7, #12]
 8017546:	60b9      	str	r1, [r7, #8]
 8017548:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801754a:	2300      	movs	r3, #0
 801754c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d036      	beq.n	80175c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017558:	6938      	ldr	r0, [r7, #16]
 801755a:	f000 f836 	bl	80175ca <USBD_GetLen>
 801755e:	4603      	mov	r3, r0
 8017560:	3301      	adds	r3, #1
 8017562:	b29b      	uxth	r3, r3
 8017564:	005b      	lsls	r3, r3, #1
 8017566:	b29a      	uxth	r2, r3
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801756c:	7dfb      	ldrb	r3, [r7, #23]
 801756e:	68ba      	ldr	r2, [r7, #8]
 8017570:	4413      	add	r3, r2
 8017572:	687a      	ldr	r2, [r7, #4]
 8017574:	7812      	ldrb	r2, [r2, #0]
 8017576:	701a      	strb	r2, [r3, #0]
  idx++;
 8017578:	7dfb      	ldrb	r3, [r7, #23]
 801757a:	3301      	adds	r3, #1
 801757c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801757e:	7dfb      	ldrb	r3, [r7, #23]
 8017580:	68ba      	ldr	r2, [r7, #8]
 8017582:	4413      	add	r3, r2
 8017584:	2203      	movs	r2, #3
 8017586:	701a      	strb	r2, [r3, #0]
  idx++;
 8017588:	7dfb      	ldrb	r3, [r7, #23]
 801758a:	3301      	adds	r3, #1
 801758c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801758e:	e013      	b.n	80175b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017590:	7dfb      	ldrb	r3, [r7, #23]
 8017592:	68ba      	ldr	r2, [r7, #8]
 8017594:	4413      	add	r3, r2
 8017596:	693a      	ldr	r2, [r7, #16]
 8017598:	7812      	ldrb	r2, [r2, #0]
 801759a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801759c:	693b      	ldr	r3, [r7, #16]
 801759e:	3301      	adds	r3, #1
 80175a0:	613b      	str	r3, [r7, #16]
    idx++;
 80175a2:	7dfb      	ldrb	r3, [r7, #23]
 80175a4:	3301      	adds	r3, #1
 80175a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80175a8:	7dfb      	ldrb	r3, [r7, #23]
 80175aa:	68ba      	ldr	r2, [r7, #8]
 80175ac:	4413      	add	r3, r2
 80175ae:	2200      	movs	r2, #0
 80175b0:	701a      	strb	r2, [r3, #0]
    idx++;
 80175b2:	7dfb      	ldrb	r3, [r7, #23]
 80175b4:	3301      	adds	r3, #1
 80175b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80175b8:	693b      	ldr	r3, [r7, #16]
 80175ba:	781b      	ldrb	r3, [r3, #0]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d1e7      	bne.n	8017590 <USBD_GetString+0x52>
 80175c0:	e000      	b.n	80175c4 <USBD_GetString+0x86>
    return;
 80175c2:	bf00      	nop
  }
}
 80175c4:	3718      	adds	r7, #24
 80175c6:	46bd      	mov	sp, r7
 80175c8:	bd80      	pop	{r7, pc}

080175ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80175ca:	b480      	push	{r7}
 80175cc:	b085      	sub	sp, #20
 80175ce:	af00      	add	r7, sp, #0
 80175d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80175d2:	2300      	movs	r3, #0
 80175d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80175da:	e005      	b.n	80175e8 <USBD_GetLen+0x1e>
  {
    len++;
 80175dc:	7bfb      	ldrb	r3, [r7, #15]
 80175de:	3301      	adds	r3, #1
 80175e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80175e2:	68bb      	ldr	r3, [r7, #8]
 80175e4:	3301      	adds	r3, #1
 80175e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	781b      	ldrb	r3, [r3, #0]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d1f5      	bne.n	80175dc <USBD_GetLen+0x12>
  }

  return len;
 80175f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80175f2:	4618      	mov	r0, r3
 80175f4:	3714      	adds	r7, #20
 80175f6:	46bd      	mov	sp, r7
 80175f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fc:	4770      	bx	lr

080175fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80175fe:	b580      	push	{r7, lr}
 8017600:	b084      	sub	sp, #16
 8017602:	af00      	add	r7, sp, #0
 8017604:	60f8      	str	r0, [r7, #12]
 8017606:	60b9      	str	r1, [r7, #8]
 8017608:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	2202      	movs	r2, #2
 801760e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	687a      	ldr	r2, [r7, #4]
 8017616:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	687a      	ldr	r2, [r7, #4]
 801761c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	68ba      	ldr	r2, [r7, #8]
 8017622:	2100      	movs	r1, #0
 8017624:	68f8      	ldr	r0, [r7, #12]
 8017626:	f002 ffbb 	bl	801a5a0 <USBD_LL_Transmit>

  return USBD_OK;
 801762a:	2300      	movs	r3, #0
}
 801762c:	4618      	mov	r0, r3
 801762e:	3710      	adds	r7, #16
 8017630:	46bd      	mov	sp, r7
 8017632:	bd80      	pop	{r7, pc}

08017634 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b084      	sub	sp, #16
 8017638:	af00      	add	r7, sp, #0
 801763a:	60f8      	str	r0, [r7, #12]
 801763c:	60b9      	str	r1, [r7, #8]
 801763e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	68ba      	ldr	r2, [r7, #8]
 8017644:	2100      	movs	r1, #0
 8017646:	68f8      	ldr	r0, [r7, #12]
 8017648:	f002 ffaa 	bl	801a5a0 <USBD_LL_Transmit>

  return USBD_OK;
 801764c:	2300      	movs	r3, #0
}
 801764e:	4618      	mov	r0, r3
 8017650:	3710      	adds	r7, #16
 8017652:	46bd      	mov	sp, r7
 8017654:	bd80      	pop	{r7, pc}

08017656 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017656:	b580      	push	{r7, lr}
 8017658:	b084      	sub	sp, #16
 801765a:	af00      	add	r7, sp, #0
 801765c:	60f8      	str	r0, [r7, #12]
 801765e:	60b9      	str	r1, [r7, #8]
 8017660:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	68ba      	ldr	r2, [r7, #8]
 8017666:	2100      	movs	r1, #0
 8017668:	68f8      	ldr	r0, [r7, #12]
 801766a:	f002 ffba 	bl	801a5e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801766e:	2300      	movs	r3, #0
}
 8017670:	4618      	mov	r0, r3
 8017672:	3710      	adds	r7, #16
 8017674:	46bd      	mov	sp, r7
 8017676:	bd80      	pop	{r7, pc}

08017678 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b082      	sub	sp, #8
 801767c:	af00      	add	r7, sp, #0
 801767e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2204      	movs	r2, #4
 8017684:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017688:	2300      	movs	r3, #0
 801768a:	2200      	movs	r2, #0
 801768c:	2100      	movs	r1, #0
 801768e:	6878      	ldr	r0, [r7, #4]
 8017690:	f002 ff86 	bl	801a5a0 <USBD_LL_Transmit>

  return USBD_OK;
 8017694:	2300      	movs	r3, #0
}
 8017696:	4618      	mov	r0, r3
 8017698:	3708      	adds	r7, #8
 801769a:	46bd      	mov	sp, r7
 801769c:	bd80      	pop	{r7, pc}

0801769e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801769e:	b580      	push	{r7, lr}
 80176a0:	b082      	sub	sp, #8
 80176a2:	af00      	add	r7, sp, #0
 80176a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	2205      	movs	r2, #5
 80176aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80176ae:	2300      	movs	r3, #0
 80176b0:	2200      	movs	r2, #0
 80176b2:	2100      	movs	r1, #0
 80176b4:	6878      	ldr	r0, [r7, #4]
 80176b6:	f002 ff94 	bl	801a5e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80176ba:	2300      	movs	r3, #0
}
 80176bc:	4618      	mov	r0, r3
 80176be:	3708      	adds	r7, #8
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}

080176c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b084      	sub	sp, #16
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	4603      	mov	r3, r0
 80176cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80176ce:	79fb      	ldrb	r3, [r7, #7]
 80176d0:	4a08      	ldr	r2, [pc, #32]	; (80176f4 <disk_status+0x30>)
 80176d2:	009b      	lsls	r3, r3, #2
 80176d4:	4413      	add	r3, r2
 80176d6:	685b      	ldr	r3, [r3, #4]
 80176d8:	685b      	ldr	r3, [r3, #4]
 80176da:	79fa      	ldrb	r2, [r7, #7]
 80176dc:	4905      	ldr	r1, [pc, #20]	; (80176f4 <disk_status+0x30>)
 80176de:	440a      	add	r2, r1
 80176e0:	7a12      	ldrb	r2, [r2, #8]
 80176e2:	4610      	mov	r0, r2
 80176e4:	4798      	blx	r3
 80176e6:	4603      	mov	r3, r0
 80176e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80176ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80176ec:	4618      	mov	r0, r3
 80176ee:	3710      	adds	r7, #16
 80176f0:	46bd      	mov	sp, r7
 80176f2:	bd80      	pop	{r7, pc}
 80176f4:	24000cf8 	.word	0x24000cf8

080176f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b084      	sub	sp, #16
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	4603      	mov	r3, r0
 8017700:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8017702:	2300      	movs	r3, #0
 8017704:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8017706:	79fb      	ldrb	r3, [r7, #7]
 8017708:	4a0d      	ldr	r2, [pc, #52]	; (8017740 <disk_initialize+0x48>)
 801770a:	5cd3      	ldrb	r3, [r2, r3]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d111      	bne.n	8017734 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8017710:	79fb      	ldrb	r3, [r7, #7]
 8017712:	4a0b      	ldr	r2, [pc, #44]	; (8017740 <disk_initialize+0x48>)
 8017714:	2101      	movs	r1, #1
 8017716:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017718:	79fb      	ldrb	r3, [r7, #7]
 801771a:	4a09      	ldr	r2, [pc, #36]	; (8017740 <disk_initialize+0x48>)
 801771c:	009b      	lsls	r3, r3, #2
 801771e:	4413      	add	r3, r2
 8017720:	685b      	ldr	r3, [r3, #4]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	79fa      	ldrb	r2, [r7, #7]
 8017726:	4906      	ldr	r1, [pc, #24]	; (8017740 <disk_initialize+0x48>)
 8017728:	440a      	add	r2, r1
 801772a:	7a12      	ldrb	r2, [r2, #8]
 801772c:	4610      	mov	r0, r2
 801772e:	4798      	blx	r3
 8017730:	4603      	mov	r3, r0
 8017732:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8017734:	7bfb      	ldrb	r3, [r7, #15]
}
 8017736:	4618      	mov	r0, r3
 8017738:	3710      	adds	r7, #16
 801773a:	46bd      	mov	sp, r7
 801773c:	bd80      	pop	{r7, pc}
 801773e:	bf00      	nop
 8017740:	24000cf8 	.word	0x24000cf8

08017744 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017744:	b590      	push	{r4, r7, lr}
 8017746:	b087      	sub	sp, #28
 8017748:	af00      	add	r7, sp, #0
 801774a:	60b9      	str	r1, [r7, #8]
 801774c:	607a      	str	r2, [r7, #4]
 801774e:	603b      	str	r3, [r7, #0]
 8017750:	4603      	mov	r3, r0
 8017752:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017754:	7bfb      	ldrb	r3, [r7, #15]
 8017756:	4a0a      	ldr	r2, [pc, #40]	; (8017780 <disk_read+0x3c>)
 8017758:	009b      	lsls	r3, r3, #2
 801775a:	4413      	add	r3, r2
 801775c:	685b      	ldr	r3, [r3, #4]
 801775e:	689c      	ldr	r4, [r3, #8]
 8017760:	7bfb      	ldrb	r3, [r7, #15]
 8017762:	4a07      	ldr	r2, [pc, #28]	; (8017780 <disk_read+0x3c>)
 8017764:	4413      	add	r3, r2
 8017766:	7a18      	ldrb	r0, [r3, #8]
 8017768:	683b      	ldr	r3, [r7, #0]
 801776a:	687a      	ldr	r2, [r7, #4]
 801776c:	68b9      	ldr	r1, [r7, #8]
 801776e:	47a0      	blx	r4
 8017770:	4603      	mov	r3, r0
 8017772:	75fb      	strb	r3, [r7, #23]
  return res;
 8017774:	7dfb      	ldrb	r3, [r7, #23]
}
 8017776:	4618      	mov	r0, r3
 8017778:	371c      	adds	r7, #28
 801777a:	46bd      	mov	sp, r7
 801777c:	bd90      	pop	{r4, r7, pc}
 801777e:	bf00      	nop
 8017780:	24000cf8 	.word	0x24000cf8

08017784 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8017784:	b590      	push	{r4, r7, lr}
 8017786:	b087      	sub	sp, #28
 8017788:	af00      	add	r7, sp, #0
 801778a:	60b9      	str	r1, [r7, #8]
 801778c:	607a      	str	r2, [r7, #4]
 801778e:	603b      	str	r3, [r7, #0]
 8017790:	4603      	mov	r3, r0
 8017792:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017794:	7bfb      	ldrb	r3, [r7, #15]
 8017796:	4a0a      	ldr	r2, [pc, #40]	; (80177c0 <disk_write+0x3c>)
 8017798:	009b      	lsls	r3, r3, #2
 801779a:	4413      	add	r3, r2
 801779c:	685b      	ldr	r3, [r3, #4]
 801779e:	68dc      	ldr	r4, [r3, #12]
 80177a0:	7bfb      	ldrb	r3, [r7, #15]
 80177a2:	4a07      	ldr	r2, [pc, #28]	; (80177c0 <disk_write+0x3c>)
 80177a4:	4413      	add	r3, r2
 80177a6:	7a18      	ldrb	r0, [r3, #8]
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	687a      	ldr	r2, [r7, #4]
 80177ac:	68b9      	ldr	r1, [r7, #8]
 80177ae:	47a0      	blx	r4
 80177b0:	4603      	mov	r3, r0
 80177b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80177b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80177b6:	4618      	mov	r0, r3
 80177b8:	371c      	adds	r7, #28
 80177ba:	46bd      	mov	sp, r7
 80177bc:	bd90      	pop	{r4, r7, pc}
 80177be:	bf00      	nop
 80177c0:	24000cf8 	.word	0x24000cf8

080177c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b084      	sub	sp, #16
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	4603      	mov	r3, r0
 80177cc:	603a      	str	r2, [r7, #0]
 80177ce:	71fb      	strb	r3, [r7, #7]
 80177d0:	460b      	mov	r3, r1
 80177d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80177d4:	79fb      	ldrb	r3, [r7, #7]
 80177d6:	4a09      	ldr	r2, [pc, #36]	; (80177fc <disk_ioctl+0x38>)
 80177d8:	009b      	lsls	r3, r3, #2
 80177da:	4413      	add	r3, r2
 80177dc:	685b      	ldr	r3, [r3, #4]
 80177de:	691b      	ldr	r3, [r3, #16]
 80177e0:	79fa      	ldrb	r2, [r7, #7]
 80177e2:	4906      	ldr	r1, [pc, #24]	; (80177fc <disk_ioctl+0x38>)
 80177e4:	440a      	add	r2, r1
 80177e6:	7a10      	ldrb	r0, [r2, #8]
 80177e8:	79b9      	ldrb	r1, [r7, #6]
 80177ea:	683a      	ldr	r2, [r7, #0]
 80177ec:	4798      	blx	r3
 80177ee:	4603      	mov	r3, r0
 80177f0:	73fb      	strb	r3, [r7, #15]
  return res;
 80177f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80177f4:	4618      	mov	r0, r3
 80177f6:	3710      	adds	r7, #16
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	24000cf8 	.word	0x24000cf8

08017800 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8017800:	b480      	push	{r7}
 8017802:	b085      	sub	sp, #20
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	3301      	adds	r3, #1
 801780c:	781b      	ldrb	r3, [r3, #0]
 801780e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8017810:	89fb      	ldrh	r3, [r7, #14]
 8017812:	021b      	lsls	r3, r3, #8
 8017814:	b21a      	sxth	r2, r3
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	781b      	ldrb	r3, [r3, #0]
 801781a:	b21b      	sxth	r3, r3
 801781c:	4313      	orrs	r3, r2
 801781e:	b21b      	sxth	r3, r3
 8017820:	81fb      	strh	r3, [r7, #14]
	return rv;
 8017822:	89fb      	ldrh	r3, [r7, #14]
}
 8017824:	4618      	mov	r0, r3
 8017826:	3714      	adds	r7, #20
 8017828:	46bd      	mov	sp, r7
 801782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801782e:	4770      	bx	lr

08017830 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8017830:	b480      	push	{r7}
 8017832:	b085      	sub	sp, #20
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	3303      	adds	r3, #3
 801783c:	781b      	ldrb	r3, [r3, #0]
 801783e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	021b      	lsls	r3, r3, #8
 8017844:	687a      	ldr	r2, [r7, #4]
 8017846:	3202      	adds	r2, #2
 8017848:	7812      	ldrb	r2, [r2, #0]
 801784a:	4313      	orrs	r3, r2
 801784c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	021b      	lsls	r3, r3, #8
 8017852:	687a      	ldr	r2, [r7, #4]
 8017854:	3201      	adds	r2, #1
 8017856:	7812      	ldrb	r2, [r2, #0]
 8017858:	4313      	orrs	r3, r2
 801785a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	021b      	lsls	r3, r3, #8
 8017860:	687a      	ldr	r2, [r7, #4]
 8017862:	7812      	ldrb	r2, [r2, #0]
 8017864:	4313      	orrs	r3, r2
 8017866:	60fb      	str	r3, [r7, #12]
	return rv;
 8017868:	68fb      	ldr	r3, [r7, #12]
}
 801786a:	4618      	mov	r0, r3
 801786c:	3714      	adds	r7, #20
 801786e:	46bd      	mov	sp, r7
 8017870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017874:	4770      	bx	lr

08017876 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8017876:	b480      	push	{r7}
 8017878:	b083      	sub	sp, #12
 801787a:	af00      	add	r7, sp, #0
 801787c:	6078      	str	r0, [r7, #4]
 801787e:	460b      	mov	r3, r1
 8017880:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	1c5a      	adds	r2, r3, #1
 8017886:	607a      	str	r2, [r7, #4]
 8017888:	887a      	ldrh	r2, [r7, #2]
 801788a:	b2d2      	uxtb	r2, r2
 801788c:	701a      	strb	r2, [r3, #0]
 801788e:	887b      	ldrh	r3, [r7, #2]
 8017890:	0a1b      	lsrs	r3, r3, #8
 8017892:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	1c5a      	adds	r2, r3, #1
 8017898:	607a      	str	r2, [r7, #4]
 801789a:	887a      	ldrh	r2, [r7, #2]
 801789c:	b2d2      	uxtb	r2, r2
 801789e:	701a      	strb	r2, [r3, #0]
}
 80178a0:	bf00      	nop
 80178a2:	370c      	adds	r7, #12
 80178a4:	46bd      	mov	sp, r7
 80178a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178aa:	4770      	bx	lr

080178ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80178ac:	b480      	push	{r7}
 80178ae:	b083      	sub	sp, #12
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
 80178b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	1c5a      	adds	r2, r3, #1
 80178ba:	607a      	str	r2, [r7, #4]
 80178bc:	683a      	ldr	r2, [r7, #0]
 80178be:	b2d2      	uxtb	r2, r2
 80178c0:	701a      	strb	r2, [r3, #0]
 80178c2:	683b      	ldr	r3, [r7, #0]
 80178c4:	0a1b      	lsrs	r3, r3, #8
 80178c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	1c5a      	adds	r2, r3, #1
 80178cc:	607a      	str	r2, [r7, #4]
 80178ce:	683a      	ldr	r2, [r7, #0]
 80178d0:	b2d2      	uxtb	r2, r2
 80178d2:	701a      	strb	r2, [r3, #0]
 80178d4:	683b      	ldr	r3, [r7, #0]
 80178d6:	0a1b      	lsrs	r3, r3, #8
 80178d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	1c5a      	adds	r2, r3, #1
 80178de:	607a      	str	r2, [r7, #4]
 80178e0:	683a      	ldr	r2, [r7, #0]
 80178e2:	b2d2      	uxtb	r2, r2
 80178e4:	701a      	strb	r2, [r3, #0]
 80178e6:	683b      	ldr	r3, [r7, #0]
 80178e8:	0a1b      	lsrs	r3, r3, #8
 80178ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	1c5a      	adds	r2, r3, #1
 80178f0:	607a      	str	r2, [r7, #4]
 80178f2:	683a      	ldr	r2, [r7, #0]
 80178f4:	b2d2      	uxtb	r2, r2
 80178f6:	701a      	strb	r2, [r3, #0]
}
 80178f8:	bf00      	nop
 80178fa:	370c      	adds	r7, #12
 80178fc:	46bd      	mov	sp, r7
 80178fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017902:	4770      	bx	lr

08017904 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017904:	b480      	push	{r7}
 8017906:	b087      	sub	sp, #28
 8017908:	af00      	add	r7, sp, #0
 801790a:	60f8      	str	r0, [r7, #12]
 801790c:	60b9      	str	r1, [r7, #8]
 801790e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8017914:	68bb      	ldr	r3, [r7, #8]
 8017916:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	2b00      	cmp	r3, #0
 801791c:	d00d      	beq.n	801793a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801791e:	693a      	ldr	r2, [r7, #16]
 8017920:	1c53      	adds	r3, r2, #1
 8017922:	613b      	str	r3, [r7, #16]
 8017924:	697b      	ldr	r3, [r7, #20]
 8017926:	1c59      	adds	r1, r3, #1
 8017928:	6179      	str	r1, [r7, #20]
 801792a:	7812      	ldrb	r2, [r2, #0]
 801792c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	3b01      	subs	r3, #1
 8017932:	607b      	str	r3, [r7, #4]
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d1f1      	bne.n	801791e <mem_cpy+0x1a>
	}
}
 801793a:	bf00      	nop
 801793c:	371c      	adds	r7, #28
 801793e:	46bd      	mov	sp, r7
 8017940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017944:	4770      	bx	lr

08017946 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8017946:	b480      	push	{r7}
 8017948:	b087      	sub	sp, #28
 801794a:	af00      	add	r7, sp, #0
 801794c:	60f8      	str	r0, [r7, #12]
 801794e:	60b9      	str	r1, [r7, #8]
 8017950:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8017956:	697b      	ldr	r3, [r7, #20]
 8017958:	1c5a      	adds	r2, r3, #1
 801795a:	617a      	str	r2, [r7, #20]
 801795c:	68ba      	ldr	r2, [r7, #8]
 801795e:	b2d2      	uxtb	r2, r2
 8017960:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	3b01      	subs	r3, #1
 8017966:	607b      	str	r3, [r7, #4]
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d1f3      	bne.n	8017956 <mem_set+0x10>
}
 801796e:	bf00      	nop
 8017970:	371c      	adds	r7, #28
 8017972:	46bd      	mov	sp, r7
 8017974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017978:	4770      	bx	lr

0801797a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801797a:	b480      	push	{r7}
 801797c:	b089      	sub	sp, #36	; 0x24
 801797e:	af00      	add	r7, sp, #0
 8017980:	60f8      	str	r0, [r7, #12]
 8017982:	60b9      	str	r1, [r7, #8]
 8017984:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	61fb      	str	r3, [r7, #28]
 801798a:	68bb      	ldr	r3, [r7, #8]
 801798c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801798e:	2300      	movs	r3, #0
 8017990:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017992:	69fb      	ldr	r3, [r7, #28]
 8017994:	1c5a      	adds	r2, r3, #1
 8017996:	61fa      	str	r2, [r7, #28]
 8017998:	781b      	ldrb	r3, [r3, #0]
 801799a:	4619      	mov	r1, r3
 801799c:	69bb      	ldr	r3, [r7, #24]
 801799e:	1c5a      	adds	r2, r3, #1
 80179a0:	61ba      	str	r2, [r7, #24]
 80179a2:	781b      	ldrb	r3, [r3, #0]
 80179a4:	1acb      	subs	r3, r1, r3
 80179a6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	3b01      	subs	r3, #1
 80179ac:	607b      	str	r3, [r7, #4]
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d002      	beq.n	80179ba <mem_cmp+0x40>
 80179b4:	697b      	ldr	r3, [r7, #20]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d0eb      	beq.n	8017992 <mem_cmp+0x18>

	return r;
 80179ba:	697b      	ldr	r3, [r7, #20]
}
 80179bc:	4618      	mov	r0, r3
 80179be:	3724      	adds	r7, #36	; 0x24
 80179c0:	46bd      	mov	sp, r7
 80179c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c6:	4770      	bx	lr

080179c8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80179c8:	b480      	push	{r7}
 80179ca:	b083      	sub	sp, #12
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
 80179d0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80179d2:	e002      	b.n	80179da <chk_chr+0x12>
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	3301      	adds	r3, #1
 80179d8:	607b      	str	r3, [r7, #4]
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	781b      	ldrb	r3, [r3, #0]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d005      	beq.n	80179ee <chk_chr+0x26>
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	781b      	ldrb	r3, [r3, #0]
 80179e6:	461a      	mov	r2, r3
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	4293      	cmp	r3, r2
 80179ec:	d1f2      	bne.n	80179d4 <chk_chr+0xc>
	return *str;
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	781b      	ldrb	r3, [r3, #0]
}
 80179f2:	4618      	mov	r0, r3
 80179f4:	370c      	adds	r7, #12
 80179f6:	46bd      	mov	sp, r7
 80179f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fc:	4770      	bx	lr
	...

08017a00 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017a00:	b480      	push	{r7}
 8017a02:	b085      	sub	sp, #20
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
 8017a08:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	60bb      	str	r3, [r7, #8]
 8017a0e:	68bb      	ldr	r3, [r7, #8]
 8017a10:	60fb      	str	r3, [r7, #12]
 8017a12:	e029      	b.n	8017a68 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8017a14:	4a27      	ldr	r2, [pc, #156]	; (8017ab4 <chk_lock+0xb4>)
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	011b      	lsls	r3, r3, #4
 8017a1a:	4413      	add	r3, r2
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d01d      	beq.n	8017a5e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017a22:	4a24      	ldr	r2, [pc, #144]	; (8017ab4 <chk_lock+0xb4>)
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	011b      	lsls	r3, r3, #4
 8017a28:	4413      	add	r3, r2
 8017a2a:	681a      	ldr	r2, [r3, #0]
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	429a      	cmp	r2, r3
 8017a32:	d116      	bne.n	8017a62 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8017a34:	4a1f      	ldr	r2, [pc, #124]	; (8017ab4 <chk_lock+0xb4>)
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	011b      	lsls	r3, r3, #4
 8017a3a:	4413      	add	r3, r2
 8017a3c:	3304      	adds	r3, #4
 8017a3e:	681a      	ldr	r2, [r3, #0]
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017a44:	429a      	cmp	r2, r3
 8017a46:	d10c      	bne.n	8017a62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017a48:	4a1a      	ldr	r2, [pc, #104]	; (8017ab4 <chk_lock+0xb4>)
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	011b      	lsls	r3, r3, #4
 8017a4e:	4413      	add	r3, r2
 8017a50:	3308      	adds	r3, #8
 8017a52:	681a      	ldr	r2, [r3, #0]
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d102      	bne.n	8017a62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017a5c:	e007      	b.n	8017a6e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8017a5e:	2301      	movs	r3, #1
 8017a60:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	3301      	adds	r3, #1
 8017a66:	60fb      	str	r3, [r7, #12]
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	2b01      	cmp	r3, #1
 8017a6c:	d9d2      	bls.n	8017a14 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	2b02      	cmp	r3, #2
 8017a72:	d109      	bne.n	8017a88 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017a74:	68bb      	ldr	r3, [r7, #8]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d102      	bne.n	8017a80 <chk_lock+0x80>
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	2b02      	cmp	r3, #2
 8017a7e:	d101      	bne.n	8017a84 <chk_lock+0x84>
 8017a80:	2300      	movs	r3, #0
 8017a82:	e010      	b.n	8017aa6 <chk_lock+0xa6>
 8017a84:	2312      	movs	r3, #18
 8017a86:	e00e      	b.n	8017aa6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017a88:	683b      	ldr	r3, [r7, #0]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d108      	bne.n	8017aa0 <chk_lock+0xa0>
 8017a8e:	4a09      	ldr	r2, [pc, #36]	; (8017ab4 <chk_lock+0xb4>)
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	011b      	lsls	r3, r3, #4
 8017a94:	4413      	add	r3, r2
 8017a96:	330c      	adds	r3, #12
 8017a98:	881b      	ldrh	r3, [r3, #0]
 8017a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a9e:	d101      	bne.n	8017aa4 <chk_lock+0xa4>
 8017aa0:	2310      	movs	r3, #16
 8017aa2:	e000      	b.n	8017aa6 <chk_lock+0xa6>
 8017aa4:	2300      	movs	r3, #0
}
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	3714      	adds	r7, #20
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab0:	4770      	bx	lr
 8017ab2:	bf00      	nop
 8017ab4:	24000cd8 	.word	0x24000cd8

08017ab8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017ab8:	b480      	push	{r7}
 8017aba:	b083      	sub	sp, #12
 8017abc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017abe:	2300      	movs	r3, #0
 8017ac0:	607b      	str	r3, [r7, #4]
 8017ac2:	e002      	b.n	8017aca <enq_lock+0x12>
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	3301      	adds	r3, #1
 8017ac8:	607b      	str	r3, [r7, #4]
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	2b01      	cmp	r3, #1
 8017ace:	d806      	bhi.n	8017ade <enq_lock+0x26>
 8017ad0:	4a09      	ldr	r2, [pc, #36]	; (8017af8 <enq_lock+0x40>)
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	011b      	lsls	r3, r3, #4
 8017ad6:	4413      	add	r3, r2
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d1f2      	bne.n	8017ac4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	2b02      	cmp	r3, #2
 8017ae2:	bf14      	ite	ne
 8017ae4:	2301      	movne	r3, #1
 8017ae6:	2300      	moveq	r3, #0
 8017ae8:	b2db      	uxtb	r3, r3
}
 8017aea:	4618      	mov	r0, r3
 8017aec:	370c      	adds	r7, #12
 8017aee:	46bd      	mov	sp, r7
 8017af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af4:	4770      	bx	lr
 8017af6:	bf00      	nop
 8017af8:	24000cd8 	.word	0x24000cd8

08017afc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017afc:	b480      	push	{r7}
 8017afe:	b085      	sub	sp, #20
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
 8017b04:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017b06:	2300      	movs	r3, #0
 8017b08:	60fb      	str	r3, [r7, #12]
 8017b0a:	e01f      	b.n	8017b4c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017b0c:	4a41      	ldr	r2, [pc, #260]	; (8017c14 <inc_lock+0x118>)
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	011b      	lsls	r3, r3, #4
 8017b12:	4413      	add	r3, r2
 8017b14:	681a      	ldr	r2, [r3, #0]
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	429a      	cmp	r2, r3
 8017b1c:	d113      	bne.n	8017b46 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017b1e:	4a3d      	ldr	r2, [pc, #244]	; (8017c14 <inc_lock+0x118>)
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	011b      	lsls	r3, r3, #4
 8017b24:	4413      	add	r3, r2
 8017b26:	3304      	adds	r3, #4
 8017b28:	681a      	ldr	r2, [r3, #0]
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8017b2e:	429a      	cmp	r2, r3
 8017b30:	d109      	bne.n	8017b46 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8017b32:	4a38      	ldr	r2, [pc, #224]	; (8017c14 <inc_lock+0x118>)
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	011b      	lsls	r3, r3, #4
 8017b38:	4413      	add	r3, r2
 8017b3a:	3308      	adds	r3, #8
 8017b3c:	681a      	ldr	r2, [r3, #0]
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8017b42:	429a      	cmp	r2, r3
 8017b44:	d006      	beq.n	8017b54 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	3301      	adds	r3, #1
 8017b4a:	60fb      	str	r3, [r7, #12]
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	2b01      	cmp	r3, #1
 8017b50:	d9dc      	bls.n	8017b0c <inc_lock+0x10>
 8017b52:	e000      	b.n	8017b56 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017b54:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	2b02      	cmp	r3, #2
 8017b5a:	d132      	bne.n	8017bc2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	60fb      	str	r3, [r7, #12]
 8017b60:	e002      	b.n	8017b68 <inc_lock+0x6c>
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	3301      	adds	r3, #1
 8017b66:	60fb      	str	r3, [r7, #12]
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	2b01      	cmp	r3, #1
 8017b6c:	d806      	bhi.n	8017b7c <inc_lock+0x80>
 8017b6e:	4a29      	ldr	r2, [pc, #164]	; (8017c14 <inc_lock+0x118>)
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	011b      	lsls	r3, r3, #4
 8017b74:	4413      	add	r3, r2
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d1f2      	bne.n	8017b62 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	2b02      	cmp	r3, #2
 8017b80:	d101      	bne.n	8017b86 <inc_lock+0x8a>
 8017b82:	2300      	movs	r3, #0
 8017b84:	e040      	b.n	8017c08 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	681a      	ldr	r2, [r3, #0]
 8017b8a:	4922      	ldr	r1, [pc, #136]	; (8017c14 <inc_lock+0x118>)
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	011b      	lsls	r3, r3, #4
 8017b90:	440b      	add	r3, r1
 8017b92:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	689a      	ldr	r2, [r3, #8]
 8017b98:	491e      	ldr	r1, [pc, #120]	; (8017c14 <inc_lock+0x118>)
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	011b      	lsls	r3, r3, #4
 8017b9e:	440b      	add	r3, r1
 8017ba0:	3304      	adds	r3, #4
 8017ba2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	695a      	ldr	r2, [r3, #20]
 8017ba8:	491a      	ldr	r1, [pc, #104]	; (8017c14 <inc_lock+0x118>)
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	011b      	lsls	r3, r3, #4
 8017bae:	440b      	add	r3, r1
 8017bb0:	3308      	adds	r3, #8
 8017bb2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017bb4:	4a17      	ldr	r2, [pc, #92]	; (8017c14 <inc_lock+0x118>)
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	011b      	lsls	r3, r3, #4
 8017bba:	4413      	add	r3, r2
 8017bbc:	330c      	adds	r3, #12
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017bc2:	683b      	ldr	r3, [r7, #0]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d009      	beq.n	8017bdc <inc_lock+0xe0>
 8017bc8:	4a12      	ldr	r2, [pc, #72]	; (8017c14 <inc_lock+0x118>)
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	011b      	lsls	r3, r3, #4
 8017bce:	4413      	add	r3, r2
 8017bd0:	330c      	adds	r3, #12
 8017bd2:	881b      	ldrh	r3, [r3, #0]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d001      	beq.n	8017bdc <inc_lock+0xe0>
 8017bd8:	2300      	movs	r3, #0
 8017bda:	e015      	b.n	8017c08 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d108      	bne.n	8017bf4 <inc_lock+0xf8>
 8017be2:	4a0c      	ldr	r2, [pc, #48]	; (8017c14 <inc_lock+0x118>)
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	011b      	lsls	r3, r3, #4
 8017be8:	4413      	add	r3, r2
 8017bea:	330c      	adds	r3, #12
 8017bec:	881b      	ldrh	r3, [r3, #0]
 8017bee:	3301      	adds	r3, #1
 8017bf0:	b29a      	uxth	r2, r3
 8017bf2:	e001      	b.n	8017bf8 <inc_lock+0xfc>
 8017bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017bf8:	4906      	ldr	r1, [pc, #24]	; (8017c14 <inc_lock+0x118>)
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	011b      	lsls	r3, r3, #4
 8017bfe:	440b      	add	r3, r1
 8017c00:	330c      	adds	r3, #12
 8017c02:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	3301      	adds	r3, #1
}
 8017c08:	4618      	mov	r0, r3
 8017c0a:	3714      	adds	r7, #20
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c12:	4770      	bx	lr
 8017c14:	24000cd8 	.word	0x24000cd8

08017c18 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017c18:	b480      	push	{r7}
 8017c1a:	b085      	sub	sp, #20
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	3b01      	subs	r3, #1
 8017c24:	607b      	str	r3, [r7, #4]
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	2b01      	cmp	r3, #1
 8017c2a:	d825      	bhi.n	8017c78 <dec_lock+0x60>
		n = Files[i].ctr;
 8017c2c:	4a17      	ldr	r2, [pc, #92]	; (8017c8c <dec_lock+0x74>)
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	011b      	lsls	r3, r3, #4
 8017c32:	4413      	add	r3, r2
 8017c34:	330c      	adds	r3, #12
 8017c36:	881b      	ldrh	r3, [r3, #0]
 8017c38:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017c3a:	89fb      	ldrh	r3, [r7, #14]
 8017c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017c40:	d101      	bne.n	8017c46 <dec_lock+0x2e>
 8017c42:	2300      	movs	r3, #0
 8017c44:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017c46:	89fb      	ldrh	r3, [r7, #14]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d002      	beq.n	8017c52 <dec_lock+0x3a>
 8017c4c:	89fb      	ldrh	r3, [r7, #14]
 8017c4e:	3b01      	subs	r3, #1
 8017c50:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017c52:	4a0e      	ldr	r2, [pc, #56]	; (8017c8c <dec_lock+0x74>)
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	011b      	lsls	r3, r3, #4
 8017c58:	4413      	add	r3, r2
 8017c5a:	330c      	adds	r3, #12
 8017c5c:	89fa      	ldrh	r2, [r7, #14]
 8017c5e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017c60:	89fb      	ldrh	r3, [r7, #14]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d105      	bne.n	8017c72 <dec_lock+0x5a>
 8017c66:	4a09      	ldr	r2, [pc, #36]	; (8017c8c <dec_lock+0x74>)
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	011b      	lsls	r3, r3, #4
 8017c6c:	4413      	add	r3, r2
 8017c6e:	2200      	movs	r2, #0
 8017c70:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017c72:	2300      	movs	r3, #0
 8017c74:	737b      	strb	r3, [r7, #13]
 8017c76:	e001      	b.n	8017c7c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017c78:	2302      	movs	r3, #2
 8017c7a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017c7c:	7b7b      	ldrb	r3, [r7, #13]
}
 8017c7e:	4618      	mov	r0, r3
 8017c80:	3714      	adds	r7, #20
 8017c82:	46bd      	mov	sp, r7
 8017c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c88:	4770      	bx	lr
 8017c8a:	bf00      	nop
 8017c8c:	24000cd8 	.word	0x24000cd8

08017c90 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017c90:	b480      	push	{r7}
 8017c92:	b085      	sub	sp, #20
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017c98:	2300      	movs	r3, #0
 8017c9a:	60fb      	str	r3, [r7, #12]
 8017c9c:	e010      	b.n	8017cc0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017c9e:	4a0d      	ldr	r2, [pc, #52]	; (8017cd4 <clear_lock+0x44>)
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	011b      	lsls	r3, r3, #4
 8017ca4:	4413      	add	r3, r2
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	687a      	ldr	r2, [r7, #4]
 8017caa:	429a      	cmp	r2, r3
 8017cac:	d105      	bne.n	8017cba <clear_lock+0x2a>
 8017cae:	4a09      	ldr	r2, [pc, #36]	; (8017cd4 <clear_lock+0x44>)
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	011b      	lsls	r3, r3, #4
 8017cb4:	4413      	add	r3, r2
 8017cb6:	2200      	movs	r2, #0
 8017cb8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	3301      	adds	r3, #1
 8017cbe:	60fb      	str	r3, [r7, #12]
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	2b01      	cmp	r3, #1
 8017cc4:	d9eb      	bls.n	8017c9e <clear_lock+0xe>
	}
}
 8017cc6:	bf00      	nop
 8017cc8:	3714      	adds	r7, #20
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd0:	4770      	bx	lr
 8017cd2:	bf00      	nop
 8017cd4:	24000cd8 	.word	0x24000cd8

08017cd8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b086      	sub	sp, #24
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	78db      	ldrb	r3, [r3, #3]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d034      	beq.n	8017d56 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cf0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	7858      	ldrb	r0, [r3, #1]
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	697a      	ldr	r2, [r7, #20]
 8017d00:	f7ff fd40 	bl	8017784 <disk_write>
 8017d04:	4603      	mov	r3, r0
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d002      	beq.n	8017d10 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017d0a:	2301      	movs	r3, #1
 8017d0c:	73fb      	strb	r3, [r7, #15]
 8017d0e:	e022      	b.n	8017d56 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	2200      	movs	r2, #0
 8017d14:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	6a1b      	ldr	r3, [r3, #32]
 8017d1a:	697a      	ldr	r2, [r7, #20]
 8017d1c:	1ad2      	subs	r2, r2, r3
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	699b      	ldr	r3, [r3, #24]
 8017d22:	429a      	cmp	r2, r3
 8017d24:	d217      	bcs.n	8017d56 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	789b      	ldrb	r3, [r3, #2]
 8017d2a:	613b      	str	r3, [r7, #16]
 8017d2c:	e010      	b.n	8017d50 <sync_window+0x78>
					wsect += fs->fsize;
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	699b      	ldr	r3, [r3, #24]
 8017d32:	697a      	ldr	r2, [r7, #20]
 8017d34:	4413      	add	r3, r2
 8017d36:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	7858      	ldrb	r0, [r3, #1]
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017d42:	2301      	movs	r3, #1
 8017d44:	697a      	ldr	r2, [r7, #20]
 8017d46:	f7ff fd1d 	bl	8017784 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017d4a:	693b      	ldr	r3, [r7, #16]
 8017d4c:	3b01      	subs	r3, #1
 8017d4e:	613b      	str	r3, [r7, #16]
 8017d50:	693b      	ldr	r3, [r7, #16]
 8017d52:	2b01      	cmp	r3, #1
 8017d54:	d8eb      	bhi.n	8017d2e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d58:	4618      	mov	r0, r3
 8017d5a:	3718      	adds	r7, #24
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	bd80      	pop	{r7, pc}

08017d60 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b084      	sub	sp, #16
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	6078      	str	r0, [r7, #4]
 8017d68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d72:	683a      	ldr	r2, [r7, #0]
 8017d74:	429a      	cmp	r2, r3
 8017d76:	d01b      	beq.n	8017db0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017d78:	6878      	ldr	r0, [r7, #4]
 8017d7a:	f7ff ffad 	bl	8017cd8 <sync_window>
 8017d7e:	4603      	mov	r3, r0
 8017d80:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017d82:	7bfb      	ldrb	r3, [r7, #15]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d113      	bne.n	8017db0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	7858      	ldrb	r0, [r3, #1]
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017d92:	2301      	movs	r3, #1
 8017d94:	683a      	ldr	r2, [r7, #0]
 8017d96:	f7ff fcd5 	bl	8017744 <disk_read>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d004      	beq.n	8017daa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017da0:	f04f 33ff 	mov.w	r3, #4294967295
 8017da4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017da6:	2301      	movs	r3, #1
 8017da8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	683a      	ldr	r2, [r7, #0]
 8017dae:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8017db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017db2:	4618      	mov	r0, r3
 8017db4:	3710      	adds	r7, #16
 8017db6:	46bd      	mov	sp, r7
 8017db8:	bd80      	pop	{r7, pc}
	...

08017dbc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b084      	sub	sp, #16
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017dc4:	6878      	ldr	r0, [r7, #4]
 8017dc6:	f7ff ff87 	bl	8017cd8 <sync_window>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017dce:	7bfb      	ldrb	r3, [r7, #15]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d158      	bne.n	8017e86 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	781b      	ldrb	r3, [r3, #0]
 8017dd8:	2b03      	cmp	r3, #3
 8017dda:	d148      	bne.n	8017e6e <sync_fs+0xb2>
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	791b      	ldrb	r3, [r3, #4]
 8017de0:	2b01      	cmp	r3, #1
 8017de2:	d144      	bne.n	8017e6e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	3330      	adds	r3, #48	; 0x30
 8017de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017dec:	2100      	movs	r1, #0
 8017dee:	4618      	mov	r0, r3
 8017df0:	f7ff fda9 	bl	8017946 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	3330      	adds	r3, #48	; 0x30
 8017df8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017dfc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017e00:	4618      	mov	r0, r3
 8017e02:	f7ff fd38 	bl	8017876 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	3330      	adds	r3, #48	; 0x30
 8017e0a:	4921      	ldr	r1, [pc, #132]	; (8017e90 <sync_fs+0xd4>)
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	f7ff fd4d 	bl	80178ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	3330      	adds	r3, #48	; 0x30
 8017e16:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017e1a:	491e      	ldr	r1, [pc, #120]	; (8017e94 <sync_fs+0xd8>)
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f7ff fd45 	bl	80178ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	3330      	adds	r3, #48	; 0x30
 8017e26:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	691b      	ldr	r3, [r3, #16]
 8017e2e:	4619      	mov	r1, r3
 8017e30:	4610      	mov	r0, r2
 8017e32:	f7ff fd3b 	bl	80178ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	3330      	adds	r3, #48	; 0x30
 8017e3a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	68db      	ldr	r3, [r3, #12]
 8017e42:	4619      	mov	r1, r3
 8017e44:	4610      	mov	r0, r2
 8017e46:	f7ff fd31 	bl	80178ac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	69db      	ldr	r3, [r3, #28]
 8017e4e:	1c5a      	adds	r2, r3, #1
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	7858      	ldrb	r0, [r3, #1]
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e62:	2301      	movs	r3, #1
 8017e64:	f7ff fc8e 	bl	8017784 <disk_write>
			fs->fsi_flag = 0;
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	785b      	ldrb	r3, [r3, #1]
 8017e72:	2200      	movs	r2, #0
 8017e74:	2100      	movs	r1, #0
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7ff fca4 	bl	80177c4 <disk_ioctl>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d001      	beq.n	8017e86 <sync_fs+0xca>
 8017e82:	2301      	movs	r3, #1
 8017e84:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e88:	4618      	mov	r0, r3
 8017e8a:	3710      	adds	r7, #16
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	bd80      	pop	{r7, pc}
 8017e90:	41615252 	.word	0x41615252
 8017e94:	61417272 	.word	0x61417272

08017e98 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017e98:	b480      	push	{r7}
 8017e9a:	b083      	sub	sp, #12
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
 8017ea0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017ea2:	683b      	ldr	r3, [r7, #0]
 8017ea4:	3b02      	subs	r3, #2
 8017ea6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	695b      	ldr	r3, [r3, #20]
 8017eac:	3b02      	subs	r3, #2
 8017eae:	683a      	ldr	r2, [r7, #0]
 8017eb0:	429a      	cmp	r2, r3
 8017eb2:	d301      	bcc.n	8017eb8 <clust2sect+0x20>
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	e008      	b.n	8017eca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	895b      	ldrh	r3, [r3, #10]
 8017ebc:	461a      	mov	r2, r3
 8017ebe:	683b      	ldr	r3, [r7, #0]
 8017ec0:	fb03 f202 	mul.w	r2, r3, r2
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ec8:	4413      	add	r3, r2
}
 8017eca:	4618      	mov	r0, r3
 8017ecc:	370c      	adds	r7, #12
 8017ece:	46bd      	mov	sp, r7
 8017ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed4:	4770      	bx	lr

08017ed6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017ed6:	b580      	push	{r7, lr}
 8017ed8:	b086      	sub	sp, #24
 8017eda:	af00      	add	r7, sp, #0
 8017edc:	6078      	str	r0, [r7, #4]
 8017ede:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017ee6:	683b      	ldr	r3, [r7, #0]
 8017ee8:	2b01      	cmp	r3, #1
 8017eea:	d904      	bls.n	8017ef6 <get_fat+0x20>
 8017eec:	693b      	ldr	r3, [r7, #16]
 8017eee:	695b      	ldr	r3, [r3, #20]
 8017ef0:	683a      	ldr	r2, [r7, #0]
 8017ef2:	429a      	cmp	r2, r3
 8017ef4:	d302      	bcc.n	8017efc <get_fat+0x26>
		val = 1;	/* Internal error */
 8017ef6:	2301      	movs	r3, #1
 8017ef8:	617b      	str	r3, [r7, #20]
 8017efa:	e08c      	b.n	8018016 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017efc:	f04f 33ff 	mov.w	r3, #4294967295
 8017f00:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017f02:	693b      	ldr	r3, [r7, #16]
 8017f04:	781b      	ldrb	r3, [r3, #0]
 8017f06:	2b02      	cmp	r3, #2
 8017f08:	d045      	beq.n	8017f96 <get_fat+0xc0>
 8017f0a:	2b03      	cmp	r3, #3
 8017f0c:	d05d      	beq.n	8017fca <get_fat+0xf4>
 8017f0e:	2b01      	cmp	r3, #1
 8017f10:	d177      	bne.n	8018002 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017f12:	683b      	ldr	r3, [r7, #0]
 8017f14:	60fb      	str	r3, [r7, #12]
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	085b      	lsrs	r3, r3, #1
 8017f1a:	68fa      	ldr	r2, [r7, #12]
 8017f1c:	4413      	add	r3, r2
 8017f1e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017f20:	693b      	ldr	r3, [r7, #16]
 8017f22:	6a1a      	ldr	r2, [r3, #32]
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	0a5b      	lsrs	r3, r3, #9
 8017f28:	4413      	add	r3, r2
 8017f2a:	4619      	mov	r1, r3
 8017f2c:	6938      	ldr	r0, [r7, #16]
 8017f2e:	f7ff ff17 	bl	8017d60 <move_window>
 8017f32:	4603      	mov	r3, r0
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d167      	bne.n	8018008 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	1c5a      	adds	r2, r3, #1
 8017f3c:	60fa      	str	r2, [r7, #12]
 8017f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f42:	693a      	ldr	r2, [r7, #16]
 8017f44:	4413      	add	r3, r2
 8017f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f4a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017f4c:	693b      	ldr	r3, [r7, #16]
 8017f4e:	6a1a      	ldr	r2, [r3, #32]
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	0a5b      	lsrs	r3, r3, #9
 8017f54:	4413      	add	r3, r2
 8017f56:	4619      	mov	r1, r3
 8017f58:	6938      	ldr	r0, [r7, #16]
 8017f5a:	f7ff ff01 	bl	8017d60 <move_window>
 8017f5e:	4603      	mov	r3, r0
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d153      	bne.n	801800c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f6a:	693a      	ldr	r2, [r7, #16]
 8017f6c:	4413      	add	r3, r2
 8017f6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f72:	021b      	lsls	r3, r3, #8
 8017f74:	461a      	mov	r2, r3
 8017f76:	68bb      	ldr	r3, [r7, #8]
 8017f78:	4313      	orrs	r3, r2
 8017f7a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017f7c:	683b      	ldr	r3, [r7, #0]
 8017f7e:	f003 0301 	and.w	r3, r3, #1
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d002      	beq.n	8017f8c <get_fat+0xb6>
 8017f86:	68bb      	ldr	r3, [r7, #8]
 8017f88:	091b      	lsrs	r3, r3, #4
 8017f8a:	e002      	b.n	8017f92 <get_fat+0xbc>
 8017f8c:	68bb      	ldr	r3, [r7, #8]
 8017f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017f92:	617b      	str	r3, [r7, #20]
			break;
 8017f94:	e03f      	b.n	8018016 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017f96:	693b      	ldr	r3, [r7, #16]
 8017f98:	6a1a      	ldr	r2, [r3, #32]
 8017f9a:	683b      	ldr	r3, [r7, #0]
 8017f9c:	0a1b      	lsrs	r3, r3, #8
 8017f9e:	4413      	add	r3, r2
 8017fa0:	4619      	mov	r1, r3
 8017fa2:	6938      	ldr	r0, [r7, #16]
 8017fa4:	f7ff fedc 	bl	8017d60 <move_window>
 8017fa8:	4603      	mov	r3, r0
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d130      	bne.n	8018010 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017fae:	693b      	ldr	r3, [r7, #16]
 8017fb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017fb4:	683b      	ldr	r3, [r7, #0]
 8017fb6:	005b      	lsls	r3, r3, #1
 8017fb8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017fbc:	4413      	add	r3, r2
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	f7ff fc1e 	bl	8017800 <ld_word>
 8017fc4:	4603      	mov	r3, r0
 8017fc6:	617b      	str	r3, [r7, #20]
			break;
 8017fc8:	e025      	b.n	8018016 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017fca:	693b      	ldr	r3, [r7, #16]
 8017fcc:	6a1a      	ldr	r2, [r3, #32]
 8017fce:	683b      	ldr	r3, [r7, #0]
 8017fd0:	09db      	lsrs	r3, r3, #7
 8017fd2:	4413      	add	r3, r2
 8017fd4:	4619      	mov	r1, r3
 8017fd6:	6938      	ldr	r0, [r7, #16]
 8017fd8:	f7ff fec2 	bl	8017d60 <move_window>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d118      	bne.n	8018014 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017fe2:	693b      	ldr	r3, [r7, #16]
 8017fe4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017fe8:	683b      	ldr	r3, [r7, #0]
 8017fea:	009b      	lsls	r3, r3, #2
 8017fec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017ff0:	4413      	add	r3, r2
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	f7ff fc1c 	bl	8017830 <ld_dword>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017ffe:	617b      	str	r3, [r7, #20]
			break;
 8018000:	e009      	b.n	8018016 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8018002:	2301      	movs	r3, #1
 8018004:	617b      	str	r3, [r7, #20]
 8018006:	e006      	b.n	8018016 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018008:	bf00      	nop
 801800a:	e004      	b.n	8018016 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801800c:	bf00      	nop
 801800e:	e002      	b.n	8018016 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018010:	bf00      	nop
 8018012:	e000      	b.n	8018016 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018014:	bf00      	nop
		}
	}

	return val;
 8018016:	697b      	ldr	r3, [r7, #20]
}
 8018018:	4618      	mov	r0, r3
 801801a:	3718      	adds	r7, #24
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}

08018020 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8018020:	b590      	push	{r4, r7, lr}
 8018022:	b089      	sub	sp, #36	; 0x24
 8018024:	af00      	add	r7, sp, #0
 8018026:	60f8      	str	r0, [r7, #12]
 8018028:	60b9      	str	r1, [r7, #8]
 801802a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801802c:	2302      	movs	r3, #2
 801802e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8018030:	68bb      	ldr	r3, [r7, #8]
 8018032:	2b01      	cmp	r3, #1
 8018034:	f240 80d6 	bls.w	80181e4 <put_fat+0x1c4>
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	695b      	ldr	r3, [r3, #20]
 801803c:	68ba      	ldr	r2, [r7, #8]
 801803e:	429a      	cmp	r2, r3
 8018040:	f080 80d0 	bcs.w	80181e4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	781b      	ldrb	r3, [r3, #0]
 8018048:	2b02      	cmp	r3, #2
 801804a:	d073      	beq.n	8018134 <put_fat+0x114>
 801804c:	2b03      	cmp	r3, #3
 801804e:	f000 8091 	beq.w	8018174 <put_fat+0x154>
 8018052:	2b01      	cmp	r3, #1
 8018054:	f040 80c6 	bne.w	80181e4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	61bb      	str	r3, [r7, #24]
 801805c:	69bb      	ldr	r3, [r7, #24]
 801805e:	085b      	lsrs	r3, r3, #1
 8018060:	69ba      	ldr	r2, [r7, #24]
 8018062:	4413      	add	r3, r2
 8018064:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	6a1a      	ldr	r2, [r3, #32]
 801806a:	69bb      	ldr	r3, [r7, #24]
 801806c:	0a5b      	lsrs	r3, r3, #9
 801806e:	4413      	add	r3, r2
 8018070:	4619      	mov	r1, r3
 8018072:	68f8      	ldr	r0, [r7, #12]
 8018074:	f7ff fe74 	bl	8017d60 <move_window>
 8018078:	4603      	mov	r3, r0
 801807a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801807c:	7ffb      	ldrb	r3, [r7, #31]
 801807e:	2b00      	cmp	r3, #0
 8018080:	f040 80a9 	bne.w	80181d6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801808a:	69bb      	ldr	r3, [r7, #24]
 801808c:	1c59      	adds	r1, r3, #1
 801808e:	61b9      	str	r1, [r7, #24]
 8018090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018094:	4413      	add	r3, r2
 8018096:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8018098:	68bb      	ldr	r3, [r7, #8]
 801809a:	f003 0301 	and.w	r3, r3, #1
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d00d      	beq.n	80180be <put_fat+0x9e>
 80180a2:	697b      	ldr	r3, [r7, #20]
 80180a4:	781b      	ldrb	r3, [r3, #0]
 80180a6:	b25b      	sxtb	r3, r3
 80180a8:	f003 030f 	and.w	r3, r3, #15
 80180ac:	b25a      	sxtb	r2, r3
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	b2db      	uxtb	r3, r3
 80180b2:	011b      	lsls	r3, r3, #4
 80180b4:	b25b      	sxtb	r3, r3
 80180b6:	4313      	orrs	r3, r2
 80180b8:	b25b      	sxtb	r3, r3
 80180ba:	b2db      	uxtb	r3, r3
 80180bc:	e001      	b.n	80180c2 <put_fat+0xa2>
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	b2db      	uxtb	r3, r3
 80180c2:	697a      	ldr	r2, [r7, #20]
 80180c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	2201      	movs	r2, #1
 80180ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	6a1a      	ldr	r2, [r3, #32]
 80180d0:	69bb      	ldr	r3, [r7, #24]
 80180d2:	0a5b      	lsrs	r3, r3, #9
 80180d4:	4413      	add	r3, r2
 80180d6:	4619      	mov	r1, r3
 80180d8:	68f8      	ldr	r0, [r7, #12]
 80180da:	f7ff fe41 	bl	8017d60 <move_window>
 80180de:	4603      	mov	r3, r0
 80180e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80180e2:	7ffb      	ldrb	r3, [r7, #31]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d178      	bne.n	80181da <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80180ee:	69bb      	ldr	r3, [r7, #24]
 80180f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80180f4:	4413      	add	r3, r2
 80180f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80180f8:	68bb      	ldr	r3, [r7, #8]
 80180fa:	f003 0301 	and.w	r3, r3, #1
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d003      	beq.n	801810a <put_fat+0xea>
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	091b      	lsrs	r3, r3, #4
 8018106:	b2db      	uxtb	r3, r3
 8018108:	e00e      	b.n	8018128 <put_fat+0x108>
 801810a:	697b      	ldr	r3, [r7, #20]
 801810c:	781b      	ldrb	r3, [r3, #0]
 801810e:	b25b      	sxtb	r3, r3
 8018110:	f023 030f 	bic.w	r3, r3, #15
 8018114:	b25a      	sxtb	r2, r3
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	0a1b      	lsrs	r3, r3, #8
 801811a:	b25b      	sxtb	r3, r3
 801811c:	f003 030f 	and.w	r3, r3, #15
 8018120:	b25b      	sxtb	r3, r3
 8018122:	4313      	orrs	r3, r2
 8018124:	b25b      	sxtb	r3, r3
 8018126:	b2db      	uxtb	r3, r3
 8018128:	697a      	ldr	r2, [r7, #20]
 801812a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	2201      	movs	r2, #1
 8018130:	70da      	strb	r2, [r3, #3]
			break;
 8018132:	e057      	b.n	80181e4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	6a1a      	ldr	r2, [r3, #32]
 8018138:	68bb      	ldr	r3, [r7, #8]
 801813a:	0a1b      	lsrs	r3, r3, #8
 801813c:	4413      	add	r3, r2
 801813e:	4619      	mov	r1, r3
 8018140:	68f8      	ldr	r0, [r7, #12]
 8018142:	f7ff fe0d 	bl	8017d60 <move_window>
 8018146:	4603      	mov	r3, r0
 8018148:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801814a:	7ffb      	ldrb	r3, [r7, #31]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d146      	bne.n	80181de <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018156:	68bb      	ldr	r3, [r7, #8]
 8018158:	005b      	lsls	r3, r3, #1
 801815a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801815e:	4413      	add	r3, r2
 8018160:	687a      	ldr	r2, [r7, #4]
 8018162:	b292      	uxth	r2, r2
 8018164:	4611      	mov	r1, r2
 8018166:	4618      	mov	r0, r3
 8018168:	f7ff fb85 	bl	8017876 <st_word>
			fs->wflag = 1;
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	2201      	movs	r2, #1
 8018170:	70da      	strb	r2, [r3, #3]
			break;
 8018172:	e037      	b.n	80181e4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	6a1a      	ldr	r2, [r3, #32]
 8018178:	68bb      	ldr	r3, [r7, #8]
 801817a:	09db      	lsrs	r3, r3, #7
 801817c:	4413      	add	r3, r2
 801817e:	4619      	mov	r1, r3
 8018180:	68f8      	ldr	r0, [r7, #12]
 8018182:	f7ff fded 	bl	8017d60 <move_window>
 8018186:	4603      	mov	r3, r0
 8018188:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801818a:	7ffb      	ldrb	r3, [r7, #31]
 801818c:	2b00      	cmp	r3, #0
 801818e:	d128      	bne.n	80181e2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801819c:	68bb      	ldr	r3, [r7, #8]
 801819e:	009b      	lsls	r3, r3, #2
 80181a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80181a4:	4413      	add	r3, r2
 80181a6:	4618      	mov	r0, r3
 80181a8:	f7ff fb42 	bl	8017830 <ld_dword>
 80181ac:	4603      	mov	r3, r0
 80181ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80181b2:	4323      	orrs	r3, r4
 80181b4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80181bc:	68bb      	ldr	r3, [r7, #8]
 80181be:	009b      	lsls	r3, r3, #2
 80181c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80181c4:	4413      	add	r3, r2
 80181c6:	6879      	ldr	r1, [r7, #4]
 80181c8:	4618      	mov	r0, r3
 80181ca:	f7ff fb6f 	bl	80178ac <st_dword>
			fs->wflag = 1;
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	2201      	movs	r2, #1
 80181d2:	70da      	strb	r2, [r3, #3]
			break;
 80181d4:	e006      	b.n	80181e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80181d6:	bf00      	nop
 80181d8:	e004      	b.n	80181e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80181da:	bf00      	nop
 80181dc:	e002      	b.n	80181e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80181de:	bf00      	nop
 80181e0:	e000      	b.n	80181e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80181e2:	bf00      	nop
		}
	}
	return res;
 80181e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80181e6:	4618      	mov	r0, r3
 80181e8:	3724      	adds	r7, #36	; 0x24
 80181ea:	46bd      	mov	sp, r7
 80181ec:	bd90      	pop	{r4, r7, pc}

080181ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80181ee:	b580      	push	{r7, lr}
 80181f0:	b088      	sub	sp, #32
 80181f2:	af00      	add	r7, sp, #0
 80181f4:	60f8      	str	r0, [r7, #12]
 80181f6:	60b9      	str	r1, [r7, #8]
 80181f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80181fa:	2300      	movs	r3, #0
 80181fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8018204:	68bb      	ldr	r3, [r7, #8]
 8018206:	2b01      	cmp	r3, #1
 8018208:	d904      	bls.n	8018214 <remove_chain+0x26>
 801820a:	69bb      	ldr	r3, [r7, #24]
 801820c:	695b      	ldr	r3, [r3, #20]
 801820e:	68ba      	ldr	r2, [r7, #8]
 8018210:	429a      	cmp	r2, r3
 8018212:	d301      	bcc.n	8018218 <remove_chain+0x2a>
 8018214:	2302      	movs	r3, #2
 8018216:	e04b      	b.n	80182b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	2b00      	cmp	r3, #0
 801821c:	d00c      	beq.n	8018238 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801821e:	f04f 32ff 	mov.w	r2, #4294967295
 8018222:	6879      	ldr	r1, [r7, #4]
 8018224:	69b8      	ldr	r0, [r7, #24]
 8018226:	f7ff fefb 	bl	8018020 <put_fat>
 801822a:	4603      	mov	r3, r0
 801822c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801822e:	7ffb      	ldrb	r3, [r7, #31]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d001      	beq.n	8018238 <remove_chain+0x4a>
 8018234:	7ffb      	ldrb	r3, [r7, #31]
 8018236:	e03b      	b.n	80182b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8018238:	68b9      	ldr	r1, [r7, #8]
 801823a:	68f8      	ldr	r0, [r7, #12]
 801823c:	f7ff fe4b 	bl	8017ed6 <get_fat>
 8018240:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8018242:	697b      	ldr	r3, [r7, #20]
 8018244:	2b00      	cmp	r3, #0
 8018246:	d031      	beq.n	80182ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8018248:	697b      	ldr	r3, [r7, #20]
 801824a:	2b01      	cmp	r3, #1
 801824c:	d101      	bne.n	8018252 <remove_chain+0x64>
 801824e:	2302      	movs	r3, #2
 8018250:	e02e      	b.n	80182b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8018252:	697b      	ldr	r3, [r7, #20]
 8018254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018258:	d101      	bne.n	801825e <remove_chain+0x70>
 801825a:	2301      	movs	r3, #1
 801825c:	e028      	b.n	80182b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801825e:	2200      	movs	r2, #0
 8018260:	68b9      	ldr	r1, [r7, #8]
 8018262:	69b8      	ldr	r0, [r7, #24]
 8018264:	f7ff fedc 	bl	8018020 <put_fat>
 8018268:	4603      	mov	r3, r0
 801826a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801826c:	7ffb      	ldrb	r3, [r7, #31]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d001      	beq.n	8018276 <remove_chain+0x88>
 8018272:	7ffb      	ldrb	r3, [r7, #31]
 8018274:	e01c      	b.n	80182b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8018276:	69bb      	ldr	r3, [r7, #24]
 8018278:	691a      	ldr	r2, [r3, #16]
 801827a:	69bb      	ldr	r3, [r7, #24]
 801827c:	695b      	ldr	r3, [r3, #20]
 801827e:	3b02      	subs	r3, #2
 8018280:	429a      	cmp	r2, r3
 8018282:	d20b      	bcs.n	801829c <remove_chain+0xae>
			fs->free_clst++;
 8018284:	69bb      	ldr	r3, [r7, #24]
 8018286:	691b      	ldr	r3, [r3, #16]
 8018288:	1c5a      	adds	r2, r3, #1
 801828a:	69bb      	ldr	r3, [r7, #24]
 801828c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801828e:	69bb      	ldr	r3, [r7, #24]
 8018290:	791b      	ldrb	r3, [r3, #4]
 8018292:	f043 0301 	orr.w	r3, r3, #1
 8018296:	b2da      	uxtb	r2, r3
 8018298:	69bb      	ldr	r3, [r7, #24]
 801829a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801829c:	697b      	ldr	r3, [r7, #20]
 801829e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80182a0:	69bb      	ldr	r3, [r7, #24]
 80182a2:	695b      	ldr	r3, [r3, #20]
 80182a4:	68ba      	ldr	r2, [r7, #8]
 80182a6:	429a      	cmp	r2, r3
 80182a8:	d3c6      	bcc.n	8018238 <remove_chain+0x4a>
 80182aa:	e000      	b.n	80182ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80182ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80182ae:	2300      	movs	r3, #0
}
 80182b0:	4618      	mov	r0, r3
 80182b2:	3720      	adds	r7, #32
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}

080182b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b088      	sub	sp, #32
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
 80182c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80182c8:	683b      	ldr	r3, [r7, #0]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d10d      	bne.n	80182ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80182ce:	693b      	ldr	r3, [r7, #16]
 80182d0:	68db      	ldr	r3, [r3, #12]
 80182d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80182d4:	69bb      	ldr	r3, [r7, #24]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d004      	beq.n	80182e4 <create_chain+0x2c>
 80182da:	693b      	ldr	r3, [r7, #16]
 80182dc:	695b      	ldr	r3, [r3, #20]
 80182de:	69ba      	ldr	r2, [r7, #24]
 80182e0:	429a      	cmp	r2, r3
 80182e2:	d31b      	bcc.n	801831c <create_chain+0x64>
 80182e4:	2301      	movs	r3, #1
 80182e6:	61bb      	str	r3, [r7, #24]
 80182e8:	e018      	b.n	801831c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80182ea:	6839      	ldr	r1, [r7, #0]
 80182ec:	6878      	ldr	r0, [r7, #4]
 80182ee:	f7ff fdf2 	bl	8017ed6 <get_fat>
 80182f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	2b01      	cmp	r3, #1
 80182f8:	d801      	bhi.n	80182fe <create_chain+0x46>
 80182fa:	2301      	movs	r3, #1
 80182fc:	e070      	b.n	80183e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018304:	d101      	bne.n	801830a <create_chain+0x52>
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	e06a      	b.n	80183e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801830a:	693b      	ldr	r3, [r7, #16]
 801830c:	695b      	ldr	r3, [r3, #20]
 801830e:	68fa      	ldr	r2, [r7, #12]
 8018310:	429a      	cmp	r2, r3
 8018312:	d201      	bcs.n	8018318 <create_chain+0x60>
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	e063      	b.n	80183e0 <create_chain+0x128>
		scl = clst;
 8018318:	683b      	ldr	r3, [r7, #0]
 801831a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801831c:	69bb      	ldr	r3, [r7, #24]
 801831e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8018320:	69fb      	ldr	r3, [r7, #28]
 8018322:	3301      	adds	r3, #1
 8018324:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8018326:	693b      	ldr	r3, [r7, #16]
 8018328:	695b      	ldr	r3, [r3, #20]
 801832a:	69fa      	ldr	r2, [r7, #28]
 801832c:	429a      	cmp	r2, r3
 801832e:	d307      	bcc.n	8018340 <create_chain+0x88>
				ncl = 2;
 8018330:	2302      	movs	r3, #2
 8018332:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8018334:	69fa      	ldr	r2, [r7, #28]
 8018336:	69bb      	ldr	r3, [r7, #24]
 8018338:	429a      	cmp	r2, r3
 801833a:	d901      	bls.n	8018340 <create_chain+0x88>
 801833c:	2300      	movs	r3, #0
 801833e:	e04f      	b.n	80183e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8018340:	69f9      	ldr	r1, [r7, #28]
 8018342:	6878      	ldr	r0, [r7, #4]
 8018344:	f7ff fdc7 	bl	8017ed6 <get_fat>
 8018348:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d00e      	beq.n	801836e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	2b01      	cmp	r3, #1
 8018354:	d003      	beq.n	801835e <create_chain+0xa6>
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801835c:	d101      	bne.n	8018362 <create_chain+0xaa>
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	e03e      	b.n	80183e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8018362:	69fa      	ldr	r2, [r7, #28]
 8018364:	69bb      	ldr	r3, [r7, #24]
 8018366:	429a      	cmp	r2, r3
 8018368:	d1da      	bne.n	8018320 <create_chain+0x68>
 801836a:	2300      	movs	r3, #0
 801836c:	e038      	b.n	80183e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801836e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8018370:	f04f 32ff 	mov.w	r2, #4294967295
 8018374:	69f9      	ldr	r1, [r7, #28]
 8018376:	6938      	ldr	r0, [r7, #16]
 8018378:	f7ff fe52 	bl	8018020 <put_fat>
 801837c:	4603      	mov	r3, r0
 801837e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8018380:	7dfb      	ldrb	r3, [r7, #23]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d109      	bne.n	801839a <create_chain+0xe2>
 8018386:	683b      	ldr	r3, [r7, #0]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d006      	beq.n	801839a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801838c:	69fa      	ldr	r2, [r7, #28]
 801838e:	6839      	ldr	r1, [r7, #0]
 8018390:	6938      	ldr	r0, [r7, #16]
 8018392:	f7ff fe45 	bl	8018020 <put_fat>
 8018396:	4603      	mov	r3, r0
 8018398:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801839a:	7dfb      	ldrb	r3, [r7, #23]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d116      	bne.n	80183ce <create_chain+0x116>
		fs->last_clst = ncl;
 80183a0:	693b      	ldr	r3, [r7, #16]
 80183a2:	69fa      	ldr	r2, [r7, #28]
 80183a4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80183a6:	693b      	ldr	r3, [r7, #16]
 80183a8:	691a      	ldr	r2, [r3, #16]
 80183aa:	693b      	ldr	r3, [r7, #16]
 80183ac:	695b      	ldr	r3, [r3, #20]
 80183ae:	3b02      	subs	r3, #2
 80183b0:	429a      	cmp	r2, r3
 80183b2:	d804      	bhi.n	80183be <create_chain+0x106>
 80183b4:	693b      	ldr	r3, [r7, #16]
 80183b6:	691b      	ldr	r3, [r3, #16]
 80183b8:	1e5a      	subs	r2, r3, #1
 80183ba:	693b      	ldr	r3, [r7, #16]
 80183bc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80183be:	693b      	ldr	r3, [r7, #16]
 80183c0:	791b      	ldrb	r3, [r3, #4]
 80183c2:	f043 0301 	orr.w	r3, r3, #1
 80183c6:	b2da      	uxtb	r2, r3
 80183c8:	693b      	ldr	r3, [r7, #16]
 80183ca:	711a      	strb	r2, [r3, #4]
 80183cc:	e007      	b.n	80183de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80183ce:	7dfb      	ldrb	r3, [r7, #23]
 80183d0:	2b01      	cmp	r3, #1
 80183d2:	d102      	bne.n	80183da <create_chain+0x122>
 80183d4:	f04f 33ff 	mov.w	r3, #4294967295
 80183d8:	e000      	b.n	80183dc <create_chain+0x124>
 80183da:	2301      	movs	r3, #1
 80183dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80183de:	69fb      	ldr	r3, [r7, #28]
}
 80183e0:	4618      	mov	r0, r3
 80183e2:	3720      	adds	r7, #32
 80183e4:	46bd      	mov	sp, r7
 80183e6:	bd80      	pop	{r7, pc}

080183e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80183e8:	b480      	push	{r7}
 80183ea:	b087      	sub	sp, #28
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
 80183f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183fc:	3304      	adds	r3, #4
 80183fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8018400:	683b      	ldr	r3, [r7, #0]
 8018402:	0a5b      	lsrs	r3, r3, #9
 8018404:	68fa      	ldr	r2, [r7, #12]
 8018406:	8952      	ldrh	r2, [r2, #10]
 8018408:	fbb3 f3f2 	udiv	r3, r3, r2
 801840c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801840e:	693b      	ldr	r3, [r7, #16]
 8018410:	1d1a      	adds	r2, r3, #4
 8018412:	613a      	str	r2, [r7, #16]
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8018418:	68bb      	ldr	r3, [r7, #8]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d101      	bne.n	8018422 <clmt_clust+0x3a>
 801841e:	2300      	movs	r3, #0
 8018420:	e010      	b.n	8018444 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8018422:	697a      	ldr	r2, [r7, #20]
 8018424:	68bb      	ldr	r3, [r7, #8]
 8018426:	429a      	cmp	r2, r3
 8018428:	d307      	bcc.n	801843a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801842a:	697a      	ldr	r2, [r7, #20]
 801842c:	68bb      	ldr	r3, [r7, #8]
 801842e:	1ad3      	subs	r3, r2, r3
 8018430:	617b      	str	r3, [r7, #20]
 8018432:	693b      	ldr	r3, [r7, #16]
 8018434:	3304      	adds	r3, #4
 8018436:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018438:	e7e9      	b.n	801840e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801843a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801843c:	693b      	ldr	r3, [r7, #16]
 801843e:	681a      	ldr	r2, [r3, #0]
 8018440:	697b      	ldr	r3, [r7, #20]
 8018442:	4413      	add	r3, r2
}
 8018444:	4618      	mov	r0, r3
 8018446:	371c      	adds	r7, #28
 8018448:	46bd      	mov	sp, r7
 801844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844e:	4770      	bx	lr

08018450 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8018450:	b580      	push	{r7, lr}
 8018452:	b086      	sub	sp, #24
 8018454:	af00      	add	r7, sp, #0
 8018456:	6078      	str	r0, [r7, #4]
 8018458:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8018460:	683b      	ldr	r3, [r7, #0]
 8018462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018466:	d204      	bcs.n	8018472 <dir_sdi+0x22>
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	f003 031f 	and.w	r3, r3, #31
 801846e:	2b00      	cmp	r3, #0
 8018470:	d001      	beq.n	8018476 <dir_sdi+0x26>
		return FR_INT_ERR;
 8018472:	2302      	movs	r3, #2
 8018474:	e063      	b.n	801853e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	683a      	ldr	r2, [r7, #0]
 801847a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	689b      	ldr	r3, [r3, #8]
 8018480:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8018482:	697b      	ldr	r3, [r7, #20]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d106      	bne.n	8018496 <dir_sdi+0x46>
 8018488:	693b      	ldr	r3, [r7, #16]
 801848a:	781b      	ldrb	r3, [r3, #0]
 801848c:	2b02      	cmp	r3, #2
 801848e:	d902      	bls.n	8018496 <dir_sdi+0x46>
		clst = fs->dirbase;
 8018490:	693b      	ldr	r3, [r7, #16]
 8018492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018494:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8018496:	697b      	ldr	r3, [r7, #20]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d10c      	bne.n	80184b6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801849c:	683b      	ldr	r3, [r7, #0]
 801849e:	095b      	lsrs	r3, r3, #5
 80184a0:	693a      	ldr	r2, [r7, #16]
 80184a2:	8912      	ldrh	r2, [r2, #8]
 80184a4:	4293      	cmp	r3, r2
 80184a6:	d301      	bcc.n	80184ac <dir_sdi+0x5c>
 80184a8:	2302      	movs	r3, #2
 80184aa:	e048      	b.n	801853e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80184ac:	693b      	ldr	r3, [r7, #16]
 80184ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	61da      	str	r2, [r3, #28]
 80184b4:	e029      	b.n	801850a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80184b6:	693b      	ldr	r3, [r7, #16]
 80184b8:	895b      	ldrh	r3, [r3, #10]
 80184ba:	025b      	lsls	r3, r3, #9
 80184bc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80184be:	e019      	b.n	80184f4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	6979      	ldr	r1, [r7, #20]
 80184c4:	4618      	mov	r0, r3
 80184c6:	f7ff fd06 	bl	8017ed6 <get_fat>
 80184ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80184cc:	697b      	ldr	r3, [r7, #20]
 80184ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184d2:	d101      	bne.n	80184d8 <dir_sdi+0x88>
 80184d4:	2301      	movs	r3, #1
 80184d6:	e032      	b.n	801853e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80184d8:	697b      	ldr	r3, [r7, #20]
 80184da:	2b01      	cmp	r3, #1
 80184dc:	d904      	bls.n	80184e8 <dir_sdi+0x98>
 80184de:	693b      	ldr	r3, [r7, #16]
 80184e0:	695b      	ldr	r3, [r3, #20]
 80184e2:	697a      	ldr	r2, [r7, #20]
 80184e4:	429a      	cmp	r2, r3
 80184e6:	d301      	bcc.n	80184ec <dir_sdi+0x9c>
 80184e8:	2302      	movs	r3, #2
 80184ea:	e028      	b.n	801853e <dir_sdi+0xee>
			ofs -= csz;
 80184ec:	683a      	ldr	r2, [r7, #0]
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	1ad3      	subs	r3, r2, r3
 80184f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80184f4:	683a      	ldr	r2, [r7, #0]
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	429a      	cmp	r2, r3
 80184fa:	d2e1      	bcs.n	80184c0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80184fc:	6979      	ldr	r1, [r7, #20]
 80184fe:	6938      	ldr	r0, [r7, #16]
 8018500:	f7ff fcca 	bl	8017e98 <clust2sect>
 8018504:	4602      	mov	r2, r0
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	697a      	ldr	r2, [r7, #20]
 801850e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	69db      	ldr	r3, [r3, #28]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d101      	bne.n	801851c <dir_sdi+0xcc>
 8018518:	2302      	movs	r3, #2
 801851a:	e010      	b.n	801853e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	69da      	ldr	r2, [r3, #28]
 8018520:	683b      	ldr	r3, [r7, #0]
 8018522:	0a5b      	lsrs	r3, r3, #9
 8018524:	441a      	add	r2, r3
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801852a:	693b      	ldr	r3, [r7, #16]
 801852c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018530:	683b      	ldr	r3, [r7, #0]
 8018532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018536:	441a      	add	r2, r3
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801853c:	2300      	movs	r3, #0
}
 801853e:	4618      	mov	r0, r3
 8018540:	3718      	adds	r7, #24
 8018542:	46bd      	mov	sp, r7
 8018544:	bd80      	pop	{r7, pc}

08018546 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8018546:	b580      	push	{r7, lr}
 8018548:	b086      	sub	sp, #24
 801854a:	af00      	add	r7, sp, #0
 801854c:	6078      	str	r0, [r7, #4]
 801854e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	695b      	ldr	r3, [r3, #20]
 801855a:	3320      	adds	r3, #32
 801855c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	69db      	ldr	r3, [r3, #28]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d003      	beq.n	801856e <dir_next+0x28>
 8018566:	68bb      	ldr	r3, [r7, #8]
 8018568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801856c:	d301      	bcc.n	8018572 <dir_next+0x2c>
 801856e:	2304      	movs	r3, #4
 8018570:	e0aa      	b.n	80186c8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8018572:	68bb      	ldr	r3, [r7, #8]
 8018574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018578:	2b00      	cmp	r3, #0
 801857a:	f040 8098 	bne.w	80186ae <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	69db      	ldr	r3, [r3, #28]
 8018582:	1c5a      	adds	r2, r3, #1
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	699b      	ldr	r3, [r3, #24]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d10b      	bne.n	80185a8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018590:	68bb      	ldr	r3, [r7, #8]
 8018592:	095b      	lsrs	r3, r3, #5
 8018594:	68fa      	ldr	r2, [r7, #12]
 8018596:	8912      	ldrh	r2, [r2, #8]
 8018598:	4293      	cmp	r3, r2
 801859a:	f0c0 8088 	bcc.w	80186ae <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	2200      	movs	r2, #0
 80185a2:	61da      	str	r2, [r3, #28]
 80185a4:	2304      	movs	r3, #4
 80185a6:	e08f      	b.n	80186c8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80185a8:	68bb      	ldr	r3, [r7, #8]
 80185aa:	0a5b      	lsrs	r3, r3, #9
 80185ac:	68fa      	ldr	r2, [r7, #12]
 80185ae:	8952      	ldrh	r2, [r2, #10]
 80185b0:	3a01      	subs	r2, #1
 80185b2:	4013      	ands	r3, r2
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d17a      	bne.n	80186ae <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80185b8:	687a      	ldr	r2, [r7, #4]
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	699b      	ldr	r3, [r3, #24]
 80185be:	4619      	mov	r1, r3
 80185c0:	4610      	mov	r0, r2
 80185c2:	f7ff fc88 	bl	8017ed6 <get_fat>
 80185c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80185c8:	697b      	ldr	r3, [r7, #20]
 80185ca:	2b01      	cmp	r3, #1
 80185cc:	d801      	bhi.n	80185d2 <dir_next+0x8c>
 80185ce:	2302      	movs	r3, #2
 80185d0:	e07a      	b.n	80186c8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80185d2:	697b      	ldr	r3, [r7, #20]
 80185d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185d8:	d101      	bne.n	80185de <dir_next+0x98>
 80185da:	2301      	movs	r3, #1
 80185dc:	e074      	b.n	80186c8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	695b      	ldr	r3, [r3, #20]
 80185e2:	697a      	ldr	r2, [r7, #20]
 80185e4:	429a      	cmp	r2, r3
 80185e6:	d358      	bcc.n	801869a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80185e8:	683b      	ldr	r3, [r7, #0]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d104      	bne.n	80185f8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	2200      	movs	r2, #0
 80185f2:	61da      	str	r2, [r3, #28]
 80185f4:	2304      	movs	r3, #4
 80185f6:	e067      	b.n	80186c8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80185f8:	687a      	ldr	r2, [r7, #4]
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	699b      	ldr	r3, [r3, #24]
 80185fe:	4619      	mov	r1, r3
 8018600:	4610      	mov	r0, r2
 8018602:	f7ff fe59 	bl	80182b8 <create_chain>
 8018606:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d101      	bne.n	8018612 <dir_next+0xcc>
 801860e:	2307      	movs	r3, #7
 8018610:	e05a      	b.n	80186c8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8018612:	697b      	ldr	r3, [r7, #20]
 8018614:	2b01      	cmp	r3, #1
 8018616:	d101      	bne.n	801861c <dir_next+0xd6>
 8018618:	2302      	movs	r3, #2
 801861a:	e055      	b.n	80186c8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801861c:	697b      	ldr	r3, [r7, #20]
 801861e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018622:	d101      	bne.n	8018628 <dir_next+0xe2>
 8018624:	2301      	movs	r3, #1
 8018626:	e04f      	b.n	80186c8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8018628:	68f8      	ldr	r0, [r7, #12]
 801862a:	f7ff fb55 	bl	8017cd8 <sync_window>
 801862e:	4603      	mov	r3, r0
 8018630:	2b00      	cmp	r3, #0
 8018632:	d001      	beq.n	8018638 <dir_next+0xf2>
 8018634:	2301      	movs	r3, #1
 8018636:	e047      	b.n	80186c8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	3330      	adds	r3, #48	; 0x30
 801863c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018640:	2100      	movs	r1, #0
 8018642:	4618      	mov	r0, r3
 8018644:	f7ff f97f 	bl	8017946 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018648:	2300      	movs	r3, #0
 801864a:	613b      	str	r3, [r7, #16]
 801864c:	6979      	ldr	r1, [r7, #20]
 801864e:	68f8      	ldr	r0, [r7, #12]
 8018650:	f7ff fc22 	bl	8017e98 <clust2sect>
 8018654:	4602      	mov	r2, r0
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	62da      	str	r2, [r3, #44]	; 0x2c
 801865a:	e012      	b.n	8018682 <dir_next+0x13c>
						fs->wflag = 1;
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	2201      	movs	r2, #1
 8018660:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8018662:	68f8      	ldr	r0, [r7, #12]
 8018664:	f7ff fb38 	bl	8017cd8 <sync_window>
 8018668:	4603      	mov	r3, r0
 801866a:	2b00      	cmp	r3, #0
 801866c:	d001      	beq.n	8018672 <dir_next+0x12c>
 801866e:	2301      	movs	r3, #1
 8018670:	e02a      	b.n	80186c8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018672:	693b      	ldr	r3, [r7, #16]
 8018674:	3301      	adds	r3, #1
 8018676:	613b      	str	r3, [r7, #16]
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801867c:	1c5a      	adds	r2, r3, #1
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	62da      	str	r2, [r3, #44]	; 0x2c
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	895b      	ldrh	r3, [r3, #10]
 8018686:	461a      	mov	r2, r3
 8018688:	693b      	ldr	r3, [r7, #16]
 801868a:	4293      	cmp	r3, r2
 801868c:	d3e6      	bcc.n	801865c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018692:	693b      	ldr	r3, [r7, #16]
 8018694:	1ad2      	subs	r2, r2, r3
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	697a      	ldr	r2, [r7, #20]
 801869e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80186a0:	6979      	ldr	r1, [r7, #20]
 80186a2:	68f8      	ldr	r0, [r7, #12]
 80186a4:	f7ff fbf8 	bl	8017e98 <clust2sect>
 80186a8:	4602      	mov	r2, r0
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	68ba      	ldr	r2, [r7, #8]
 80186b2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80186ba:	68bb      	ldr	r3, [r7, #8]
 80186bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80186c0:	441a      	add	r2, r3
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80186c6:	2300      	movs	r3, #0
}
 80186c8:	4618      	mov	r0, r3
 80186ca:	3718      	adds	r7, #24
 80186cc:	46bd      	mov	sp, r7
 80186ce:	bd80      	pop	{r7, pc}

080186d0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b086      	sub	sp, #24
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
 80186d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80186e0:	2100      	movs	r1, #0
 80186e2:	6878      	ldr	r0, [r7, #4]
 80186e4:	f7ff feb4 	bl	8018450 <dir_sdi>
 80186e8:	4603      	mov	r3, r0
 80186ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80186ec:	7dfb      	ldrb	r3, [r7, #23]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d12b      	bne.n	801874a <dir_alloc+0x7a>
		n = 0;
 80186f2:	2300      	movs	r3, #0
 80186f4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	69db      	ldr	r3, [r3, #28]
 80186fa:	4619      	mov	r1, r3
 80186fc:	68f8      	ldr	r0, [r7, #12]
 80186fe:	f7ff fb2f 	bl	8017d60 <move_window>
 8018702:	4603      	mov	r3, r0
 8018704:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018706:	7dfb      	ldrb	r3, [r7, #23]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d11d      	bne.n	8018748 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	6a1b      	ldr	r3, [r3, #32]
 8018710:	781b      	ldrb	r3, [r3, #0]
 8018712:	2be5      	cmp	r3, #229	; 0xe5
 8018714:	d004      	beq.n	8018720 <dir_alloc+0x50>
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	6a1b      	ldr	r3, [r3, #32]
 801871a:	781b      	ldrb	r3, [r3, #0]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d107      	bne.n	8018730 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8018720:	693b      	ldr	r3, [r7, #16]
 8018722:	3301      	adds	r3, #1
 8018724:	613b      	str	r3, [r7, #16]
 8018726:	693a      	ldr	r2, [r7, #16]
 8018728:	683b      	ldr	r3, [r7, #0]
 801872a:	429a      	cmp	r2, r3
 801872c:	d102      	bne.n	8018734 <dir_alloc+0x64>
 801872e:	e00c      	b.n	801874a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8018730:	2300      	movs	r3, #0
 8018732:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8018734:	2101      	movs	r1, #1
 8018736:	6878      	ldr	r0, [r7, #4]
 8018738:	f7ff ff05 	bl	8018546 <dir_next>
 801873c:	4603      	mov	r3, r0
 801873e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8018740:	7dfb      	ldrb	r3, [r7, #23]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d0d7      	beq.n	80186f6 <dir_alloc+0x26>
 8018746:	e000      	b.n	801874a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8018748:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801874a:	7dfb      	ldrb	r3, [r7, #23]
 801874c:	2b04      	cmp	r3, #4
 801874e:	d101      	bne.n	8018754 <dir_alloc+0x84>
 8018750:	2307      	movs	r3, #7
 8018752:	75fb      	strb	r3, [r7, #23]
	return res;
 8018754:	7dfb      	ldrb	r3, [r7, #23]
}
 8018756:	4618      	mov	r0, r3
 8018758:	3718      	adds	r7, #24
 801875a:	46bd      	mov	sp, r7
 801875c:	bd80      	pop	{r7, pc}

0801875e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801875e:	b580      	push	{r7, lr}
 8018760:	b084      	sub	sp, #16
 8018762:	af00      	add	r7, sp, #0
 8018764:	6078      	str	r0, [r7, #4]
 8018766:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8018768:	683b      	ldr	r3, [r7, #0]
 801876a:	331a      	adds	r3, #26
 801876c:	4618      	mov	r0, r3
 801876e:	f7ff f847 	bl	8017800 <ld_word>
 8018772:	4603      	mov	r3, r0
 8018774:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	781b      	ldrb	r3, [r3, #0]
 801877a:	2b03      	cmp	r3, #3
 801877c:	d109      	bne.n	8018792 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801877e:	683b      	ldr	r3, [r7, #0]
 8018780:	3314      	adds	r3, #20
 8018782:	4618      	mov	r0, r3
 8018784:	f7ff f83c 	bl	8017800 <ld_word>
 8018788:	4603      	mov	r3, r0
 801878a:	041b      	lsls	r3, r3, #16
 801878c:	68fa      	ldr	r2, [r7, #12]
 801878e:	4313      	orrs	r3, r2
 8018790:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8018792:	68fb      	ldr	r3, [r7, #12]
}
 8018794:	4618      	mov	r0, r3
 8018796:	3710      	adds	r7, #16
 8018798:	46bd      	mov	sp, r7
 801879a:	bd80      	pop	{r7, pc}

0801879c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b084      	sub	sp, #16
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	60f8      	str	r0, [r7, #12]
 80187a4:	60b9      	str	r1, [r7, #8]
 80187a6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80187a8:	68bb      	ldr	r3, [r7, #8]
 80187aa:	331a      	adds	r3, #26
 80187ac:	687a      	ldr	r2, [r7, #4]
 80187ae:	b292      	uxth	r2, r2
 80187b0:	4611      	mov	r1, r2
 80187b2:	4618      	mov	r0, r3
 80187b4:	f7ff f85f 	bl	8017876 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	781b      	ldrb	r3, [r3, #0]
 80187bc:	2b03      	cmp	r3, #3
 80187be:	d109      	bne.n	80187d4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	f103 0214 	add.w	r2, r3, #20
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	0c1b      	lsrs	r3, r3, #16
 80187ca:	b29b      	uxth	r3, r3
 80187cc:	4619      	mov	r1, r3
 80187ce:	4610      	mov	r0, r2
 80187d0:	f7ff f851 	bl	8017876 <st_word>
	}
}
 80187d4:	bf00      	nop
 80187d6:	3710      	adds	r7, #16
 80187d8:	46bd      	mov	sp, r7
 80187da:	bd80      	pop	{r7, pc}

080187dc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b086      	sub	sp, #24
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80187ea:	2100      	movs	r1, #0
 80187ec:	6878      	ldr	r0, [r7, #4]
 80187ee:	f7ff fe2f 	bl	8018450 <dir_sdi>
 80187f2:	4603      	mov	r3, r0
 80187f4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80187f6:	7dfb      	ldrb	r3, [r7, #23]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d001      	beq.n	8018800 <dir_find+0x24>
 80187fc:	7dfb      	ldrb	r3, [r7, #23]
 80187fe:	e03e      	b.n	801887e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	69db      	ldr	r3, [r3, #28]
 8018804:	4619      	mov	r1, r3
 8018806:	6938      	ldr	r0, [r7, #16]
 8018808:	f7ff faaa 	bl	8017d60 <move_window>
 801880c:	4603      	mov	r3, r0
 801880e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8018810:	7dfb      	ldrb	r3, [r7, #23]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d12f      	bne.n	8018876 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	6a1b      	ldr	r3, [r3, #32]
 801881a:	781b      	ldrb	r3, [r3, #0]
 801881c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801881e:	7bfb      	ldrb	r3, [r7, #15]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d102      	bne.n	801882a <dir_find+0x4e>
 8018824:	2304      	movs	r3, #4
 8018826:	75fb      	strb	r3, [r7, #23]
 8018828:	e028      	b.n	801887c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	6a1b      	ldr	r3, [r3, #32]
 801882e:	330b      	adds	r3, #11
 8018830:	781b      	ldrb	r3, [r3, #0]
 8018832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018836:	b2da      	uxtb	r2, r3
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	6a1b      	ldr	r3, [r3, #32]
 8018840:	330b      	adds	r3, #11
 8018842:	781b      	ldrb	r3, [r3, #0]
 8018844:	f003 0308 	and.w	r3, r3, #8
 8018848:	2b00      	cmp	r3, #0
 801884a:	d10a      	bne.n	8018862 <dir_find+0x86>
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	6a18      	ldr	r0, [r3, #32]
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	3324      	adds	r3, #36	; 0x24
 8018854:	220b      	movs	r2, #11
 8018856:	4619      	mov	r1, r3
 8018858:	f7ff f88f 	bl	801797a <mem_cmp>
 801885c:	4603      	mov	r3, r0
 801885e:	2b00      	cmp	r3, #0
 8018860:	d00b      	beq.n	801887a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018862:	2100      	movs	r1, #0
 8018864:	6878      	ldr	r0, [r7, #4]
 8018866:	f7ff fe6e 	bl	8018546 <dir_next>
 801886a:	4603      	mov	r3, r0
 801886c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801886e:	7dfb      	ldrb	r3, [r7, #23]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d0c5      	beq.n	8018800 <dir_find+0x24>
 8018874:	e002      	b.n	801887c <dir_find+0xa0>
		if (res != FR_OK) break;
 8018876:	bf00      	nop
 8018878:	e000      	b.n	801887c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801887a:	bf00      	nop

	return res;
 801887c:	7dfb      	ldrb	r3, [r7, #23]
}
 801887e:	4618      	mov	r0, r3
 8018880:	3718      	adds	r7, #24
 8018882:	46bd      	mov	sp, r7
 8018884:	bd80      	pop	{r7, pc}

08018886 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018886:	b580      	push	{r7, lr}
 8018888:	b084      	sub	sp, #16
 801888a:	af00      	add	r7, sp, #0
 801888c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8018894:	2101      	movs	r1, #1
 8018896:	6878      	ldr	r0, [r7, #4]
 8018898:	f7ff ff1a 	bl	80186d0 <dir_alloc>
 801889c:	4603      	mov	r3, r0
 801889e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80188a0:	7bfb      	ldrb	r3, [r7, #15]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d11c      	bne.n	80188e0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	69db      	ldr	r3, [r3, #28]
 80188aa:	4619      	mov	r1, r3
 80188ac:	68b8      	ldr	r0, [r7, #8]
 80188ae:	f7ff fa57 	bl	8017d60 <move_window>
 80188b2:	4603      	mov	r3, r0
 80188b4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80188b6:	7bfb      	ldrb	r3, [r7, #15]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d111      	bne.n	80188e0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	6a1b      	ldr	r3, [r3, #32]
 80188c0:	2220      	movs	r2, #32
 80188c2:	2100      	movs	r1, #0
 80188c4:	4618      	mov	r0, r3
 80188c6:	f7ff f83e 	bl	8017946 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	6a18      	ldr	r0, [r3, #32]
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	3324      	adds	r3, #36	; 0x24
 80188d2:	220b      	movs	r2, #11
 80188d4:	4619      	mov	r1, r3
 80188d6:	f7ff f815 	bl	8017904 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80188da:	68bb      	ldr	r3, [r7, #8]
 80188dc:	2201      	movs	r2, #1
 80188de:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80188e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80188e2:	4618      	mov	r0, r3
 80188e4:	3710      	adds	r7, #16
 80188e6:	46bd      	mov	sp, r7
 80188e8:	bd80      	pop	{r7, pc}
	...

080188ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b088      	sub	sp, #32
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
 80188f4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80188f6:	683b      	ldr	r3, [r7, #0]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	60fb      	str	r3, [r7, #12]
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	3324      	adds	r3, #36	; 0x24
 8018900:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8018902:	220b      	movs	r2, #11
 8018904:	2120      	movs	r1, #32
 8018906:	68b8      	ldr	r0, [r7, #8]
 8018908:	f7ff f81d 	bl	8017946 <mem_set>
	si = i = 0; ni = 8;
 801890c:	2300      	movs	r3, #0
 801890e:	613b      	str	r3, [r7, #16]
 8018910:	693b      	ldr	r3, [r7, #16]
 8018912:	617b      	str	r3, [r7, #20]
 8018914:	2308      	movs	r3, #8
 8018916:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8018918:	697b      	ldr	r3, [r7, #20]
 801891a:	1c5a      	adds	r2, r3, #1
 801891c:	617a      	str	r2, [r7, #20]
 801891e:	68fa      	ldr	r2, [r7, #12]
 8018920:	4413      	add	r3, r2
 8018922:	781b      	ldrb	r3, [r3, #0]
 8018924:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8018926:	7ffb      	ldrb	r3, [r7, #31]
 8018928:	2b20      	cmp	r3, #32
 801892a:	d94e      	bls.n	80189ca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801892c:	7ffb      	ldrb	r3, [r7, #31]
 801892e:	2b2f      	cmp	r3, #47	; 0x2f
 8018930:	d006      	beq.n	8018940 <create_name+0x54>
 8018932:	7ffb      	ldrb	r3, [r7, #31]
 8018934:	2b5c      	cmp	r3, #92	; 0x5c
 8018936:	d110      	bne.n	801895a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018938:	e002      	b.n	8018940 <create_name+0x54>
 801893a:	697b      	ldr	r3, [r7, #20]
 801893c:	3301      	adds	r3, #1
 801893e:	617b      	str	r3, [r7, #20]
 8018940:	68fa      	ldr	r2, [r7, #12]
 8018942:	697b      	ldr	r3, [r7, #20]
 8018944:	4413      	add	r3, r2
 8018946:	781b      	ldrb	r3, [r3, #0]
 8018948:	2b2f      	cmp	r3, #47	; 0x2f
 801894a:	d0f6      	beq.n	801893a <create_name+0x4e>
 801894c:	68fa      	ldr	r2, [r7, #12]
 801894e:	697b      	ldr	r3, [r7, #20]
 8018950:	4413      	add	r3, r2
 8018952:	781b      	ldrb	r3, [r3, #0]
 8018954:	2b5c      	cmp	r3, #92	; 0x5c
 8018956:	d0f0      	beq.n	801893a <create_name+0x4e>
			break;
 8018958:	e038      	b.n	80189cc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801895a:	7ffb      	ldrb	r3, [r7, #31]
 801895c:	2b2e      	cmp	r3, #46	; 0x2e
 801895e:	d003      	beq.n	8018968 <create_name+0x7c>
 8018960:	693a      	ldr	r2, [r7, #16]
 8018962:	69bb      	ldr	r3, [r7, #24]
 8018964:	429a      	cmp	r2, r3
 8018966:	d30c      	bcc.n	8018982 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8018968:	69bb      	ldr	r3, [r7, #24]
 801896a:	2b0b      	cmp	r3, #11
 801896c:	d002      	beq.n	8018974 <create_name+0x88>
 801896e:	7ffb      	ldrb	r3, [r7, #31]
 8018970:	2b2e      	cmp	r3, #46	; 0x2e
 8018972:	d001      	beq.n	8018978 <create_name+0x8c>
 8018974:	2306      	movs	r3, #6
 8018976:	e044      	b.n	8018a02 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8018978:	2308      	movs	r3, #8
 801897a:	613b      	str	r3, [r7, #16]
 801897c:	230b      	movs	r3, #11
 801897e:	61bb      	str	r3, [r7, #24]
			continue;
 8018980:	e022      	b.n	80189c8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8018982:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018986:	2b00      	cmp	r3, #0
 8018988:	da04      	bge.n	8018994 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801898a:	7ffb      	ldrb	r3, [r7, #31]
 801898c:	3b80      	subs	r3, #128	; 0x80
 801898e:	4a1f      	ldr	r2, [pc, #124]	; (8018a0c <create_name+0x120>)
 8018990:	5cd3      	ldrb	r3, [r2, r3]
 8018992:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8018994:	7ffb      	ldrb	r3, [r7, #31]
 8018996:	4619      	mov	r1, r3
 8018998:	481d      	ldr	r0, [pc, #116]	; (8018a10 <create_name+0x124>)
 801899a:	f7ff f815 	bl	80179c8 <chk_chr>
 801899e:	4603      	mov	r3, r0
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d001      	beq.n	80189a8 <create_name+0xbc>
 80189a4:	2306      	movs	r3, #6
 80189a6:	e02c      	b.n	8018a02 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80189a8:	7ffb      	ldrb	r3, [r7, #31]
 80189aa:	2b60      	cmp	r3, #96	; 0x60
 80189ac:	d905      	bls.n	80189ba <create_name+0xce>
 80189ae:	7ffb      	ldrb	r3, [r7, #31]
 80189b0:	2b7a      	cmp	r3, #122	; 0x7a
 80189b2:	d802      	bhi.n	80189ba <create_name+0xce>
 80189b4:	7ffb      	ldrb	r3, [r7, #31]
 80189b6:	3b20      	subs	r3, #32
 80189b8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80189ba:	693b      	ldr	r3, [r7, #16]
 80189bc:	1c5a      	adds	r2, r3, #1
 80189be:	613a      	str	r2, [r7, #16]
 80189c0:	68ba      	ldr	r2, [r7, #8]
 80189c2:	4413      	add	r3, r2
 80189c4:	7ffa      	ldrb	r2, [r7, #31]
 80189c6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80189c8:	e7a6      	b.n	8018918 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80189ca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80189cc:	68fa      	ldr	r2, [r7, #12]
 80189ce:	697b      	ldr	r3, [r7, #20]
 80189d0:	441a      	add	r2, r3
 80189d2:	683b      	ldr	r3, [r7, #0]
 80189d4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80189d6:	693b      	ldr	r3, [r7, #16]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d101      	bne.n	80189e0 <create_name+0xf4>
 80189dc:	2306      	movs	r3, #6
 80189de:	e010      	b.n	8018a02 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80189e0:	68bb      	ldr	r3, [r7, #8]
 80189e2:	781b      	ldrb	r3, [r3, #0]
 80189e4:	2be5      	cmp	r3, #229	; 0xe5
 80189e6:	d102      	bne.n	80189ee <create_name+0x102>
 80189e8:	68bb      	ldr	r3, [r7, #8]
 80189ea:	2205      	movs	r2, #5
 80189ec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80189ee:	7ffb      	ldrb	r3, [r7, #31]
 80189f0:	2b20      	cmp	r3, #32
 80189f2:	d801      	bhi.n	80189f8 <create_name+0x10c>
 80189f4:	2204      	movs	r2, #4
 80189f6:	e000      	b.n	80189fa <create_name+0x10e>
 80189f8:	2200      	movs	r2, #0
 80189fa:	68bb      	ldr	r3, [r7, #8]
 80189fc:	330b      	adds	r3, #11
 80189fe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8018a00:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8018a02:	4618      	mov	r0, r3
 8018a04:	3720      	adds	r7, #32
 8018a06:	46bd      	mov	sp, r7
 8018a08:	bd80      	pop	{r7, pc}
 8018a0a:	bf00      	nop
 8018a0c:	0801edd4 	.word	0x0801edd4
 8018a10:	0801ecf8 	.word	0x0801ecf8

08018a14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8018a14:	b580      	push	{r7, lr}
 8018a16:	b086      	sub	sp, #24
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	6078      	str	r0, [r7, #4]
 8018a1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8018a22:	693b      	ldr	r3, [r7, #16]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8018a28:	e002      	b.n	8018a30 <follow_path+0x1c>
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	3301      	adds	r3, #1
 8018a2e:	603b      	str	r3, [r7, #0]
 8018a30:	683b      	ldr	r3, [r7, #0]
 8018a32:	781b      	ldrb	r3, [r3, #0]
 8018a34:	2b2f      	cmp	r3, #47	; 0x2f
 8018a36:	d0f8      	beq.n	8018a2a <follow_path+0x16>
 8018a38:	683b      	ldr	r3, [r7, #0]
 8018a3a:	781b      	ldrb	r3, [r3, #0]
 8018a3c:	2b5c      	cmp	r3, #92	; 0x5c
 8018a3e:	d0f4      	beq.n	8018a2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8018a40:	693b      	ldr	r3, [r7, #16]
 8018a42:	2200      	movs	r2, #0
 8018a44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8018a46:	683b      	ldr	r3, [r7, #0]
 8018a48:	781b      	ldrb	r3, [r3, #0]
 8018a4a:	2b1f      	cmp	r3, #31
 8018a4c:	d80a      	bhi.n	8018a64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	2280      	movs	r2, #128	; 0x80
 8018a52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8018a56:	2100      	movs	r1, #0
 8018a58:	6878      	ldr	r0, [r7, #4]
 8018a5a:	f7ff fcf9 	bl	8018450 <dir_sdi>
 8018a5e:	4603      	mov	r3, r0
 8018a60:	75fb      	strb	r3, [r7, #23]
 8018a62:	e043      	b.n	8018aec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018a64:	463b      	mov	r3, r7
 8018a66:	4619      	mov	r1, r3
 8018a68:	6878      	ldr	r0, [r7, #4]
 8018a6a:	f7ff ff3f 	bl	80188ec <create_name>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018a72:	7dfb      	ldrb	r3, [r7, #23]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d134      	bne.n	8018ae2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8018a78:	6878      	ldr	r0, [r7, #4]
 8018a7a:	f7ff feaf 	bl	80187dc <dir_find>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018a88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8018a8a:	7dfb      	ldrb	r3, [r7, #23]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d00a      	beq.n	8018aa6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8018a90:	7dfb      	ldrb	r3, [r7, #23]
 8018a92:	2b04      	cmp	r3, #4
 8018a94:	d127      	bne.n	8018ae6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8018a96:	7afb      	ldrb	r3, [r7, #11]
 8018a98:	f003 0304 	and.w	r3, r3, #4
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d122      	bne.n	8018ae6 <follow_path+0xd2>
 8018aa0:	2305      	movs	r3, #5
 8018aa2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8018aa4:	e01f      	b.n	8018ae6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018aa6:	7afb      	ldrb	r3, [r7, #11]
 8018aa8:	f003 0304 	and.w	r3, r3, #4
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d11c      	bne.n	8018aea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8018ab0:	693b      	ldr	r3, [r7, #16]
 8018ab2:	799b      	ldrb	r3, [r3, #6]
 8018ab4:	f003 0310 	and.w	r3, r3, #16
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d102      	bne.n	8018ac2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8018abc:	2305      	movs	r3, #5
 8018abe:	75fb      	strb	r3, [r7, #23]
 8018ac0:	e014      	b.n	8018aec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	695b      	ldr	r3, [r3, #20]
 8018acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018ad0:	4413      	add	r3, r2
 8018ad2:	4619      	mov	r1, r3
 8018ad4:	68f8      	ldr	r0, [r7, #12]
 8018ad6:	f7ff fe42 	bl	801875e <ld_clust>
 8018ada:	4602      	mov	r2, r0
 8018adc:	693b      	ldr	r3, [r7, #16]
 8018ade:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018ae0:	e7c0      	b.n	8018a64 <follow_path+0x50>
			if (res != FR_OK) break;
 8018ae2:	bf00      	nop
 8018ae4:	e002      	b.n	8018aec <follow_path+0xd8>
				break;
 8018ae6:	bf00      	nop
 8018ae8:	e000      	b.n	8018aec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018aea:	bf00      	nop
			}
		}
	}

	return res;
 8018aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8018aee:	4618      	mov	r0, r3
 8018af0:	3718      	adds	r7, #24
 8018af2:	46bd      	mov	sp, r7
 8018af4:	bd80      	pop	{r7, pc}

08018af6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8018af6:	b480      	push	{r7}
 8018af8:	b087      	sub	sp, #28
 8018afa:	af00      	add	r7, sp, #0
 8018afc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018afe:	f04f 33ff 	mov.w	r3, #4294967295
 8018b02:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d031      	beq.n	8018b70 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	617b      	str	r3, [r7, #20]
 8018b12:	e002      	b.n	8018b1a <get_ldnumber+0x24>
 8018b14:	697b      	ldr	r3, [r7, #20]
 8018b16:	3301      	adds	r3, #1
 8018b18:	617b      	str	r3, [r7, #20]
 8018b1a:	697b      	ldr	r3, [r7, #20]
 8018b1c:	781b      	ldrb	r3, [r3, #0]
 8018b1e:	2b20      	cmp	r3, #32
 8018b20:	d903      	bls.n	8018b2a <get_ldnumber+0x34>
 8018b22:	697b      	ldr	r3, [r7, #20]
 8018b24:	781b      	ldrb	r3, [r3, #0]
 8018b26:	2b3a      	cmp	r3, #58	; 0x3a
 8018b28:	d1f4      	bne.n	8018b14 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8018b2a:	697b      	ldr	r3, [r7, #20]
 8018b2c:	781b      	ldrb	r3, [r3, #0]
 8018b2e:	2b3a      	cmp	r3, #58	; 0x3a
 8018b30:	d11c      	bne.n	8018b6c <get_ldnumber+0x76>
			tp = *path;
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	1c5a      	adds	r2, r3, #1
 8018b3c:	60fa      	str	r2, [r7, #12]
 8018b3e:	781b      	ldrb	r3, [r3, #0]
 8018b40:	3b30      	subs	r3, #48	; 0x30
 8018b42:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8018b44:	68bb      	ldr	r3, [r7, #8]
 8018b46:	2b09      	cmp	r3, #9
 8018b48:	d80e      	bhi.n	8018b68 <get_ldnumber+0x72>
 8018b4a:	68fa      	ldr	r2, [r7, #12]
 8018b4c:	697b      	ldr	r3, [r7, #20]
 8018b4e:	429a      	cmp	r2, r3
 8018b50:	d10a      	bne.n	8018b68 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8018b52:	68bb      	ldr	r3, [r7, #8]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d107      	bne.n	8018b68 <get_ldnumber+0x72>
					vol = (int)i;
 8018b58:	68bb      	ldr	r3, [r7, #8]
 8018b5a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8018b5c:	697b      	ldr	r3, [r7, #20]
 8018b5e:	3301      	adds	r3, #1
 8018b60:	617b      	str	r3, [r7, #20]
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	697a      	ldr	r2, [r7, #20]
 8018b66:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8018b68:	693b      	ldr	r3, [r7, #16]
 8018b6a:	e002      	b.n	8018b72 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8018b70:	693b      	ldr	r3, [r7, #16]
}
 8018b72:	4618      	mov	r0, r3
 8018b74:	371c      	adds	r7, #28
 8018b76:	46bd      	mov	sp, r7
 8018b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b7c:	4770      	bx	lr
	...

08018b80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b082      	sub	sp, #8
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	6078      	str	r0, [r7, #4]
 8018b88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	70da      	strb	r2, [r3, #3]
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	f04f 32ff 	mov.w	r2, #4294967295
 8018b96:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8018b98:	6839      	ldr	r1, [r7, #0]
 8018b9a:	6878      	ldr	r0, [r7, #4]
 8018b9c:	f7ff f8e0 	bl	8017d60 <move_window>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d001      	beq.n	8018baa <check_fs+0x2a>
 8018ba6:	2304      	movs	r3, #4
 8018ba8:	e038      	b.n	8018c1c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	3330      	adds	r3, #48	; 0x30
 8018bae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	f7fe fe24 	bl	8017800 <ld_word>
 8018bb8:	4603      	mov	r3, r0
 8018bba:	461a      	mov	r2, r3
 8018bbc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018bc0:	429a      	cmp	r2, r3
 8018bc2:	d001      	beq.n	8018bc8 <check_fs+0x48>
 8018bc4:	2303      	movs	r3, #3
 8018bc6:	e029      	b.n	8018c1c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018bce:	2be9      	cmp	r3, #233	; 0xe9
 8018bd0:	d009      	beq.n	8018be6 <check_fs+0x66>
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018bd8:	2beb      	cmp	r3, #235	; 0xeb
 8018bda:	d11e      	bne.n	8018c1a <check_fs+0x9a>
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8018be2:	2b90      	cmp	r3, #144	; 0x90
 8018be4:	d119      	bne.n	8018c1a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	3330      	adds	r3, #48	; 0x30
 8018bea:	3336      	adds	r3, #54	; 0x36
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7fe fe1f 	bl	8017830 <ld_dword>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018bf8:	4a0a      	ldr	r2, [pc, #40]	; (8018c24 <check_fs+0xa4>)
 8018bfa:	4293      	cmp	r3, r2
 8018bfc:	d101      	bne.n	8018c02 <check_fs+0x82>
 8018bfe:	2300      	movs	r3, #0
 8018c00:	e00c      	b.n	8018c1c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	3330      	adds	r3, #48	; 0x30
 8018c06:	3352      	adds	r3, #82	; 0x52
 8018c08:	4618      	mov	r0, r3
 8018c0a:	f7fe fe11 	bl	8017830 <ld_dword>
 8018c0e:	4602      	mov	r2, r0
 8018c10:	4b05      	ldr	r3, [pc, #20]	; (8018c28 <check_fs+0xa8>)
 8018c12:	429a      	cmp	r2, r3
 8018c14:	d101      	bne.n	8018c1a <check_fs+0x9a>
 8018c16:	2300      	movs	r3, #0
 8018c18:	e000      	b.n	8018c1c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8018c1a:	2302      	movs	r3, #2
}
 8018c1c:	4618      	mov	r0, r3
 8018c1e:	3708      	adds	r7, #8
 8018c20:	46bd      	mov	sp, r7
 8018c22:	bd80      	pop	{r7, pc}
 8018c24:	00544146 	.word	0x00544146
 8018c28:	33544146 	.word	0x33544146

08018c2c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b096      	sub	sp, #88	; 0x58
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	60f8      	str	r0, [r7, #12]
 8018c34:	60b9      	str	r1, [r7, #8]
 8018c36:	4613      	mov	r3, r2
 8018c38:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8018c3a:	68bb      	ldr	r3, [r7, #8]
 8018c3c:	2200      	movs	r2, #0
 8018c3e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8018c40:	68f8      	ldr	r0, [r7, #12]
 8018c42:	f7ff ff58 	bl	8018af6 <get_ldnumber>
 8018c46:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8018c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	da01      	bge.n	8018c52 <find_volume+0x26>
 8018c4e:	230b      	movs	r3, #11
 8018c50:	e22e      	b.n	80190b0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8018c52:	4aa8      	ldr	r2, [pc, #672]	; (8018ef4 <find_volume+0x2c8>)
 8018c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018c5a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8018c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d101      	bne.n	8018c66 <find_volume+0x3a>
 8018c62:	230c      	movs	r3, #12
 8018c64:	e224      	b.n	80190b0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8018c66:	68bb      	ldr	r3, [r7, #8]
 8018c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018c6a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8018c6c:	79fb      	ldrb	r3, [r7, #7]
 8018c6e:	f023 0301 	bic.w	r3, r3, #1
 8018c72:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8018c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c76:	781b      	ldrb	r3, [r3, #0]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d01a      	beq.n	8018cb2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8018c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c7e:	785b      	ldrb	r3, [r3, #1]
 8018c80:	4618      	mov	r0, r3
 8018c82:	f7fe fd1f 	bl	80176c4 <disk_status>
 8018c86:	4603      	mov	r3, r0
 8018c88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8018c8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018c90:	f003 0301 	and.w	r3, r3, #1
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d10c      	bne.n	8018cb2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8018c98:	79fb      	ldrb	r3, [r7, #7]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d007      	beq.n	8018cae <find_volume+0x82>
 8018c9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018ca2:	f003 0304 	and.w	r3, r3, #4
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d001      	beq.n	8018cae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8018caa:	230a      	movs	r3, #10
 8018cac:	e200      	b.n	80190b0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8018cae:	2300      	movs	r3, #0
 8018cb0:	e1fe      	b.n	80190b0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8018cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cb4:	2200      	movs	r2, #0
 8018cb6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8018cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018cba:	b2da      	uxtb	r2, r3
 8018cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cbe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8018cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cc2:	785b      	ldrb	r3, [r3, #1]
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f7fe fd17 	bl	80176f8 <disk_initialize>
 8018cca:	4603      	mov	r3, r0
 8018ccc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8018cd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018cd4:	f003 0301 	and.w	r3, r3, #1
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d001      	beq.n	8018ce0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018cdc:	2303      	movs	r3, #3
 8018cde:	e1e7      	b.n	80190b0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018ce0:	79fb      	ldrb	r3, [r7, #7]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d007      	beq.n	8018cf6 <find_volume+0xca>
 8018ce6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018cea:	f003 0304 	and.w	r3, r3, #4
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d001      	beq.n	8018cf6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8018cf2:	230a      	movs	r3, #10
 8018cf4:	e1dc      	b.n	80190b0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8018cfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018cfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018cfe:	f7ff ff3f 	bl	8018b80 <check_fs>
 8018d02:	4603      	mov	r3, r0
 8018d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8018d08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018d0c:	2b02      	cmp	r3, #2
 8018d0e:	d14b      	bne.n	8018da8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018d10:	2300      	movs	r3, #0
 8018d12:	643b      	str	r3, [r7, #64]	; 0x40
 8018d14:	e01f      	b.n	8018d56 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8018d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d1e:	011b      	lsls	r3, r3, #4
 8018d20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8018d24:	4413      	add	r3, r2
 8018d26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8018d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d2a:	3304      	adds	r3, #4
 8018d2c:	781b      	ldrb	r3, [r3, #0]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d006      	beq.n	8018d40 <find_volume+0x114>
 8018d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d34:	3308      	adds	r3, #8
 8018d36:	4618      	mov	r0, r3
 8018d38:	f7fe fd7a 	bl	8017830 <ld_dword>
 8018d3c:	4602      	mov	r2, r0
 8018d3e:	e000      	b.n	8018d42 <find_volume+0x116>
 8018d40:	2200      	movs	r2, #0
 8018d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d44:	009b      	lsls	r3, r3, #2
 8018d46:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8018d4a:	440b      	add	r3, r1
 8018d4c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d52:	3301      	adds	r3, #1
 8018d54:	643b      	str	r3, [r7, #64]	; 0x40
 8018d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d58:	2b03      	cmp	r3, #3
 8018d5a:	d9dc      	bls.n	8018d16 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8018d5c:	2300      	movs	r3, #0
 8018d5e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8018d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d002      	beq.n	8018d6c <find_volume+0x140>
 8018d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d68:	3b01      	subs	r3, #1
 8018d6a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8018d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d6e:	009b      	lsls	r3, r3, #2
 8018d70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8018d74:	4413      	add	r3, r2
 8018d76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8018d7a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d005      	beq.n	8018d8e <find_volume+0x162>
 8018d82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018d84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018d86:	f7ff fefb 	bl	8018b80 <check_fs>
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	e000      	b.n	8018d90 <find_volume+0x164>
 8018d8e:	2303      	movs	r3, #3
 8018d90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018d94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018d98:	2b01      	cmp	r3, #1
 8018d9a:	d905      	bls.n	8018da8 <find_volume+0x17c>
 8018d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d9e:	3301      	adds	r3, #1
 8018da0:	643b      	str	r3, [r7, #64]	; 0x40
 8018da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018da4:	2b03      	cmp	r3, #3
 8018da6:	d9e1      	bls.n	8018d6c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018da8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018dac:	2b04      	cmp	r3, #4
 8018dae:	d101      	bne.n	8018db4 <find_volume+0x188>
 8018db0:	2301      	movs	r3, #1
 8018db2:	e17d      	b.n	80190b0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8018db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018db8:	2b01      	cmp	r3, #1
 8018dba:	d901      	bls.n	8018dc0 <find_volume+0x194>
 8018dbc:	230d      	movs	r3, #13
 8018dbe:	e177      	b.n	80190b0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8018dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dc2:	3330      	adds	r3, #48	; 0x30
 8018dc4:	330b      	adds	r3, #11
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7fe fd1a 	bl	8017800 <ld_word>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018dd2:	d001      	beq.n	8018dd8 <find_volume+0x1ac>
 8018dd4:	230d      	movs	r3, #13
 8018dd6:	e16b      	b.n	80190b0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8018dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dda:	3330      	adds	r3, #48	; 0x30
 8018ddc:	3316      	adds	r3, #22
 8018dde:	4618      	mov	r0, r3
 8018de0:	f7fe fd0e 	bl	8017800 <ld_word>
 8018de4:	4603      	mov	r3, r0
 8018de6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8018de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d106      	bne.n	8018dfc <find_volume+0x1d0>
 8018dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018df0:	3330      	adds	r3, #48	; 0x30
 8018df2:	3324      	adds	r3, #36	; 0x24
 8018df4:	4618      	mov	r0, r3
 8018df6:	f7fe fd1b 	bl	8017830 <ld_dword>
 8018dfa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8018dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018e00:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8018e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e04:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8018e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e0a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8018e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e0e:	789b      	ldrb	r3, [r3, #2]
 8018e10:	2b01      	cmp	r3, #1
 8018e12:	d005      	beq.n	8018e20 <find_volume+0x1f4>
 8018e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e16:	789b      	ldrb	r3, [r3, #2]
 8018e18:	2b02      	cmp	r3, #2
 8018e1a:	d001      	beq.n	8018e20 <find_volume+0x1f4>
 8018e1c:	230d      	movs	r3, #13
 8018e1e:	e147      	b.n	80190b0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8018e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e22:	789b      	ldrb	r3, [r3, #2]
 8018e24:	461a      	mov	r2, r3
 8018e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018e28:	fb02 f303 	mul.w	r3, r2, r3
 8018e2c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8018e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018e34:	b29a      	uxth	r2, r3
 8018e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e38:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8018e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e3c:	895b      	ldrh	r3, [r3, #10]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d008      	beq.n	8018e54 <find_volume+0x228>
 8018e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e44:	895b      	ldrh	r3, [r3, #10]
 8018e46:	461a      	mov	r2, r3
 8018e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e4a:	895b      	ldrh	r3, [r3, #10]
 8018e4c:	3b01      	subs	r3, #1
 8018e4e:	4013      	ands	r3, r2
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d001      	beq.n	8018e58 <find_volume+0x22c>
 8018e54:	230d      	movs	r3, #13
 8018e56:	e12b      	b.n	80190b0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8018e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e5a:	3330      	adds	r3, #48	; 0x30
 8018e5c:	3311      	adds	r3, #17
 8018e5e:	4618      	mov	r0, r3
 8018e60:	f7fe fcce 	bl	8017800 <ld_word>
 8018e64:	4603      	mov	r3, r0
 8018e66:	461a      	mov	r2, r3
 8018e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e6a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8018e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e6e:	891b      	ldrh	r3, [r3, #8]
 8018e70:	f003 030f 	and.w	r3, r3, #15
 8018e74:	b29b      	uxth	r3, r3
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d001      	beq.n	8018e7e <find_volume+0x252>
 8018e7a:	230d      	movs	r3, #13
 8018e7c:	e118      	b.n	80190b0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8018e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e80:	3330      	adds	r3, #48	; 0x30
 8018e82:	3313      	adds	r3, #19
 8018e84:	4618      	mov	r0, r3
 8018e86:	f7fe fcbb 	bl	8017800 <ld_word>
 8018e8a:	4603      	mov	r3, r0
 8018e8c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8018e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d106      	bne.n	8018ea2 <find_volume+0x276>
 8018e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e96:	3330      	adds	r3, #48	; 0x30
 8018e98:	3320      	adds	r3, #32
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	f7fe fcc8 	bl	8017830 <ld_dword>
 8018ea0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8018ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ea4:	3330      	adds	r3, #48	; 0x30
 8018ea6:	330e      	adds	r3, #14
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	f7fe fca9 	bl	8017800 <ld_word>
 8018eae:	4603      	mov	r3, r0
 8018eb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8018eb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d101      	bne.n	8018ebc <find_volume+0x290>
 8018eb8:	230d      	movs	r3, #13
 8018eba:	e0f9      	b.n	80190b0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018ebc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ec0:	4413      	add	r3, r2
 8018ec2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018ec4:	8912      	ldrh	r2, [r2, #8]
 8018ec6:	0912      	lsrs	r2, r2, #4
 8018ec8:	b292      	uxth	r2, r2
 8018eca:	4413      	add	r3, r2
 8018ecc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8018ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ed2:	429a      	cmp	r2, r3
 8018ed4:	d201      	bcs.n	8018eda <find_volume+0x2ae>
 8018ed6:	230d      	movs	r3, #13
 8018ed8:	e0ea      	b.n	80190b0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8018eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ede:	1ad3      	subs	r3, r2, r3
 8018ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018ee2:	8952      	ldrh	r2, [r2, #10]
 8018ee4:	fbb3 f3f2 	udiv	r3, r3, r2
 8018ee8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8018eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d103      	bne.n	8018ef8 <find_volume+0x2cc>
 8018ef0:	230d      	movs	r3, #13
 8018ef2:	e0dd      	b.n	80190b0 <find_volume+0x484>
 8018ef4:	24000cd0 	.word	0x24000cd0
		fmt = FS_FAT32;
 8018ef8:	2303      	movs	r3, #3
 8018efa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8018efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f00:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8018f04:	4293      	cmp	r3, r2
 8018f06:	d802      	bhi.n	8018f0e <find_volume+0x2e2>
 8018f08:	2302      	movs	r3, #2
 8018f0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8018f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f10:	f640 72f5 	movw	r2, #4085	; 0xff5
 8018f14:	4293      	cmp	r3, r2
 8018f16:	d802      	bhi.n	8018f1e <find_volume+0x2f2>
 8018f18:	2301      	movs	r3, #1
 8018f1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f20:	1c9a      	adds	r2, r3, #2
 8018f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f24:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8018f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018f2a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8018f2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f30:	441a      	add	r2, r3
 8018f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f34:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8018f36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f3a:	441a      	add	r2, r3
 8018f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f3e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8018f40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018f44:	2b03      	cmp	r3, #3
 8018f46:	d11e      	bne.n	8018f86 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8018f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f4a:	3330      	adds	r3, #48	; 0x30
 8018f4c:	332a      	adds	r3, #42	; 0x2a
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f7fe fc56 	bl	8017800 <ld_word>
 8018f54:	4603      	mov	r3, r0
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d001      	beq.n	8018f5e <find_volume+0x332>
 8018f5a:	230d      	movs	r3, #13
 8018f5c:	e0a8      	b.n	80190b0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8018f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f60:	891b      	ldrh	r3, [r3, #8]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d001      	beq.n	8018f6a <find_volume+0x33e>
 8018f66:	230d      	movs	r3, #13
 8018f68:	e0a2      	b.n	80190b0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8018f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f6c:	3330      	adds	r3, #48	; 0x30
 8018f6e:	332c      	adds	r3, #44	; 0x2c
 8018f70:	4618      	mov	r0, r3
 8018f72:	f7fe fc5d 	bl	8017830 <ld_dword>
 8018f76:	4602      	mov	r2, r0
 8018f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f7a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8018f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f7e:	695b      	ldr	r3, [r3, #20]
 8018f80:	009b      	lsls	r3, r3, #2
 8018f82:	647b      	str	r3, [r7, #68]	; 0x44
 8018f84:	e01f      	b.n	8018fc6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f88:	891b      	ldrh	r3, [r3, #8]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d101      	bne.n	8018f92 <find_volume+0x366>
 8018f8e:	230d      	movs	r3, #13
 8018f90:	e08e      	b.n	80190b0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f94:	6a1a      	ldr	r2, [r3, #32]
 8018f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018f98:	441a      	add	r2, r3
 8018f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f9c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8018f9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018fa2:	2b02      	cmp	r3, #2
 8018fa4:	d103      	bne.n	8018fae <find_volume+0x382>
 8018fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fa8:	695b      	ldr	r3, [r3, #20]
 8018faa:	005b      	lsls	r3, r3, #1
 8018fac:	e00a      	b.n	8018fc4 <find_volume+0x398>
 8018fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fb0:	695a      	ldr	r2, [r3, #20]
 8018fb2:	4613      	mov	r3, r2
 8018fb4:	005b      	lsls	r3, r3, #1
 8018fb6:	4413      	add	r3, r2
 8018fb8:	085a      	lsrs	r2, r3, #1
 8018fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fbc:	695b      	ldr	r3, [r3, #20]
 8018fbe:	f003 0301 	and.w	r3, r3, #1
 8018fc2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8018fc4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8018fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fc8:	699a      	ldr	r2, [r3, #24]
 8018fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018fcc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8018fd0:	0a5b      	lsrs	r3, r3, #9
 8018fd2:	429a      	cmp	r2, r3
 8018fd4:	d201      	bcs.n	8018fda <find_volume+0x3ae>
 8018fd6:	230d      	movs	r3, #13
 8018fd8:	e06a      	b.n	80190b0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8018fe0:	611a      	str	r2, [r3, #16]
 8018fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fe4:	691a      	ldr	r2, [r3, #16]
 8018fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fe8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8018fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fec:	2280      	movs	r2, #128	; 0x80
 8018fee:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8018ff0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018ff4:	2b03      	cmp	r3, #3
 8018ff6:	d149      	bne.n	801908c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8018ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ffa:	3330      	adds	r3, #48	; 0x30
 8018ffc:	3330      	adds	r3, #48	; 0x30
 8018ffe:	4618      	mov	r0, r3
 8019000:	f7fe fbfe 	bl	8017800 <ld_word>
 8019004:	4603      	mov	r3, r0
 8019006:	2b01      	cmp	r3, #1
 8019008:	d140      	bne.n	801908c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 801900a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801900c:	3301      	adds	r3, #1
 801900e:	4619      	mov	r1, r3
 8019010:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019012:	f7fe fea5 	bl	8017d60 <move_window>
 8019016:	4603      	mov	r3, r0
 8019018:	2b00      	cmp	r3, #0
 801901a:	d137      	bne.n	801908c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 801901c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801901e:	2200      	movs	r2, #0
 8019020:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019024:	3330      	adds	r3, #48	; 0x30
 8019026:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801902a:	4618      	mov	r0, r3
 801902c:	f7fe fbe8 	bl	8017800 <ld_word>
 8019030:	4603      	mov	r3, r0
 8019032:	461a      	mov	r2, r3
 8019034:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8019038:	429a      	cmp	r2, r3
 801903a:	d127      	bne.n	801908c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801903c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801903e:	3330      	adds	r3, #48	; 0x30
 8019040:	4618      	mov	r0, r3
 8019042:	f7fe fbf5 	bl	8017830 <ld_dword>
 8019046:	4602      	mov	r2, r0
 8019048:	4b1b      	ldr	r3, [pc, #108]	; (80190b8 <find_volume+0x48c>)
 801904a:	429a      	cmp	r2, r3
 801904c:	d11e      	bne.n	801908c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801904e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019050:	3330      	adds	r3, #48	; 0x30
 8019052:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8019056:	4618      	mov	r0, r3
 8019058:	f7fe fbea 	bl	8017830 <ld_dword>
 801905c:	4602      	mov	r2, r0
 801905e:	4b17      	ldr	r3, [pc, #92]	; (80190bc <find_volume+0x490>)
 8019060:	429a      	cmp	r2, r3
 8019062:	d113      	bne.n	801908c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019066:	3330      	adds	r3, #48	; 0x30
 8019068:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801906c:	4618      	mov	r0, r3
 801906e:	f7fe fbdf 	bl	8017830 <ld_dword>
 8019072:	4602      	mov	r2, r0
 8019074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019076:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8019078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801907a:	3330      	adds	r3, #48	; 0x30
 801907c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8019080:	4618      	mov	r0, r3
 8019082:	f7fe fbd5 	bl	8017830 <ld_dword>
 8019086:	4602      	mov	r2, r0
 8019088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801908a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801908c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801908e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8019092:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019094:	4b0a      	ldr	r3, [pc, #40]	; (80190c0 <find_volume+0x494>)
 8019096:	881b      	ldrh	r3, [r3, #0]
 8019098:	3301      	adds	r3, #1
 801909a:	b29a      	uxth	r2, r3
 801909c:	4b08      	ldr	r3, [pc, #32]	; (80190c0 <find_volume+0x494>)
 801909e:	801a      	strh	r2, [r3, #0]
 80190a0:	4b07      	ldr	r3, [pc, #28]	; (80190c0 <find_volume+0x494>)
 80190a2:	881a      	ldrh	r2, [r3, #0]
 80190a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190a6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80190a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80190aa:	f7fe fdf1 	bl	8017c90 <clear_lock>
#endif
	return FR_OK;
 80190ae:	2300      	movs	r3, #0
}
 80190b0:	4618      	mov	r0, r3
 80190b2:	3758      	adds	r7, #88	; 0x58
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd80      	pop	{r7, pc}
 80190b8:	41615252 	.word	0x41615252
 80190bc:	61417272 	.word	0x61417272
 80190c0:	24000cd4 	.word	0x24000cd4

080190c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80190c4:	b580      	push	{r7, lr}
 80190c6:	b084      	sub	sp, #16
 80190c8:	af00      	add	r7, sp, #0
 80190ca:	6078      	str	r0, [r7, #4]
 80190cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80190ce:	2309      	movs	r3, #9
 80190d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d01c      	beq.n	8019112 <validate+0x4e>
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d018      	beq.n	8019112 <validate+0x4e>
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	781b      	ldrb	r3, [r3, #0]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d013      	beq.n	8019112 <validate+0x4e>
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	889a      	ldrh	r2, [r3, #4]
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	88db      	ldrh	r3, [r3, #6]
 80190f4:	429a      	cmp	r2, r3
 80190f6:	d10c      	bne.n	8019112 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	681b      	ldr	r3, [r3, #0]
 80190fc:	785b      	ldrb	r3, [r3, #1]
 80190fe:	4618      	mov	r0, r3
 8019100:	f7fe fae0 	bl	80176c4 <disk_status>
 8019104:	4603      	mov	r3, r0
 8019106:	f003 0301 	and.w	r3, r3, #1
 801910a:	2b00      	cmp	r3, #0
 801910c:	d101      	bne.n	8019112 <validate+0x4e>
			res = FR_OK;
 801910e:	2300      	movs	r3, #0
 8019110:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019112:	7bfb      	ldrb	r3, [r7, #15]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d102      	bne.n	801911e <validate+0x5a>
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	e000      	b.n	8019120 <validate+0x5c>
 801911e:	2300      	movs	r3, #0
 8019120:	683a      	ldr	r2, [r7, #0]
 8019122:	6013      	str	r3, [r2, #0]
	return res;
 8019124:	7bfb      	ldrb	r3, [r7, #15]
}
 8019126:	4618      	mov	r0, r3
 8019128:	3710      	adds	r7, #16
 801912a:	46bd      	mov	sp, r7
 801912c:	bd80      	pop	{r7, pc}
	...

08019130 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b088      	sub	sp, #32
 8019134:	af00      	add	r7, sp, #0
 8019136:	60f8      	str	r0, [r7, #12]
 8019138:	60b9      	str	r1, [r7, #8]
 801913a:	4613      	mov	r3, r2
 801913c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801913e:	68bb      	ldr	r3, [r7, #8]
 8019140:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019142:	f107 0310 	add.w	r3, r7, #16
 8019146:	4618      	mov	r0, r3
 8019148:	f7ff fcd5 	bl	8018af6 <get_ldnumber>
 801914c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801914e:	69fb      	ldr	r3, [r7, #28]
 8019150:	2b00      	cmp	r3, #0
 8019152:	da01      	bge.n	8019158 <f_mount+0x28>
 8019154:	230b      	movs	r3, #11
 8019156:	e02b      	b.n	80191b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019158:	4a17      	ldr	r2, [pc, #92]	; (80191b8 <f_mount+0x88>)
 801915a:	69fb      	ldr	r3, [r7, #28]
 801915c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019160:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8019162:	69bb      	ldr	r3, [r7, #24]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d005      	beq.n	8019174 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8019168:	69b8      	ldr	r0, [r7, #24]
 801916a:	f7fe fd91 	bl	8017c90 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801916e:	69bb      	ldr	r3, [r7, #24]
 8019170:	2200      	movs	r2, #0
 8019172:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d002      	beq.n	8019180 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	2200      	movs	r2, #0
 801917e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019180:	68fa      	ldr	r2, [r7, #12]
 8019182:	490d      	ldr	r1, [pc, #52]	; (80191b8 <f_mount+0x88>)
 8019184:	69fb      	ldr	r3, [r7, #28]
 8019186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	2b00      	cmp	r3, #0
 801918e:	d002      	beq.n	8019196 <f_mount+0x66>
 8019190:	79fb      	ldrb	r3, [r7, #7]
 8019192:	2b01      	cmp	r3, #1
 8019194:	d001      	beq.n	801919a <f_mount+0x6a>
 8019196:	2300      	movs	r3, #0
 8019198:	e00a      	b.n	80191b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801919a:	f107 010c 	add.w	r1, r7, #12
 801919e:	f107 0308 	add.w	r3, r7, #8
 80191a2:	2200      	movs	r2, #0
 80191a4:	4618      	mov	r0, r3
 80191a6:	f7ff fd41 	bl	8018c2c <find_volume>
 80191aa:	4603      	mov	r3, r0
 80191ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80191ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80191b0:	4618      	mov	r0, r3
 80191b2:	3720      	adds	r7, #32
 80191b4:	46bd      	mov	sp, r7
 80191b6:	bd80      	pop	{r7, pc}
 80191b8:	24000cd0 	.word	0x24000cd0

080191bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80191bc:	b580      	push	{r7, lr}
 80191be:	b098      	sub	sp, #96	; 0x60
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	60f8      	str	r0, [r7, #12]
 80191c4:	60b9      	str	r1, [r7, #8]
 80191c6:	4613      	mov	r3, r2
 80191c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d101      	bne.n	80191d4 <f_open+0x18>
 80191d0:	2309      	movs	r3, #9
 80191d2:	e1ad      	b.n	8019530 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80191d4:	79fb      	ldrb	r3, [r7, #7]
 80191d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80191da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80191dc:	79fa      	ldrb	r2, [r7, #7]
 80191de:	f107 0110 	add.w	r1, r7, #16
 80191e2:	f107 0308 	add.w	r3, r7, #8
 80191e6:	4618      	mov	r0, r3
 80191e8:	f7ff fd20 	bl	8018c2c <find_volume>
 80191ec:	4603      	mov	r3, r0
 80191ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80191f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	f040 8191 	bne.w	801951e <f_open+0x362>
		dj.obj.fs = fs;
 80191fc:	693b      	ldr	r3, [r7, #16]
 80191fe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019200:	68ba      	ldr	r2, [r7, #8]
 8019202:	f107 0314 	add.w	r3, r7, #20
 8019206:	4611      	mov	r1, r2
 8019208:	4618      	mov	r0, r3
 801920a:	f7ff fc03 	bl	8018a14 <follow_path>
 801920e:	4603      	mov	r3, r0
 8019210:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019214:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019218:	2b00      	cmp	r3, #0
 801921a:	d11a      	bne.n	8019252 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801921c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8019220:	b25b      	sxtb	r3, r3
 8019222:	2b00      	cmp	r3, #0
 8019224:	da03      	bge.n	801922e <f_open+0x72>
				res = FR_INVALID_NAME;
 8019226:	2306      	movs	r3, #6
 8019228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801922c:	e011      	b.n	8019252 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801922e:	79fb      	ldrb	r3, [r7, #7]
 8019230:	f023 0301 	bic.w	r3, r3, #1
 8019234:	2b00      	cmp	r3, #0
 8019236:	bf14      	ite	ne
 8019238:	2301      	movne	r3, #1
 801923a:	2300      	moveq	r3, #0
 801923c:	b2db      	uxtb	r3, r3
 801923e:	461a      	mov	r2, r3
 8019240:	f107 0314 	add.w	r3, r7, #20
 8019244:	4611      	mov	r1, r2
 8019246:	4618      	mov	r0, r3
 8019248:	f7fe fbda 	bl	8017a00 <chk_lock>
 801924c:	4603      	mov	r3, r0
 801924e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019252:	79fb      	ldrb	r3, [r7, #7]
 8019254:	f003 031c 	and.w	r3, r3, #28
 8019258:	2b00      	cmp	r3, #0
 801925a:	d07f      	beq.n	801935c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801925c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019260:	2b00      	cmp	r3, #0
 8019262:	d017      	beq.n	8019294 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019264:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019268:	2b04      	cmp	r3, #4
 801926a:	d10e      	bne.n	801928a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801926c:	f7fe fc24 	bl	8017ab8 <enq_lock>
 8019270:	4603      	mov	r3, r0
 8019272:	2b00      	cmp	r3, #0
 8019274:	d006      	beq.n	8019284 <f_open+0xc8>
 8019276:	f107 0314 	add.w	r3, r7, #20
 801927a:	4618      	mov	r0, r3
 801927c:	f7ff fb03 	bl	8018886 <dir_register>
 8019280:	4603      	mov	r3, r0
 8019282:	e000      	b.n	8019286 <f_open+0xca>
 8019284:	2312      	movs	r3, #18
 8019286:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801928a:	79fb      	ldrb	r3, [r7, #7]
 801928c:	f043 0308 	orr.w	r3, r3, #8
 8019290:	71fb      	strb	r3, [r7, #7]
 8019292:	e010      	b.n	80192b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019294:	7ebb      	ldrb	r3, [r7, #26]
 8019296:	f003 0311 	and.w	r3, r3, #17
 801929a:	2b00      	cmp	r3, #0
 801929c:	d003      	beq.n	80192a6 <f_open+0xea>
					res = FR_DENIED;
 801929e:	2307      	movs	r3, #7
 80192a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80192a4:	e007      	b.n	80192b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80192a6:	79fb      	ldrb	r3, [r7, #7]
 80192a8:	f003 0304 	and.w	r3, r3, #4
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d002      	beq.n	80192b6 <f_open+0xfa>
 80192b0:	2308      	movs	r3, #8
 80192b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80192b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d168      	bne.n	8019390 <f_open+0x1d4>
 80192be:	79fb      	ldrb	r3, [r7, #7]
 80192c0:	f003 0308 	and.w	r3, r3, #8
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d063      	beq.n	8019390 <f_open+0x1d4>
				dw = GET_FATTIME();
 80192c8:	f7fb f8fe 	bl	80144c8 <get_fattime>
 80192cc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80192ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192d0:	330e      	adds	r3, #14
 80192d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80192d4:	4618      	mov	r0, r3
 80192d6:	f7fe fae9 	bl	80178ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80192da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192dc:	3316      	adds	r3, #22
 80192de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80192e0:	4618      	mov	r0, r3
 80192e2:	f7fe fae3 	bl	80178ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80192e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192e8:	330b      	adds	r3, #11
 80192ea:	2220      	movs	r2, #32
 80192ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80192ee:	693b      	ldr	r3, [r7, #16]
 80192f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80192f2:	4611      	mov	r1, r2
 80192f4:	4618      	mov	r0, r3
 80192f6:	f7ff fa32 	bl	801875e <ld_clust>
 80192fa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80192fc:	693b      	ldr	r3, [r7, #16]
 80192fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019300:	2200      	movs	r2, #0
 8019302:	4618      	mov	r0, r3
 8019304:	f7ff fa4a 	bl	801879c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801930a:	331c      	adds	r3, #28
 801930c:	2100      	movs	r1, #0
 801930e:	4618      	mov	r0, r3
 8019310:	f7fe facc 	bl	80178ac <st_dword>
					fs->wflag = 1;
 8019314:	693b      	ldr	r3, [r7, #16]
 8019316:	2201      	movs	r2, #1
 8019318:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801931a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801931c:	2b00      	cmp	r3, #0
 801931e:	d037      	beq.n	8019390 <f_open+0x1d4>
						dw = fs->winsect;
 8019320:	693b      	ldr	r3, [r7, #16]
 8019322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019324:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8019326:	f107 0314 	add.w	r3, r7, #20
 801932a:	2200      	movs	r2, #0
 801932c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801932e:	4618      	mov	r0, r3
 8019330:	f7fe ff5d 	bl	80181ee <remove_chain>
 8019334:	4603      	mov	r3, r0
 8019336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801933a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801933e:	2b00      	cmp	r3, #0
 8019340:	d126      	bne.n	8019390 <f_open+0x1d4>
							res = move_window(fs, dw);
 8019342:	693b      	ldr	r3, [r7, #16]
 8019344:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019346:	4618      	mov	r0, r3
 8019348:	f7fe fd0a 	bl	8017d60 <move_window>
 801934c:	4603      	mov	r3, r0
 801934e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019352:	693b      	ldr	r3, [r7, #16]
 8019354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019356:	3a01      	subs	r2, #1
 8019358:	60da      	str	r2, [r3, #12]
 801935a:	e019      	b.n	8019390 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801935c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019360:	2b00      	cmp	r3, #0
 8019362:	d115      	bne.n	8019390 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019364:	7ebb      	ldrb	r3, [r7, #26]
 8019366:	f003 0310 	and.w	r3, r3, #16
 801936a:	2b00      	cmp	r3, #0
 801936c:	d003      	beq.n	8019376 <f_open+0x1ba>
					res = FR_NO_FILE;
 801936e:	2304      	movs	r3, #4
 8019370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8019374:	e00c      	b.n	8019390 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019376:	79fb      	ldrb	r3, [r7, #7]
 8019378:	f003 0302 	and.w	r3, r3, #2
 801937c:	2b00      	cmp	r3, #0
 801937e:	d007      	beq.n	8019390 <f_open+0x1d4>
 8019380:	7ebb      	ldrb	r3, [r7, #26]
 8019382:	f003 0301 	and.w	r3, r3, #1
 8019386:	2b00      	cmp	r3, #0
 8019388:	d002      	beq.n	8019390 <f_open+0x1d4>
						res = FR_DENIED;
 801938a:	2307      	movs	r3, #7
 801938c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8019390:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019394:	2b00      	cmp	r3, #0
 8019396:	d128      	bne.n	80193ea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019398:	79fb      	ldrb	r3, [r7, #7]
 801939a:	f003 0308 	and.w	r3, r3, #8
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d003      	beq.n	80193aa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80193a2:	79fb      	ldrb	r3, [r7, #7]
 80193a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80193a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80193aa:	693b      	ldr	r3, [r7, #16]
 80193ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80193b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80193b8:	79fb      	ldrb	r3, [r7, #7]
 80193ba:	f023 0301 	bic.w	r3, r3, #1
 80193be:	2b00      	cmp	r3, #0
 80193c0:	bf14      	ite	ne
 80193c2:	2301      	movne	r3, #1
 80193c4:	2300      	moveq	r3, #0
 80193c6:	b2db      	uxtb	r3, r3
 80193c8:	461a      	mov	r2, r3
 80193ca:	f107 0314 	add.w	r3, r7, #20
 80193ce:	4611      	mov	r1, r2
 80193d0:	4618      	mov	r0, r3
 80193d2:	f7fe fb93 	bl	8017afc <inc_lock>
 80193d6:	4602      	mov	r2, r0
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	691b      	ldr	r3, [r3, #16]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d102      	bne.n	80193ea <f_open+0x22e>
 80193e4:	2302      	movs	r3, #2
 80193e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80193ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	f040 8095 	bne.w	801951e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80193f4:	693b      	ldr	r3, [r7, #16]
 80193f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80193f8:	4611      	mov	r1, r2
 80193fa:	4618      	mov	r0, r3
 80193fc:	f7ff f9af 	bl	801875e <ld_clust>
 8019400:	4602      	mov	r2, r0
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019408:	331c      	adds	r3, #28
 801940a:	4618      	mov	r0, r3
 801940c:	f7fe fa10 	bl	8017830 <ld_dword>
 8019410:	4602      	mov	r2, r0
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	2200      	movs	r2, #0
 801941a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801941c:	693a      	ldr	r2, [r7, #16]
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019422:	693b      	ldr	r3, [r7, #16]
 8019424:	88da      	ldrh	r2, [r3, #6]
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	79fa      	ldrb	r2, [r7, #7]
 801942e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	2200      	movs	r2, #0
 8019434:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	2200      	movs	r2, #0
 801943a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	2200      	movs	r2, #0
 8019440:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	3330      	adds	r3, #48	; 0x30
 8019446:	f44f 7200 	mov.w	r2, #512	; 0x200
 801944a:	2100      	movs	r1, #0
 801944c:	4618      	mov	r0, r3
 801944e:	f7fe fa7a 	bl	8017946 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019452:	79fb      	ldrb	r3, [r7, #7]
 8019454:	f003 0320 	and.w	r3, r3, #32
 8019458:	2b00      	cmp	r3, #0
 801945a:	d060      	beq.n	801951e <f_open+0x362>
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	68db      	ldr	r3, [r3, #12]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d05c      	beq.n	801951e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	68da      	ldr	r2, [r3, #12]
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801946c:	693b      	ldr	r3, [r7, #16]
 801946e:	895b      	ldrh	r3, [r3, #10]
 8019470:	025b      	lsls	r3, r3, #9
 8019472:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	689b      	ldr	r3, [r3, #8]
 8019478:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	68db      	ldr	r3, [r3, #12]
 801947e:	657b      	str	r3, [r7, #84]	; 0x54
 8019480:	e016      	b.n	80194b0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8019482:	68fb      	ldr	r3, [r7, #12]
 8019484:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019486:	4618      	mov	r0, r3
 8019488:	f7fe fd25 	bl	8017ed6 <get_fat>
 801948c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801948e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019490:	2b01      	cmp	r3, #1
 8019492:	d802      	bhi.n	801949a <f_open+0x2de>
 8019494:	2302      	movs	r3, #2
 8019496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801949a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801949c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194a0:	d102      	bne.n	80194a8 <f_open+0x2ec>
 80194a2:	2301      	movs	r3, #1
 80194a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80194a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80194aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194ac:	1ad3      	subs	r3, r2, r3
 80194ae:	657b      	str	r3, [r7, #84]	; 0x54
 80194b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d103      	bne.n	80194c0 <f_open+0x304>
 80194b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80194ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194bc:	429a      	cmp	r2, r3
 80194be:	d8e0      	bhi.n	8019482 <f_open+0x2c6>
				}
				fp->clust = clst;
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80194c4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80194c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d127      	bne.n	801951e <f_open+0x362>
 80194ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d022      	beq.n	801951e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80194d8:	693b      	ldr	r3, [r7, #16]
 80194da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80194dc:	4618      	mov	r0, r3
 80194de:	f7fe fcdb 	bl	8017e98 <clust2sect>
 80194e2:	6478      	str	r0, [r7, #68]	; 0x44
 80194e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d103      	bne.n	80194f2 <f_open+0x336>
						res = FR_INT_ERR;
 80194ea:	2302      	movs	r3, #2
 80194ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80194f0:	e015      	b.n	801951e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80194f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194f4:	0a5a      	lsrs	r2, r3, #9
 80194f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80194f8:	441a      	add	r2, r3
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80194fe:	693b      	ldr	r3, [r7, #16]
 8019500:	7858      	ldrb	r0, [r3, #1]
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	6a1a      	ldr	r2, [r3, #32]
 801950c:	2301      	movs	r3, #1
 801950e:	f7fe f919 	bl	8017744 <disk_read>
 8019512:	4603      	mov	r3, r0
 8019514:	2b00      	cmp	r3, #0
 8019516:	d002      	beq.n	801951e <f_open+0x362>
 8019518:	2301      	movs	r3, #1
 801951a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801951e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019522:	2b00      	cmp	r3, #0
 8019524:	d002      	beq.n	801952c <f_open+0x370>
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	2200      	movs	r2, #0
 801952a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801952c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8019530:	4618      	mov	r0, r3
 8019532:	3760      	adds	r7, #96	; 0x60
 8019534:	46bd      	mov	sp, r7
 8019536:	bd80      	pop	{r7, pc}

08019538 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8019538:	b580      	push	{r7, lr}
 801953a:	b08e      	sub	sp, #56	; 0x38
 801953c:	af00      	add	r7, sp, #0
 801953e:	60f8      	str	r0, [r7, #12]
 8019540:	60b9      	str	r1, [r7, #8]
 8019542:	607a      	str	r2, [r7, #4]
 8019544:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8019546:	68bb      	ldr	r3, [r7, #8]
 8019548:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801954a:	683b      	ldr	r3, [r7, #0]
 801954c:	2200      	movs	r2, #0
 801954e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	f107 0214 	add.w	r2, r7, #20
 8019556:	4611      	mov	r1, r2
 8019558:	4618      	mov	r0, r3
 801955a:	f7ff fdb3 	bl	80190c4 <validate>
 801955e:	4603      	mov	r3, r0
 8019560:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019564:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019568:	2b00      	cmp	r3, #0
 801956a:	d107      	bne.n	801957c <f_read+0x44>
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	7d5b      	ldrb	r3, [r3, #21]
 8019570:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8019574:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019578:	2b00      	cmp	r3, #0
 801957a:	d002      	beq.n	8019582 <f_read+0x4a>
 801957c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019580:	e115      	b.n	80197ae <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	7d1b      	ldrb	r3, [r3, #20]
 8019586:	f003 0301 	and.w	r3, r3, #1
 801958a:	2b00      	cmp	r3, #0
 801958c:	d101      	bne.n	8019592 <f_read+0x5a>
 801958e:	2307      	movs	r3, #7
 8019590:	e10d      	b.n	80197ae <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	68da      	ldr	r2, [r3, #12]
 8019596:	68fb      	ldr	r3, [r7, #12]
 8019598:	699b      	ldr	r3, [r3, #24]
 801959a:	1ad3      	subs	r3, r2, r3
 801959c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801959e:	687a      	ldr	r2, [r7, #4]
 80195a0:	6a3b      	ldr	r3, [r7, #32]
 80195a2:	429a      	cmp	r2, r3
 80195a4:	f240 80fe 	bls.w	80197a4 <f_read+0x26c>
 80195a8:	6a3b      	ldr	r3, [r7, #32]
 80195aa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80195ac:	e0fa      	b.n	80197a4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	699b      	ldr	r3, [r3, #24]
 80195b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	f040 80c6 	bne.w	8019748 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	699b      	ldr	r3, [r3, #24]
 80195c0:	0a5b      	lsrs	r3, r3, #9
 80195c2:	697a      	ldr	r2, [r7, #20]
 80195c4:	8952      	ldrh	r2, [r2, #10]
 80195c6:	3a01      	subs	r2, #1
 80195c8:	4013      	ands	r3, r2
 80195ca:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80195cc:	69fb      	ldr	r3, [r7, #28]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d12f      	bne.n	8019632 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	699b      	ldr	r3, [r3, #24]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d103      	bne.n	80195e2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80195da:	68fb      	ldr	r3, [r7, #12]
 80195dc:	689b      	ldr	r3, [r3, #8]
 80195de:	633b      	str	r3, [r7, #48]	; 0x30
 80195e0:	e013      	b.n	801960a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d007      	beq.n	80195fa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	699b      	ldr	r3, [r3, #24]
 80195ee:	4619      	mov	r1, r3
 80195f0:	68f8      	ldr	r0, [r7, #12]
 80195f2:	f7fe fef9 	bl	80183e8 <clmt_clust>
 80195f6:	6338      	str	r0, [r7, #48]	; 0x30
 80195f8:	e007      	b.n	801960a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80195fa:	68fa      	ldr	r2, [r7, #12]
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	69db      	ldr	r3, [r3, #28]
 8019600:	4619      	mov	r1, r3
 8019602:	4610      	mov	r0, r2
 8019604:	f7fe fc67 	bl	8017ed6 <get_fat>
 8019608:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801960a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801960c:	2b01      	cmp	r3, #1
 801960e:	d804      	bhi.n	801961a <f_read+0xe2>
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	2202      	movs	r2, #2
 8019614:	755a      	strb	r2, [r3, #21]
 8019616:	2302      	movs	r3, #2
 8019618:	e0c9      	b.n	80197ae <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801961c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019620:	d104      	bne.n	801962c <f_read+0xf4>
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	2201      	movs	r2, #1
 8019626:	755a      	strb	r2, [r3, #21]
 8019628:	2301      	movs	r3, #1
 801962a:	e0c0      	b.n	80197ae <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019630:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019632:	697a      	ldr	r2, [r7, #20]
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	69db      	ldr	r3, [r3, #28]
 8019638:	4619      	mov	r1, r3
 801963a:	4610      	mov	r0, r2
 801963c:	f7fe fc2c 	bl	8017e98 <clust2sect>
 8019640:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019642:	69bb      	ldr	r3, [r7, #24]
 8019644:	2b00      	cmp	r3, #0
 8019646:	d104      	bne.n	8019652 <f_read+0x11a>
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	2202      	movs	r2, #2
 801964c:	755a      	strb	r2, [r3, #21]
 801964e:	2302      	movs	r3, #2
 8019650:	e0ad      	b.n	80197ae <f_read+0x276>
			sect += csect;
 8019652:	69ba      	ldr	r2, [r7, #24]
 8019654:	69fb      	ldr	r3, [r7, #28]
 8019656:	4413      	add	r3, r2
 8019658:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	0a5b      	lsrs	r3, r3, #9
 801965e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8019660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019662:	2b00      	cmp	r3, #0
 8019664:	d039      	beq.n	80196da <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019666:	69fa      	ldr	r2, [r7, #28]
 8019668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801966a:	4413      	add	r3, r2
 801966c:	697a      	ldr	r2, [r7, #20]
 801966e:	8952      	ldrh	r2, [r2, #10]
 8019670:	4293      	cmp	r3, r2
 8019672:	d905      	bls.n	8019680 <f_read+0x148>
					cc = fs->csize - csect;
 8019674:	697b      	ldr	r3, [r7, #20]
 8019676:	895b      	ldrh	r3, [r3, #10]
 8019678:	461a      	mov	r2, r3
 801967a:	69fb      	ldr	r3, [r7, #28]
 801967c:	1ad3      	subs	r3, r2, r3
 801967e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019680:	697b      	ldr	r3, [r7, #20]
 8019682:	7858      	ldrb	r0, [r3, #1]
 8019684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019686:	69ba      	ldr	r2, [r7, #24]
 8019688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801968a:	f7fe f85b 	bl	8017744 <disk_read>
 801968e:	4603      	mov	r3, r0
 8019690:	2b00      	cmp	r3, #0
 8019692:	d004      	beq.n	801969e <f_read+0x166>
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	2201      	movs	r2, #1
 8019698:	755a      	strb	r2, [r3, #21]
 801969a:	2301      	movs	r3, #1
 801969c:	e087      	b.n	80197ae <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	7d1b      	ldrb	r3, [r3, #20]
 80196a2:	b25b      	sxtb	r3, r3
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	da14      	bge.n	80196d2 <f_read+0x19a>
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	6a1a      	ldr	r2, [r3, #32]
 80196ac:	69bb      	ldr	r3, [r7, #24]
 80196ae:	1ad3      	subs	r3, r2, r3
 80196b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80196b2:	429a      	cmp	r2, r3
 80196b4:	d90d      	bls.n	80196d2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	6a1a      	ldr	r2, [r3, #32]
 80196ba:	69bb      	ldr	r3, [r7, #24]
 80196bc:	1ad3      	subs	r3, r2, r3
 80196be:	025b      	lsls	r3, r3, #9
 80196c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80196c2:	18d0      	adds	r0, r2, r3
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	3330      	adds	r3, #48	; 0x30
 80196c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80196cc:	4619      	mov	r1, r3
 80196ce:	f7fe f919 	bl	8017904 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80196d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196d4:	025b      	lsls	r3, r3, #9
 80196d6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80196d8:	e050      	b.n	801977c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	6a1b      	ldr	r3, [r3, #32]
 80196de:	69ba      	ldr	r2, [r7, #24]
 80196e0:	429a      	cmp	r2, r3
 80196e2:	d02e      	beq.n	8019742 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	7d1b      	ldrb	r3, [r3, #20]
 80196e8:	b25b      	sxtb	r3, r3
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	da18      	bge.n	8019720 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80196ee:	697b      	ldr	r3, [r7, #20]
 80196f0:	7858      	ldrb	r0, [r3, #1]
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	6a1a      	ldr	r2, [r3, #32]
 80196fc:	2301      	movs	r3, #1
 80196fe:	f7fe f841 	bl	8017784 <disk_write>
 8019702:	4603      	mov	r3, r0
 8019704:	2b00      	cmp	r3, #0
 8019706:	d004      	beq.n	8019712 <f_read+0x1da>
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	2201      	movs	r2, #1
 801970c:	755a      	strb	r2, [r3, #21]
 801970e:	2301      	movs	r3, #1
 8019710:	e04d      	b.n	80197ae <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	7d1b      	ldrb	r3, [r3, #20]
 8019716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801971a:	b2da      	uxtb	r2, r3
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8019720:	697b      	ldr	r3, [r7, #20]
 8019722:	7858      	ldrb	r0, [r3, #1]
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801972a:	2301      	movs	r3, #1
 801972c:	69ba      	ldr	r2, [r7, #24]
 801972e:	f7fe f809 	bl	8017744 <disk_read>
 8019732:	4603      	mov	r3, r0
 8019734:	2b00      	cmp	r3, #0
 8019736:	d004      	beq.n	8019742 <f_read+0x20a>
 8019738:	68fb      	ldr	r3, [r7, #12]
 801973a:	2201      	movs	r2, #1
 801973c:	755a      	strb	r2, [r3, #21]
 801973e:	2301      	movs	r3, #1
 8019740:	e035      	b.n	80197ae <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	69ba      	ldr	r2, [r7, #24]
 8019746:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	699b      	ldr	r3, [r3, #24]
 801974c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019750:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8019754:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8019756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	429a      	cmp	r2, r3
 801975c:	d901      	bls.n	8019762 <f_read+0x22a>
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8019762:	68fb      	ldr	r3, [r7, #12]
 8019764:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	699b      	ldr	r3, [r3, #24]
 801976c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019770:	4413      	add	r3, r2
 8019772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019774:	4619      	mov	r1, r3
 8019776:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019778:	f7fe f8c4 	bl	8017904 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801977c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019780:	4413      	add	r3, r2
 8019782:	627b      	str	r3, [r7, #36]	; 0x24
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	699a      	ldr	r2, [r3, #24]
 8019788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801978a:	441a      	add	r2, r3
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	619a      	str	r2, [r3, #24]
 8019790:	683b      	ldr	r3, [r7, #0]
 8019792:	681a      	ldr	r2, [r3, #0]
 8019794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019796:	441a      	add	r2, r3
 8019798:	683b      	ldr	r3, [r7, #0]
 801979a:	601a      	str	r2, [r3, #0]
 801979c:	687a      	ldr	r2, [r7, #4]
 801979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197a0:	1ad3      	subs	r3, r2, r3
 80197a2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	f47f af01 	bne.w	80195ae <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80197ac:	2300      	movs	r3, #0
}
 80197ae:	4618      	mov	r0, r3
 80197b0:	3738      	adds	r7, #56	; 0x38
 80197b2:	46bd      	mov	sp, r7
 80197b4:	bd80      	pop	{r7, pc}

080197b6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80197b6:	b580      	push	{r7, lr}
 80197b8:	b08c      	sub	sp, #48	; 0x30
 80197ba:	af00      	add	r7, sp, #0
 80197bc:	60f8      	str	r0, [r7, #12]
 80197be:	60b9      	str	r1, [r7, #8]
 80197c0:	607a      	str	r2, [r7, #4]
 80197c2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80197c4:	68bb      	ldr	r3, [r7, #8]
 80197c6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80197c8:	683b      	ldr	r3, [r7, #0]
 80197ca:	2200      	movs	r2, #0
 80197cc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	f107 0210 	add.w	r2, r7, #16
 80197d4:	4611      	mov	r1, r2
 80197d6:	4618      	mov	r0, r3
 80197d8:	f7ff fc74 	bl	80190c4 <validate>
 80197dc:	4603      	mov	r3, r0
 80197de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80197e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d107      	bne.n	80197fa <f_write+0x44>
 80197ea:	68fb      	ldr	r3, [r7, #12]
 80197ec:	7d5b      	ldrb	r3, [r3, #21]
 80197ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80197f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d002      	beq.n	8019800 <f_write+0x4a>
 80197fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80197fe:	e14b      	b.n	8019a98 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	7d1b      	ldrb	r3, [r3, #20]
 8019804:	f003 0302 	and.w	r3, r3, #2
 8019808:	2b00      	cmp	r3, #0
 801980a:	d101      	bne.n	8019810 <f_write+0x5a>
 801980c:	2307      	movs	r3, #7
 801980e:	e143      	b.n	8019a98 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	699a      	ldr	r2, [r3, #24]
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	441a      	add	r2, r3
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	699b      	ldr	r3, [r3, #24]
 801981c:	429a      	cmp	r2, r3
 801981e:	f080 812d 	bcs.w	8019a7c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	699b      	ldr	r3, [r3, #24]
 8019826:	43db      	mvns	r3, r3
 8019828:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801982a:	e127      	b.n	8019a7c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	699b      	ldr	r3, [r3, #24]
 8019830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019834:	2b00      	cmp	r3, #0
 8019836:	f040 80e3 	bne.w	8019a00 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	699b      	ldr	r3, [r3, #24]
 801983e:	0a5b      	lsrs	r3, r3, #9
 8019840:	693a      	ldr	r2, [r7, #16]
 8019842:	8952      	ldrh	r2, [r2, #10]
 8019844:	3a01      	subs	r2, #1
 8019846:	4013      	ands	r3, r2
 8019848:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801984a:	69bb      	ldr	r3, [r7, #24]
 801984c:	2b00      	cmp	r3, #0
 801984e:	d143      	bne.n	80198d8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	699b      	ldr	r3, [r3, #24]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d10c      	bne.n	8019872 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8019858:	68fb      	ldr	r3, [r7, #12]
 801985a:	689b      	ldr	r3, [r3, #8]
 801985c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019860:	2b00      	cmp	r3, #0
 8019862:	d11a      	bne.n	801989a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	2100      	movs	r1, #0
 8019868:	4618      	mov	r0, r3
 801986a:	f7fe fd25 	bl	80182b8 <create_chain>
 801986e:	62b8      	str	r0, [r7, #40]	; 0x28
 8019870:	e013      	b.n	801989a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019876:	2b00      	cmp	r3, #0
 8019878:	d007      	beq.n	801988a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	699b      	ldr	r3, [r3, #24]
 801987e:	4619      	mov	r1, r3
 8019880:	68f8      	ldr	r0, [r7, #12]
 8019882:	f7fe fdb1 	bl	80183e8 <clmt_clust>
 8019886:	62b8      	str	r0, [r7, #40]	; 0x28
 8019888:	e007      	b.n	801989a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801988a:	68fa      	ldr	r2, [r7, #12]
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	69db      	ldr	r3, [r3, #28]
 8019890:	4619      	mov	r1, r3
 8019892:	4610      	mov	r0, r2
 8019894:	f7fe fd10 	bl	80182b8 <create_chain>
 8019898:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801989c:	2b00      	cmp	r3, #0
 801989e:	f000 80f2 	beq.w	8019a86 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80198a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198a4:	2b01      	cmp	r3, #1
 80198a6:	d104      	bne.n	80198b2 <f_write+0xfc>
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	2202      	movs	r2, #2
 80198ac:	755a      	strb	r2, [r3, #21]
 80198ae:	2302      	movs	r3, #2
 80198b0:	e0f2      	b.n	8019a98 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80198b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198b8:	d104      	bne.n	80198c4 <f_write+0x10e>
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	2201      	movs	r2, #1
 80198be:	755a      	strb	r2, [r3, #21]
 80198c0:	2301      	movs	r3, #1
 80198c2:	e0e9      	b.n	8019a98 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198c8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	689b      	ldr	r3, [r3, #8]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d102      	bne.n	80198d8 <f_write+0x122>
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198d6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	7d1b      	ldrb	r3, [r3, #20]
 80198dc:	b25b      	sxtb	r3, r3
 80198de:	2b00      	cmp	r3, #0
 80198e0:	da18      	bge.n	8019914 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80198e2:	693b      	ldr	r3, [r7, #16]
 80198e4:	7858      	ldrb	r0, [r3, #1]
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	6a1a      	ldr	r2, [r3, #32]
 80198f0:	2301      	movs	r3, #1
 80198f2:	f7fd ff47 	bl	8017784 <disk_write>
 80198f6:	4603      	mov	r3, r0
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d004      	beq.n	8019906 <f_write+0x150>
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	2201      	movs	r2, #1
 8019900:	755a      	strb	r2, [r3, #21]
 8019902:	2301      	movs	r3, #1
 8019904:	e0c8      	b.n	8019a98 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019906:	68fb      	ldr	r3, [r7, #12]
 8019908:	7d1b      	ldrb	r3, [r3, #20]
 801990a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801990e:	b2da      	uxtb	r2, r3
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019914:	693a      	ldr	r2, [r7, #16]
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	69db      	ldr	r3, [r3, #28]
 801991a:	4619      	mov	r1, r3
 801991c:	4610      	mov	r0, r2
 801991e:	f7fe fabb 	bl	8017e98 <clust2sect>
 8019922:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019924:	697b      	ldr	r3, [r7, #20]
 8019926:	2b00      	cmp	r3, #0
 8019928:	d104      	bne.n	8019934 <f_write+0x17e>
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	2202      	movs	r2, #2
 801992e:	755a      	strb	r2, [r3, #21]
 8019930:	2302      	movs	r3, #2
 8019932:	e0b1      	b.n	8019a98 <f_write+0x2e2>
			sect += csect;
 8019934:	697a      	ldr	r2, [r7, #20]
 8019936:	69bb      	ldr	r3, [r7, #24]
 8019938:	4413      	add	r3, r2
 801993a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	0a5b      	lsrs	r3, r3, #9
 8019940:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019942:	6a3b      	ldr	r3, [r7, #32]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d03c      	beq.n	80199c2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019948:	69ba      	ldr	r2, [r7, #24]
 801994a:	6a3b      	ldr	r3, [r7, #32]
 801994c:	4413      	add	r3, r2
 801994e:	693a      	ldr	r2, [r7, #16]
 8019950:	8952      	ldrh	r2, [r2, #10]
 8019952:	4293      	cmp	r3, r2
 8019954:	d905      	bls.n	8019962 <f_write+0x1ac>
					cc = fs->csize - csect;
 8019956:	693b      	ldr	r3, [r7, #16]
 8019958:	895b      	ldrh	r3, [r3, #10]
 801995a:	461a      	mov	r2, r3
 801995c:	69bb      	ldr	r3, [r7, #24]
 801995e:	1ad3      	subs	r3, r2, r3
 8019960:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019962:	693b      	ldr	r3, [r7, #16]
 8019964:	7858      	ldrb	r0, [r3, #1]
 8019966:	6a3b      	ldr	r3, [r7, #32]
 8019968:	697a      	ldr	r2, [r7, #20]
 801996a:	69f9      	ldr	r1, [r7, #28]
 801996c:	f7fd ff0a 	bl	8017784 <disk_write>
 8019970:	4603      	mov	r3, r0
 8019972:	2b00      	cmp	r3, #0
 8019974:	d004      	beq.n	8019980 <f_write+0x1ca>
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	2201      	movs	r2, #1
 801997a:	755a      	strb	r2, [r3, #21]
 801997c:	2301      	movs	r3, #1
 801997e:	e08b      	b.n	8019a98 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	6a1a      	ldr	r2, [r3, #32]
 8019984:	697b      	ldr	r3, [r7, #20]
 8019986:	1ad3      	subs	r3, r2, r3
 8019988:	6a3a      	ldr	r2, [r7, #32]
 801998a:	429a      	cmp	r2, r3
 801998c:	d915      	bls.n	80199ba <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	6a1a      	ldr	r2, [r3, #32]
 8019998:	697b      	ldr	r3, [r7, #20]
 801999a:	1ad3      	subs	r3, r2, r3
 801999c:	025b      	lsls	r3, r3, #9
 801999e:	69fa      	ldr	r2, [r7, #28]
 80199a0:	4413      	add	r3, r2
 80199a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80199a6:	4619      	mov	r1, r3
 80199a8:	f7fd ffac 	bl	8017904 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	7d1b      	ldrb	r3, [r3, #20]
 80199b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80199b4:	b2da      	uxtb	r2, r3
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80199ba:	6a3b      	ldr	r3, [r7, #32]
 80199bc:	025b      	lsls	r3, r3, #9
 80199be:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80199c0:	e03f      	b.n	8019a42 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	6a1b      	ldr	r3, [r3, #32]
 80199c6:	697a      	ldr	r2, [r7, #20]
 80199c8:	429a      	cmp	r2, r3
 80199ca:	d016      	beq.n	80199fa <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	699a      	ldr	r2, [r3, #24]
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80199d4:	429a      	cmp	r2, r3
 80199d6:	d210      	bcs.n	80199fa <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80199d8:	693b      	ldr	r3, [r7, #16]
 80199da:	7858      	ldrb	r0, [r3, #1]
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80199e2:	2301      	movs	r3, #1
 80199e4:	697a      	ldr	r2, [r7, #20]
 80199e6:	f7fd fead 	bl	8017744 <disk_read>
 80199ea:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d004      	beq.n	80199fa <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	2201      	movs	r2, #1
 80199f4:	755a      	strb	r2, [r3, #21]
 80199f6:	2301      	movs	r3, #1
 80199f8:	e04e      	b.n	8019a98 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	697a      	ldr	r2, [r7, #20]
 80199fe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	699b      	ldr	r3, [r3, #24]
 8019a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019a08:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8019a0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	429a      	cmp	r2, r3
 8019a14:	d901      	bls.n	8019a1a <f_write+0x264>
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	699b      	ldr	r3, [r3, #24]
 8019a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019a28:	4413      	add	r3, r2
 8019a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a2c:	69f9      	ldr	r1, [r7, #28]
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f7fd ff68 	bl	8017904 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	7d1b      	ldrb	r3, [r3, #20]
 8019a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019a3c:	b2da      	uxtb	r2, r3
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8019a42:	69fa      	ldr	r2, [r7, #28]
 8019a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a46:	4413      	add	r3, r2
 8019a48:	61fb      	str	r3, [r7, #28]
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	699a      	ldr	r2, [r3, #24]
 8019a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a50:	441a      	add	r2, r3
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	619a      	str	r2, [r3, #24]
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	68da      	ldr	r2, [r3, #12]
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	699b      	ldr	r3, [r3, #24]
 8019a5e:	429a      	cmp	r2, r3
 8019a60:	bf38      	it	cc
 8019a62:	461a      	movcc	r2, r3
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	60da      	str	r2, [r3, #12]
 8019a68:	683b      	ldr	r3, [r7, #0]
 8019a6a:	681a      	ldr	r2, [r3, #0]
 8019a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a6e:	441a      	add	r2, r3
 8019a70:	683b      	ldr	r3, [r7, #0]
 8019a72:	601a      	str	r2, [r3, #0]
 8019a74:	687a      	ldr	r2, [r7, #4]
 8019a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a78:	1ad3      	subs	r3, r2, r3
 8019a7a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	f47f aed4 	bne.w	801982c <f_write+0x76>
 8019a84:	e000      	b.n	8019a88 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019a86:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	7d1b      	ldrb	r3, [r3, #20]
 8019a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a90:	b2da      	uxtb	r2, r3
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8019a96:	2300      	movs	r3, #0
}
 8019a98:	4618      	mov	r0, r3
 8019a9a:	3730      	adds	r7, #48	; 0x30
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	bd80      	pop	{r7, pc}

08019aa0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b086      	sub	sp, #24
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	f107 0208 	add.w	r2, r7, #8
 8019aae:	4611      	mov	r1, r2
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	f7ff fb07 	bl	80190c4 <validate>
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019aba:	7dfb      	ldrb	r3, [r7, #23]
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d168      	bne.n	8019b92 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	7d1b      	ldrb	r3, [r3, #20]
 8019ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d062      	beq.n	8019b92 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	7d1b      	ldrb	r3, [r3, #20]
 8019ad0:	b25b      	sxtb	r3, r3
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	da15      	bge.n	8019b02 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019ad6:	68bb      	ldr	r3, [r7, #8]
 8019ad8:	7858      	ldrb	r0, [r3, #1]
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	6a1a      	ldr	r2, [r3, #32]
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	f7fd fe4d 	bl	8017784 <disk_write>
 8019aea:	4603      	mov	r3, r0
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d001      	beq.n	8019af4 <f_sync+0x54>
 8019af0:	2301      	movs	r3, #1
 8019af2:	e04f      	b.n	8019b94 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	7d1b      	ldrb	r3, [r3, #20]
 8019af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019afc:	b2da      	uxtb	r2, r3
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019b02:	f7fa fce1 	bl	80144c8 <get_fattime>
 8019b06:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019b08:	68ba      	ldr	r2, [r7, #8]
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b0e:	4619      	mov	r1, r3
 8019b10:	4610      	mov	r0, r2
 8019b12:	f7fe f925 	bl	8017d60 <move_window>
 8019b16:	4603      	mov	r3, r0
 8019b18:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8019b1a:	7dfb      	ldrb	r3, [r7, #23]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d138      	bne.n	8019b92 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b24:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	330b      	adds	r3, #11
 8019b2a:	781a      	ldrb	r2, [r3, #0]
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	330b      	adds	r3, #11
 8019b30:	f042 0220 	orr.w	r2, r2, #32
 8019b34:	b2d2      	uxtb	r2, r2
 8019b36:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	6818      	ldr	r0, [r3, #0]
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	689b      	ldr	r3, [r3, #8]
 8019b40:	461a      	mov	r2, r3
 8019b42:	68f9      	ldr	r1, [r7, #12]
 8019b44:	f7fe fe2a 	bl	801879c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	f103 021c 	add.w	r2, r3, #28
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	68db      	ldr	r3, [r3, #12]
 8019b52:	4619      	mov	r1, r3
 8019b54:	4610      	mov	r0, r2
 8019b56:	f7fd fea9 	bl	80178ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	3316      	adds	r3, #22
 8019b5e:	6939      	ldr	r1, [r7, #16]
 8019b60:	4618      	mov	r0, r3
 8019b62:	f7fd fea3 	bl	80178ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	3312      	adds	r3, #18
 8019b6a:	2100      	movs	r1, #0
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	f7fd fe82 	bl	8017876 <st_word>
					fs->wflag = 1;
 8019b72:	68bb      	ldr	r3, [r7, #8]
 8019b74:	2201      	movs	r2, #1
 8019b76:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019b78:	68bb      	ldr	r3, [r7, #8]
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	f7fe f91e 	bl	8017dbc <sync_fs>
 8019b80:	4603      	mov	r3, r0
 8019b82:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	7d1b      	ldrb	r3, [r3, #20]
 8019b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019b8c:	b2da      	uxtb	r2, r3
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8019b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8019b94:	4618      	mov	r0, r3
 8019b96:	3718      	adds	r7, #24
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}

08019b9c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	b084      	sub	sp, #16
 8019ba0:	af00      	add	r7, sp, #0
 8019ba2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8019ba4:	6878      	ldr	r0, [r7, #4]
 8019ba6:	f7ff ff7b 	bl	8019aa0 <f_sync>
 8019baa:	4603      	mov	r3, r0
 8019bac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019bae:	7bfb      	ldrb	r3, [r7, #15]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d118      	bne.n	8019be6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	f107 0208 	add.w	r2, r7, #8
 8019bba:	4611      	mov	r1, r2
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	f7ff fa81 	bl	80190c4 <validate>
 8019bc2:	4603      	mov	r3, r0
 8019bc4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019bc6:	7bfb      	ldrb	r3, [r7, #15]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d10c      	bne.n	8019be6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	691b      	ldr	r3, [r3, #16]
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	f7fe f821 	bl	8017c18 <dec_lock>
 8019bd6:	4603      	mov	r3, r0
 8019bd8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019bda:	7bfb      	ldrb	r3, [r7, #15]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d102      	bne.n	8019be6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	2200      	movs	r2, #0
 8019be4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8019be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8019be8:	4618      	mov	r0, r3
 8019bea:	3710      	adds	r7, #16
 8019bec:	46bd      	mov	sp, r7
 8019bee:	bd80      	pop	{r7, pc}

08019bf0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8019bf0:	b480      	push	{r7}
 8019bf2:	b087      	sub	sp, #28
 8019bf4:	af00      	add	r7, sp, #0
 8019bf6:	60f8      	str	r0, [r7, #12]
 8019bf8:	60b9      	str	r1, [r7, #8]
 8019bfa:	4613      	mov	r3, r2
 8019bfc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8019bfe:	2301      	movs	r3, #1
 8019c00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8019c02:	2300      	movs	r3, #0
 8019c04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8019c06:	4b1f      	ldr	r3, [pc, #124]	; (8019c84 <FATFS_LinkDriverEx+0x94>)
 8019c08:	7a5b      	ldrb	r3, [r3, #9]
 8019c0a:	b2db      	uxtb	r3, r3
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d131      	bne.n	8019c74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8019c10:	4b1c      	ldr	r3, [pc, #112]	; (8019c84 <FATFS_LinkDriverEx+0x94>)
 8019c12:	7a5b      	ldrb	r3, [r3, #9]
 8019c14:	b2db      	uxtb	r3, r3
 8019c16:	461a      	mov	r2, r3
 8019c18:	4b1a      	ldr	r3, [pc, #104]	; (8019c84 <FATFS_LinkDriverEx+0x94>)
 8019c1a:	2100      	movs	r1, #0
 8019c1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8019c1e:	4b19      	ldr	r3, [pc, #100]	; (8019c84 <FATFS_LinkDriverEx+0x94>)
 8019c20:	7a5b      	ldrb	r3, [r3, #9]
 8019c22:	b2db      	uxtb	r3, r3
 8019c24:	4a17      	ldr	r2, [pc, #92]	; (8019c84 <FATFS_LinkDriverEx+0x94>)
 8019c26:	009b      	lsls	r3, r3, #2
 8019c28:	4413      	add	r3, r2
 8019c2a:	68fa      	ldr	r2, [r7, #12]
 8019c2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8019c2e:	4b15      	ldr	r3, [pc, #84]	; (8019c84 <FATFS_LinkDriverEx+0x94>)
 8019c30:	7a5b      	ldrb	r3, [r3, #9]
 8019c32:	b2db      	uxtb	r3, r3
 8019c34:	461a      	mov	r2, r3
 8019c36:	4b13      	ldr	r3, [pc, #76]	; (8019c84 <FATFS_LinkDriverEx+0x94>)
 8019c38:	4413      	add	r3, r2
 8019c3a:	79fa      	ldrb	r2, [r7, #7]
 8019c3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8019c3e:	4b11      	ldr	r3, [pc, #68]	; (8019c84 <FATFS_LinkDriverEx+0x94>)
 8019c40:	7a5b      	ldrb	r3, [r3, #9]
 8019c42:	b2db      	uxtb	r3, r3
 8019c44:	1c5a      	adds	r2, r3, #1
 8019c46:	b2d1      	uxtb	r1, r2
 8019c48:	4a0e      	ldr	r2, [pc, #56]	; (8019c84 <FATFS_LinkDriverEx+0x94>)
 8019c4a:	7251      	strb	r1, [r2, #9]
 8019c4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8019c4e:	7dbb      	ldrb	r3, [r7, #22]
 8019c50:	3330      	adds	r3, #48	; 0x30
 8019c52:	b2da      	uxtb	r2, r3
 8019c54:	68bb      	ldr	r3, [r7, #8]
 8019c56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8019c58:	68bb      	ldr	r3, [r7, #8]
 8019c5a:	3301      	adds	r3, #1
 8019c5c:	223a      	movs	r2, #58	; 0x3a
 8019c5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8019c60:	68bb      	ldr	r3, [r7, #8]
 8019c62:	3302      	adds	r3, #2
 8019c64:	222f      	movs	r2, #47	; 0x2f
 8019c66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8019c68:	68bb      	ldr	r3, [r7, #8]
 8019c6a:	3303      	adds	r3, #3
 8019c6c:	2200      	movs	r2, #0
 8019c6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8019c70:	2300      	movs	r3, #0
 8019c72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8019c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8019c76:	4618      	mov	r0, r3
 8019c78:	371c      	adds	r7, #28
 8019c7a:	46bd      	mov	sp, r7
 8019c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c80:	4770      	bx	lr
 8019c82:	bf00      	nop
 8019c84:	24000cf8 	.word	0x24000cf8

08019c88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b082      	sub	sp, #8
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	6078      	str	r0, [r7, #4]
 8019c90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8019c92:	2200      	movs	r2, #0
 8019c94:	6839      	ldr	r1, [r7, #0]
 8019c96:	6878      	ldr	r0, [r7, #4]
 8019c98:	f7ff ffaa 	bl	8019bf0 <FATFS_LinkDriverEx>
 8019c9c:	4603      	mov	r3, r0
}
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	3708      	adds	r7, #8
 8019ca2:	46bd      	mov	sp, r7
 8019ca4:	bd80      	pop	{r7, pc}
	...

08019ca8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019cac:	2200      	movs	r2, #0
 8019cae:	4913      	ldr	r1, [pc, #76]	; (8019cfc <MX_USB_DEVICE_Init+0x54>)
 8019cb0:	4813      	ldr	r0, [pc, #76]	; (8019d00 <MX_USB_DEVICE_Init+0x58>)
 8019cb2:	f7fc fc20 	bl	80164f6 <USBD_Init>
 8019cb6:	4603      	mov	r3, r0
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d001      	beq.n	8019cc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019cbc:	f7eb f8f8 	bl	8004eb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8019cc0:	4910      	ldr	r1, [pc, #64]	; (8019d04 <MX_USB_DEVICE_Init+0x5c>)
 8019cc2:	480f      	ldr	r0, [pc, #60]	; (8019d00 <MX_USB_DEVICE_Init+0x58>)
 8019cc4:	f7fc fc4d 	bl	8016562 <USBD_RegisterClass>
 8019cc8:	4603      	mov	r3, r0
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d001      	beq.n	8019cd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019cce:	f7eb f8ef 	bl	8004eb0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8019cd2:	490d      	ldr	r1, [pc, #52]	; (8019d08 <MX_USB_DEVICE_Init+0x60>)
 8019cd4:	480a      	ldr	r0, [pc, #40]	; (8019d00 <MX_USB_DEVICE_Init+0x58>)
 8019cd6:	f7fa fff7 	bl	8014cc8 <USBD_MSC_RegisterStorage>
 8019cda:	4603      	mov	r3, r0
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d001      	beq.n	8019ce4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019ce0:	f7eb f8e6 	bl	8004eb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019ce4:	4806      	ldr	r0, [pc, #24]	; (8019d00 <MX_USB_DEVICE_Init+0x58>)
 8019ce6:	f7fc fc5d 	bl	80165a4 <USBD_Start>
 8019cea:	4603      	mov	r3, r0
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d001      	beq.n	8019cf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019cf0:	f7eb f8de 	bl	8004eb0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8019cf4:	f7f0 fe38 	bl	800a968 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019cf8:	bf00      	nop
 8019cfa:	bd80      	pop	{r7, pc}
 8019cfc:	24000108 	.word	0x24000108
 8019d00:	24005808 	.word	0x24005808
 8019d04:	24000020 	.word	0x24000020
 8019d08:	24000158 	.word	0x24000158

08019d0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d0c:	b480      	push	{r7}
 8019d0e:	b083      	sub	sp, #12
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	4603      	mov	r3, r0
 8019d14:	6039      	str	r1, [r7, #0]
 8019d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	2212      	movs	r2, #18
 8019d1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019d1e:	4b03      	ldr	r3, [pc, #12]	; (8019d2c <USBD_FS_DeviceDescriptor+0x20>)
}
 8019d20:	4618      	mov	r0, r3
 8019d22:	370c      	adds	r7, #12
 8019d24:	46bd      	mov	sp, r7
 8019d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d2a:	4770      	bx	lr
 8019d2c:	24000124 	.word	0x24000124

08019d30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d30:	b480      	push	{r7}
 8019d32:	b083      	sub	sp, #12
 8019d34:	af00      	add	r7, sp, #0
 8019d36:	4603      	mov	r3, r0
 8019d38:	6039      	str	r1, [r7, #0]
 8019d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019d3c:	683b      	ldr	r3, [r7, #0]
 8019d3e:	2204      	movs	r2, #4
 8019d40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019d42:	4b03      	ldr	r3, [pc, #12]	; (8019d50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019d44:	4618      	mov	r0, r3
 8019d46:	370c      	adds	r7, #12
 8019d48:	46bd      	mov	sp, r7
 8019d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d4e:	4770      	bx	lr
 8019d50:	24000138 	.word	0x24000138

08019d54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d54:	b580      	push	{r7, lr}
 8019d56:	b082      	sub	sp, #8
 8019d58:	af00      	add	r7, sp, #0
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	6039      	str	r1, [r7, #0]
 8019d5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019d60:	79fb      	ldrb	r3, [r7, #7]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d105      	bne.n	8019d72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019d66:	683a      	ldr	r2, [r7, #0]
 8019d68:	4907      	ldr	r1, [pc, #28]	; (8019d88 <USBD_FS_ProductStrDescriptor+0x34>)
 8019d6a:	4808      	ldr	r0, [pc, #32]	; (8019d8c <USBD_FS_ProductStrDescriptor+0x38>)
 8019d6c:	f7fd fbe7 	bl	801753e <USBD_GetString>
 8019d70:	e004      	b.n	8019d7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019d72:	683a      	ldr	r2, [r7, #0]
 8019d74:	4904      	ldr	r1, [pc, #16]	; (8019d88 <USBD_FS_ProductStrDescriptor+0x34>)
 8019d76:	4805      	ldr	r0, [pc, #20]	; (8019d8c <USBD_FS_ProductStrDescriptor+0x38>)
 8019d78:	f7fd fbe1 	bl	801753e <USBD_GetString>
  }
  return USBD_StrDesc;
 8019d7c:	4b02      	ldr	r3, [pc, #8]	; (8019d88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019d7e:	4618      	mov	r0, r3
 8019d80:	3708      	adds	r7, #8
 8019d82:	46bd      	mov	sp, r7
 8019d84:	bd80      	pop	{r7, pc}
 8019d86:	bf00      	nop
 8019d88:	24005ad8 	.word	0x24005ad8
 8019d8c:	0801ed3c 	.word	0x0801ed3c

08019d90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b082      	sub	sp, #8
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	4603      	mov	r3, r0
 8019d98:	6039      	str	r1, [r7, #0]
 8019d9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019d9c:	683a      	ldr	r2, [r7, #0]
 8019d9e:	4904      	ldr	r1, [pc, #16]	; (8019db0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019da0:	4804      	ldr	r0, [pc, #16]	; (8019db4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019da2:	f7fd fbcc 	bl	801753e <USBD_GetString>
  return USBD_StrDesc;
 8019da6:	4b02      	ldr	r3, [pc, #8]	; (8019db0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019da8:	4618      	mov	r0, r3
 8019daa:	3708      	adds	r7, #8
 8019dac:	46bd      	mov	sp, r7
 8019dae:	bd80      	pop	{r7, pc}
 8019db0:	24005ad8 	.word	0x24005ad8
 8019db4:	0801ed50 	.word	0x0801ed50

08019db8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019db8:	b580      	push	{r7, lr}
 8019dba:	b082      	sub	sp, #8
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	6039      	str	r1, [r7, #0]
 8019dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019dc4:	683b      	ldr	r3, [r7, #0]
 8019dc6:	221a      	movs	r2, #26
 8019dc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019dca:	f000 f843 	bl	8019e54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019dce:	4b02      	ldr	r3, [pc, #8]	; (8019dd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	3708      	adds	r7, #8
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	bd80      	pop	{r7, pc}
 8019dd8:	2400013c 	.word	0x2400013c

08019ddc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b082      	sub	sp, #8
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	4603      	mov	r3, r0
 8019de4:	6039      	str	r1, [r7, #0]
 8019de6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019de8:	79fb      	ldrb	r3, [r7, #7]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d105      	bne.n	8019dfa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019dee:	683a      	ldr	r2, [r7, #0]
 8019df0:	4907      	ldr	r1, [pc, #28]	; (8019e10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019df2:	4808      	ldr	r0, [pc, #32]	; (8019e14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019df4:	f7fd fba3 	bl	801753e <USBD_GetString>
 8019df8:	e004      	b.n	8019e04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019dfa:	683a      	ldr	r2, [r7, #0]
 8019dfc:	4904      	ldr	r1, [pc, #16]	; (8019e10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019dfe:	4805      	ldr	r0, [pc, #20]	; (8019e14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019e00:	f7fd fb9d 	bl	801753e <USBD_GetString>
  }
  return USBD_StrDesc;
 8019e04:	4b02      	ldr	r3, [pc, #8]	; (8019e10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019e06:	4618      	mov	r0, r3
 8019e08:	3708      	adds	r7, #8
 8019e0a:	46bd      	mov	sp, r7
 8019e0c:	bd80      	pop	{r7, pc}
 8019e0e:	bf00      	nop
 8019e10:	24005ad8 	.word	0x24005ad8
 8019e14:	0801ed64 	.word	0x0801ed64

08019e18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019e18:	b580      	push	{r7, lr}
 8019e1a:	b082      	sub	sp, #8
 8019e1c:	af00      	add	r7, sp, #0
 8019e1e:	4603      	mov	r3, r0
 8019e20:	6039      	str	r1, [r7, #0]
 8019e22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019e24:	79fb      	ldrb	r3, [r7, #7]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d105      	bne.n	8019e36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019e2a:	683a      	ldr	r2, [r7, #0]
 8019e2c:	4907      	ldr	r1, [pc, #28]	; (8019e4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019e2e:	4808      	ldr	r0, [pc, #32]	; (8019e50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019e30:	f7fd fb85 	bl	801753e <USBD_GetString>
 8019e34:	e004      	b.n	8019e40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019e36:	683a      	ldr	r2, [r7, #0]
 8019e38:	4904      	ldr	r1, [pc, #16]	; (8019e4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019e3a:	4805      	ldr	r0, [pc, #20]	; (8019e50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019e3c:	f7fd fb7f 	bl	801753e <USBD_GetString>
  }
  return USBD_StrDesc;
 8019e40:	4b02      	ldr	r3, [pc, #8]	; (8019e4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019e42:	4618      	mov	r0, r3
 8019e44:	3708      	adds	r7, #8
 8019e46:	46bd      	mov	sp, r7
 8019e48:	bd80      	pop	{r7, pc}
 8019e4a:	bf00      	nop
 8019e4c:	24005ad8 	.word	0x24005ad8
 8019e50:	0801ed70 	.word	0x0801ed70

08019e54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019e54:	b580      	push	{r7, lr}
 8019e56:	b084      	sub	sp, #16
 8019e58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019e5a:	4b0f      	ldr	r3, [pc, #60]	; (8019e98 <Get_SerialNum+0x44>)
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019e60:	4b0e      	ldr	r3, [pc, #56]	; (8019e9c <Get_SerialNum+0x48>)
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019e66:	4b0e      	ldr	r3, [pc, #56]	; (8019ea0 <Get_SerialNum+0x4c>)
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019e6c:	68fa      	ldr	r2, [r7, #12]
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	4413      	add	r3, r2
 8019e72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d009      	beq.n	8019e8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019e7a:	2208      	movs	r2, #8
 8019e7c:	4909      	ldr	r1, [pc, #36]	; (8019ea4 <Get_SerialNum+0x50>)
 8019e7e:	68f8      	ldr	r0, [r7, #12]
 8019e80:	f000 f814 	bl	8019eac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019e84:	2204      	movs	r2, #4
 8019e86:	4908      	ldr	r1, [pc, #32]	; (8019ea8 <Get_SerialNum+0x54>)
 8019e88:	68b8      	ldr	r0, [r7, #8]
 8019e8a:	f000 f80f 	bl	8019eac <IntToUnicode>
  }
}
 8019e8e:	bf00      	nop
 8019e90:	3710      	adds	r7, #16
 8019e92:	46bd      	mov	sp, r7
 8019e94:	bd80      	pop	{r7, pc}
 8019e96:	bf00      	nop
 8019e98:	1ff1e800 	.word	0x1ff1e800
 8019e9c:	1ff1e804 	.word	0x1ff1e804
 8019ea0:	1ff1e808 	.word	0x1ff1e808
 8019ea4:	2400013e 	.word	0x2400013e
 8019ea8:	2400014e 	.word	0x2400014e

08019eac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019eac:	b480      	push	{r7}
 8019eae:	b087      	sub	sp, #28
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	60f8      	str	r0, [r7, #12]
 8019eb4:	60b9      	str	r1, [r7, #8]
 8019eb6:	4613      	mov	r3, r2
 8019eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019eba:	2300      	movs	r3, #0
 8019ebc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	75fb      	strb	r3, [r7, #23]
 8019ec2:	e027      	b.n	8019f14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	0f1b      	lsrs	r3, r3, #28
 8019ec8:	2b09      	cmp	r3, #9
 8019eca:	d80b      	bhi.n	8019ee4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	0f1b      	lsrs	r3, r3, #28
 8019ed0:	b2da      	uxtb	r2, r3
 8019ed2:	7dfb      	ldrb	r3, [r7, #23]
 8019ed4:	005b      	lsls	r3, r3, #1
 8019ed6:	4619      	mov	r1, r3
 8019ed8:	68bb      	ldr	r3, [r7, #8]
 8019eda:	440b      	add	r3, r1
 8019edc:	3230      	adds	r2, #48	; 0x30
 8019ede:	b2d2      	uxtb	r2, r2
 8019ee0:	701a      	strb	r2, [r3, #0]
 8019ee2:	e00a      	b.n	8019efa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	0f1b      	lsrs	r3, r3, #28
 8019ee8:	b2da      	uxtb	r2, r3
 8019eea:	7dfb      	ldrb	r3, [r7, #23]
 8019eec:	005b      	lsls	r3, r3, #1
 8019eee:	4619      	mov	r1, r3
 8019ef0:	68bb      	ldr	r3, [r7, #8]
 8019ef2:	440b      	add	r3, r1
 8019ef4:	3237      	adds	r2, #55	; 0x37
 8019ef6:	b2d2      	uxtb	r2, r2
 8019ef8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	011b      	lsls	r3, r3, #4
 8019efe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019f00:	7dfb      	ldrb	r3, [r7, #23]
 8019f02:	005b      	lsls	r3, r3, #1
 8019f04:	3301      	adds	r3, #1
 8019f06:	68ba      	ldr	r2, [r7, #8]
 8019f08:	4413      	add	r3, r2
 8019f0a:	2200      	movs	r2, #0
 8019f0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019f0e:	7dfb      	ldrb	r3, [r7, #23]
 8019f10:	3301      	adds	r3, #1
 8019f12:	75fb      	strb	r3, [r7, #23]
 8019f14:	7dfa      	ldrb	r2, [r7, #23]
 8019f16:	79fb      	ldrb	r3, [r7, #7]
 8019f18:	429a      	cmp	r2, r3
 8019f1a:	d3d3      	bcc.n	8019ec4 <IntToUnicode+0x18>
  }
}
 8019f1c:	bf00      	nop
 8019f1e:	371c      	adds	r7, #28
 8019f20:	46bd      	mov	sp, r7
 8019f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f26:	4770      	bx	lr

08019f28 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8019f28:	b480      	push	{r7}
 8019f2a:	b083      	sub	sp, #12
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	4603      	mov	r3, r0
 8019f30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8019f32:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8019f34:	4618      	mov	r0, r3
 8019f36:	370c      	adds	r7, #12
 8019f38:	46bd      	mov	sp, r7
 8019f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f3e:	4770      	bx	lr

08019f40 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b08e      	sub	sp, #56	; 0x38
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	4603      	mov	r3, r0
 8019f48:	60b9      	str	r1, [r7, #8]
 8019f4a:	607a      	str	r2, [r7, #4]
 8019f4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8019f4e:	23ff      	movs	r3, #255	; 0xff
 8019f50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8019f54:	f107 0310 	add.w	r3, r7, #16
 8019f58:	4619      	mov	r1, r3
 8019f5a:	480a      	ldr	r0, [pc, #40]	; (8019f84 <STORAGE_GetCapacity_FS+0x44>)
 8019f5c:	f7f5 f8a4 	bl	800f0a8 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8019f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f62:	1e5a      	subs	r2, r3, #1
 8019f64:	68bb      	ldr	r3, [r7, #8]
 8019f66:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8019f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f6a:	b29a      	uxth	r2, r3
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8019f70:	2300      	movs	r3, #0
 8019f72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8019f76:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	3738      	adds	r7, #56	; 0x38
 8019f7e:	46bd      	mov	sp, r7
 8019f80:	bd80      	pop	{r7, pc}
 8019f82:	bf00      	nop
 8019f84:	240050a4 	.word	0x240050a4

08019f88 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8019f88:	b480      	push	{r7}
 8019f8a:	b083      	sub	sp, #12
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	4603      	mov	r3, r0
 8019f90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019f92:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019f94:	4618      	mov	r0, r3
 8019f96:	370c      	adds	r7, #12
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f9e:	4770      	bx	lr

08019fa0 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8019fa0:	b480      	push	{r7}
 8019fa2:	b083      	sub	sp, #12
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8019faa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019fac:	4618      	mov	r0, r3
 8019fae:	370c      	adds	r7, #12
 8019fb0:	46bd      	mov	sp, r7
 8019fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb6:	4770      	bx	lr

08019fb8 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8019fb8:	b580      	push	{r7, lr}
 8019fba:	b088      	sub	sp, #32
 8019fbc:	af02      	add	r7, sp, #8
 8019fbe:	60b9      	str	r1, [r7, #8]
 8019fc0:	607a      	str	r2, [r7, #4]
 8019fc2:	461a      	mov	r2, r3
 8019fc4:	4603      	mov	r3, r0
 8019fc6:	73fb      	strb	r3, [r7, #15]
 8019fc8:	4613      	mov	r3, r2
 8019fca:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8019fcc:	23ff      	movs	r3, #255	; 0xff
 8019fce:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8019fd0:	89ba      	ldrh	r2, [r7, #12]
 8019fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8019fd6:	9300      	str	r3, [sp, #0]
 8019fd8:	4613      	mov	r3, r2
 8019fda:	687a      	ldr	r2, [r7, #4]
 8019fdc:	68b9      	ldr	r1, [r7, #8]
 8019fde:	4809      	ldr	r0, [pc, #36]	; (801a004 <STORAGE_Read_FS+0x4c>)
 8019fe0:	f7f3 ffd4 	bl	800df8c <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8019fe4:	bf00      	nop
 8019fe6:	4807      	ldr	r0, [pc, #28]	; (801a004 <STORAGE_Read_FS+0x4c>)
 8019fe8:	f7f5 f934 	bl	800f254 <HAL_SD_GetCardState>
 8019fec:	4603      	mov	r3, r0
 8019fee:	2b04      	cmp	r3, #4
 8019ff0:	d1f9      	bne.n	8019fe6 <STORAGE_Read_FS+0x2e>
	ret = 0;
 8019ff2:	2300      	movs	r3, #0
 8019ff4:	75fb      	strb	r3, [r7, #23]
	return ret;
 8019ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	3718      	adds	r7, #24
 8019ffe:	46bd      	mov	sp, r7
 801a000:	bd80      	pop	{r7, pc}
 801a002:	bf00      	nop
 801a004:	240050a4 	.word	0x240050a4

0801a008 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b088      	sub	sp, #32
 801a00c:	af02      	add	r7, sp, #8
 801a00e:	60b9      	str	r1, [r7, #8]
 801a010:	607a      	str	r2, [r7, #4]
 801a012:	461a      	mov	r2, r3
 801a014:	4603      	mov	r3, r0
 801a016:	73fb      	strb	r3, [r7, #15]
 801a018:	4613      	mov	r3, r2
 801a01a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 801a01c:	23ff      	movs	r3, #255	; 0xff
 801a01e:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801a020:	89ba      	ldrh	r2, [r7, #12]
 801a022:	f04f 33ff 	mov.w	r3, #4294967295
 801a026:	9300      	str	r3, [sp, #0]
 801a028:	4613      	mov	r3, r2
 801a02a:	687a      	ldr	r2, [r7, #4]
 801a02c:	68b9      	ldr	r1, [r7, #8]
 801a02e:	4809      	ldr	r0, [pc, #36]	; (801a054 <STORAGE_Write_FS+0x4c>)
 801a030:	f7f4 f936 	bl	800e2a0 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 801a034:	bf00      	nop
 801a036:	4807      	ldr	r0, [pc, #28]	; (801a054 <STORAGE_Write_FS+0x4c>)
 801a038:	f7f5 f90c 	bl	800f254 <HAL_SD_GetCardState>
 801a03c:	4603      	mov	r3, r0
 801a03e:	2b04      	cmp	r3, #4
 801a040:	d1f9      	bne.n	801a036 <STORAGE_Write_FS+0x2e>
	ret = 0;
 801a042:	2300      	movs	r3, #0
 801a044:	75fb      	strb	r3, [r7, #23]
	return ret;
 801a046:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801a04a:	4618      	mov	r0, r3
 801a04c:	3718      	adds	r7, #24
 801a04e:	46bd      	mov	sp, r7
 801a050:	bd80      	pop	{r7, pc}
 801a052:	bf00      	nop
 801a054:	240050a4 	.word	0x240050a4

0801a058 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801a058:	b480      	push	{r7}
 801a05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801a05c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a05e:	4618      	mov	r0, r3
 801a060:	46bd      	mov	sp, r7
 801a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a066:	4770      	bx	lr

0801a068 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a068:	b580      	push	{r7, lr}
 801a06a:	b08a      	sub	sp, #40	; 0x28
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a070:	f107 0314 	add.w	r3, r7, #20
 801a074:	2200      	movs	r2, #0
 801a076:	601a      	str	r2, [r3, #0]
 801a078:	605a      	str	r2, [r3, #4]
 801a07a:	609a      	str	r2, [r3, #8]
 801a07c:	60da      	str	r2, [r3, #12]
 801a07e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	4a1e      	ldr	r2, [pc, #120]	; (801a100 <HAL_PCD_MspInit+0x98>)
 801a086:	4293      	cmp	r3, r2
 801a088:	d136      	bne.n	801a0f8 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a08a:	4b1e      	ldr	r3, [pc, #120]	; (801a104 <HAL_PCD_MspInit+0x9c>)
 801a08c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801a090:	4a1c      	ldr	r2, [pc, #112]	; (801a104 <HAL_PCD_MspInit+0x9c>)
 801a092:	f043 0301 	orr.w	r3, r3, #1
 801a096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801a09a:	4b1a      	ldr	r3, [pc, #104]	; (801a104 <HAL_PCD_MspInit+0x9c>)
 801a09c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801a0a0:	f003 0301 	and.w	r3, r3, #1
 801a0a4:	613b      	str	r3, [r7, #16]
 801a0a6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a0a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a0ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a0ae:	2302      	movs	r3, #2
 801a0b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a0b6:	2300      	movs	r3, #0
 801a0b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801a0ba:	230a      	movs	r3, #10
 801a0bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a0be:	f107 0314 	add.w	r3, r7, #20
 801a0c2:	4619      	mov	r1, r3
 801a0c4:	4810      	ldr	r0, [pc, #64]	; (801a108 <HAL_PCD_MspInit+0xa0>)
 801a0c6:	f7ee ff39 	bl	8008f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a0ca:	4b0e      	ldr	r3, [pc, #56]	; (801a104 <HAL_PCD_MspInit+0x9c>)
 801a0cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a0d0:	4a0c      	ldr	r2, [pc, #48]	; (801a104 <HAL_PCD_MspInit+0x9c>)
 801a0d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a0d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801a0da:	4b0a      	ldr	r3, [pc, #40]	; (801a104 <HAL_PCD_MspInit+0x9c>)
 801a0dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a0e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a0e4:	60fb      	str	r3, [r7, #12]
 801a0e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801a0e8:	2200      	movs	r2, #0
 801a0ea:	2100      	movs	r1, #0
 801a0ec:	2065      	movs	r0, #101	; 0x65
 801a0ee:	f7eb fcdc 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a0f2:	2065      	movs	r0, #101	; 0x65
 801a0f4:	f7eb fcf3 	bl	8005ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a0f8:	bf00      	nop
 801a0fa:	3728      	adds	r7, #40	; 0x28
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	bd80      	pop	{r7, pc}
 801a100:	40080000 	.word	0x40080000
 801a104:	58024400 	.word	0x58024400
 801a108:	58020000 	.word	0x58020000

0801a10c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a10c:	b580      	push	{r7, lr}
 801a10e:	b082      	sub	sp, #8
 801a110:	af00      	add	r7, sp, #0
 801a112:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a120:	4619      	mov	r1, r3
 801a122:	4610      	mov	r0, r2
 801a124:	f7fc fa89 	bl	801663a <USBD_LL_SetupStage>
}
 801a128:	bf00      	nop
 801a12a:	3708      	adds	r7, #8
 801a12c:	46bd      	mov	sp, r7
 801a12e:	bd80      	pop	{r7, pc}

0801a130 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a130:	b580      	push	{r7, lr}
 801a132:	b082      	sub	sp, #8
 801a134:	af00      	add	r7, sp, #0
 801a136:	6078      	str	r0, [r7, #4]
 801a138:	460b      	mov	r3, r1
 801a13a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801a142:	78fa      	ldrb	r2, [r7, #3]
 801a144:	6879      	ldr	r1, [r7, #4]
 801a146:	4613      	mov	r3, r2
 801a148:	00db      	lsls	r3, r3, #3
 801a14a:	1a9b      	subs	r3, r3, r2
 801a14c:	009b      	lsls	r3, r3, #2
 801a14e:	440b      	add	r3, r1
 801a150:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a154:	681a      	ldr	r2, [r3, #0]
 801a156:	78fb      	ldrb	r3, [r7, #3]
 801a158:	4619      	mov	r1, r3
 801a15a:	f7fc fac1 	bl	80166e0 <USBD_LL_DataOutStage>
}
 801a15e:	bf00      	nop
 801a160:	3708      	adds	r7, #8
 801a162:	46bd      	mov	sp, r7
 801a164:	bd80      	pop	{r7, pc}

0801a166 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a166:	b580      	push	{r7, lr}
 801a168:	b082      	sub	sp, #8
 801a16a:	af00      	add	r7, sp, #0
 801a16c:	6078      	str	r0, [r7, #4]
 801a16e:	460b      	mov	r3, r1
 801a170:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801a178:	78fa      	ldrb	r2, [r7, #3]
 801a17a:	6879      	ldr	r1, [r7, #4]
 801a17c:	4613      	mov	r3, r2
 801a17e:	00db      	lsls	r3, r3, #3
 801a180:	1a9b      	subs	r3, r3, r2
 801a182:	009b      	lsls	r3, r3, #2
 801a184:	440b      	add	r3, r1
 801a186:	3348      	adds	r3, #72	; 0x48
 801a188:	681a      	ldr	r2, [r3, #0]
 801a18a:	78fb      	ldrb	r3, [r7, #3]
 801a18c:	4619      	mov	r1, r3
 801a18e:	f7fc fb0a 	bl	80167a6 <USBD_LL_DataInStage>
}
 801a192:	bf00      	nop
 801a194:	3708      	adds	r7, #8
 801a196:	46bd      	mov	sp, r7
 801a198:	bd80      	pop	{r7, pc}

0801a19a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a19a:	b580      	push	{r7, lr}
 801a19c:	b082      	sub	sp, #8
 801a19e:	af00      	add	r7, sp, #0
 801a1a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	f7fc fc0e 	bl	80169ca <USBD_LL_SOF>
}
 801a1ae:	bf00      	nop
 801a1b0:	3708      	adds	r7, #8
 801a1b2:	46bd      	mov	sp, r7
 801a1b4:	bd80      	pop	{r7, pc}

0801a1b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a1b6:	b580      	push	{r7, lr}
 801a1b8:	b084      	sub	sp, #16
 801a1ba:	af00      	add	r7, sp, #0
 801a1bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a1be:	2301      	movs	r3, #1
 801a1c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	68db      	ldr	r3, [r3, #12]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d102      	bne.n	801a1d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a1ca:	2300      	movs	r3, #0
 801a1cc:	73fb      	strb	r3, [r7, #15]
 801a1ce:	e008      	b.n	801a1e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	68db      	ldr	r3, [r3, #12]
 801a1d4:	2b02      	cmp	r3, #2
 801a1d6:	d102      	bne.n	801a1de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a1d8:	2301      	movs	r3, #1
 801a1da:	73fb      	strb	r3, [r7, #15]
 801a1dc:	e001      	b.n	801a1e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a1de:	f7ea fe67 	bl	8004eb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a1e8:	7bfa      	ldrb	r2, [r7, #15]
 801a1ea:	4611      	mov	r1, r2
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	f7fc fbb1 	bl	8016954 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a1f8:	4618      	mov	r0, r3
 801a1fa:	f7fc fb6a 	bl	80168d2 <USBD_LL_Reset>
}
 801a1fe:	bf00      	nop
 801a200:	3710      	adds	r7, #16
 801a202:	46bd      	mov	sp, r7
 801a204:	bd80      	pop	{r7, pc}
	...

0801a208 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a208:	b580      	push	{r7, lr}
 801a20a:	b082      	sub	sp, #8
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a216:	4618      	mov	r0, r3
 801a218:	f7fc fbac 	bl	8016974 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	687a      	ldr	r2, [r7, #4]
 801a228:	6812      	ldr	r2, [r2, #0]
 801a22a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a22e:	f043 0301 	orr.w	r3, r3, #1
 801a232:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	6a1b      	ldr	r3, [r3, #32]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d005      	beq.n	801a248 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a23c:	4b04      	ldr	r3, [pc, #16]	; (801a250 <HAL_PCD_SuspendCallback+0x48>)
 801a23e:	691b      	ldr	r3, [r3, #16]
 801a240:	4a03      	ldr	r2, [pc, #12]	; (801a250 <HAL_PCD_SuspendCallback+0x48>)
 801a242:	f043 0306 	orr.w	r3, r3, #6
 801a246:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a248:	bf00      	nop
 801a24a:	3708      	adds	r7, #8
 801a24c:	46bd      	mov	sp, r7
 801a24e:	bd80      	pop	{r7, pc}
 801a250:	e000ed00 	.word	0xe000ed00

0801a254 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b082      	sub	sp, #8
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a262:	4618      	mov	r0, r3
 801a264:	f7fc fb9b 	bl	801699e <USBD_LL_Resume>
}
 801a268:	bf00      	nop
 801a26a:	3708      	adds	r7, #8
 801a26c:	46bd      	mov	sp, r7
 801a26e:	bd80      	pop	{r7, pc}

0801a270 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a270:	b580      	push	{r7, lr}
 801a272:	b082      	sub	sp, #8
 801a274:	af00      	add	r7, sp, #0
 801a276:	6078      	str	r0, [r7, #4]
 801a278:	460b      	mov	r3, r1
 801a27a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a282:	78fa      	ldrb	r2, [r7, #3]
 801a284:	4611      	mov	r1, r2
 801a286:	4618      	mov	r0, r3
 801a288:	f7fc fbc6 	bl	8016a18 <USBD_LL_IsoOUTIncomplete>
}
 801a28c:	bf00      	nop
 801a28e:	3708      	adds	r7, #8
 801a290:	46bd      	mov	sp, r7
 801a292:	bd80      	pop	{r7, pc}

0801a294 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b082      	sub	sp, #8
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
 801a29c:	460b      	mov	r3, r1
 801a29e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a2a6:	78fa      	ldrb	r2, [r7, #3]
 801a2a8:	4611      	mov	r1, r2
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	f7fc fba7 	bl	80169fe <USBD_LL_IsoINIncomplete>
}
 801a2b0:	bf00      	nop
 801a2b2:	3708      	adds	r7, #8
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	bd80      	pop	{r7, pc}

0801a2b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a2b8:	b580      	push	{r7, lr}
 801a2ba:	b082      	sub	sp, #8
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	f7fc fbb3 	bl	8016a32 <USBD_LL_DevConnected>
}
 801a2cc:	bf00      	nop
 801a2ce:	3708      	adds	r7, #8
 801a2d0:	46bd      	mov	sp, r7
 801a2d2:	bd80      	pop	{r7, pc}

0801a2d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a2d4:	b580      	push	{r7, lr}
 801a2d6:	b082      	sub	sp, #8
 801a2d8:	af00      	add	r7, sp, #0
 801a2da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a2e2:	4618      	mov	r0, r3
 801a2e4:	f7fc fbb0 	bl	8016a48 <USBD_LL_DevDisconnected>
}
 801a2e8:	bf00      	nop
 801a2ea:	3708      	adds	r7, #8
 801a2ec:	46bd      	mov	sp, r7
 801a2ee:	bd80      	pop	{r7, pc}

0801a2f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b082      	sub	sp, #8
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	781b      	ldrb	r3, [r3, #0]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d13e      	bne.n	801a37e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801a300:	4a21      	ldr	r2, [pc, #132]	; (801a388 <USBD_LL_Init+0x98>)
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	4a1f      	ldr	r2, [pc, #124]	; (801a388 <USBD_LL_Init+0x98>)
 801a30c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a310:	4b1d      	ldr	r3, [pc, #116]	; (801a388 <USBD_LL_Init+0x98>)
 801a312:	4a1e      	ldr	r2, [pc, #120]	; (801a38c <USBD_LL_Init+0x9c>)
 801a314:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801a316:	4b1c      	ldr	r3, [pc, #112]	; (801a388 <USBD_LL_Init+0x98>)
 801a318:	2209      	movs	r2, #9
 801a31a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801a31c:	4b1a      	ldr	r3, [pc, #104]	; (801a388 <USBD_LL_Init+0x98>)
 801a31e:	2202      	movs	r2, #2
 801a320:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a322:	4b19      	ldr	r3, [pc, #100]	; (801a388 <USBD_LL_Init+0x98>)
 801a324:	2200      	movs	r2, #0
 801a326:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a328:	4b17      	ldr	r3, [pc, #92]	; (801a388 <USBD_LL_Init+0x98>)
 801a32a:	2202      	movs	r2, #2
 801a32c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a32e:	4b16      	ldr	r3, [pc, #88]	; (801a388 <USBD_LL_Init+0x98>)
 801a330:	2200      	movs	r2, #0
 801a332:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801a334:	4b14      	ldr	r3, [pc, #80]	; (801a388 <USBD_LL_Init+0x98>)
 801a336:	2200      	movs	r2, #0
 801a338:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801a33a:	4b13      	ldr	r3, [pc, #76]	; (801a388 <USBD_LL_Init+0x98>)
 801a33c:	2200      	movs	r2, #0
 801a33e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801a340:	4b11      	ldr	r3, [pc, #68]	; (801a388 <USBD_LL_Init+0x98>)
 801a342:	2200      	movs	r2, #0
 801a344:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801a346:	4b10      	ldr	r3, [pc, #64]	; (801a388 <USBD_LL_Init+0x98>)
 801a348:	2200      	movs	r2, #0
 801a34a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801a34c:	4b0e      	ldr	r3, [pc, #56]	; (801a388 <USBD_LL_Init+0x98>)
 801a34e:	2200      	movs	r2, #0
 801a350:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801a352:	480d      	ldr	r0, [pc, #52]	; (801a388 <USBD_LL_Init+0x98>)
 801a354:	f7ef f82c 	bl	80093b0 <HAL_PCD_Init>
 801a358:	4603      	mov	r3, r0
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d001      	beq.n	801a362 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801a35e:	f7ea fda7 	bl	8004eb0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801a362:	2180      	movs	r1, #128	; 0x80
 801a364:	4808      	ldr	r0, [pc, #32]	; (801a388 <USBD_LL_Init+0x98>)
 801a366:	f7f0 f9ea 	bl	800a73e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801a36a:	2240      	movs	r2, #64	; 0x40
 801a36c:	2100      	movs	r1, #0
 801a36e:	4806      	ldr	r0, [pc, #24]	; (801a388 <USBD_LL_Init+0x98>)
 801a370:	f7f0 f99e 	bl	800a6b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801a374:	2280      	movs	r2, #128	; 0x80
 801a376:	2101      	movs	r1, #1
 801a378:	4803      	ldr	r0, [pc, #12]	; (801a388 <USBD_LL_Init+0x98>)
 801a37a:	f7f0 f999 	bl	800a6b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801a37e:	2300      	movs	r3, #0
}
 801a380:	4618      	mov	r0, r3
 801a382:	3708      	adds	r7, #8
 801a384:	46bd      	mov	sp, r7
 801a386:	bd80      	pop	{r7, pc}
 801a388:	24005cd8 	.word	0x24005cd8
 801a38c:	40080000 	.word	0x40080000

0801a390 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a390:	b580      	push	{r7, lr}
 801a392:	b084      	sub	sp, #16
 801a394:	af00      	add	r7, sp, #0
 801a396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a398:	2300      	movs	r3, #0
 801a39a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a39c:	2300      	movs	r3, #0
 801a39e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a3a6:	4618      	mov	r0, r3
 801a3a8:	f7ef f926 	bl	80095f8 <HAL_PCD_Start>
 801a3ac:	4603      	mov	r3, r0
 801a3ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a3b0:	7bfb      	ldrb	r3, [r7, #15]
 801a3b2:	4618      	mov	r0, r3
 801a3b4:	f000 f94a 	bl	801a64c <USBD_Get_USB_Status>
 801a3b8:	4603      	mov	r3, r0
 801a3ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a3bc:	7bbb      	ldrb	r3, [r7, #14]
}
 801a3be:	4618      	mov	r0, r3
 801a3c0:	3710      	adds	r7, #16
 801a3c2:	46bd      	mov	sp, r7
 801a3c4:	bd80      	pop	{r7, pc}

0801a3c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a3c6:	b580      	push	{r7, lr}
 801a3c8:	b084      	sub	sp, #16
 801a3ca:	af00      	add	r7, sp, #0
 801a3cc:	6078      	str	r0, [r7, #4]
 801a3ce:	4608      	mov	r0, r1
 801a3d0:	4611      	mov	r1, r2
 801a3d2:	461a      	mov	r2, r3
 801a3d4:	4603      	mov	r3, r0
 801a3d6:	70fb      	strb	r3, [r7, #3]
 801a3d8:	460b      	mov	r3, r1
 801a3da:	70bb      	strb	r3, [r7, #2]
 801a3dc:	4613      	mov	r3, r2
 801a3de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a3ee:	78bb      	ldrb	r3, [r7, #2]
 801a3f0:	883a      	ldrh	r2, [r7, #0]
 801a3f2:	78f9      	ldrb	r1, [r7, #3]
 801a3f4:	f7ef fd37 	bl	8009e66 <HAL_PCD_EP_Open>
 801a3f8:	4603      	mov	r3, r0
 801a3fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a3fc:	7bfb      	ldrb	r3, [r7, #15]
 801a3fe:	4618      	mov	r0, r3
 801a400:	f000 f924 	bl	801a64c <USBD_Get_USB_Status>
 801a404:	4603      	mov	r3, r0
 801a406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a408:	7bbb      	ldrb	r3, [r7, #14]
}
 801a40a:	4618      	mov	r0, r3
 801a40c:	3710      	adds	r7, #16
 801a40e:	46bd      	mov	sp, r7
 801a410:	bd80      	pop	{r7, pc}

0801a412 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a412:	b580      	push	{r7, lr}
 801a414:	b084      	sub	sp, #16
 801a416:	af00      	add	r7, sp, #0
 801a418:	6078      	str	r0, [r7, #4]
 801a41a:	460b      	mov	r3, r1
 801a41c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a41e:	2300      	movs	r3, #0
 801a420:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a422:	2300      	movs	r3, #0
 801a424:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a42c:	78fa      	ldrb	r2, [r7, #3]
 801a42e:	4611      	mov	r1, r2
 801a430:	4618      	mov	r0, r3
 801a432:	f7ef fd80 	bl	8009f36 <HAL_PCD_EP_Close>
 801a436:	4603      	mov	r3, r0
 801a438:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a43a:	7bfb      	ldrb	r3, [r7, #15]
 801a43c:	4618      	mov	r0, r3
 801a43e:	f000 f905 	bl	801a64c <USBD_Get_USB_Status>
 801a442:	4603      	mov	r3, r0
 801a444:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a446:	7bbb      	ldrb	r3, [r7, #14]
}
 801a448:	4618      	mov	r0, r3
 801a44a:	3710      	adds	r7, #16
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd80      	pop	{r7, pc}

0801a450 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b084      	sub	sp, #16
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
 801a458:	460b      	mov	r3, r1
 801a45a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a45c:	2300      	movs	r3, #0
 801a45e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a460:	2300      	movs	r3, #0
 801a462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a46a:	78fa      	ldrb	r2, [r7, #3]
 801a46c:	4611      	mov	r1, r2
 801a46e:	4618      	mov	r0, r3
 801a470:	f7ef ff12 	bl	800a298 <HAL_PCD_EP_Flush>
 801a474:	4603      	mov	r3, r0
 801a476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a478:	7bfb      	ldrb	r3, [r7, #15]
 801a47a:	4618      	mov	r0, r3
 801a47c:	f000 f8e6 	bl	801a64c <USBD_Get_USB_Status>
 801a480:	4603      	mov	r3, r0
 801a482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a484:	7bbb      	ldrb	r3, [r7, #14]
}
 801a486:	4618      	mov	r0, r3
 801a488:	3710      	adds	r7, #16
 801a48a:	46bd      	mov	sp, r7
 801a48c:	bd80      	pop	{r7, pc}

0801a48e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a48e:	b580      	push	{r7, lr}
 801a490:	b084      	sub	sp, #16
 801a492:	af00      	add	r7, sp, #0
 801a494:	6078      	str	r0, [r7, #4]
 801a496:	460b      	mov	r3, r1
 801a498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a49a:	2300      	movs	r3, #0
 801a49c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a49e:	2300      	movs	r3, #0
 801a4a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a4a8:	78fa      	ldrb	r2, [r7, #3]
 801a4aa:	4611      	mov	r1, r2
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	f7ef fe39 	bl	800a124 <HAL_PCD_EP_SetStall>
 801a4b2:	4603      	mov	r3, r0
 801a4b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a4b6:	7bfb      	ldrb	r3, [r7, #15]
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	f000 f8c7 	bl	801a64c <USBD_Get_USB_Status>
 801a4be:	4603      	mov	r3, r0
 801a4c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a4c2:	7bbb      	ldrb	r3, [r7, #14]
}
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	3710      	adds	r7, #16
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	bd80      	pop	{r7, pc}

0801a4cc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b084      	sub	sp, #16
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	6078      	str	r0, [r7, #4]
 801a4d4:	460b      	mov	r3, r1
 801a4d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a4d8:	2300      	movs	r3, #0
 801a4da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a4dc:	2300      	movs	r3, #0
 801a4de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a4e6:	78fa      	ldrb	r2, [r7, #3]
 801a4e8:	4611      	mov	r1, r2
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	f7ef fe7e 	bl	800a1ec <HAL_PCD_EP_ClrStall>
 801a4f0:	4603      	mov	r3, r0
 801a4f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a4f4:	7bfb      	ldrb	r3, [r7, #15]
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	f000 f8a8 	bl	801a64c <USBD_Get_USB_Status>
 801a4fc:	4603      	mov	r3, r0
 801a4fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a500:	7bbb      	ldrb	r3, [r7, #14]
}
 801a502:	4618      	mov	r0, r3
 801a504:	3710      	adds	r7, #16
 801a506:	46bd      	mov	sp, r7
 801a508:	bd80      	pop	{r7, pc}

0801a50a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a50a:	b480      	push	{r7}
 801a50c:	b085      	sub	sp, #20
 801a50e:	af00      	add	r7, sp, #0
 801a510:	6078      	str	r0, [r7, #4]
 801a512:	460b      	mov	r3, r1
 801a514:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a51c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a51e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a522:	2b00      	cmp	r3, #0
 801a524:	da0b      	bge.n	801a53e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a526:	78fb      	ldrb	r3, [r7, #3]
 801a528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a52c:	68f9      	ldr	r1, [r7, #12]
 801a52e:	4613      	mov	r3, r2
 801a530:	00db      	lsls	r3, r3, #3
 801a532:	1a9b      	subs	r3, r3, r2
 801a534:	009b      	lsls	r3, r3, #2
 801a536:	440b      	add	r3, r1
 801a538:	333e      	adds	r3, #62	; 0x3e
 801a53a:	781b      	ldrb	r3, [r3, #0]
 801a53c:	e00b      	b.n	801a556 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a53e:	78fb      	ldrb	r3, [r7, #3]
 801a540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a544:	68f9      	ldr	r1, [r7, #12]
 801a546:	4613      	mov	r3, r2
 801a548:	00db      	lsls	r3, r3, #3
 801a54a:	1a9b      	subs	r3, r3, r2
 801a54c:	009b      	lsls	r3, r3, #2
 801a54e:	440b      	add	r3, r1
 801a550:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a554:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a556:	4618      	mov	r0, r3
 801a558:	3714      	adds	r7, #20
 801a55a:	46bd      	mov	sp, r7
 801a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a560:	4770      	bx	lr

0801a562 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a562:	b580      	push	{r7, lr}
 801a564:	b084      	sub	sp, #16
 801a566:	af00      	add	r7, sp, #0
 801a568:	6078      	str	r0, [r7, #4]
 801a56a:	460b      	mov	r3, r1
 801a56c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a56e:	2300      	movs	r3, #0
 801a570:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a572:	2300      	movs	r3, #0
 801a574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a57c:	78fa      	ldrb	r2, [r7, #3]
 801a57e:	4611      	mov	r1, r2
 801a580:	4618      	mov	r0, r3
 801a582:	f7ef fc4b 	bl	8009e1c <HAL_PCD_SetAddress>
 801a586:	4603      	mov	r3, r0
 801a588:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a58a:	7bfb      	ldrb	r3, [r7, #15]
 801a58c:	4618      	mov	r0, r3
 801a58e:	f000 f85d 	bl	801a64c <USBD_Get_USB_Status>
 801a592:	4603      	mov	r3, r0
 801a594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a596:	7bbb      	ldrb	r3, [r7, #14]
}
 801a598:	4618      	mov	r0, r3
 801a59a:	3710      	adds	r7, #16
 801a59c:	46bd      	mov	sp, r7
 801a59e:	bd80      	pop	{r7, pc}

0801a5a0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a5a0:	b580      	push	{r7, lr}
 801a5a2:	b086      	sub	sp, #24
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	60f8      	str	r0, [r7, #12]
 801a5a8:	607a      	str	r2, [r7, #4]
 801a5aa:	603b      	str	r3, [r7, #0]
 801a5ac:	460b      	mov	r3, r1
 801a5ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5b4:	2300      	movs	r3, #0
 801a5b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a5b8:	68fb      	ldr	r3, [r7, #12]
 801a5ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a5be:	7af9      	ldrb	r1, [r7, #11]
 801a5c0:	683b      	ldr	r3, [r7, #0]
 801a5c2:	687a      	ldr	r2, [r7, #4]
 801a5c4:	f7ef fd64 	bl	800a090 <HAL_PCD_EP_Transmit>
 801a5c8:	4603      	mov	r3, r0
 801a5ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a5cc:	7dfb      	ldrb	r3, [r7, #23]
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	f000 f83c 	bl	801a64c <USBD_Get_USB_Status>
 801a5d4:	4603      	mov	r3, r0
 801a5d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a5d8:	7dbb      	ldrb	r3, [r7, #22]
}
 801a5da:	4618      	mov	r0, r3
 801a5dc:	3718      	adds	r7, #24
 801a5de:	46bd      	mov	sp, r7
 801a5e0:	bd80      	pop	{r7, pc}

0801a5e2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a5e2:	b580      	push	{r7, lr}
 801a5e4:	b086      	sub	sp, #24
 801a5e6:	af00      	add	r7, sp, #0
 801a5e8:	60f8      	str	r0, [r7, #12]
 801a5ea:	607a      	str	r2, [r7, #4]
 801a5ec:	603b      	str	r3, [r7, #0]
 801a5ee:	460b      	mov	r3, r1
 801a5f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5f2:	2300      	movs	r3, #0
 801a5f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5f6:	2300      	movs	r3, #0
 801a5f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a600:	7af9      	ldrb	r1, [r7, #11]
 801a602:	683b      	ldr	r3, [r7, #0]
 801a604:	687a      	ldr	r2, [r7, #4]
 801a606:	f7ef fce0 	bl	8009fca <HAL_PCD_EP_Receive>
 801a60a:	4603      	mov	r3, r0
 801a60c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a60e:	7dfb      	ldrb	r3, [r7, #23]
 801a610:	4618      	mov	r0, r3
 801a612:	f000 f81b 	bl	801a64c <USBD_Get_USB_Status>
 801a616:	4603      	mov	r3, r0
 801a618:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a61a:	7dbb      	ldrb	r3, [r7, #22]
}
 801a61c:	4618      	mov	r0, r3
 801a61e:	3718      	adds	r7, #24
 801a620:	46bd      	mov	sp, r7
 801a622:	bd80      	pop	{r7, pc}

0801a624 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a624:	b580      	push	{r7, lr}
 801a626:	b082      	sub	sp, #8
 801a628:	af00      	add	r7, sp, #0
 801a62a:	6078      	str	r0, [r7, #4]
 801a62c:	460b      	mov	r3, r1
 801a62e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a636:	78fa      	ldrb	r2, [r7, #3]
 801a638:	4611      	mov	r1, r2
 801a63a:	4618      	mov	r0, r3
 801a63c:	f7ef fd10 	bl	800a060 <HAL_PCD_EP_GetRxCount>
 801a640:	4603      	mov	r3, r0
}
 801a642:	4618      	mov	r0, r3
 801a644:	3708      	adds	r7, #8
 801a646:	46bd      	mov	sp, r7
 801a648:	bd80      	pop	{r7, pc}
	...

0801a64c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a64c:	b480      	push	{r7}
 801a64e:	b085      	sub	sp, #20
 801a650:	af00      	add	r7, sp, #0
 801a652:	4603      	mov	r3, r0
 801a654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a656:	2300      	movs	r3, #0
 801a658:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a65a:	79fb      	ldrb	r3, [r7, #7]
 801a65c:	2b03      	cmp	r3, #3
 801a65e:	d817      	bhi.n	801a690 <USBD_Get_USB_Status+0x44>
 801a660:	a201      	add	r2, pc, #4	; (adr r2, 801a668 <USBD_Get_USB_Status+0x1c>)
 801a662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a666:	bf00      	nop
 801a668:	0801a679 	.word	0x0801a679
 801a66c:	0801a67f 	.word	0x0801a67f
 801a670:	0801a685 	.word	0x0801a685
 801a674:	0801a68b 	.word	0x0801a68b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a678:	2300      	movs	r3, #0
 801a67a:	73fb      	strb	r3, [r7, #15]
    break;
 801a67c:	e00b      	b.n	801a696 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a67e:	2303      	movs	r3, #3
 801a680:	73fb      	strb	r3, [r7, #15]
    break;
 801a682:	e008      	b.n	801a696 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a684:	2301      	movs	r3, #1
 801a686:	73fb      	strb	r3, [r7, #15]
    break;
 801a688:	e005      	b.n	801a696 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a68a:	2303      	movs	r3, #3
 801a68c:	73fb      	strb	r3, [r7, #15]
    break;
 801a68e:	e002      	b.n	801a696 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a690:	2303      	movs	r3, #3
 801a692:	73fb      	strb	r3, [r7, #15]
    break;
 801a694:	bf00      	nop
  }
  return usb_status;
 801a696:	7bfb      	ldrb	r3, [r7, #15]
}
 801a698:	4618      	mov	r0, r3
 801a69a:	3714      	adds	r7, #20
 801a69c:	46bd      	mov	sp, r7
 801a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a2:	4770      	bx	lr
 801a6a4:	0000      	movs	r0, r0
	...

0801a6a8 <pow>:
 801a6a8:	b570      	push	{r4, r5, r6, lr}
 801a6aa:	ed2d 8b0a 	vpush	{d8-d12}
 801a6ae:	eeb0 9b40 	vmov.f64	d9, d0
 801a6b2:	eeb0 8b41 	vmov.f64	d8, d1
 801a6b6:	4c8c      	ldr	r4, [pc, #560]	; (801a8e8 <pow+0x240>)
 801a6b8:	b08a      	sub	sp, #40	; 0x28
 801a6ba:	f000 f925 	bl	801a908 <__ieee754_pow>
 801a6be:	f994 3000 	ldrsb.w	r3, [r4]
 801a6c2:	eeb0 ab40 	vmov.f64	d10, d0
 801a6c6:	1c5a      	adds	r2, r3, #1
 801a6c8:	4626      	mov	r6, r4
 801a6ca:	d04b      	beq.n	801a764 <pow+0xbc>
 801a6cc:	eeb4 8b48 	vcmp.f64	d8, d8
 801a6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6d4:	d646      	bvs.n	801a764 <pow+0xbc>
 801a6d6:	eeb4 9b49 	vcmp.f64	d9, d9
 801a6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6de:	d719      	bvc.n	801a714 <pow+0x6c>
 801a6e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6e8:	d13c      	bne.n	801a764 <pow+0xbc>
 801a6ea:	2201      	movs	r2, #1
 801a6ec:	9200      	str	r2, [sp, #0]
 801a6ee:	497f      	ldr	r1, [pc, #508]	; (801a8ec <pow+0x244>)
 801a6f0:	4a7f      	ldr	r2, [pc, #508]	; (801a8f0 <pow+0x248>)
 801a6f2:	9201      	str	r2, [sp, #4]
 801a6f4:	2000      	movs	r0, #0
 801a6f6:	2200      	movs	r2, #0
 801a6f8:	2b02      	cmp	r3, #2
 801a6fa:	9208      	str	r2, [sp, #32]
 801a6fc:	ed8d 9b02 	vstr	d9, [sp, #8]
 801a700:	ed8d 8b04 	vstr	d8, [sp, #16]
 801a704:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a708:	d02a      	beq.n	801a760 <pow+0xb8>
 801a70a:	4668      	mov	r0, sp
 801a70c:	f000 fc96 	bl	801b03c <matherr>
 801a710:	bb00      	cbnz	r0, 801a754 <pow+0xac>
 801a712:	e04e      	b.n	801a7b2 <pow+0x10a>
 801a714:	ed9f bb72 	vldr	d11, [pc, #456]	; 801a8e0 <pow+0x238>
 801a718:	eeb4 9b4b 	vcmp.f64	d9, d11
 801a71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a720:	eeb0 cb4b 	vmov.f64	d12, d11
 801a724:	d14a      	bne.n	801a7bc <pow+0x114>
 801a726:	eeb4 8b4b 	vcmp.f64	d8, d11
 801a72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a72e:	d11f      	bne.n	801a770 <pow+0xc8>
 801a730:	2201      	movs	r2, #1
 801a732:	9200      	str	r2, [sp, #0]
 801a734:	4a6e      	ldr	r2, [pc, #440]	; (801a8f0 <pow+0x248>)
 801a736:	9201      	str	r2, [sp, #4]
 801a738:	2200      	movs	r2, #0
 801a73a:	9208      	str	r2, [sp, #32]
 801a73c:	ed8d 9b02 	vstr	d9, [sp, #8]
 801a740:	ed8d 8b04 	vstr	d8, [sp, #16]
 801a744:	ed8d bb06 	vstr	d11, [sp, #24]
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d0de      	beq.n	801a70a <pow+0x62>
 801a74c:	4b67      	ldr	r3, [pc, #412]	; (801a8ec <pow+0x244>)
 801a74e:	2200      	movs	r2, #0
 801a750:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a754:	9b08      	ldr	r3, [sp, #32]
 801a756:	b11b      	cbz	r3, 801a760 <pow+0xb8>
 801a758:	f000 fd98 	bl	801b28c <__errno>
 801a75c:	9b08      	ldr	r3, [sp, #32]
 801a75e:	6003      	str	r3, [r0, #0]
 801a760:	ed9d ab06 	vldr	d10, [sp, #24]
 801a764:	eeb0 0b4a 	vmov.f64	d0, d10
 801a768:	b00a      	add	sp, #40	; 0x28
 801a76a:	ecbd 8b0a 	vpop	{d8-d12}
 801a76e:	bd70      	pop	{r4, r5, r6, pc}
 801a770:	eeb0 0b48 	vmov.f64	d0, d8
 801a774:	f000 fc5a 	bl	801b02c <finite>
 801a778:	2800      	cmp	r0, #0
 801a77a:	d0f3      	beq.n	801a764 <pow+0xbc>
 801a77c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 801a780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a784:	d5ee      	bpl.n	801a764 <pow+0xbc>
 801a786:	2301      	movs	r3, #1
 801a788:	9300      	str	r3, [sp, #0]
 801a78a:	4b59      	ldr	r3, [pc, #356]	; (801a8f0 <pow+0x248>)
 801a78c:	9301      	str	r3, [sp, #4]
 801a78e:	2300      	movs	r3, #0
 801a790:	9308      	str	r3, [sp, #32]
 801a792:	f994 3000 	ldrsb.w	r3, [r4]
 801a796:	ed8d 9b02 	vstr	d9, [sp, #8]
 801a79a:	ed8d 8b04 	vstr	d8, [sp, #16]
 801a79e:	b913      	cbnz	r3, 801a7a6 <pow+0xfe>
 801a7a0:	ed8d bb06 	vstr	d11, [sp, #24]
 801a7a4:	e7b1      	b.n	801a70a <pow+0x62>
 801a7a6:	4953      	ldr	r1, [pc, #332]	; (801a8f4 <pow+0x24c>)
 801a7a8:	2000      	movs	r0, #0
 801a7aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a7ae:	2b02      	cmp	r3, #2
 801a7b0:	d1ab      	bne.n	801a70a <pow+0x62>
 801a7b2:	f000 fd6b 	bl	801b28c <__errno>
 801a7b6:	2321      	movs	r3, #33	; 0x21
 801a7b8:	6003      	str	r3, [r0, #0]
 801a7ba:	e7cb      	b.n	801a754 <pow+0xac>
 801a7bc:	f000 fc36 	bl	801b02c <finite>
 801a7c0:	4605      	mov	r5, r0
 801a7c2:	2800      	cmp	r0, #0
 801a7c4:	d164      	bne.n	801a890 <pow+0x1e8>
 801a7c6:	eeb0 0b49 	vmov.f64	d0, d9
 801a7ca:	f000 fc2f 	bl	801b02c <finite>
 801a7ce:	2800      	cmp	r0, #0
 801a7d0:	d05e      	beq.n	801a890 <pow+0x1e8>
 801a7d2:	eeb0 0b48 	vmov.f64	d0, d8
 801a7d6:	f000 fc29 	bl	801b02c <finite>
 801a7da:	2800      	cmp	r0, #0
 801a7dc:	d058      	beq.n	801a890 <pow+0x1e8>
 801a7de:	eeb4 ab4a 	vcmp.f64	d10, d10
 801a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7e6:	f994 3000 	ldrsb.w	r3, [r4]
 801a7ea:	4a41      	ldr	r2, [pc, #260]	; (801a8f0 <pow+0x248>)
 801a7ec:	d70e      	bvc.n	801a80c <pow+0x164>
 801a7ee:	2101      	movs	r1, #1
 801a7f0:	e9cd 1200 	strd	r1, r2, [sp]
 801a7f4:	9508      	str	r5, [sp, #32]
 801a7f6:	ed8d 9b02 	vstr	d9, [sp, #8]
 801a7fa:	ed8d 8b04 	vstr	d8, [sp, #16]
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d0ce      	beq.n	801a7a0 <pow+0xf8>
 801a802:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 801a806:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a80a:	e7d0      	b.n	801a7ae <pow+0x106>
 801a80c:	2103      	movs	r1, #3
 801a80e:	ed8d 8b04 	vstr	d8, [sp, #16]
 801a812:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801a816:	ee28 8b07 	vmul.f64	d8, d8, d7
 801a81a:	e9cd 1200 	strd	r1, r2, [sp]
 801a81e:	9508      	str	r5, [sp, #32]
 801a820:	ed8d 9b02 	vstr	d9, [sp, #8]
 801a824:	b9fb      	cbnz	r3, 801a866 <pow+0x1be>
 801a826:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801a82a:	4b33      	ldr	r3, [pc, #204]	; (801a8f8 <pow+0x250>)
 801a82c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801a830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a834:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a838:	d54b      	bpl.n	801a8d2 <pow+0x22a>
 801a83a:	eeb0 0b48 	vmov.f64	d0, d8
 801a83e:	f000 fc07 	bl	801b050 <rint>
 801a842:	eeb4 0b48 	vcmp.f64	d0, d8
 801a846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a84a:	d004      	beq.n	801a856 <pow+0x1ae>
 801a84c:	4b2b      	ldr	r3, [pc, #172]	; (801a8fc <pow+0x254>)
 801a84e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801a852:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a856:	f996 3000 	ldrsb.w	r3, [r6]
 801a85a:	2b02      	cmp	r3, #2
 801a85c:	d139      	bne.n	801a8d2 <pow+0x22a>
 801a85e:	f000 fd15 	bl	801b28c <__errno>
 801a862:	2322      	movs	r3, #34	; 0x22
 801a864:	e7a8      	b.n	801a7b8 <pow+0x110>
 801a866:	4b26      	ldr	r3, [pc, #152]	; (801a900 <pow+0x258>)
 801a868:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801a86c:	2200      	movs	r2, #0
 801a86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a872:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a876:	d5ee      	bpl.n	801a856 <pow+0x1ae>
 801a878:	eeb0 0b48 	vmov.f64	d0, d8
 801a87c:	f000 fbe8 	bl	801b050 <rint>
 801a880:	eeb4 0b48 	vcmp.f64	d0, d8
 801a884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a888:	d0e5      	beq.n	801a856 <pow+0x1ae>
 801a88a:	2200      	movs	r2, #0
 801a88c:	4b19      	ldr	r3, [pc, #100]	; (801a8f4 <pow+0x24c>)
 801a88e:	e7e0      	b.n	801a852 <pow+0x1aa>
 801a890:	eeb5 ab40 	vcmp.f64	d10, #0.0
 801a894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a898:	f47f af64 	bne.w	801a764 <pow+0xbc>
 801a89c:	eeb0 0b49 	vmov.f64	d0, d9
 801a8a0:	f000 fbc4 	bl	801b02c <finite>
 801a8a4:	2800      	cmp	r0, #0
 801a8a6:	f43f af5d 	beq.w	801a764 <pow+0xbc>
 801a8aa:	eeb0 0b48 	vmov.f64	d0, d8
 801a8ae:	f000 fbbd 	bl	801b02c <finite>
 801a8b2:	2800      	cmp	r0, #0
 801a8b4:	f43f af56 	beq.w	801a764 <pow+0xbc>
 801a8b8:	2304      	movs	r3, #4
 801a8ba:	9300      	str	r3, [sp, #0]
 801a8bc:	4b0c      	ldr	r3, [pc, #48]	; (801a8f0 <pow+0x248>)
 801a8be:	9301      	str	r3, [sp, #4]
 801a8c0:	2300      	movs	r3, #0
 801a8c2:	9308      	str	r3, [sp, #32]
 801a8c4:	ed8d 9b02 	vstr	d9, [sp, #8]
 801a8c8:	ed8d 8b04 	vstr	d8, [sp, #16]
 801a8cc:	ed8d cb06 	vstr	d12, [sp, #24]
 801a8d0:	e7c1      	b.n	801a856 <pow+0x1ae>
 801a8d2:	4668      	mov	r0, sp
 801a8d4:	f000 fbb2 	bl	801b03c <matherr>
 801a8d8:	2800      	cmp	r0, #0
 801a8da:	f47f af3b 	bne.w	801a754 <pow+0xac>
 801a8de:	e7be      	b.n	801a85e <pow+0x1b6>
	...
 801a8e8:	24000178 	.word	0x24000178
 801a8ec:	3ff00000 	.word	0x3ff00000
 801a8f0:	0801ee78 	.word	0x0801ee78
 801a8f4:	fff00000 	.word	0xfff00000
 801a8f8:	47efffff 	.word	0x47efffff
 801a8fc:	c7efffff 	.word	0xc7efffff
 801a900:	7ff00000 	.word	0x7ff00000
 801a904:	00000000 	.word	0x00000000

0801a908 <__ieee754_pow>:
 801a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a90c:	ec57 6b11 	vmov	r6, r7, d1
 801a910:	ed2d 8b02 	vpush	{d8}
 801a914:	eeb0 8b40 	vmov.f64	d8, d0
 801a918:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801a91c:	ea58 0306 	orrs.w	r3, r8, r6
 801a920:	b085      	sub	sp, #20
 801a922:	46b9      	mov	r9, r7
 801a924:	ee11 2a10 	vmov	r2, s2
 801a928:	f000 8306 	beq.w	801af38 <__ieee754_pow+0x630>
 801a92c:	ee18 aa90 	vmov	sl, s17
 801a930:	4bb9      	ldr	r3, [pc, #740]	; (801ac18 <__ieee754_pow+0x310>)
 801a932:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 801a936:	429c      	cmp	r4, r3
 801a938:	ee10 ba10 	vmov	fp, s0
 801a93c:	dc0b      	bgt.n	801a956 <__ieee754_pow+0x4e>
 801a93e:	d105      	bne.n	801a94c <__ieee754_pow+0x44>
 801a940:	f1bb 0f00 	cmp.w	fp, #0
 801a944:	d107      	bne.n	801a956 <__ieee754_pow+0x4e>
 801a946:	45a0      	cmp	r8, r4
 801a948:	dc0d      	bgt.n	801a966 <__ieee754_pow+0x5e>
 801a94a:	e001      	b.n	801a950 <__ieee754_pow+0x48>
 801a94c:	4598      	cmp	r8, r3
 801a94e:	dc02      	bgt.n	801a956 <__ieee754_pow+0x4e>
 801a950:	4598      	cmp	r8, r3
 801a952:	d110      	bne.n	801a976 <__ieee754_pow+0x6e>
 801a954:	b17a      	cbz	r2, 801a976 <__ieee754_pow+0x6e>
 801a956:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a95a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a95e:	ea54 030b 	orrs.w	r3, r4, fp
 801a962:	f000 82e9 	beq.w	801af38 <__ieee754_pow+0x630>
 801a966:	48ad      	ldr	r0, [pc, #692]	; (801ac1c <__ieee754_pow+0x314>)
 801a968:	b005      	add	sp, #20
 801a96a:	ecbd 8b02 	vpop	{d8}
 801a96e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a972:	f000 bb65 	b.w	801b040 <nan>
 801a976:	f1ba 0f00 	cmp.w	sl, #0
 801a97a:	da4e      	bge.n	801aa1a <__ieee754_pow+0x112>
 801a97c:	4ba8      	ldr	r3, [pc, #672]	; (801ac20 <__ieee754_pow+0x318>)
 801a97e:	4598      	cmp	r8, r3
 801a980:	dc49      	bgt.n	801aa16 <__ieee754_pow+0x10e>
 801a982:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801a986:	4598      	cmp	r8, r3
 801a988:	dd47      	ble.n	801aa1a <__ieee754_pow+0x112>
 801a98a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a98e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a992:	2b14      	cmp	r3, #20
 801a994:	dd24      	ble.n	801a9e0 <__ieee754_pow+0xd8>
 801a996:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801a99a:	fa22 f503 	lsr.w	r5, r2, r3
 801a99e:	fa05 f303 	lsl.w	r3, r5, r3
 801a9a2:	4293      	cmp	r3, r2
 801a9a4:	d139      	bne.n	801aa1a <__ieee754_pow+0x112>
 801a9a6:	f005 0501 	and.w	r5, r5, #1
 801a9aa:	f1c5 0502 	rsb	r5, r5, #2
 801a9ae:	2a00      	cmp	r2, #0
 801a9b0:	d15a      	bne.n	801aa68 <__ieee754_pow+0x160>
 801a9b2:	4b99      	ldr	r3, [pc, #612]	; (801ac18 <__ieee754_pow+0x310>)
 801a9b4:	4598      	cmp	r8, r3
 801a9b6:	d122      	bne.n	801a9fe <__ieee754_pow+0xf6>
 801a9b8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a9bc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a9c0:	ea53 030b 	orrs.w	r3, r3, fp
 801a9c4:	f000 82b8 	beq.w	801af38 <__ieee754_pow+0x630>
 801a9c8:	4b96      	ldr	r3, [pc, #600]	; (801ac24 <__ieee754_pow+0x31c>)
 801a9ca:	429c      	cmp	r4, r3
 801a9cc:	dd27      	ble.n	801aa1e <__ieee754_pow+0x116>
 801a9ce:	f1b9 0f00 	cmp.w	r9, #0
 801a9d2:	f280 82b4 	bge.w	801af3e <__ieee754_pow+0x636>
 801a9d6:	ed9f 7b84 	vldr	d7, [pc, #528]	; 801abe8 <__ieee754_pow+0x2e0>
 801a9da:	ed8d 7b00 	vstr	d7, [sp]
 801a9de:	e026      	b.n	801aa2e <__ieee754_pow+0x126>
 801a9e0:	2a00      	cmp	r2, #0
 801a9e2:	d140      	bne.n	801aa66 <__ieee754_pow+0x15e>
 801a9e4:	f1c3 0314 	rsb	r3, r3, #20
 801a9e8:	fa48 f503 	asr.w	r5, r8, r3
 801a9ec:	fa05 f303 	lsl.w	r3, r5, r3
 801a9f0:	4543      	cmp	r3, r8
 801a9f2:	f040 82aa 	bne.w	801af4a <__ieee754_pow+0x642>
 801a9f6:	f005 0501 	and.w	r5, r5, #1
 801a9fa:	f1c5 0502 	rsb	r5, r5, #2
 801a9fe:	4b8a      	ldr	r3, [pc, #552]	; (801ac28 <__ieee754_pow+0x320>)
 801aa00:	4598      	cmp	r8, r3
 801aa02:	d11b      	bne.n	801aa3c <__ieee754_pow+0x134>
 801aa04:	f1b9 0f00 	cmp.w	r9, #0
 801aa08:	f280 829c 	bge.w	801af44 <__ieee754_pow+0x63c>
 801aa0c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801aa10:	ee87 7b08 	vdiv.f64	d7, d7, d8
 801aa14:	e7e1      	b.n	801a9da <__ieee754_pow+0xd2>
 801aa16:	2502      	movs	r5, #2
 801aa18:	e7c9      	b.n	801a9ae <__ieee754_pow+0xa6>
 801aa1a:	2500      	movs	r5, #0
 801aa1c:	e7c7      	b.n	801a9ae <__ieee754_pow+0xa6>
 801aa1e:	f1b9 0f00 	cmp.w	r9, #0
 801aa22:	dad8      	bge.n	801a9d6 <__ieee754_pow+0xce>
 801aa24:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 801aa28:	4633      	mov	r3, r6
 801aa2a:	e9cd 3400 	strd	r3, r4, [sp]
 801aa2e:	ed9d 0b00 	vldr	d0, [sp]
 801aa32:	b005      	add	sp, #20
 801aa34:	ecbd 8b02 	vpop	{d8}
 801aa38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa3c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801aa40:	d102      	bne.n	801aa48 <__ieee754_pow+0x140>
 801aa42:	ee28 7b08 	vmul.f64	d7, d8, d8
 801aa46:	e7c8      	b.n	801a9da <__ieee754_pow+0xd2>
 801aa48:	4b78      	ldr	r3, [pc, #480]	; (801ac2c <__ieee754_pow+0x324>)
 801aa4a:	4599      	cmp	r9, r3
 801aa4c:	d10c      	bne.n	801aa68 <__ieee754_pow+0x160>
 801aa4e:	f1ba 0f00 	cmp.w	sl, #0
 801aa52:	db09      	blt.n	801aa68 <__ieee754_pow+0x160>
 801aa54:	eeb0 0b48 	vmov.f64	d0, d8
 801aa58:	b005      	add	sp, #20
 801aa5a:	ecbd 8b02 	vpop	{d8}
 801aa5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa62:	f000 bad7 	b.w	801b014 <__ieee754_sqrt>
 801aa66:	2500      	movs	r5, #0
 801aa68:	eeb0 0b48 	vmov.f64	d0, d8
 801aa6c:	f000 fad5 	bl	801b01a <fabs>
 801aa70:	ed8d 0b00 	vstr	d0, [sp]
 801aa74:	f1bb 0f00 	cmp.w	fp, #0
 801aa78:	d128      	bne.n	801aacc <__ieee754_pow+0x1c4>
 801aa7a:	b124      	cbz	r4, 801aa86 <__ieee754_pow+0x17e>
 801aa7c:	4b6a      	ldr	r3, [pc, #424]	; (801ac28 <__ieee754_pow+0x320>)
 801aa7e:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 801aa82:	429a      	cmp	r2, r3
 801aa84:	d122      	bne.n	801aacc <__ieee754_pow+0x1c4>
 801aa86:	f1b9 0f00 	cmp.w	r9, #0
 801aa8a:	da07      	bge.n	801aa9c <__ieee754_pow+0x194>
 801aa8c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801aa90:	ed9d 6b00 	vldr	d6, [sp]
 801aa94:	ee87 7b06 	vdiv.f64	d7, d7, d6
 801aa98:	ed8d 7b00 	vstr	d7, [sp]
 801aa9c:	f1ba 0f00 	cmp.w	sl, #0
 801aaa0:	dac5      	bge.n	801aa2e <__ieee754_pow+0x126>
 801aaa2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801aaa6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801aaaa:	ea54 0305 	orrs.w	r3, r4, r5
 801aaae:	d106      	bne.n	801aabe <__ieee754_pow+0x1b6>
 801aab0:	ed9d 7b00 	vldr	d7, [sp]
 801aab4:	ee37 7b47 	vsub.f64	d7, d7, d7
 801aab8:	ee87 7b07 	vdiv.f64	d7, d7, d7
 801aabc:	e78d      	b.n	801a9da <__ieee754_pow+0xd2>
 801aabe:	2d01      	cmp	r5, #1
 801aac0:	d1b5      	bne.n	801aa2e <__ieee754_pow+0x126>
 801aac2:	ed9d 7b00 	vldr	d7, [sp]
 801aac6:	eeb1 7b47 	vneg.f64	d7, d7
 801aaca:	e786      	b.n	801a9da <__ieee754_pow+0xd2>
 801aacc:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801aad0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aad4:	ea55 030a 	orrs.w	r3, r5, sl
 801aad8:	d104      	bne.n	801aae4 <__ieee754_pow+0x1dc>
 801aada:	ee38 8b48 	vsub.f64	d8, d8, d8
 801aade:	ee88 7b08 	vdiv.f64	d7, d8, d8
 801aae2:	e77a      	b.n	801a9da <__ieee754_pow+0xd2>
 801aae4:	4b52      	ldr	r3, [pc, #328]	; (801ac30 <__ieee754_pow+0x328>)
 801aae6:	4598      	cmp	r8, r3
 801aae8:	f340 80a8 	ble.w	801ac3c <__ieee754_pow+0x334>
 801aaec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801aaf0:	4598      	cmp	r8, r3
 801aaf2:	dd0b      	ble.n	801ab0c <__ieee754_pow+0x204>
 801aaf4:	4b4b      	ldr	r3, [pc, #300]	; (801ac24 <__ieee754_pow+0x31c>)
 801aaf6:	429c      	cmp	r4, r3
 801aaf8:	dc0e      	bgt.n	801ab18 <__ieee754_pow+0x210>
 801aafa:	f1b9 0f00 	cmp.w	r9, #0
 801aafe:	f6bf af6a 	bge.w	801a9d6 <__ieee754_pow+0xce>
 801ab02:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 801abf0 <__ieee754_pow+0x2e8>
 801ab06:	ee27 7b07 	vmul.f64	d7, d7, d7
 801ab0a:	e766      	b.n	801a9da <__ieee754_pow+0xd2>
 801ab0c:	4b49      	ldr	r3, [pc, #292]	; (801ac34 <__ieee754_pow+0x32c>)
 801ab0e:	429c      	cmp	r4, r3
 801ab10:	ddf3      	ble.n	801aafa <__ieee754_pow+0x1f2>
 801ab12:	4b45      	ldr	r3, [pc, #276]	; (801ac28 <__ieee754_pow+0x320>)
 801ab14:	429c      	cmp	r4, r3
 801ab16:	dd03      	ble.n	801ab20 <__ieee754_pow+0x218>
 801ab18:	f1b9 0f00 	cmp.w	r9, #0
 801ab1c:	dcf1      	bgt.n	801ab02 <__ieee754_pow+0x1fa>
 801ab1e:	e75a      	b.n	801a9d6 <__ieee754_pow+0xce>
 801ab20:	ed9d 7b00 	vldr	d7, [sp]
 801ab24:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ab28:	ed9f 5b33 	vldr	d5, [pc, #204]	; 801abf8 <__ieee754_pow+0x2f0>
 801ab2c:	ee37 6b46 	vsub.f64	d6, d7, d6
 801ab30:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 801ab34:	eeb1 3b46 	vneg.f64	d3, d6
 801ab38:	eea3 5b07 	vfma.f64	d5, d3, d7
 801ab3c:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801ab40:	eea5 7b46 	vfms.f64	d7, d5, d6
 801ab44:	ee26 5b06 	vmul.f64	d5, d6, d6
 801ab48:	ee27 5b05 	vmul.f64	d5, d7, d5
 801ab4c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801ac00 <__ieee754_pow+0x2f8>
 801ab50:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801ab54:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801ac08 <__ieee754_pow+0x300>
 801ab58:	eea6 7b05 	vfma.f64	d7, d6, d5
 801ab5c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801ac10 <__ieee754_pow+0x308>
 801ab60:	eeb0 4b47 	vmov.f64	d4, d7
 801ab64:	eea6 4b05 	vfma.f64	d4, d6, d5
 801ab68:	ec53 2b14 	vmov	r2, r3, d4
 801ab6c:	2200      	movs	r2, #0
 801ab6e:	ec43 2b14 	vmov	d4, r2, r3
 801ab72:	eeb0 6b44 	vmov.f64	d6, d4
 801ab76:	eea3 6b05 	vfma.f64	d6, d3, d5
 801ab7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ab7e:	3d01      	subs	r5, #1
 801ab80:	ea55 030a 	orrs.w	r3, r5, sl
 801ab84:	f04f 0200 	mov.w	r2, #0
 801ab88:	463b      	mov	r3, r7
 801ab8a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801ab8e:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801ab92:	ec47 6b15 	vmov	d5, r6, r7
 801ab96:	fe06 8b08 	vseleq.f64	d8, d6, d8
 801ab9a:	ec47 6b13 	vmov	d3, r6, r7
 801ab9e:	ec43 2b16 	vmov	d6, r2, r3
 801aba2:	ee27 7b03 	vmul.f64	d7, d7, d3
 801aba6:	ee35 5b46 	vsub.f64	d5, d5, d6
 801abaa:	4b23      	ldr	r3, [pc, #140]	; (801ac38 <__ieee754_pow+0x330>)
 801abac:	eea5 7b04 	vfma.f64	d7, d5, d4
 801abb0:	ee24 6b06 	vmul.f64	d6, d4, d6
 801abb4:	ee37 5b06 	vadd.f64	d5, d7, d6
 801abb8:	ee15 1a90 	vmov	r1, s11
 801abbc:	4299      	cmp	r1, r3
 801abbe:	ee15 2a10 	vmov	r2, s10
 801abc2:	f340 819b 	ble.w	801aefc <__ieee754_pow+0x5f4>
 801abc6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801abca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801abce:	4313      	orrs	r3, r2
 801abd0:	f000 810a 	beq.w	801ade8 <__ieee754_pow+0x4e0>
 801abd4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 801abf0 <__ieee754_pow+0x2e8>
 801abd8:	ee28 8b07 	vmul.f64	d8, d8, d7
 801abdc:	ee28 7b07 	vmul.f64	d7, d8, d7
 801abe0:	e6fb      	b.n	801a9da <__ieee754_pow+0xd2>
 801abe2:	bf00      	nop
 801abe4:	f3af 8000 	nop.w
	...
 801abf0:	8800759c 	.word	0x8800759c
 801abf4:	7e37e43c 	.word	0x7e37e43c
 801abf8:	55555555 	.word	0x55555555
 801abfc:	3fd55555 	.word	0x3fd55555
 801ac00:	652b82fe 	.word	0x652b82fe
 801ac04:	3ff71547 	.word	0x3ff71547
 801ac08:	f85ddf44 	.word	0xf85ddf44
 801ac0c:	3e54ae0b 	.word	0x3e54ae0b
 801ac10:	60000000 	.word	0x60000000
 801ac14:	3ff71547 	.word	0x3ff71547
 801ac18:	7ff00000 	.word	0x7ff00000
 801ac1c:	0801f079 	.word	0x0801f079
 801ac20:	433fffff 	.word	0x433fffff
 801ac24:	3fefffff 	.word	0x3fefffff
 801ac28:	3ff00000 	.word	0x3ff00000
 801ac2c:	3fe00000 	.word	0x3fe00000
 801ac30:	41e00000 	.word	0x41e00000
 801ac34:	3feffffe 	.word	0x3feffffe
 801ac38:	408fffff 	.word	0x408fffff
 801ac3c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801ac40:	f280 80ce 	bge.w	801ade0 <__ieee754_pow+0x4d8>
 801ac44:	ed9d 6b00 	vldr	d6, [sp]
 801ac48:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 801af50 <__ieee754_pow+0x648>
 801ac4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ac50:	ed8d 7b00 	vstr	d7, [sp]
 801ac54:	9c01      	ldr	r4, [sp, #4]
 801ac56:	f06f 0334 	mvn.w	r3, #52	; 0x34
 801ac5a:	1521      	asrs	r1, r4, #20
 801ac5c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801ac60:	4419      	add	r1, r3
 801ac62:	4be3      	ldr	r3, [pc, #908]	; (801aff0 <__ieee754_pow+0x6e8>)
 801ac64:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ac68:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 801ac6c:	429c      	cmp	r4, r3
 801ac6e:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 801ac72:	dd06      	ble.n	801ac82 <__ieee754_pow+0x37a>
 801ac74:	4bdf      	ldr	r3, [pc, #892]	; (801aff4 <__ieee754_pow+0x6ec>)
 801ac76:	429c      	cmp	r4, r3
 801ac78:	f340 80b4 	ble.w	801ade4 <__ieee754_pow+0x4dc>
 801ac7c:	3101      	adds	r1, #1
 801ac7e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801ac82:	2400      	movs	r4, #0
 801ac84:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ac88:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801ac8c:	4603      	mov	r3, r0
 801ac8e:	ec43 2b17 	vmov	d7, r2, r3
 801ac92:	4bd9      	ldr	r3, [pc, #868]	; (801aff8 <__ieee754_pow+0x6f0>)
 801ac94:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 801ac98:	4463      	add	r3, ip
 801ac9a:	ed93 5b00 	vldr	d5, [r3]
 801ac9e:	1040      	asrs	r0, r0, #1
 801aca0:	ee37 2b45 	vsub.f64	d2, d7, d5
 801aca4:	ee35 6b07 	vadd.f64	d6, d5, d7
 801aca8:	ee84 1b06 	vdiv.f64	d1, d4, d6
 801acac:	ee22 6b01 	vmul.f64	d6, d2, d1
 801acb0:	ed8d 6b00 	vstr	d6, [sp]
 801acb4:	e9dd 8900 	ldrd	r8, r9, [sp]
 801acb8:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 801acbc:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 801acc0:	f04f 0800 	mov.w	r8, #0
 801acc4:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 801acc8:	2200      	movs	r2, #0
 801acca:	ec49 8b14 	vmov	d4, r8, r9
 801acce:	ec43 2b16 	vmov	d6, r2, r3
 801acd2:	eeb1 3b44 	vneg.f64	d3, d4
 801acd6:	eea3 2b06 	vfma.f64	d2, d3, d6
 801acda:	ee36 6b45 	vsub.f64	d6, d6, d5
 801acde:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ace2:	eea3 2b07 	vfma.f64	d2, d3, d7
 801ace6:	ed9d 7b00 	vldr	d7, [sp]
 801acea:	ee22 2b01 	vmul.f64	d2, d2, d1
 801acee:	ee27 5b07 	vmul.f64	d5, d7, d7
 801acf2:	ee37 6b04 	vadd.f64	d6, d7, d4
 801acf6:	ed9f 1b98 	vldr	d1, [pc, #608]	; 801af58 <__ieee754_pow+0x650>
 801acfa:	ee25 0b05 	vmul.f64	d0, d5, d5
 801acfe:	ee26 6b02 	vmul.f64	d6, d6, d2
 801ad02:	ed9f 7b97 	vldr	d7, [pc, #604]	; 801af60 <__ieee754_pow+0x658>
 801ad06:	eea5 7b01 	vfma.f64	d7, d5, d1
 801ad0a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 801af68 <__ieee754_pow+0x660>
 801ad0e:	eea7 1b05 	vfma.f64	d1, d7, d5
 801ad12:	ed9f 7b97 	vldr	d7, [pc, #604]	; 801af70 <__ieee754_pow+0x668>
 801ad16:	eea1 7b05 	vfma.f64	d7, d1, d5
 801ad1a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 801af78 <__ieee754_pow+0x670>
 801ad1e:	eea7 1b05 	vfma.f64	d1, d7, d5
 801ad22:	ed9f 7b97 	vldr	d7, [pc, #604]	; 801af80 <__ieee754_pow+0x678>
 801ad26:	eea1 7b05 	vfma.f64	d7, d1, d5
 801ad2a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801ad2e:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 801ad32:	eeb0 5b47 	vmov.f64	d5, d7
 801ad36:	eea4 5b04 	vfma.f64	d5, d4, d4
 801ad3a:	ee35 5b06 	vadd.f64	d5, d5, d6
 801ad3e:	ed8d 5b02 	vstr	d5, [sp, #8]
 801ad42:	f8cd 8008 	str.w	r8, [sp, #8]
 801ad46:	ed9d 5b02 	vldr	d5, [sp, #8]
 801ad4a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ad4e:	eea3 7b04 	vfma.f64	d7, d3, d4
 801ad52:	ee36 7b47 	vsub.f64	d7, d6, d7
 801ad56:	ed9d 6b00 	vldr	d6, [sp]
 801ad5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ad5e:	eea2 7b05 	vfma.f64	d7, d2, d5
 801ad62:	eeb0 6b47 	vmov.f64	d6, d7
 801ad66:	eea4 6b05 	vfma.f64	d6, d4, d5
 801ad6a:	ed8d 6b00 	vstr	d6, [sp]
 801ad6e:	f8cd 8000 	str.w	r8, [sp]
 801ad72:	ed9d 2b00 	vldr	d2, [sp]
 801ad76:	eeb0 6b42 	vmov.f64	d6, d2
 801ad7a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801ad7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ad82:	ed9f 6b81 	vldr	d6, [pc, #516]	; 801af88 <__ieee754_pow+0x680>
 801ad86:	4b9d      	ldr	r3, [pc, #628]	; (801affc <__ieee754_pow+0x6f4>)
 801ad88:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ad8c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 801af90 <__ieee754_pow+0x688>
 801ad90:	4463      	add	r3, ip
 801ad92:	eea2 7b06 	vfma.f64	d7, d2, d6
 801ad96:	ed93 6b00 	vldr	d6, [r3]
 801ad9a:	4b99      	ldr	r3, [pc, #612]	; (801b000 <__ieee754_pow+0x6f8>)
 801ad9c:	ee37 6b06 	vadd.f64	d6, d7, d6
 801ada0:	449c      	add	ip, r3
 801ada2:	ed9c 1b00 	vldr	d1, [ip]
 801ada6:	eeb0 4b46 	vmov.f64	d4, d6
 801adaa:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 801af98 <__ieee754_pow+0x690>
 801adae:	ee07 1a90 	vmov	s15, r1
 801adb2:	eea2 4b03 	vfma.f64	d4, d2, d3
 801adb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801adba:	ee34 4b01 	vadd.f64	d4, d4, d1
 801adbe:	ee34 5b07 	vadd.f64	d5, d4, d7
 801adc2:	ed8d 5b00 	vstr	d5, [sp]
 801adc6:	f8cd 8000 	str.w	r8, [sp]
 801adca:	ed9d 4b00 	vldr	d4, [sp]
 801adce:	ee34 7b47 	vsub.f64	d7, d4, d7
 801add2:	ee37 7b41 	vsub.f64	d7, d7, d1
 801add6:	eea2 7b43 	vfms.f64	d7, d2, d3
 801adda:	ee36 7b47 	vsub.f64	d7, d6, d7
 801adde:	e6ce      	b.n	801ab7e <__ieee754_pow+0x276>
 801ade0:	2300      	movs	r3, #0
 801ade2:	e73a      	b.n	801ac5a <__ieee754_pow+0x352>
 801ade4:	2401      	movs	r4, #1
 801ade6:	e74d      	b.n	801ac84 <__ieee754_pow+0x37c>
 801ade8:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 801afa0 <__ieee754_pow+0x698>
 801adec:	ee35 5b46 	vsub.f64	d5, d5, d6
 801adf0:	ee37 4b04 	vadd.f64	d4, d7, d4
 801adf4:	eeb4 4bc5 	vcmpe.f64	d4, d5
 801adf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adfc:	f73f aeea 	bgt.w	801abd4 <__ieee754_pow+0x2cc>
 801ae00:	4a80      	ldr	r2, [pc, #512]	; (801b004 <__ieee754_pow+0x6fc>)
 801ae02:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ae06:	4293      	cmp	r3, r2
 801ae08:	f340 808e 	ble.w	801af28 <__ieee754_pow+0x620>
 801ae0c:	151b      	asrs	r3, r3, #20
 801ae0e:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 801ae12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801ae16:	4103      	asrs	r3, r0
 801ae18:	440b      	add	r3, r1
 801ae1a:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801ae1e:	487a      	ldr	r0, [pc, #488]	; (801b008 <__ieee754_pow+0x700>)
 801ae20:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801ae24:	4110      	asrs	r0, r2
 801ae26:	ea23 0500 	bic.w	r5, r3, r0
 801ae2a:	f3c3 0013 	ubfx	r0, r3, #0, #20
 801ae2e:	2400      	movs	r4, #0
 801ae30:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 801ae34:	f1c2 0214 	rsb	r2, r2, #20
 801ae38:	ec45 4b15 	vmov	d5, r4, r5
 801ae3c:	4110      	asrs	r0, r2
 801ae3e:	2900      	cmp	r1, #0
 801ae40:	bfb8      	it	lt
 801ae42:	4240      	neglt	r0, r0
 801ae44:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ae48:	ee36 5b07 	vadd.f64	d5, d6, d7
 801ae4c:	ec53 2b15 	vmov	r2, r3, d5
 801ae50:	2200      	movs	r2, #0
 801ae52:	ec43 2b15 	vmov	d5, r2, r3
 801ae56:	ed9f 4b54 	vldr	d4, [pc, #336]	; 801afa8 <__ieee754_pow+0x6a0>
 801ae5a:	ee35 6b46 	vsub.f64	d6, d5, d6
 801ae5e:	ee37 6b46 	vsub.f64	d6, d7, d6
 801ae62:	ed9f 7b53 	vldr	d7, [pc, #332]	; 801afb0 <__ieee754_pow+0x6a8>
 801ae66:	ee25 7b07 	vmul.f64	d7, d5, d7
 801ae6a:	eea6 7b04 	vfma.f64	d7, d6, d4
 801ae6e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 801afb8 <__ieee754_pow+0x6b0>
 801ae72:	eeb0 4b47 	vmov.f64	d4, d7
 801ae76:	eea5 4b06 	vfma.f64	d4, d5, d6
 801ae7a:	eeb0 3b44 	vmov.f64	d3, d4
 801ae7e:	eea5 3b46 	vfms.f64	d3, d5, d6
 801ae82:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 801afc0 <__ieee754_pow+0x6b8>
 801ae86:	ee37 7b43 	vsub.f64	d7, d7, d3
 801ae8a:	ee24 6b04 	vmul.f64	d6, d4, d4
 801ae8e:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 801afc8 <__ieee754_pow+0x6c0>
 801ae92:	eea4 7b07 	vfma.f64	d7, d4, d7
 801ae96:	eea6 3b05 	vfma.f64	d3, d6, d5
 801ae9a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 801afd0 <__ieee754_pow+0x6c8>
 801ae9e:	eea3 5b06 	vfma.f64	d5, d3, d6
 801aea2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801afd8 <__ieee754_pow+0x6d0>
 801aea6:	eea5 3b06 	vfma.f64	d3, d5, d6
 801aeaa:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 801afe0 <__ieee754_pow+0x6d8>
 801aeae:	eea3 5b06 	vfma.f64	d5, d3, d6
 801aeb2:	eeb0 3b44 	vmov.f64	d3, d4
 801aeb6:	eea5 3b46 	vfms.f64	d3, d5, d6
 801aeba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801aebe:	eeb0 6b43 	vmov.f64	d6, d3
 801aec2:	ee24 3b03 	vmul.f64	d3, d4, d3
 801aec6:	ee36 5b45 	vsub.f64	d5, d6, d5
 801aeca:	ee83 6b05 	vdiv.f64	d6, d3, d5
 801aece:	ee36 7b47 	vsub.f64	d7, d6, d7
 801aed2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801aed6:	ee37 7b44 	vsub.f64	d7, d7, d4
 801aeda:	ee36 7b47 	vsub.f64	d7, d6, d7
 801aede:	ed8d 7b00 	vstr	d7, [sp]
 801aee2:	9901      	ldr	r1, [sp, #4]
 801aee4:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 801aee8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801aeec:	da1e      	bge.n	801af2c <__ieee754_pow+0x624>
 801aeee:	eeb0 0b47 	vmov.f64	d0, d7
 801aef2:	f000 f939 	bl	801b168 <scalbn>
 801aef6:	ee20 7b08 	vmul.f64	d7, d0, d8
 801aefa:	e56e      	b.n	801a9da <__ieee754_pow+0xd2>
 801aefc:	4b43      	ldr	r3, [pc, #268]	; (801b00c <__ieee754_pow+0x704>)
 801aefe:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 801af02:	4298      	cmp	r0, r3
 801af04:	f77f af7c 	ble.w	801ae00 <__ieee754_pow+0x4f8>
 801af08:	4b41      	ldr	r3, [pc, #260]	; (801b010 <__ieee754_pow+0x708>)
 801af0a:	440b      	add	r3, r1
 801af0c:	4313      	orrs	r3, r2
 801af0e:	d002      	beq.n	801af16 <__ieee754_pow+0x60e>
 801af10:	ed9f 7b35 	vldr	d7, [pc, #212]	; 801afe8 <__ieee754_pow+0x6e0>
 801af14:	e660      	b.n	801abd8 <__ieee754_pow+0x2d0>
 801af16:	ee35 5b46 	vsub.f64	d5, d5, d6
 801af1a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801af1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af22:	f6ff af6d 	blt.w	801ae00 <__ieee754_pow+0x4f8>
 801af26:	e7f3      	b.n	801af10 <__ieee754_pow+0x608>
 801af28:	2000      	movs	r0, #0
 801af2a:	e78d      	b.n	801ae48 <__ieee754_pow+0x540>
 801af2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af30:	460b      	mov	r3, r1
 801af32:	ec43 2b10 	vmov	d0, r2, r3
 801af36:	e7de      	b.n	801aef6 <__ieee754_pow+0x5ee>
 801af38:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801af3c:	e54d      	b.n	801a9da <__ieee754_pow+0xd2>
 801af3e:	e9cd 6700 	strd	r6, r7, [sp]
 801af42:	e574      	b.n	801aa2e <__ieee754_pow+0x126>
 801af44:	ed8d 8b00 	vstr	d8, [sp]
 801af48:	e571      	b.n	801aa2e <__ieee754_pow+0x126>
 801af4a:	4615      	mov	r5, r2
 801af4c:	e557      	b.n	801a9fe <__ieee754_pow+0xf6>
 801af4e:	bf00      	nop
 801af50:	00000000 	.word	0x00000000
 801af54:	43400000 	.word	0x43400000
 801af58:	4a454eef 	.word	0x4a454eef
 801af5c:	3fca7e28 	.word	0x3fca7e28
 801af60:	93c9db65 	.word	0x93c9db65
 801af64:	3fcd864a 	.word	0x3fcd864a
 801af68:	a91d4101 	.word	0xa91d4101
 801af6c:	3fd17460 	.word	0x3fd17460
 801af70:	518f264d 	.word	0x518f264d
 801af74:	3fd55555 	.word	0x3fd55555
 801af78:	db6fabff 	.word	0xdb6fabff
 801af7c:	3fdb6db6 	.word	0x3fdb6db6
 801af80:	33333303 	.word	0x33333303
 801af84:	3fe33333 	.word	0x3fe33333
 801af88:	dc3a03fd 	.word	0xdc3a03fd
 801af8c:	3feec709 	.word	0x3feec709
 801af90:	145b01f5 	.word	0x145b01f5
 801af94:	be3e2fe0 	.word	0xbe3e2fe0
 801af98:	e0000000 	.word	0xe0000000
 801af9c:	3feec709 	.word	0x3feec709
 801afa0:	652b82fe 	.word	0x652b82fe
 801afa4:	3c971547 	.word	0x3c971547
 801afa8:	fefa39ef 	.word	0xfefa39ef
 801afac:	3fe62e42 	.word	0x3fe62e42
 801afb0:	0ca86c39 	.word	0x0ca86c39
 801afb4:	be205c61 	.word	0xbe205c61
 801afb8:	00000000 	.word	0x00000000
 801afbc:	3fe62e43 	.word	0x3fe62e43
 801afc0:	72bea4d0 	.word	0x72bea4d0
 801afc4:	3e663769 	.word	0x3e663769
 801afc8:	c5d26bf1 	.word	0xc5d26bf1
 801afcc:	bebbbd41 	.word	0xbebbbd41
 801afd0:	af25de2c 	.word	0xaf25de2c
 801afd4:	3f11566a 	.word	0x3f11566a
 801afd8:	16bebd93 	.word	0x16bebd93
 801afdc:	bf66c16c 	.word	0xbf66c16c
 801afe0:	5555553e 	.word	0x5555553e
 801afe4:	3fc55555 	.word	0x3fc55555
 801afe8:	c2f8f359 	.word	0xc2f8f359
 801afec:	01a56e1f 	.word	0x01a56e1f
 801aff0:	0003988e 	.word	0x0003988e
 801aff4:	000bb679 	.word	0x000bb679
 801aff8:	0801ee80 	.word	0x0801ee80
 801affc:	0801eea0 	.word	0x0801eea0
 801b000:	0801ee90 	.word	0x0801ee90
 801b004:	3fe00000 	.word	0x3fe00000
 801b008:	000fffff 	.word	0x000fffff
 801b00c:	4090cbff 	.word	0x4090cbff
 801b010:	3f6f3400 	.word	0x3f6f3400

0801b014 <__ieee754_sqrt>:
 801b014:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801b018:	4770      	bx	lr

0801b01a <fabs>:
 801b01a:	ec51 0b10 	vmov	r0, r1, d0
 801b01e:	ee10 2a10 	vmov	r2, s0
 801b022:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b026:	ec43 2b10 	vmov	d0, r2, r3
 801b02a:	4770      	bx	lr

0801b02c <finite>:
 801b02c:	ee10 3a90 	vmov	r3, s1
 801b030:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801b034:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801b038:	0fc0      	lsrs	r0, r0, #31
 801b03a:	4770      	bx	lr

0801b03c <matherr>:
 801b03c:	2000      	movs	r0, #0
 801b03e:	4770      	bx	lr

0801b040 <nan>:
 801b040:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b048 <nan+0x8>
 801b044:	4770      	bx	lr
 801b046:	bf00      	nop
 801b048:	00000000 	.word	0x00000000
 801b04c:	7ff80000 	.word	0x7ff80000

0801b050 <rint>:
 801b050:	b530      	push	{r4, r5, lr}
 801b052:	b085      	sub	sp, #20
 801b054:	ed8d 0b00 	vstr	d0, [sp]
 801b058:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b05c:	f3c3 510a 	ubfx	r1, r3, #20, #11
 801b060:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 801b064:	2813      	cmp	r0, #19
 801b066:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 801b06a:	dc5a      	bgt.n	801b122 <rint+0xd2>
 801b06c:	2800      	cmp	r0, #0
 801b06e:	da2f      	bge.n	801b0d0 <rint+0x80>
 801b070:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b074:	4311      	orrs	r1, r2
 801b076:	d027      	beq.n	801b0c8 <rint+0x78>
 801b078:	f3c3 0513 	ubfx	r5, r3, #0, #20
 801b07c:	4315      	orrs	r5, r2
 801b07e:	426a      	negs	r2, r5
 801b080:	432a      	orrs	r2, r5
 801b082:	0b12      	lsrs	r2, r2, #12
 801b084:	0c5b      	lsrs	r3, r3, #17
 801b086:	045b      	lsls	r3, r3, #17
 801b088:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 801b08c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b090:	ea42 0103 	orr.w	r1, r2, r3
 801b094:	4b31      	ldr	r3, [pc, #196]	; (801b15c <rint+0x10c>)
 801b096:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b09a:	ed93 6b00 	vldr	d6, [r3]
 801b09e:	ec41 0b17 	vmov	d7, r0, r1
 801b0a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 801b0a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b0aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b0ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b0b2:	ed8d 7b00 	vstr	d7, [sp]
 801b0b6:	9b01      	ldr	r3, [sp, #4]
 801b0b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b0bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b0c0:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 801b0c4:	e9cd 0100 	strd	r0, r1, [sp]
 801b0c8:	ed9d 0b00 	vldr	d0, [sp]
 801b0cc:	b005      	add	sp, #20
 801b0ce:	bd30      	pop	{r4, r5, pc}
 801b0d0:	4923      	ldr	r1, [pc, #140]	; (801b160 <rint+0x110>)
 801b0d2:	4101      	asrs	r1, r0
 801b0d4:	ea03 0501 	and.w	r5, r3, r1
 801b0d8:	4315      	orrs	r5, r2
 801b0da:	d0f5      	beq.n	801b0c8 <rint+0x78>
 801b0dc:	0849      	lsrs	r1, r1, #1
 801b0de:	ea03 0501 	and.w	r5, r3, r1
 801b0e2:	432a      	orrs	r2, r5
 801b0e4:	d00b      	beq.n	801b0fe <rint+0xae>
 801b0e6:	ea23 0101 	bic.w	r1, r3, r1
 801b0ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b0ee:	2813      	cmp	r0, #19
 801b0f0:	fa43 f300 	asr.w	r3, r3, r0
 801b0f4:	bf0c      	ite	eq
 801b0f6:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 801b0fa:	2200      	movne	r2, #0
 801b0fc:	430b      	orrs	r3, r1
 801b0fe:	4619      	mov	r1, r3
 801b100:	4b16      	ldr	r3, [pc, #88]	; (801b15c <rint+0x10c>)
 801b102:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801b106:	ed94 6b00 	vldr	d6, [r4]
 801b10a:	4610      	mov	r0, r2
 801b10c:	ec41 0b17 	vmov	d7, r0, r1
 801b110:	ee36 7b07 	vadd.f64	d7, d6, d7
 801b114:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b118:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b11c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b120:	e008      	b.n	801b134 <rint+0xe4>
 801b122:	2833      	cmp	r0, #51	; 0x33
 801b124:	dd09      	ble.n	801b13a <rint+0xea>
 801b126:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801b12a:	d1cd      	bne.n	801b0c8 <rint+0x78>
 801b12c:	ed9d 7b00 	vldr	d7, [sp]
 801b130:	ee37 7b07 	vadd.f64	d7, d7, d7
 801b134:	ed8d 7b00 	vstr	d7, [sp]
 801b138:	e7c6      	b.n	801b0c8 <rint+0x78>
 801b13a:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 801b13e:	f04f 31ff 	mov.w	r1, #4294967295
 801b142:	40c1      	lsrs	r1, r0
 801b144:	420a      	tst	r2, r1
 801b146:	d0bf      	beq.n	801b0c8 <rint+0x78>
 801b148:	0849      	lsrs	r1, r1, #1
 801b14a:	420a      	tst	r2, r1
 801b14c:	bf1f      	itttt	ne
 801b14e:	ea22 0101 	bicne.w	r1, r2, r1
 801b152:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 801b156:	4102      	asrne	r2, r0
 801b158:	430a      	orrne	r2, r1
 801b15a:	e7d0      	b.n	801b0fe <rint+0xae>
 801b15c:	0801eeb0 	.word	0x0801eeb0
 801b160:	000fffff 	.word	0x000fffff
 801b164:	00000000 	.word	0x00000000

0801b168 <scalbn>:
 801b168:	b500      	push	{lr}
 801b16a:	ed2d 8b02 	vpush	{d8}
 801b16e:	b083      	sub	sp, #12
 801b170:	ed8d 0b00 	vstr	d0, [sp]
 801b174:	9b01      	ldr	r3, [sp, #4]
 801b176:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801b17a:	b9a2      	cbnz	r2, 801b1a6 <scalbn+0x3e>
 801b17c:	9a00      	ldr	r2, [sp, #0]
 801b17e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b182:	4313      	orrs	r3, r2
 801b184:	d03a      	beq.n	801b1fc <scalbn+0x94>
 801b186:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801b240 <scalbn+0xd8>
 801b18a:	4b35      	ldr	r3, [pc, #212]	; (801b260 <scalbn+0xf8>)
 801b18c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801b190:	4298      	cmp	r0, r3
 801b192:	ed8d 7b00 	vstr	d7, [sp]
 801b196:	da11      	bge.n	801b1bc <scalbn+0x54>
 801b198:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801b248 <scalbn+0xe0>
 801b19c:	ed9d 6b00 	vldr	d6, [sp]
 801b1a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b1a4:	e007      	b.n	801b1b6 <scalbn+0x4e>
 801b1a6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b1aa:	428a      	cmp	r2, r1
 801b1ac:	d10a      	bne.n	801b1c4 <scalbn+0x5c>
 801b1ae:	ed9d 7b00 	vldr	d7, [sp]
 801b1b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801b1b6:	ed8d 7b00 	vstr	d7, [sp]
 801b1ba:	e01f      	b.n	801b1fc <scalbn+0x94>
 801b1bc:	9b01      	ldr	r3, [sp, #4]
 801b1be:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801b1c2:	3a36      	subs	r2, #54	; 0x36
 801b1c4:	4402      	add	r2, r0
 801b1c6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b1ca:	428a      	cmp	r2, r1
 801b1cc:	dd0a      	ble.n	801b1e4 <scalbn+0x7c>
 801b1ce:	ed9f 8b20 	vldr	d8, [pc, #128]	; 801b250 <scalbn+0xe8>
 801b1d2:	eeb0 0b48 	vmov.f64	d0, d8
 801b1d6:	ed9d 1b00 	vldr	d1, [sp]
 801b1da:	f000 f843 	bl	801b264 <copysign>
 801b1de:	ee20 7b08 	vmul.f64	d7, d0, d8
 801b1e2:	e7e8      	b.n	801b1b6 <scalbn+0x4e>
 801b1e4:	2a00      	cmp	r2, #0
 801b1e6:	dd10      	ble.n	801b20a <scalbn+0xa2>
 801b1e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b1ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b1f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b1f4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b1f8:	e9cd 0100 	strd	r0, r1, [sp]
 801b1fc:	ed9d 0b00 	vldr	d0, [sp]
 801b200:	b003      	add	sp, #12
 801b202:	ecbd 8b02 	vpop	{d8}
 801b206:	f85d fb04 	ldr.w	pc, [sp], #4
 801b20a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b20e:	da06      	bge.n	801b21e <scalbn+0xb6>
 801b210:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b214:	4298      	cmp	r0, r3
 801b216:	dcda      	bgt.n	801b1ce <scalbn+0x66>
 801b218:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 801b248 <scalbn+0xe0>
 801b21c:	e7d9      	b.n	801b1d2 <scalbn+0x6a>
 801b21e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b222:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b226:	3236      	adds	r2, #54	; 0x36
 801b228:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b22c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b230:	ec41 0b17 	vmov	d7, r0, r1
 801b234:	ed9f 6b08 	vldr	d6, [pc, #32]	; 801b258 <scalbn+0xf0>
 801b238:	e7b2      	b.n	801b1a0 <scalbn+0x38>
 801b23a:	bf00      	nop
 801b23c:	f3af 8000 	nop.w
 801b240:	00000000 	.word	0x00000000
 801b244:	43500000 	.word	0x43500000
 801b248:	c2f8f359 	.word	0xc2f8f359
 801b24c:	01a56e1f 	.word	0x01a56e1f
 801b250:	8800759c 	.word	0x8800759c
 801b254:	7e37e43c 	.word	0x7e37e43c
 801b258:	00000000 	.word	0x00000000
 801b25c:	3c900000 	.word	0x3c900000
 801b260:	ffff3cb0 	.word	0xffff3cb0

0801b264 <copysign>:
 801b264:	ec51 0b10 	vmov	r0, r1, d0
 801b268:	ee11 0a90 	vmov	r0, s3
 801b26c:	ee10 2a10 	vmov	r2, s0
 801b270:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b274:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b278:	ea41 0300 	orr.w	r3, r1, r0
 801b27c:	ec43 2b10 	vmov	d0, r2, r3
 801b280:	4770      	bx	lr

0801b282 <atoi>:
 801b282:	220a      	movs	r2, #10
 801b284:	2100      	movs	r1, #0
 801b286:	f000 beeb 	b.w	801c060 <strtol>
	...

0801b28c <__errno>:
 801b28c:	4b01      	ldr	r3, [pc, #4]	; (801b294 <__errno+0x8>)
 801b28e:	6818      	ldr	r0, [r3, #0]
 801b290:	4770      	bx	lr
 801b292:	bf00      	nop
 801b294:	2400017c 	.word	0x2400017c

0801b298 <__libc_init_array>:
 801b298:	b570      	push	{r4, r5, r6, lr}
 801b29a:	4e0d      	ldr	r6, [pc, #52]	; (801b2d0 <__libc_init_array+0x38>)
 801b29c:	4c0d      	ldr	r4, [pc, #52]	; (801b2d4 <__libc_init_array+0x3c>)
 801b29e:	1ba4      	subs	r4, r4, r6
 801b2a0:	10a4      	asrs	r4, r4, #2
 801b2a2:	2500      	movs	r5, #0
 801b2a4:	42a5      	cmp	r5, r4
 801b2a6:	d109      	bne.n	801b2bc <__libc_init_array+0x24>
 801b2a8:	4e0b      	ldr	r6, [pc, #44]	; (801b2d8 <__libc_init_array+0x40>)
 801b2aa:	4c0c      	ldr	r4, [pc, #48]	; (801b2dc <__libc_init_array+0x44>)
 801b2ac:	f002 fe08 	bl	801dec0 <_init>
 801b2b0:	1ba4      	subs	r4, r4, r6
 801b2b2:	10a4      	asrs	r4, r4, #2
 801b2b4:	2500      	movs	r5, #0
 801b2b6:	42a5      	cmp	r5, r4
 801b2b8:	d105      	bne.n	801b2c6 <__libc_init_array+0x2e>
 801b2ba:	bd70      	pop	{r4, r5, r6, pc}
 801b2bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b2c0:	4798      	blx	r3
 801b2c2:	3501      	adds	r5, #1
 801b2c4:	e7ee      	b.n	801b2a4 <__libc_init_array+0xc>
 801b2c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b2ca:	4798      	blx	r3
 801b2cc:	3501      	adds	r5, #1
 801b2ce:	e7f2      	b.n	801b2b6 <__libc_init_array+0x1e>
 801b2d0:	0801f190 	.word	0x0801f190
 801b2d4:	0801f190 	.word	0x0801f190
 801b2d8:	0801f190 	.word	0x0801f190
 801b2dc:	0801f194 	.word	0x0801f194

0801b2e0 <malloc>:
 801b2e0:	4b02      	ldr	r3, [pc, #8]	; (801b2ec <malloc+0xc>)
 801b2e2:	4601      	mov	r1, r0
 801b2e4:	6818      	ldr	r0, [r3, #0]
 801b2e6:	f000 b86d 	b.w	801b3c4 <_malloc_r>
 801b2ea:	bf00      	nop
 801b2ec:	2400017c 	.word	0x2400017c

0801b2f0 <free>:
 801b2f0:	4b02      	ldr	r3, [pc, #8]	; (801b2fc <free+0xc>)
 801b2f2:	4601      	mov	r1, r0
 801b2f4:	6818      	ldr	r0, [r3, #0]
 801b2f6:	f000 b817 	b.w	801b328 <_free_r>
 801b2fa:	bf00      	nop
 801b2fc:	2400017c 	.word	0x2400017c

0801b300 <memcpy>:
 801b300:	b510      	push	{r4, lr}
 801b302:	1e43      	subs	r3, r0, #1
 801b304:	440a      	add	r2, r1
 801b306:	4291      	cmp	r1, r2
 801b308:	d100      	bne.n	801b30c <memcpy+0xc>
 801b30a:	bd10      	pop	{r4, pc}
 801b30c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b310:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b314:	e7f7      	b.n	801b306 <memcpy+0x6>

0801b316 <memset>:
 801b316:	4402      	add	r2, r0
 801b318:	4603      	mov	r3, r0
 801b31a:	4293      	cmp	r3, r2
 801b31c:	d100      	bne.n	801b320 <memset+0xa>
 801b31e:	4770      	bx	lr
 801b320:	f803 1b01 	strb.w	r1, [r3], #1
 801b324:	e7f9      	b.n	801b31a <memset+0x4>
	...

0801b328 <_free_r>:
 801b328:	b538      	push	{r3, r4, r5, lr}
 801b32a:	4605      	mov	r5, r0
 801b32c:	2900      	cmp	r1, #0
 801b32e:	d045      	beq.n	801b3bc <_free_r+0x94>
 801b330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b334:	1f0c      	subs	r4, r1, #4
 801b336:	2b00      	cmp	r3, #0
 801b338:	bfb8      	it	lt
 801b33a:	18e4      	addlt	r4, r4, r3
 801b33c:	f001 ff42 	bl	801d1c4 <__malloc_lock>
 801b340:	4a1f      	ldr	r2, [pc, #124]	; (801b3c0 <_free_r+0x98>)
 801b342:	6813      	ldr	r3, [r2, #0]
 801b344:	4610      	mov	r0, r2
 801b346:	b933      	cbnz	r3, 801b356 <_free_r+0x2e>
 801b348:	6063      	str	r3, [r4, #4]
 801b34a:	6014      	str	r4, [r2, #0]
 801b34c:	4628      	mov	r0, r5
 801b34e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b352:	f001 bf38 	b.w	801d1c6 <__malloc_unlock>
 801b356:	42a3      	cmp	r3, r4
 801b358:	d90c      	bls.n	801b374 <_free_r+0x4c>
 801b35a:	6821      	ldr	r1, [r4, #0]
 801b35c:	1862      	adds	r2, r4, r1
 801b35e:	4293      	cmp	r3, r2
 801b360:	bf04      	itt	eq
 801b362:	681a      	ldreq	r2, [r3, #0]
 801b364:	685b      	ldreq	r3, [r3, #4]
 801b366:	6063      	str	r3, [r4, #4]
 801b368:	bf04      	itt	eq
 801b36a:	1852      	addeq	r2, r2, r1
 801b36c:	6022      	streq	r2, [r4, #0]
 801b36e:	6004      	str	r4, [r0, #0]
 801b370:	e7ec      	b.n	801b34c <_free_r+0x24>
 801b372:	4613      	mov	r3, r2
 801b374:	685a      	ldr	r2, [r3, #4]
 801b376:	b10a      	cbz	r2, 801b37c <_free_r+0x54>
 801b378:	42a2      	cmp	r2, r4
 801b37a:	d9fa      	bls.n	801b372 <_free_r+0x4a>
 801b37c:	6819      	ldr	r1, [r3, #0]
 801b37e:	1858      	adds	r0, r3, r1
 801b380:	42a0      	cmp	r0, r4
 801b382:	d10b      	bne.n	801b39c <_free_r+0x74>
 801b384:	6820      	ldr	r0, [r4, #0]
 801b386:	4401      	add	r1, r0
 801b388:	1858      	adds	r0, r3, r1
 801b38a:	4282      	cmp	r2, r0
 801b38c:	6019      	str	r1, [r3, #0]
 801b38e:	d1dd      	bne.n	801b34c <_free_r+0x24>
 801b390:	6810      	ldr	r0, [r2, #0]
 801b392:	6852      	ldr	r2, [r2, #4]
 801b394:	605a      	str	r2, [r3, #4]
 801b396:	4401      	add	r1, r0
 801b398:	6019      	str	r1, [r3, #0]
 801b39a:	e7d7      	b.n	801b34c <_free_r+0x24>
 801b39c:	d902      	bls.n	801b3a4 <_free_r+0x7c>
 801b39e:	230c      	movs	r3, #12
 801b3a0:	602b      	str	r3, [r5, #0]
 801b3a2:	e7d3      	b.n	801b34c <_free_r+0x24>
 801b3a4:	6820      	ldr	r0, [r4, #0]
 801b3a6:	1821      	adds	r1, r4, r0
 801b3a8:	428a      	cmp	r2, r1
 801b3aa:	bf04      	itt	eq
 801b3ac:	6811      	ldreq	r1, [r2, #0]
 801b3ae:	6852      	ldreq	r2, [r2, #4]
 801b3b0:	6062      	str	r2, [r4, #4]
 801b3b2:	bf04      	itt	eq
 801b3b4:	1809      	addeq	r1, r1, r0
 801b3b6:	6021      	streq	r1, [r4, #0]
 801b3b8:	605c      	str	r4, [r3, #4]
 801b3ba:	e7c7      	b.n	801b34c <_free_r+0x24>
 801b3bc:	bd38      	pop	{r3, r4, r5, pc}
 801b3be:	bf00      	nop
 801b3c0:	24000d04 	.word	0x24000d04

0801b3c4 <_malloc_r>:
 801b3c4:	b570      	push	{r4, r5, r6, lr}
 801b3c6:	1ccd      	adds	r5, r1, #3
 801b3c8:	f025 0503 	bic.w	r5, r5, #3
 801b3cc:	3508      	adds	r5, #8
 801b3ce:	2d0c      	cmp	r5, #12
 801b3d0:	bf38      	it	cc
 801b3d2:	250c      	movcc	r5, #12
 801b3d4:	2d00      	cmp	r5, #0
 801b3d6:	4606      	mov	r6, r0
 801b3d8:	db01      	blt.n	801b3de <_malloc_r+0x1a>
 801b3da:	42a9      	cmp	r1, r5
 801b3dc:	d903      	bls.n	801b3e6 <_malloc_r+0x22>
 801b3de:	230c      	movs	r3, #12
 801b3e0:	6033      	str	r3, [r6, #0]
 801b3e2:	2000      	movs	r0, #0
 801b3e4:	bd70      	pop	{r4, r5, r6, pc}
 801b3e6:	f001 feed 	bl	801d1c4 <__malloc_lock>
 801b3ea:	4a21      	ldr	r2, [pc, #132]	; (801b470 <_malloc_r+0xac>)
 801b3ec:	6814      	ldr	r4, [r2, #0]
 801b3ee:	4621      	mov	r1, r4
 801b3f0:	b991      	cbnz	r1, 801b418 <_malloc_r+0x54>
 801b3f2:	4c20      	ldr	r4, [pc, #128]	; (801b474 <_malloc_r+0xb0>)
 801b3f4:	6823      	ldr	r3, [r4, #0]
 801b3f6:	b91b      	cbnz	r3, 801b400 <_malloc_r+0x3c>
 801b3f8:	4630      	mov	r0, r6
 801b3fa:	f000 fcf5 	bl	801bde8 <_sbrk_r>
 801b3fe:	6020      	str	r0, [r4, #0]
 801b400:	4629      	mov	r1, r5
 801b402:	4630      	mov	r0, r6
 801b404:	f000 fcf0 	bl	801bde8 <_sbrk_r>
 801b408:	1c43      	adds	r3, r0, #1
 801b40a:	d124      	bne.n	801b456 <_malloc_r+0x92>
 801b40c:	230c      	movs	r3, #12
 801b40e:	6033      	str	r3, [r6, #0]
 801b410:	4630      	mov	r0, r6
 801b412:	f001 fed8 	bl	801d1c6 <__malloc_unlock>
 801b416:	e7e4      	b.n	801b3e2 <_malloc_r+0x1e>
 801b418:	680b      	ldr	r3, [r1, #0]
 801b41a:	1b5b      	subs	r3, r3, r5
 801b41c:	d418      	bmi.n	801b450 <_malloc_r+0x8c>
 801b41e:	2b0b      	cmp	r3, #11
 801b420:	d90f      	bls.n	801b442 <_malloc_r+0x7e>
 801b422:	600b      	str	r3, [r1, #0]
 801b424:	50cd      	str	r5, [r1, r3]
 801b426:	18cc      	adds	r4, r1, r3
 801b428:	4630      	mov	r0, r6
 801b42a:	f001 fecc 	bl	801d1c6 <__malloc_unlock>
 801b42e:	f104 000b 	add.w	r0, r4, #11
 801b432:	1d23      	adds	r3, r4, #4
 801b434:	f020 0007 	bic.w	r0, r0, #7
 801b438:	1ac3      	subs	r3, r0, r3
 801b43a:	d0d3      	beq.n	801b3e4 <_malloc_r+0x20>
 801b43c:	425a      	negs	r2, r3
 801b43e:	50e2      	str	r2, [r4, r3]
 801b440:	e7d0      	b.n	801b3e4 <_malloc_r+0x20>
 801b442:	428c      	cmp	r4, r1
 801b444:	684b      	ldr	r3, [r1, #4]
 801b446:	bf16      	itet	ne
 801b448:	6063      	strne	r3, [r4, #4]
 801b44a:	6013      	streq	r3, [r2, #0]
 801b44c:	460c      	movne	r4, r1
 801b44e:	e7eb      	b.n	801b428 <_malloc_r+0x64>
 801b450:	460c      	mov	r4, r1
 801b452:	6849      	ldr	r1, [r1, #4]
 801b454:	e7cc      	b.n	801b3f0 <_malloc_r+0x2c>
 801b456:	1cc4      	adds	r4, r0, #3
 801b458:	f024 0403 	bic.w	r4, r4, #3
 801b45c:	42a0      	cmp	r0, r4
 801b45e:	d005      	beq.n	801b46c <_malloc_r+0xa8>
 801b460:	1a21      	subs	r1, r4, r0
 801b462:	4630      	mov	r0, r6
 801b464:	f000 fcc0 	bl	801bde8 <_sbrk_r>
 801b468:	3001      	adds	r0, #1
 801b46a:	d0cf      	beq.n	801b40c <_malloc_r+0x48>
 801b46c:	6025      	str	r5, [r4, #0]
 801b46e:	e7db      	b.n	801b428 <_malloc_r+0x64>
 801b470:	24000d04 	.word	0x24000d04
 801b474:	24000d08 	.word	0x24000d08

0801b478 <__cvt>:
 801b478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b47a:	ed2d 8b02 	vpush	{d8}
 801b47e:	eeb0 8b40 	vmov.f64	d8, d0
 801b482:	b085      	sub	sp, #20
 801b484:	4617      	mov	r7, r2
 801b486:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b488:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b48a:	ee18 2a90 	vmov	r2, s17
 801b48e:	f025 0520 	bic.w	r5, r5, #32
 801b492:	2a00      	cmp	r2, #0
 801b494:	bfb6      	itet	lt
 801b496:	222d      	movlt	r2, #45	; 0x2d
 801b498:	2200      	movge	r2, #0
 801b49a:	eeb1 8b40 	vneglt.f64	d8, d0
 801b49e:	2d46      	cmp	r5, #70	; 0x46
 801b4a0:	460c      	mov	r4, r1
 801b4a2:	701a      	strb	r2, [r3, #0]
 801b4a4:	d004      	beq.n	801b4b0 <__cvt+0x38>
 801b4a6:	2d45      	cmp	r5, #69	; 0x45
 801b4a8:	d100      	bne.n	801b4ac <__cvt+0x34>
 801b4aa:	3401      	adds	r4, #1
 801b4ac:	2102      	movs	r1, #2
 801b4ae:	e000      	b.n	801b4b2 <__cvt+0x3a>
 801b4b0:	2103      	movs	r1, #3
 801b4b2:	ab03      	add	r3, sp, #12
 801b4b4:	9301      	str	r3, [sp, #4]
 801b4b6:	ab02      	add	r3, sp, #8
 801b4b8:	9300      	str	r3, [sp, #0]
 801b4ba:	4622      	mov	r2, r4
 801b4bc:	4633      	mov	r3, r6
 801b4be:	eeb0 0b48 	vmov.f64	d0, d8
 801b4c2:	f000 ff31 	bl	801c328 <_dtoa_r>
 801b4c6:	2d47      	cmp	r5, #71	; 0x47
 801b4c8:	d101      	bne.n	801b4ce <__cvt+0x56>
 801b4ca:	07fb      	lsls	r3, r7, #31
 801b4cc:	d51e      	bpl.n	801b50c <__cvt+0x94>
 801b4ce:	2d46      	cmp	r5, #70	; 0x46
 801b4d0:	eb00 0304 	add.w	r3, r0, r4
 801b4d4:	d10c      	bne.n	801b4f0 <__cvt+0x78>
 801b4d6:	7802      	ldrb	r2, [r0, #0]
 801b4d8:	2a30      	cmp	r2, #48	; 0x30
 801b4da:	d107      	bne.n	801b4ec <__cvt+0x74>
 801b4dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4e4:	bf1c      	itt	ne
 801b4e6:	f1c4 0401 	rsbne	r4, r4, #1
 801b4ea:	6034      	strne	r4, [r6, #0]
 801b4ec:	6832      	ldr	r2, [r6, #0]
 801b4ee:	4413      	add	r3, r2
 801b4f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4f8:	d007      	beq.n	801b50a <__cvt+0x92>
 801b4fa:	2130      	movs	r1, #48	; 0x30
 801b4fc:	9a03      	ldr	r2, [sp, #12]
 801b4fe:	429a      	cmp	r2, r3
 801b500:	d204      	bcs.n	801b50c <__cvt+0x94>
 801b502:	1c54      	adds	r4, r2, #1
 801b504:	9403      	str	r4, [sp, #12]
 801b506:	7011      	strb	r1, [r2, #0]
 801b508:	e7f8      	b.n	801b4fc <__cvt+0x84>
 801b50a:	9303      	str	r3, [sp, #12]
 801b50c:	9b03      	ldr	r3, [sp, #12]
 801b50e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b510:	1a1b      	subs	r3, r3, r0
 801b512:	6013      	str	r3, [r2, #0]
 801b514:	b005      	add	sp, #20
 801b516:	ecbd 8b02 	vpop	{d8}
 801b51a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b51c <__exponent>:
 801b51c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b51e:	2900      	cmp	r1, #0
 801b520:	4604      	mov	r4, r0
 801b522:	bfba      	itte	lt
 801b524:	4249      	neglt	r1, r1
 801b526:	232d      	movlt	r3, #45	; 0x2d
 801b528:	232b      	movge	r3, #43	; 0x2b
 801b52a:	2909      	cmp	r1, #9
 801b52c:	f804 2b02 	strb.w	r2, [r4], #2
 801b530:	7043      	strb	r3, [r0, #1]
 801b532:	dd20      	ble.n	801b576 <__exponent+0x5a>
 801b534:	f10d 0307 	add.w	r3, sp, #7
 801b538:	461f      	mov	r7, r3
 801b53a:	260a      	movs	r6, #10
 801b53c:	fb91 f5f6 	sdiv	r5, r1, r6
 801b540:	fb06 1115 	mls	r1, r6, r5, r1
 801b544:	3130      	adds	r1, #48	; 0x30
 801b546:	2d09      	cmp	r5, #9
 801b548:	f803 1c01 	strb.w	r1, [r3, #-1]
 801b54c:	f103 32ff 	add.w	r2, r3, #4294967295
 801b550:	4629      	mov	r1, r5
 801b552:	dc09      	bgt.n	801b568 <__exponent+0x4c>
 801b554:	3130      	adds	r1, #48	; 0x30
 801b556:	3b02      	subs	r3, #2
 801b558:	f802 1c01 	strb.w	r1, [r2, #-1]
 801b55c:	42bb      	cmp	r3, r7
 801b55e:	4622      	mov	r2, r4
 801b560:	d304      	bcc.n	801b56c <__exponent+0x50>
 801b562:	1a10      	subs	r0, r2, r0
 801b564:	b003      	add	sp, #12
 801b566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b568:	4613      	mov	r3, r2
 801b56a:	e7e7      	b.n	801b53c <__exponent+0x20>
 801b56c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b570:	f804 2b01 	strb.w	r2, [r4], #1
 801b574:	e7f2      	b.n	801b55c <__exponent+0x40>
 801b576:	2330      	movs	r3, #48	; 0x30
 801b578:	4419      	add	r1, r3
 801b57a:	7083      	strb	r3, [r0, #2]
 801b57c:	1d02      	adds	r2, r0, #4
 801b57e:	70c1      	strb	r1, [r0, #3]
 801b580:	e7ef      	b.n	801b562 <__exponent+0x46>
 801b582:	0000      	movs	r0, r0
 801b584:	0000      	movs	r0, r0
	...

0801b588 <_printf_float>:
 801b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b58c:	b08d      	sub	sp, #52	; 0x34
 801b58e:	460c      	mov	r4, r1
 801b590:	4616      	mov	r6, r2
 801b592:	461f      	mov	r7, r3
 801b594:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b598:	4605      	mov	r5, r0
 801b59a:	f001 fd8f 	bl	801d0bc <_localeconv_r>
 801b59e:	f8d0 b000 	ldr.w	fp, [r0]
 801b5a2:	4658      	mov	r0, fp
 801b5a4:	f7e4 fe9c 	bl	80002e0 <strlen>
 801b5a8:	2300      	movs	r3, #0
 801b5aa:	930a      	str	r3, [sp, #40]	; 0x28
 801b5ac:	f8d8 3000 	ldr.w	r3, [r8]
 801b5b0:	9005      	str	r0, [sp, #20]
 801b5b2:	3307      	adds	r3, #7
 801b5b4:	f023 0307 	bic.w	r3, r3, #7
 801b5b8:	f103 0108 	add.w	r1, r3, #8
 801b5bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 801b5c0:	6822      	ldr	r2, [r4, #0]
 801b5c2:	f8c8 1000 	str.w	r1, [r8]
 801b5c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b5ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801b5ce:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 801b858 <_printf_float+0x2d0>
 801b5d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801b5d6:	eeb0 6bc0 	vabs.f64	d6, d0
 801b5da:	eeb4 6b47 	vcmp.f64	d6, d7
 801b5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5e2:	dd24      	ble.n	801b62e <_printf_float+0xa6>
 801b5e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5ec:	d502      	bpl.n	801b5f4 <_printf_float+0x6c>
 801b5ee:	232d      	movs	r3, #45	; 0x2d
 801b5f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b5f4:	499a      	ldr	r1, [pc, #616]	; (801b860 <_printf_float+0x2d8>)
 801b5f6:	4b9b      	ldr	r3, [pc, #620]	; (801b864 <_printf_float+0x2dc>)
 801b5f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b5fc:	bf8c      	ite	hi
 801b5fe:	4688      	movhi	r8, r1
 801b600:	4698      	movls	r8, r3
 801b602:	f022 0204 	bic.w	r2, r2, #4
 801b606:	2303      	movs	r3, #3
 801b608:	6123      	str	r3, [r4, #16]
 801b60a:	6022      	str	r2, [r4, #0]
 801b60c:	f04f 0a00 	mov.w	sl, #0
 801b610:	9700      	str	r7, [sp, #0]
 801b612:	4633      	mov	r3, r6
 801b614:	aa0b      	add	r2, sp, #44	; 0x2c
 801b616:	4621      	mov	r1, r4
 801b618:	4628      	mov	r0, r5
 801b61a:	f000 f9e1 	bl	801b9e0 <_printf_common>
 801b61e:	3001      	adds	r0, #1
 801b620:	f040 8089 	bne.w	801b736 <_printf_float+0x1ae>
 801b624:	f04f 30ff 	mov.w	r0, #4294967295
 801b628:	b00d      	add	sp, #52	; 0x34
 801b62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b62e:	eeb4 0b40 	vcmp.f64	d0, d0
 801b632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b636:	d702      	bvc.n	801b63e <_printf_float+0xb6>
 801b638:	498b      	ldr	r1, [pc, #556]	; (801b868 <_printf_float+0x2e0>)
 801b63a:	4b8c      	ldr	r3, [pc, #560]	; (801b86c <_printf_float+0x2e4>)
 801b63c:	e7dc      	b.n	801b5f8 <_printf_float+0x70>
 801b63e:	6861      	ldr	r1, [r4, #4]
 801b640:	1c4b      	adds	r3, r1, #1
 801b642:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b646:	ab0a      	add	r3, sp, #40	; 0x28
 801b648:	a809      	add	r0, sp, #36	; 0x24
 801b64a:	d13b      	bne.n	801b6c4 <_printf_float+0x13c>
 801b64c:	2106      	movs	r1, #6
 801b64e:	6061      	str	r1, [r4, #4]
 801b650:	f04f 0c00 	mov.w	ip, #0
 801b654:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801b658:	e9cd 0900 	strd	r0, r9, [sp]
 801b65c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b660:	6022      	str	r2, [r4, #0]
 801b662:	6861      	ldr	r1, [r4, #4]
 801b664:	4628      	mov	r0, r5
 801b666:	f7ff ff07 	bl	801b478 <__cvt>
 801b66a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801b66e:	2b47      	cmp	r3, #71	; 0x47
 801b670:	4680      	mov	r8, r0
 801b672:	d109      	bne.n	801b688 <_printf_float+0x100>
 801b674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b676:	1cd8      	adds	r0, r3, #3
 801b678:	db02      	blt.n	801b680 <_printf_float+0xf8>
 801b67a:	6862      	ldr	r2, [r4, #4]
 801b67c:	4293      	cmp	r3, r2
 801b67e:	dd47      	ble.n	801b710 <_printf_float+0x188>
 801b680:	f1a9 0902 	sub.w	r9, r9, #2
 801b684:	fa5f f989 	uxtb.w	r9, r9
 801b688:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b68c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b68e:	d824      	bhi.n	801b6da <_printf_float+0x152>
 801b690:	3901      	subs	r1, #1
 801b692:	464a      	mov	r2, r9
 801b694:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b698:	9109      	str	r1, [sp, #36]	; 0x24
 801b69a:	f7ff ff3f 	bl	801b51c <__exponent>
 801b69e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b6a0:	1813      	adds	r3, r2, r0
 801b6a2:	2a01      	cmp	r2, #1
 801b6a4:	4682      	mov	sl, r0
 801b6a6:	6123      	str	r3, [r4, #16]
 801b6a8:	dc02      	bgt.n	801b6b0 <_printf_float+0x128>
 801b6aa:	6822      	ldr	r2, [r4, #0]
 801b6ac:	07d1      	lsls	r1, r2, #31
 801b6ae:	d501      	bpl.n	801b6b4 <_printf_float+0x12c>
 801b6b0:	3301      	adds	r3, #1
 801b6b2:	6123      	str	r3, [r4, #16]
 801b6b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d0a9      	beq.n	801b610 <_printf_float+0x88>
 801b6bc:	232d      	movs	r3, #45	; 0x2d
 801b6be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b6c2:	e7a5      	b.n	801b610 <_printf_float+0x88>
 801b6c4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 801b6c8:	f000 8178 	beq.w	801b9bc <_printf_float+0x434>
 801b6cc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b6d0:	d1be      	bne.n	801b650 <_printf_float+0xc8>
 801b6d2:	2900      	cmp	r1, #0
 801b6d4:	d1bc      	bne.n	801b650 <_printf_float+0xc8>
 801b6d6:	2101      	movs	r1, #1
 801b6d8:	e7b9      	b.n	801b64e <_printf_float+0xc6>
 801b6da:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b6de:	d119      	bne.n	801b714 <_printf_float+0x18c>
 801b6e0:	2900      	cmp	r1, #0
 801b6e2:	6863      	ldr	r3, [r4, #4]
 801b6e4:	dd0c      	ble.n	801b700 <_printf_float+0x178>
 801b6e6:	6121      	str	r1, [r4, #16]
 801b6e8:	b913      	cbnz	r3, 801b6f0 <_printf_float+0x168>
 801b6ea:	6822      	ldr	r2, [r4, #0]
 801b6ec:	07d2      	lsls	r2, r2, #31
 801b6ee:	d502      	bpl.n	801b6f6 <_printf_float+0x16e>
 801b6f0:	3301      	adds	r3, #1
 801b6f2:	440b      	add	r3, r1
 801b6f4:	6123      	str	r3, [r4, #16]
 801b6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6f8:	65a3      	str	r3, [r4, #88]	; 0x58
 801b6fa:	f04f 0a00 	mov.w	sl, #0
 801b6fe:	e7d9      	b.n	801b6b4 <_printf_float+0x12c>
 801b700:	b913      	cbnz	r3, 801b708 <_printf_float+0x180>
 801b702:	6822      	ldr	r2, [r4, #0]
 801b704:	07d0      	lsls	r0, r2, #31
 801b706:	d501      	bpl.n	801b70c <_printf_float+0x184>
 801b708:	3302      	adds	r3, #2
 801b70a:	e7f3      	b.n	801b6f4 <_printf_float+0x16c>
 801b70c:	2301      	movs	r3, #1
 801b70e:	e7f1      	b.n	801b6f4 <_printf_float+0x16c>
 801b710:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b714:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801b718:	4293      	cmp	r3, r2
 801b71a:	db05      	blt.n	801b728 <_printf_float+0x1a0>
 801b71c:	6822      	ldr	r2, [r4, #0]
 801b71e:	6123      	str	r3, [r4, #16]
 801b720:	07d1      	lsls	r1, r2, #31
 801b722:	d5e8      	bpl.n	801b6f6 <_printf_float+0x16e>
 801b724:	3301      	adds	r3, #1
 801b726:	e7e5      	b.n	801b6f4 <_printf_float+0x16c>
 801b728:	2b00      	cmp	r3, #0
 801b72a:	bfd4      	ite	le
 801b72c:	f1c3 0302 	rsble	r3, r3, #2
 801b730:	2301      	movgt	r3, #1
 801b732:	4413      	add	r3, r2
 801b734:	e7de      	b.n	801b6f4 <_printf_float+0x16c>
 801b736:	6823      	ldr	r3, [r4, #0]
 801b738:	055a      	lsls	r2, r3, #21
 801b73a:	d407      	bmi.n	801b74c <_printf_float+0x1c4>
 801b73c:	6923      	ldr	r3, [r4, #16]
 801b73e:	4642      	mov	r2, r8
 801b740:	4631      	mov	r1, r6
 801b742:	4628      	mov	r0, r5
 801b744:	47b8      	blx	r7
 801b746:	3001      	adds	r0, #1
 801b748:	d12a      	bne.n	801b7a0 <_printf_float+0x218>
 801b74a:	e76b      	b.n	801b624 <_printf_float+0x9c>
 801b74c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b750:	f240 80de 	bls.w	801b910 <_printf_float+0x388>
 801b754:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b758:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b760:	d133      	bne.n	801b7ca <_printf_float+0x242>
 801b762:	2301      	movs	r3, #1
 801b764:	4a42      	ldr	r2, [pc, #264]	; (801b870 <_printf_float+0x2e8>)
 801b766:	4631      	mov	r1, r6
 801b768:	4628      	mov	r0, r5
 801b76a:	47b8      	blx	r7
 801b76c:	3001      	adds	r0, #1
 801b76e:	f43f af59 	beq.w	801b624 <_printf_float+0x9c>
 801b772:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b776:	429a      	cmp	r2, r3
 801b778:	db02      	blt.n	801b780 <_printf_float+0x1f8>
 801b77a:	6823      	ldr	r3, [r4, #0]
 801b77c:	07d8      	lsls	r0, r3, #31
 801b77e:	d50f      	bpl.n	801b7a0 <_printf_float+0x218>
 801b780:	9b05      	ldr	r3, [sp, #20]
 801b782:	465a      	mov	r2, fp
 801b784:	4631      	mov	r1, r6
 801b786:	4628      	mov	r0, r5
 801b788:	47b8      	blx	r7
 801b78a:	3001      	adds	r0, #1
 801b78c:	f43f af4a 	beq.w	801b624 <_printf_float+0x9c>
 801b790:	f04f 0800 	mov.w	r8, #0
 801b794:	f104 091a 	add.w	r9, r4, #26
 801b798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b79a:	3b01      	subs	r3, #1
 801b79c:	4543      	cmp	r3, r8
 801b79e:	dc09      	bgt.n	801b7b4 <_printf_float+0x22c>
 801b7a0:	6823      	ldr	r3, [r4, #0]
 801b7a2:	079b      	lsls	r3, r3, #30
 801b7a4:	f100 8105 	bmi.w	801b9b2 <_printf_float+0x42a>
 801b7a8:	68e0      	ldr	r0, [r4, #12]
 801b7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b7ac:	4298      	cmp	r0, r3
 801b7ae:	bfb8      	it	lt
 801b7b0:	4618      	movlt	r0, r3
 801b7b2:	e739      	b.n	801b628 <_printf_float+0xa0>
 801b7b4:	2301      	movs	r3, #1
 801b7b6:	464a      	mov	r2, r9
 801b7b8:	4631      	mov	r1, r6
 801b7ba:	4628      	mov	r0, r5
 801b7bc:	47b8      	blx	r7
 801b7be:	3001      	adds	r0, #1
 801b7c0:	f43f af30 	beq.w	801b624 <_printf_float+0x9c>
 801b7c4:	f108 0801 	add.w	r8, r8, #1
 801b7c8:	e7e6      	b.n	801b798 <_printf_float+0x210>
 801b7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	dc2b      	bgt.n	801b828 <_printf_float+0x2a0>
 801b7d0:	2301      	movs	r3, #1
 801b7d2:	4a27      	ldr	r2, [pc, #156]	; (801b870 <_printf_float+0x2e8>)
 801b7d4:	4631      	mov	r1, r6
 801b7d6:	4628      	mov	r0, r5
 801b7d8:	47b8      	blx	r7
 801b7da:	3001      	adds	r0, #1
 801b7dc:	f43f af22 	beq.w	801b624 <_printf_float+0x9c>
 801b7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7e2:	b923      	cbnz	r3, 801b7ee <_printf_float+0x266>
 801b7e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7e6:	b913      	cbnz	r3, 801b7ee <_printf_float+0x266>
 801b7e8:	6823      	ldr	r3, [r4, #0]
 801b7ea:	07d9      	lsls	r1, r3, #31
 801b7ec:	d5d8      	bpl.n	801b7a0 <_printf_float+0x218>
 801b7ee:	9b05      	ldr	r3, [sp, #20]
 801b7f0:	465a      	mov	r2, fp
 801b7f2:	4631      	mov	r1, r6
 801b7f4:	4628      	mov	r0, r5
 801b7f6:	47b8      	blx	r7
 801b7f8:	3001      	adds	r0, #1
 801b7fa:	f43f af13 	beq.w	801b624 <_printf_float+0x9c>
 801b7fe:	f04f 0900 	mov.w	r9, #0
 801b802:	f104 0a1a 	add.w	sl, r4, #26
 801b806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b808:	425b      	negs	r3, r3
 801b80a:	454b      	cmp	r3, r9
 801b80c:	dc01      	bgt.n	801b812 <_printf_float+0x28a>
 801b80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b810:	e795      	b.n	801b73e <_printf_float+0x1b6>
 801b812:	2301      	movs	r3, #1
 801b814:	4652      	mov	r2, sl
 801b816:	4631      	mov	r1, r6
 801b818:	4628      	mov	r0, r5
 801b81a:	47b8      	blx	r7
 801b81c:	3001      	adds	r0, #1
 801b81e:	f43f af01 	beq.w	801b624 <_printf_float+0x9c>
 801b822:	f109 0901 	add.w	r9, r9, #1
 801b826:	e7ee      	b.n	801b806 <_printf_float+0x27e>
 801b828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b82a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b82c:	429a      	cmp	r2, r3
 801b82e:	bfa8      	it	ge
 801b830:	461a      	movge	r2, r3
 801b832:	2a00      	cmp	r2, #0
 801b834:	4691      	mov	r9, r2
 801b836:	dd07      	ble.n	801b848 <_printf_float+0x2c0>
 801b838:	4613      	mov	r3, r2
 801b83a:	4631      	mov	r1, r6
 801b83c:	4642      	mov	r2, r8
 801b83e:	4628      	mov	r0, r5
 801b840:	47b8      	blx	r7
 801b842:	3001      	adds	r0, #1
 801b844:	f43f aeee 	beq.w	801b624 <_printf_float+0x9c>
 801b848:	f104 031a 	add.w	r3, r4, #26
 801b84c:	f04f 0a00 	mov.w	sl, #0
 801b850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b854:	9307      	str	r3, [sp, #28]
 801b856:	e017      	b.n	801b888 <_printf_float+0x300>
 801b858:	ffffffff 	.word	0xffffffff
 801b85c:	7fefffff 	.word	0x7fefffff
 801b860:	0801eec8 	.word	0x0801eec8
 801b864:	0801eec4 	.word	0x0801eec4
 801b868:	0801eed0 	.word	0x0801eed0
 801b86c:	0801eecc 	.word	0x0801eecc
 801b870:	0801eed4 	.word	0x0801eed4
 801b874:	2301      	movs	r3, #1
 801b876:	9a07      	ldr	r2, [sp, #28]
 801b878:	4631      	mov	r1, r6
 801b87a:	4628      	mov	r0, r5
 801b87c:	47b8      	blx	r7
 801b87e:	3001      	adds	r0, #1
 801b880:	f43f aed0 	beq.w	801b624 <_printf_float+0x9c>
 801b884:	f10a 0a01 	add.w	sl, sl, #1
 801b888:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b88a:	9306      	str	r3, [sp, #24]
 801b88c:	eba3 0309 	sub.w	r3, r3, r9
 801b890:	4553      	cmp	r3, sl
 801b892:	dcef      	bgt.n	801b874 <_printf_float+0x2ec>
 801b894:	9b06      	ldr	r3, [sp, #24]
 801b896:	4498      	add	r8, r3
 801b898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b89c:	429a      	cmp	r2, r3
 801b89e:	db15      	blt.n	801b8cc <_printf_float+0x344>
 801b8a0:	6823      	ldr	r3, [r4, #0]
 801b8a2:	07da      	lsls	r2, r3, #31
 801b8a4:	d412      	bmi.n	801b8cc <_printf_float+0x344>
 801b8a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8a8:	9a06      	ldr	r2, [sp, #24]
 801b8aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b8ac:	1a9a      	subs	r2, r3, r2
 801b8ae:	eba3 0a01 	sub.w	sl, r3, r1
 801b8b2:	4592      	cmp	sl, r2
 801b8b4:	bfa8      	it	ge
 801b8b6:	4692      	movge	sl, r2
 801b8b8:	f1ba 0f00 	cmp.w	sl, #0
 801b8bc:	dc0e      	bgt.n	801b8dc <_printf_float+0x354>
 801b8be:	f04f 0800 	mov.w	r8, #0
 801b8c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b8c6:	f104 091a 	add.w	r9, r4, #26
 801b8ca:	e019      	b.n	801b900 <_printf_float+0x378>
 801b8cc:	9b05      	ldr	r3, [sp, #20]
 801b8ce:	465a      	mov	r2, fp
 801b8d0:	4631      	mov	r1, r6
 801b8d2:	4628      	mov	r0, r5
 801b8d4:	47b8      	blx	r7
 801b8d6:	3001      	adds	r0, #1
 801b8d8:	d1e5      	bne.n	801b8a6 <_printf_float+0x31e>
 801b8da:	e6a3      	b.n	801b624 <_printf_float+0x9c>
 801b8dc:	4653      	mov	r3, sl
 801b8de:	4642      	mov	r2, r8
 801b8e0:	4631      	mov	r1, r6
 801b8e2:	4628      	mov	r0, r5
 801b8e4:	47b8      	blx	r7
 801b8e6:	3001      	adds	r0, #1
 801b8e8:	d1e9      	bne.n	801b8be <_printf_float+0x336>
 801b8ea:	e69b      	b.n	801b624 <_printf_float+0x9c>
 801b8ec:	2301      	movs	r3, #1
 801b8ee:	464a      	mov	r2, r9
 801b8f0:	4631      	mov	r1, r6
 801b8f2:	4628      	mov	r0, r5
 801b8f4:	47b8      	blx	r7
 801b8f6:	3001      	adds	r0, #1
 801b8f8:	f43f ae94 	beq.w	801b624 <_printf_float+0x9c>
 801b8fc:	f108 0801 	add.w	r8, r8, #1
 801b900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b904:	1a9b      	subs	r3, r3, r2
 801b906:	eba3 030a 	sub.w	r3, r3, sl
 801b90a:	4543      	cmp	r3, r8
 801b90c:	dcee      	bgt.n	801b8ec <_printf_float+0x364>
 801b90e:	e747      	b.n	801b7a0 <_printf_float+0x218>
 801b910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b912:	2a01      	cmp	r2, #1
 801b914:	dc01      	bgt.n	801b91a <_printf_float+0x392>
 801b916:	07db      	lsls	r3, r3, #31
 801b918:	d539      	bpl.n	801b98e <_printf_float+0x406>
 801b91a:	2301      	movs	r3, #1
 801b91c:	4642      	mov	r2, r8
 801b91e:	4631      	mov	r1, r6
 801b920:	4628      	mov	r0, r5
 801b922:	47b8      	blx	r7
 801b924:	3001      	adds	r0, #1
 801b926:	f43f ae7d 	beq.w	801b624 <_printf_float+0x9c>
 801b92a:	9b05      	ldr	r3, [sp, #20]
 801b92c:	465a      	mov	r2, fp
 801b92e:	4631      	mov	r1, r6
 801b930:	4628      	mov	r0, r5
 801b932:	47b8      	blx	r7
 801b934:	3001      	adds	r0, #1
 801b936:	f108 0801 	add.w	r8, r8, #1
 801b93a:	f43f ae73 	beq.w	801b624 <_printf_float+0x9c>
 801b93e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b944:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b94c:	f103 33ff 	add.w	r3, r3, #4294967295
 801b950:	d018      	beq.n	801b984 <_printf_float+0x3fc>
 801b952:	4642      	mov	r2, r8
 801b954:	4631      	mov	r1, r6
 801b956:	4628      	mov	r0, r5
 801b958:	47b8      	blx	r7
 801b95a:	3001      	adds	r0, #1
 801b95c:	d10e      	bne.n	801b97c <_printf_float+0x3f4>
 801b95e:	e661      	b.n	801b624 <_printf_float+0x9c>
 801b960:	2301      	movs	r3, #1
 801b962:	464a      	mov	r2, r9
 801b964:	4631      	mov	r1, r6
 801b966:	4628      	mov	r0, r5
 801b968:	47b8      	blx	r7
 801b96a:	3001      	adds	r0, #1
 801b96c:	f43f ae5a 	beq.w	801b624 <_printf_float+0x9c>
 801b970:	f108 0801 	add.w	r8, r8, #1
 801b974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b976:	3b01      	subs	r3, #1
 801b978:	4543      	cmp	r3, r8
 801b97a:	dcf1      	bgt.n	801b960 <_printf_float+0x3d8>
 801b97c:	4653      	mov	r3, sl
 801b97e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b982:	e6dd      	b.n	801b740 <_printf_float+0x1b8>
 801b984:	f04f 0800 	mov.w	r8, #0
 801b988:	f104 091a 	add.w	r9, r4, #26
 801b98c:	e7f2      	b.n	801b974 <_printf_float+0x3ec>
 801b98e:	2301      	movs	r3, #1
 801b990:	e7df      	b.n	801b952 <_printf_float+0x3ca>
 801b992:	2301      	movs	r3, #1
 801b994:	464a      	mov	r2, r9
 801b996:	4631      	mov	r1, r6
 801b998:	4628      	mov	r0, r5
 801b99a:	47b8      	blx	r7
 801b99c:	3001      	adds	r0, #1
 801b99e:	f43f ae41 	beq.w	801b624 <_printf_float+0x9c>
 801b9a2:	f108 0801 	add.w	r8, r8, #1
 801b9a6:	68e3      	ldr	r3, [r4, #12]
 801b9a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b9aa:	1a9b      	subs	r3, r3, r2
 801b9ac:	4543      	cmp	r3, r8
 801b9ae:	dcf0      	bgt.n	801b992 <_printf_float+0x40a>
 801b9b0:	e6fa      	b.n	801b7a8 <_printf_float+0x220>
 801b9b2:	f04f 0800 	mov.w	r8, #0
 801b9b6:	f104 0919 	add.w	r9, r4, #25
 801b9ba:	e7f4      	b.n	801b9a6 <_printf_float+0x41e>
 801b9bc:	2900      	cmp	r1, #0
 801b9be:	f43f ae8a 	beq.w	801b6d6 <_printf_float+0x14e>
 801b9c2:	f04f 0c00 	mov.w	ip, #0
 801b9c6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801b9ca:	e9cd 0900 	strd	r0, r9, [sp]
 801b9ce:	6022      	str	r2, [r4, #0]
 801b9d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b9d4:	4628      	mov	r0, r5
 801b9d6:	f7ff fd4f 	bl	801b478 <__cvt>
 801b9da:	4680      	mov	r8, r0
 801b9dc:	e64a      	b.n	801b674 <_printf_float+0xec>
 801b9de:	bf00      	nop

0801b9e0 <_printf_common>:
 801b9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9e4:	4691      	mov	r9, r2
 801b9e6:	461f      	mov	r7, r3
 801b9e8:	688a      	ldr	r2, [r1, #8]
 801b9ea:	690b      	ldr	r3, [r1, #16]
 801b9ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b9f0:	4293      	cmp	r3, r2
 801b9f2:	bfb8      	it	lt
 801b9f4:	4613      	movlt	r3, r2
 801b9f6:	f8c9 3000 	str.w	r3, [r9]
 801b9fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b9fe:	4606      	mov	r6, r0
 801ba00:	460c      	mov	r4, r1
 801ba02:	b112      	cbz	r2, 801ba0a <_printf_common+0x2a>
 801ba04:	3301      	adds	r3, #1
 801ba06:	f8c9 3000 	str.w	r3, [r9]
 801ba0a:	6823      	ldr	r3, [r4, #0]
 801ba0c:	0699      	lsls	r1, r3, #26
 801ba0e:	bf42      	ittt	mi
 801ba10:	f8d9 3000 	ldrmi.w	r3, [r9]
 801ba14:	3302      	addmi	r3, #2
 801ba16:	f8c9 3000 	strmi.w	r3, [r9]
 801ba1a:	6825      	ldr	r5, [r4, #0]
 801ba1c:	f015 0506 	ands.w	r5, r5, #6
 801ba20:	d107      	bne.n	801ba32 <_printf_common+0x52>
 801ba22:	f104 0a19 	add.w	sl, r4, #25
 801ba26:	68e3      	ldr	r3, [r4, #12]
 801ba28:	f8d9 2000 	ldr.w	r2, [r9]
 801ba2c:	1a9b      	subs	r3, r3, r2
 801ba2e:	42ab      	cmp	r3, r5
 801ba30:	dc28      	bgt.n	801ba84 <_printf_common+0xa4>
 801ba32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801ba36:	6822      	ldr	r2, [r4, #0]
 801ba38:	3300      	adds	r3, #0
 801ba3a:	bf18      	it	ne
 801ba3c:	2301      	movne	r3, #1
 801ba3e:	0692      	lsls	r2, r2, #26
 801ba40:	d42d      	bmi.n	801ba9e <_printf_common+0xbe>
 801ba42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ba46:	4639      	mov	r1, r7
 801ba48:	4630      	mov	r0, r6
 801ba4a:	47c0      	blx	r8
 801ba4c:	3001      	adds	r0, #1
 801ba4e:	d020      	beq.n	801ba92 <_printf_common+0xb2>
 801ba50:	6823      	ldr	r3, [r4, #0]
 801ba52:	68e5      	ldr	r5, [r4, #12]
 801ba54:	f8d9 2000 	ldr.w	r2, [r9]
 801ba58:	f003 0306 	and.w	r3, r3, #6
 801ba5c:	2b04      	cmp	r3, #4
 801ba5e:	bf08      	it	eq
 801ba60:	1aad      	subeq	r5, r5, r2
 801ba62:	68a3      	ldr	r3, [r4, #8]
 801ba64:	6922      	ldr	r2, [r4, #16]
 801ba66:	bf0c      	ite	eq
 801ba68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ba6c:	2500      	movne	r5, #0
 801ba6e:	4293      	cmp	r3, r2
 801ba70:	bfc4      	itt	gt
 801ba72:	1a9b      	subgt	r3, r3, r2
 801ba74:	18ed      	addgt	r5, r5, r3
 801ba76:	f04f 0900 	mov.w	r9, #0
 801ba7a:	341a      	adds	r4, #26
 801ba7c:	454d      	cmp	r5, r9
 801ba7e:	d11a      	bne.n	801bab6 <_printf_common+0xd6>
 801ba80:	2000      	movs	r0, #0
 801ba82:	e008      	b.n	801ba96 <_printf_common+0xb6>
 801ba84:	2301      	movs	r3, #1
 801ba86:	4652      	mov	r2, sl
 801ba88:	4639      	mov	r1, r7
 801ba8a:	4630      	mov	r0, r6
 801ba8c:	47c0      	blx	r8
 801ba8e:	3001      	adds	r0, #1
 801ba90:	d103      	bne.n	801ba9a <_printf_common+0xba>
 801ba92:	f04f 30ff 	mov.w	r0, #4294967295
 801ba96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba9a:	3501      	adds	r5, #1
 801ba9c:	e7c3      	b.n	801ba26 <_printf_common+0x46>
 801ba9e:	18e1      	adds	r1, r4, r3
 801baa0:	1c5a      	adds	r2, r3, #1
 801baa2:	2030      	movs	r0, #48	; 0x30
 801baa4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801baa8:	4422      	add	r2, r4
 801baaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801baae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bab2:	3302      	adds	r3, #2
 801bab4:	e7c5      	b.n	801ba42 <_printf_common+0x62>
 801bab6:	2301      	movs	r3, #1
 801bab8:	4622      	mov	r2, r4
 801baba:	4639      	mov	r1, r7
 801babc:	4630      	mov	r0, r6
 801babe:	47c0      	blx	r8
 801bac0:	3001      	adds	r0, #1
 801bac2:	d0e6      	beq.n	801ba92 <_printf_common+0xb2>
 801bac4:	f109 0901 	add.w	r9, r9, #1
 801bac8:	e7d8      	b.n	801ba7c <_printf_common+0x9c>
	...

0801bacc <_printf_i>:
 801bacc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bad0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801bad4:	460c      	mov	r4, r1
 801bad6:	7e09      	ldrb	r1, [r1, #24]
 801bad8:	b085      	sub	sp, #20
 801bada:	296e      	cmp	r1, #110	; 0x6e
 801badc:	4617      	mov	r7, r2
 801bade:	4606      	mov	r6, r0
 801bae0:	4698      	mov	r8, r3
 801bae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bae4:	f000 80b3 	beq.w	801bc4e <_printf_i+0x182>
 801bae8:	d822      	bhi.n	801bb30 <_printf_i+0x64>
 801baea:	2963      	cmp	r1, #99	; 0x63
 801baec:	d036      	beq.n	801bb5c <_printf_i+0x90>
 801baee:	d80a      	bhi.n	801bb06 <_printf_i+0x3a>
 801baf0:	2900      	cmp	r1, #0
 801baf2:	f000 80b9 	beq.w	801bc68 <_printf_i+0x19c>
 801baf6:	2958      	cmp	r1, #88	; 0x58
 801baf8:	f000 8083 	beq.w	801bc02 <_printf_i+0x136>
 801bafc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bb00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801bb04:	e032      	b.n	801bb6c <_printf_i+0xa0>
 801bb06:	2964      	cmp	r1, #100	; 0x64
 801bb08:	d001      	beq.n	801bb0e <_printf_i+0x42>
 801bb0a:	2969      	cmp	r1, #105	; 0x69
 801bb0c:	d1f6      	bne.n	801bafc <_printf_i+0x30>
 801bb0e:	6820      	ldr	r0, [r4, #0]
 801bb10:	6813      	ldr	r3, [r2, #0]
 801bb12:	0605      	lsls	r5, r0, #24
 801bb14:	f103 0104 	add.w	r1, r3, #4
 801bb18:	d52a      	bpl.n	801bb70 <_printf_i+0xa4>
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	6011      	str	r1, [r2, #0]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	da03      	bge.n	801bb2a <_printf_i+0x5e>
 801bb22:	222d      	movs	r2, #45	; 0x2d
 801bb24:	425b      	negs	r3, r3
 801bb26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801bb2a:	486f      	ldr	r0, [pc, #444]	; (801bce8 <_printf_i+0x21c>)
 801bb2c:	220a      	movs	r2, #10
 801bb2e:	e039      	b.n	801bba4 <_printf_i+0xd8>
 801bb30:	2973      	cmp	r1, #115	; 0x73
 801bb32:	f000 809d 	beq.w	801bc70 <_printf_i+0x1a4>
 801bb36:	d808      	bhi.n	801bb4a <_printf_i+0x7e>
 801bb38:	296f      	cmp	r1, #111	; 0x6f
 801bb3a:	d020      	beq.n	801bb7e <_printf_i+0xb2>
 801bb3c:	2970      	cmp	r1, #112	; 0x70
 801bb3e:	d1dd      	bne.n	801bafc <_printf_i+0x30>
 801bb40:	6823      	ldr	r3, [r4, #0]
 801bb42:	f043 0320 	orr.w	r3, r3, #32
 801bb46:	6023      	str	r3, [r4, #0]
 801bb48:	e003      	b.n	801bb52 <_printf_i+0x86>
 801bb4a:	2975      	cmp	r1, #117	; 0x75
 801bb4c:	d017      	beq.n	801bb7e <_printf_i+0xb2>
 801bb4e:	2978      	cmp	r1, #120	; 0x78
 801bb50:	d1d4      	bne.n	801bafc <_printf_i+0x30>
 801bb52:	2378      	movs	r3, #120	; 0x78
 801bb54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bb58:	4864      	ldr	r0, [pc, #400]	; (801bcec <_printf_i+0x220>)
 801bb5a:	e055      	b.n	801bc08 <_printf_i+0x13c>
 801bb5c:	6813      	ldr	r3, [r2, #0]
 801bb5e:	1d19      	adds	r1, r3, #4
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	6011      	str	r1, [r2, #0]
 801bb64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bb68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bb6c:	2301      	movs	r3, #1
 801bb6e:	e08c      	b.n	801bc8a <_printf_i+0x1be>
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	6011      	str	r1, [r2, #0]
 801bb74:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bb78:	bf18      	it	ne
 801bb7a:	b21b      	sxthne	r3, r3
 801bb7c:	e7cf      	b.n	801bb1e <_printf_i+0x52>
 801bb7e:	6813      	ldr	r3, [r2, #0]
 801bb80:	6825      	ldr	r5, [r4, #0]
 801bb82:	1d18      	adds	r0, r3, #4
 801bb84:	6010      	str	r0, [r2, #0]
 801bb86:	0628      	lsls	r0, r5, #24
 801bb88:	d501      	bpl.n	801bb8e <_printf_i+0xc2>
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	e002      	b.n	801bb94 <_printf_i+0xc8>
 801bb8e:	0668      	lsls	r0, r5, #25
 801bb90:	d5fb      	bpl.n	801bb8a <_printf_i+0xbe>
 801bb92:	881b      	ldrh	r3, [r3, #0]
 801bb94:	4854      	ldr	r0, [pc, #336]	; (801bce8 <_printf_i+0x21c>)
 801bb96:	296f      	cmp	r1, #111	; 0x6f
 801bb98:	bf14      	ite	ne
 801bb9a:	220a      	movne	r2, #10
 801bb9c:	2208      	moveq	r2, #8
 801bb9e:	2100      	movs	r1, #0
 801bba0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bba4:	6865      	ldr	r5, [r4, #4]
 801bba6:	60a5      	str	r5, [r4, #8]
 801bba8:	2d00      	cmp	r5, #0
 801bbaa:	f2c0 8095 	blt.w	801bcd8 <_printf_i+0x20c>
 801bbae:	6821      	ldr	r1, [r4, #0]
 801bbb0:	f021 0104 	bic.w	r1, r1, #4
 801bbb4:	6021      	str	r1, [r4, #0]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d13d      	bne.n	801bc36 <_printf_i+0x16a>
 801bbba:	2d00      	cmp	r5, #0
 801bbbc:	f040 808e 	bne.w	801bcdc <_printf_i+0x210>
 801bbc0:	4665      	mov	r5, ip
 801bbc2:	2a08      	cmp	r2, #8
 801bbc4:	d10b      	bne.n	801bbde <_printf_i+0x112>
 801bbc6:	6823      	ldr	r3, [r4, #0]
 801bbc8:	07db      	lsls	r3, r3, #31
 801bbca:	d508      	bpl.n	801bbde <_printf_i+0x112>
 801bbcc:	6923      	ldr	r3, [r4, #16]
 801bbce:	6862      	ldr	r2, [r4, #4]
 801bbd0:	429a      	cmp	r2, r3
 801bbd2:	bfde      	ittt	le
 801bbd4:	2330      	movle	r3, #48	; 0x30
 801bbd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bbda:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bbde:	ebac 0305 	sub.w	r3, ip, r5
 801bbe2:	6123      	str	r3, [r4, #16]
 801bbe4:	f8cd 8000 	str.w	r8, [sp]
 801bbe8:	463b      	mov	r3, r7
 801bbea:	aa03      	add	r2, sp, #12
 801bbec:	4621      	mov	r1, r4
 801bbee:	4630      	mov	r0, r6
 801bbf0:	f7ff fef6 	bl	801b9e0 <_printf_common>
 801bbf4:	3001      	adds	r0, #1
 801bbf6:	d14d      	bne.n	801bc94 <_printf_i+0x1c8>
 801bbf8:	f04f 30ff 	mov.w	r0, #4294967295
 801bbfc:	b005      	add	sp, #20
 801bbfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc02:	4839      	ldr	r0, [pc, #228]	; (801bce8 <_printf_i+0x21c>)
 801bc04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801bc08:	6813      	ldr	r3, [r2, #0]
 801bc0a:	6821      	ldr	r1, [r4, #0]
 801bc0c:	1d1d      	adds	r5, r3, #4
 801bc0e:	681b      	ldr	r3, [r3, #0]
 801bc10:	6015      	str	r5, [r2, #0]
 801bc12:	060a      	lsls	r2, r1, #24
 801bc14:	d50b      	bpl.n	801bc2e <_printf_i+0x162>
 801bc16:	07ca      	lsls	r2, r1, #31
 801bc18:	bf44      	itt	mi
 801bc1a:	f041 0120 	orrmi.w	r1, r1, #32
 801bc1e:	6021      	strmi	r1, [r4, #0]
 801bc20:	b91b      	cbnz	r3, 801bc2a <_printf_i+0x15e>
 801bc22:	6822      	ldr	r2, [r4, #0]
 801bc24:	f022 0220 	bic.w	r2, r2, #32
 801bc28:	6022      	str	r2, [r4, #0]
 801bc2a:	2210      	movs	r2, #16
 801bc2c:	e7b7      	b.n	801bb9e <_printf_i+0xd2>
 801bc2e:	064d      	lsls	r5, r1, #25
 801bc30:	bf48      	it	mi
 801bc32:	b29b      	uxthmi	r3, r3
 801bc34:	e7ef      	b.n	801bc16 <_printf_i+0x14a>
 801bc36:	4665      	mov	r5, ip
 801bc38:	fbb3 f1f2 	udiv	r1, r3, r2
 801bc3c:	fb02 3311 	mls	r3, r2, r1, r3
 801bc40:	5cc3      	ldrb	r3, [r0, r3]
 801bc42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801bc46:	460b      	mov	r3, r1
 801bc48:	2900      	cmp	r1, #0
 801bc4a:	d1f5      	bne.n	801bc38 <_printf_i+0x16c>
 801bc4c:	e7b9      	b.n	801bbc2 <_printf_i+0xf6>
 801bc4e:	6813      	ldr	r3, [r2, #0]
 801bc50:	6825      	ldr	r5, [r4, #0]
 801bc52:	6961      	ldr	r1, [r4, #20]
 801bc54:	1d18      	adds	r0, r3, #4
 801bc56:	6010      	str	r0, [r2, #0]
 801bc58:	0628      	lsls	r0, r5, #24
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	d501      	bpl.n	801bc62 <_printf_i+0x196>
 801bc5e:	6019      	str	r1, [r3, #0]
 801bc60:	e002      	b.n	801bc68 <_printf_i+0x19c>
 801bc62:	066a      	lsls	r2, r5, #25
 801bc64:	d5fb      	bpl.n	801bc5e <_printf_i+0x192>
 801bc66:	8019      	strh	r1, [r3, #0]
 801bc68:	2300      	movs	r3, #0
 801bc6a:	6123      	str	r3, [r4, #16]
 801bc6c:	4665      	mov	r5, ip
 801bc6e:	e7b9      	b.n	801bbe4 <_printf_i+0x118>
 801bc70:	6813      	ldr	r3, [r2, #0]
 801bc72:	1d19      	adds	r1, r3, #4
 801bc74:	6011      	str	r1, [r2, #0]
 801bc76:	681d      	ldr	r5, [r3, #0]
 801bc78:	6862      	ldr	r2, [r4, #4]
 801bc7a:	2100      	movs	r1, #0
 801bc7c:	4628      	mov	r0, r5
 801bc7e:	f7e4 fb37 	bl	80002f0 <memchr>
 801bc82:	b108      	cbz	r0, 801bc88 <_printf_i+0x1bc>
 801bc84:	1b40      	subs	r0, r0, r5
 801bc86:	6060      	str	r0, [r4, #4]
 801bc88:	6863      	ldr	r3, [r4, #4]
 801bc8a:	6123      	str	r3, [r4, #16]
 801bc8c:	2300      	movs	r3, #0
 801bc8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bc92:	e7a7      	b.n	801bbe4 <_printf_i+0x118>
 801bc94:	6923      	ldr	r3, [r4, #16]
 801bc96:	462a      	mov	r2, r5
 801bc98:	4639      	mov	r1, r7
 801bc9a:	4630      	mov	r0, r6
 801bc9c:	47c0      	blx	r8
 801bc9e:	3001      	adds	r0, #1
 801bca0:	d0aa      	beq.n	801bbf8 <_printf_i+0x12c>
 801bca2:	6823      	ldr	r3, [r4, #0]
 801bca4:	079b      	lsls	r3, r3, #30
 801bca6:	d413      	bmi.n	801bcd0 <_printf_i+0x204>
 801bca8:	68e0      	ldr	r0, [r4, #12]
 801bcaa:	9b03      	ldr	r3, [sp, #12]
 801bcac:	4298      	cmp	r0, r3
 801bcae:	bfb8      	it	lt
 801bcb0:	4618      	movlt	r0, r3
 801bcb2:	e7a3      	b.n	801bbfc <_printf_i+0x130>
 801bcb4:	2301      	movs	r3, #1
 801bcb6:	464a      	mov	r2, r9
 801bcb8:	4639      	mov	r1, r7
 801bcba:	4630      	mov	r0, r6
 801bcbc:	47c0      	blx	r8
 801bcbe:	3001      	adds	r0, #1
 801bcc0:	d09a      	beq.n	801bbf8 <_printf_i+0x12c>
 801bcc2:	3501      	adds	r5, #1
 801bcc4:	68e3      	ldr	r3, [r4, #12]
 801bcc6:	9a03      	ldr	r2, [sp, #12]
 801bcc8:	1a9b      	subs	r3, r3, r2
 801bcca:	42ab      	cmp	r3, r5
 801bccc:	dcf2      	bgt.n	801bcb4 <_printf_i+0x1e8>
 801bcce:	e7eb      	b.n	801bca8 <_printf_i+0x1dc>
 801bcd0:	2500      	movs	r5, #0
 801bcd2:	f104 0919 	add.w	r9, r4, #25
 801bcd6:	e7f5      	b.n	801bcc4 <_printf_i+0x1f8>
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	d1ac      	bne.n	801bc36 <_printf_i+0x16a>
 801bcdc:	7803      	ldrb	r3, [r0, #0]
 801bcde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bce2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bce6:	e76c      	b.n	801bbc2 <_printf_i+0xf6>
 801bce8:	0801eed6 	.word	0x0801eed6
 801bcec:	0801eee7 	.word	0x0801eee7

0801bcf0 <iprintf>:
 801bcf0:	b40f      	push	{r0, r1, r2, r3}
 801bcf2:	4b0a      	ldr	r3, [pc, #40]	; (801bd1c <iprintf+0x2c>)
 801bcf4:	b513      	push	{r0, r1, r4, lr}
 801bcf6:	681c      	ldr	r4, [r3, #0]
 801bcf8:	b124      	cbz	r4, 801bd04 <iprintf+0x14>
 801bcfa:	69a3      	ldr	r3, [r4, #24]
 801bcfc:	b913      	cbnz	r3, 801bd04 <iprintf+0x14>
 801bcfe:	4620      	mov	r0, r4
 801bd00:	f001 f94e 	bl	801cfa0 <__sinit>
 801bd04:	ab05      	add	r3, sp, #20
 801bd06:	9a04      	ldr	r2, [sp, #16]
 801bd08:	68a1      	ldr	r1, [r4, #8]
 801bd0a:	9301      	str	r3, [sp, #4]
 801bd0c:	4620      	mov	r0, r4
 801bd0e:	f001 fec1 	bl	801da94 <_vfiprintf_r>
 801bd12:	b002      	add	sp, #8
 801bd14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd18:	b004      	add	sp, #16
 801bd1a:	4770      	bx	lr
 801bd1c:	2400017c 	.word	0x2400017c

0801bd20 <_puts_r>:
 801bd20:	b570      	push	{r4, r5, r6, lr}
 801bd22:	460e      	mov	r6, r1
 801bd24:	4605      	mov	r5, r0
 801bd26:	b118      	cbz	r0, 801bd30 <_puts_r+0x10>
 801bd28:	6983      	ldr	r3, [r0, #24]
 801bd2a:	b90b      	cbnz	r3, 801bd30 <_puts_r+0x10>
 801bd2c:	f001 f938 	bl	801cfa0 <__sinit>
 801bd30:	69ab      	ldr	r3, [r5, #24]
 801bd32:	68ac      	ldr	r4, [r5, #8]
 801bd34:	b913      	cbnz	r3, 801bd3c <_puts_r+0x1c>
 801bd36:	4628      	mov	r0, r5
 801bd38:	f001 f932 	bl	801cfa0 <__sinit>
 801bd3c:	4b23      	ldr	r3, [pc, #140]	; (801bdcc <_puts_r+0xac>)
 801bd3e:	429c      	cmp	r4, r3
 801bd40:	d117      	bne.n	801bd72 <_puts_r+0x52>
 801bd42:	686c      	ldr	r4, [r5, #4]
 801bd44:	89a3      	ldrh	r3, [r4, #12]
 801bd46:	071b      	lsls	r3, r3, #28
 801bd48:	d51d      	bpl.n	801bd86 <_puts_r+0x66>
 801bd4a:	6923      	ldr	r3, [r4, #16]
 801bd4c:	b1db      	cbz	r3, 801bd86 <_puts_r+0x66>
 801bd4e:	3e01      	subs	r6, #1
 801bd50:	68a3      	ldr	r3, [r4, #8]
 801bd52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bd56:	3b01      	subs	r3, #1
 801bd58:	60a3      	str	r3, [r4, #8]
 801bd5a:	b9e9      	cbnz	r1, 801bd98 <_puts_r+0x78>
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	da2e      	bge.n	801bdbe <_puts_r+0x9e>
 801bd60:	4622      	mov	r2, r4
 801bd62:	210a      	movs	r1, #10
 801bd64:	4628      	mov	r0, r5
 801bd66:	f000 f991 	bl	801c08c <__swbuf_r>
 801bd6a:	3001      	adds	r0, #1
 801bd6c:	d011      	beq.n	801bd92 <_puts_r+0x72>
 801bd6e:	200a      	movs	r0, #10
 801bd70:	e011      	b.n	801bd96 <_puts_r+0x76>
 801bd72:	4b17      	ldr	r3, [pc, #92]	; (801bdd0 <_puts_r+0xb0>)
 801bd74:	429c      	cmp	r4, r3
 801bd76:	d101      	bne.n	801bd7c <_puts_r+0x5c>
 801bd78:	68ac      	ldr	r4, [r5, #8]
 801bd7a:	e7e3      	b.n	801bd44 <_puts_r+0x24>
 801bd7c:	4b15      	ldr	r3, [pc, #84]	; (801bdd4 <_puts_r+0xb4>)
 801bd7e:	429c      	cmp	r4, r3
 801bd80:	bf08      	it	eq
 801bd82:	68ec      	ldreq	r4, [r5, #12]
 801bd84:	e7de      	b.n	801bd44 <_puts_r+0x24>
 801bd86:	4621      	mov	r1, r4
 801bd88:	4628      	mov	r0, r5
 801bd8a:	f000 f9d1 	bl	801c130 <__swsetup_r>
 801bd8e:	2800      	cmp	r0, #0
 801bd90:	d0dd      	beq.n	801bd4e <_puts_r+0x2e>
 801bd92:	f04f 30ff 	mov.w	r0, #4294967295
 801bd96:	bd70      	pop	{r4, r5, r6, pc}
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	da04      	bge.n	801bda6 <_puts_r+0x86>
 801bd9c:	69a2      	ldr	r2, [r4, #24]
 801bd9e:	429a      	cmp	r2, r3
 801bda0:	dc06      	bgt.n	801bdb0 <_puts_r+0x90>
 801bda2:	290a      	cmp	r1, #10
 801bda4:	d004      	beq.n	801bdb0 <_puts_r+0x90>
 801bda6:	6823      	ldr	r3, [r4, #0]
 801bda8:	1c5a      	adds	r2, r3, #1
 801bdaa:	6022      	str	r2, [r4, #0]
 801bdac:	7019      	strb	r1, [r3, #0]
 801bdae:	e7cf      	b.n	801bd50 <_puts_r+0x30>
 801bdb0:	4622      	mov	r2, r4
 801bdb2:	4628      	mov	r0, r5
 801bdb4:	f000 f96a 	bl	801c08c <__swbuf_r>
 801bdb8:	3001      	adds	r0, #1
 801bdba:	d1c9      	bne.n	801bd50 <_puts_r+0x30>
 801bdbc:	e7e9      	b.n	801bd92 <_puts_r+0x72>
 801bdbe:	6823      	ldr	r3, [r4, #0]
 801bdc0:	200a      	movs	r0, #10
 801bdc2:	1c5a      	adds	r2, r3, #1
 801bdc4:	6022      	str	r2, [r4, #0]
 801bdc6:	7018      	strb	r0, [r3, #0]
 801bdc8:	e7e5      	b.n	801bd96 <_puts_r+0x76>
 801bdca:	bf00      	nop
 801bdcc:	0801ef28 	.word	0x0801ef28
 801bdd0:	0801ef48 	.word	0x0801ef48
 801bdd4:	0801ef08 	.word	0x0801ef08

0801bdd8 <puts>:
 801bdd8:	4b02      	ldr	r3, [pc, #8]	; (801bde4 <puts+0xc>)
 801bdda:	4601      	mov	r1, r0
 801bddc:	6818      	ldr	r0, [r3, #0]
 801bdde:	f7ff bf9f 	b.w	801bd20 <_puts_r>
 801bde2:	bf00      	nop
 801bde4:	2400017c 	.word	0x2400017c

0801bde8 <_sbrk_r>:
 801bde8:	b538      	push	{r3, r4, r5, lr}
 801bdea:	4c06      	ldr	r4, [pc, #24]	; (801be04 <_sbrk_r+0x1c>)
 801bdec:	2300      	movs	r3, #0
 801bdee:	4605      	mov	r5, r0
 801bdf0:	4608      	mov	r0, r1
 801bdf2:	6023      	str	r3, [r4, #0]
 801bdf4:	f7e9 fbd2 	bl	800559c <_sbrk>
 801bdf8:	1c43      	adds	r3, r0, #1
 801bdfa:	d102      	bne.n	801be02 <_sbrk_r+0x1a>
 801bdfc:	6823      	ldr	r3, [r4, #0]
 801bdfe:	b103      	cbz	r3, 801be02 <_sbrk_r+0x1a>
 801be00:	602b      	str	r3, [r5, #0]
 801be02:	bd38      	pop	{r3, r4, r5, pc}
 801be04:	240060e0 	.word	0x240060e0

0801be08 <sniprintf>:
 801be08:	b40c      	push	{r2, r3}
 801be0a:	b530      	push	{r4, r5, lr}
 801be0c:	4b17      	ldr	r3, [pc, #92]	; (801be6c <sniprintf+0x64>)
 801be0e:	1e0c      	subs	r4, r1, #0
 801be10:	b09d      	sub	sp, #116	; 0x74
 801be12:	681d      	ldr	r5, [r3, #0]
 801be14:	da08      	bge.n	801be28 <sniprintf+0x20>
 801be16:	238b      	movs	r3, #139	; 0x8b
 801be18:	602b      	str	r3, [r5, #0]
 801be1a:	f04f 30ff 	mov.w	r0, #4294967295
 801be1e:	b01d      	add	sp, #116	; 0x74
 801be20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801be24:	b002      	add	sp, #8
 801be26:	4770      	bx	lr
 801be28:	f44f 7302 	mov.w	r3, #520	; 0x208
 801be2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801be30:	bf14      	ite	ne
 801be32:	f104 33ff 	addne.w	r3, r4, #4294967295
 801be36:	4623      	moveq	r3, r4
 801be38:	9304      	str	r3, [sp, #16]
 801be3a:	9307      	str	r3, [sp, #28]
 801be3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801be40:	9002      	str	r0, [sp, #8]
 801be42:	9006      	str	r0, [sp, #24]
 801be44:	f8ad 3016 	strh.w	r3, [sp, #22]
 801be48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801be4a:	ab21      	add	r3, sp, #132	; 0x84
 801be4c:	a902      	add	r1, sp, #8
 801be4e:	4628      	mov	r0, r5
 801be50:	9301      	str	r3, [sp, #4]
 801be52:	f001 fcfd 	bl	801d850 <_svfiprintf_r>
 801be56:	1c43      	adds	r3, r0, #1
 801be58:	bfbc      	itt	lt
 801be5a:	238b      	movlt	r3, #139	; 0x8b
 801be5c:	602b      	strlt	r3, [r5, #0]
 801be5e:	2c00      	cmp	r4, #0
 801be60:	d0dd      	beq.n	801be1e <sniprintf+0x16>
 801be62:	9b02      	ldr	r3, [sp, #8]
 801be64:	2200      	movs	r2, #0
 801be66:	701a      	strb	r2, [r3, #0]
 801be68:	e7d9      	b.n	801be1e <sniprintf+0x16>
 801be6a:	bf00      	nop
 801be6c:	2400017c 	.word	0x2400017c

0801be70 <siprintf>:
 801be70:	b40e      	push	{r1, r2, r3}
 801be72:	b500      	push	{lr}
 801be74:	b09c      	sub	sp, #112	; 0x70
 801be76:	ab1d      	add	r3, sp, #116	; 0x74
 801be78:	9002      	str	r0, [sp, #8]
 801be7a:	9006      	str	r0, [sp, #24]
 801be7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801be80:	4809      	ldr	r0, [pc, #36]	; (801bea8 <siprintf+0x38>)
 801be82:	9107      	str	r1, [sp, #28]
 801be84:	9104      	str	r1, [sp, #16]
 801be86:	4909      	ldr	r1, [pc, #36]	; (801beac <siprintf+0x3c>)
 801be88:	f853 2b04 	ldr.w	r2, [r3], #4
 801be8c:	9105      	str	r1, [sp, #20]
 801be8e:	6800      	ldr	r0, [r0, #0]
 801be90:	9301      	str	r3, [sp, #4]
 801be92:	a902      	add	r1, sp, #8
 801be94:	f001 fcdc 	bl	801d850 <_svfiprintf_r>
 801be98:	9b02      	ldr	r3, [sp, #8]
 801be9a:	2200      	movs	r2, #0
 801be9c:	701a      	strb	r2, [r3, #0]
 801be9e:	b01c      	add	sp, #112	; 0x70
 801bea0:	f85d eb04 	ldr.w	lr, [sp], #4
 801bea4:	b003      	add	sp, #12
 801bea6:	4770      	bx	lr
 801bea8:	2400017c 	.word	0x2400017c
 801beac:	ffff0208 	.word	0xffff0208

0801beb0 <strcpy>:
 801beb0:	4603      	mov	r3, r0
 801beb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801beb6:	f803 2b01 	strb.w	r2, [r3], #1
 801beba:	2a00      	cmp	r2, #0
 801bebc:	d1f9      	bne.n	801beb2 <strcpy+0x2>
 801bebe:	4770      	bx	lr

0801bec0 <strtok>:
 801bec0:	4b13      	ldr	r3, [pc, #76]	; (801bf10 <strtok+0x50>)
 801bec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bec6:	681d      	ldr	r5, [r3, #0]
 801bec8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 801beca:	4606      	mov	r6, r0
 801becc:	460f      	mov	r7, r1
 801bece:	b9b4      	cbnz	r4, 801befe <strtok+0x3e>
 801bed0:	2050      	movs	r0, #80	; 0x50
 801bed2:	f7ff fa05 	bl	801b2e0 <malloc>
 801bed6:	65a8      	str	r0, [r5, #88]	; 0x58
 801bed8:	e9c0 4400 	strd	r4, r4, [r0]
 801bedc:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801bee0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801bee4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801bee8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801beec:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801bef0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801bef4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801bef8:	6184      	str	r4, [r0, #24]
 801befa:	7704      	strb	r4, [r0, #28]
 801befc:	6244      	str	r4, [r0, #36]	; 0x24
 801befe:	6daa      	ldr	r2, [r5, #88]	; 0x58
 801bf00:	4639      	mov	r1, r7
 801bf02:	4630      	mov	r0, r6
 801bf04:	2301      	movs	r3, #1
 801bf06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bf0a:	f000 b803 	b.w	801bf14 <__strtok_r>
 801bf0e:	bf00      	nop
 801bf10:	2400017c 	.word	0x2400017c

0801bf14 <__strtok_r>:
 801bf14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf16:	b918      	cbnz	r0, 801bf20 <__strtok_r+0xc>
 801bf18:	6810      	ldr	r0, [r2, #0]
 801bf1a:	b908      	cbnz	r0, 801bf20 <__strtok_r+0xc>
 801bf1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf1e:	4620      	mov	r0, r4
 801bf20:	4604      	mov	r4, r0
 801bf22:	460f      	mov	r7, r1
 801bf24:	f814 5b01 	ldrb.w	r5, [r4], #1
 801bf28:	f817 6b01 	ldrb.w	r6, [r7], #1
 801bf2c:	b91e      	cbnz	r6, 801bf36 <__strtok_r+0x22>
 801bf2e:	b96d      	cbnz	r5, 801bf4c <__strtok_r+0x38>
 801bf30:	6015      	str	r5, [r2, #0]
 801bf32:	4628      	mov	r0, r5
 801bf34:	e7f2      	b.n	801bf1c <__strtok_r+0x8>
 801bf36:	42b5      	cmp	r5, r6
 801bf38:	d1f6      	bne.n	801bf28 <__strtok_r+0x14>
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d1ef      	bne.n	801bf1e <__strtok_r+0xa>
 801bf3e:	6014      	str	r4, [r2, #0]
 801bf40:	7003      	strb	r3, [r0, #0]
 801bf42:	e7eb      	b.n	801bf1c <__strtok_r+0x8>
 801bf44:	462b      	mov	r3, r5
 801bf46:	e00d      	b.n	801bf64 <__strtok_r+0x50>
 801bf48:	b926      	cbnz	r6, 801bf54 <__strtok_r+0x40>
 801bf4a:	461c      	mov	r4, r3
 801bf4c:	4623      	mov	r3, r4
 801bf4e:	460f      	mov	r7, r1
 801bf50:	f813 5b01 	ldrb.w	r5, [r3], #1
 801bf54:	f817 6b01 	ldrb.w	r6, [r7], #1
 801bf58:	42b5      	cmp	r5, r6
 801bf5a:	d1f5      	bne.n	801bf48 <__strtok_r+0x34>
 801bf5c:	2d00      	cmp	r5, #0
 801bf5e:	d0f1      	beq.n	801bf44 <__strtok_r+0x30>
 801bf60:	2100      	movs	r1, #0
 801bf62:	7021      	strb	r1, [r4, #0]
 801bf64:	6013      	str	r3, [r2, #0]
 801bf66:	e7d9      	b.n	801bf1c <__strtok_r+0x8>

0801bf68 <_strtol_l.isra.0>:
 801bf68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf6c:	4680      	mov	r8, r0
 801bf6e:	4689      	mov	r9, r1
 801bf70:	4692      	mov	sl, r2
 801bf72:	461e      	mov	r6, r3
 801bf74:	460f      	mov	r7, r1
 801bf76:	463d      	mov	r5, r7
 801bf78:	9808      	ldr	r0, [sp, #32]
 801bf7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bf7e:	f001 f899 	bl	801d0b4 <__locale_ctype_ptr_l>
 801bf82:	4420      	add	r0, r4
 801bf84:	7843      	ldrb	r3, [r0, #1]
 801bf86:	f013 0308 	ands.w	r3, r3, #8
 801bf8a:	d132      	bne.n	801bff2 <_strtol_l.isra.0+0x8a>
 801bf8c:	2c2d      	cmp	r4, #45	; 0x2d
 801bf8e:	d132      	bne.n	801bff6 <_strtol_l.isra.0+0x8e>
 801bf90:	787c      	ldrb	r4, [r7, #1]
 801bf92:	1cbd      	adds	r5, r7, #2
 801bf94:	2201      	movs	r2, #1
 801bf96:	2e00      	cmp	r6, #0
 801bf98:	d05d      	beq.n	801c056 <_strtol_l.isra.0+0xee>
 801bf9a:	2e10      	cmp	r6, #16
 801bf9c:	d109      	bne.n	801bfb2 <_strtol_l.isra.0+0x4a>
 801bf9e:	2c30      	cmp	r4, #48	; 0x30
 801bfa0:	d107      	bne.n	801bfb2 <_strtol_l.isra.0+0x4a>
 801bfa2:	782b      	ldrb	r3, [r5, #0]
 801bfa4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bfa8:	2b58      	cmp	r3, #88	; 0x58
 801bfaa:	d14f      	bne.n	801c04c <_strtol_l.isra.0+0xe4>
 801bfac:	786c      	ldrb	r4, [r5, #1]
 801bfae:	2610      	movs	r6, #16
 801bfb0:	3502      	adds	r5, #2
 801bfb2:	2a00      	cmp	r2, #0
 801bfb4:	bf14      	ite	ne
 801bfb6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801bfba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801bfbe:	2700      	movs	r7, #0
 801bfc0:	fbb1 fcf6 	udiv	ip, r1, r6
 801bfc4:	4638      	mov	r0, r7
 801bfc6:	fb06 1e1c 	mls	lr, r6, ip, r1
 801bfca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801bfce:	2b09      	cmp	r3, #9
 801bfd0:	d817      	bhi.n	801c002 <_strtol_l.isra.0+0x9a>
 801bfd2:	461c      	mov	r4, r3
 801bfd4:	42a6      	cmp	r6, r4
 801bfd6:	dd23      	ble.n	801c020 <_strtol_l.isra.0+0xb8>
 801bfd8:	1c7b      	adds	r3, r7, #1
 801bfda:	d007      	beq.n	801bfec <_strtol_l.isra.0+0x84>
 801bfdc:	4584      	cmp	ip, r0
 801bfde:	d31c      	bcc.n	801c01a <_strtol_l.isra.0+0xb2>
 801bfe0:	d101      	bne.n	801bfe6 <_strtol_l.isra.0+0x7e>
 801bfe2:	45a6      	cmp	lr, r4
 801bfe4:	db19      	blt.n	801c01a <_strtol_l.isra.0+0xb2>
 801bfe6:	fb00 4006 	mla	r0, r0, r6, r4
 801bfea:	2701      	movs	r7, #1
 801bfec:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bff0:	e7eb      	b.n	801bfca <_strtol_l.isra.0+0x62>
 801bff2:	462f      	mov	r7, r5
 801bff4:	e7bf      	b.n	801bf76 <_strtol_l.isra.0+0xe>
 801bff6:	2c2b      	cmp	r4, #43	; 0x2b
 801bff8:	bf04      	itt	eq
 801bffa:	1cbd      	addeq	r5, r7, #2
 801bffc:	787c      	ldrbeq	r4, [r7, #1]
 801bffe:	461a      	mov	r2, r3
 801c000:	e7c9      	b.n	801bf96 <_strtol_l.isra.0+0x2e>
 801c002:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801c006:	2b19      	cmp	r3, #25
 801c008:	d801      	bhi.n	801c00e <_strtol_l.isra.0+0xa6>
 801c00a:	3c37      	subs	r4, #55	; 0x37
 801c00c:	e7e2      	b.n	801bfd4 <_strtol_l.isra.0+0x6c>
 801c00e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801c012:	2b19      	cmp	r3, #25
 801c014:	d804      	bhi.n	801c020 <_strtol_l.isra.0+0xb8>
 801c016:	3c57      	subs	r4, #87	; 0x57
 801c018:	e7dc      	b.n	801bfd4 <_strtol_l.isra.0+0x6c>
 801c01a:	f04f 37ff 	mov.w	r7, #4294967295
 801c01e:	e7e5      	b.n	801bfec <_strtol_l.isra.0+0x84>
 801c020:	1c7b      	adds	r3, r7, #1
 801c022:	d108      	bne.n	801c036 <_strtol_l.isra.0+0xce>
 801c024:	2322      	movs	r3, #34	; 0x22
 801c026:	f8c8 3000 	str.w	r3, [r8]
 801c02a:	4608      	mov	r0, r1
 801c02c:	f1ba 0f00 	cmp.w	sl, #0
 801c030:	d107      	bne.n	801c042 <_strtol_l.isra.0+0xda>
 801c032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c036:	b102      	cbz	r2, 801c03a <_strtol_l.isra.0+0xd2>
 801c038:	4240      	negs	r0, r0
 801c03a:	f1ba 0f00 	cmp.w	sl, #0
 801c03e:	d0f8      	beq.n	801c032 <_strtol_l.isra.0+0xca>
 801c040:	b10f      	cbz	r7, 801c046 <_strtol_l.isra.0+0xde>
 801c042:	f105 39ff 	add.w	r9, r5, #4294967295
 801c046:	f8ca 9000 	str.w	r9, [sl]
 801c04a:	e7f2      	b.n	801c032 <_strtol_l.isra.0+0xca>
 801c04c:	2430      	movs	r4, #48	; 0x30
 801c04e:	2e00      	cmp	r6, #0
 801c050:	d1af      	bne.n	801bfb2 <_strtol_l.isra.0+0x4a>
 801c052:	2608      	movs	r6, #8
 801c054:	e7ad      	b.n	801bfb2 <_strtol_l.isra.0+0x4a>
 801c056:	2c30      	cmp	r4, #48	; 0x30
 801c058:	d0a3      	beq.n	801bfa2 <_strtol_l.isra.0+0x3a>
 801c05a:	260a      	movs	r6, #10
 801c05c:	e7a9      	b.n	801bfb2 <_strtol_l.isra.0+0x4a>
	...

0801c060 <strtol>:
 801c060:	4b08      	ldr	r3, [pc, #32]	; (801c084 <strtol+0x24>)
 801c062:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c064:	681c      	ldr	r4, [r3, #0]
 801c066:	4d08      	ldr	r5, [pc, #32]	; (801c088 <strtol+0x28>)
 801c068:	6a23      	ldr	r3, [r4, #32]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	bf08      	it	eq
 801c06e:	462b      	moveq	r3, r5
 801c070:	9300      	str	r3, [sp, #0]
 801c072:	4613      	mov	r3, r2
 801c074:	460a      	mov	r2, r1
 801c076:	4601      	mov	r1, r0
 801c078:	4620      	mov	r0, r4
 801c07a:	f7ff ff75 	bl	801bf68 <_strtol_l.isra.0>
 801c07e:	b003      	add	sp, #12
 801c080:	bd30      	pop	{r4, r5, pc}
 801c082:	bf00      	nop
 801c084:	2400017c 	.word	0x2400017c
 801c088:	240001e0 	.word	0x240001e0

0801c08c <__swbuf_r>:
 801c08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c08e:	460e      	mov	r6, r1
 801c090:	4614      	mov	r4, r2
 801c092:	4605      	mov	r5, r0
 801c094:	b118      	cbz	r0, 801c09e <__swbuf_r+0x12>
 801c096:	6983      	ldr	r3, [r0, #24]
 801c098:	b90b      	cbnz	r3, 801c09e <__swbuf_r+0x12>
 801c09a:	f000 ff81 	bl	801cfa0 <__sinit>
 801c09e:	4b21      	ldr	r3, [pc, #132]	; (801c124 <__swbuf_r+0x98>)
 801c0a0:	429c      	cmp	r4, r3
 801c0a2:	d12a      	bne.n	801c0fa <__swbuf_r+0x6e>
 801c0a4:	686c      	ldr	r4, [r5, #4]
 801c0a6:	69a3      	ldr	r3, [r4, #24]
 801c0a8:	60a3      	str	r3, [r4, #8]
 801c0aa:	89a3      	ldrh	r3, [r4, #12]
 801c0ac:	071a      	lsls	r2, r3, #28
 801c0ae:	d52e      	bpl.n	801c10e <__swbuf_r+0x82>
 801c0b0:	6923      	ldr	r3, [r4, #16]
 801c0b2:	b363      	cbz	r3, 801c10e <__swbuf_r+0x82>
 801c0b4:	6923      	ldr	r3, [r4, #16]
 801c0b6:	6820      	ldr	r0, [r4, #0]
 801c0b8:	1ac0      	subs	r0, r0, r3
 801c0ba:	6963      	ldr	r3, [r4, #20]
 801c0bc:	b2f6      	uxtb	r6, r6
 801c0be:	4283      	cmp	r3, r0
 801c0c0:	4637      	mov	r7, r6
 801c0c2:	dc04      	bgt.n	801c0ce <__swbuf_r+0x42>
 801c0c4:	4621      	mov	r1, r4
 801c0c6:	4628      	mov	r0, r5
 801c0c8:	f000 ff00 	bl	801cecc <_fflush_r>
 801c0cc:	bb28      	cbnz	r0, 801c11a <__swbuf_r+0x8e>
 801c0ce:	68a3      	ldr	r3, [r4, #8]
 801c0d0:	3b01      	subs	r3, #1
 801c0d2:	60a3      	str	r3, [r4, #8]
 801c0d4:	6823      	ldr	r3, [r4, #0]
 801c0d6:	1c5a      	adds	r2, r3, #1
 801c0d8:	6022      	str	r2, [r4, #0]
 801c0da:	701e      	strb	r6, [r3, #0]
 801c0dc:	6963      	ldr	r3, [r4, #20]
 801c0de:	3001      	adds	r0, #1
 801c0e0:	4283      	cmp	r3, r0
 801c0e2:	d004      	beq.n	801c0ee <__swbuf_r+0x62>
 801c0e4:	89a3      	ldrh	r3, [r4, #12]
 801c0e6:	07db      	lsls	r3, r3, #31
 801c0e8:	d519      	bpl.n	801c11e <__swbuf_r+0x92>
 801c0ea:	2e0a      	cmp	r6, #10
 801c0ec:	d117      	bne.n	801c11e <__swbuf_r+0x92>
 801c0ee:	4621      	mov	r1, r4
 801c0f0:	4628      	mov	r0, r5
 801c0f2:	f000 feeb 	bl	801cecc <_fflush_r>
 801c0f6:	b190      	cbz	r0, 801c11e <__swbuf_r+0x92>
 801c0f8:	e00f      	b.n	801c11a <__swbuf_r+0x8e>
 801c0fa:	4b0b      	ldr	r3, [pc, #44]	; (801c128 <__swbuf_r+0x9c>)
 801c0fc:	429c      	cmp	r4, r3
 801c0fe:	d101      	bne.n	801c104 <__swbuf_r+0x78>
 801c100:	68ac      	ldr	r4, [r5, #8]
 801c102:	e7d0      	b.n	801c0a6 <__swbuf_r+0x1a>
 801c104:	4b09      	ldr	r3, [pc, #36]	; (801c12c <__swbuf_r+0xa0>)
 801c106:	429c      	cmp	r4, r3
 801c108:	bf08      	it	eq
 801c10a:	68ec      	ldreq	r4, [r5, #12]
 801c10c:	e7cb      	b.n	801c0a6 <__swbuf_r+0x1a>
 801c10e:	4621      	mov	r1, r4
 801c110:	4628      	mov	r0, r5
 801c112:	f000 f80d 	bl	801c130 <__swsetup_r>
 801c116:	2800      	cmp	r0, #0
 801c118:	d0cc      	beq.n	801c0b4 <__swbuf_r+0x28>
 801c11a:	f04f 37ff 	mov.w	r7, #4294967295
 801c11e:	4638      	mov	r0, r7
 801c120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c122:	bf00      	nop
 801c124:	0801ef28 	.word	0x0801ef28
 801c128:	0801ef48 	.word	0x0801ef48
 801c12c:	0801ef08 	.word	0x0801ef08

0801c130 <__swsetup_r>:
 801c130:	4b32      	ldr	r3, [pc, #200]	; (801c1fc <__swsetup_r+0xcc>)
 801c132:	b570      	push	{r4, r5, r6, lr}
 801c134:	681d      	ldr	r5, [r3, #0]
 801c136:	4606      	mov	r6, r0
 801c138:	460c      	mov	r4, r1
 801c13a:	b125      	cbz	r5, 801c146 <__swsetup_r+0x16>
 801c13c:	69ab      	ldr	r3, [r5, #24]
 801c13e:	b913      	cbnz	r3, 801c146 <__swsetup_r+0x16>
 801c140:	4628      	mov	r0, r5
 801c142:	f000 ff2d 	bl	801cfa0 <__sinit>
 801c146:	4b2e      	ldr	r3, [pc, #184]	; (801c200 <__swsetup_r+0xd0>)
 801c148:	429c      	cmp	r4, r3
 801c14a:	d10f      	bne.n	801c16c <__swsetup_r+0x3c>
 801c14c:	686c      	ldr	r4, [r5, #4]
 801c14e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c152:	b29a      	uxth	r2, r3
 801c154:	0715      	lsls	r5, r2, #28
 801c156:	d42c      	bmi.n	801c1b2 <__swsetup_r+0x82>
 801c158:	06d0      	lsls	r0, r2, #27
 801c15a:	d411      	bmi.n	801c180 <__swsetup_r+0x50>
 801c15c:	2209      	movs	r2, #9
 801c15e:	6032      	str	r2, [r6, #0]
 801c160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c164:	81a3      	strh	r3, [r4, #12]
 801c166:	f04f 30ff 	mov.w	r0, #4294967295
 801c16a:	e03e      	b.n	801c1ea <__swsetup_r+0xba>
 801c16c:	4b25      	ldr	r3, [pc, #148]	; (801c204 <__swsetup_r+0xd4>)
 801c16e:	429c      	cmp	r4, r3
 801c170:	d101      	bne.n	801c176 <__swsetup_r+0x46>
 801c172:	68ac      	ldr	r4, [r5, #8]
 801c174:	e7eb      	b.n	801c14e <__swsetup_r+0x1e>
 801c176:	4b24      	ldr	r3, [pc, #144]	; (801c208 <__swsetup_r+0xd8>)
 801c178:	429c      	cmp	r4, r3
 801c17a:	bf08      	it	eq
 801c17c:	68ec      	ldreq	r4, [r5, #12]
 801c17e:	e7e6      	b.n	801c14e <__swsetup_r+0x1e>
 801c180:	0751      	lsls	r1, r2, #29
 801c182:	d512      	bpl.n	801c1aa <__swsetup_r+0x7a>
 801c184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c186:	b141      	cbz	r1, 801c19a <__swsetup_r+0x6a>
 801c188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c18c:	4299      	cmp	r1, r3
 801c18e:	d002      	beq.n	801c196 <__swsetup_r+0x66>
 801c190:	4630      	mov	r0, r6
 801c192:	f7ff f8c9 	bl	801b328 <_free_r>
 801c196:	2300      	movs	r3, #0
 801c198:	6363      	str	r3, [r4, #52]	; 0x34
 801c19a:	89a3      	ldrh	r3, [r4, #12]
 801c19c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c1a0:	81a3      	strh	r3, [r4, #12]
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	6063      	str	r3, [r4, #4]
 801c1a6:	6923      	ldr	r3, [r4, #16]
 801c1a8:	6023      	str	r3, [r4, #0]
 801c1aa:	89a3      	ldrh	r3, [r4, #12]
 801c1ac:	f043 0308 	orr.w	r3, r3, #8
 801c1b0:	81a3      	strh	r3, [r4, #12]
 801c1b2:	6923      	ldr	r3, [r4, #16]
 801c1b4:	b94b      	cbnz	r3, 801c1ca <__swsetup_r+0x9a>
 801c1b6:	89a3      	ldrh	r3, [r4, #12]
 801c1b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c1bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c1c0:	d003      	beq.n	801c1ca <__swsetup_r+0x9a>
 801c1c2:	4621      	mov	r1, r4
 801c1c4:	4630      	mov	r0, r6
 801c1c6:	f000 ffab 	bl	801d120 <__smakebuf_r>
 801c1ca:	89a2      	ldrh	r2, [r4, #12]
 801c1cc:	f012 0301 	ands.w	r3, r2, #1
 801c1d0:	d00c      	beq.n	801c1ec <__swsetup_r+0xbc>
 801c1d2:	2300      	movs	r3, #0
 801c1d4:	60a3      	str	r3, [r4, #8]
 801c1d6:	6963      	ldr	r3, [r4, #20]
 801c1d8:	425b      	negs	r3, r3
 801c1da:	61a3      	str	r3, [r4, #24]
 801c1dc:	6923      	ldr	r3, [r4, #16]
 801c1de:	b953      	cbnz	r3, 801c1f6 <__swsetup_r+0xc6>
 801c1e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801c1e8:	d1ba      	bne.n	801c160 <__swsetup_r+0x30>
 801c1ea:	bd70      	pop	{r4, r5, r6, pc}
 801c1ec:	0792      	lsls	r2, r2, #30
 801c1ee:	bf58      	it	pl
 801c1f0:	6963      	ldrpl	r3, [r4, #20]
 801c1f2:	60a3      	str	r3, [r4, #8]
 801c1f4:	e7f2      	b.n	801c1dc <__swsetup_r+0xac>
 801c1f6:	2000      	movs	r0, #0
 801c1f8:	e7f7      	b.n	801c1ea <__swsetup_r+0xba>
 801c1fa:	bf00      	nop
 801c1fc:	2400017c 	.word	0x2400017c
 801c200:	0801ef28 	.word	0x0801ef28
 801c204:	0801ef48 	.word	0x0801ef48
 801c208:	0801ef08 	.word	0x0801ef08

0801c20c <quorem>:
 801c20c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c210:	6903      	ldr	r3, [r0, #16]
 801c212:	690c      	ldr	r4, [r1, #16]
 801c214:	42a3      	cmp	r3, r4
 801c216:	4680      	mov	r8, r0
 801c218:	f2c0 8082 	blt.w	801c320 <quorem+0x114>
 801c21c:	3c01      	subs	r4, #1
 801c21e:	f101 0714 	add.w	r7, r1, #20
 801c222:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801c226:	f100 0614 	add.w	r6, r0, #20
 801c22a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801c22e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801c232:	eb06 030c 	add.w	r3, r6, ip
 801c236:	3501      	adds	r5, #1
 801c238:	eb07 090c 	add.w	r9, r7, ip
 801c23c:	9301      	str	r3, [sp, #4]
 801c23e:	fbb0 f5f5 	udiv	r5, r0, r5
 801c242:	b395      	cbz	r5, 801c2aa <quorem+0x9e>
 801c244:	f04f 0a00 	mov.w	sl, #0
 801c248:	4638      	mov	r0, r7
 801c24a:	46b6      	mov	lr, r6
 801c24c:	46d3      	mov	fp, sl
 801c24e:	f850 2b04 	ldr.w	r2, [r0], #4
 801c252:	b293      	uxth	r3, r2
 801c254:	fb05 a303 	mla	r3, r5, r3, sl
 801c258:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c25c:	b29b      	uxth	r3, r3
 801c25e:	ebab 0303 	sub.w	r3, fp, r3
 801c262:	0c12      	lsrs	r2, r2, #16
 801c264:	f8de b000 	ldr.w	fp, [lr]
 801c268:	fb05 a202 	mla	r2, r5, r2, sl
 801c26c:	fa13 f38b 	uxtah	r3, r3, fp
 801c270:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801c274:	fa1f fb82 	uxth.w	fp, r2
 801c278:	f8de 2000 	ldr.w	r2, [lr]
 801c27c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801c280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c284:	b29b      	uxth	r3, r3
 801c286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c28a:	4581      	cmp	r9, r0
 801c28c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801c290:	f84e 3b04 	str.w	r3, [lr], #4
 801c294:	d2db      	bcs.n	801c24e <quorem+0x42>
 801c296:	f856 300c 	ldr.w	r3, [r6, ip]
 801c29a:	b933      	cbnz	r3, 801c2aa <quorem+0x9e>
 801c29c:	9b01      	ldr	r3, [sp, #4]
 801c29e:	3b04      	subs	r3, #4
 801c2a0:	429e      	cmp	r6, r3
 801c2a2:	461a      	mov	r2, r3
 801c2a4:	d330      	bcc.n	801c308 <quorem+0xfc>
 801c2a6:	f8c8 4010 	str.w	r4, [r8, #16]
 801c2aa:	4640      	mov	r0, r8
 801c2ac:	f001 f9a2 	bl	801d5f4 <__mcmp>
 801c2b0:	2800      	cmp	r0, #0
 801c2b2:	db25      	blt.n	801c300 <quorem+0xf4>
 801c2b4:	3501      	adds	r5, #1
 801c2b6:	4630      	mov	r0, r6
 801c2b8:	f04f 0c00 	mov.w	ip, #0
 801c2bc:	f857 2b04 	ldr.w	r2, [r7], #4
 801c2c0:	f8d0 e000 	ldr.w	lr, [r0]
 801c2c4:	b293      	uxth	r3, r2
 801c2c6:	ebac 0303 	sub.w	r3, ip, r3
 801c2ca:	0c12      	lsrs	r2, r2, #16
 801c2cc:	fa13 f38e 	uxtah	r3, r3, lr
 801c2d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c2d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c2d8:	b29b      	uxth	r3, r3
 801c2da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c2de:	45b9      	cmp	r9, r7
 801c2e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c2e4:	f840 3b04 	str.w	r3, [r0], #4
 801c2e8:	d2e8      	bcs.n	801c2bc <quorem+0xb0>
 801c2ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801c2ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801c2f2:	b92a      	cbnz	r2, 801c300 <quorem+0xf4>
 801c2f4:	3b04      	subs	r3, #4
 801c2f6:	429e      	cmp	r6, r3
 801c2f8:	461a      	mov	r2, r3
 801c2fa:	d30b      	bcc.n	801c314 <quorem+0x108>
 801c2fc:	f8c8 4010 	str.w	r4, [r8, #16]
 801c300:	4628      	mov	r0, r5
 801c302:	b003      	add	sp, #12
 801c304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c308:	6812      	ldr	r2, [r2, #0]
 801c30a:	3b04      	subs	r3, #4
 801c30c:	2a00      	cmp	r2, #0
 801c30e:	d1ca      	bne.n	801c2a6 <quorem+0x9a>
 801c310:	3c01      	subs	r4, #1
 801c312:	e7c5      	b.n	801c2a0 <quorem+0x94>
 801c314:	6812      	ldr	r2, [r2, #0]
 801c316:	3b04      	subs	r3, #4
 801c318:	2a00      	cmp	r2, #0
 801c31a:	d1ef      	bne.n	801c2fc <quorem+0xf0>
 801c31c:	3c01      	subs	r4, #1
 801c31e:	e7ea      	b.n	801c2f6 <quorem+0xea>
 801c320:	2000      	movs	r0, #0
 801c322:	e7ee      	b.n	801c302 <quorem+0xf6>
 801c324:	0000      	movs	r0, r0
	...

0801c328 <_dtoa_r>:
 801c328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c32c:	ec57 6b10 	vmov	r6, r7, d0
 801c330:	b095      	sub	sp, #84	; 0x54
 801c332:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c334:	9108      	str	r1, [sp, #32]
 801c336:	4604      	mov	r4, r0
 801c338:	920a      	str	r2, [sp, #40]	; 0x28
 801c33a:	9311      	str	r3, [sp, #68]	; 0x44
 801c33c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801c340:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801c344:	b93d      	cbnz	r5, 801c356 <_dtoa_r+0x2e>
 801c346:	2010      	movs	r0, #16
 801c348:	f7fe ffca 	bl	801b2e0 <malloc>
 801c34c:	6260      	str	r0, [r4, #36]	; 0x24
 801c34e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c352:	6005      	str	r5, [r0, #0]
 801c354:	60c5      	str	r5, [r0, #12]
 801c356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c358:	6819      	ldr	r1, [r3, #0]
 801c35a:	b151      	cbz	r1, 801c372 <_dtoa_r+0x4a>
 801c35c:	685a      	ldr	r2, [r3, #4]
 801c35e:	604a      	str	r2, [r1, #4]
 801c360:	2301      	movs	r3, #1
 801c362:	4093      	lsls	r3, r2
 801c364:	608b      	str	r3, [r1, #8]
 801c366:	4620      	mov	r0, r4
 801c368:	f000 ff62 	bl	801d230 <_Bfree>
 801c36c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c36e:	2200      	movs	r2, #0
 801c370:	601a      	str	r2, [r3, #0]
 801c372:	1e3b      	subs	r3, r7, #0
 801c374:	bfb9      	ittee	lt
 801c376:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c37a:	9303      	strlt	r3, [sp, #12]
 801c37c:	2300      	movge	r3, #0
 801c37e:	f8c8 3000 	strge.w	r3, [r8]
 801c382:	9d03      	ldr	r5, [sp, #12]
 801c384:	4bac      	ldr	r3, [pc, #688]	; (801c638 <_dtoa_r+0x310>)
 801c386:	bfbc      	itt	lt
 801c388:	2201      	movlt	r2, #1
 801c38a:	f8c8 2000 	strlt.w	r2, [r8]
 801c38e:	43ab      	bics	r3, r5
 801c390:	d11b      	bne.n	801c3ca <_dtoa_r+0xa2>
 801c392:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c394:	f242 730f 	movw	r3, #9999	; 0x270f
 801c398:	6013      	str	r3, [r2, #0]
 801c39a:	9b02      	ldr	r3, [sp, #8]
 801c39c:	b923      	cbnz	r3, 801c3a8 <_dtoa_r+0x80>
 801c39e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801c3a2:	2d00      	cmp	r5, #0
 801c3a4:	f000 84dd 	beq.w	801cd62 <_dtoa_r+0xa3a>
 801c3a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c3aa:	b953      	cbnz	r3, 801c3c2 <_dtoa_r+0x9a>
 801c3ac:	4ba3      	ldr	r3, [pc, #652]	; (801c63c <_dtoa_r+0x314>)
 801c3ae:	e020      	b.n	801c3f2 <_dtoa_r+0xca>
 801c3b0:	4ba3      	ldr	r3, [pc, #652]	; (801c640 <_dtoa_r+0x318>)
 801c3b2:	9304      	str	r3, [sp, #16]
 801c3b4:	3308      	adds	r3, #8
 801c3b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c3b8:	6013      	str	r3, [r2, #0]
 801c3ba:	9804      	ldr	r0, [sp, #16]
 801c3bc:	b015      	add	sp, #84	; 0x54
 801c3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3c2:	4b9e      	ldr	r3, [pc, #632]	; (801c63c <_dtoa_r+0x314>)
 801c3c4:	9304      	str	r3, [sp, #16]
 801c3c6:	3303      	adds	r3, #3
 801c3c8:	e7f5      	b.n	801c3b6 <_dtoa_r+0x8e>
 801c3ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c3ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3d6:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c3da:	d10c      	bne.n	801c3f6 <_dtoa_r+0xce>
 801c3dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c3de:	2301      	movs	r3, #1
 801c3e0:	6013      	str	r3, [r2, #0]
 801c3e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	f000 84b9 	beq.w	801cd5c <_dtoa_r+0xa34>
 801c3ea:	4b96      	ldr	r3, [pc, #600]	; (801c644 <_dtoa_r+0x31c>)
 801c3ec:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c3ee:	6013      	str	r3, [r2, #0]
 801c3f0:	3b01      	subs	r3, #1
 801c3f2:	9304      	str	r3, [sp, #16]
 801c3f4:	e7e1      	b.n	801c3ba <_dtoa_r+0x92>
 801c3f6:	a913      	add	r1, sp, #76	; 0x4c
 801c3f8:	aa12      	add	r2, sp, #72	; 0x48
 801c3fa:	ed9d 0b04 	vldr	d0, [sp, #16]
 801c3fe:	4620      	mov	r0, r4
 801c400:	f001 f96f 	bl	801d6e2 <__d2b>
 801c404:	f3c5 560a 	ubfx	r6, r5, #20, #11
 801c408:	9001      	str	r0, [sp, #4]
 801c40a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c40c:	2e00      	cmp	r6, #0
 801c40e:	d046      	beq.n	801c49e <_dtoa_r+0x176>
 801c410:	9805      	ldr	r0, [sp, #20]
 801c412:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801c416:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c41a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801c41e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c422:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801c426:	2700      	movs	r7, #0
 801c428:	ee07 aa90 	vmov	s15, sl
 801c42c:	ec43 2b16 	vmov	d6, r2, r3
 801c430:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801c434:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 801c620 <_dtoa_r+0x2f8>
 801c438:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801c43c:	ee36 7b47 	vsub.f64	d7, d6, d7
 801c440:	ed9f 6b79 	vldr	d6, [pc, #484]	; 801c628 <_dtoa_r+0x300>
 801c444:	eea7 6b04 	vfma.f64	d6, d7, d4
 801c448:	eeb0 7b46 	vmov.f64	d7, d6
 801c44c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801c630 <_dtoa_r+0x308>
 801c450:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c454:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c458:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c460:	ee16 ba90 	vmov	fp, s13
 801c464:	d508      	bpl.n	801c478 <_dtoa_r+0x150>
 801c466:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c46a:	eeb4 6b47 	vcmp.f64	d6, d7
 801c46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c472:	bf18      	it	ne
 801c474:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801c478:	f1bb 0f16 	cmp.w	fp, #22
 801c47c:	d834      	bhi.n	801c4e8 <_dtoa_r+0x1c0>
 801c47e:	4b72      	ldr	r3, [pc, #456]	; (801c648 <_dtoa_r+0x320>)
 801c480:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c484:	ed93 7b00 	vldr	d7, [r3]
 801c488:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c48c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c494:	dd01      	ble.n	801c49a <_dtoa_r+0x172>
 801c496:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c49a:	2300      	movs	r3, #0
 801c49c:	e025      	b.n	801c4ea <_dtoa_r+0x1c2>
 801c49e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c4a0:	eb01 0a03 	add.w	sl, r1, r3
 801c4a4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 801c4a8:	2b20      	cmp	r3, #32
 801c4aa:	dd17      	ble.n	801c4dc <_dtoa_r+0x1b4>
 801c4ac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801c4b0:	9a02      	ldr	r2, [sp, #8]
 801c4b2:	409d      	lsls	r5, r3
 801c4b4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 801c4b8:	fa22 f303 	lsr.w	r3, r2, r3
 801c4bc:	432b      	orrs	r3, r5
 801c4be:	ee07 3a90 	vmov	s15, r3
 801c4c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c4c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c4ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c4ce:	9805      	ldr	r0, [sp, #20]
 801c4d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c4d4:	2701      	movs	r7, #1
 801c4d6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801c4da:	e7a5      	b.n	801c428 <_dtoa_r+0x100>
 801c4dc:	9a02      	ldr	r2, [sp, #8]
 801c4de:	f1c3 0320 	rsb	r3, r3, #32
 801c4e2:	fa02 f303 	lsl.w	r3, r2, r3
 801c4e6:	e7ea      	b.n	801c4be <_dtoa_r+0x196>
 801c4e8:	2301      	movs	r3, #1
 801c4ea:	eba1 0a0a 	sub.w	sl, r1, sl
 801c4ee:	9310      	str	r3, [sp, #64]	; 0x40
 801c4f0:	f1ba 0301 	subs.w	r3, sl, #1
 801c4f4:	9307      	str	r3, [sp, #28]
 801c4f6:	bf43      	ittte	mi
 801c4f8:	2300      	movmi	r3, #0
 801c4fa:	f1ca 0a01 	rsbmi	sl, sl, #1
 801c4fe:	9307      	strmi	r3, [sp, #28]
 801c500:	f04f 0a00 	movpl.w	sl, #0
 801c504:	f1bb 0f00 	cmp.w	fp, #0
 801c508:	db19      	blt.n	801c53e <_dtoa_r+0x216>
 801c50a:	9b07      	ldr	r3, [sp, #28]
 801c50c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801c510:	445b      	add	r3, fp
 801c512:	9307      	str	r3, [sp, #28]
 801c514:	f04f 0800 	mov.w	r8, #0
 801c518:	9b08      	ldr	r3, [sp, #32]
 801c51a:	2b09      	cmp	r3, #9
 801c51c:	d866      	bhi.n	801c5ec <_dtoa_r+0x2c4>
 801c51e:	2b05      	cmp	r3, #5
 801c520:	bfc4      	itt	gt
 801c522:	3b04      	subgt	r3, #4
 801c524:	9308      	strgt	r3, [sp, #32]
 801c526:	9b08      	ldr	r3, [sp, #32]
 801c528:	f1a3 0302 	sub.w	r3, r3, #2
 801c52c:	bfcc      	ite	gt
 801c52e:	2500      	movgt	r5, #0
 801c530:	2501      	movle	r5, #1
 801c532:	2b03      	cmp	r3, #3
 801c534:	d866      	bhi.n	801c604 <_dtoa_r+0x2dc>
 801c536:	e8df f003 	tbb	[pc, r3]
 801c53a:	5755      	.short	0x5755
 801c53c:	4909      	.short	0x4909
 801c53e:	2300      	movs	r3, #0
 801c540:	ebaa 0a0b 	sub.w	sl, sl, fp
 801c544:	f1cb 0800 	rsb	r8, fp, #0
 801c548:	930b      	str	r3, [sp, #44]	; 0x2c
 801c54a:	e7e5      	b.n	801c518 <_dtoa_r+0x1f0>
 801c54c:	2301      	movs	r3, #1
 801c54e:	9309      	str	r3, [sp, #36]	; 0x24
 801c550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c552:	2b00      	cmp	r3, #0
 801c554:	dd59      	ble.n	801c60a <_dtoa_r+0x2e2>
 801c556:	9306      	str	r3, [sp, #24]
 801c558:	4699      	mov	r9, r3
 801c55a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c55c:	2200      	movs	r2, #0
 801c55e:	6072      	str	r2, [r6, #4]
 801c560:	2204      	movs	r2, #4
 801c562:	f102 0014 	add.w	r0, r2, #20
 801c566:	4298      	cmp	r0, r3
 801c568:	6871      	ldr	r1, [r6, #4]
 801c56a:	d953      	bls.n	801c614 <_dtoa_r+0x2ec>
 801c56c:	4620      	mov	r0, r4
 801c56e:	f000 fe2b 	bl	801d1c8 <_Balloc>
 801c572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c574:	6030      	str	r0, [r6, #0]
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	9304      	str	r3, [sp, #16]
 801c57a:	f1b9 0f0e 	cmp.w	r9, #14
 801c57e:	f200 80c2 	bhi.w	801c706 <_dtoa_r+0x3de>
 801c582:	2d00      	cmp	r5, #0
 801c584:	f000 80bf 	beq.w	801c706 <_dtoa_r+0x3de>
 801c588:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c58c:	f1bb 0f00 	cmp.w	fp, #0
 801c590:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801c594:	f340 80e6 	ble.w	801c764 <_dtoa_r+0x43c>
 801c598:	4a2b      	ldr	r2, [pc, #172]	; (801c648 <_dtoa_r+0x320>)
 801c59a:	f00b 030f 	and.w	r3, fp, #15
 801c59e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c5a2:	ed93 7b00 	vldr	d7, [r3]
 801c5a6:	ea4f 132b 	mov.w	r3, fp, asr #4
 801c5aa:	06da      	lsls	r2, r3, #27
 801c5ac:	f140 80d8 	bpl.w	801c760 <_dtoa_r+0x438>
 801c5b0:	4a26      	ldr	r2, [pc, #152]	; (801c64c <_dtoa_r+0x324>)
 801c5b2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801c5b6:	ed92 6b08 	vldr	d6, [r2, #32]
 801c5ba:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801c5be:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c5c2:	f003 030f 	and.w	r3, r3, #15
 801c5c6:	2203      	movs	r2, #3
 801c5c8:	4920      	ldr	r1, [pc, #128]	; (801c64c <_dtoa_r+0x324>)
 801c5ca:	e04a      	b.n	801c662 <_dtoa_r+0x33a>
 801c5cc:	2301      	movs	r3, #1
 801c5ce:	9309      	str	r3, [sp, #36]	; 0x24
 801c5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5d2:	445b      	add	r3, fp
 801c5d4:	f103 0901 	add.w	r9, r3, #1
 801c5d8:	9306      	str	r3, [sp, #24]
 801c5da:	464b      	mov	r3, r9
 801c5dc:	2b01      	cmp	r3, #1
 801c5de:	bfb8      	it	lt
 801c5e0:	2301      	movlt	r3, #1
 801c5e2:	e7ba      	b.n	801c55a <_dtoa_r+0x232>
 801c5e4:	2300      	movs	r3, #0
 801c5e6:	e7b2      	b.n	801c54e <_dtoa_r+0x226>
 801c5e8:	2300      	movs	r3, #0
 801c5ea:	e7f0      	b.n	801c5ce <_dtoa_r+0x2a6>
 801c5ec:	2501      	movs	r5, #1
 801c5ee:	2300      	movs	r3, #0
 801c5f0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801c5f4:	f04f 33ff 	mov.w	r3, #4294967295
 801c5f8:	9306      	str	r3, [sp, #24]
 801c5fa:	4699      	mov	r9, r3
 801c5fc:	2200      	movs	r2, #0
 801c5fe:	2312      	movs	r3, #18
 801c600:	920a      	str	r2, [sp, #40]	; 0x28
 801c602:	e7aa      	b.n	801c55a <_dtoa_r+0x232>
 801c604:	2301      	movs	r3, #1
 801c606:	9309      	str	r3, [sp, #36]	; 0x24
 801c608:	e7f4      	b.n	801c5f4 <_dtoa_r+0x2cc>
 801c60a:	2301      	movs	r3, #1
 801c60c:	9306      	str	r3, [sp, #24]
 801c60e:	4699      	mov	r9, r3
 801c610:	461a      	mov	r2, r3
 801c612:	e7f5      	b.n	801c600 <_dtoa_r+0x2d8>
 801c614:	3101      	adds	r1, #1
 801c616:	6071      	str	r1, [r6, #4]
 801c618:	0052      	lsls	r2, r2, #1
 801c61a:	e7a2      	b.n	801c562 <_dtoa_r+0x23a>
 801c61c:	f3af 8000 	nop.w
 801c620:	636f4361 	.word	0x636f4361
 801c624:	3fd287a7 	.word	0x3fd287a7
 801c628:	8b60c8b3 	.word	0x8b60c8b3
 801c62c:	3fc68a28 	.word	0x3fc68a28
 801c630:	509f79fb 	.word	0x509f79fb
 801c634:	3fd34413 	.word	0x3fd34413
 801c638:	7ff00000 	.word	0x7ff00000
 801c63c:	0801ef01 	.word	0x0801ef01
 801c640:	0801eef8 	.word	0x0801eef8
 801c644:	0801eed5 	.word	0x0801eed5
 801c648:	0801efa0 	.word	0x0801efa0
 801c64c:	0801ef78 	.word	0x0801ef78
 801c650:	07de      	lsls	r6, r3, #31
 801c652:	d504      	bpl.n	801c65e <_dtoa_r+0x336>
 801c654:	ed91 6b00 	vldr	d6, [r1]
 801c658:	3201      	adds	r2, #1
 801c65a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c65e:	105b      	asrs	r3, r3, #1
 801c660:	3108      	adds	r1, #8
 801c662:	2b00      	cmp	r3, #0
 801c664:	d1f4      	bne.n	801c650 <_dtoa_r+0x328>
 801c666:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c66a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c66e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c672:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c674:	2b00      	cmp	r3, #0
 801c676:	f000 80a7 	beq.w	801c7c8 <_dtoa_r+0x4a0>
 801c67a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801c67e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c682:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c68a:	f140 809d 	bpl.w	801c7c8 <_dtoa_r+0x4a0>
 801c68e:	f1b9 0f00 	cmp.w	r9, #0
 801c692:	f000 8099 	beq.w	801c7c8 <_dtoa_r+0x4a0>
 801c696:	9b06      	ldr	r3, [sp, #24]
 801c698:	2b00      	cmp	r3, #0
 801c69a:	dd30      	ble.n	801c6fe <_dtoa_r+0x3d6>
 801c69c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801c6a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c6a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c6a8:	9d06      	ldr	r5, [sp, #24]
 801c6aa:	f10b 33ff 	add.w	r3, fp, #4294967295
 801c6ae:	3201      	adds	r2, #1
 801c6b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c6b4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801c6b8:	ee07 2a90 	vmov	s15, r2
 801c6bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c6c0:	eea7 5b06 	vfma.f64	d5, d7, d6
 801c6c4:	ed8d 5b02 	vstr	d5, [sp, #8]
 801c6c8:	9a03      	ldr	r2, [sp, #12]
 801c6ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c6ce:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801c6d2:	2d00      	cmp	r5, #0
 801c6d4:	d17b      	bne.n	801c7ce <_dtoa_r+0x4a6>
 801c6d6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c6da:	ee36 6b47 	vsub.f64	d6, d6, d7
 801c6de:	ec41 0b17 	vmov	d7, r0, r1
 801c6e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6ea:	f300 8253 	bgt.w	801cb94 <_dtoa_r+0x86c>
 801c6ee:	eeb1 7b47 	vneg.f64	d7, d7
 801c6f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6fa:	f100 8249 	bmi.w	801cb90 <_dtoa_r+0x868>
 801c6fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801c702:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c706:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c708:	2b00      	cmp	r3, #0
 801c70a:	f2c0 8119 	blt.w	801c940 <_dtoa_r+0x618>
 801c70e:	f1bb 0f0e 	cmp.w	fp, #14
 801c712:	f300 8115 	bgt.w	801c940 <_dtoa_r+0x618>
 801c716:	4bc3      	ldr	r3, [pc, #780]	; (801ca24 <_dtoa_r+0x6fc>)
 801c718:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c71c:	ed93 6b00 	vldr	d6, [r3]
 801c720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c722:	2b00      	cmp	r3, #0
 801c724:	f280 80ba 	bge.w	801c89c <_dtoa_r+0x574>
 801c728:	f1b9 0f00 	cmp.w	r9, #0
 801c72c:	f300 80b6 	bgt.w	801c89c <_dtoa_r+0x574>
 801c730:	f040 822d 	bne.w	801cb8e <_dtoa_r+0x866>
 801c734:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c738:	ee26 6b07 	vmul.f64	d6, d6, d7
 801c73c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c740:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c748:	464d      	mov	r5, r9
 801c74a:	464f      	mov	r7, r9
 801c74c:	f280 8204 	bge.w	801cb58 <_dtoa_r+0x830>
 801c750:	9b04      	ldr	r3, [sp, #16]
 801c752:	9a04      	ldr	r2, [sp, #16]
 801c754:	1c5e      	adds	r6, r3, #1
 801c756:	2331      	movs	r3, #49	; 0x31
 801c758:	7013      	strb	r3, [r2, #0]
 801c75a:	f10b 0b01 	add.w	fp, fp, #1
 801c75e:	e1ff      	b.n	801cb60 <_dtoa_r+0x838>
 801c760:	2202      	movs	r2, #2
 801c762:	e731      	b.n	801c5c8 <_dtoa_r+0x2a0>
 801c764:	d02e      	beq.n	801c7c4 <_dtoa_r+0x49c>
 801c766:	f1cb 0300 	rsb	r3, fp, #0
 801c76a:	4aae      	ldr	r2, [pc, #696]	; (801ca24 <_dtoa_r+0x6fc>)
 801c76c:	f003 010f 	and.w	r1, r3, #15
 801c770:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c774:	ed92 7b00 	vldr	d7, [r2]
 801c778:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801c77c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c780:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c784:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801c788:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c78c:	49a6      	ldr	r1, [pc, #664]	; (801ca28 <_dtoa_r+0x700>)
 801c78e:	111b      	asrs	r3, r3, #4
 801c790:	2000      	movs	r0, #0
 801c792:	2202      	movs	r2, #2
 801c794:	b93b      	cbnz	r3, 801c7a6 <_dtoa_r+0x47e>
 801c796:	2800      	cmp	r0, #0
 801c798:	f43f af6b 	beq.w	801c672 <_dtoa_r+0x34a>
 801c79c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c7a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c7a4:	e765      	b.n	801c672 <_dtoa_r+0x34a>
 801c7a6:	07dd      	lsls	r5, r3, #31
 801c7a8:	d509      	bpl.n	801c7be <_dtoa_r+0x496>
 801c7aa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801c7ae:	ed91 7b00 	vldr	d7, [r1]
 801c7b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c7b6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c7ba:	3201      	adds	r2, #1
 801c7bc:	2001      	movs	r0, #1
 801c7be:	105b      	asrs	r3, r3, #1
 801c7c0:	3108      	adds	r1, #8
 801c7c2:	e7e7      	b.n	801c794 <_dtoa_r+0x46c>
 801c7c4:	2202      	movs	r2, #2
 801c7c6:	e754      	b.n	801c672 <_dtoa_r+0x34a>
 801c7c8:	465b      	mov	r3, fp
 801c7ca:	464d      	mov	r5, r9
 801c7cc:	e770      	b.n	801c6b0 <_dtoa_r+0x388>
 801c7ce:	4a95      	ldr	r2, [pc, #596]	; (801ca24 <_dtoa_r+0x6fc>)
 801c7d0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801c7d4:	ed12 4b02 	vldr	d4, [r2, #-8]
 801c7d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c7da:	ec41 0b17 	vmov	d7, r0, r1
 801c7de:	b35a      	cbz	r2, 801c838 <_dtoa_r+0x510>
 801c7e0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801c7e4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801c7e8:	9e04      	ldr	r6, [sp, #16]
 801c7ea:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801c7ee:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c7f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c7f6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c7fa:	ee14 2a90 	vmov	r2, s9
 801c7fe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c802:	3230      	adds	r2, #48	; 0x30
 801c804:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c808:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c810:	f806 2b01 	strb.w	r2, [r6], #1
 801c814:	d43b      	bmi.n	801c88e <_dtoa_r+0x566>
 801c816:	ee32 5b46 	vsub.f64	d5, d2, d6
 801c81a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801c81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c822:	d472      	bmi.n	801c90a <_dtoa_r+0x5e2>
 801c824:	9a04      	ldr	r2, [sp, #16]
 801c826:	1ab2      	subs	r2, r6, r2
 801c828:	4295      	cmp	r5, r2
 801c82a:	f77f af68 	ble.w	801c6fe <_dtoa_r+0x3d6>
 801c82e:	ee27 7b03 	vmul.f64	d7, d7, d3
 801c832:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c836:	e7de      	b.n	801c7f6 <_dtoa_r+0x4ce>
 801c838:	9a04      	ldr	r2, [sp, #16]
 801c83a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801c83e:	1956      	adds	r6, r2, r5
 801c840:	4611      	mov	r1, r2
 801c842:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c846:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c84a:	ee14 2a90 	vmov	r2, s9
 801c84e:	3230      	adds	r2, #48	; 0x30
 801c850:	f801 2b01 	strb.w	r2, [r1], #1
 801c854:	42b1      	cmp	r1, r6
 801c856:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c85a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c85e:	d11a      	bne.n	801c896 <_dtoa_r+0x56e>
 801c860:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801c864:	ee37 4b05 	vadd.f64	d4, d7, d5
 801c868:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801c86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c870:	dc4b      	bgt.n	801c90a <_dtoa_r+0x5e2>
 801c872:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c876:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c87e:	f57f af3e 	bpl.w	801c6fe <_dtoa_r+0x3d6>
 801c882:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c886:	2a30      	cmp	r2, #48	; 0x30
 801c888:	f106 31ff 	add.w	r1, r6, #4294967295
 801c88c:	d001      	beq.n	801c892 <_dtoa_r+0x56a>
 801c88e:	469b      	mov	fp, r3
 801c890:	e02a      	b.n	801c8e8 <_dtoa_r+0x5c0>
 801c892:	460e      	mov	r6, r1
 801c894:	e7f5      	b.n	801c882 <_dtoa_r+0x55a>
 801c896:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c89a:	e7d4      	b.n	801c846 <_dtoa_r+0x51e>
 801c89c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c8a0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801c8a4:	9e04      	ldr	r6, [sp, #16]
 801c8a6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801c8aa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801c8ae:	ee15 3a10 	vmov	r3, s10
 801c8b2:	3330      	adds	r3, #48	; 0x30
 801c8b4:	f806 3b01 	strb.w	r3, [r6], #1
 801c8b8:	9b04      	ldr	r3, [sp, #16]
 801c8ba:	1af3      	subs	r3, r6, r3
 801c8bc:	4599      	cmp	r9, r3
 801c8be:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801c8c2:	eea3 7b46 	vfms.f64	d7, d3, d6
 801c8c6:	d133      	bne.n	801c930 <_dtoa_r+0x608>
 801c8c8:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c8cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8d4:	dc18      	bgt.n	801c908 <_dtoa_r+0x5e0>
 801c8d6:	eeb4 7b46 	vcmp.f64	d7, d6
 801c8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8de:	d103      	bne.n	801c8e8 <_dtoa_r+0x5c0>
 801c8e0:	ee15 3a10 	vmov	r3, s10
 801c8e4:	07db      	lsls	r3, r3, #31
 801c8e6:	d40f      	bmi.n	801c908 <_dtoa_r+0x5e0>
 801c8e8:	9901      	ldr	r1, [sp, #4]
 801c8ea:	4620      	mov	r0, r4
 801c8ec:	f000 fca0 	bl	801d230 <_Bfree>
 801c8f0:	2300      	movs	r3, #0
 801c8f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c8f4:	7033      	strb	r3, [r6, #0]
 801c8f6:	f10b 0301 	add.w	r3, fp, #1
 801c8fa:	6013      	str	r3, [r2, #0]
 801c8fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	f43f ad5b 	beq.w	801c3ba <_dtoa_r+0x92>
 801c904:	601e      	str	r6, [r3, #0]
 801c906:	e558      	b.n	801c3ba <_dtoa_r+0x92>
 801c908:	465b      	mov	r3, fp
 801c90a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801c90e:	2939      	cmp	r1, #57	; 0x39
 801c910:	f106 32ff 	add.w	r2, r6, #4294967295
 801c914:	d106      	bne.n	801c924 <_dtoa_r+0x5fc>
 801c916:	9904      	ldr	r1, [sp, #16]
 801c918:	4291      	cmp	r1, r2
 801c91a:	d107      	bne.n	801c92c <_dtoa_r+0x604>
 801c91c:	2230      	movs	r2, #48	; 0x30
 801c91e:	700a      	strb	r2, [r1, #0]
 801c920:	3301      	adds	r3, #1
 801c922:	460a      	mov	r2, r1
 801c924:	7811      	ldrb	r1, [r2, #0]
 801c926:	3101      	adds	r1, #1
 801c928:	7011      	strb	r1, [r2, #0]
 801c92a:	e7b0      	b.n	801c88e <_dtoa_r+0x566>
 801c92c:	4616      	mov	r6, r2
 801c92e:	e7ec      	b.n	801c90a <_dtoa_r+0x5e2>
 801c930:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c934:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c93c:	d1b3      	bne.n	801c8a6 <_dtoa_r+0x57e>
 801c93e:	e7d3      	b.n	801c8e8 <_dtoa_r+0x5c0>
 801c940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c942:	2a00      	cmp	r2, #0
 801c944:	f000 808d 	beq.w	801ca62 <_dtoa_r+0x73a>
 801c948:	9a08      	ldr	r2, [sp, #32]
 801c94a:	2a01      	cmp	r2, #1
 801c94c:	dc72      	bgt.n	801ca34 <_dtoa_r+0x70c>
 801c94e:	2f00      	cmp	r7, #0
 801c950:	d06c      	beq.n	801ca2c <_dtoa_r+0x704>
 801c952:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c956:	4645      	mov	r5, r8
 801c958:	4656      	mov	r6, sl
 801c95a:	9a07      	ldr	r2, [sp, #28]
 801c95c:	2101      	movs	r1, #1
 801c95e:	441a      	add	r2, r3
 801c960:	4620      	mov	r0, r4
 801c962:	449a      	add	sl, r3
 801c964:	9207      	str	r2, [sp, #28]
 801c966:	f000 fd03 	bl	801d370 <__i2b>
 801c96a:	4607      	mov	r7, r0
 801c96c:	2e00      	cmp	r6, #0
 801c96e:	dd0b      	ble.n	801c988 <_dtoa_r+0x660>
 801c970:	9b07      	ldr	r3, [sp, #28]
 801c972:	2b00      	cmp	r3, #0
 801c974:	dd08      	ble.n	801c988 <_dtoa_r+0x660>
 801c976:	42b3      	cmp	r3, r6
 801c978:	9a07      	ldr	r2, [sp, #28]
 801c97a:	bfa8      	it	ge
 801c97c:	4633      	movge	r3, r6
 801c97e:	ebaa 0a03 	sub.w	sl, sl, r3
 801c982:	1af6      	subs	r6, r6, r3
 801c984:	1ad3      	subs	r3, r2, r3
 801c986:	9307      	str	r3, [sp, #28]
 801c988:	f1b8 0f00 	cmp.w	r8, #0
 801c98c:	d01d      	beq.n	801c9ca <_dtoa_r+0x6a2>
 801c98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c990:	2b00      	cmp	r3, #0
 801c992:	d06a      	beq.n	801ca6a <_dtoa_r+0x742>
 801c994:	b18d      	cbz	r5, 801c9ba <_dtoa_r+0x692>
 801c996:	4639      	mov	r1, r7
 801c998:	462a      	mov	r2, r5
 801c99a:	4620      	mov	r0, r4
 801c99c:	f000 fd88 	bl	801d4b0 <__pow5mult>
 801c9a0:	9a01      	ldr	r2, [sp, #4]
 801c9a2:	4601      	mov	r1, r0
 801c9a4:	4607      	mov	r7, r0
 801c9a6:	4620      	mov	r0, r4
 801c9a8:	f000 fceb 	bl	801d382 <__multiply>
 801c9ac:	9901      	ldr	r1, [sp, #4]
 801c9ae:	900c      	str	r0, [sp, #48]	; 0x30
 801c9b0:	4620      	mov	r0, r4
 801c9b2:	f000 fc3d 	bl	801d230 <_Bfree>
 801c9b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9b8:	9301      	str	r3, [sp, #4]
 801c9ba:	ebb8 0205 	subs.w	r2, r8, r5
 801c9be:	d004      	beq.n	801c9ca <_dtoa_r+0x6a2>
 801c9c0:	9901      	ldr	r1, [sp, #4]
 801c9c2:	4620      	mov	r0, r4
 801c9c4:	f000 fd74 	bl	801d4b0 <__pow5mult>
 801c9c8:	9001      	str	r0, [sp, #4]
 801c9ca:	2101      	movs	r1, #1
 801c9cc:	4620      	mov	r0, r4
 801c9ce:	f000 fccf 	bl	801d370 <__i2b>
 801c9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c9d4:	4605      	mov	r5, r0
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	f000 81ca 	beq.w	801cd70 <_dtoa_r+0xa48>
 801c9dc:	461a      	mov	r2, r3
 801c9de:	4601      	mov	r1, r0
 801c9e0:	4620      	mov	r0, r4
 801c9e2:	f000 fd65 	bl	801d4b0 <__pow5mult>
 801c9e6:	9b08      	ldr	r3, [sp, #32]
 801c9e8:	2b01      	cmp	r3, #1
 801c9ea:	4605      	mov	r5, r0
 801c9ec:	dc44      	bgt.n	801ca78 <_dtoa_r+0x750>
 801c9ee:	9b02      	ldr	r3, [sp, #8]
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d13c      	bne.n	801ca6e <_dtoa_r+0x746>
 801c9f4:	9b03      	ldr	r3, [sp, #12]
 801c9f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	d137      	bne.n	801ca6e <_dtoa_r+0x746>
 801c9fe:	9b03      	ldr	r3, [sp, #12]
 801ca00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ca04:	0d1b      	lsrs	r3, r3, #20
 801ca06:	051b      	lsls	r3, r3, #20
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d033      	beq.n	801ca74 <_dtoa_r+0x74c>
 801ca0c:	9b07      	ldr	r3, [sp, #28]
 801ca0e:	3301      	adds	r3, #1
 801ca10:	f10a 0a01 	add.w	sl, sl, #1
 801ca14:	9307      	str	r3, [sp, #28]
 801ca16:	f04f 0801 	mov.w	r8, #1
 801ca1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ca1c:	bb73      	cbnz	r3, 801ca7c <_dtoa_r+0x754>
 801ca1e:	2001      	movs	r0, #1
 801ca20:	e034      	b.n	801ca8c <_dtoa_r+0x764>
 801ca22:	bf00      	nop
 801ca24:	0801efa0 	.word	0x0801efa0
 801ca28:	0801ef78 	.word	0x0801ef78
 801ca2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ca2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ca32:	e790      	b.n	801c956 <_dtoa_r+0x62e>
 801ca34:	f109 35ff 	add.w	r5, r9, #4294967295
 801ca38:	45a8      	cmp	r8, r5
 801ca3a:	bfbf      	itttt	lt
 801ca3c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801ca3e:	eba5 0808 	sublt.w	r8, r5, r8
 801ca42:	4443      	addlt	r3, r8
 801ca44:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801ca46:	bfb6      	itet	lt
 801ca48:	46a8      	movlt	r8, r5
 801ca4a:	eba8 0505 	subge.w	r5, r8, r5
 801ca4e:	2500      	movlt	r5, #0
 801ca50:	f1b9 0f00 	cmp.w	r9, #0
 801ca54:	bfb9      	ittee	lt
 801ca56:	ebaa 0609 	sublt.w	r6, sl, r9
 801ca5a:	2300      	movlt	r3, #0
 801ca5c:	4656      	movge	r6, sl
 801ca5e:	464b      	movge	r3, r9
 801ca60:	e77b      	b.n	801c95a <_dtoa_r+0x632>
 801ca62:	4645      	mov	r5, r8
 801ca64:	4656      	mov	r6, sl
 801ca66:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ca68:	e780      	b.n	801c96c <_dtoa_r+0x644>
 801ca6a:	4642      	mov	r2, r8
 801ca6c:	e7a8      	b.n	801c9c0 <_dtoa_r+0x698>
 801ca6e:	f04f 0800 	mov.w	r8, #0
 801ca72:	e7d2      	b.n	801ca1a <_dtoa_r+0x6f2>
 801ca74:	4698      	mov	r8, r3
 801ca76:	e7d0      	b.n	801ca1a <_dtoa_r+0x6f2>
 801ca78:	f04f 0800 	mov.w	r8, #0
 801ca7c:	692b      	ldr	r3, [r5, #16]
 801ca7e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801ca82:	6918      	ldr	r0, [r3, #16]
 801ca84:	f000 fc26 	bl	801d2d4 <__hi0bits>
 801ca88:	f1c0 0020 	rsb	r0, r0, #32
 801ca8c:	9b07      	ldr	r3, [sp, #28]
 801ca8e:	4418      	add	r0, r3
 801ca90:	f010 001f 	ands.w	r0, r0, #31
 801ca94:	d047      	beq.n	801cb26 <_dtoa_r+0x7fe>
 801ca96:	f1c0 0320 	rsb	r3, r0, #32
 801ca9a:	2b04      	cmp	r3, #4
 801ca9c:	dd3b      	ble.n	801cb16 <_dtoa_r+0x7ee>
 801ca9e:	9b07      	ldr	r3, [sp, #28]
 801caa0:	f1c0 001c 	rsb	r0, r0, #28
 801caa4:	4482      	add	sl, r0
 801caa6:	4406      	add	r6, r0
 801caa8:	4403      	add	r3, r0
 801caaa:	9307      	str	r3, [sp, #28]
 801caac:	f1ba 0f00 	cmp.w	sl, #0
 801cab0:	dd05      	ble.n	801cabe <_dtoa_r+0x796>
 801cab2:	4652      	mov	r2, sl
 801cab4:	9901      	ldr	r1, [sp, #4]
 801cab6:	4620      	mov	r0, r4
 801cab8:	f000 fd48 	bl	801d54c <__lshift>
 801cabc:	9001      	str	r0, [sp, #4]
 801cabe:	9b07      	ldr	r3, [sp, #28]
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	dd05      	ble.n	801cad0 <_dtoa_r+0x7a8>
 801cac4:	4629      	mov	r1, r5
 801cac6:	461a      	mov	r2, r3
 801cac8:	4620      	mov	r0, r4
 801caca:	f000 fd3f 	bl	801d54c <__lshift>
 801cace:	4605      	mov	r5, r0
 801cad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cad2:	b353      	cbz	r3, 801cb2a <_dtoa_r+0x802>
 801cad4:	4629      	mov	r1, r5
 801cad6:	9801      	ldr	r0, [sp, #4]
 801cad8:	f000 fd8c 	bl	801d5f4 <__mcmp>
 801cadc:	2800      	cmp	r0, #0
 801cade:	da24      	bge.n	801cb2a <_dtoa_r+0x802>
 801cae0:	2300      	movs	r3, #0
 801cae2:	220a      	movs	r2, #10
 801cae4:	9901      	ldr	r1, [sp, #4]
 801cae6:	4620      	mov	r0, r4
 801cae8:	f000 fbb9 	bl	801d25e <__multadd>
 801caec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801caee:	9001      	str	r0, [sp, #4]
 801caf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	f000 8142 	beq.w	801cd7e <_dtoa_r+0xa56>
 801cafa:	2300      	movs	r3, #0
 801cafc:	4639      	mov	r1, r7
 801cafe:	220a      	movs	r2, #10
 801cb00:	4620      	mov	r0, r4
 801cb02:	f000 fbac 	bl	801d25e <__multadd>
 801cb06:	9b06      	ldr	r3, [sp, #24]
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	4607      	mov	r7, r0
 801cb0c:	dc4b      	bgt.n	801cba6 <_dtoa_r+0x87e>
 801cb0e:	9b08      	ldr	r3, [sp, #32]
 801cb10:	2b02      	cmp	r3, #2
 801cb12:	dd48      	ble.n	801cba6 <_dtoa_r+0x87e>
 801cb14:	e011      	b.n	801cb3a <_dtoa_r+0x812>
 801cb16:	d0c9      	beq.n	801caac <_dtoa_r+0x784>
 801cb18:	9a07      	ldr	r2, [sp, #28]
 801cb1a:	331c      	adds	r3, #28
 801cb1c:	441a      	add	r2, r3
 801cb1e:	449a      	add	sl, r3
 801cb20:	441e      	add	r6, r3
 801cb22:	4613      	mov	r3, r2
 801cb24:	e7c1      	b.n	801caaa <_dtoa_r+0x782>
 801cb26:	4603      	mov	r3, r0
 801cb28:	e7f6      	b.n	801cb18 <_dtoa_r+0x7f0>
 801cb2a:	f1b9 0f00 	cmp.w	r9, #0
 801cb2e:	dc34      	bgt.n	801cb9a <_dtoa_r+0x872>
 801cb30:	9b08      	ldr	r3, [sp, #32]
 801cb32:	2b02      	cmp	r3, #2
 801cb34:	dd31      	ble.n	801cb9a <_dtoa_r+0x872>
 801cb36:	f8cd 9018 	str.w	r9, [sp, #24]
 801cb3a:	9b06      	ldr	r3, [sp, #24]
 801cb3c:	b963      	cbnz	r3, 801cb58 <_dtoa_r+0x830>
 801cb3e:	4629      	mov	r1, r5
 801cb40:	2205      	movs	r2, #5
 801cb42:	4620      	mov	r0, r4
 801cb44:	f000 fb8b 	bl	801d25e <__multadd>
 801cb48:	4601      	mov	r1, r0
 801cb4a:	4605      	mov	r5, r0
 801cb4c:	9801      	ldr	r0, [sp, #4]
 801cb4e:	f000 fd51 	bl	801d5f4 <__mcmp>
 801cb52:	2800      	cmp	r0, #0
 801cb54:	f73f adfc 	bgt.w	801c750 <_dtoa_r+0x428>
 801cb58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb5a:	9e04      	ldr	r6, [sp, #16]
 801cb5c:	ea6f 0b03 	mvn.w	fp, r3
 801cb60:	f04f 0900 	mov.w	r9, #0
 801cb64:	4629      	mov	r1, r5
 801cb66:	4620      	mov	r0, r4
 801cb68:	f000 fb62 	bl	801d230 <_Bfree>
 801cb6c:	2f00      	cmp	r7, #0
 801cb6e:	f43f aebb 	beq.w	801c8e8 <_dtoa_r+0x5c0>
 801cb72:	f1b9 0f00 	cmp.w	r9, #0
 801cb76:	d005      	beq.n	801cb84 <_dtoa_r+0x85c>
 801cb78:	45b9      	cmp	r9, r7
 801cb7a:	d003      	beq.n	801cb84 <_dtoa_r+0x85c>
 801cb7c:	4649      	mov	r1, r9
 801cb7e:	4620      	mov	r0, r4
 801cb80:	f000 fb56 	bl	801d230 <_Bfree>
 801cb84:	4639      	mov	r1, r7
 801cb86:	4620      	mov	r0, r4
 801cb88:	f000 fb52 	bl	801d230 <_Bfree>
 801cb8c:	e6ac      	b.n	801c8e8 <_dtoa_r+0x5c0>
 801cb8e:	2500      	movs	r5, #0
 801cb90:	462f      	mov	r7, r5
 801cb92:	e7e1      	b.n	801cb58 <_dtoa_r+0x830>
 801cb94:	469b      	mov	fp, r3
 801cb96:	462f      	mov	r7, r5
 801cb98:	e5da      	b.n	801c750 <_dtoa_r+0x428>
 801cb9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb9c:	f8cd 9018 	str.w	r9, [sp, #24]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	f000 80f3 	beq.w	801cd8c <_dtoa_r+0xa64>
 801cba6:	2e00      	cmp	r6, #0
 801cba8:	dd05      	ble.n	801cbb6 <_dtoa_r+0x88e>
 801cbaa:	4639      	mov	r1, r7
 801cbac:	4632      	mov	r2, r6
 801cbae:	4620      	mov	r0, r4
 801cbb0:	f000 fccc 	bl	801d54c <__lshift>
 801cbb4:	4607      	mov	r7, r0
 801cbb6:	f1b8 0f00 	cmp.w	r8, #0
 801cbba:	d04c      	beq.n	801cc56 <_dtoa_r+0x92e>
 801cbbc:	6879      	ldr	r1, [r7, #4]
 801cbbe:	4620      	mov	r0, r4
 801cbc0:	f000 fb02 	bl	801d1c8 <_Balloc>
 801cbc4:	693a      	ldr	r2, [r7, #16]
 801cbc6:	3202      	adds	r2, #2
 801cbc8:	4606      	mov	r6, r0
 801cbca:	0092      	lsls	r2, r2, #2
 801cbcc:	f107 010c 	add.w	r1, r7, #12
 801cbd0:	300c      	adds	r0, #12
 801cbd2:	f7fe fb95 	bl	801b300 <memcpy>
 801cbd6:	2201      	movs	r2, #1
 801cbd8:	4631      	mov	r1, r6
 801cbda:	4620      	mov	r0, r4
 801cbdc:	f000 fcb6 	bl	801d54c <__lshift>
 801cbe0:	9b02      	ldr	r3, [sp, #8]
 801cbe2:	f8dd a010 	ldr.w	sl, [sp, #16]
 801cbe6:	f003 0301 	and.w	r3, r3, #1
 801cbea:	46b9      	mov	r9, r7
 801cbec:	9307      	str	r3, [sp, #28]
 801cbee:	4607      	mov	r7, r0
 801cbf0:	4629      	mov	r1, r5
 801cbf2:	9801      	ldr	r0, [sp, #4]
 801cbf4:	f7ff fb0a 	bl	801c20c <quorem>
 801cbf8:	4649      	mov	r1, r9
 801cbfa:	4606      	mov	r6, r0
 801cbfc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801cc00:	9801      	ldr	r0, [sp, #4]
 801cc02:	f000 fcf7 	bl	801d5f4 <__mcmp>
 801cc06:	463a      	mov	r2, r7
 801cc08:	9002      	str	r0, [sp, #8]
 801cc0a:	4629      	mov	r1, r5
 801cc0c:	4620      	mov	r0, r4
 801cc0e:	f000 fd0b 	bl	801d628 <__mdiff>
 801cc12:	68c3      	ldr	r3, [r0, #12]
 801cc14:	4602      	mov	r2, r0
 801cc16:	bb03      	cbnz	r3, 801cc5a <_dtoa_r+0x932>
 801cc18:	4601      	mov	r1, r0
 801cc1a:	9009      	str	r0, [sp, #36]	; 0x24
 801cc1c:	9801      	ldr	r0, [sp, #4]
 801cc1e:	f000 fce9 	bl	801d5f4 <__mcmp>
 801cc22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cc24:	4603      	mov	r3, r0
 801cc26:	4611      	mov	r1, r2
 801cc28:	4620      	mov	r0, r4
 801cc2a:	9309      	str	r3, [sp, #36]	; 0x24
 801cc2c:	f000 fb00 	bl	801d230 <_Bfree>
 801cc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc32:	b9a3      	cbnz	r3, 801cc5e <_dtoa_r+0x936>
 801cc34:	9a08      	ldr	r2, [sp, #32]
 801cc36:	b992      	cbnz	r2, 801cc5e <_dtoa_r+0x936>
 801cc38:	9a07      	ldr	r2, [sp, #28]
 801cc3a:	b982      	cbnz	r2, 801cc5e <_dtoa_r+0x936>
 801cc3c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801cc40:	d029      	beq.n	801cc96 <_dtoa_r+0x96e>
 801cc42:	9b02      	ldr	r3, [sp, #8]
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	dd01      	ble.n	801cc4c <_dtoa_r+0x924>
 801cc48:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801cc4c:	f10a 0601 	add.w	r6, sl, #1
 801cc50:	f88a 8000 	strb.w	r8, [sl]
 801cc54:	e786      	b.n	801cb64 <_dtoa_r+0x83c>
 801cc56:	4638      	mov	r0, r7
 801cc58:	e7c2      	b.n	801cbe0 <_dtoa_r+0x8b8>
 801cc5a:	2301      	movs	r3, #1
 801cc5c:	e7e3      	b.n	801cc26 <_dtoa_r+0x8fe>
 801cc5e:	9a02      	ldr	r2, [sp, #8]
 801cc60:	2a00      	cmp	r2, #0
 801cc62:	db04      	blt.n	801cc6e <_dtoa_r+0x946>
 801cc64:	d124      	bne.n	801ccb0 <_dtoa_r+0x988>
 801cc66:	9a08      	ldr	r2, [sp, #32]
 801cc68:	bb12      	cbnz	r2, 801ccb0 <_dtoa_r+0x988>
 801cc6a:	9a07      	ldr	r2, [sp, #28]
 801cc6c:	bb02      	cbnz	r2, 801ccb0 <_dtoa_r+0x988>
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	ddec      	ble.n	801cc4c <_dtoa_r+0x924>
 801cc72:	2201      	movs	r2, #1
 801cc74:	9901      	ldr	r1, [sp, #4]
 801cc76:	4620      	mov	r0, r4
 801cc78:	f000 fc68 	bl	801d54c <__lshift>
 801cc7c:	4629      	mov	r1, r5
 801cc7e:	9001      	str	r0, [sp, #4]
 801cc80:	f000 fcb8 	bl	801d5f4 <__mcmp>
 801cc84:	2800      	cmp	r0, #0
 801cc86:	dc03      	bgt.n	801cc90 <_dtoa_r+0x968>
 801cc88:	d1e0      	bne.n	801cc4c <_dtoa_r+0x924>
 801cc8a:	f018 0f01 	tst.w	r8, #1
 801cc8e:	d0dd      	beq.n	801cc4c <_dtoa_r+0x924>
 801cc90:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801cc94:	d1d8      	bne.n	801cc48 <_dtoa_r+0x920>
 801cc96:	2339      	movs	r3, #57	; 0x39
 801cc98:	f10a 0601 	add.w	r6, sl, #1
 801cc9c:	f88a 3000 	strb.w	r3, [sl]
 801cca0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cca4:	2b39      	cmp	r3, #57	; 0x39
 801cca6:	f106 32ff 	add.w	r2, r6, #4294967295
 801ccaa:	d04c      	beq.n	801cd46 <_dtoa_r+0xa1e>
 801ccac:	3301      	adds	r3, #1
 801ccae:	e051      	b.n	801cd54 <_dtoa_r+0xa2c>
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	f10a 0601 	add.w	r6, sl, #1
 801ccb6:	dd05      	ble.n	801ccc4 <_dtoa_r+0x99c>
 801ccb8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801ccbc:	d0eb      	beq.n	801cc96 <_dtoa_r+0x96e>
 801ccbe:	f108 0801 	add.w	r8, r8, #1
 801ccc2:	e7c5      	b.n	801cc50 <_dtoa_r+0x928>
 801ccc4:	9b04      	ldr	r3, [sp, #16]
 801ccc6:	9a06      	ldr	r2, [sp, #24]
 801ccc8:	f806 8c01 	strb.w	r8, [r6, #-1]
 801cccc:	1af3      	subs	r3, r6, r3
 801ccce:	4293      	cmp	r3, r2
 801ccd0:	d021      	beq.n	801cd16 <_dtoa_r+0x9ee>
 801ccd2:	2300      	movs	r3, #0
 801ccd4:	220a      	movs	r2, #10
 801ccd6:	9901      	ldr	r1, [sp, #4]
 801ccd8:	4620      	mov	r0, r4
 801ccda:	f000 fac0 	bl	801d25e <__multadd>
 801ccde:	45b9      	cmp	r9, r7
 801cce0:	9001      	str	r0, [sp, #4]
 801cce2:	f04f 0300 	mov.w	r3, #0
 801cce6:	f04f 020a 	mov.w	r2, #10
 801ccea:	4649      	mov	r1, r9
 801ccec:	4620      	mov	r0, r4
 801ccee:	d105      	bne.n	801ccfc <_dtoa_r+0x9d4>
 801ccf0:	f000 fab5 	bl	801d25e <__multadd>
 801ccf4:	4681      	mov	r9, r0
 801ccf6:	4607      	mov	r7, r0
 801ccf8:	46b2      	mov	sl, r6
 801ccfa:	e779      	b.n	801cbf0 <_dtoa_r+0x8c8>
 801ccfc:	f000 faaf 	bl	801d25e <__multadd>
 801cd00:	4639      	mov	r1, r7
 801cd02:	4681      	mov	r9, r0
 801cd04:	2300      	movs	r3, #0
 801cd06:	220a      	movs	r2, #10
 801cd08:	4620      	mov	r0, r4
 801cd0a:	f000 faa8 	bl	801d25e <__multadd>
 801cd0e:	4607      	mov	r7, r0
 801cd10:	e7f2      	b.n	801ccf8 <_dtoa_r+0x9d0>
 801cd12:	f04f 0900 	mov.w	r9, #0
 801cd16:	2201      	movs	r2, #1
 801cd18:	9901      	ldr	r1, [sp, #4]
 801cd1a:	4620      	mov	r0, r4
 801cd1c:	f000 fc16 	bl	801d54c <__lshift>
 801cd20:	4629      	mov	r1, r5
 801cd22:	9001      	str	r0, [sp, #4]
 801cd24:	f000 fc66 	bl	801d5f4 <__mcmp>
 801cd28:	2800      	cmp	r0, #0
 801cd2a:	dcb9      	bgt.n	801cca0 <_dtoa_r+0x978>
 801cd2c:	d102      	bne.n	801cd34 <_dtoa_r+0xa0c>
 801cd2e:	f018 0f01 	tst.w	r8, #1
 801cd32:	d1b5      	bne.n	801cca0 <_dtoa_r+0x978>
 801cd34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cd38:	2b30      	cmp	r3, #48	; 0x30
 801cd3a:	f106 32ff 	add.w	r2, r6, #4294967295
 801cd3e:	f47f af11 	bne.w	801cb64 <_dtoa_r+0x83c>
 801cd42:	4616      	mov	r6, r2
 801cd44:	e7f6      	b.n	801cd34 <_dtoa_r+0xa0c>
 801cd46:	9b04      	ldr	r3, [sp, #16]
 801cd48:	4293      	cmp	r3, r2
 801cd4a:	d105      	bne.n	801cd58 <_dtoa_r+0xa30>
 801cd4c:	9a04      	ldr	r2, [sp, #16]
 801cd4e:	f10b 0b01 	add.w	fp, fp, #1
 801cd52:	2331      	movs	r3, #49	; 0x31
 801cd54:	7013      	strb	r3, [r2, #0]
 801cd56:	e705      	b.n	801cb64 <_dtoa_r+0x83c>
 801cd58:	4616      	mov	r6, r2
 801cd5a:	e7a1      	b.n	801cca0 <_dtoa_r+0x978>
 801cd5c:	4b16      	ldr	r3, [pc, #88]	; (801cdb8 <_dtoa_r+0xa90>)
 801cd5e:	f7ff bb48 	b.w	801c3f2 <_dtoa_r+0xca>
 801cd62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	f47f ab23 	bne.w	801c3b0 <_dtoa_r+0x88>
 801cd6a:	4b14      	ldr	r3, [pc, #80]	; (801cdbc <_dtoa_r+0xa94>)
 801cd6c:	f7ff bb41 	b.w	801c3f2 <_dtoa_r+0xca>
 801cd70:	9b08      	ldr	r3, [sp, #32]
 801cd72:	2b01      	cmp	r3, #1
 801cd74:	f77f ae3b 	ble.w	801c9ee <_dtoa_r+0x6c6>
 801cd78:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801cd7c:	e64f      	b.n	801ca1e <_dtoa_r+0x6f6>
 801cd7e:	9b06      	ldr	r3, [sp, #24]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	dc03      	bgt.n	801cd8c <_dtoa_r+0xa64>
 801cd84:	9b08      	ldr	r3, [sp, #32]
 801cd86:	2b02      	cmp	r3, #2
 801cd88:	f73f aed7 	bgt.w	801cb3a <_dtoa_r+0x812>
 801cd8c:	9e04      	ldr	r6, [sp, #16]
 801cd8e:	9801      	ldr	r0, [sp, #4]
 801cd90:	4629      	mov	r1, r5
 801cd92:	f7ff fa3b 	bl	801c20c <quorem>
 801cd96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801cd9a:	f806 8b01 	strb.w	r8, [r6], #1
 801cd9e:	9b04      	ldr	r3, [sp, #16]
 801cda0:	9a06      	ldr	r2, [sp, #24]
 801cda2:	1af3      	subs	r3, r6, r3
 801cda4:	429a      	cmp	r2, r3
 801cda6:	ddb4      	ble.n	801cd12 <_dtoa_r+0x9ea>
 801cda8:	2300      	movs	r3, #0
 801cdaa:	220a      	movs	r2, #10
 801cdac:	9901      	ldr	r1, [sp, #4]
 801cdae:	4620      	mov	r0, r4
 801cdb0:	f000 fa55 	bl	801d25e <__multadd>
 801cdb4:	9001      	str	r0, [sp, #4]
 801cdb6:	e7ea      	b.n	801cd8e <_dtoa_r+0xa66>
 801cdb8:	0801eed4 	.word	0x0801eed4
 801cdbc:	0801eef8 	.word	0x0801eef8

0801cdc0 <__sflush_r>:
 801cdc0:	898a      	ldrh	r2, [r1, #12]
 801cdc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdc6:	4605      	mov	r5, r0
 801cdc8:	0710      	lsls	r0, r2, #28
 801cdca:	460c      	mov	r4, r1
 801cdcc:	d458      	bmi.n	801ce80 <__sflush_r+0xc0>
 801cdce:	684b      	ldr	r3, [r1, #4]
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	dc05      	bgt.n	801cde0 <__sflush_r+0x20>
 801cdd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	dc02      	bgt.n	801cde0 <__sflush_r+0x20>
 801cdda:	2000      	movs	r0, #0
 801cddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cde0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cde2:	2e00      	cmp	r6, #0
 801cde4:	d0f9      	beq.n	801cdda <__sflush_r+0x1a>
 801cde6:	2300      	movs	r3, #0
 801cde8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cdec:	682f      	ldr	r7, [r5, #0]
 801cdee:	6a21      	ldr	r1, [r4, #32]
 801cdf0:	602b      	str	r3, [r5, #0]
 801cdf2:	d032      	beq.n	801ce5a <__sflush_r+0x9a>
 801cdf4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cdf6:	89a3      	ldrh	r3, [r4, #12]
 801cdf8:	075a      	lsls	r2, r3, #29
 801cdfa:	d505      	bpl.n	801ce08 <__sflush_r+0x48>
 801cdfc:	6863      	ldr	r3, [r4, #4]
 801cdfe:	1ac0      	subs	r0, r0, r3
 801ce00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ce02:	b10b      	cbz	r3, 801ce08 <__sflush_r+0x48>
 801ce04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ce06:	1ac0      	subs	r0, r0, r3
 801ce08:	2300      	movs	r3, #0
 801ce0a:	4602      	mov	r2, r0
 801ce0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ce0e:	6a21      	ldr	r1, [r4, #32]
 801ce10:	4628      	mov	r0, r5
 801ce12:	47b0      	blx	r6
 801ce14:	1c43      	adds	r3, r0, #1
 801ce16:	89a3      	ldrh	r3, [r4, #12]
 801ce18:	d106      	bne.n	801ce28 <__sflush_r+0x68>
 801ce1a:	6829      	ldr	r1, [r5, #0]
 801ce1c:	291d      	cmp	r1, #29
 801ce1e:	d848      	bhi.n	801ceb2 <__sflush_r+0xf2>
 801ce20:	4a29      	ldr	r2, [pc, #164]	; (801cec8 <__sflush_r+0x108>)
 801ce22:	40ca      	lsrs	r2, r1
 801ce24:	07d6      	lsls	r6, r2, #31
 801ce26:	d544      	bpl.n	801ceb2 <__sflush_r+0xf2>
 801ce28:	2200      	movs	r2, #0
 801ce2a:	6062      	str	r2, [r4, #4]
 801ce2c:	04d9      	lsls	r1, r3, #19
 801ce2e:	6922      	ldr	r2, [r4, #16]
 801ce30:	6022      	str	r2, [r4, #0]
 801ce32:	d504      	bpl.n	801ce3e <__sflush_r+0x7e>
 801ce34:	1c42      	adds	r2, r0, #1
 801ce36:	d101      	bne.n	801ce3c <__sflush_r+0x7c>
 801ce38:	682b      	ldr	r3, [r5, #0]
 801ce3a:	b903      	cbnz	r3, 801ce3e <__sflush_r+0x7e>
 801ce3c:	6560      	str	r0, [r4, #84]	; 0x54
 801ce3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce40:	602f      	str	r7, [r5, #0]
 801ce42:	2900      	cmp	r1, #0
 801ce44:	d0c9      	beq.n	801cdda <__sflush_r+0x1a>
 801ce46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ce4a:	4299      	cmp	r1, r3
 801ce4c:	d002      	beq.n	801ce54 <__sflush_r+0x94>
 801ce4e:	4628      	mov	r0, r5
 801ce50:	f7fe fa6a 	bl	801b328 <_free_r>
 801ce54:	2000      	movs	r0, #0
 801ce56:	6360      	str	r0, [r4, #52]	; 0x34
 801ce58:	e7c0      	b.n	801cddc <__sflush_r+0x1c>
 801ce5a:	2301      	movs	r3, #1
 801ce5c:	4628      	mov	r0, r5
 801ce5e:	47b0      	blx	r6
 801ce60:	1c41      	adds	r1, r0, #1
 801ce62:	d1c8      	bne.n	801cdf6 <__sflush_r+0x36>
 801ce64:	682b      	ldr	r3, [r5, #0]
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d0c5      	beq.n	801cdf6 <__sflush_r+0x36>
 801ce6a:	2b1d      	cmp	r3, #29
 801ce6c:	d001      	beq.n	801ce72 <__sflush_r+0xb2>
 801ce6e:	2b16      	cmp	r3, #22
 801ce70:	d101      	bne.n	801ce76 <__sflush_r+0xb6>
 801ce72:	602f      	str	r7, [r5, #0]
 801ce74:	e7b1      	b.n	801cdda <__sflush_r+0x1a>
 801ce76:	89a3      	ldrh	r3, [r4, #12]
 801ce78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce7c:	81a3      	strh	r3, [r4, #12]
 801ce7e:	e7ad      	b.n	801cddc <__sflush_r+0x1c>
 801ce80:	690f      	ldr	r7, [r1, #16]
 801ce82:	2f00      	cmp	r7, #0
 801ce84:	d0a9      	beq.n	801cdda <__sflush_r+0x1a>
 801ce86:	0793      	lsls	r3, r2, #30
 801ce88:	680e      	ldr	r6, [r1, #0]
 801ce8a:	bf08      	it	eq
 801ce8c:	694b      	ldreq	r3, [r1, #20]
 801ce8e:	600f      	str	r7, [r1, #0]
 801ce90:	bf18      	it	ne
 801ce92:	2300      	movne	r3, #0
 801ce94:	eba6 0807 	sub.w	r8, r6, r7
 801ce98:	608b      	str	r3, [r1, #8]
 801ce9a:	f1b8 0f00 	cmp.w	r8, #0
 801ce9e:	dd9c      	ble.n	801cdda <__sflush_r+0x1a>
 801cea0:	4643      	mov	r3, r8
 801cea2:	463a      	mov	r2, r7
 801cea4:	6a21      	ldr	r1, [r4, #32]
 801cea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cea8:	4628      	mov	r0, r5
 801ceaa:	47b0      	blx	r6
 801ceac:	2800      	cmp	r0, #0
 801ceae:	dc06      	bgt.n	801cebe <__sflush_r+0xfe>
 801ceb0:	89a3      	ldrh	r3, [r4, #12]
 801ceb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ceb6:	81a3      	strh	r3, [r4, #12]
 801ceb8:	f04f 30ff 	mov.w	r0, #4294967295
 801cebc:	e78e      	b.n	801cddc <__sflush_r+0x1c>
 801cebe:	4407      	add	r7, r0
 801cec0:	eba8 0800 	sub.w	r8, r8, r0
 801cec4:	e7e9      	b.n	801ce9a <__sflush_r+0xda>
 801cec6:	bf00      	nop
 801cec8:	20400001 	.word	0x20400001

0801cecc <_fflush_r>:
 801cecc:	b538      	push	{r3, r4, r5, lr}
 801cece:	690b      	ldr	r3, [r1, #16]
 801ced0:	4605      	mov	r5, r0
 801ced2:	460c      	mov	r4, r1
 801ced4:	b1db      	cbz	r3, 801cf0e <_fflush_r+0x42>
 801ced6:	b118      	cbz	r0, 801cee0 <_fflush_r+0x14>
 801ced8:	6983      	ldr	r3, [r0, #24]
 801ceda:	b90b      	cbnz	r3, 801cee0 <_fflush_r+0x14>
 801cedc:	f000 f860 	bl	801cfa0 <__sinit>
 801cee0:	4b0c      	ldr	r3, [pc, #48]	; (801cf14 <_fflush_r+0x48>)
 801cee2:	429c      	cmp	r4, r3
 801cee4:	d109      	bne.n	801cefa <_fflush_r+0x2e>
 801cee6:	686c      	ldr	r4, [r5, #4]
 801cee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ceec:	b17b      	cbz	r3, 801cf0e <_fflush_r+0x42>
 801ceee:	4621      	mov	r1, r4
 801cef0:	4628      	mov	r0, r5
 801cef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cef6:	f7ff bf63 	b.w	801cdc0 <__sflush_r>
 801cefa:	4b07      	ldr	r3, [pc, #28]	; (801cf18 <_fflush_r+0x4c>)
 801cefc:	429c      	cmp	r4, r3
 801cefe:	d101      	bne.n	801cf04 <_fflush_r+0x38>
 801cf00:	68ac      	ldr	r4, [r5, #8]
 801cf02:	e7f1      	b.n	801cee8 <_fflush_r+0x1c>
 801cf04:	4b05      	ldr	r3, [pc, #20]	; (801cf1c <_fflush_r+0x50>)
 801cf06:	429c      	cmp	r4, r3
 801cf08:	bf08      	it	eq
 801cf0a:	68ec      	ldreq	r4, [r5, #12]
 801cf0c:	e7ec      	b.n	801cee8 <_fflush_r+0x1c>
 801cf0e:	2000      	movs	r0, #0
 801cf10:	bd38      	pop	{r3, r4, r5, pc}
 801cf12:	bf00      	nop
 801cf14:	0801ef28 	.word	0x0801ef28
 801cf18:	0801ef48 	.word	0x0801ef48
 801cf1c:	0801ef08 	.word	0x0801ef08

0801cf20 <std>:
 801cf20:	2300      	movs	r3, #0
 801cf22:	b510      	push	{r4, lr}
 801cf24:	4604      	mov	r4, r0
 801cf26:	e9c0 3300 	strd	r3, r3, [r0]
 801cf2a:	6083      	str	r3, [r0, #8]
 801cf2c:	8181      	strh	r1, [r0, #12]
 801cf2e:	6643      	str	r3, [r0, #100]	; 0x64
 801cf30:	81c2      	strh	r2, [r0, #14]
 801cf32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cf36:	6183      	str	r3, [r0, #24]
 801cf38:	4619      	mov	r1, r3
 801cf3a:	2208      	movs	r2, #8
 801cf3c:	305c      	adds	r0, #92	; 0x5c
 801cf3e:	f7fe f9ea 	bl	801b316 <memset>
 801cf42:	4b05      	ldr	r3, [pc, #20]	; (801cf58 <std+0x38>)
 801cf44:	6263      	str	r3, [r4, #36]	; 0x24
 801cf46:	4b05      	ldr	r3, [pc, #20]	; (801cf5c <std+0x3c>)
 801cf48:	62a3      	str	r3, [r4, #40]	; 0x28
 801cf4a:	4b05      	ldr	r3, [pc, #20]	; (801cf60 <std+0x40>)
 801cf4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cf4e:	4b05      	ldr	r3, [pc, #20]	; (801cf64 <std+0x44>)
 801cf50:	6224      	str	r4, [r4, #32]
 801cf52:	6323      	str	r3, [r4, #48]	; 0x30
 801cf54:	bd10      	pop	{r4, pc}
 801cf56:	bf00      	nop
 801cf58:	0801dcc1 	.word	0x0801dcc1
 801cf5c:	0801dce3 	.word	0x0801dce3
 801cf60:	0801dd1b 	.word	0x0801dd1b
 801cf64:	0801dd3f 	.word	0x0801dd3f

0801cf68 <_cleanup_r>:
 801cf68:	4901      	ldr	r1, [pc, #4]	; (801cf70 <_cleanup_r+0x8>)
 801cf6a:	f000 b885 	b.w	801d078 <_fwalk_reent>
 801cf6e:	bf00      	nop
 801cf70:	0801cecd 	.word	0x0801cecd

0801cf74 <__sfmoreglue>:
 801cf74:	b570      	push	{r4, r5, r6, lr}
 801cf76:	1e4a      	subs	r2, r1, #1
 801cf78:	2568      	movs	r5, #104	; 0x68
 801cf7a:	4355      	muls	r5, r2
 801cf7c:	460e      	mov	r6, r1
 801cf7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cf82:	f7fe fa1f 	bl	801b3c4 <_malloc_r>
 801cf86:	4604      	mov	r4, r0
 801cf88:	b140      	cbz	r0, 801cf9c <__sfmoreglue+0x28>
 801cf8a:	2100      	movs	r1, #0
 801cf8c:	e9c0 1600 	strd	r1, r6, [r0]
 801cf90:	300c      	adds	r0, #12
 801cf92:	60a0      	str	r0, [r4, #8]
 801cf94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cf98:	f7fe f9bd 	bl	801b316 <memset>
 801cf9c:	4620      	mov	r0, r4
 801cf9e:	bd70      	pop	{r4, r5, r6, pc}

0801cfa0 <__sinit>:
 801cfa0:	6983      	ldr	r3, [r0, #24]
 801cfa2:	b510      	push	{r4, lr}
 801cfa4:	4604      	mov	r4, r0
 801cfa6:	bb33      	cbnz	r3, 801cff6 <__sinit+0x56>
 801cfa8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801cfac:	6503      	str	r3, [r0, #80]	; 0x50
 801cfae:	4b12      	ldr	r3, [pc, #72]	; (801cff8 <__sinit+0x58>)
 801cfb0:	4a12      	ldr	r2, [pc, #72]	; (801cffc <__sinit+0x5c>)
 801cfb2:	681b      	ldr	r3, [r3, #0]
 801cfb4:	6282      	str	r2, [r0, #40]	; 0x28
 801cfb6:	4298      	cmp	r0, r3
 801cfb8:	bf04      	itt	eq
 801cfba:	2301      	moveq	r3, #1
 801cfbc:	6183      	streq	r3, [r0, #24]
 801cfbe:	f000 f81f 	bl	801d000 <__sfp>
 801cfc2:	6060      	str	r0, [r4, #4]
 801cfc4:	4620      	mov	r0, r4
 801cfc6:	f000 f81b 	bl	801d000 <__sfp>
 801cfca:	60a0      	str	r0, [r4, #8]
 801cfcc:	4620      	mov	r0, r4
 801cfce:	f000 f817 	bl	801d000 <__sfp>
 801cfd2:	2200      	movs	r2, #0
 801cfd4:	60e0      	str	r0, [r4, #12]
 801cfd6:	2104      	movs	r1, #4
 801cfd8:	6860      	ldr	r0, [r4, #4]
 801cfda:	f7ff ffa1 	bl	801cf20 <std>
 801cfde:	2201      	movs	r2, #1
 801cfe0:	2109      	movs	r1, #9
 801cfe2:	68a0      	ldr	r0, [r4, #8]
 801cfe4:	f7ff ff9c 	bl	801cf20 <std>
 801cfe8:	2202      	movs	r2, #2
 801cfea:	2112      	movs	r1, #18
 801cfec:	68e0      	ldr	r0, [r4, #12]
 801cfee:	f7ff ff97 	bl	801cf20 <std>
 801cff2:	2301      	movs	r3, #1
 801cff4:	61a3      	str	r3, [r4, #24]
 801cff6:	bd10      	pop	{r4, pc}
 801cff8:	0801eec0 	.word	0x0801eec0
 801cffc:	0801cf69 	.word	0x0801cf69

0801d000 <__sfp>:
 801d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d002:	4b1b      	ldr	r3, [pc, #108]	; (801d070 <__sfp+0x70>)
 801d004:	681e      	ldr	r6, [r3, #0]
 801d006:	69b3      	ldr	r3, [r6, #24]
 801d008:	4607      	mov	r7, r0
 801d00a:	b913      	cbnz	r3, 801d012 <__sfp+0x12>
 801d00c:	4630      	mov	r0, r6
 801d00e:	f7ff ffc7 	bl	801cfa0 <__sinit>
 801d012:	3648      	adds	r6, #72	; 0x48
 801d014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d018:	3b01      	subs	r3, #1
 801d01a:	d503      	bpl.n	801d024 <__sfp+0x24>
 801d01c:	6833      	ldr	r3, [r6, #0]
 801d01e:	b133      	cbz	r3, 801d02e <__sfp+0x2e>
 801d020:	6836      	ldr	r6, [r6, #0]
 801d022:	e7f7      	b.n	801d014 <__sfp+0x14>
 801d024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d028:	b16d      	cbz	r5, 801d046 <__sfp+0x46>
 801d02a:	3468      	adds	r4, #104	; 0x68
 801d02c:	e7f4      	b.n	801d018 <__sfp+0x18>
 801d02e:	2104      	movs	r1, #4
 801d030:	4638      	mov	r0, r7
 801d032:	f7ff ff9f 	bl	801cf74 <__sfmoreglue>
 801d036:	6030      	str	r0, [r6, #0]
 801d038:	2800      	cmp	r0, #0
 801d03a:	d1f1      	bne.n	801d020 <__sfp+0x20>
 801d03c:	230c      	movs	r3, #12
 801d03e:	603b      	str	r3, [r7, #0]
 801d040:	4604      	mov	r4, r0
 801d042:	4620      	mov	r0, r4
 801d044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d046:	4b0b      	ldr	r3, [pc, #44]	; (801d074 <__sfp+0x74>)
 801d048:	6665      	str	r5, [r4, #100]	; 0x64
 801d04a:	e9c4 5500 	strd	r5, r5, [r4]
 801d04e:	60a5      	str	r5, [r4, #8]
 801d050:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801d054:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801d058:	2208      	movs	r2, #8
 801d05a:	4629      	mov	r1, r5
 801d05c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d060:	f7fe f959 	bl	801b316 <memset>
 801d064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d06c:	e7e9      	b.n	801d042 <__sfp+0x42>
 801d06e:	bf00      	nop
 801d070:	0801eec0 	.word	0x0801eec0
 801d074:	ffff0001 	.word	0xffff0001

0801d078 <_fwalk_reent>:
 801d078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d07c:	4680      	mov	r8, r0
 801d07e:	4689      	mov	r9, r1
 801d080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d084:	2600      	movs	r6, #0
 801d086:	b914      	cbnz	r4, 801d08e <_fwalk_reent+0x16>
 801d088:	4630      	mov	r0, r6
 801d08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d08e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801d092:	3f01      	subs	r7, #1
 801d094:	d501      	bpl.n	801d09a <_fwalk_reent+0x22>
 801d096:	6824      	ldr	r4, [r4, #0]
 801d098:	e7f5      	b.n	801d086 <_fwalk_reent+0xe>
 801d09a:	89ab      	ldrh	r3, [r5, #12]
 801d09c:	2b01      	cmp	r3, #1
 801d09e:	d907      	bls.n	801d0b0 <_fwalk_reent+0x38>
 801d0a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d0a4:	3301      	adds	r3, #1
 801d0a6:	d003      	beq.n	801d0b0 <_fwalk_reent+0x38>
 801d0a8:	4629      	mov	r1, r5
 801d0aa:	4640      	mov	r0, r8
 801d0ac:	47c8      	blx	r9
 801d0ae:	4306      	orrs	r6, r0
 801d0b0:	3568      	adds	r5, #104	; 0x68
 801d0b2:	e7ee      	b.n	801d092 <_fwalk_reent+0x1a>

0801d0b4 <__locale_ctype_ptr_l>:
 801d0b4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801d0b8:	4770      	bx	lr
	...

0801d0bc <_localeconv_r>:
 801d0bc:	4b04      	ldr	r3, [pc, #16]	; (801d0d0 <_localeconv_r+0x14>)
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	6a18      	ldr	r0, [r3, #32]
 801d0c2:	4b04      	ldr	r3, [pc, #16]	; (801d0d4 <_localeconv_r+0x18>)
 801d0c4:	2800      	cmp	r0, #0
 801d0c6:	bf08      	it	eq
 801d0c8:	4618      	moveq	r0, r3
 801d0ca:	30f0      	adds	r0, #240	; 0xf0
 801d0cc:	4770      	bx	lr
 801d0ce:	bf00      	nop
 801d0d0:	2400017c 	.word	0x2400017c
 801d0d4:	240001e0 	.word	0x240001e0

0801d0d8 <__swhatbuf_r>:
 801d0d8:	b570      	push	{r4, r5, r6, lr}
 801d0da:	460e      	mov	r6, r1
 801d0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d0e0:	2900      	cmp	r1, #0
 801d0e2:	b096      	sub	sp, #88	; 0x58
 801d0e4:	4614      	mov	r4, r2
 801d0e6:	461d      	mov	r5, r3
 801d0e8:	da07      	bge.n	801d0fa <__swhatbuf_r+0x22>
 801d0ea:	2300      	movs	r3, #0
 801d0ec:	602b      	str	r3, [r5, #0]
 801d0ee:	89b3      	ldrh	r3, [r6, #12]
 801d0f0:	061a      	lsls	r2, r3, #24
 801d0f2:	d410      	bmi.n	801d116 <__swhatbuf_r+0x3e>
 801d0f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d0f8:	e00e      	b.n	801d118 <__swhatbuf_r+0x40>
 801d0fa:	466a      	mov	r2, sp
 801d0fc:	f000 fe52 	bl	801dda4 <_fstat_r>
 801d100:	2800      	cmp	r0, #0
 801d102:	dbf2      	blt.n	801d0ea <__swhatbuf_r+0x12>
 801d104:	9a01      	ldr	r2, [sp, #4]
 801d106:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d10a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d10e:	425a      	negs	r2, r3
 801d110:	415a      	adcs	r2, r3
 801d112:	602a      	str	r2, [r5, #0]
 801d114:	e7ee      	b.n	801d0f4 <__swhatbuf_r+0x1c>
 801d116:	2340      	movs	r3, #64	; 0x40
 801d118:	2000      	movs	r0, #0
 801d11a:	6023      	str	r3, [r4, #0]
 801d11c:	b016      	add	sp, #88	; 0x58
 801d11e:	bd70      	pop	{r4, r5, r6, pc}

0801d120 <__smakebuf_r>:
 801d120:	898b      	ldrh	r3, [r1, #12]
 801d122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d124:	079d      	lsls	r5, r3, #30
 801d126:	4606      	mov	r6, r0
 801d128:	460c      	mov	r4, r1
 801d12a:	d507      	bpl.n	801d13c <__smakebuf_r+0x1c>
 801d12c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d130:	6023      	str	r3, [r4, #0]
 801d132:	6123      	str	r3, [r4, #16]
 801d134:	2301      	movs	r3, #1
 801d136:	6163      	str	r3, [r4, #20]
 801d138:	b002      	add	sp, #8
 801d13a:	bd70      	pop	{r4, r5, r6, pc}
 801d13c:	ab01      	add	r3, sp, #4
 801d13e:	466a      	mov	r2, sp
 801d140:	f7ff ffca 	bl	801d0d8 <__swhatbuf_r>
 801d144:	9900      	ldr	r1, [sp, #0]
 801d146:	4605      	mov	r5, r0
 801d148:	4630      	mov	r0, r6
 801d14a:	f7fe f93b 	bl	801b3c4 <_malloc_r>
 801d14e:	b948      	cbnz	r0, 801d164 <__smakebuf_r+0x44>
 801d150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d154:	059a      	lsls	r2, r3, #22
 801d156:	d4ef      	bmi.n	801d138 <__smakebuf_r+0x18>
 801d158:	f023 0303 	bic.w	r3, r3, #3
 801d15c:	f043 0302 	orr.w	r3, r3, #2
 801d160:	81a3      	strh	r3, [r4, #12]
 801d162:	e7e3      	b.n	801d12c <__smakebuf_r+0xc>
 801d164:	4b0d      	ldr	r3, [pc, #52]	; (801d19c <__smakebuf_r+0x7c>)
 801d166:	62b3      	str	r3, [r6, #40]	; 0x28
 801d168:	89a3      	ldrh	r3, [r4, #12]
 801d16a:	6020      	str	r0, [r4, #0]
 801d16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d170:	81a3      	strh	r3, [r4, #12]
 801d172:	9b00      	ldr	r3, [sp, #0]
 801d174:	6163      	str	r3, [r4, #20]
 801d176:	9b01      	ldr	r3, [sp, #4]
 801d178:	6120      	str	r0, [r4, #16]
 801d17a:	b15b      	cbz	r3, 801d194 <__smakebuf_r+0x74>
 801d17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d180:	4630      	mov	r0, r6
 801d182:	f000 fe21 	bl	801ddc8 <_isatty_r>
 801d186:	b128      	cbz	r0, 801d194 <__smakebuf_r+0x74>
 801d188:	89a3      	ldrh	r3, [r4, #12]
 801d18a:	f023 0303 	bic.w	r3, r3, #3
 801d18e:	f043 0301 	orr.w	r3, r3, #1
 801d192:	81a3      	strh	r3, [r4, #12]
 801d194:	89a3      	ldrh	r3, [r4, #12]
 801d196:	431d      	orrs	r5, r3
 801d198:	81a5      	strh	r5, [r4, #12]
 801d19a:	e7cd      	b.n	801d138 <__smakebuf_r+0x18>
 801d19c:	0801cf69 	.word	0x0801cf69

0801d1a0 <__ascii_mbtowc>:
 801d1a0:	b082      	sub	sp, #8
 801d1a2:	b901      	cbnz	r1, 801d1a6 <__ascii_mbtowc+0x6>
 801d1a4:	a901      	add	r1, sp, #4
 801d1a6:	b142      	cbz	r2, 801d1ba <__ascii_mbtowc+0x1a>
 801d1a8:	b14b      	cbz	r3, 801d1be <__ascii_mbtowc+0x1e>
 801d1aa:	7813      	ldrb	r3, [r2, #0]
 801d1ac:	600b      	str	r3, [r1, #0]
 801d1ae:	7812      	ldrb	r2, [r2, #0]
 801d1b0:	1c10      	adds	r0, r2, #0
 801d1b2:	bf18      	it	ne
 801d1b4:	2001      	movne	r0, #1
 801d1b6:	b002      	add	sp, #8
 801d1b8:	4770      	bx	lr
 801d1ba:	4610      	mov	r0, r2
 801d1bc:	e7fb      	b.n	801d1b6 <__ascii_mbtowc+0x16>
 801d1be:	f06f 0001 	mvn.w	r0, #1
 801d1c2:	e7f8      	b.n	801d1b6 <__ascii_mbtowc+0x16>

0801d1c4 <__malloc_lock>:
 801d1c4:	4770      	bx	lr

0801d1c6 <__malloc_unlock>:
 801d1c6:	4770      	bx	lr

0801d1c8 <_Balloc>:
 801d1c8:	b570      	push	{r4, r5, r6, lr}
 801d1ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d1cc:	4604      	mov	r4, r0
 801d1ce:	460e      	mov	r6, r1
 801d1d0:	b93d      	cbnz	r5, 801d1e2 <_Balloc+0x1a>
 801d1d2:	2010      	movs	r0, #16
 801d1d4:	f7fe f884 	bl	801b2e0 <malloc>
 801d1d8:	6260      	str	r0, [r4, #36]	; 0x24
 801d1da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d1de:	6005      	str	r5, [r0, #0]
 801d1e0:	60c5      	str	r5, [r0, #12]
 801d1e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801d1e4:	68eb      	ldr	r3, [r5, #12]
 801d1e6:	b183      	cbz	r3, 801d20a <_Balloc+0x42>
 801d1e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d1ea:	68db      	ldr	r3, [r3, #12]
 801d1ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801d1f0:	b9b8      	cbnz	r0, 801d222 <_Balloc+0x5a>
 801d1f2:	2101      	movs	r1, #1
 801d1f4:	fa01 f506 	lsl.w	r5, r1, r6
 801d1f8:	1d6a      	adds	r2, r5, #5
 801d1fa:	0092      	lsls	r2, r2, #2
 801d1fc:	4620      	mov	r0, r4
 801d1fe:	f000 fabf 	bl	801d780 <_calloc_r>
 801d202:	b160      	cbz	r0, 801d21e <_Balloc+0x56>
 801d204:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801d208:	e00e      	b.n	801d228 <_Balloc+0x60>
 801d20a:	2221      	movs	r2, #33	; 0x21
 801d20c:	2104      	movs	r1, #4
 801d20e:	4620      	mov	r0, r4
 801d210:	f000 fab6 	bl	801d780 <_calloc_r>
 801d214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d216:	60e8      	str	r0, [r5, #12]
 801d218:	68db      	ldr	r3, [r3, #12]
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d1e4      	bne.n	801d1e8 <_Balloc+0x20>
 801d21e:	2000      	movs	r0, #0
 801d220:	bd70      	pop	{r4, r5, r6, pc}
 801d222:	6802      	ldr	r2, [r0, #0]
 801d224:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801d228:	2300      	movs	r3, #0
 801d22a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d22e:	e7f7      	b.n	801d220 <_Balloc+0x58>

0801d230 <_Bfree>:
 801d230:	b570      	push	{r4, r5, r6, lr}
 801d232:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801d234:	4606      	mov	r6, r0
 801d236:	460d      	mov	r5, r1
 801d238:	b93c      	cbnz	r4, 801d24a <_Bfree+0x1a>
 801d23a:	2010      	movs	r0, #16
 801d23c:	f7fe f850 	bl	801b2e0 <malloc>
 801d240:	6270      	str	r0, [r6, #36]	; 0x24
 801d242:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d246:	6004      	str	r4, [r0, #0]
 801d248:	60c4      	str	r4, [r0, #12]
 801d24a:	b13d      	cbz	r5, 801d25c <_Bfree+0x2c>
 801d24c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d24e:	686a      	ldr	r2, [r5, #4]
 801d250:	68db      	ldr	r3, [r3, #12]
 801d252:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d256:	6029      	str	r1, [r5, #0]
 801d258:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801d25c:	bd70      	pop	{r4, r5, r6, pc}

0801d25e <__multadd>:
 801d25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d262:	690d      	ldr	r5, [r1, #16]
 801d264:	461f      	mov	r7, r3
 801d266:	4606      	mov	r6, r0
 801d268:	460c      	mov	r4, r1
 801d26a:	f101 0c14 	add.w	ip, r1, #20
 801d26e:	2300      	movs	r3, #0
 801d270:	f8dc 0000 	ldr.w	r0, [ip]
 801d274:	b281      	uxth	r1, r0
 801d276:	fb02 7101 	mla	r1, r2, r1, r7
 801d27a:	0c0f      	lsrs	r7, r1, #16
 801d27c:	0c00      	lsrs	r0, r0, #16
 801d27e:	fb02 7000 	mla	r0, r2, r0, r7
 801d282:	b289      	uxth	r1, r1
 801d284:	3301      	adds	r3, #1
 801d286:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801d28a:	429d      	cmp	r5, r3
 801d28c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801d290:	f84c 1b04 	str.w	r1, [ip], #4
 801d294:	dcec      	bgt.n	801d270 <__multadd+0x12>
 801d296:	b1d7      	cbz	r7, 801d2ce <__multadd+0x70>
 801d298:	68a3      	ldr	r3, [r4, #8]
 801d29a:	42ab      	cmp	r3, r5
 801d29c:	dc12      	bgt.n	801d2c4 <__multadd+0x66>
 801d29e:	6861      	ldr	r1, [r4, #4]
 801d2a0:	4630      	mov	r0, r6
 801d2a2:	3101      	adds	r1, #1
 801d2a4:	f7ff ff90 	bl	801d1c8 <_Balloc>
 801d2a8:	6922      	ldr	r2, [r4, #16]
 801d2aa:	3202      	adds	r2, #2
 801d2ac:	f104 010c 	add.w	r1, r4, #12
 801d2b0:	4680      	mov	r8, r0
 801d2b2:	0092      	lsls	r2, r2, #2
 801d2b4:	300c      	adds	r0, #12
 801d2b6:	f7fe f823 	bl	801b300 <memcpy>
 801d2ba:	4621      	mov	r1, r4
 801d2bc:	4630      	mov	r0, r6
 801d2be:	f7ff ffb7 	bl	801d230 <_Bfree>
 801d2c2:	4644      	mov	r4, r8
 801d2c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d2c8:	3501      	adds	r5, #1
 801d2ca:	615f      	str	r7, [r3, #20]
 801d2cc:	6125      	str	r5, [r4, #16]
 801d2ce:	4620      	mov	r0, r4
 801d2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d2d4 <__hi0bits>:
 801d2d4:	0c02      	lsrs	r2, r0, #16
 801d2d6:	0412      	lsls	r2, r2, #16
 801d2d8:	4603      	mov	r3, r0
 801d2da:	b9b2      	cbnz	r2, 801d30a <__hi0bits+0x36>
 801d2dc:	0403      	lsls	r3, r0, #16
 801d2de:	2010      	movs	r0, #16
 801d2e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d2e4:	bf04      	itt	eq
 801d2e6:	021b      	lsleq	r3, r3, #8
 801d2e8:	3008      	addeq	r0, #8
 801d2ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d2ee:	bf04      	itt	eq
 801d2f0:	011b      	lsleq	r3, r3, #4
 801d2f2:	3004      	addeq	r0, #4
 801d2f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d2f8:	bf04      	itt	eq
 801d2fa:	009b      	lsleq	r3, r3, #2
 801d2fc:	3002      	addeq	r0, #2
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	db06      	blt.n	801d310 <__hi0bits+0x3c>
 801d302:	005b      	lsls	r3, r3, #1
 801d304:	d503      	bpl.n	801d30e <__hi0bits+0x3a>
 801d306:	3001      	adds	r0, #1
 801d308:	4770      	bx	lr
 801d30a:	2000      	movs	r0, #0
 801d30c:	e7e8      	b.n	801d2e0 <__hi0bits+0xc>
 801d30e:	2020      	movs	r0, #32
 801d310:	4770      	bx	lr

0801d312 <__lo0bits>:
 801d312:	6803      	ldr	r3, [r0, #0]
 801d314:	f013 0207 	ands.w	r2, r3, #7
 801d318:	4601      	mov	r1, r0
 801d31a:	d00b      	beq.n	801d334 <__lo0bits+0x22>
 801d31c:	07da      	lsls	r2, r3, #31
 801d31e:	d423      	bmi.n	801d368 <__lo0bits+0x56>
 801d320:	0798      	lsls	r0, r3, #30
 801d322:	bf49      	itett	mi
 801d324:	085b      	lsrmi	r3, r3, #1
 801d326:	089b      	lsrpl	r3, r3, #2
 801d328:	2001      	movmi	r0, #1
 801d32a:	600b      	strmi	r3, [r1, #0]
 801d32c:	bf5c      	itt	pl
 801d32e:	600b      	strpl	r3, [r1, #0]
 801d330:	2002      	movpl	r0, #2
 801d332:	4770      	bx	lr
 801d334:	b298      	uxth	r0, r3
 801d336:	b9a8      	cbnz	r0, 801d364 <__lo0bits+0x52>
 801d338:	0c1b      	lsrs	r3, r3, #16
 801d33a:	2010      	movs	r0, #16
 801d33c:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d340:	bf04      	itt	eq
 801d342:	0a1b      	lsreq	r3, r3, #8
 801d344:	3008      	addeq	r0, #8
 801d346:	071a      	lsls	r2, r3, #28
 801d348:	bf04      	itt	eq
 801d34a:	091b      	lsreq	r3, r3, #4
 801d34c:	3004      	addeq	r0, #4
 801d34e:	079a      	lsls	r2, r3, #30
 801d350:	bf04      	itt	eq
 801d352:	089b      	lsreq	r3, r3, #2
 801d354:	3002      	addeq	r0, #2
 801d356:	07da      	lsls	r2, r3, #31
 801d358:	d402      	bmi.n	801d360 <__lo0bits+0x4e>
 801d35a:	085b      	lsrs	r3, r3, #1
 801d35c:	d006      	beq.n	801d36c <__lo0bits+0x5a>
 801d35e:	3001      	adds	r0, #1
 801d360:	600b      	str	r3, [r1, #0]
 801d362:	4770      	bx	lr
 801d364:	4610      	mov	r0, r2
 801d366:	e7e9      	b.n	801d33c <__lo0bits+0x2a>
 801d368:	2000      	movs	r0, #0
 801d36a:	4770      	bx	lr
 801d36c:	2020      	movs	r0, #32
 801d36e:	4770      	bx	lr

0801d370 <__i2b>:
 801d370:	b510      	push	{r4, lr}
 801d372:	460c      	mov	r4, r1
 801d374:	2101      	movs	r1, #1
 801d376:	f7ff ff27 	bl	801d1c8 <_Balloc>
 801d37a:	2201      	movs	r2, #1
 801d37c:	6144      	str	r4, [r0, #20]
 801d37e:	6102      	str	r2, [r0, #16]
 801d380:	bd10      	pop	{r4, pc}

0801d382 <__multiply>:
 801d382:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d386:	4614      	mov	r4, r2
 801d388:	690a      	ldr	r2, [r1, #16]
 801d38a:	6923      	ldr	r3, [r4, #16]
 801d38c:	429a      	cmp	r2, r3
 801d38e:	bfb8      	it	lt
 801d390:	460b      	movlt	r3, r1
 801d392:	4688      	mov	r8, r1
 801d394:	bfbc      	itt	lt
 801d396:	46a0      	movlt	r8, r4
 801d398:	461c      	movlt	r4, r3
 801d39a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d39e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d3a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d3a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d3aa:	eb07 0609 	add.w	r6, r7, r9
 801d3ae:	42b3      	cmp	r3, r6
 801d3b0:	bfb8      	it	lt
 801d3b2:	3101      	addlt	r1, #1
 801d3b4:	f7ff ff08 	bl	801d1c8 <_Balloc>
 801d3b8:	f100 0514 	add.w	r5, r0, #20
 801d3bc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801d3c0:	462b      	mov	r3, r5
 801d3c2:	2200      	movs	r2, #0
 801d3c4:	4573      	cmp	r3, lr
 801d3c6:	d316      	bcc.n	801d3f6 <__multiply+0x74>
 801d3c8:	f104 0214 	add.w	r2, r4, #20
 801d3cc:	f108 0114 	add.w	r1, r8, #20
 801d3d0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801d3d4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801d3d8:	9300      	str	r3, [sp, #0]
 801d3da:	9b00      	ldr	r3, [sp, #0]
 801d3dc:	9201      	str	r2, [sp, #4]
 801d3de:	4293      	cmp	r3, r2
 801d3e0:	d80c      	bhi.n	801d3fc <__multiply+0x7a>
 801d3e2:	2e00      	cmp	r6, #0
 801d3e4:	dd03      	ble.n	801d3ee <__multiply+0x6c>
 801d3e6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d05d      	beq.n	801d4aa <__multiply+0x128>
 801d3ee:	6106      	str	r6, [r0, #16]
 801d3f0:	b003      	add	sp, #12
 801d3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3f6:	f843 2b04 	str.w	r2, [r3], #4
 801d3fa:	e7e3      	b.n	801d3c4 <__multiply+0x42>
 801d3fc:	f8b2 b000 	ldrh.w	fp, [r2]
 801d400:	f1bb 0f00 	cmp.w	fp, #0
 801d404:	d023      	beq.n	801d44e <__multiply+0xcc>
 801d406:	4689      	mov	r9, r1
 801d408:	46ac      	mov	ip, r5
 801d40a:	f04f 0800 	mov.w	r8, #0
 801d40e:	f859 4b04 	ldr.w	r4, [r9], #4
 801d412:	f8dc a000 	ldr.w	sl, [ip]
 801d416:	b2a3      	uxth	r3, r4
 801d418:	fa1f fa8a 	uxth.w	sl, sl
 801d41c:	fb0b a303 	mla	r3, fp, r3, sl
 801d420:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d424:	f8dc 4000 	ldr.w	r4, [ip]
 801d428:	4443      	add	r3, r8
 801d42a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801d42e:	fb0b 840a 	mla	r4, fp, sl, r8
 801d432:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801d436:	46e2      	mov	sl, ip
 801d438:	b29b      	uxth	r3, r3
 801d43a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d43e:	454f      	cmp	r7, r9
 801d440:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801d444:	f84a 3b04 	str.w	r3, [sl], #4
 801d448:	d82b      	bhi.n	801d4a2 <__multiply+0x120>
 801d44a:	f8cc 8004 	str.w	r8, [ip, #4]
 801d44e:	9b01      	ldr	r3, [sp, #4]
 801d450:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801d454:	3204      	adds	r2, #4
 801d456:	f1ba 0f00 	cmp.w	sl, #0
 801d45a:	d020      	beq.n	801d49e <__multiply+0x11c>
 801d45c:	682b      	ldr	r3, [r5, #0]
 801d45e:	4689      	mov	r9, r1
 801d460:	46a8      	mov	r8, r5
 801d462:	f04f 0b00 	mov.w	fp, #0
 801d466:	f8b9 c000 	ldrh.w	ip, [r9]
 801d46a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801d46e:	fb0a 440c 	mla	r4, sl, ip, r4
 801d472:	445c      	add	r4, fp
 801d474:	46c4      	mov	ip, r8
 801d476:	b29b      	uxth	r3, r3
 801d478:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d47c:	f84c 3b04 	str.w	r3, [ip], #4
 801d480:	f859 3b04 	ldr.w	r3, [r9], #4
 801d484:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801d488:	0c1b      	lsrs	r3, r3, #16
 801d48a:	fb0a b303 	mla	r3, sl, r3, fp
 801d48e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801d492:	454f      	cmp	r7, r9
 801d494:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801d498:	d805      	bhi.n	801d4a6 <__multiply+0x124>
 801d49a:	f8c8 3004 	str.w	r3, [r8, #4]
 801d49e:	3504      	adds	r5, #4
 801d4a0:	e79b      	b.n	801d3da <__multiply+0x58>
 801d4a2:	46d4      	mov	ip, sl
 801d4a4:	e7b3      	b.n	801d40e <__multiply+0x8c>
 801d4a6:	46e0      	mov	r8, ip
 801d4a8:	e7dd      	b.n	801d466 <__multiply+0xe4>
 801d4aa:	3e01      	subs	r6, #1
 801d4ac:	e799      	b.n	801d3e2 <__multiply+0x60>
	...

0801d4b0 <__pow5mult>:
 801d4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d4b4:	4615      	mov	r5, r2
 801d4b6:	f012 0203 	ands.w	r2, r2, #3
 801d4ba:	4606      	mov	r6, r0
 801d4bc:	460f      	mov	r7, r1
 801d4be:	d007      	beq.n	801d4d0 <__pow5mult+0x20>
 801d4c0:	3a01      	subs	r2, #1
 801d4c2:	4c21      	ldr	r4, [pc, #132]	; (801d548 <__pow5mult+0x98>)
 801d4c4:	2300      	movs	r3, #0
 801d4c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d4ca:	f7ff fec8 	bl	801d25e <__multadd>
 801d4ce:	4607      	mov	r7, r0
 801d4d0:	10ad      	asrs	r5, r5, #2
 801d4d2:	d035      	beq.n	801d540 <__pow5mult+0x90>
 801d4d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d4d6:	b93c      	cbnz	r4, 801d4e8 <__pow5mult+0x38>
 801d4d8:	2010      	movs	r0, #16
 801d4da:	f7fd ff01 	bl	801b2e0 <malloc>
 801d4de:	6270      	str	r0, [r6, #36]	; 0x24
 801d4e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d4e4:	6004      	str	r4, [r0, #0]
 801d4e6:	60c4      	str	r4, [r0, #12]
 801d4e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d4ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d4f0:	b94c      	cbnz	r4, 801d506 <__pow5mult+0x56>
 801d4f2:	f240 2171 	movw	r1, #625	; 0x271
 801d4f6:	4630      	mov	r0, r6
 801d4f8:	f7ff ff3a 	bl	801d370 <__i2b>
 801d4fc:	2300      	movs	r3, #0
 801d4fe:	f8c8 0008 	str.w	r0, [r8, #8]
 801d502:	4604      	mov	r4, r0
 801d504:	6003      	str	r3, [r0, #0]
 801d506:	f04f 0800 	mov.w	r8, #0
 801d50a:	07eb      	lsls	r3, r5, #31
 801d50c:	d50a      	bpl.n	801d524 <__pow5mult+0x74>
 801d50e:	4639      	mov	r1, r7
 801d510:	4622      	mov	r2, r4
 801d512:	4630      	mov	r0, r6
 801d514:	f7ff ff35 	bl	801d382 <__multiply>
 801d518:	4639      	mov	r1, r7
 801d51a:	4681      	mov	r9, r0
 801d51c:	4630      	mov	r0, r6
 801d51e:	f7ff fe87 	bl	801d230 <_Bfree>
 801d522:	464f      	mov	r7, r9
 801d524:	106d      	asrs	r5, r5, #1
 801d526:	d00b      	beq.n	801d540 <__pow5mult+0x90>
 801d528:	6820      	ldr	r0, [r4, #0]
 801d52a:	b938      	cbnz	r0, 801d53c <__pow5mult+0x8c>
 801d52c:	4622      	mov	r2, r4
 801d52e:	4621      	mov	r1, r4
 801d530:	4630      	mov	r0, r6
 801d532:	f7ff ff26 	bl	801d382 <__multiply>
 801d536:	6020      	str	r0, [r4, #0]
 801d538:	f8c0 8000 	str.w	r8, [r0]
 801d53c:	4604      	mov	r4, r0
 801d53e:	e7e4      	b.n	801d50a <__pow5mult+0x5a>
 801d540:	4638      	mov	r0, r7
 801d542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d546:	bf00      	nop
 801d548:	0801f068 	.word	0x0801f068

0801d54c <__lshift>:
 801d54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d550:	460c      	mov	r4, r1
 801d552:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d556:	6923      	ldr	r3, [r4, #16]
 801d558:	6849      	ldr	r1, [r1, #4]
 801d55a:	eb0a 0903 	add.w	r9, sl, r3
 801d55e:	68a3      	ldr	r3, [r4, #8]
 801d560:	4607      	mov	r7, r0
 801d562:	4616      	mov	r6, r2
 801d564:	f109 0501 	add.w	r5, r9, #1
 801d568:	42ab      	cmp	r3, r5
 801d56a:	db32      	blt.n	801d5d2 <__lshift+0x86>
 801d56c:	4638      	mov	r0, r7
 801d56e:	f7ff fe2b 	bl	801d1c8 <_Balloc>
 801d572:	2300      	movs	r3, #0
 801d574:	4680      	mov	r8, r0
 801d576:	f100 0114 	add.w	r1, r0, #20
 801d57a:	461a      	mov	r2, r3
 801d57c:	4553      	cmp	r3, sl
 801d57e:	db2b      	blt.n	801d5d8 <__lshift+0x8c>
 801d580:	6920      	ldr	r0, [r4, #16]
 801d582:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d586:	f104 0314 	add.w	r3, r4, #20
 801d58a:	f016 021f 	ands.w	r2, r6, #31
 801d58e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d592:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d596:	d025      	beq.n	801d5e4 <__lshift+0x98>
 801d598:	f1c2 0e20 	rsb	lr, r2, #32
 801d59c:	2000      	movs	r0, #0
 801d59e:	681e      	ldr	r6, [r3, #0]
 801d5a0:	468a      	mov	sl, r1
 801d5a2:	4096      	lsls	r6, r2
 801d5a4:	4330      	orrs	r0, r6
 801d5a6:	f84a 0b04 	str.w	r0, [sl], #4
 801d5aa:	f853 0b04 	ldr.w	r0, [r3], #4
 801d5ae:	459c      	cmp	ip, r3
 801d5b0:	fa20 f00e 	lsr.w	r0, r0, lr
 801d5b4:	d814      	bhi.n	801d5e0 <__lshift+0x94>
 801d5b6:	6048      	str	r0, [r1, #4]
 801d5b8:	b108      	cbz	r0, 801d5be <__lshift+0x72>
 801d5ba:	f109 0502 	add.w	r5, r9, #2
 801d5be:	3d01      	subs	r5, #1
 801d5c0:	4638      	mov	r0, r7
 801d5c2:	f8c8 5010 	str.w	r5, [r8, #16]
 801d5c6:	4621      	mov	r1, r4
 801d5c8:	f7ff fe32 	bl	801d230 <_Bfree>
 801d5cc:	4640      	mov	r0, r8
 801d5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d5d2:	3101      	adds	r1, #1
 801d5d4:	005b      	lsls	r3, r3, #1
 801d5d6:	e7c7      	b.n	801d568 <__lshift+0x1c>
 801d5d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801d5dc:	3301      	adds	r3, #1
 801d5de:	e7cd      	b.n	801d57c <__lshift+0x30>
 801d5e0:	4651      	mov	r1, sl
 801d5e2:	e7dc      	b.n	801d59e <__lshift+0x52>
 801d5e4:	3904      	subs	r1, #4
 801d5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d5ea:	f841 2f04 	str.w	r2, [r1, #4]!
 801d5ee:	459c      	cmp	ip, r3
 801d5f0:	d8f9      	bhi.n	801d5e6 <__lshift+0x9a>
 801d5f2:	e7e4      	b.n	801d5be <__lshift+0x72>

0801d5f4 <__mcmp>:
 801d5f4:	6903      	ldr	r3, [r0, #16]
 801d5f6:	690a      	ldr	r2, [r1, #16]
 801d5f8:	1a9b      	subs	r3, r3, r2
 801d5fa:	b530      	push	{r4, r5, lr}
 801d5fc:	d10c      	bne.n	801d618 <__mcmp+0x24>
 801d5fe:	0092      	lsls	r2, r2, #2
 801d600:	3014      	adds	r0, #20
 801d602:	3114      	adds	r1, #20
 801d604:	1884      	adds	r4, r0, r2
 801d606:	4411      	add	r1, r2
 801d608:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d60c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d610:	4295      	cmp	r5, r2
 801d612:	d003      	beq.n	801d61c <__mcmp+0x28>
 801d614:	d305      	bcc.n	801d622 <__mcmp+0x2e>
 801d616:	2301      	movs	r3, #1
 801d618:	4618      	mov	r0, r3
 801d61a:	bd30      	pop	{r4, r5, pc}
 801d61c:	42a0      	cmp	r0, r4
 801d61e:	d3f3      	bcc.n	801d608 <__mcmp+0x14>
 801d620:	e7fa      	b.n	801d618 <__mcmp+0x24>
 801d622:	f04f 33ff 	mov.w	r3, #4294967295
 801d626:	e7f7      	b.n	801d618 <__mcmp+0x24>

0801d628 <__mdiff>:
 801d628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d62c:	460d      	mov	r5, r1
 801d62e:	4607      	mov	r7, r0
 801d630:	4611      	mov	r1, r2
 801d632:	4628      	mov	r0, r5
 801d634:	4614      	mov	r4, r2
 801d636:	f7ff ffdd 	bl	801d5f4 <__mcmp>
 801d63a:	1e06      	subs	r6, r0, #0
 801d63c:	d108      	bne.n	801d650 <__mdiff+0x28>
 801d63e:	4631      	mov	r1, r6
 801d640:	4638      	mov	r0, r7
 801d642:	f7ff fdc1 	bl	801d1c8 <_Balloc>
 801d646:	2301      	movs	r3, #1
 801d648:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801d64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d650:	bfa4      	itt	ge
 801d652:	4623      	movge	r3, r4
 801d654:	462c      	movge	r4, r5
 801d656:	4638      	mov	r0, r7
 801d658:	6861      	ldr	r1, [r4, #4]
 801d65a:	bfa6      	itte	ge
 801d65c:	461d      	movge	r5, r3
 801d65e:	2600      	movge	r6, #0
 801d660:	2601      	movlt	r6, #1
 801d662:	f7ff fdb1 	bl	801d1c8 <_Balloc>
 801d666:	692b      	ldr	r3, [r5, #16]
 801d668:	60c6      	str	r6, [r0, #12]
 801d66a:	6926      	ldr	r6, [r4, #16]
 801d66c:	f105 0914 	add.w	r9, r5, #20
 801d670:	f104 0214 	add.w	r2, r4, #20
 801d674:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801d678:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801d67c:	f100 0514 	add.w	r5, r0, #20
 801d680:	f04f 0e00 	mov.w	lr, #0
 801d684:	f852 ab04 	ldr.w	sl, [r2], #4
 801d688:	f859 4b04 	ldr.w	r4, [r9], #4
 801d68c:	fa1e f18a 	uxtah	r1, lr, sl
 801d690:	b2a3      	uxth	r3, r4
 801d692:	1ac9      	subs	r1, r1, r3
 801d694:	0c23      	lsrs	r3, r4, #16
 801d696:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801d69a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801d69e:	b289      	uxth	r1, r1
 801d6a0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801d6a4:	45c8      	cmp	r8, r9
 801d6a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801d6aa:	4694      	mov	ip, r2
 801d6ac:	f845 3b04 	str.w	r3, [r5], #4
 801d6b0:	d8e8      	bhi.n	801d684 <__mdiff+0x5c>
 801d6b2:	45bc      	cmp	ip, r7
 801d6b4:	d304      	bcc.n	801d6c0 <__mdiff+0x98>
 801d6b6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801d6ba:	b183      	cbz	r3, 801d6de <__mdiff+0xb6>
 801d6bc:	6106      	str	r6, [r0, #16]
 801d6be:	e7c5      	b.n	801d64c <__mdiff+0x24>
 801d6c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d6c4:	fa1e f381 	uxtah	r3, lr, r1
 801d6c8:	141a      	asrs	r2, r3, #16
 801d6ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d6ce:	b29b      	uxth	r3, r3
 801d6d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d6d4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801d6d8:	f845 3b04 	str.w	r3, [r5], #4
 801d6dc:	e7e9      	b.n	801d6b2 <__mdiff+0x8a>
 801d6de:	3e01      	subs	r6, #1
 801d6e0:	e7e9      	b.n	801d6b6 <__mdiff+0x8e>

0801d6e2 <__d2b>:
 801d6e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d6e6:	460e      	mov	r6, r1
 801d6e8:	2101      	movs	r1, #1
 801d6ea:	ec59 8b10 	vmov	r8, r9, d0
 801d6ee:	4615      	mov	r5, r2
 801d6f0:	f7ff fd6a 	bl	801d1c8 <_Balloc>
 801d6f4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801d6f8:	4607      	mov	r7, r0
 801d6fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d6fe:	bb34      	cbnz	r4, 801d74e <__d2b+0x6c>
 801d700:	9301      	str	r3, [sp, #4]
 801d702:	f1b8 0300 	subs.w	r3, r8, #0
 801d706:	d027      	beq.n	801d758 <__d2b+0x76>
 801d708:	a802      	add	r0, sp, #8
 801d70a:	f840 3d08 	str.w	r3, [r0, #-8]!
 801d70e:	f7ff fe00 	bl	801d312 <__lo0bits>
 801d712:	9900      	ldr	r1, [sp, #0]
 801d714:	b1f0      	cbz	r0, 801d754 <__d2b+0x72>
 801d716:	9a01      	ldr	r2, [sp, #4]
 801d718:	f1c0 0320 	rsb	r3, r0, #32
 801d71c:	fa02 f303 	lsl.w	r3, r2, r3
 801d720:	430b      	orrs	r3, r1
 801d722:	40c2      	lsrs	r2, r0
 801d724:	617b      	str	r3, [r7, #20]
 801d726:	9201      	str	r2, [sp, #4]
 801d728:	9b01      	ldr	r3, [sp, #4]
 801d72a:	61bb      	str	r3, [r7, #24]
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	bf14      	ite	ne
 801d730:	2102      	movne	r1, #2
 801d732:	2101      	moveq	r1, #1
 801d734:	6139      	str	r1, [r7, #16]
 801d736:	b1c4      	cbz	r4, 801d76a <__d2b+0x88>
 801d738:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801d73c:	4404      	add	r4, r0
 801d73e:	6034      	str	r4, [r6, #0]
 801d740:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d744:	6028      	str	r0, [r5, #0]
 801d746:	4638      	mov	r0, r7
 801d748:	b003      	add	sp, #12
 801d74a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d74e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d752:	e7d5      	b.n	801d700 <__d2b+0x1e>
 801d754:	6179      	str	r1, [r7, #20]
 801d756:	e7e7      	b.n	801d728 <__d2b+0x46>
 801d758:	a801      	add	r0, sp, #4
 801d75a:	f7ff fdda 	bl	801d312 <__lo0bits>
 801d75e:	9b01      	ldr	r3, [sp, #4]
 801d760:	617b      	str	r3, [r7, #20]
 801d762:	2101      	movs	r1, #1
 801d764:	6139      	str	r1, [r7, #16]
 801d766:	3020      	adds	r0, #32
 801d768:	e7e5      	b.n	801d736 <__d2b+0x54>
 801d76a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801d76e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d772:	6030      	str	r0, [r6, #0]
 801d774:	6918      	ldr	r0, [r3, #16]
 801d776:	f7ff fdad 	bl	801d2d4 <__hi0bits>
 801d77a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801d77e:	e7e1      	b.n	801d744 <__d2b+0x62>

0801d780 <_calloc_r>:
 801d780:	b538      	push	{r3, r4, r5, lr}
 801d782:	fb02 f401 	mul.w	r4, r2, r1
 801d786:	4621      	mov	r1, r4
 801d788:	f7fd fe1c 	bl	801b3c4 <_malloc_r>
 801d78c:	4605      	mov	r5, r0
 801d78e:	b118      	cbz	r0, 801d798 <_calloc_r+0x18>
 801d790:	4622      	mov	r2, r4
 801d792:	2100      	movs	r1, #0
 801d794:	f7fd fdbf 	bl	801b316 <memset>
 801d798:	4628      	mov	r0, r5
 801d79a:	bd38      	pop	{r3, r4, r5, pc}

0801d79c <__ssputs_r>:
 801d79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d7a0:	688e      	ldr	r6, [r1, #8]
 801d7a2:	429e      	cmp	r6, r3
 801d7a4:	4682      	mov	sl, r0
 801d7a6:	460c      	mov	r4, r1
 801d7a8:	4690      	mov	r8, r2
 801d7aa:	4699      	mov	r9, r3
 801d7ac:	d837      	bhi.n	801d81e <__ssputs_r+0x82>
 801d7ae:	898a      	ldrh	r2, [r1, #12]
 801d7b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d7b4:	d031      	beq.n	801d81a <__ssputs_r+0x7e>
 801d7b6:	6825      	ldr	r5, [r4, #0]
 801d7b8:	6909      	ldr	r1, [r1, #16]
 801d7ba:	1a6f      	subs	r7, r5, r1
 801d7bc:	6965      	ldr	r5, [r4, #20]
 801d7be:	2302      	movs	r3, #2
 801d7c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d7c4:	fb95 f5f3 	sdiv	r5, r5, r3
 801d7c8:	f109 0301 	add.w	r3, r9, #1
 801d7cc:	443b      	add	r3, r7
 801d7ce:	429d      	cmp	r5, r3
 801d7d0:	bf38      	it	cc
 801d7d2:	461d      	movcc	r5, r3
 801d7d4:	0553      	lsls	r3, r2, #21
 801d7d6:	d530      	bpl.n	801d83a <__ssputs_r+0x9e>
 801d7d8:	4629      	mov	r1, r5
 801d7da:	f7fd fdf3 	bl	801b3c4 <_malloc_r>
 801d7de:	4606      	mov	r6, r0
 801d7e0:	b950      	cbnz	r0, 801d7f8 <__ssputs_r+0x5c>
 801d7e2:	230c      	movs	r3, #12
 801d7e4:	f8ca 3000 	str.w	r3, [sl]
 801d7e8:	89a3      	ldrh	r3, [r4, #12]
 801d7ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d7ee:	81a3      	strh	r3, [r4, #12]
 801d7f0:	f04f 30ff 	mov.w	r0, #4294967295
 801d7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d7f8:	463a      	mov	r2, r7
 801d7fa:	6921      	ldr	r1, [r4, #16]
 801d7fc:	f7fd fd80 	bl	801b300 <memcpy>
 801d800:	89a3      	ldrh	r3, [r4, #12]
 801d802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d80a:	81a3      	strh	r3, [r4, #12]
 801d80c:	6126      	str	r6, [r4, #16]
 801d80e:	6165      	str	r5, [r4, #20]
 801d810:	443e      	add	r6, r7
 801d812:	1bed      	subs	r5, r5, r7
 801d814:	6026      	str	r6, [r4, #0]
 801d816:	60a5      	str	r5, [r4, #8]
 801d818:	464e      	mov	r6, r9
 801d81a:	454e      	cmp	r6, r9
 801d81c:	d900      	bls.n	801d820 <__ssputs_r+0x84>
 801d81e:	464e      	mov	r6, r9
 801d820:	4632      	mov	r2, r6
 801d822:	4641      	mov	r1, r8
 801d824:	6820      	ldr	r0, [r4, #0]
 801d826:	f000 faf1 	bl	801de0c <memmove>
 801d82a:	68a3      	ldr	r3, [r4, #8]
 801d82c:	1b9b      	subs	r3, r3, r6
 801d82e:	60a3      	str	r3, [r4, #8]
 801d830:	6823      	ldr	r3, [r4, #0]
 801d832:	441e      	add	r6, r3
 801d834:	6026      	str	r6, [r4, #0]
 801d836:	2000      	movs	r0, #0
 801d838:	e7dc      	b.n	801d7f4 <__ssputs_r+0x58>
 801d83a:	462a      	mov	r2, r5
 801d83c:	f000 faff 	bl	801de3e <_realloc_r>
 801d840:	4606      	mov	r6, r0
 801d842:	2800      	cmp	r0, #0
 801d844:	d1e2      	bne.n	801d80c <__ssputs_r+0x70>
 801d846:	6921      	ldr	r1, [r4, #16]
 801d848:	4650      	mov	r0, sl
 801d84a:	f7fd fd6d 	bl	801b328 <_free_r>
 801d84e:	e7c8      	b.n	801d7e2 <__ssputs_r+0x46>

0801d850 <_svfiprintf_r>:
 801d850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d854:	461d      	mov	r5, r3
 801d856:	898b      	ldrh	r3, [r1, #12]
 801d858:	061f      	lsls	r7, r3, #24
 801d85a:	b09d      	sub	sp, #116	; 0x74
 801d85c:	4680      	mov	r8, r0
 801d85e:	460c      	mov	r4, r1
 801d860:	4616      	mov	r6, r2
 801d862:	d50f      	bpl.n	801d884 <_svfiprintf_r+0x34>
 801d864:	690b      	ldr	r3, [r1, #16]
 801d866:	b96b      	cbnz	r3, 801d884 <_svfiprintf_r+0x34>
 801d868:	2140      	movs	r1, #64	; 0x40
 801d86a:	f7fd fdab 	bl	801b3c4 <_malloc_r>
 801d86e:	6020      	str	r0, [r4, #0]
 801d870:	6120      	str	r0, [r4, #16]
 801d872:	b928      	cbnz	r0, 801d880 <_svfiprintf_r+0x30>
 801d874:	230c      	movs	r3, #12
 801d876:	f8c8 3000 	str.w	r3, [r8]
 801d87a:	f04f 30ff 	mov.w	r0, #4294967295
 801d87e:	e0c8      	b.n	801da12 <_svfiprintf_r+0x1c2>
 801d880:	2340      	movs	r3, #64	; 0x40
 801d882:	6163      	str	r3, [r4, #20]
 801d884:	2300      	movs	r3, #0
 801d886:	9309      	str	r3, [sp, #36]	; 0x24
 801d888:	2320      	movs	r3, #32
 801d88a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d88e:	2330      	movs	r3, #48	; 0x30
 801d890:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d894:	9503      	str	r5, [sp, #12]
 801d896:	f04f 0b01 	mov.w	fp, #1
 801d89a:	4637      	mov	r7, r6
 801d89c:	463d      	mov	r5, r7
 801d89e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d8a2:	b10b      	cbz	r3, 801d8a8 <_svfiprintf_r+0x58>
 801d8a4:	2b25      	cmp	r3, #37	; 0x25
 801d8a6:	d13e      	bne.n	801d926 <_svfiprintf_r+0xd6>
 801d8a8:	ebb7 0a06 	subs.w	sl, r7, r6
 801d8ac:	d00b      	beq.n	801d8c6 <_svfiprintf_r+0x76>
 801d8ae:	4653      	mov	r3, sl
 801d8b0:	4632      	mov	r2, r6
 801d8b2:	4621      	mov	r1, r4
 801d8b4:	4640      	mov	r0, r8
 801d8b6:	f7ff ff71 	bl	801d79c <__ssputs_r>
 801d8ba:	3001      	adds	r0, #1
 801d8bc:	f000 80a4 	beq.w	801da08 <_svfiprintf_r+0x1b8>
 801d8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d8c2:	4453      	add	r3, sl
 801d8c4:	9309      	str	r3, [sp, #36]	; 0x24
 801d8c6:	783b      	ldrb	r3, [r7, #0]
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	f000 809d 	beq.w	801da08 <_svfiprintf_r+0x1b8>
 801d8ce:	2300      	movs	r3, #0
 801d8d0:	f04f 32ff 	mov.w	r2, #4294967295
 801d8d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d8d8:	9304      	str	r3, [sp, #16]
 801d8da:	9307      	str	r3, [sp, #28]
 801d8dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d8e0:	931a      	str	r3, [sp, #104]	; 0x68
 801d8e2:	462f      	mov	r7, r5
 801d8e4:	2205      	movs	r2, #5
 801d8e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 801d8ea:	4850      	ldr	r0, [pc, #320]	; (801da2c <_svfiprintf_r+0x1dc>)
 801d8ec:	f7e2 fd00 	bl	80002f0 <memchr>
 801d8f0:	9b04      	ldr	r3, [sp, #16]
 801d8f2:	b9d0      	cbnz	r0, 801d92a <_svfiprintf_r+0xda>
 801d8f4:	06d9      	lsls	r1, r3, #27
 801d8f6:	bf44      	itt	mi
 801d8f8:	2220      	movmi	r2, #32
 801d8fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d8fe:	071a      	lsls	r2, r3, #28
 801d900:	bf44      	itt	mi
 801d902:	222b      	movmi	r2, #43	; 0x2b
 801d904:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d908:	782a      	ldrb	r2, [r5, #0]
 801d90a:	2a2a      	cmp	r2, #42	; 0x2a
 801d90c:	d015      	beq.n	801d93a <_svfiprintf_r+0xea>
 801d90e:	9a07      	ldr	r2, [sp, #28]
 801d910:	462f      	mov	r7, r5
 801d912:	2000      	movs	r0, #0
 801d914:	250a      	movs	r5, #10
 801d916:	4639      	mov	r1, r7
 801d918:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d91c:	3b30      	subs	r3, #48	; 0x30
 801d91e:	2b09      	cmp	r3, #9
 801d920:	d94d      	bls.n	801d9be <_svfiprintf_r+0x16e>
 801d922:	b1b8      	cbz	r0, 801d954 <_svfiprintf_r+0x104>
 801d924:	e00f      	b.n	801d946 <_svfiprintf_r+0xf6>
 801d926:	462f      	mov	r7, r5
 801d928:	e7b8      	b.n	801d89c <_svfiprintf_r+0x4c>
 801d92a:	4a40      	ldr	r2, [pc, #256]	; (801da2c <_svfiprintf_r+0x1dc>)
 801d92c:	1a80      	subs	r0, r0, r2
 801d92e:	fa0b f000 	lsl.w	r0, fp, r0
 801d932:	4318      	orrs	r0, r3
 801d934:	9004      	str	r0, [sp, #16]
 801d936:	463d      	mov	r5, r7
 801d938:	e7d3      	b.n	801d8e2 <_svfiprintf_r+0x92>
 801d93a:	9a03      	ldr	r2, [sp, #12]
 801d93c:	1d11      	adds	r1, r2, #4
 801d93e:	6812      	ldr	r2, [r2, #0]
 801d940:	9103      	str	r1, [sp, #12]
 801d942:	2a00      	cmp	r2, #0
 801d944:	db01      	blt.n	801d94a <_svfiprintf_r+0xfa>
 801d946:	9207      	str	r2, [sp, #28]
 801d948:	e004      	b.n	801d954 <_svfiprintf_r+0x104>
 801d94a:	4252      	negs	r2, r2
 801d94c:	f043 0302 	orr.w	r3, r3, #2
 801d950:	9207      	str	r2, [sp, #28]
 801d952:	9304      	str	r3, [sp, #16]
 801d954:	783b      	ldrb	r3, [r7, #0]
 801d956:	2b2e      	cmp	r3, #46	; 0x2e
 801d958:	d10c      	bne.n	801d974 <_svfiprintf_r+0x124>
 801d95a:	787b      	ldrb	r3, [r7, #1]
 801d95c:	2b2a      	cmp	r3, #42	; 0x2a
 801d95e:	d133      	bne.n	801d9c8 <_svfiprintf_r+0x178>
 801d960:	9b03      	ldr	r3, [sp, #12]
 801d962:	1d1a      	adds	r2, r3, #4
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	9203      	str	r2, [sp, #12]
 801d968:	2b00      	cmp	r3, #0
 801d96a:	bfb8      	it	lt
 801d96c:	f04f 33ff 	movlt.w	r3, #4294967295
 801d970:	3702      	adds	r7, #2
 801d972:	9305      	str	r3, [sp, #20]
 801d974:	4d2e      	ldr	r5, [pc, #184]	; (801da30 <_svfiprintf_r+0x1e0>)
 801d976:	7839      	ldrb	r1, [r7, #0]
 801d978:	2203      	movs	r2, #3
 801d97a:	4628      	mov	r0, r5
 801d97c:	f7e2 fcb8 	bl	80002f0 <memchr>
 801d980:	b138      	cbz	r0, 801d992 <_svfiprintf_r+0x142>
 801d982:	2340      	movs	r3, #64	; 0x40
 801d984:	1b40      	subs	r0, r0, r5
 801d986:	fa03 f000 	lsl.w	r0, r3, r0
 801d98a:	9b04      	ldr	r3, [sp, #16]
 801d98c:	4303      	orrs	r3, r0
 801d98e:	3701      	adds	r7, #1
 801d990:	9304      	str	r3, [sp, #16]
 801d992:	7839      	ldrb	r1, [r7, #0]
 801d994:	4827      	ldr	r0, [pc, #156]	; (801da34 <_svfiprintf_r+0x1e4>)
 801d996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d99a:	2206      	movs	r2, #6
 801d99c:	1c7e      	adds	r6, r7, #1
 801d99e:	f7e2 fca7 	bl	80002f0 <memchr>
 801d9a2:	2800      	cmp	r0, #0
 801d9a4:	d038      	beq.n	801da18 <_svfiprintf_r+0x1c8>
 801d9a6:	4b24      	ldr	r3, [pc, #144]	; (801da38 <_svfiprintf_r+0x1e8>)
 801d9a8:	bb13      	cbnz	r3, 801d9f0 <_svfiprintf_r+0x1a0>
 801d9aa:	9b03      	ldr	r3, [sp, #12]
 801d9ac:	3307      	adds	r3, #7
 801d9ae:	f023 0307 	bic.w	r3, r3, #7
 801d9b2:	3308      	adds	r3, #8
 801d9b4:	9303      	str	r3, [sp, #12]
 801d9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9b8:	444b      	add	r3, r9
 801d9ba:	9309      	str	r3, [sp, #36]	; 0x24
 801d9bc:	e76d      	b.n	801d89a <_svfiprintf_r+0x4a>
 801d9be:	fb05 3202 	mla	r2, r5, r2, r3
 801d9c2:	2001      	movs	r0, #1
 801d9c4:	460f      	mov	r7, r1
 801d9c6:	e7a6      	b.n	801d916 <_svfiprintf_r+0xc6>
 801d9c8:	2300      	movs	r3, #0
 801d9ca:	3701      	adds	r7, #1
 801d9cc:	9305      	str	r3, [sp, #20]
 801d9ce:	4619      	mov	r1, r3
 801d9d0:	250a      	movs	r5, #10
 801d9d2:	4638      	mov	r0, r7
 801d9d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d9d8:	3a30      	subs	r2, #48	; 0x30
 801d9da:	2a09      	cmp	r2, #9
 801d9dc:	d903      	bls.n	801d9e6 <_svfiprintf_r+0x196>
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d0c8      	beq.n	801d974 <_svfiprintf_r+0x124>
 801d9e2:	9105      	str	r1, [sp, #20]
 801d9e4:	e7c6      	b.n	801d974 <_svfiprintf_r+0x124>
 801d9e6:	fb05 2101 	mla	r1, r5, r1, r2
 801d9ea:	2301      	movs	r3, #1
 801d9ec:	4607      	mov	r7, r0
 801d9ee:	e7f0      	b.n	801d9d2 <_svfiprintf_r+0x182>
 801d9f0:	ab03      	add	r3, sp, #12
 801d9f2:	9300      	str	r3, [sp, #0]
 801d9f4:	4622      	mov	r2, r4
 801d9f6:	4b11      	ldr	r3, [pc, #68]	; (801da3c <_svfiprintf_r+0x1ec>)
 801d9f8:	a904      	add	r1, sp, #16
 801d9fa:	4640      	mov	r0, r8
 801d9fc:	f7fd fdc4 	bl	801b588 <_printf_float>
 801da00:	f1b0 3fff 	cmp.w	r0, #4294967295
 801da04:	4681      	mov	r9, r0
 801da06:	d1d6      	bne.n	801d9b6 <_svfiprintf_r+0x166>
 801da08:	89a3      	ldrh	r3, [r4, #12]
 801da0a:	065b      	lsls	r3, r3, #25
 801da0c:	f53f af35 	bmi.w	801d87a <_svfiprintf_r+0x2a>
 801da10:	9809      	ldr	r0, [sp, #36]	; 0x24
 801da12:	b01d      	add	sp, #116	; 0x74
 801da14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da18:	ab03      	add	r3, sp, #12
 801da1a:	9300      	str	r3, [sp, #0]
 801da1c:	4622      	mov	r2, r4
 801da1e:	4b07      	ldr	r3, [pc, #28]	; (801da3c <_svfiprintf_r+0x1ec>)
 801da20:	a904      	add	r1, sp, #16
 801da22:	4640      	mov	r0, r8
 801da24:	f7fe f852 	bl	801bacc <_printf_i>
 801da28:	e7ea      	b.n	801da00 <_svfiprintf_r+0x1b0>
 801da2a:	bf00      	nop
 801da2c:	0801f074 	.word	0x0801f074
 801da30:	0801f07a 	.word	0x0801f07a
 801da34:	0801f07e 	.word	0x0801f07e
 801da38:	0801b589 	.word	0x0801b589
 801da3c:	0801d79d 	.word	0x0801d79d

0801da40 <__sfputc_r>:
 801da40:	6893      	ldr	r3, [r2, #8]
 801da42:	3b01      	subs	r3, #1
 801da44:	2b00      	cmp	r3, #0
 801da46:	b410      	push	{r4}
 801da48:	6093      	str	r3, [r2, #8]
 801da4a:	da08      	bge.n	801da5e <__sfputc_r+0x1e>
 801da4c:	6994      	ldr	r4, [r2, #24]
 801da4e:	42a3      	cmp	r3, r4
 801da50:	db01      	blt.n	801da56 <__sfputc_r+0x16>
 801da52:	290a      	cmp	r1, #10
 801da54:	d103      	bne.n	801da5e <__sfputc_r+0x1e>
 801da56:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da5a:	f7fe bb17 	b.w	801c08c <__swbuf_r>
 801da5e:	6813      	ldr	r3, [r2, #0]
 801da60:	1c58      	adds	r0, r3, #1
 801da62:	6010      	str	r0, [r2, #0]
 801da64:	7019      	strb	r1, [r3, #0]
 801da66:	4608      	mov	r0, r1
 801da68:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da6c:	4770      	bx	lr

0801da6e <__sfputs_r>:
 801da6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da70:	4606      	mov	r6, r0
 801da72:	460f      	mov	r7, r1
 801da74:	4614      	mov	r4, r2
 801da76:	18d5      	adds	r5, r2, r3
 801da78:	42ac      	cmp	r4, r5
 801da7a:	d101      	bne.n	801da80 <__sfputs_r+0x12>
 801da7c:	2000      	movs	r0, #0
 801da7e:	e007      	b.n	801da90 <__sfputs_r+0x22>
 801da80:	463a      	mov	r2, r7
 801da82:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da86:	4630      	mov	r0, r6
 801da88:	f7ff ffda 	bl	801da40 <__sfputc_r>
 801da8c:	1c43      	adds	r3, r0, #1
 801da8e:	d1f3      	bne.n	801da78 <__sfputs_r+0xa>
 801da90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801da94 <_vfiprintf_r>:
 801da94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da98:	460c      	mov	r4, r1
 801da9a:	b09d      	sub	sp, #116	; 0x74
 801da9c:	4617      	mov	r7, r2
 801da9e:	461d      	mov	r5, r3
 801daa0:	4606      	mov	r6, r0
 801daa2:	b118      	cbz	r0, 801daac <_vfiprintf_r+0x18>
 801daa4:	6983      	ldr	r3, [r0, #24]
 801daa6:	b90b      	cbnz	r3, 801daac <_vfiprintf_r+0x18>
 801daa8:	f7ff fa7a 	bl	801cfa0 <__sinit>
 801daac:	4b7c      	ldr	r3, [pc, #496]	; (801dca0 <_vfiprintf_r+0x20c>)
 801daae:	429c      	cmp	r4, r3
 801dab0:	d158      	bne.n	801db64 <_vfiprintf_r+0xd0>
 801dab2:	6874      	ldr	r4, [r6, #4]
 801dab4:	89a3      	ldrh	r3, [r4, #12]
 801dab6:	0718      	lsls	r0, r3, #28
 801dab8:	d55e      	bpl.n	801db78 <_vfiprintf_r+0xe4>
 801daba:	6923      	ldr	r3, [r4, #16]
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	d05b      	beq.n	801db78 <_vfiprintf_r+0xe4>
 801dac0:	2300      	movs	r3, #0
 801dac2:	9309      	str	r3, [sp, #36]	; 0x24
 801dac4:	2320      	movs	r3, #32
 801dac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801daca:	2330      	movs	r3, #48	; 0x30
 801dacc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dad0:	9503      	str	r5, [sp, #12]
 801dad2:	f04f 0b01 	mov.w	fp, #1
 801dad6:	46b8      	mov	r8, r7
 801dad8:	4645      	mov	r5, r8
 801dada:	f815 3b01 	ldrb.w	r3, [r5], #1
 801dade:	b10b      	cbz	r3, 801dae4 <_vfiprintf_r+0x50>
 801dae0:	2b25      	cmp	r3, #37	; 0x25
 801dae2:	d154      	bne.n	801db8e <_vfiprintf_r+0xfa>
 801dae4:	ebb8 0a07 	subs.w	sl, r8, r7
 801dae8:	d00b      	beq.n	801db02 <_vfiprintf_r+0x6e>
 801daea:	4653      	mov	r3, sl
 801daec:	463a      	mov	r2, r7
 801daee:	4621      	mov	r1, r4
 801daf0:	4630      	mov	r0, r6
 801daf2:	f7ff ffbc 	bl	801da6e <__sfputs_r>
 801daf6:	3001      	adds	r0, #1
 801daf8:	f000 80c2 	beq.w	801dc80 <_vfiprintf_r+0x1ec>
 801dafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dafe:	4453      	add	r3, sl
 801db00:	9309      	str	r3, [sp, #36]	; 0x24
 801db02:	f898 3000 	ldrb.w	r3, [r8]
 801db06:	2b00      	cmp	r3, #0
 801db08:	f000 80ba 	beq.w	801dc80 <_vfiprintf_r+0x1ec>
 801db0c:	2300      	movs	r3, #0
 801db0e:	f04f 32ff 	mov.w	r2, #4294967295
 801db12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801db16:	9304      	str	r3, [sp, #16]
 801db18:	9307      	str	r3, [sp, #28]
 801db1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801db1e:	931a      	str	r3, [sp, #104]	; 0x68
 801db20:	46a8      	mov	r8, r5
 801db22:	2205      	movs	r2, #5
 801db24:	f818 1b01 	ldrb.w	r1, [r8], #1
 801db28:	485e      	ldr	r0, [pc, #376]	; (801dca4 <_vfiprintf_r+0x210>)
 801db2a:	f7e2 fbe1 	bl	80002f0 <memchr>
 801db2e:	9b04      	ldr	r3, [sp, #16]
 801db30:	bb78      	cbnz	r0, 801db92 <_vfiprintf_r+0xfe>
 801db32:	06d9      	lsls	r1, r3, #27
 801db34:	bf44      	itt	mi
 801db36:	2220      	movmi	r2, #32
 801db38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801db3c:	071a      	lsls	r2, r3, #28
 801db3e:	bf44      	itt	mi
 801db40:	222b      	movmi	r2, #43	; 0x2b
 801db42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801db46:	782a      	ldrb	r2, [r5, #0]
 801db48:	2a2a      	cmp	r2, #42	; 0x2a
 801db4a:	d02a      	beq.n	801dba2 <_vfiprintf_r+0x10e>
 801db4c:	9a07      	ldr	r2, [sp, #28]
 801db4e:	46a8      	mov	r8, r5
 801db50:	2000      	movs	r0, #0
 801db52:	250a      	movs	r5, #10
 801db54:	4641      	mov	r1, r8
 801db56:	f811 3b01 	ldrb.w	r3, [r1], #1
 801db5a:	3b30      	subs	r3, #48	; 0x30
 801db5c:	2b09      	cmp	r3, #9
 801db5e:	d969      	bls.n	801dc34 <_vfiprintf_r+0x1a0>
 801db60:	b360      	cbz	r0, 801dbbc <_vfiprintf_r+0x128>
 801db62:	e024      	b.n	801dbae <_vfiprintf_r+0x11a>
 801db64:	4b50      	ldr	r3, [pc, #320]	; (801dca8 <_vfiprintf_r+0x214>)
 801db66:	429c      	cmp	r4, r3
 801db68:	d101      	bne.n	801db6e <_vfiprintf_r+0xda>
 801db6a:	68b4      	ldr	r4, [r6, #8]
 801db6c:	e7a2      	b.n	801dab4 <_vfiprintf_r+0x20>
 801db6e:	4b4f      	ldr	r3, [pc, #316]	; (801dcac <_vfiprintf_r+0x218>)
 801db70:	429c      	cmp	r4, r3
 801db72:	bf08      	it	eq
 801db74:	68f4      	ldreq	r4, [r6, #12]
 801db76:	e79d      	b.n	801dab4 <_vfiprintf_r+0x20>
 801db78:	4621      	mov	r1, r4
 801db7a:	4630      	mov	r0, r6
 801db7c:	f7fe fad8 	bl	801c130 <__swsetup_r>
 801db80:	2800      	cmp	r0, #0
 801db82:	d09d      	beq.n	801dac0 <_vfiprintf_r+0x2c>
 801db84:	f04f 30ff 	mov.w	r0, #4294967295
 801db88:	b01d      	add	sp, #116	; 0x74
 801db8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db8e:	46a8      	mov	r8, r5
 801db90:	e7a2      	b.n	801dad8 <_vfiprintf_r+0x44>
 801db92:	4a44      	ldr	r2, [pc, #272]	; (801dca4 <_vfiprintf_r+0x210>)
 801db94:	1a80      	subs	r0, r0, r2
 801db96:	fa0b f000 	lsl.w	r0, fp, r0
 801db9a:	4318      	orrs	r0, r3
 801db9c:	9004      	str	r0, [sp, #16]
 801db9e:	4645      	mov	r5, r8
 801dba0:	e7be      	b.n	801db20 <_vfiprintf_r+0x8c>
 801dba2:	9a03      	ldr	r2, [sp, #12]
 801dba4:	1d11      	adds	r1, r2, #4
 801dba6:	6812      	ldr	r2, [r2, #0]
 801dba8:	9103      	str	r1, [sp, #12]
 801dbaa:	2a00      	cmp	r2, #0
 801dbac:	db01      	blt.n	801dbb2 <_vfiprintf_r+0x11e>
 801dbae:	9207      	str	r2, [sp, #28]
 801dbb0:	e004      	b.n	801dbbc <_vfiprintf_r+0x128>
 801dbb2:	4252      	negs	r2, r2
 801dbb4:	f043 0302 	orr.w	r3, r3, #2
 801dbb8:	9207      	str	r2, [sp, #28]
 801dbba:	9304      	str	r3, [sp, #16]
 801dbbc:	f898 3000 	ldrb.w	r3, [r8]
 801dbc0:	2b2e      	cmp	r3, #46	; 0x2e
 801dbc2:	d10e      	bne.n	801dbe2 <_vfiprintf_r+0x14e>
 801dbc4:	f898 3001 	ldrb.w	r3, [r8, #1]
 801dbc8:	2b2a      	cmp	r3, #42	; 0x2a
 801dbca:	d138      	bne.n	801dc3e <_vfiprintf_r+0x1aa>
 801dbcc:	9b03      	ldr	r3, [sp, #12]
 801dbce:	1d1a      	adds	r2, r3, #4
 801dbd0:	681b      	ldr	r3, [r3, #0]
 801dbd2:	9203      	str	r2, [sp, #12]
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	bfb8      	it	lt
 801dbd8:	f04f 33ff 	movlt.w	r3, #4294967295
 801dbdc:	f108 0802 	add.w	r8, r8, #2
 801dbe0:	9305      	str	r3, [sp, #20]
 801dbe2:	4d33      	ldr	r5, [pc, #204]	; (801dcb0 <_vfiprintf_r+0x21c>)
 801dbe4:	f898 1000 	ldrb.w	r1, [r8]
 801dbe8:	2203      	movs	r2, #3
 801dbea:	4628      	mov	r0, r5
 801dbec:	f7e2 fb80 	bl	80002f0 <memchr>
 801dbf0:	b140      	cbz	r0, 801dc04 <_vfiprintf_r+0x170>
 801dbf2:	2340      	movs	r3, #64	; 0x40
 801dbf4:	1b40      	subs	r0, r0, r5
 801dbf6:	fa03 f000 	lsl.w	r0, r3, r0
 801dbfa:	9b04      	ldr	r3, [sp, #16]
 801dbfc:	4303      	orrs	r3, r0
 801dbfe:	f108 0801 	add.w	r8, r8, #1
 801dc02:	9304      	str	r3, [sp, #16]
 801dc04:	f898 1000 	ldrb.w	r1, [r8]
 801dc08:	482a      	ldr	r0, [pc, #168]	; (801dcb4 <_vfiprintf_r+0x220>)
 801dc0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dc0e:	2206      	movs	r2, #6
 801dc10:	f108 0701 	add.w	r7, r8, #1
 801dc14:	f7e2 fb6c 	bl	80002f0 <memchr>
 801dc18:	2800      	cmp	r0, #0
 801dc1a:	d037      	beq.n	801dc8c <_vfiprintf_r+0x1f8>
 801dc1c:	4b26      	ldr	r3, [pc, #152]	; (801dcb8 <_vfiprintf_r+0x224>)
 801dc1e:	bb1b      	cbnz	r3, 801dc68 <_vfiprintf_r+0x1d4>
 801dc20:	9b03      	ldr	r3, [sp, #12]
 801dc22:	3307      	adds	r3, #7
 801dc24:	f023 0307 	bic.w	r3, r3, #7
 801dc28:	3308      	adds	r3, #8
 801dc2a:	9303      	str	r3, [sp, #12]
 801dc2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc2e:	444b      	add	r3, r9
 801dc30:	9309      	str	r3, [sp, #36]	; 0x24
 801dc32:	e750      	b.n	801dad6 <_vfiprintf_r+0x42>
 801dc34:	fb05 3202 	mla	r2, r5, r2, r3
 801dc38:	2001      	movs	r0, #1
 801dc3a:	4688      	mov	r8, r1
 801dc3c:	e78a      	b.n	801db54 <_vfiprintf_r+0xc0>
 801dc3e:	2300      	movs	r3, #0
 801dc40:	f108 0801 	add.w	r8, r8, #1
 801dc44:	9305      	str	r3, [sp, #20]
 801dc46:	4619      	mov	r1, r3
 801dc48:	250a      	movs	r5, #10
 801dc4a:	4640      	mov	r0, r8
 801dc4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dc50:	3a30      	subs	r2, #48	; 0x30
 801dc52:	2a09      	cmp	r2, #9
 801dc54:	d903      	bls.n	801dc5e <_vfiprintf_r+0x1ca>
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	d0c3      	beq.n	801dbe2 <_vfiprintf_r+0x14e>
 801dc5a:	9105      	str	r1, [sp, #20]
 801dc5c:	e7c1      	b.n	801dbe2 <_vfiprintf_r+0x14e>
 801dc5e:	fb05 2101 	mla	r1, r5, r1, r2
 801dc62:	2301      	movs	r3, #1
 801dc64:	4680      	mov	r8, r0
 801dc66:	e7f0      	b.n	801dc4a <_vfiprintf_r+0x1b6>
 801dc68:	ab03      	add	r3, sp, #12
 801dc6a:	9300      	str	r3, [sp, #0]
 801dc6c:	4622      	mov	r2, r4
 801dc6e:	4b13      	ldr	r3, [pc, #76]	; (801dcbc <_vfiprintf_r+0x228>)
 801dc70:	a904      	add	r1, sp, #16
 801dc72:	4630      	mov	r0, r6
 801dc74:	f7fd fc88 	bl	801b588 <_printf_float>
 801dc78:	f1b0 3fff 	cmp.w	r0, #4294967295
 801dc7c:	4681      	mov	r9, r0
 801dc7e:	d1d5      	bne.n	801dc2c <_vfiprintf_r+0x198>
 801dc80:	89a3      	ldrh	r3, [r4, #12]
 801dc82:	065b      	lsls	r3, r3, #25
 801dc84:	f53f af7e 	bmi.w	801db84 <_vfiprintf_r+0xf0>
 801dc88:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dc8a:	e77d      	b.n	801db88 <_vfiprintf_r+0xf4>
 801dc8c:	ab03      	add	r3, sp, #12
 801dc8e:	9300      	str	r3, [sp, #0]
 801dc90:	4622      	mov	r2, r4
 801dc92:	4b0a      	ldr	r3, [pc, #40]	; (801dcbc <_vfiprintf_r+0x228>)
 801dc94:	a904      	add	r1, sp, #16
 801dc96:	4630      	mov	r0, r6
 801dc98:	f7fd ff18 	bl	801bacc <_printf_i>
 801dc9c:	e7ec      	b.n	801dc78 <_vfiprintf_r+0x1e4>
 801dc9e:	bf00      	nop
 801dca0:	0801ef28 	.word	0x0801ef28
 801dca4:	0801f074 	.word	0x0801f074
 801dca8:	0801ef48 	.word	0x0801ef48
 801dcac:	0801ef08 	.word	0x0801ef08
 801dcb0:	0801f07a 	.word	0x0801f07a
 801dcb4:	0801f07e 	.word	0x0801f07e
 801dcb8:	0801b589 	.word	0x0801b589
 801dcbc:	0801da6f 	.word	0x0801da6f

0801dcc0 <__sread>:
 801dcc0:	b510      	push	{r4, lr}
 801dcc2:	460c      	mov	r4, r1
 801dcc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dcc8:	f000 f8e0 	bl	801de8c <_read_r>
 801dccc:	2800      	cmp	r0, #0
 801dcce:	bfab      	itete	ge
 801dcd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dcd2:	89a3      	ldrhlt	r3, [r4, #12]
 801dcd4:	181b      	addge	r3, r3, r0
 801dcd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dcda:	bfac      	ite	ge
 801dcdc:	6563      	strge	r3, [r4, #84]	; 0x54
 801dcde:	81a3      	strhlt	r3, [r4, #12]
 801dce0:	bd10      	pop	{r4, pc}

0801dce2 <__swrite>:
 801dce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dce6:	461f      	mov	r7, r3
 801dce8:	898b      	ldrh	r3, [r1, #12]
 801dcea:	05db      	lsls	r3, r3, #23
 801dcec:	4605      	mov	r5, r0
 801dcee:	460c      	mov	r4, r1
 801dcf0:	4616      	mov	r6, r2
 801dcf2:	d505      	bpl.n	801dd00 <__swrite+0x1e>
 801dcf4:	2302      	movs	r3, #2
 801dcf6:	2200      	movs	r2, #0
 801dcf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dcfc:	f000 f874 	bl	801dde8 <_lseek_r>
 801dd00:	89a3      	ldrh	r3, [r4, #12]
 801dd02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dd06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dd0a:	81a3      	strh	r3, [r4, #12]
 801dd0c:	4632      	mov	r2, r6
 801dd0e:	463b      	mov	r3, r7
 801dd10:	4628      	mov	r0, r5
 801dd12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dd16:	f000 b823 	b.w	801dd60 <_write_r>

0801dd1a <__sseek>:
 801dd1a:	b510      	push	{r4, lr}
 801dd1c:	460c      	mov	r4, r1
 801dd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd22:	f000 f861 	bl	801dde8 <_lseek_r>
 801dd26:	1c43      	adds	r3, r0, #1
 801dd28:	89a3      	ldrh	r3, [r4, #12]
 801dd2a:	bf15      	itete	ne
 801dd2c:	6560      	strne	r0, [r4, #84]	; 0x54
 801dd2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801dd32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801dd36:	81a3      	strheq	r3, [r4, #12]
 801dd38:	bf18      	it	ne
 801dd3a:	81a3      	strhne	r3, [r4, #12]
 801dd3c:	bd10      	pop	{r4, pc}

0801dd3e <__sclose>:
 801dd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd42:	f000 b81f 	b.w	801dd84 <_close_r>

0801dd46 <__ascii_wctomb>:
 801dd46:	b149      	cbz	r1, 801dd5c <__ascii_wctomb+0x16>
 801dd48:	2aff      	cmp	r2, #255	; 0xff
 801dd4a:	bf85      	ittet	hi
 801dd4c:	238a      	movhi	r3, #138	; 0x8a
 801dd4e:	6003      	strhi	r3, [r0, #0]
 801dd50:	700a      	strbls	r2, [r1, #0]
 801dd52:	f04f 30ff 	movhi.w	r0, #4294967295
 801dd56:	bf98      	it	ls
 801dd58:	2001      	movls	r0, #1
 801dd5a:	4770      	bx	lr
 801dd5c:	4608      	mov	r0, r1
 801dd5e:	4770      	bx	lr

0801dd60 <_write_r>:
 801dd60:	b538      	push	{r3, r4, r5, lr}
 801dd62:	4c07      	ldr	r4, [pc, #28]	; (801dd80 <_write_r+0x20>)
 801dd64:	4605      	mov	r5, r0
 801dd66:	4608      	mov	r0, r1
 801dd68:	4611      	mov	r1, r2
 801dd6a:	2200      	movs	r2, #0
 801dd6c:	6022      	str	r2, [r4, #0]
 801dd6e:	461a      	mov	r2, r3
 801dd70:	f7e7 f8cf 	bl	8004f12 <_write>
 801dd74:	1c43      	adds	r3, r0, #1
 801dd76:	d102      	bne.n	801dd7e <_write_r+0x1e>
 801dd78:	6823      	ldr	r3, [r4, #0]
 801dd7a:	b103      	cbz	r3, 801dd7e <_write_r+0x1e>
 801dd7c:	602b      	str	r3, [r5, #0]
 801dd7e:	bd38      	pop	{r3, r4, r5, pc}
 801dd80:	240060e0 	.word	0x240060e0

0801dd84 <_close_r>:
 801dd84:	b538      	push	{r3, r4, r5, lr}
 801dd86:	4c06      	ldr	r4, [pc, #24]	; (801dda0 <_close_r+0x1c>)
 801dd88:	2300      	movs	r3, #0
 801dd8a:	4605      	mov	r5, r0
 801dd8c:	4608      	mov	r0, r1
 801dd8e:	6023      	str	r3, [r4, #0]
 801dd90:	f7e7 fbcf 	bl	8005532 <_close>
 801dd94:	1c43      	adds	r3, r0, #1
 801dd96:	d102      	bne.n	801dd9e <_close_r+0x1a>
 801dd98:	6823      	ldr	r3, [r4, #0]
 801dd9a:	b103      	cbz	r3, 801dd9e <_close_r+0x1a>
 801dd9c:	602b      	str	r3, [r5, #0]
 801dd9e:	bd38      	pop	{r3, r4, r5, pc}
 801dda0:	240060e0 	.word	0x240060e0

0801dda4 <_fstat_r>:
 801dda4:	b538      	push	{r3, r4, r5, lr}
 801dda6:	4c07      	ldr	r4, [pc, #28]	; (801ddc4 <_fstat_r+0x20>)
 801dda8:	2300      	movs	r3, #0
 801ddaa:	4605      	mov	r5, r0
 801ddac:	4608      	mov	r0, r1
 801ddae:	4611      	mov	r1, r2
 801ddb0:	6023      	str	r3, [r4, #0]
 801ddb2:	f7e7 fbca 	bl	800554a <_fstat>
 801ddb6:	1c43      	adds	r3, r0, #1
 801ddb8:	d102      	bne.n	801ddc0 <_fstat_r+0x1c>
 801ddba:	6823      	ldr	r3, [r4, #0]
 801ddbc:	b103      	cbz	r3, 801ddc0 <_fstat_r+0x1c>
 801ddbe:	602b      	str	r3, [r5, #0]
 801ddc0:	bd38      	pop	{r3, r4, r5, pc}
 801ddc2:	bf00      	nop
 801ddc4:	240060e0 	.word	0x240060e0

0801ddc8 <_isatty_r>:
 801ddc8:	b538      	push	{r3, r4, r5, lr}
 801ddca:	4c06      	ldr	r4, [pc, #24]	; (801dde4 <_isatty_r+0x1c>)
 801ddcc:	2300      	movs	r3, #0
 801ddce:	4605      	mov	r5, r0
 801ddd0:	4608      	mov	r0, r1
 801ddd2:	6023      	str	r3, [r4, #0]
 801ddd4:	f7e7 fbc9 	bl	800556a <_isatty>
 801ddd8:	1c43      	adds	r3, r0, #1
 801ddda:	d102      	bne.n	801dde2 <_isatty_r+0x1a>
 801dddc:	6823      	ldr	r3, [r4, #0]
 801ddde:	b103      	cbz	r3, 801dde2 <_isatty_r+0x1a>
 801dde0:	602b      	str	r3, [r5, #0]
 801dde2:	bd38      	pop	{r3, r4, r5, pc}
 801dde4:	240060e0 	.word	0x240060e0

0801dde8 <_lseek_r>:
 801dde8:	b538      	push	{r3, r4, r5, lr}
 801ddea:	4c07      	ldr	r4, [pc, #28]	; (801de08 <_lseek_r+0x20>)
 801ddec:	4605      	mov	r5, r0
 801ddee:	4608      	mov	r0, r1
 801ddf0:	4611      	mov	r1, r2
 801ddf2:	2200      	movs	r2, #0
 801ddf4:	6022      	str	r2, [r4, #0]
 801ddf6:	461a      	mov	r2, r3
 801ddf8:	f7e7 fbc2 	bl	8005580 <_lseek>
 801ddfc:	1c43      	adds	r3, r0, #1
 801ddfe:	d102      	bne.n	801de06 <_lseek_r+0x1e>
 801de00:	6823      	ldr	r3, [r4, #0]
 801de02:	b103      	cbz	r3, 801de06 <_lseek_r+0x1e>
 801de04:	602b      	str	r3, [r5, #0]
 801de06:	bd38      	pop	{r3, r4, r5, pc}
 801de08:	240060e0 	.word	0x240060e0

0801de0c <memmove>:
 801de0c:	4288      	cmp	r0, r1
 801de0e:	b510      	push	{r4, lr}
 801de10:	eb01 0302 	add.w	r3, r1, r2
 801de14:	d807      	bhi.n	801de26 <memmove+0x1a>
 801de16:	1e42      	subs	r2, r0, #1
 801de18:	4299      	cmp	r1, r3
 801de1a:	d00a      	beq.n	801de32 <memmove+0x26>
 801de1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801de20:	f802 4f01 	strb.w	r4, [r2, #1]!
 801de24:	e7f8      	b.n	801de18 <memmove+0xc>
 801de26:	4283      	cmp	r3, r0
 801de28:	d9f5      	bls.n	801de16 <memmove+0xa>
 801de2a:	1881      	adds	r1, r0, r2
 801de2c:	1ad2      	subs	r2, r2, r3
 801de2e:	42d3      	cmn	r3, r2
 801de30:	d100      	bne.n	801de34 <memmove+0x28>
 801de32:	bd10      	pop	{r4, pc}
 801de34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801de38:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801de3c:	e7f7      	b.n	801de2e <memmove+0x22>

0801de3e <_realloc_r>:
 801de3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de40:	4607      	mov	r7, r0
 801de42:	4614      	mov	r4, r2
 801de44:	460e      	mov	r6, r1
 801de46:	b921      	cbnz	r1, 801de52 <_realloc_r+0x14>
 801de48:	4611      	mov	r1, r2
 801de4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801de4e:	f7fd bab9 	b.w	801b3c4 <_malloc_r>
 801de52:	b922      	cbnz	r2, 801de5e <_realloc_r+0x20>
 801de54:	f7fd fa68 	bl	801b328 <_free_r>
 801de58:	4625      	mov	r5, r4
 801de5a:	4628      	mov	r0, r5
 801de5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de5e:	f000 f827 	bl	801deb0 <_malloc_usable_size_r>
 801de62:	42a0      	cmp	r0, r4
 801de64:	d20f      	bcs.n	801de86 <_realloc_r+0x48>
 801de66:	4621      	mov	r1, r4
 801de68:	4638      	mov	r0, r7
 801de6a:	f7fd faab 	bl	801b3c4 <_malloc_r>
 801de6e:	4605      	mov	r5, r0
 801de70:	2800      	cmp	r0, #0
 801de72:	d0f2      	beq.n	801de5a <_realloc_r+0x1c>
 801de74:	4631      	mov	r1, r6
 801de76:	4622      	mov	r2, r4
 801de78:	f7fd fa42 	bl	801b300 <memcpy>
 801de7c:	4631      	mov	r1, r6
 801de7e:	4638      	mov	r0, r7
 801de80:	f7fd fa52 	bl	801b328 <_free_r>
 801de84:	e7e9      	b.n	801de5a <_realloc_r+0x1c>
 801de86:	4635      	mov	r5, r6
 801de88:	e7e7      	b.n	801de5a <_realloc_r+0x1c>
	...

0801de8c <_read_r>:
 801de8c:	b538      	push	{r3, r4, r5, lr}
 801de8e:	4c07      	ldr	r4, [pc, #28]	; (801deac <_read_r+0x20>)
 801de90:	4605      	mov	r5, r0
 801de92:	4608      	mov	r0, r1
 801de94:	4611      	mov	r1, r2
 801de96:	2200      	movs	r2, #0
 801de98:	6022      	str	r2, [r4, #0]
 801de9a:	461a      	mov	r2, r3
 801de9c:	f7e7 fb2c 	bl	80054f8 <_read>
 801dea0:	1c43      	adds	r3, r0, #1
 801dea2:	d102      	bne.n	801deaa <_read_r+0x1e>
 801dea4:	6823      	ldr	r3, [r4, #0]
 801dea6:	b103      	cbz	r3, 801deaa <_read_r+0x1e>
 801dea8:	602b      	str	r3, [r5, #0]
 801deaa:	bd38      	pop	{r3, r4, r5, pc}
 801deac:	240060e0 	.word	0x240060e0

0801deb0 <_malloc_usable_size_r>:
 801deb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801deb4:	1f18      	subs	r0, r3, #4
 801deb6:	2b00      	cmp	r3, #0
 801deb8:	bfbc      	itt	lt
 801deba:	580b      	ldrlt	r3, [r1, r0]
 801debc:	18c0      	addlt	r0, r0, r3
 801debe:	4770      	bx	lr

0801dec0 <_init>:
 801dec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dec2:	bf00      	nop
 801dec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dec6:	bc08      	pop	{r3}
 801dec8:	469e      	mov	lr, r3
 801deca:	4770      	bx	lr

0801decc <_fini>:
 801decc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dece:	bf00      	nop
 801ded0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ded2:	bc08      	pop	{r3}
 801ded4:	469e      	mov	lr, r3
 801ded6:	4770      	bx	lr

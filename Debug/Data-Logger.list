
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d68  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  08019008  08019008  00029008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019938  08019938  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08019938  08019938  00029938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019940  08019940  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019940  08019940  00029940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019944  08019944  00029944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  24000000  08019948  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002280  240001d8  08019b20  000301d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24002458  08019b20  00032458  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049631  00000000  00000000  00030206  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007ad2  00000000  00000000  00079837  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00081310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002110  00000000  00000000  00083730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0004302d  00000000  00000000  00085840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00027e8c  00000000  00000000  000c886d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001785c0  00000000  00000000  000f06f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00268cb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f58  00000000  00000000  00268d34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018ff0 	.word	0x08018ff0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08018ff0 	.word	0x08018ff0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <stdio.h>
#include <string.h>
#include <CANFD.h>
#include <myprintf.h>

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f005 f8c0 	bl	8005840 <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f005 f92e 	bl	800592c <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f001 ffc7 	bl	8002668 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f005 f976 	bl	80059cc <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f001 ffbf 	bl	8002668 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f005 faf6 	bl	8005ce0 <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f001 ffb5 	bl	8002668 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f005 f941 	bl	8005986 <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <HAL_FDCAN_RxFifo0Callback+0x38>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f005 f981 	bl	8005a24 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d106      	bne.n	8000736 <HAL_FDCAN_RxFifo0Callback+0x2a>
			      {
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000728:	2101      	movs	r1, #1
 800072a:	4807      	ldr	r0, [pc, #28]	; (8000748 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 800072c:	f006 f9c3 	bl	8006ab6 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000732:	f017 fc43 	bl	8017fbc <puts>
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	24000b6c 	.word	0x24000b6c
 8000744:	24000bac 	.word	0x24000bac
 8000748:	58020400 	.word	0x58020400
 800074c:	08019008 	.word	0x08019008

08000750 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000750:	b580      	push	{r7, lr}
 8000752:	b09e      	sub	sp, #120	; 0x78
 8000754:	af02      	add	r7, sp, #8
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 800075c:	68b8      	ldr	r0, [r7, #8]
 800075e:	f7ff fdbf 	bl	80002e0 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	2b03      	cmp	r3, #3
 8000766:	d001      	beq.n	800076c <gps_msg_config+0x1c>
 8000768:	2301      	movs	r3, #1
 800076a:	e052      	b.n	8000812 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 800076c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	4a29      	ldr	r2, [pc, #164]	; (800081c <gps_msg_config+0xcc>)
 8000778:	211f      	movs	r1, #31
 800077a:	f017 fc37 	bl	8017fec <sniprintf>

	int checksum_int = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 8000782:	2300      	movs	r3, #0
 8000784:	66bb      	str	r3, [r7, #104]	; 0x68
 8000786:	e00b      	b.n	80007a0 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 8000788:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800078c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000796:	4053      	eors	r3, r2
 8000798:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 800079a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800079c:	3301      	adds	r3, #1
 800079e:	66bb      	str	r3, [r7, #104]	; 0x68
 80007a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <gps_msg_config+0x64>
 80007ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dde9      	ble.n	8000788 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80007b4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80007b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ba:	4a19      	ldr	r2, [pc, #100]	; (8000820 <gps_msg_config+0xd0>)
 80007bc:	2107      	movs	r1, #7
 80007be:	f017 fc15 	bl	8017fec <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80007c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007c6:	f107 0014 	add.w	r0, r7, #20
 80007ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4613      	mov	r3, r2
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <gps_msg_config+0xd4>)
 80007d4:	2129      	movs	r1, #41	; 0x29
 80007d6:	f017 fc09 	bl	8017fec <sniprintf>
	printf("\n\rSending: ");
 80007da:	4813      	ldr	r0, [pc, #76]	; (8000828 <gps_msg_config+0xd8>)
 80007dc:	f017 fb7a 	bl	8017ed4 <iprintf>
	printf("%s", messagetosend);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4811      	ldr	r0, [pc, #68]	; (800082c <gps_msg_config+0xdc>)
 80007e8:	f017 fb74 	bl	8017ed4 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd75 	bl	80002e0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f107 0114 	add.w	r1, r7, #20
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f00d fe3c 	bl	800e47e <HAL_UART_Transmit>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <gps_msg_config+0xc0>
		Error_Handler();
 800080c:	f001 ff2c 	bl	8002668 <Error_Handler>
	}
	return 0;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3770      	adds	r7, #112	; 0x70
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	0801901c 	.word	0x0801901c
 8000820:	08019034 	.word	0x08019034
 8000824:	0801903c 	.word	0x0801903c
 8000828:	08019044 	.word	0x08019044
 800082c:	08019050 	.word	0x08019050

08000830 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	4608      	mov	r0, r1
 800083a:	4611      	mov	r1, r2
 800083c:	461a      	mov	r2, r3
 800083e:	4603      	mov	r3, r0
 8000840:	817b      	strh	r3, [r7, #10]
 8000842:	460b      	mov	r3, r1
 8000844:	813b      	strh	r3, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 800084a:	2306      	movs	r3, #6
 800084c:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 800084e:	23b5      	movs	r3, #181	; 0xb5
 8000850:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000852:	2362      	movs	r3, #98	; 0x62
 8000854:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000856:	2306      	movs	r3, #6
 8000858:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800085a:	2308      	movs	r3, #8
 800085c:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 800085e:	8bfb      	ldrh	r3, [r7, #30]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000868:	897b      	ldrh	r3, [r7, #10]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000872:	893b      	ldrh	r3, [r7, #8]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
 8000896:	e013      	b.n	80008c0 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000898:	f107 0210 	add.w	r2, r7, #16
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	4413      	add	r3, r2
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a6:	4413      	add	r3, r2
 80008a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 80008ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80008b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008b4:	4413      	add	r3, r2
 80008b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80008ba:	6a3b      	ldr	r3, [r7, #32]
 80008bc:	3301      	adds	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	2b0b      	cmp	r3, #11
 80008c4:	dde8      	ble.n	8000898 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 80008c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008ca:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 80008cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008d0:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 80008d2:	f107 0110 	add.w	r1, r7, #16
 80008d6:	2364      	movs	r3, #100	; 0x64
 80008d8:	220e      	movs	r2, #14
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f00d fdcf 	bl	800e47e <HAL_UART_Transmit>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <gps_rate_config+0xbe>
				Error_Handler();
 80008e6:	f001 febf 	bl	8002668 <Error_Handler>
				return 1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <gps_rate_config+0xc0>
			}
		return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	240001f4 	.word	0x240001f4

08000918 <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d008      	beq.n	8000938 <NRF24_csn+0x20>
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <NRF24_csn+0x38>)
 8000928:	6818      	ldr	r0, [r3, #0]
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <NRF24_csn+0x3c>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	2201      	movs	r2, #1
 8000930:	4619      	mov	r1, r3
 8000932:	f006 f8a7 	bl	8006a84 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000936:	e007      	b.n	8000948 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <NRF24_csn+0x38>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <NRF24_csn+0x3c>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	2200      	movs	r2, #0
 8000942:	4619      	mov	r1, r3
 8000944:	f006 f89e 	bl	8006a84 <HAL_GPIO_WritePin>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	240001fc 	.word	0x240001fc
 8000954:	24000200 	.word	0x24000200

08000958 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d008      	beq.n	8000978 <NRF24_ce+0x20>
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <NRF24_ce+0x38>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <NRF24_ce+0x3c>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	2201      	movs	r2, #1
 8000970:	4619      	mov	r1, r3
 8000972:	f006 f887 	bl	8006a84 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000976:	e007      	b.n	8000988 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <NRF24_ce+0x38>)
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <NRF24_ce+0x3c>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	2200      	movs	r2, #0
 8000982:	4619      	mov	r1, r3
 8000984:	f006 f87e 	bl	8006a84 <HAL_GPIO_WritePin>
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	240001fc 	.word	0x240001fc
 8000994:	24000202 	.word	0x24000202

08000998 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff ffb8 	bl	8000918 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	f003 031f 	and.w	r3, r3, #31
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80009b2:	f107 010c 	add.w	r1, r7, #12
 80009b6:	2364      	movs	r3, #100	; 0x64
 80009b8:	2201      	movs	r2, #1
 80009ba:	480a      	ldr	r0, [pc, #40]	; (80009e4 <NRF24_read_register+0x4c>)
 80009bc:	f00c fd56 	bl	800d46c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	1c59      	adds	r1, r3, #1
 80009c6:	2364      	movs	r3, #100	; 0x64
 80009c8:	2201      	movs	r2, #1
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <NRF24_read_register+0x4c>)
 80009cc:	f00c ff40 	bl	800d850 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80009d0:	7b7b      	ldrb	r3, [r7, #13]
 80009d2:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff ff9f 	bl	8000918 <NRF24_csn>
	return retData;
 80009da:	7bfb      	ldrb	r3, [r7, #15]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	24000204 	.word	0x24000204

080009e8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	4613      	mov	r3, r2
 80009f6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff ff8d 	bl	8000918 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f003 031f 	and.w	r3, r3, #31
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000a08:	f107 010c 	add.w	r1, r7, #12
 8000a0c:	2364      	movs	r3, #100	; 0x64
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <NRF24_read_registerN+0x4c>)
 8000a12:	f00c fd2b 	bl	800d46c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	2364      	movs	r3, #100	; 0x64
 8000a1c:	6839      	ldr	r1, [r7, #0]
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <NRF24_read_registerN+0x4c>)
 8000a20:	f00c ff16 	bl	800d850 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff ff77 	bl	8000918 <NRF24_csn>
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	24000204 	.word	0x24000204

08000a38 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	460a      	mov	r2, r1
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	4613      	mov	r3, r2
 8000a46:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff ff65 	bl	8000918 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f043 0320 	orr.w	r3, r3, #32
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000a58:	79bb      	ldrb	r3, [r7, #6]
 8000a5a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000a5c:	f107 010c 	add.w	r1, r7, #12
 8000a60:	2364      	movs	r3, #100	; 0x64
 8000a62:	2202      	movs	r2, #2
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <NRF24_write_register+0x40>)
 8000a66:	f00c fd01 	bl	800d46c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff ff54 	bl	8000918 <NRF24_csn>
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	24000204 	.word	0x24000204

08000a7c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff ff43 	bl	8000918 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f043 0320 	orr.w	r3, r3, #32
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000a9c:	f107 010c 	add.w	r1, r7, #12
 8000aa0:	2364      	movs	r3, #100	; 0x64
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <NRF24_write_registerN+0x4c>)
 8000aa6:	f00c fce1 	bl	800d46c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	2364      	movs	r3, #100	; 0x64
 8000ab0:	6839      	ldr	r1, [r7, #0]
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <NRF24_write_registerN+0x4c>)
 8000ab4:	f00c fcda 	bl	800d46c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff ff2d 	bl	8000918 <NRF24_csn>
}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	24000204 	.word	0x24000204

08000acc <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000ad0:	21ff      	movs	r1, #255	; 0xff
 8000ad2:	20e1      	movs	r0, #225	; 0xe1
 8000ad4:	f7ff ffb0 	bl	8000a38 <NRF24_write_register>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000ae0:	21ff      	movs	r1, #255	; 0xff
 8000ae2:	20e2      	movs	r0, #226	; 0xe2
 8000ae4:	f7ff ffa8 	bl	8000a38 <NRF24_write_register>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000aec:	b082      	sub	sp, #8
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b084      	sub	sp, #16
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	460b      	mov	r3, r1
 8000afa:	807b      	strh	r3, [r7, #2]
 8000afc:	4613      	mov	r3, r2
 8000afe:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000b00:	4b66      	ldr	r3, [pc, #408]	; (8000c9c <NRF24_begin+0x1b0>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	2288      	movs	r2, #136	; 0x88
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f017 f926 	bl	8017d5c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000b10:	4a63      	ldr	r2, [pc, #396]	; (8000ca0 <NRF24_begin+0x1b4>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000b16:	4a63      	ldr	r2, [pc, #396]	; (8000ca4 <NRF24_begin+0x1b8>)
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000b1c:	4a62      	ldr	r2, [pc, #392]	; (8000ca8 <NRF24_begin+0x1bc>)
 8000b1e:	883b      	ldrh	r3, [r7, #0]
 8000b20:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff fef8 	bl	8000918 <NRF24_csn>
	NRF24_ce(0);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff ff15 	bl	8000958 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000b2e:	2005      	movs	r0, #5
 8000b30:	f002 fa8e 	bl	8003050 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000b34:	2108      	movs	r1, #8
 8000b36:	2000      	movs	r0, #0
 8000b38:	f7ff ff7e 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000b3c:	213f      	movs	r1, #63	; 0x3f
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff ff7a 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000b44:	2103      	movs	r1, #3
 8000b46:	2002      	movs	r0, #2
 8000b48:	f7ff ff76 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f7ff ff72 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000b54:	2103      	movs	r1, #3
 8000b56:	2004      	movs	r0, #4
 8000b58:	f7ff ff6e 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	2005      	movs	r0, #5
 8000b60:	f7ff ff6a 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000b64:	210f      	movs	r1, #15
 8000b66:	2006      	movs	r0, #6
 8000b68:	f7ff ff66 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000b6c:	210e      	movs	r1, #14
 8000b6e:	2007      	movs	r0, #7
 8000b70:	f7ff ff62 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000b74:	2100      	movs	r1, #0
 8000b76:	2008      	movs	r0, #8
 8000b78:	f7ff ff5e 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2009      	movs	r0, #9
 8000b80:	f7ff ff5a 	bl	8000a38 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000b84:	23e7      	movs	r3, #231	; 0xe7
 8000b86:	733b      	strb	r3, [r7, #12]
 8000b88:	23e7      	movs	r3, #231	; 0xe7
 8000b8a:	72fb      	strb	r3, [r7, #11]
 8000b8c:	23e7      	movs	r3, #231	; 0xe7
 8000b8e:	72bb      	strb	r3, [r7, #10]
 8000b90:	23e7      	movs	r3, #231	; 0xe7
 8000b92:	727b      	strb	r3, [r7, #9]
 8000b94:	23e7      	movs	r3, #231	; 0xe7
 8000b96:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b98:	f107 0308 	add.w	r3, r7, #8
 8000b9c:	2205      	movs	r2, #5
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	200a      	movs	r0, #10
 8000ba2:	f7ff ff6b 	bl	8000a7c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000ba6:	23c2      	movs	r3, #194	; 0xc2
 8000ba8:	733b      	strb	r3, [r7, #12]
 8000baa:	23c2      	movs	r3, #194	; 0xc2
 8000bac:	72fb      	strb	r3, [r7, #11]
 8000bae:	23c2      	movs	r3, #194	; 0xc2
 8000bb0:	72bb      	strb	r3, [r7, #10]
 8000bb2:	23c2      	movs	r3, #194	; 0xc2
 8000bb4:	727b      	strb	r3, [r7, #9]
 8000bb6:	23c2      	movs	r3, #194	; 0xc2
 8000bb8:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	2205      	movs	r2, #5
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	200b      	movs	r0, #11
 8000bc4:	f7ff ff5a 	bl	8000a7c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000bc8:	21c3      	movs	r1, #195	; 0xc3
 8000bca:	200c      	movs	r0, #12
 8000bcc:	f7ff ff34 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000bd0:	21c4      	movs	r1, #196	; 0xc4
 8000bd2:	200d      	movs	r0, #13
 8000bd4:	f7ff ff30 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000bd8:	21c5      	movs	r1, #197	; 0xc5
 8000bda:	200e      	movs	r0, #14
 8000bdc:	f7ff ff2c 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000be0:	21c6      	movs	r1, #198	; 0xc6
 8000be2:	200f      	movs	r0, #15
 8000be4:	f7ff ff28 	bl	8000a38 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000be8:	23e7      	movs	r3, #231	; 0xe7
 8000bea:	733b      	strb	r3, [r7, #12]
 8000bec:	23e7      	movs	r3, #231	; 0xe7
 8000bee:	72fb      	strb	r3, [r7, #11]
 8000bf0:	23e7      	movs	r3, #231	; 0xe7
 8000bf2:	72bb      	strb	r3, [r7, #10]
 8000bf4:	23e7      	movs	r3, #231	; 0xe7
 8000bf6:	727b      	strb	r3, [r7, #9]
 8000bf8:	23e7      	movs	r3, #231	; 0xe7
 8000bfa:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	2205      	movs	r2, #5
 8000c02:	4619      	mov	r1, r3
 8000c04:	2010      	movs	r0, #16
 8000c06:	f7ff ff39 	bl	8000a7c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2011      	movs	r0, #17
 8000c0e:	f7ff ff13 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000c12:	2100      	movs	r1, #0
 8000c14:	2012      	movs	r0, #18
 8000c16:	f7ff ff0f 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2013      	movs	r0, #19
 8000c1e:	f7ff ff0b 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000c22:	2100      	movs	r1, #0
 8000c24:	2014      	movs	r0, #20
 8000c26:	f7ff ff07 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2015      	movs	r0, #21
 8000c2e:	f7ff ff03 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000c32:	2100      	movs	r1, #0
 8000c34:	2016      	movs	r0, #22
 8000c36:	f7ff feff 	bl	8000a38 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000c3a:	f000 f99b 	bl	8000f74 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000c3e:	2100      	movs	r1, #0
 8000c40:	201c      	movs	r0, #28
 8000c42:	f7ff fef9 	bl	8000a38 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	201d      	movs	r0, #29
 8000c4a:	f7ff fef5 	bl	8000a38 <NRF24_write_register>
	printRadioSettings();
 8000c4e:	f000 f9ab 	bl	8000fa8 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000c52:	210f      	movs	r1, #15
 8000c54:	200f      	movs	r0, #15
 8000c56:	f000 f859 	bl	8000d0c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f000 f8cb 	bl	8000df6 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f000 f901 	bl	8000e68 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000c66:	2002      	movs	r0, #2
 8000c68:	f000 f944 	bl	8000ef4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000c6c:	f000 f896 	bl	8000d9c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000c70:	2020      	movs	r0, #32
 8000c72:	f000 f87b 	bl	8000d6c <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000c76:	f000 f974 	bl	8000f62 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000c7a:	204c      	movs	r0, #76	; 0x4c
 8000c7c:	f000 f861 	bl	8000d42 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000c80:	f7ff ff24 	bl	8000acc <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c84:	f7ff ff2a 	bl	8000adc <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000c88:	f000 f95c 	bl	8000f44 <NRF24_powerDown>
	
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c96:	b002      	add	sp, #8
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	24000204 	.word	0x24000204
 8000ca0:	240001fc 	.word	0x240001fc
 8000ca4:	24000200 	.word	0x24000200
 8000ca8:	24000202 	.word	0x24000202

08000cac <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fe51 	bl	8000958 <NRF24_ce>
	NRF24_flush_tx();
 8000cb6:	f7ff ff09 	bl	8000acc <NRF24_flush_tx>
	NRF24_flush_rx();
 8000cba:	f7ff ff0f 	bl	8000adc <NRF24_flush_rx>
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2205      	movs	r2, #5
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	200a      	movs	r0, #10
 8000cd6:	f7ff fed1 	bl	8000a7c <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2205      	movs	r2, #5
 8000cde:	4619      	mov	r1, r3
 8000ce0:	2010      	movs	r0, #16
 8000ce2:	f7ff fecb 	bl	8000a7c <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000ce6:	2320      	movs	r3, #32
 8000ce8:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <NRF24_openWritingPipe+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	bf28      	it	cs
 8000cf4:	4613      	movcs	r3, r2
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2011      	movs	r0, #17
 8000cfc:	f7ff fe9c 	bl	8000a38 <NRF24_write_register>
}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	240001f8 	.word	0x240001f8

08000d0c <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	460a      	mov	r2, r1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	b25a      	sxtb	r2, r3
 8000d22:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	4619      	mov	r1, r3
 8000d34:	2004      	movs	r0, #4
 8000d36:	f7ff fe7f 	bl	8000a38 <NRF24_write_register>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d4c:	237f      	movs	r3, #127	; 0x7f
 8000d4e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d50:	7bfa      	ldrb	r2, [r7, #15]
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	4293      	cmp	r3, r2
 8000d56:	bf28      	it	cs
 8000d58:	4613      	movcs	r3, r2
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2005      	movs	r0, #5
 8000d60:	f7ff fe6a 	bl	8000a38 <NRF24_write_register>
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000d76:	2320      	movs	r3, #32
 8000d78:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000d7a:	7bfa      	ldrb	r2, [r7, #15]
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	bf28      	it	cs
 8000d82:	4613      	movcs	r3, r2
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <NRF24_setPayloadSize+0x2c>)
 8000d88:	701a      	strb	r2, [r3, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	240001f8 	.word	0x240001f8

08000d9c <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000da0:	201d      	movs	r0, #29
 8000da2:	f7ff fdf9 	bl	8000998 <NRF24_read_register>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f023 0304 	bic.w	r3, r3, #4
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	4619      	mov	r1, r3
 8000db0:	201d      	movs	r0, #29
 8000db2:	f7ff fe41 	bl	8000a38 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000db6:	2100      	movs	r1, #0
 8000db8:	201c      	movs	r0, #28
 8000dba:	f7ff fe3d 	bl	8000a38 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000dbe:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <NRF24_disableDynamicPayloads+0x2c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	240001f9 	.word	0x240001f9

08000dcc <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d004      	beq.n	8000de6 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000ddc:	213f      	movs	r1, #63	; 0x3f
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff fe2a 	bl	8000a38 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000de4:	e003      	b.n	8000dee <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000de6:	2100      	movs	r1, #0
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff fe25 	bl	8000a38 <NRF24_write_register>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000e00:	2006      	movs	r0, #6
 8000e02:	f7ff fdc9 	bl	8000998 <NRF24_read_register>
 8000e06:	4603      	mov	r3, r0
 8000e08:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	f023 0306 	bic.w	r3, r3, #6
 8000e10:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d104      	bne.n	8000e22 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	f043 0306 	orr.w	r3, r3, #6
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e019      	b.n	8000e56 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d104      	bne.n	8000e32 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	73fb      	strb	r3, [r7, #15]
 8000e30:	e011      	b.n	8000e56 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d104      	bne.n	8000e42 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	73fb      	strb	r3, [r7, #15]
 8000e40:	e009      	b.n	8000e56 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d006      	beq.n	8000e56 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	d103      	bne.n	8000e56 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	f043 0306 	orr.w	r3, r3, #6
 8000e54:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	2006      	movs	r0, #6
 8000e5c:	f7ff fdec 	bl	8000a38 <NRF24_write_register>
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000e72:	2300      	movs	r3, #0
 8000e74:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000e76:	2006      	movs	r0, #6
 8000e78:	f7ff fd8e 	bl	8000998 <NRF24_read_register>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <NRF24_setDataRate+0x88>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000e8c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d107      	bne.n	8000ea4 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <NRF24_setDataRate+0x88>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	f043 0320 	orr.w	r3, r3, #32
 8000ea0:	73bb      	strb	r3, [r7, #14]
 8000ea2:	e00d      	b.n	8000ec0 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d107      	bne.n	8000eba <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <NRF24_setDataRate+0x88>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	73bb      	strb	r3, [r7, #14]
 8000eb8:	e002      	b.n	8000ec0 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <NRF24_setDataRate+0x88>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	2006      	movs	r0, #6
 8000ec6:	f7ff fdb7 	bl	8000a38 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000eca:	2006      	movs	r0, #6
 8000ecc:	f7ff fd64 	bl	8000998 <NRF24_read_register>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	7bbb      	ldrb	r3, [r7, #14]
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d102      	bne.n	8000ee0 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e002      	b.n	8000ee6 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <NRF24_setDataRate+0x88>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	240001fa 	.word	0x240001fa

08000ef4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff fd4a 	bl	8000998 <NRF24_read_register>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f023 030c 	bic.w	r3, r3, #12
 8000f0a:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00f      	beq.n	8000f32 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d104      	bne.n	8000f22 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	f043 0308 	orr.w	r3, r3, #8
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	e007      	b.n	8000f32 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	4619      	mov	r1, r3
 8000f36:	2000      	movs	r0, #0
 8000f38:	f7ff fd7e 	bl	8000a38 <NRF24_write_register>
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff fd25 	bl	8000998 <NRF24_read_register>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f023 0302 	bic.w	r3, r3, #2
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4619      	mov	r1, r3
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff fd6d 	bl	8000a38 <NRF24_write_register>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000f66:	2170      	movs	r1, #112	; 0x70
 8000f68:	2007      	movs	r0, #7
 8000f6a:	f7ff fd65 	bl	8000a38 <NRF24_write_register>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff fccc 	bl	8000918 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000f80:	2350      	movs	r3, #80	; 0x50
 8000f82:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000f84:	2373      	movs	r3, #115	; 0x73
 8000f86:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000f88:	1d39      	adds	r1, r7, #4
 8000f8a:	2364      	movs	r3, #100	; 0x64
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <NRF24_ACTIVATE_cmd+0x30>)
 8000f90:	f00c fa6c 	bl	800d46c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff fcbf 	bl	8000918 <NRF24_csn>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	24000204 	.word	0x24000204

08000fa8 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000faa:	b0a1      	sub	sp, #132	; 0x84
 8000fac:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4ab6      	ldr	r2, [pc, #728]	; (800128c <printRadioSettings+0x2e4>)
 8000fb4:	461c      	mov	r4, r3
 8000fb6:	4615      	mov	r5, r2
 8000fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	8022      	strh	r2, [r4, #0]
 8000fca:	3402      	adds	r4, #2
 8000fcc:	0c1b      	lsrs	r3, r3, #16
 8000fce:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f983 	bl	80002e0 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	f107 0108 	add.w	r1, r7, #8
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	48aa      	ldr	r0, [pc, #680]	; (8001290 <printRadioSettings+0x2e8>)
 8000fe6:	f00d fa4a 	bl	800e47e <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff fcd4 	bl	8000998 <NRF24_read_register>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000ff6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d020      	beq.n	8001044 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001002:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <printRadioSettings+0x7e>
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	4aa0      	ldr	r2, [pc, #640]	; (8001294 <printRadioSettings+0x2ec>)
 8001014:	461c      	mov	r4, r3
 8001016:	4615      	mov	r5, r2
 8001018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001020:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001024:	e017      	b.n	8001056 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	4a9b      	ldr	r2, [pc, #620]	; (8001298 <printRadioSettings+0x2f0>)
 800102c:	461c      	mov	r4, r3
 800102e:	4615      	mov	r5, r2
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001038:	c403      	stmia	r4!, {r0, r1}
 800103a:	8022      	strh	r2, [r4, #0]
 800103c:	3402      	adds	r4, #2
 800103e:	0c13      	lsrs	r3, r2, #16
 8001040:	7023      	strb	r3, [r4, #0]
 8001042:	e008      	b.n	8001056 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	4a94      	ldr	r2, [pc, #592]	; (800129c <printRadioSettings+0x2f4>)
 800104a:	461c      	mov	r4, r3
 800104c:	4615      	mov	r5, r2
 800104e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001052:	682b      	ldr	r3, [r5, #0]
 8001054:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff f940 	bl	80002e0 <strlen>
 8001060:	4603      	mov	r3, r0
 8001062:	b29a      	uxth	r2, r3
 8001064:	f107 0108 	add.w	r1, r7, #8
 8001068:	230a      	movs	r3, #10
 800106a:	4889      	ldr	r0, [pc, #548]	; (8001290 <printRadioSettings+0x2e8>)
 800106c:	f00d fa07 	bl	800e47e <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001070:	2001      	movs	r0, #1
 8001072:	f7ff fc91 	bl	8000998 <NRF24_read_register>
 8001076:	4603      	mov	r3, r0
 8001078:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800107c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001080:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001084:	2b00      	cmp	r3, #0
 8001086:	bfcc      	ite	gt
 8001088:	2301      	movgt	r3, #1
 800108a:	2300      	movle	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001090:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001094:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001098:	2b00      	cmp	r3, #0
 800109a:	bfcc      	ite	gt
 800109c:	2301      	movgt	r3, #1
 800109e:	2300      	movle	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010a8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bfcc      	ite	gt
 80010b0:	2301      	movgt	r3, #1
 80010b2:	2300      	movle	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010bc:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	bfcc      	ite	gt
 80010c4:	2301      	movgt	r3, #1
 80010c6:	2300      	movle	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010d0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bfcc      	ite	gt
 80010d8:	2301      	movgt	r3, #1
 80010da:	2300      	movle	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010e4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bfcc      	ite	gt
 80010ec:	2301      	movgt	r3, #1
 80010ee:	2300      	movle	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f107 0008 	add.w	r0, r7, #8
 80010f6:	9303      	str	r3, [sp, #12]
 80010f8:	9402      	str	r4, [sp, #8]
 80010fa:	9101      	str	r1, [sp, #4]
 80010fc:	9200      	str	r2, [sp, #0]
 80010fe:	4633      	mov	r3, r6
 8001100:	462a      	mov	r2, r5
 8001102:	4967      	ldr	r1, [pc, #412]	; (80012a0 <printRadioSettings+0x2f8>)
 8001104:	f016 ffa6 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f8e7 	bl	80002e0 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	b29a      	uxth	r2, r3
 8001116:	f107 0108 	add.w	r1, r7, #8
 800111a:	230a      	movs	r3, #10
 800111c:	485c      	ldr	r0, [pc, #368]	; (8001290 <printRadioSettings+0x2e8>)
 800111e:	f00d f9ae 	bl	800e47e <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001122:	2002      	movs	r0, #2
 8001124:	f7ff fc38 	bl	8000998 <NRF24_read_register>
 8001128:	4603      	mov	r3, r0
 800112a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800112e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001132:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001136:	2b00      	cmp	r3, #0
 8001138:	bfcc      	ite	gt
 800113a:	2301      	movgt	r3, #1
 800113c:	2300      	movle	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001142:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001146:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800114a:	2b00      	cmp	r3, #0
 800114c:	bfcc      	ite	gt
 800114e:	2301      	movgt	r3, #1
 8001150:	2300      	movle	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001156:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800115a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800115e:	2b00      	cmp	r3, #0
 8001160:	bfcc      	ite	gt
 8001162:	2301      	movgt	r3, #1
 8001164:	2300      	movle	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800116a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800116e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001172:	2b00      	cmp	r3, #0
 8001174:	bfcc      	ite	gt
 8001176:	2301      	movgt	r3, #1
 8001178:	2300      	movle	r3, #0
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800117e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001182:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001186:	2b00      	cmp	r3, #0
 8001188:	bfcc      	ite	gt
 800118a:	2301      	movgt	r3, #1
 800118c:	2300      	movle	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001192:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001196:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800119a:	2b00      	cmp	r3, #0
 800119c:	bfcc      	ite	gt
 800119e:	2301      	movgt	r3, #1
 80011a0:	2300      	movle	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f107 0008 	add.w	r0, r7, #8
 80011a8:	9303      	str	r3, [sp, #12]
 80011aa:	9402      	str	r4, [sp, #8]
 80011ac:	9101      	str	r1, [sp, #4]
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	4633      	mov	r3, r6
 80011b2:	462a      	mov	r2, r5
 80011b4:	493b      	ldr	r1, [pc, #236]	; (80012a4 <printRadioSettings+0x2fc>)
 80011b6:	f016 ff4d 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f88e 	bl	80002e0 <strlen>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f107 0108 	add.w	r1, r7, #8
 80011cc:	230a      	movs	r3, #10
 80011ce:	4830      	ldr	r0, [pc, #192]	; (8001290 <printRadioSettings+0x2e8>)
 80011d0:	f00d f955 	bl	800e47e <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80011d4:	2003      	movs	r0, #3
 80011d6:	f7ff fbdf 	bl	8000998 <NRF24_read_register>
 80011da:	4603      	mov	r3, r0
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80011e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e8:	3302      	adds	r3, #2
 80011ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80011ee:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	492c      	ldr	r1, [pc, #176]	; (80012a8 <printRadioSettings+0x300>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f016 ff2b 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f86c 	bl	80002e0 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 0108 	add.w	r1, r7, #8
 8001210:	230a      	movs	r3, #10
 8001212:	481f      	ldr	r0, [pc, #124]	; (8001290 <printRadioSettings+0x2e8>)
 8001214:	f00d f933 	bl	800e47e <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001218:	2005      	movs	r0, #5
 800121a:	f7ff fbbd 	bl	8000998 <NRF24_read_register>
 800121e:	4603      	mov	r3, r0
 8001220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001228:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	491e      	ldr	r1, [pc, #120]	; (80012ac <printRadioSettings+0x304>)
 8001232:	4618      	mov	r0, r3
 8001234:	f016 ff0e 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f84f 	bl	80002e0 <strlen>
 8001242:	4603      	mov	r3, r0
 8001244:	b29a      	uxth	r2, r3
 8001246:	f107 0108 	add.w	r1, r7, #8
 800124a:	230a      	movs	r3, #10
 800124c:	4810      	ldr	r0, [pc, #64]	; (8001290 <printRadioSettings+0x2e8>)
 800124e:	f00d f916 	bl	800e47e <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001252:	2006      	movs	r0, #6
 8001254:	f7ff fba0 	bl	8000998 <NRF24_read_register>
 8001258:	4603      	mov	r3, r0
 800125a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800125e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d024      	beq.n	80012b4 <printRadioSettings+0x30c>
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <printRadioSettings+0x308>)
 8001270:	461c      	mov	r4, r3
 8001272:	4615      	mov	r5, r2
 8001274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001278:	e895 0003 	ldmia.w	r5, {r0, r1}
 800127c:	6020      	str	r0, [r4, #0]
 800127e:	3404      	adds	r4, #4
 8001280:	8021      	strh	r1, [r4, #0]
 8001282:	3402      	adds	r4, #2
 8001284:	0c0b      	lsrs	r3, r1, #16
 8001286:	7023      	strb	r3, [r4, #0]
 8001288:	e023      	b.n	80012d2 <printRadioSettings+0x32a>
 800128a:	bf00      	nop
 800128c:	0801905c 	.word	0x0801905c
 8001290:	2400028c 	.word	0x2400028c
 8001294:	08019090 	.word	0x08019090
 8001298:	080190ac 	.word	0x080190ac
 800129c:	080190c8 	.word	0x080190c8
 80012a0:	080190dc 	.word	0x080190dc
 80012a4:	08019120 	.word	0x08019120
 80012a8:	0801916c 	.word	0x0801916c
 80012ac:	08019188 	.word	0x08019188
 80012b0:	0801919c 	.word	0x0801919c
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	4a29      	ldr	r2, [pc, #164]	; (8001360 <printRadioSettings+0x3b8>)
 80012ba:	461c      	mov	r4, r3
 80012bc:	4615      	mov	r5, r2
 80012be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012c6:	6020      	str	r0, [r4, #0]
 80012c8:	3404      	adds	r4, #4
 80012ca:	8021      	strh	r1, [r4, #0]
 80012cc:	3402      	adds	r4, #2
 80012ce:	0c0b      	lsrs	r3, r1, #16
 80012d0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f802 	bl	80002e0 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	b29a      	uxth	r2, r3
 80012e0:	f107 0108 	add.w	r1, r7, #8
 80012e4:	230a      	movs	r3, #10
 80012e6:	481f      	ldr	r0, [pc, #124]	; (8001364 <printRadioSettings+0x3bc>)
 80012e8:	f00d f8c9 	bl	800e47e <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80012ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012f0:	f003 0306 	and.w	r3, r3, #6
 80012f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80012f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012fc:	085b      	lsrs	r3, r3, #1
 80012fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001302:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <printRadioSettings+0x376>
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4a16      	ldr	r2, [pc, #88]	; (8001368 <printRadioSettings+0x3c0>)
 8001310:	461c      	mov	r4, r3
 8001312:	4615      	mov	r5, r2
 8001314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	6023      	str	r3, [r4, #0]
 800131c:	e037      	b.n	800138e <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800131e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001322:	2b01      	cmp	r3, #1
 8001324:	d109      	bne.n	800133a <printRadioSettings+0x392>
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	4a10      	ldr	r2, [pc, #64]	; (800136c <printRadioSettings+0x3c4>)
 800132c:	461c      	mov	r4, r3
 800132e:	4615      	mov	r5, r2
 8001330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001334:	682b      	ldr	r3, [r5, #0]
 8001336:	6023      	str	r3, [r4, #0]
 8001338:	e029      	b.n	800138e <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800133a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800133e:	2b02      	cmp	r3, #2
 8001340:	d118      	bne.n	8001374 <printRadioSettings+0x3cc>
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <printRadioSettings+0x3c8>)
 8001348:	461c      	mov	r4, r3
 800134a:	4615      	mov	r5, r2
 800134c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	8022      	strh	r2, [r4, #0]
 8001356:	3402      	adds	r4, #2
 8001358:	0c1b      	lsrs	r3, r3, #16
 800135a:	7023      	strb	r3, [r4, #0]
 800135c:	e017      	b.n	800138e <printRadioSettings+0x3e6>
 800135e:	bf00      	nop
 8001360:	080191b4 	.word	0x080191b4
 8001364:	2400028c 	.word	0x2400028c
 8001368:	080191cc 	.word	0x080191cc
 800136c:	080191e0 	.word	0x080191e0
 8001370:	080191f4 	.word	0x080191f4
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001374:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001378:	2b03      	cmp	r3, #3
 800137a:	d108      	bne.n	800138e <printRadioSettings+0x3e6>
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4ad7      	ldr	r2, [pc, #860]	; (80016e0 <printRadioSettings+0x738>)
 8001382:	461c      	mov	r4, r3
 8001384:	4615      	mov	r5, r2
 8001386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	4618      	mov	r0, r3
 8001394:	f7fe ffa4 	bl	80002e0 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	f107 0108 	add.w	r1, r7, #8
 80013a0:	230a      	movs	r3, #10
 80013a2:	48d0      	ldr	r0, [pc, #832]	; (80016e4 <printRadioSettings+0x73c>)
 80013a4:	f00d f86b 	bl	800e47e <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80013a8:	463b      	mov	r3, r7
 80013aa:	2205      	movs	r2, #5
 80013ac:	4619      	mov	r1, r3
 80013ae:	200a      	movs	r0, #10
 80013b0:	f7ff fb1a 	bl	80009e8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80013b4:	793b      	ldrb	r3, [r7, #4]
 80013b6:	461c      	mov	r4, r3
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	461d      	mov	r5, r3
 80013bc:	78bb      	ldrb	r3, [r7, #2]
 80013be:	787a      	ldrb	r2, [r7, #1]
 80013c0:	7839      	ldrb	r1, [r7, #0]
 80013c2:	f107 0008 	add.w	r0, r7, #8
 80013c6:	9102      	str	r1, [sp, #8]
 80013c8:	9201      	str	r2, [sp, #4]
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	462b      	mov	r3, r5
 80013ce:	4622      	mov	r2, r4
 80013d0:	49c5      	ldr	r1, [pc, #788]	; (80016e8 <printRadioSettings+0x740>)
 80013d2:	f016 fe3f 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	4618      	mov	r0, r3
 80013dc:	f7fe ff80 	bl	80002e0 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f107 0108 	add.w	r1, r7, #8
 80013e8:	230a      	movs	r3, #10
 80013ea:	48be      	ldr	r0, [pc, #760]	; (80016e4 <printRadioSettings+0x73c>)
 80013ec:	f00d f847 	bl	800e47e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80013f0:	463b      	mov	r3, r7
 80013f2:	2205      	movs	r2, #5
 80013f4:	4619      	mov	r1, r3
 80013f6:	200b      	movs	r0, #11
 80013f8:	f7ff faf6 	bl	80009e8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80013fc:	793b      	ldrb	r3, [r7, #4]
 80013fe:	461c      	mov	r4, r3
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	461d      	mov	r5, r3
 8001404:	78bb      	ldrb	r3, [r7, #2]
 8001406:	787a      	ldrb	r2, [r7, #1]
 8001408:	7839      	ldrb	r1, [r7, #0]
 800140a:	f107 0008 	add.w	r0, r7, #8
 800140e:	9102      	str	r1, [sp, #8]
 8001410:	9201      	str	r2, [sp, #4]
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	462b      	mov	r3, r5
 8001416:	4622      	mov	r2, r4
 8001418:	49b4      	ldr	r1, [pc, #720]	; (80016ec <printRadioSettings+0x744>)
 800141a:	f016 fe1b 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe ff5c 	bl	80002e0 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	f107 0108 	add.w	r1, r7, #8
 8001430:	230a      	movs	r3, #10
 8001432:	48ac      	ldr	r0, [pc, #688]	; (80016e4 <printRadioSettings+0x73c>)
 8001434:	f00d f823 	bl	800e47e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001438:	463b      	mov	r3, r7
 800143a:	2201      	movs	r2, #1
 800143c:	4619      	mov	r1, r3
 800143e:	200c      	movs	r0, #12
 8001440:	f7ff fad2 	bl	80009e8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001444:	783b      	ldrb	r3, [r7, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	49a8      	ldr	r1, [pc, #672]	; (80016f0 <printRadioSettings+0x748>)
 800144e:	4618      	mov	r0, r3
 8001450:	f016 fe00 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	4618      	mov	r0, r3
 800145a:	f7fe ff41 	bl	80002e0 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	f107 0108 	add.w	r1, r7, #8
 8001466:	230a      	movs	r3, #10
 8001468:	489e      	ldr	r0, [pc, #632]	; (80016e4 <printRadioSettings+0x73c>)
 800146a:	f00d f808 	bl	800e47e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800146e:	463b      	mov	r3, r7
 8001470:	2201      	movs	r2, #1
 8001472:	4619      	mov	r1, r3
 8001474:	200d      	movs	r0, #13
 8001476:	f7ff fab7 	bl	80009e8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800147a:	783b      	ldrb	r3, [r7, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	499c      	ldr	r1, [pc, #624]	; (80016f4 <printRadioSettings+0x74c>)
 8001484:	4618      	mov	r0, r3
 8001486:	f016 fde5 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe ff26 	bl	80002e0 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	f107 0108 	add.w	r1, r7, #8
 800149c:	230a      	movs	r3, #10
 800149e:	4891      	ldr	r0, [pc, #580]	; (80016e4 <printRadioSettings+0x73c>)
 80014a0:	f00c ffed 	bl	800e47e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80014a4:	463b      	mov	r3, r7
 80014a6:	2201      	movs	r2, #1
 80014a8:	4619      	mov	r1, r3
 80014aa:	200e      	movs	r0, #14
 80014ac:	f7ff fa9c 	bl	80009e8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014b0:	783b      	ldrb	r3, [r7, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	498f      	ldr	r1, [pc, #572]	; (80016f8 <printRadioSettings+0x750>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f016 fdca 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe ff0b 	bl	80002e0 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	f107 0108 	add.w	r1, r7, #8
 80014d2:	230a      	movs	r3, #10
 80014d4:	4883      	ldr	r0, [pc, #524]	; (80016e4 <printRadioSettings+0x73c>)
 80014d6:	f00c ffd2 	bl	800e47e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80014da:	463b      	mov	r3, r7
 80014dc:	2201      	movs	r2, #1
 80014de:	4619      	mov	r1, r3
 80014e0:	200f      	movs	r0, #15
 80014e2:	f7ff fa81 	bl	80009e8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014e6:	783b      	ldrb	r3, [r7, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	f107 0308 	add.w	r3, r7, #8
 80014ee:	4983      	ldr	r1, [pc, #524]	; (80016fc <printRadioSettings+0x754>)
 80014f0:	4618      	mov	r0, r3
 80014f2:	f016 fdaf 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe fef0 	bl	80002e0 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	f107 0108 	add.w	r1, r7, #8
 8001508:	230a      	movs	r3, #10
 800150a:	4876      	ldr	r0, [pc, #472]	; (80016e4 <printRadioSettings+0x73c>)
 800150c:	f00c ffb7 	bl	800e47e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001510:	463b      	mov	r3, r7
 8001512:	2205      	movs	r2, #5
 8001514:	4619      	mov	r1, r3
 8001516:	2010      	movs	r0, #16
 8001518:	f7ff fa66 	bl	80009e8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800151c:	793b      	ldrb	r3, [r7, #4]
 800151e:	461c      	mov	r4, r3
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	461d      	mov	r5, r3
 8001524:	78bb      	ldrb	r3, [r7, #2]
 8001526:	787a      	ldrb	r2, [r7, #1]
 8001528:	7839      	ldrb	r1, [r7, #0]
 800152a:	f107 0008 	add.w	r0, r7, #8
 800152e:	9102      	str	r1, [sp, #8]
 8001530:	9201      	str	r2, [sp, #4]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	462b      	mov	r3, r5
 8001536:	4622      	mov	r2, r4
 8001538:	4971      	ldr	r1, [pc, #452]	; (8001700 <printRadioSettings+0x758>)
 800153a:	f016 fd8b 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fecc 	bl	80002e0 <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	f107 0108 	add.w	r1, r7, #8
 8001550:	230a      	movs	r3, #10
 8001552:	4864      	ldr	r0, [pc, #400]	; (80016e4 <printRadioSettings+0x73c>)
 8001554:	f00c ff93 	bl	800e47e <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001558:	2011      	movs	r0, #17
 800155a:	f7ff fa1d 	bl	8000998 <NRF24_read_register>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001564:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001568:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	4964      	ldr	r1, [pc, #400]	; (8001704 <printRadioSettings+0x75c>)
 8001572:	4618      	mov	r0, r3
 8001574:	f016 fd6e 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe feaf 	bl	80002e0 <strlen>
 8001582:	4603      	mov	r3, r0
 8001584:	b29a      	uxth	r2, r3
 8001586:	f107 0108 	add.w	r1, r7, #8
 800158a:	230a      	movs	r3, #10
 800158c:	4855      	ldr	r0, [pc, #340]	; (80016e4 <printRadioSettings+0x73c>)
 800158e:	f00c ff76 	bl	800e47e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001592:	2012      	movs	r0, #18
 8001594:	f7ff fa00 	bl	8000998 <NRF24_read_register>
 8001598:	4603      	mov	r3, r0
 800159a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800159e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	4957      	ldr	r1, [pc, #348]	; (8001708 <printRadioSettings+0x760>)
 80015ac:	4618      	mov	r0, r3
 80015ae:	f016 fd51 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe fe92 	bl	80002e0 <strlen>
 80015bc:	4603      	mov	r3, r0
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f107 0108 	add.w	r1, r7, #8
 80015c4:	230a      	movs	r3, #10
 80015c6:	4847      	ldr	r0, [pc, #284]	; (80016e4 <printRadioSettings+0x73c>)
 80015c8:	f00c ff59 	bl	800e47e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80015cc:	2013      	movs	r0, #19
 80015ce:	f7ff f9e3 	bl	8000998 <NRF24_read_register>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	4949      	ldr	r1, [pc, #292]	; (800170c <printRadioSettings+0x764>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f016 fd34 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe fe75 	bl	80002e0 <strlen>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	f107 0108 	add.w	r1, r7, #8
 80015fe:	230a      	movs	r3, #10
 8001600:	4838      	ldr	r0, [pc, #224]	; (80016e4 <printRadioSettings+0x73c>)
 8001602:	f00c ff3c 	bl	800e47e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001606:	2014      	movs	r0, #20
 8001608:	f7ff f9c6 	bl	8000998 <NRF24_read_register>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001612:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	493c      	ldr	r1, [pc, #240]	; (8001710 <printRadioSettings+0x768>)
 8001620:	4618      	mov	r0, r3
 8001622:	f016 fd17 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe fe58 	bl	80002e0 <strlen>
 8001630:	4603      	mov	r3, r0
 8001632:	b29a      	uxth	r2, r3
 8001634:	f107 0108 	add.w	r1, r7, #8
 8001638:	230a      	movs	r3, #10
 800163a:	482a      	ldr	r0, [pc, #168]	; (80016e4 <printRadioSettings+0x73c>)
 800163c:	f00c ff1f 	bl	800e47e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001640:	2015      	movs	r0, #21
 8001642:	f7ff f9a9 	bl	8000998 <NRF24_read_register>
 8001646:	4603      	mov	r3, r0
 8001648:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800164c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001650:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	492e      	ldr	r1, [pc, #184]	; (8001714 <printRadioSettings+0x76c>)
 800165a:	4618      	mov	r0, r3
 800165c:	f016 fcfa 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe fe3b 	bl	80002e0 <strlen>
 800166a:	4603      	mov	r3, r0
 800166c:	b29a      	uxth	r2, r3
 800166e:	f107 0108 	add.w	r1, r7, #8
 8001672:	230a      	movs	r3, #10
 8001674:	481b      	ldr	r0, [pc, #108]	; (80016e4 <printRadioSettings+0x73c>)
 8001676:	f00c ff02 	bl	800e47e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800167a:	2016      	movs	r0, #22
 800167c:	f7ff f98c 	bl	8000998 <NRF24_read_register>
 8001680:	4603      	mov	r3, r0
 8001682:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001686:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800168a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	4921      	ldr	r1, [pc, #132]	; (8001718 <printRadioSettings+0x770>)
 8001694:	4618      	mov	r0, r3
 8001696:	f016 fcdd 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fe1e 	bl	80002e0 <strlen>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	f107 0108 	add.w	r1, r7, #8
 80016ac:	230a      	movs	r3, #10
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <printRadioSettings+0x73c>)
 80016b0:	f00c fee5 	bl	800e47e <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80016b4:	201c      	movs	r0, #28
 80016b6:	f7ff f96f 	bl	8000998 <NRF24_read_register>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bfcc      	ite	gt
 80016cc:	2301      	movgt	r3, #1
 80016ce:	2300      	movle	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	e01e      	b.n	800171c <printRadioSettings+0x774>
 80016de:	bf00      	nop
 80016e0:	08019208 	.word	0x08019208
 80016e4:	2400028c 	.word	0x2400028c
 80016e8:	0801921c 	.word	0x0801921c
 80016ec:	0801924c 	.word	0x0801924c
 80016f0:	0801927c 	.word	0x0801927c
 80016f4:	080192a4 	.word	0x080192a4
 80016f8:	080192cc 	.word	0x080192cc
 80016fc:	080192f4 	.word	0x080192f4
 8001700:	0801931c 	.word	0x0801931c
 8001704:	08019348 	.word	0x08019348
 8001708:	08019364 	.word	0x08019364
 800170c:	08019380 	.word	0x08019380
 8001710:	0801939c 	.word	0x0801939c
 8001714:	080193b8 	.word	0x080193b8
 8001718:	080193d4 	.word	0x080193d4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800171c:	2b00      	cmp	r3, #0
 800171e:	bfcc      	ite	gt
 8001720:	2301      	movgt	r3, #1
 8001722:	2300      	movle	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001728:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800172c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001730:	2b00      	cmp	r3, #0
 8001732:	bfcc      	ite	gt
 8001734:	2301      	movgt	r3, #1
 8001736:	2300      	movle	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800173c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001740:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001744:	2b00      	cmp	r3, #0
 8001746:	bfcc      	ite	gt
 8001748:	2301      	movgt	r3, #1
 800174a:	2300      	movle	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001750:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001754:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001758:	2b00      	cmp	r3, #0
 800175a:	bfcc      	ite	gt
 800175c:	2301      	movgt	r3, #1
 800175e:	2300      	movle	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001764:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001768:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800176c:	2b00      	cmp	r3, #0
 800176e:	bfcc      	ite	gt
 8001770:	2301      	movgt	r3, #1
 8001772:	2300      	movle	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f107 0008 	add.w	r0, r7, #8
 800177a:	9303      	str	r3, [sp, #12]
 800177c:	9402      	str	r4, [sp, #8]
 800177e:	9101      	str	r1, [sp, #4]
 8001780:	9200      	str	r2, [sp, #0]
 8001782:	4633      	mov	r3, r6
 8001784:	462a      	mov	r2, r5
 8001786:	494a      	ldr	r1, [pc, #296]	; (80018b0 <printRadioSettings+0x908>)
 8001788:	f016 fc64 	bl	8018054 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fda5 	bl	80002e0 <strlen>
 8001796:	4603      	mov	r3, r0
 8001798:	b29a      	uxth	r2, r3
 800179a:	f107 0108 	add.w	r1, r7, #8
 800179e:	230a      	movs	r3, #10
 80017a0:	4844      	ldr	r0, [pc, #272]	; (80018b4 <printRadioSettings+0x90c>)
 80017a2:	f00c fe6c 	bl	800e47e <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80017a6:	201d      	movs	r0, #29
 80017a8:	f7ff f8f6 	bl	8000998 <NRF24_read_register>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80017b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00c      	beq.n	80017d8 <printRadioSettings+0x830>
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	4a3d      	ldr	r2, [pc, #244]	; (80018b8 <printRadioSettings+0x910>)
 80017c4:	461c      	mov	r4, r3
 80017c6:	4615      	mov	r5, r2
 80017c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017d0:	6020      	str	r0, [r4, #0]
 80017d2:	3404      	adds	r4, #4
 80017d4:	8021      	strh	r1, [r4, #0]
 80017d6:	e00e      	b.n	80017f6 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	4a37      	ldr	r2, [pc, #220]	; (80018bc <printRadioSettings+0x914>)
 80017de:	461c      	mov	r4, r3
 80017e0:	4615      	mov	r5, r2
 80017e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017ea:	6020      	str	r0, [r4, #0]
 80017ec:	3404      	adds	r4, #4
 80017ee:	8021      	strh	r1, [r4, #0]
 80017f0:	3402      	adds	r4, #2
 80017f2:	0c0b      	lsrs	r3, r1, #16
 80017f4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fd70 	bl	80002e0 <strlen>
 8001800:	4603      	mov	r3, r0
 8001802:	b29a      	uxth	r2, r3
 8001804:	f107 0108 	add.w	r1, r7, #8
 8001808:	230a      	movs	r3, #10
 800180a:	482a      	ldr	r0, [pc, #168]	; (80018b4 <printRadioSettings+0x90c>)
 800180c:	f00c fe37 	bl	800e47e <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001810:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00b      	beq.n	8001834 <printRadioSettings+0x88c>
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4a27      	ldr	r2, [pc, #156]	; (80018c0 <printRadioSettings+0x918>)
 8001822:	461c      	mov	r4, r3
 8001824:	4615      	mov	r5, r2
 8001826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800182a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800182e:	c403      	stmia	r4!, {r0, r1}
 8001830:	8022      	strh	r2, [r4, #0]
 8001832:	e00d      	b.n	8001850 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4a22      	ldr	r2, [pc, #136]	; (80018c4 <printRadioSettings+0x91c>)
 800183a:	461c      	mov	r4, r3
 800183c:	4615      	mov	r5, r2
 800183e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001842:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001846:	c403      	stmia	r4!, {r0, r1}
 8001848:	8022      	strh	r2, [r4, #0]
 800184a:	3402      	adds	r4, #2
 800184c:	0c13      	lsrs	r3, r2, #16
 800184e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fd43 	bl	80002e0 <strlen>
 800185a:	4603      	mov	r3, r0
 800185c:	b29a      	uxth	r2, r3
 800185e:	f107 0108 	add.w	r1, r7, #8
 8001862:	230a      	movs	r3, #10
 8001864:	4813      	ldr	r0, [pc, #76]	; (80018b4 <printRadioSettings+0x90c>)
 8001866:	f00c fe0a 	bl	800e47e <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <printRadioSettings+0x920>)
 8001870:	461c      	mov	r4, r3
 8001872:	4615      	mov	r5, r2
 8001874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	8022      	strh	r2, [r4, #0]
 8001886:	3402      	adds	r4, #2
 8001888:	0c1b      	lsrs	r3, r3, #16
 800188a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fd25 	bl	80002e0 <strlen>
 8001896:	4603      	mov	r3, r0
 8001898:	b29a      	uxth	r2, r3
 800189a:	f107 0108 	add.w	r1, r7, #8
 800189e:	230a      	movs	r3, #10
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <printRadioSettings+0x90c>)
 80018a2:	f00c fdec 	bl	800e47e <HAL_UART_Transmit>
}
 80018a6:	bf00      	nop
 80018a8:	3774      	adds	r7, #116	; 0x74
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ae:	bf00      	nop
 80018b0:	080193f0 	.word	0x080193f0
 80018b4:	2400028c 	.word	0x2400028c
 80018b8:	0801943c 	.word	0x0801943c
 80018bc:	08019454 	.word	0x08019454
 80018c0:	0801946c 	.word	0x0801946c
 80018c4:	08019488 	.word	0x08019488
 80018c8:	0801905c 	.word	0x0801905c

080018cc <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80018cc:	b084      	sub	sp, #16
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	f107 0c08 	add.w	ip, r7, #8
 80018d6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <nrf24_DebugUART_Init+0x2c>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f107 0108 	add.w	r1, r7, #8
 80018e2:	238c      	movs	r3, #140	; 0x8c
 80018e4:	461a      	mov	r2, r3
 80018e6:	f016 fa39 	bl	8017d5c <memcpy>
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018f2:	b004      	add	sp, #16
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	2400028c 	.word	0x2400028c

080018fc <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	dd03      	ble.n	8001914 <WriteToBuff+0x18>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001912:	db01      	blt.n	8001918 <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 8001914:	2303      	movs	r3, #3
 8001916:	e077      	b.n	8001a08 <WriteToBuff+0x10c>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 8001918:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <WriteToBuff+0x114>)
 800191a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800191e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001922:	d22f      	bcs.n	8001984 <WriteToBuff+0x88>
 8001924:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <WriteToBuff+0x114>)
 8001926:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	4413      	add	r3, r2
 800192e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001932:	d327      	bcc.n	8001984 <WriteToBuff+0x88>
    DataBuffer.counter = Bufflength;
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <WriteToBuff+0x114>)
 8001936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <WriteToBuff+0x114>)
 8001940:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001944:	4a32      	ldr	r2, [pc, #200]	; (8001a10 <WriteToBuff+0x114>)
 8001946:	4413      	add	r3, r2
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	f016 fa05 	bl	8017d5c <memcpy>
    DataBuffer.counter += len;
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <WriteToBuff+0x114>)
 8001954:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a2c      	ldr	r2, [pc, #176]	; (8001a10 <WriteToBuff+0x114>)
 800195e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 8001962:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <WriteToBuff+0x118>)
 8001964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001968:	4929      	ldr	r1, [pc, #164]	; (8001a10 <WriteToBuff+0x114>)
 800196a:	482b      	ldr	r0, [pc, #172]	; (8001a18 <WriteToBuff+0x11c>)
 800196c:	f015 fa45 	bl	8016dfa <f_write>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d104      	bne.n	8001980 <WriteToBuff+0x84>

      //memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear buffer after writing
    	//f_sync(&myFILE);
      printf("Buffer 1 has been written\n");
 8001976:	4829      	ldr	r0, [pc, #164]	; (8001a1c <WriteToBuff+0x120>)
 8001978:	f016 fb20 	bl	8017fbc <puts>
      return 1; //buffer 1 has been written
 800197c:	2301      	movs	r3, #1
 800197e:	e043      	b.n	8001a08 <WriteToBuff+0x10c>
    }
    return 4; //could not write :(
 8001980:	2304      	movs	r3, #4
 8001982:	e041      	b.n	8001a08 <WriteToBuff+0x10c>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <WriteToBuff+0x114>)
 8001986:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	4413      	add	r3, r2
 800198e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001992:	d326      	bcc.n	80019e2 <WriteToBuff+0xe6>
    DataBuffer.counter = 0;
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <WriteToBuff+0x114>)
 8001996:	2200      	movs	r2, #0
 8001998:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 800199c:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <WriteToBuff+0x114>)
 800199e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80019a2:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <WriteToBuff+0x114>)
 80019a4:	4413      	add	r3, r2
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f016 f9d6 	bl	8017d5c <memcpy>
    DataBuffer.counter += len;
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <WriteToBuff+0x114>)
 80019b2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <WriteToBuff+0x114>)
 80019bc:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <WriteToBuff+0x118>)
 80019c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c6:	4916      	ldr	r1, [pc, #88]	; (8001a20 <WriteToBuff+0x124>)
 80019c8:	4813      	ldr	r0, [pc, #76]	; (8001a18 <WriteToBuff+0x11c>)
 80019ca:	f015 fa16 	bl	8016dfa <f_write>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d104      	bne.n	80019de <WriteToBuff+0xe2>
      //memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear buffer after writing
    	//f_sync(&myFILE);
      printf("Buffer 2 has been written\n");
 80019d4:	4813      	ldr	r0, [pc, #76]	; (8001a24 <WriteToBuff+0x128>)
 80019d6:	f016 faf1 	bl	8017fbc <puts>
      return 2; //buffer 2 has been written
 80019da:	2302      	movs	r3, #2
 80019dc:	e014      	b.n	8001a08 <WriteToBuff+0x10c>
    }
    return 4; //could not write :(
 80019de:	2304      	movs	r3, #4
 80019e0:	e012      	b.n	8001a08 <WriteToBuff+0x10c>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <WriteToBuff+0x114>)
 80019e4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80019e8:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <WriteToBuff+0x114>)
 80019ea:	4413      	add	r3, r2
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f016 f9b3 	bl	8017d5c <memcpy>
  DataBuffer.counter += len;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <WriteToBuff+0x114>)
 80019f8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <WriteToBuff+0x114>)
 8001a02:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	24000318 	.word	0x24000318
 8001a14:	24001084 	.word	0x24001084
 8001a18:	24000bd4 	.word	0x24000bd4
 8001a1c:	080195a0 	.word	0x080195a0
 8001a20:	24000718 	.word	0x24000718
 8001a24:	080195bc 	.word	0x080195bc

08001a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	f2ad 4d94 	subw	sp, sp, #1172	; 0x494
 8001a2e:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a30:	f001 fa7c 	bl	8002f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a34:	f000 f9a8 	bl	8001d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a38:	f000 fd08 	bl	800244c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a3c:	f000 fce6 	bl	800240c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001a40:	f000 fbd4 	bl	80021ec <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001a44:	f010 f850 	bl	8011ae8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001a48:	f015 fc50 	bl	80172ec <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001a4c:	f000 faa6 	bl	8001f9c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001a50:	f000 fb0a 	bl	8002068 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001a54:	f000 fc42 	bl	80022dc <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001a58:	f000 fc8c 	bl	8002374 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001a5c:	f000 fbe8 	bl	8002230 <MX_SPI1_Init>
  MX_RTC_Init();
 8001a60:	f000 fb66 	bl	8002130 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001a64:	2101      	movs	r1, #1
 8001a66:	48a0      	ldr	r0, [pc, #640]	; (8001ce8 <main+0x2c0>)
 8001a68:	f005 f825 	bl	8006ab6 <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001a6c:	4c9f      	ldr	r4, [pc, #636]	; (8001cec <main+0x2c4>)
 8001a6e:	4668      	mov	r0, sp
 8001a70:	1d23      	adds	r3, r4, #4
 8001a72:	2284      	movs	r2, #132	; 0x84
 8001a74:	4619      	mov	r1, r3
 8001a76:	f016 f971 	bl	8017d5c <memcpy>
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2102      	movs	r1, #2
 8001a80:	489b      	ldr	r0, [pc, #620]	; (8001cf0 <main+0x2c8>)
 8001a82:	f7ff f833 	bl	8000aec <NRF24_begin>
    nrf24_DebugUART_Init(huart3);
 8001a86:	4c9b      	ldr	r4, [pc, #620]	; (8001cf4 <main+0x2cc>)
 8001a88:	4668      	mov	r0, sp
 8001a8a:	f104 0310 	add.w	r3, r4, #16
 8001a8e:	227c      	movs	r2, #124	; 0x7c
 8001a90:	4619      	mov	r1, r3
 8001a92:	f016 f963 	bl	8017d5c <memcpy>
 8001a96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a9a:	f7ff ff17 	bl	80018cc <nrf24_DebugUART_Init>



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001a9e:	f7ff f905 	bl	8000cac <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001aa2:	4b95      	ldr	r3, [pc, #596]	; (8001cf8 <main+0x2d0>)
 8001aa4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	4621      	mov	r1, r4
 8001aac:	f7ff f90a 	bl	8000cc4 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff f98b 	bl	8000dcc <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001ab6:	202a      	movs	r0, #42	; 0x2a
 8001ab8:	f7ff f943 	bl	8000d42 <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001abc:	2020      	movs	r0, #32
 8001abe:	f7ff f955 	bl	8000d6c <NRF24_setPayloadSize>

    printRadioSettings();
 8001ac2:	f7ff fa71 	bl	8000fa8 <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001ac6:	488d      	ldr	r0, [pc, #564]	; (8001cfc <main+0x2d4>)
 8001ac8:	f016 fa78 	bl	8017fbc <puts>
  FDCAN_Config(&hfdcan1);
 8001acc:	488c      	ldr	r0, [pc, #560]	; (8001d00 <main+0x2d8>)
 8001ace:	f7fe fddf 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001ad2:	2246      	movs	r2, #70	; 0x46
 8001ad4:	498b      	ldr	r1, [pc, #556]	; (8001d04 <main+0x2dc>)
 8001ad6:	4887      	ldr	r0, [pc, #540]	; (8001cf4 <main+0x2cc>)
 8001ad8:	f00c fd68 	bl	800e5ac <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8001adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae0:	f001 fab6 	bl	8003050 <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001ae4:	2364      	movs	r3, #100	; 0x64
 8001ae6:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
  uint16_t navRate = 1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f8a7 3404 	strh.w	r3, [r7, #1028]	; 0x404
  uint16_t timeRef = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001af6:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 8001afa:	f8b7 2404 	ldrh.w	r2, [r7, #1028]	; 0x404
 8001afe:	f8b7 1406 	ldrh.w	r1, [r7, #1030]	; 0x406
 8001b02:	487c      	ldr	r0, [pc, #496]	; (8001cf4 <main+0x2cc>)
 8001b04:	f7fe fe94 	bl	8000830 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001b08:	2200      	movs	r2, #0
 8001b0a:	497f      	ldr	r1, [pc, #508]	; (8001d08 <main+0x2e0>)
 8001b0c:	4879      	ldr	r0, [pc, #484]	; (8001cf4 <main+0x2cc>)
 8001b0e:	f7fe fe1f 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	497d      	ldr	r1, [pc, #500]	; (8001d0c <main+0x2e4>)
 8001b16:	4877      	ldr	r0, [pc, #476]	; (8001cf4 <main+0x2cc>)
 8001b18:	f7fe fe1a 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	497c      	ldr	r1, [pc, #496]	; (8001d10 <main+0x2e8>)
 8001b20:	4874      	ldr	r0, [pc, #464]	; (8001cf4 <main+0x2cc>)
 8001b22:	f7fe fe15 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001b26:	2200      	movs	r2, #0
 8001b28:	497a      	ldr	r1, [pc, #488]	; (8001d14 <main+0x2ec>)
 8001b2a:	4872      	ldr	r0, [pc, #456]	; (8001cf4 <main+0x2cc>)
 8001b2c:	f7fe fe10 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001b30:	2200      	movs	r2, #0
 8001b32:	4979      	ldr	r1, [pc, #484]	; (8001d18 <main+0x2f0>)
 8001b34:	486f      	ldr	r0, [pc, #444]	; (8001cf4 <main+0x2cc>)
 8001b36:	f7fe fe0b 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4977      	ldr	r1, [pc, #476]	; (8001d1c <main+0x2f4>)
 8001b3e:	486d      	ldr	r0, [pc, #436]	; (8001cf4 <main+0x2cc>)
 8001b40:	f7fe fe06 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	4976      	ldr	r1, [pc, #472]	; (8001d20 <main+0x2f8>)
 8001b48:	486a      	ldr	r0, [pc, #424]	; (8001cf4 <main+0x2cc>)
 8001b4a:	f7fe fe01 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4974      	ldr	r1, [pc, #464]	; (8001d24 <main+0x2fc>)
 8001b52:	4868      	ldr	r0, [pc, #416]	; (8001cf4 <main+0x2cc>)
 8001b54:	f7fe fdfc 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4973      	ldr	r1, [pc, #460]	; (8001d28 <main+0x300>)
 8001b5c:	4865      	ldr	r0, [pc, #404]	; (8001cf4 <main+0x2cc>)
 8001b5e:	f7fe fdf7 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	4971      	ldr	r1, [pc, #452]	; (8001d2c <main+0x304>)
 8001b66:	4863      	ldr	r0, [pc, #396]	; (8001cf4 <main+0x2cc>)
 8001b68:	f7fe fdf2 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	4970      	ldr	r1, [pc, #448]	; (8001d30 <main+0x308>)
 8001b70:	4860      	ldr	r0, [pc, #384]	; (8001cf4 <main+0x2cc>)
 8001b72:	f7fe fded 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 8001b76:	2200      	movs	r2, #0
 8001b78:	496e      	ldr	r1, [pc, #440]	; (8001d34 <main+0x30c>)
 8001b7a:	485e      	ldr	r0, [pc, #376]	; (8001cf4 <main+0x2cc>)
 8001b7c:	f7fe fde8 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8001b80:	2200      	movs	r2, #0
 8001b82:	496d      	ldr	r1, [pc, #436]	; (8001d38 <main+0x310>)
 8001b84:	485b      	ldr	r0, [pc, #364]	; (8001cf4 <main+0x2cc>)
 8001b86:	f7fe fde3 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	496b      	ldr	r1, [pc, #428]	; (8001d3c <main+0x314>)
 8001b8e:	4859      	ldr	r0, [pc, #356]	; (8001cf4 <main+0x2cc>)
 8001b90:	f7fe fdde 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	496a      	ldr	r1, [pc, #424]	; (8001d40 <main+0x318>)
 8001b98:	4856      	ldr	r0, [pc, #344]	; (8001cf4 <main+0x2cc>)
 8001b9a:	f7fe fdd9 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4968      	ldr	r1, [pc, #416]	; (8001d44 <main+0x31c>)
 8001ba2:	4854      	ldr	r0, [pc, #336]	; (8001cf4 <main+0x2cc>)
 8001ba4:	f7fe fdd4 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4967      	ldr	r1, [pc, #412]	; (8001d48 <main+0x320>)
 8001bac:	4851      	ldr	r0, [pc, #324]	; (8001cf4 <main+0x2cc>)
 8001bae:	f7fe fdcf 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4965      	ldr	r1, [pc, #404]	; (8001d4c <main+0x324>)
 8001bb6:	484f      	ldr	r0, [pc, #316]	; (8001cf4 <main+0x2cc>)
 8001bb8:	f7fe fdca 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4964      	ldr	r1, [pc, #400]	; (8001d50 <main+0x328>)
 8001bc0:	484c      	ldr	r0, [pc, #304]	; (8001cf4 <main+0x2cc>)
 8001bc2:	f7fe fdc5 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	4962      	ldr	r1, [pc, #392]	; (8001d54 <main+0x32c>)
 8001bca:	484a      	ldr	r0, [pc, #296]	; (8001cf4 <main+0x2cc>)
 8001bcc:	f7fe fdc0 	bl	8000750 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4961      	ldr	r1, [pc, #388]	; (8001d58 <main+0x330>)
 8001bd4:	4861      	ldr	r0, [pc, #388]	; (8001d5c <main+0x334>)
 8001bd6:	f014 fdcd 	bl	8016774 <f_mount>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d175      	bne.n	8001ccc <main+0x2a4>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "pvdwrk.csv\0";
 8001be0:	4a5f      	ldr	r2, [pc, #380]	; (8001d60 <main+0x338>)
 8001be2:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8001be6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001be8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigPath[] ="Config.csv\0";
 8001bec:	4a5d      	ldr	r2, [pc, #372]	; (8001d64 <main+0x33c>)
 8001bee:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8001bf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8001bf8:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4859      	ldr	r0, [pc, #356]	; (8001d68 <main+0x340>)
 8001c02:	f014 fdfd 	bl	8016800 <f_open>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d13f      	bne.n	8001c8c <main+0x264>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001c0c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8001c10:	220a      	movs	r2, #10
 8001c12:	4619      	mov	r1, r3
 8001c14:	4854      	ldr	r0, [pc, #336]	; (8001d68 <main+0x340>)
 8001c16:	f014 fdf3 	bl	8016800 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	4a53      	ldr	r2, [pc, #332]	; (8001d6c <main+0x344>)
 8001c1e:	461c      	mov	r4, r3
 8001c20:	4615      	mov	r5, r2
 8001c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c2e:	c403      	stmia	r4!, {r0, r1}
 8001c30:	8022      	strh	r2, [r4, #0]
 8001c32:	3402      	adds	r4, #2
 8001c34:	0c13      	lsrs	r3, r2, #16
 8001c36:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8001c38:	463b      	mov	r3, r7
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fb50 	bl	80002e0 <strlen>
 8001c40:	4602      	mov	r2, r0
 8001c42:	463b      	mov	r3, r7
 8001c44:	4413      	add	r3, r2
 8001c46:	4a4a      	ldr	r2, [pc, #296]	; (8001d70 <main+0x348>)
 8001c48:	4614      	mov	r4, r2
 8001c4a:	469c      	mov	ip, r3
 8001c4c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001c50:	4665      	mov	r5, ip
 8001c52:	4626      	mov	r6, r4
 8001c54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c56:	6028      	str	r0, [r5, #0]
 8001c58:	6069      	str	r1, [r5, #4]
 8001c5a:	60aa      	str	r2, [r5, #8]
 8001c5c:	60eb      	str	r3, [r5, #12]
 8001c5e:	3410      	adds	r4, #16
 8001c60:	f10c 0c10 	add.w	ip, ip, #16
 8001c64:	4574      	cmp	r4, lr
 8001c66:	d1f3      	bne.n	8001c50 <main+0x228>
 8001c68:	4662      	mov	r2, ip
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	cb03      	ldmia	r3!, {r0, r1}
 8001c6e:	6010      	str	r0, [r2, #0]
 8001c70:	6051      	str	r1, [r2, #4]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8001c76:	463b      	mov	r3, r7
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fb31 	bl	80002e0 <strlen>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4639      	mov	r1, r7
 8001c82:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <main+0x34c>)
 8001c84:	4838      	ldr	r0, [pc, #224]	; (8001d68 <main+0x340>)
 8001c86:	f015 f8b8 	bl	8016dfa <f_write>
 8001c8a:	e009      	b.n	8001ca0 <main+0x278>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fb26 	bl	80002e0 <strlen>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4639      	mov	r1, r7
 8001c98:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <main+0x350>)
 8001c9a:	4833      	ldr	r0, [pc, #204]	; (8001d68 <main+0x340>)
 8001c9c:	f014 ff6e 	bl	8016b7c <f_read>
      }
      f_close(&Config);
 8001ca0:	4831      	ldr	r0, [pc, #196]	; (8001d68 <main+0x340>)
 8001ca2:	f015 fa9d 	bl	80171e0 <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001ca6:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8001caa:	220a      	movs	r2, #10
 8001cac:	4619      	mov	r1, r3
 8001cae:	4833      	ldr	r0, [pc, #204]	; (8001d7c <main+0x354>)
 8001cb0:	f014 fda6 	bl	8016800 <f_open>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (end_flag){
 8001cb4:	e00a      	b.n	8001ccc <main+0x2a4>

	  if(GPS_flag){
 8001cb6:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <main+0x358>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <main+0x2a4>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 8001cbe:	2146      	movs	r1, #70	; 0x46
 8001cc0:	4810      	ldr	r0, [pc, #64]	; (8001d04 <main+0x2dc>)
 8001cc2:	f7ff fe1b 	bl	80018fc <WriteToBuff>
		  GPS_flag=0;
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <main+0x358>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
  while (end_flag){
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <main+0x35c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f0      	bne.n	8001cb6 <main+0x28e>
    /* USER CODE BEGIN 3 */
  }

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <main+0x2c0>)
 8001cd8:	f004 feed 	bl	8006ab6 <HAL_GPIO_TogglePin>
 8001cdc:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce8:	58020400 	.word	0x58020400
 8001cec:	2400158c 	.word	0x2400158c
 8001cf0:	58020000 	.word	0x58020000
 8001cf4:	24001330 	.word	0x24001330
 8001cf8:	24000000 	.word	0x24000000
 8001cfc:	080195d8 	.word	0x080195d8
 8001d00:	24001460 	.word	0x24001460
 8001d04:	24000e08 	.word	0x24000e08
 8001d08:	080195e4 	.word	0x080195e4
 8001d0c:	080195e8 	.word	0x080195e8
 8001d10:	080195ec 	.word	0x080195ec
 8001d14:	080195f0 	.word	0x080195f0
 8001d18:	080195f4 	.word	0x080195f4
 8001d1c:	080195f8 	.word	0x080195f8
 8001d20:	080195fc 	.word	0x080195fc
 8001d24:	08019600 	.word	0x08019600
 8001d28:	08019604 	.word	0x08019604
 8001d2c:	08019608 	.word	0x08019608
 8001d30:	0801960c 	.word	0x0801960c
 8001d34:	08019610 	.word	0x08019610
 8001d38:	08019614 	.word	0x08019614
 8001d3c:	08019618 	.word	0x08019618
 8001d40:	0801961c 	.word	0x0801961c
 8001d44:	08019620 	.word	0x08019620
 8001d48:	08019624 	.word	0x08019624
 8001d4c:	08019628 	.word	0x08019628
 8001d50:	0801962c 	.word	0x0801962c
 8001d54:	08019630 	.word	0x08019630
 8001d58:	24001718 	.word	0x24001718
 8001d5c:	24000e54 	.word	0x24000e54
 8001d60:	0801969c 	.word	0x0801969c
 8001d64:	080196a8 	.word	0x080196a8
 8001d68:	24001088 	.word	0x24001088
 8001d6c:	08019634 	.word	0x08019634
 8001d70:	08019660 	.word	0x08019660
 8001d74:	24000e50 	.word	0x24000e50
 8001d78:	24000e04 	.word	0x24000e04
 8001d7c:	24000bd4 	.word	0x24000bd4
 8001d80:	240001f4 	.word	0x240001f4
 8001d84:	24000008 	.word	0x24000008

08001d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b0cc      	sub	sp, #304	; 0x130
 8001d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d92:	224c      	movs	r2, #76	; 0x4c
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f015 ffeb 	bl	8017d72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001da0:	2220      	movs	r2, #32
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f015 ffe4 	bl	8017d72 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	4618      	mov	r0, r3
 8001db0:	23bc      	movs	r3, #188	; 0xbc
 8001db2:	461a      	mov	r2, r3
 8001db4:	2100      	movs	r1, #0
 8001db6:	f015 ffdc 	bl	8017d72 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001dba:	2002      	movs	r0, #2
 8001dbc:	f006 f976 	bl	80080ac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	4b71      	ldr	r3, [pc, #452]	; (8001f8c <SystemClock_Config+0x204>)
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	4a70      	ldr	r2, [pc, #448]	; (8001f8c <SystemClock_Config+0x204>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001dd2:	4b6e      	ldr	r3, [pc, #440]	; (8001f8c <SystemClock_Config+0x204>)
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	f003 0201 	and.w	r2, r3, #1
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	4b6c      	ldr	r3, [pc, #432]	; (8001f90 <SystemClock_Config+0x208>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	4a6b      	ldr	r2, [pc, #428]	; (8001f90 <SystemClock_Config+0x208>)
 8001de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001de8:	6193      	str	r3, [r2, #24]
 8001dea:	4b69      	ldr	r3, [pc, #420]	; (8001f90 <SystemClock_Config+0x208>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001dfa:	bf00      	nop
 8001dfc:	4b64      	ldr	r3, [pc, #400]	; (8001f90 <SystemClock_Config+0x208>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e08:	d1f8      	bne.n	8001dfc <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e0a:	f006 f8b5 	bl	8007f78 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8001e0e:	f001 f941 	bl	8003094 <HAL_GetREVID>
 8001e12:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <SystemClock_Config+0x20c>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e16:	4a5f      	ldr	r2, [pc, #380]	; (8001f94 <SystemClock_Config+0x20c>)
 8001e18:	f043 0318 	orr.w	r3, r3, #24
 8001e1c:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <SystemClock_Config+0x20c>)
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	f023 0303 	bic.w	r3, r3, #3
 8001e26:	4a5b      	ldr	r2, [pc, #364]	; (8001f94 <SystemClock_Config+0x20c>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001e2e:	2325      	movs	r3, #37	; 0x25
 8001e30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001e5a:	2340      	movs	r3, #64	; 0x40
 8001e5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e60:	2302      	movs	r3, #2
 8001e62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8001e66:	230a      	movs	r3, #10
 8001e68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e72:	230c      	movs	r3, #12
 8001e74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f006 f99d 	bl	80081c8 <HAL_RCC_OscConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001e94:	f000 fbe8 	bl	8002668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e98:	233f      	movs	r3, #63	; 0x3f
 8001e9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001eaa:	2308      	movs	r3, #8
 8001eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001eb0:	2340      	movs	r3, #64	; 0x40
 8001eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001eb6:	2340      	movs	r3, #64	; 0x40
 8001eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001ec4:	2340      	movs	r3, #64	; 0x40
 8001ec6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ece:	2102      	movs	r1, #2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f006 fd89 	bl	80089e8 <HAL_RCC_ClockConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8001edc:	f000 fbc4 	bl	8002668 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8001ee0:	f107 0308 	add.w	r3, r7, #8
 8001ee4:	4a2c      	ldr	r2, [pc, #176]	; (8001f98 <SystemClock_Config+0x210>)
 8001ee6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	2202      	movs	r2, #2
 8001eee:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	220c      	movs	r2, #12
 8001ef6:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	2203      	movs	r2, #3
 8001efe:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f00:	f107 0308 	add.w	r3, r7, #8
 8001f04:	2202      	movs	r2, #2
 8001f06:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8001f08:	f107 0308 	add.w	r3, r7, #8
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	22c0      	movs	r2, #192	; 0xc0
 8001f16:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f30:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001f32:	f107 0308 	add.w	r3, r7, #8
 8001f36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f3a:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f3c:	f107 0308 	add.w	r3, r7, #8
 8001f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f44:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f46:	f107 0308 	add.w	r3, r7, #8
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f66:	f107 0308 	add.w	r3, r7, #8
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f007 f8ec 	bl	8009148 <HAL_RCCEx_PeriphCLKConfig>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 8001f76:	f000 fb77 	bl	8002668 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001f7a:	f006 feeb 	bl	8008d54 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8001f7e:	f006 f8cf 	bl	8008120 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8001f82:	bf00      	nop
 8001f84:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	58000400 	.word	0x58000400
 8001f90:	58024800 	.word	0x58024800
 8001f94:	58024400 	.word	0x58024400
 8001f98:	00459002 	.word	0x00459002

08001f9c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001fa2:	4a30      	ldr	r2, [pc, #192]	; (8002064 <MX_FDCAN1_Init+0xc8>)
 8001fa4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001fa6:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001fa8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001fac:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001fba:	4b29      	ldr	r3, [pc, #164]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 50;
 8001fcc:	4b24      	ldr	r3, [pc, #144]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001fce:	2232      	movs	r2, #50	; 0x32
 8001fd0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 109;
 8001fd2:	4b23      	ldr	r3, [pc, #140]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001fd4:	226d      	movs	r2, #109	; 0x6d
 8001fd6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 50;
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001fda:	2232      	movs	r2, #50	; 0x32
 8001fdc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001fe6:	2205      	movs	r2, #5
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001fec:	220a      	movs	r2, #10
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001ff2:	2205      	movs	r2, #5
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8001ffe:	2202      	movs	r2, #2
 8002000:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8002004:	2202      	movs	r2, #2
 8002006:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 800200a:	2240      	movs	r2, #64	; 0x40
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8002010:	2212      	movs	r2, #18
 8002012:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8002016:	2200      	movs	r2, #0
 8002018:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 800201c:	2204      	movs	r2, #4
 800201e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8002022:	2200      	movs	r2, #0
 8002024:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8002028:	2204      	movs	r2, #4
 800202a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 800202e:	2200      	movs	r2, #0
 8002030:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8002034:	2200      	movs	r2, #0
 8002036:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 800203a:	2200      	movs	r2, #0
 800203c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8002040:	2200      	movs	r2, #0
 8002042:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 8002046:	2204      	movs	r2, #4
 8002048:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <MX_FDCAN1_Init+0xc4>)
 800204c:	f003 fa16 	bl	800547c <HAL_FDCAN_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8002056:	f000 fb07 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	24001460 	.word	0x24001460
 8002064:	4000a000 	.word	0x4000a000

08002068 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800206c:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 800206e:	4a2f      	ldr	r2, [pc, #188]	; (800212c <MX_FDCAN2_Init+0xc4>)
 8002070:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002078:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 8002080:	2200      	movs	r2, #0
 8002082:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002084:	4b28      	ldr	r3, [pc, #160]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 8002086:	2200      	movs	r2, #0
 8002088:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800208a:	4b27      	ldr	r3, [pc, #156]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 800208c:	2200      	movs	r2, #0
 800208e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 8002092:	2201      	movs	r2, #1
 8002094:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 8002098:	2201      	movs	r2, #1
 800209a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800209c:	4b22      	ldr	r3, [pc, #136]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 800209e:	2202      	movs	r2, #2
 80020a0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020a4:	2202      	movs	r2, #2
 80020a6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80020b4:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020bc:	2201      	movs	r2, #1
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020da:	2204      	movs	r2, #4
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020e6:	2204      	movs	r2, #4
 80020e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020f2:	2204      	movs	r2, #4
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 8002104:	2200      	movs	r2, #0
 8002106:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 800210a:	2200      	movs	r2, #0
 800210c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 8002110:	2204      	movs	r2, #4
 8002112:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002114:	4804      	ldr	r0, [pc, #16]	; (8002128 <MX_FDCAN2_Init+0xc0>)
 8002116:	f003 f9b1 	bl	800547c <HAL_FDCAN_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8002120:	f000 faa2 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	24001660 	.word	0x24001660
 800212c:	4000a400 	.word	0x4000a400

08002130 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002144:	2300      	movs	r3, #0
 8002146:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002148:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <MX_RTC_Init+0xb4>)
 800214a:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <MX_RTC_Init+0xb8>)
 800214c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <MX_RTC_Init+0xb4>)
 8002150:	2200      	movs	r2, #0
 8002152:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 8002154:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <MX_RTC_Init+0xb4>)
 8002156:	2201      	movs	r2, #1
 8002158:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 800215a:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <MX_RTC_Init+0xb4>)
 800215c:	f244 0204 	movw	r2, #16388	; 0x4004
 8002160:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <MX_RTC_Init+0xb4>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002168:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <MX_RTC_Init+0xb4>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <MX_RTC_Init+0xb4>)
 8002170:	2200      	movs	r2, #0
 8002172:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <MX_RTC_Init+0xb4>)
 8002176:	2200      	movs	r2, #0
 8002178:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800217a:	481a      	ldr	r0, [pc, #104]	; (80021e4 <MX_RTC_Init+0xb4>)
 800217c:	f008 fea8 	bl	800aed0 <HAL_RTC_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002186:	f000 fa6f 	bl	8002668 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2200      	movs	r2, #0
 80021a2:	4619      	mov	r1, r3
 80021a4:	480f      	ldr	r0, [pc, #60]	; (80021e4 <MX_RTC_Init+0xb4>)
 80021a6:	f008 ff0b 	bl	800afc0 <HAL_RTC_SetTime>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80021b0:	f000 fa5a 	bl	8002668 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80021b4:	2301      	movs	r3, #1
 80021b6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80021b8:	2301      	movs	r3, #1
 80021ba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80021bc:	2301      	movs	r3, #1
 80021be:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80021c4:	463b      	mov	r3, r7
 80021c6:	2200      	movs	r2, #0
 80021c8:	4619      	mov	r1, r3
 80021ca:	4806      	ldr	r0, [pc, #24]	; (80021e4 <MX_RTC_Init+0xb4>)
 80021cc:	f008 ff96 	bl	800b0fc <HAL_RTC_SetDate>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80021d6:	f000 fa47 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2400143c 	.word	0x2400143c
 80021e8:	58004000 	.word	0x58004000

080021ec <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <MX_SDMMC1_SD_Init+0x3c>)
 80021f2:	4a0e      	ldr	r2, [pc, #56]	; (800222c <MX_SDMMC1_SD_Init+0x40>)
 80021f4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_SDMMC1_SD_Init+0x3c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <MX_SDMMC1_SD_Init+0x3c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_SDMMC1_SD_Init+0x3c>)
 8002204:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002208:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <MX_SDMMC1_SD_Init+0x3c>)
 800220c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002210:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <MX_SDMMC1_SD_Init+0x3c>)
 8002214:	2200      	movs	r2, #0
 8002216:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <MX_SDMMC1_SD_Init+0x3c>)
 800221a:	2201      	movs	r2, #1
 800221c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	240013bc 	.word	0x240013bc
 800222c:	52007000 	.word	0x52007000

08002230 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <MX_SPI1_Init+0xa4>)
 8002236:	4a28      	ldr	r2, [pc, #160]	; (80022d8 <MX_SPI1_Init+0xa8>)
 8002238:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <MX_SPI1_Init+0xa4>)
 800223c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002240:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <MX_SPI1_Init+0xa4>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002248:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <MX_SPI1_Init+0xa4>)
 800224a:	2207      	movs	r2, #7
 800224c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800224e:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <MX_SPI1_Init+0xa4>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <MX_SPI1_Init+0xa4>)
 8002256:	2200      	movs	r2, #0
 8002258:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <MX_SPI1_Init+0xa4>)
 800225c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002260:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <MX_SPI1_Init+0xa4>)
 8002264:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002268:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <MX_SPI1_Init+0xa4>)
 800226c:	2200      	movs	r2, #0
 800226e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <MX_SPI1_Init+0xa4>)
 8002272:	2200      	movs	r2, #0
 8002274:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <MX_SPI1_Init+0xa4>)
 8002278:	2200      	movs	r2, #0
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800227c:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <MX_SPI1_Init+0xa4>)
 800227e:	2200      	movs	r2, #0
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002282:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <MX_SPI1_Init+0xa4>)
 8002284:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <MX_SPI1_Init+0xa4>)
 800228c:	2200      	movs	r2, #0
 800228e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002290:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <MX_SPI1_Init+0xa4>)
 8002292:	2200      	movs	r2, #0
 8002294:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <MX_SPI1_Init+0xa4>)
 8002298:	2200      	movs	r2, #0
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <MX_SPI1_Init+0xa4>)
 800229e:	2200      	movs	r2, #0
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MX_SPI1_Init+0xa4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <MX_SPI1_Init+0xa4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <MX_SPI1_Init+0xa4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <MX_SPI1_Init+0xa4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <MX_SPI1_Init+0xa4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <MX_SPI1_Init+0xa4>)
 80022c2:	f00a ffdb 	bl	800d27c <HAL_SPI_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80022cc:	f000 f9cc 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	2400158c 	.word	0x2400158c
 80022d8:	40013000 	.word	0x40013000

080022dc <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <MX_UART8_Init+0x90>)
 80022e2:	4a23      	ldr	r2, [pc, #140]	; (8002370 <MX_UART8_Init+0x94>)
 80022e4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <MX_UART8_Init+0x90>)
 80022e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022ec:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <MX_UART8_Init+0x90>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <MX_UART8_Init+0x90>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <MX_UART8_Init+0x90>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <MX_UART8_Init+0x90>)
 8002302:	220c      	movs	r2, #12
 8002304:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <MX_UART8_Init+0x90>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800230c:	4b17      	ldr	r3, [pc, #92]	; (800236c <MX_UART8_Init+0x90>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <MX_UART8_Init+0x90>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <MX_UART8_Init+0x90>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <MX_UART8_Init+0x90>)
 8002320:	2200      	movs	r2, #0
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002324:	4811      	ldr	r0, [pc, #68]	; (800236c <MX_UART8_Init+0x90>)
 8002326:	f00c f85a 	bl	800e3de <HAL_UART_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8002330:	f000 f99a 	bl	8002668 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002334:	2100      	movs	r1, #0
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <MX_UART8_Init+0x90>)
 8002338:	f00d f9ea 	bl	800f710 <HAL_UARTEx_SetTxFifoThreshold>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8002342:	f000 f991 	bl	8002668 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002346:	2100      	movs	r1, #0
 8002348:	4808      	ldr	r0, [pc, #32]	; (800236c <MX_UART8_Init+0x90>)
 800234a:	f00d fa1f 	bl	800f78c <HAL_UARTEx_SetRxFifoThreshold>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002354:	f000 f988 	bl	8002668 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002358:	4804      	ldr	r0, [pc, #16]	; (800236c <MX_UART8_Init+0x90>)
 800235a:	f00d f9a0 	bl	800f69e <HAL_UARTEx_DisableFifoMode>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002364:	f000 f980 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	24001500 	.word	0x24001500
 8002370:	40007c00 	.word	0x40007c00

08002374 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002378:	4b22      	ldr	r3, [pc, #136]	; (8002404 <MX_USART3_UART_Init+0x90>)
 800237a:	4a23      	ldr	r2, [pc, #140]	; (8002408 <MX_USART3_UART_Init+0x94>)
 800237c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <MX_USART3_UART_Init+0x90>)
 8002380:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002384:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002386:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <MX_USART3_UART_Init+0x90>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <MX_USART3_UART_Init+0x90>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <MX_USART3_UART_Init+0x90>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <MX_USART3_UART_Init+0x90>)
 800239a:	220c      	movs	r2, #12
 800239c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <MX_USART3_UART_Init+0x90>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <MX_USART3_UART_Init+0x90>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <MX_USART3_UART_Init+0x90>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <MX_USART3_UART_Init+0x90>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <MX_USART3_UART_Init+0x90>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023bc:	4811      	ldr	r0, [pc, #68]	; (8002404 <MX_USART3_UART_Init+0x90>)
 80023be:	f00c f80e 	bl	800e3de <HAL_UART_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80023c8:	f000 f94e 	bl	8002668 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023cc:	2100      	movs	r1, #0
 80023ce:	480d      	ldr	r0, [pc, #52]	; (8002404 <MX_USART3_UART_Init+0x90>)
 80023d0:	f00d f99e 	bl	800f710 <HAL_UARTEx_SetTxFifoThreshold>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80023da:	f000 f945 	bl	8002668 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023de:	2100      	movs	r1, #0
 80023e0:	4808      	ldr	r0, [pc, #32]	; (8002404 <MX_USART3_UART_Init+0x90>)
 80023e2:	f00d f9d3 	bl	800f78c <HAL_UARTEx_SetRxFifoThreshold>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80023ec:	f000 f93c 	bl	8002668 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80023f0:	4804      	ldr	r0, [pc, #16]	; (8002404 <MX_USART3_UART_Init+0x90>)
 80023f2:	f00d f954 	bl	800f69e <HAL_UARTEx_DisableFifoMode>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80023fc:	f000 f934 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	24001330 	.word	0x24001330
 8002408:	40004800 	.word	0x40004800

0800240c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <MX_DMA_Init+0x3c>)
 8002414:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002418:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <MX_DMA_Init+0x3c>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <MX_DMA_Init+0x3c>)
 8002424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2101      	movs	r1, #1
 8002434:	200b      	movs	r0, #11
 8002436:	f000 ff14 	bl	8003262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800243a:	200b      	movs	r0, #11
 800243c:	f000 ff2b 	bl	8003296 <HAL_NVIC_EnableIRQ>

}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	58024400 	.word	0x58024400

0800244c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002452:	f107 031c 	add.w	r3, r7, #28
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002462:	4b6d      	ldr	r3, [pc, #436]	; (8002618 <MX_GPIO_Init+0x1cc>)
 8002464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002468:	4a6b      	ldr	r2, [pc, #428]	; (8002618 <MX_GPIO_Init+0x1cc>)
 800246a:	f043 0310 	orr.w	r3, r3, #16
 800246e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002472:	4b69      	ldr	r3, [pc, #420]	; (8002618 <MX_GPIO_Init+0x1cc>)
 8002474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002480:	4b65      	ldr	r3, [pc, #404]	; (8002618 <MX_GPIO_Init+0x1cc>)
 8002482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002486:	4a64      	ldr	r2, [pc, #400]	; (8002618 <MX_GPIO_Init+0x1cc>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002490:	4b61      	ldr	r3, [pc, #388]	; (8002618 <MX_GPIO_Init+0x1cc>)
 8002492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800249e:	4b5e      	ldr	r3, [pc, #376]	; (8002618 <MX_GPIO_Init+0x1cc>)
 80024a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a4:	4a5c      	ldr	r2, [pc, #368]	; (8002618 <MX_GPIO_Init+0x1cc>)
 80024a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ae:	4b5a      	ldr	r3, [pc, #360]	; (8002618 <MX_GPIO_Init+0x1cc>)
 80024b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024bc:	4b56      	ldr	r3, [pc, #344]	; (8002618 <MX_GPIO_Init+0x1cc>)
 80024be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c2:	4a55      	ldr	r2, [pc, #340]	; (8002618 <MX_GPIO_Init+0x1cc>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024cc:	4b52      	ldr	r3, [pc, #328]	; (8002618 <MX_GPIO_Init+0x1cc>)
 80024ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	4b4f      	ldr	r3, [pc, #316]	; (8002618 <MX_GPIO_Init+0x1cc>)
 80024dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e0:	4a4d      	ldr	r2, [pc, #308]	; (8002618 <MX_GPIO_Init+0x1cc>)
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ea:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <MX_GPIO_Init+0x1cc>)
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f8:	4b47      	ldr	r3, [pc, #284]	; (8002618 <MX_GPIO_Init+0x1cc>)
 80024fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fe:	4a46      	ldr	r2, [pc, #280]	; (8002618 <MX_GPIO_Init+0x1cc>)
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002508:	4b43      	ldr	r3, [pc, #268]	; (8002618 <MX_GPIO_Init+0x1cc>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8002516:	2200      	movs	r2, #0
 8002518:	210c      	movs	r1, #12
 800251a:	4840      	ldr	r0, [pc, #256]	; (800261c <MX_GPIO_Init+0x1d0>)
 800251c:	f004 fab2 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8002520:	2200      	movs	r2, #0
 8002522:	2103      	movs	r1, #3
 8002524:	483e      	ldr	r0, [pc, #248]	; (8002620 <MX_GPIO_Init+0x1d4>)
 8002526:	f004 faad 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	2101      	movs	r1, #1
 800252e:	483d      	ldr	r0, [pc, #244]	; (8002624 <MX_GPIO_Init+0x1d8>)
 8002530:	f004 faa8 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8002534:	2201      	movs	r2, #1
 8002536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800253a:	483b      	ldr	r0, [pc, #236]	; (8002628 <MX_GPIO_Init+0x1dc>)
 800253c:	f004 faa2 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8002540:	230c      	movs	r3, #12
 8002542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002544:	2301      	movs	r3, #1
 8002546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	4619      	mov	r1, r3
 8002556:	4831      	ldr	r0, [pc, #196]	; (800261c <MX_GPIO_Init+0x1d0>)
 8002558:	f004 f8cc 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 800255c:	2303      	movs	r3, #3
 800255e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002560:	2301      	movs	r3, #1
 8002562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	4619      	mov	r1, r3
 8002572:	482b      	ldr	r0, [pc, #172]	; (8002620 <MX_GPIO_Init+0x1d4>)
 8002574:	f004 f8be 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8002578:	2304      	movs	r3, #4
 800257a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800257c:	4b2b      	ldr	r3, [pc, #172]	; (800262c <MX_GPIO_Init+0x1e0>)
 800257e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	4619      	mov	r1, r3
 800258a:	4825      	ldr	r0, [pc, #148]	; (8002620 <MX_GPIO_Init+0x1d4>)
 800258c:	f004 f8b2 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002590:	2301      	movs	r3, #1
 8002592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002594:	2301      	movs	r3, #1
 8002596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	2300      	movs	r3, #0
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	4619      	mov	r1, r3
 80025a6:	481f      	ldr	r0, [pc, #124]	; (8002624 <MX_GPIO_Init+0x1d8>)
 80025a8:	f004 f8a4 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 80025ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <MX_GPIO_Init+0x1e0>)
 80025b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 80025ba:	f107 031c 	add.w	r3, r7, #28
 80025be:	4619      	mov	r1, r3
 80025c0:	4816      	ldr	r0, [pc, #88]	; (800261c <MX_GPIO_Init+0x1d0>)
 80025c2:	f004 f897 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 80025c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025cc:	2301      	movs	r3, #1
 80025ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	4619      	mov	r1, r3
 80025de:	4812      	ldr	r0, [pc, #72]	; (8002628 <MX_GPIO_Init+0x1dc>)
 80025e0:	f004 f888 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 80025e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	4619      	mov	r1, r3
 80025f8:	4809      	ldr	r0, [pc, #36]	; (8002620 <MX_GPIO_Init+0x1d4>)
 80025fa:	f004 f87b 	bl	80066f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	2017      	movs	r0, #23
 8002604:	f000 fe2d 	bl	8003262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002608:	2017      	movs	r0, #23
 800260a:	f000 fe44 	bl	8003296 <HAL_NVIC_EnableIRQ>

}
 800260e:	bf00      	nop
 8002610:	3730      	adds	r7, #48	; 0x30
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	58024400 	.word	0x58024400
 800261c:	58021000 	.word	0x58021000
 8002620:	58020000 	.word	0x58020000
 8002624:	58020400 	.word	0x58020400
 8002628:	58020c00 	.word	0x58020c00
 800262c:	11110000 	.word	0x11110000

08002630 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <HAL_GPIO_EXTI_Callback+0x1c>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	24000008 	.word	0x24000008

08002650 <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_PWR_PVDCallback+0x14>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	24000008 	.word	0x24000008

08002668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800266c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 800266e:	4802      	ldr	r0, [pc, #8]	; (8002678 <Error_Handler+0x10>)
 8002670:	f015 fca4 	bl	8017fbc <puts>
 8002674:	e7fb      	b.n	800266e <Error_Handler+0x6>
 8002676:	bf00      	nop
 8002678:	080196b4 	.word	0x080196b4

0800267c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002684:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002688:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002694:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002698:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800269c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00b      	beq.n	80026bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80026a4:	e000      	b.n	80026a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80026a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80026a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f9      	beq.n	80026a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80026b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
  int i=0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e009      	b.n	80026f4 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	60ba      	str	r2, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ffc7 	bl	800267c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dbf1      	blt.n	80026e0 <_write+0x16>
  return len;
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800270e:	f107 0308 	add.w	r3, r7, #8
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <HAL_MspInit+0x60>)
 800271a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800271e:	4a12      	ldr	r2, [pc, #72]	; (8002768 <HAL_MspInit+0x60>)
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <HAL_MspInit+0x60>)
 800272a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	2001      	movs	r0, #1
 800273c:	f000 fd91 	bl	8003262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8002740:	2001      	movs	r0, #1
 8002742:	f000 fda8 	bl	8003296 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8002746:	23c0      	movs	r3, #192	; 0xc0
 8002748:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 800274a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800274e:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002750:	f107 0308 	add.w	r3, r7, #8
 8002754:	4618      	mov	r0, r3
 8002756:	f005 fc1f 	bl	8007f98 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800275a:	f005 fc97 	bl	800808c <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	58024400 	.word	0x58024400

0800276c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	; 0x30
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a48      	ldr	r2, [pc, #288]	; (80028ac <HAL_FDCAN_MspInit+0x140>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d14e      	bne.n	800282c <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800278e:	4b48      	ldr	r3, [pc, #288]	; (80028b0 <HAL_FDCAN_MspInit+0x144>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	4a46      	ldr	r2, [pc, #280]	; (80028b0 <HAL_FDCAN_MspInit+0x144>)
 8002796:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002798:	4b45      	ldr	r3, [pc, #276]	; (80028b0 <HAL_FDCAN_MspInit+0x144>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d10e      	bne.n	80027be <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80027a0:	4b44      	ldr	r3, [pc, #272]	; (80028b4 <HAL_FDCAN_MspInit+0x148>)
 80027a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80027a6:	4a43      	ldr	r2, [pc, #268]	; (80028b4 <HAL_FDCAN_MspInit+0x148>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80027b0:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <HAL_FDCAN_MspInit+0x148>)
 80027b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027be:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HAL_FDCAN_MspInit+0x148>)
 80027c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c4:	4a3b      	ldr	r2, [pc, #236]	; (80028b4 <HAL_FDCAN_MspInit+0x148>)
 80027c6:	f043 0302 	orr.w	r3, r3, #2
 80027ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ce:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <HAL_FDCAN_MspInit+0x148>)
 80027d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ea:	2303      	movs	r3, #3
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80027ee:	2309      	movs	r3, #9
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f2:	f107 031c 	add.w	r3, r7, #28
 80027f6:	4619      	mov	r1, r3
 80027f8:	482f      	ldr	r0, [pc, #188]	; (80028b8 <HAL_FDCAN_MspInit+0x14c>)
 80027fa:	f003 ff7b 	bl	80066f4 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 80027fe:	2040      	movs	r0, #64	; 0x40
 8002800:	f004 f98e 	bl	8006b20 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8002804:	2080      	movs	r0, #128	; 0x80
 8002806:	f004 f98b 	bl	8006b20 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	2013      	movs	r0, #19
 8002810:	f000 fd27 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002814:	2013      	movs	r0, #19
 8002816:	f000 fd3e 	bl	8003296 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	2015      	movs	r0, #21
 8002820:	f000 fd1f 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002824:	2015      	movs	r0, #21
 8002826:	f000 fd36 	bl	8003296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800282a:	e03b      	b.n	80028a4 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a22      	ldr	r2, [pc, #136]	; (80028bc <HAL_FDCAN_MspInit+0x150>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d136      	bne.n	80028a4 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <HAL_FDCAN_MspInit+0x144>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3301      	adds	r3, #1
 800283c:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <HAL_FDCAN_MspInit+0x144>)
 800283e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_FDCAN_MspInit+0x144>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d10e      	bne.n	8002866 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002848:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <HAL_FDCAN_MspInit+0x148>)
 800284a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800284e:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_FDCAN_MspInit+0x148>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_FDCAN_MspInit+0x148>)
 800285a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_FDCAN_MspInit+0x148>)
 8002868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_FDCAN_MspInit+0x148>)
 800286e:	f043 0302 	orr.w	r3, r3, #2
 8002872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002876:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <HAL_FDCAN_MspInit+0x148>)
 8002878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002884:	2360      	movs	r3, #96	; 0x60
 8002886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002894:	2309      	movs	r3, #9
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	4619      	mov	r1, r3
 800289e:	4806      	ldr	r0, [pc, #24]	; (80028b8 <HAL_FDCAN_MspInit+0x14c>)
 80028a0:	f003 ff28 	bl	80066f4 <HAL_GPIO_Init>
}
 80028a4:	bf00      	nop
 80028a6:	3730      	adds	r7, #48	; 0x30
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	4000a000 	.word	0x4000a000
 80028b0:	24000b1c 	.word	0x24000b1c
 80028b4:	58024400 	.word	0x58024400
 80028b8:	58020400 	.word	0x58020400
 80028bc:	4000a400 	.word	0x4000a400

080028c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a07      	ldr	r2, [pc, #28]	; (80028ec <HAL_RTC_MspInit+0x2c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d105      	bne.n	80028de <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_RTC_MspInit+0x30>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a06      	ldr	r2, [pc, #24]	; (80028f0 <HAL_RTC_MspInit+0x30>)
 80028d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	58004000 	.word	0x58004000
 80028f0:	58024400 	.word	0x58024400

080028f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2e      	ldr	r2, [pc, #184]	; (80029cc <HAL_SD_MspInit+0xd8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d155      	bne.n	80029c2 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002916:	4b2e      	ldr	r3, [pc, #184]	; (80029d0 <HAL_SD_MspInit+0xdc>)
 8002918:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800291c:	4a2c      	ldr	r2, [pc, #176]	; (80029d0 <HAL_SD_MspInit+0xdc>)
 800291e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002922:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002926:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <HAL_SD_MspInit+0xdc>)
 8002928:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002934:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <HAL_SD_MspInit+0xdc>)
 8002936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800293a:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <HAL_SD_MspInit+0xdc>)
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002944:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <HAL_SD_MspInit+0xdc>)
 8002946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002952:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <HAL_SD_MspInit+0xdc>)
 8002954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002958:	4a1d      	ldr	r2, [pc, #116]	; (80029d0 <HAL_SD_MspInit+0xdc>)
 800295a:	f043 0308 	orr.w	r3, r3, #8
 800295e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002962:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <HAL_SD_MspInit+0xdc>)
 8002964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002970:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002974:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002976:	2302      	movs	r3, #2
 8002978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297e:	2303      	movs	r3, #3
 8002980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002982:	230c      	movs	r3, #12
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002986:	f107 0314 	add.w	r3, r7, #20
 800298a:	4619      	mov	r1, r3
 800298c:	4811      	ldr	r0, [pc, #68]	; (80029d4 <HAL_SD_MspInit+0xe0>)
 800298e:	f003 feb1 	bl	80066f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002992:	2304      	movs	r3, #4
 8002994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80029a2:	230c      	movs	r3, #12
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	480a      	ldr	r0, [pc, #40]	; (80029d8 <HAL_SD_MspInit+0xe4>)
 80029ae:	f003 fea1 	bl	80066f4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2100      	movs	r1, #0
 80029b6:	2031      	movs	r0, #49	; 0x31
 80029b8:	f000 fc53 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80029bc:	2031      	movs	r0, #49	; 0x31
 80029be:	f000 fc6a 	bl	8003296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80029c2:	bf00      	nop
 80029c4:	3728      	adds	r7, #40	; 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	52007000 	.word	0x52007000
 80029d0:	58024400 	.word	0x58024400
 80029d4:	58020800 	.word	0x58020800
 80029d8:	58020c00 	.word	0x58020c00

080029dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1a      	ldr	r2, [pc, #104]	; (8002a64 <HAL_SPI_MspInit+0x88>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d12d      	bne.n	8002a5a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029fe:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_SPI_MspInit+0x8c>)
 8002a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a04:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <HAL_SPI_MspInit+0x8c>)
 8002a06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_SPI_MspInit+0x8c>)
 8002a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_SPI_MspInit+0x8c>)
 8002a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a22:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <HAL_SPI_MspInit+0x8c>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a2c:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <HAL_SPI_MspInit+0x8c>)
 8002a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a3a:	23e0      	movs	r3, #224	; 0xe0
 8002a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a4a:	2305      	movs	r3, #5
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4805      	ldr	r0, [pc, #20]	; (8002a6c <HAL_SPI_MspInit+0x90>)
 8002a56:	f003 fe4d 	bl	80066f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	; 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40013000 	.word	0x40013000
 8002a68:	58024400 	.word	0x58024400
 8002a6c:	58020000 	.word	0x58020000

08002a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a4b      	ldr	r2, [pc, #300]	; (8002bbc <HAL_UART_MspInit+0x14c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d12e      	bne.n	8002af0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002a92:	4b4b      	ldr	r3, [pc, #300]	; (8002bc0 <HAL_UART_MspInit+0x150>)
 8002a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a98:	4a49      	ldr	r2, [pc, #292]	; (8002bc0 <HAL_UART_MspInit+0x150>)
 8002a9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_UART_MspInit+0x150>)
 8002aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ab0:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <HAL_UART_MspInit+0x150>)
 8002ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab6:	4a42      	ldr	r2, [pc, #264]	; (8002bc0 <HAL_UART_MspInit+0x150>)
 8002ab8:	f043 0310 	orr.w	r3, r3, #16
 8002abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac0:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <HAL_UART_MspInit+0x150>)
 8002ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ae2:	f107 031c 	add.w	r3, r7, #28
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4836      	ldr	r0, [pc, #216]	; (8002bc4 <HAL_UART_MspInit+0x154>)
 8002aea:	f003 fe03 	bl	80066f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002aee:	e061      	b.n	8002bb4 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a34      	ldr	r2, [pc, #208]	; (8002bc8 <HAL_UART_MspInit+0x158>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d15c      	bne.n	8002bb4 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002afa:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_UART_MspInit+0x150>)
 8002afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b00:	4a2f      	ldr	r2, [pc, #188]	; (8002bc0 <HAL_UART_MspInit+0x150>)
 8002b02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_UART_MspInit+0x150>)
 8002b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b18:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <HAL_UART_MspInit+0x150>)
 8002b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b1e:	4a28      	ldr	r2, [pc, #160]	; (8002bc0 <HAL_UART_MspInit+0x150>)
 8002b20:	f043 0308 	orr.w	r3, r3, #8
 8002b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b28:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <HAL_UART_MspInit+0x150>)
 8002b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b48:	2307      	movs	r3, #7
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	4619      	mov	r1, r3
 8002b52:	481e      	ldr	r0, [pc, #120]	; (8002bcc <HAL_UART_MspInit+0x15c>)
 8002b54:	f003 fdce 	bl	80066f4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_UART_MspInit+0x160>)
 8002b5a:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <HAL_UART_MspInit+0x164>)
 8002b5c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_UART_MspInit+0x160>)
 8002b60:	222d      	movs	r2, #45	; 0x2d
 8002b62:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_UART_MspInit+0x160>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b6a:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_UART_MspInit+0x160>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <HAL_UART_MspInit+0x160>)
 8002b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b76:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_UART_MspInit+0x160>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <HAL_UART_MspInit+0x160>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_UART_MspInit+0x160>)
 8002b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b8a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b8c:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_UART_MspInit+0x160>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_UART_MspInit+0x160>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002b98:	480d      	ldr	r0, [pc, #52]	; (8002bd0 <HAL_UART_MspInit+0x160>)
 8002b9a:	f000 fb97 	bl	80032cc <HAL_DMA_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8002ba4:	f7ff fd60 	bl	8002668 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <HAL_UART_MspInit+0x160>)
 8002bac:	679a      	str	r2, [r3, #120]	; 0x78
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <HAL_UART_MspInit+0x160>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002bb4:	bf00      	nop
 8002bb6:	3730      	adds	r7, #48	; 0x30
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40007c00 	.word	0x40007c00
 8002bc0:	58024400 	.word	0x58024400
 8002bc4:	58021000 	.word	0x58021000
 8002bc8:	40004800 	.word	0x40004800
 8002bcc:	58020c00 	.word	0x58020c00
 8002bd0:	240012b8 	.word	0x240012b8
 8002bd4:	40020010 	.word	0x40020010

08002bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002bdc:	f006 fa98 	bl	8009110 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002be0:	e7fe      	b.n	8002be0 <NMI_Handler+0x8>

08002be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be6:	e7fe      	b.n	8002be6 <HardFault_Handler+0x4>

08002be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bec:	e7fe      	b.n	8002bec <MemManage_Handler+0x4>

08002bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf2:	e7fe      	b.n	8002bf2 <BusFault_Handler+0x4>

08002bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf8:	e7fe      	b.n	8002bf8 <UsageFault_Handler+0x4>

08002bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c28:	f000 f9f2 	bl	8003010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 8002c34:	f005 fa84 	bl	8008140 <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <DMA1_Stream0_IRQHandler+0x10>)
 8002c42:	f001 f909 	bl	8003e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	240012b8 	.word	0x240012b8

08002c50 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <FDCAN1_IT0_IRQHandler+0x10>)
 8002c56:	f003 f8bd 	bl	8005dd4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	24001460 	.word	0x24001460

08002c64 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <FDCAN1_IT1_IRQHandler+0x10>)
 8002c6a:	f003 f8b3 	bl	8005dd4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	24001460 	.word	0x24001460

08002c78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002c7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c80:	f003 ff34 	bl	8006aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <SDMMC1_IRQHandler+0x10>)
 8002c8e:	f009 f8fd 	bl	800be8c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	240013bc 	.word	0x240013bc

08002c9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <OTG_FS_IRQHandler+0x10>)
 8002ca2:	f004 f8b8 	bl	8006e16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2400204c 	.word	0x2400204c

08002cb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e00a      	b.n	8002cd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cc2:	f3af 8000 	nop.w
 8002cc6:	4601      	mov	r1, r0
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	60ba      	str	r2, [r7, #8]
 8002cce:	b2ca      	uxtb	r2, r1
 8002cd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	dbf0      	blt.n	8002cc2 <_read+0x12>
	}

return len;
 8002ce0:	687b      	ldr	r3, [r7, #4]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <_close>:
	}
	return len;
}

int _close(int file)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
	return -1;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d12:	605a      	str	r2, [r3, #4]
	return 0;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <_isatty>:

int _isatty(int file)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
	return 1;
 8002d2a:	2301      	movs	r3, #1
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
	return 0;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d5c:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <_sbrk+0x5c>)
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <_sbrk+0x60>)
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d68:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <_sbrk+0x64>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d70:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <_sbrk+0x64>)
 8002d72:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <_sbrk+0x68>)
 8002d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <_sbrk+0x64>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d207      	bcs.n	8002d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d84:	f014 ffb0 	bl	8017ce8 <__errno>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	230c      	movs	r3, #12
 8002d8c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d92:	e009      	b.n	8002da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <_sbrk+0x64>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <_sbrk+0x64>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	4a05      	ldr	r2, [pc, #20]	; (8002db8 <_sbrk+0x64>)
 8002da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002da6:	68fb      	ldr	r3, [r7, #12]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	24080000 	.word	0x24080000
 8002db4:	00000400 	.word	0x00000400
 8002db8:	24000b20 	.word	0x24000b20
 8002dbc:	24002458 	.word	0x24002458

08002dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002dc4:	4b39      	ldr	r3, [pc, #228]	; (8002eac <SystemInit+0xec>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	4a38      	ldr	r2, [pc, #224]	; (8002eac <SystemInit+0xec>)
 8002dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002dd4:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <SystemInit+0xf0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	2b06      	cmp	r3, #6
 8002dde:	d807      	bhi.n	8002df0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002de0:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <SystemInit+0xf0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 030f 	bic.w	r3, r3, #15
 8002de8:	4a31      	ldr	r2, [pc, #196]	; (8002eb0 <SystemInit+0xf0>)
 8002dea:	f043 0307 	orr.w	r3, r3, #7
 8002dee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002df0:	4b30      	ldr	r3, [pc, #192]	; (8002eb4 <SystemInit+0xf4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2f      	ldr	r2, [pc, #188]	; (8002eb4 <SystemInit+0xf4>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <SystemInit+0xf4>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <SystemInit+0xf4>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	492b      	ldr	r1, [pc, #172]	; (8002eb4 <SystemInit+0xf4>)
 8002e08:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <SystemInit+0xf8>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e0e:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <SystemInit+0xf0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	2b07      	cmp	r3, #7
 8002e18:	d907      	bls.n	8002e2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e1a:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <SystemInit+0xf0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 030f 	bic.w	r3, r3, #15
 8002e22:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <SystemInit+0xf0>)
 8002e24:	f043 0307 	orr.w	r3, r3, #7
 8002e28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e2a:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <SystemInit+0xf4>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <SystemInit+0xf4>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e36:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <SystemInit+0xf4>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <SystemInit+0xf4>)
 8002e3e:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <SystemInit+0xfc>)
 8002e40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e42:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <SystemInit+0xf4>)
 8002e44:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <SystemInit+0x100>)
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <SystemInit+0xf4>)
 8002e4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <SystemInit+0x104>)
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e4e:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <SystemInit+0xf4>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <SystemInit+0xf4>)
 8002e56:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <SystemInit+0x104>)
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e5a:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <SystemInit+0xf4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e60:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <SystemInit+0xf4>)
 8002e62:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <SystemInit+0x104>)
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <SystemInit+0xf4>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <SystemInit+0xf4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a10      	ldr	r2, [pc, #64]	; (8002eb4 <SystemInit+0xf4>)
 8002e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e78:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <SystemInit+0xf4>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <SystemInit+0x108>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <SystemInit+0x10c>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8a:	d202      	bcs.n	8002e92 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <SystemInit+0x110>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <SystemInit+0x114>)
 8002e94:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e98:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e9a:	4b04      	ldr	r3, [pc, #16]	; (8002eac <SystemInit+0xec>)
 8002e9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ea0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000ed00 	.word	0xe000ed00
 8002eb0:	52002000 	.word	0x52002000
 8002eb4:	58024400 	.word	0x58024400
 8002eb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ebc:	02020200 	.word	0x02020200
 8002ec0:	01ff0000 	.word	0x01ff0000
 8002ec4:	01010280 	.word	0x01010280
 8002ec8:	5c001000 	.word	0x5c001000
 8002ecc:	ffff0000 	.word	0xffff0000
 8002ed0:	51008108 	.word	0x51008108
 8002ed4:	52004000 	.word	0x52004000

08002ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f10 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002edc:	f7ff ff70 	bl	8002dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ee0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ee2:	e003      	b.n	8002eec <LoopCopyDataInit>

08002ee4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002ee6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ee8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002eea:	3104      	adds	r1, #4

08002eec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002eec:	480a      	ldr	r0, [pc, #40]	; (8002f18 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002ef0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ef2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ef4:	d3f6      	bcc.n	8002ee4 <CopyDataInit>
  ldr  r2, =_sbss
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002ef8:	e002      	b.n	8002f00 <LoopFillZerobss>

08002efa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002efa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002efc:	f842 3b04 	str.w	r3, [r2], #4

08002f00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002f02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f04:	d3f9      	bcc.n	8002efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f06:	f014 fef5 	bl	8017cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f0a:	f7fe fd8d 	bl	8001a28 <main>
  bx  lr    
 8002f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f10:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002f14:	08019948 	.word	0x08019948
  ldr  r0, =_sdata
 8002f18:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002f1c:	240001d8 	.word	0x240001d8
  ldr  r2, =_sbss
 8002f20:	240001d8 	.word	0x240001d8
  ldr  r3, = _ebss
 8002f24:	24002458 	.word	0x24002458

08002f28 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f28:	e7fe      	b.n	8002f28 <ADC3_IRQHandler>
	...

08002f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f32:	2003      	movs	r0, #3
 8002f34:	f000 f98a 	bl	800324c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f38:	f005 ff1c 	bl	8008d74 <HAL_RCC_GetSysClockFreq>
 8002f3c:	4601      	mov	r1, r0
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_Init+0x68>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	4a13      	ldr	r2, [pc, #76]	; (8002f98 <HAL_Init+0x6c>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	fa21 f303 	lsr.w	r3, r1, r3
 8002f54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_Init+0x68>)
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <HAL_Init+0x6c>)
 8002f60:	5cd3      	ldrb	r3, [r2, r3]
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6c:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <HAL_Init+0x70>)
 8002f6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f70:	4a0b      	ldr	r2, [pc, #44]	; (8002fa0 <HAL_Init+0x74>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f76:	2000      	movs	r0, #0
 8002f78:	f000 f814 	bl	8002fa4 <HAL_InitTick>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e002      	b.n	8002f8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f86:	f7ff fbbf 	bl	8002708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	58024400 	.word	0x58024400
 8002f98:	080197a8 	.word	0x080197a8
 8002f9c:	24000010 	.word	0x24000010
 8002fa0:	2400000c 	.word	0x2400000c

08002fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_InitTick+0x60>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e021      	b.n	8002ffc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_InitTick+0x64>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_InitTick+0x60>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f96f 	bl	80032b2 <HAL_SYSTICK_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00e      	b.n	8002ffc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b0f      	cmp	r3, #15
 8002fe2:	d80a      	bhi.n	8002ffa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f000 f939 	bl	8003262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff0:	4a06      	ldr	r2, [pc, #24]	; (800300c <HAL_InitTick+0x68>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	24000018 	.word	0x24000018
 8003008:	2400000c 	.word	0x2400000c
 800300c:	24000014 	.word	0x24000014

08003010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_IncTick+0x20>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_IncTick+0x24>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4413      	add	r3, r2
 8003020:	4a04      	ldr	r2, [pc, #16]	; (8003034 <HAL_IncTick+0x24>)
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	24000018 	.word	0x24000018
 8003034:	24001710 	.word	0x24001710

08003038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return uwTick;
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <HAL_GetTick+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	24001710 	.word	0x24001710

08003050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff ffee 	bl	8003038 <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d005      	beq.n	8003076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_Delay+0x40>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003076:	bf00      	nop
 8003078:	f7ff ffde 	bl	8003038 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	429a      	cmp	r2, r3
 8003086:	d8f7      	bhi.n	8003078 <HAL_Delay+0x28>
  {
  }
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	24000018 	.word	0x24000018

08003094 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_GetREVID+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0c1b      	lsrs	r3, r3, #16
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	5c001000 	.word	0x5c001000

080030ac <__NVIC_SetPriorityGrouping>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <__NVIC_SetPriorityGrouping+0x40>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c8:	4013      	ands	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030da:	4a04      	ldr	r2, [pc, #16]	; (80030ec <__NVIC_SetPriorityGrouping+0x40>)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	60d3      	str	r3, [r2, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00
 80030f0:	05fa0000 	.word	0x05fa0000

080030f4 <__NVIC_GetPriorityGrouping>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <__NVIC_GetPriorityGrouping+0x18>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	f003 0307 	and.w	r3, r3, #7
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <__NVIC_EnableIRQ>:
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800311a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db0b      	blt.n	800313a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	4907      	ldr	r1, [pc, #28]	; (8003148 <__NVIC_EnableIRQ+0x38>)
 800312a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2001      	movs	r0, #1
 8003132:	fa00 f202 	lsl.w	r2, r0, r2
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000e100 	.word	0xe000e100

0800314c <__NVIC_SetPriority>:
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	6039      	str	r1, [r7, #0]
 8003156:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800315c:	2b00      	cmp	r3, #0
 800315e:	db0a      	blt.n	8003176 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	b2da      	uxtb	r2, r3
 8003164:	490c      	ldr	r1, [pc, #48]	; (8003198 <__NVIC_SetPriority+0x4c>)
 8003166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800316a:	0112      	lsls	r2, r2, #4
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	440b      	add	r3, r1
 8003170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003174:	e00a      	b.n	800318c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4908      	ldr	r1, [pc, #32]	; (800319c <__NVIC_SetPriority+0x50>)
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	3b04      	subs	r3, #4
 8003184:	0112      	lsls	r2, r2, #4
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	440b      	add	r3, r1
 800318a:	761a      	strb	r2, [r3, #24]
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e000e100 	.word	0xe000e100
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <NVIC_EncodePriority>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	b089      	sub	sp, #36	; 0x24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f1c3 0307 	rsb	r3, r3, #7
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	bf28      	it	cs
 80031be:	2304      	movcs	r3, #4
 80031c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3304      	adds	r3, #4
 80031c6:	2b06      	cmp	r3, #6
 80031c8:	d902      	bls.n	80031d0 <NVIC_EncodePriority+0x30>
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3b03      	subs	r3, #3
 80031ce:	e000      	b.n	80031d2 <NVIC_EncodePriority+0x32>
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	f04f 32ff 	mov.w	r2, #4294967295
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43da      	mvns	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	401a      	ands	r2, r3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e8:	f04f 31ff 	mov.w	r1, #4294967295
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fa01 f303 	lsl.w	r3, r1, r3
 80031f2:	43d9      	mvns	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	4313      	orrs	r3, r2
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3724      	adds	r7, #36	; 0x24
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <SysTick_Config>:
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003218:	d301      	bcc.n	800321e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800321a:	2301      	movs	r3, #1
 800321c:	e00f      	b.n	800323e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <SysTick_Config+0x40>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3b01      	subs	r3, #1
 8003224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003226:	210f      	movs	r1, #15
 8003228:	f04f 30ff 	mov.w	r0, #4294967295
 800322c:	f7ff ff8e 	bl	800314c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <SysTick_Config+0x40>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003236:	4b04      	ldr	r3, [pc, #16]	; (8003248 <SysTick_Config+0x40>)
 8003238:	2207      	movs	r2, #7
 800323a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	e000e010 	.word	0xe000e010

0800324c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff29 	bl	80030ac <__NVIC_SetPriorityGrouping>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003270:	f7ff ff40 	bl	80030f4 <__NVIC_GetPriorityGrouping>
 8003274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7ff ff90 	bl	80031a0 <NVIC_EncodePriority>
 8003280:	4602      	mov	r2, r0
 8003282:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff5f 	bl	800314c <__NVIC_SetPriority>
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff33 	bl	8003110 <__NVIC_EnableIRQ>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ffa4 	bl	8003208 <SysTick_Config>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7ff feb0 	bl	8003038 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e316      	b.n	8003912 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a66      	ldr	r2, [pc, #408]	; (8003484 <HAL_DMA_Init+0x1b8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d04a      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a65      	ldr	r2, [pc, #404]	; (8003488 <HAL_DMA_Init+0x1bc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d045      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a63      	ldr	r2, [pc, #396]	; (800348c <HAL_DMA_Init+0x1c0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d040      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a62      	ldr	r2, [pc, #392]	; (8003490 <HAL_DMA_Init+0x1c4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d03b      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a60      	ldr	r2, [pc, #384]	; (8003494 <HAL_DMA_Init+0x1c8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d036      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a5f      	ldr	r2, [pc, #380]	; (8003498 <HAL_DMA_Init+0x1cc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d031      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a5d      	ldr	r2, [pc, #372]	; (800349c <HAL_DMA_Init+0x1d0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d02c      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a5c      	ldr	r2, [pc, #368]	; (80034a0 <HAL_DMA_Init+0x1d4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d027      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a5a      	ldr	r2, [pc, #360]	; (80034a4 <HAL_DMA_Init+0x1d8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d022      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a59      	ldr	r2, [pc, #356]	; (80034a8 <HAL_DMA_Init+0x1dc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d01d      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a57      	ldr	r2, [pc, #348]	; (80034ac <HAL_DMA_Init+0x1e0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d018      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a56      	ldr	r2, [pc, #344]	; (80034b0 <HAL_DMA_Init+0x1e4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d013      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a54      	ldr	r2, [pc, #336]	; (80034b4 <HAL_DMA_Init+0x1e8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00e      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a53      	ldr	r2, [pc, #332]	; (80034b8 <HAL_DMA_Init+0x1ec>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a51      	ldr	r2, [pc, #324]	; (80034bc <HAL_DMA_Init+0x1f0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_DMA_Init+0xb8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a50      	ldr	r2, [pc, #320]	; (80034c0 <HAL_DMA_Init+0x1f4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d101      	bne.n	8003388 <HAL_DMA_Init+0xbc>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_DMA_Init+0xbe>
 8003388:	2300      	movs	r3, #0
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 813b 	beq.w	8003606 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a37      	ldr	r2, [pc, #220]	; (8003484 <HAL_DMA_Init+0x1b8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d04a      	beq.n	8003440 <HAL_DMA_Init+0x174>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a36      	ldr	r2, [pc, #216]	; (8003488 <HAL_DMA_Init+0x1bc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d045      	beq.n	8003440 <HAL_DMA_Init+0x174>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a34      	ldr	r2, [pc, #208]	; (800348c <HAL_DMA_Init+0x1c0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d040      	beq.n	8003440 <HAL_DMA_Init+0x174>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a33      	ldr	r2, [pc, #204]	; (8003490 <HAL_DMA_Init+0x1c4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d03b      	beq.n	8003440 <HAL_DMA_Init+0x174>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a31      	ldr	r2, [pc, #196]	; (8003494 <HAL_DMA_Init+0x1c8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d036      	beq.n	8003440 <HAL_DMA_Init+0x174>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a30      	ldr	r2, [pc, #192]	; (8003498 <HAL_DMA_Init+0x1cc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d031      	beq.n	8003440 <HAL_DMA_Init+0x174>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2e      	ldr	r2, [pc, #184]	; (800349c <HAL_DMA_Init+0x1d0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d02c      	beq.n	8003440 <HAL_DMA_Init+0x174>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2d      	ldr	r2, [pc, #180]	; (80034a0 <HAL_DMA_Init+0x1d4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d027      	beq.n	8003440 <HAL_DMA_Init+0x174>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2b      	ldr	r2, [pc, #172]	; (80034a4 <HAL_DMA_Init+0x1d8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d022      	beq.n	8003440 <HAL_DMA_Init+0x174>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2a      	ldr	r2, [pc, #168]	; (80034a8 <HAL_DMA_Init+0x1dc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d01d      	beq.n	8003440 <HAL_DMA_Init+0x174>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a28      	ldr	r2, [pc, #160]	; (80034ac <HAL_DMA_Init+0x1e0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d018      	beq.n	8003440 <HAL_DMA_Init+0x174>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a27      	ldr	r2, [pc, #156]	; (80034b0 <HAL_DMA_Init+0x1e4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d013      	beq.n	8003440 <HAL_DMA_Init+0x174>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a25      	ldr	r2, [pc, #148]	; (80034b4 <HAL_DMA_Init+0x1e8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00e      	beq.n	8003440 <HAL_DMA_Init+0x174>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a24      	ldr	r2, [pc, #144]	; (80034b8 <HAL_DMA_Init+0x1ec>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d009      	beq.n	8003440 <HAL_DMA_Init+0x174>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <HAL_DMA_Init+0x1f0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d004      	beq.n	8003440 <HAL_DMA_Init+0x174>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a21      	ldr	r2, [pc, #132]	; (80034c0 <HAL_DMA_Init+0x1f4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d108      	bne.n	8003452 <HAL_DMA_Init+0x186>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e007      	b.n	8003462 <HAL_DMA_Init+0x196>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003462:	e02f      	b.n	80034c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003464:	f7ff fde8 	bl	8003038 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b05      	cmp	r3, #5
 8003470:	d928      	bls.n	80034c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2203      	movs	r2, #3
 800347c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e246      	b.n	8003912 <HAL_DMA_Init+0x646>
 8003484:	40020010 	.word	0x40020010
 8003488:	40020028 	.word	0x40020028
 800348c:	40020040 	.word	0x40020040
 8003490:	40020058 	.word	0x40020058
 8003494:	40020070 	.word	0x40020070
 8003498:	40020088 	.word	0x40020088
 800349c:	400200a0 	.word	0x400200a0
 80034a0:	400200b8 	.word	0x400200b8
 80034a4:	40020410 	.word	0x40020410
 80034a8:	40020428 	.word	0x40020428
 80034ac:	40020440 	.word	0x40020440
 80034b0:	40020458 	.word	0x40020458
 80034b4:	40020470 	.word	0x40020470
 80034b8:	40020488 	.word	0x40020488
 80034bc:	400204a0 	.word	0x400204a0
 80034c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1c8      	bne.n	8003464 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4b83      	ldr	r3, [pc, #524]	; (80036ec <HAL_DMA_Init+0x420>)
 80034de:	4013      	ands	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80034ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003502:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	2b04      	cmp	r3, #4
 8003516:	d107      	bne.n	8003528 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	4313      	orrs	r3, r2
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4313      	orrs	r3, r2
 8003526:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003528:	4b71      	ldr	r3, [pc, #452]	; (80036f0 <HAL_DMA_Init+0x424>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4b71      	ldr	r3, [pc, #452]	; (80036f4 <HAL_DMA_Init+0x428>)
 800352e:	4013      	ands	r3, r2
 8003530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003534:	d328      	bcc.n	8003588 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b28      	cmp	r3, #40	; 0x28
 800353c:	d903      	bls.n	8003546 <HAL_DMA_Init+0x27a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b2e      	cmp	r3, #46	; 0x2e
 8003544:	d917      	bls.n	8003576 <HAL_DMA_Init+0x2aa>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b3e      	cmp	r3, #62	; 0x3e
 800354c:	d903      	bls.n	8003556 <HAL_DMA_Init+0x28a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b42      	cmp	r3, #66	; 0x42
 8003554:	d90f      	bls.n	8003576 <HAL_DMA_Init+0x2aa>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b46      	cmp	r3, #70	; 0x46
 800355c:	d903      	bls.n	8003566 <HAL_DMA_Init+0x29a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b48      	cmp	r3, #72	; 0x48
 8003564:	d907      	bls.n	8003576 <HAL_DMA_Init+0x2aa>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b4e      	cmp	r3, #78	; 0x4e
 800356c:	d905      	bls.n	800357a <HAL_DMA_Init+0x2ae>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b52      	cmp	r3, #82	; 0x52
 8003574:	d801      	bhi.n	800357a <HAL_DMA_Init+0x2ae>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_DMA_Init+0x2b0>
 800357a:	2300      	movs	r3, #0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003586:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f023 0307 	bic.w	r3, r3, #7
 800359e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d117      	bne.n	80035e2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00e      	beq.n	80035e2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f001 fdcf 	bl	8005168 <DMA_CheckFifoParam>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2240      	movs	r2, #64	; 0x40
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e197      	b.n	8003912 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f001 fd0a 	bl	8005004 <DMA_CalcBaseAndBitshift>
 80035f0:	4603      	mov	r3, r0
 80035f2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	223f      	movs	r2, #63	; 0x3f
 80035fe:	409a      	lsls	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	e0cd      	b.n	80037a2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a3b      	ldr	r2, [pc, #236]	; (80036f8 <HAL_DMA_Init+0x42c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d022      	beq.n	8003656 <HAL_DMA_Init+0x38a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a39      	ldr	r2, [pc, #228]	; (80036fc <HAL_DMA_Init+0x430>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01d      	beq.n	8003656 <HAL_DMA_Init+0x38a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a38      	ldr	r2, [pc, #224]	; (8003700 <HAL_DMA_Init+0x434>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d018      	beq.n	8003656 <HAL_DMA_Init+0x38a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a36      	ldr	r2, [pc, #216]	; (8003704 <HAL_DMA_Init+0x438>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_DMA_Init+0x38a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a35      	ldr	r2, [pc, #212]	; (8003708 <HAL_DMA_Init+0x43c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <HAL_DMA_Init+0x38a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a33      	ldr	r2, [pc, #204]	; (800370c <HAL_DMA_Init+0x440>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <HAL_DMA_Init+0x38a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a32      	ldr	r2, [pc, #200]	; (8003710 <HAL_DMA_Init+0x444>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_DMA_Init+0x38a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a30      	ldr	r2, [pc, #192]	; (8003714 <HAL_DMA_Init+0x448>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_DMA_Init+0x38e>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <HAL_DMA_Init+0x390>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 8097 	beq.w	8003790 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a24      	ldr	r2, [pc, #144]	; (80036f8 <HAL_DMA_Init+0x42c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d021      	beq.n	80036b0 <HAL_DMA_Init+0x3e4>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a22      	ldr	r2, [pc, #136]	; (80036fc <HAL_DMA_Init+0x430>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01c      	beq.n	80036b0 <HAL_DMA_Init+0x3e4>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a21      	ldr	r2, [pc, #132]	; (8003700 <HAL_DMA_Init+0x434>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d017      	beq.n	80036b0 <HAL_DMA_Init+0x3e4>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <HAL_DMA_Init+0x438>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d012      	beq.n	80036b0 <HAL_DMA_Init+0x3e4>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <HAL_DMA_Init+0x43c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00d      	beq.n	80036b0 <HAL_DMA_Init+0x3e4>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1c      	ldr	r2, [pc, #112]	; (800370c <HAL_DMA_Init+0x440>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d008      	beq.n	80036b0 <HAL_DMA_Init+0x3e4>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <HAL_DMA_Init+0x444>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <HAL_DMA_Init+0x3e4>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a19      	ldr	r2, [pc, #100]	; (8003714 <HAL_DMA_Init+0x448>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_DMA_Init+0x44c>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b40      	cmp	r3, #64	; 0x40
 80036d8:	d020      	beq.n	800371c <HAL_DMA_Init+0x450>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b80      	cmp	r3, #128	; 0x80
 80036e0:	d102      	bne.n	80036e8 <HAL_DMA_Init+0x41c>
 80036e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036e6:	e01a      	b.n	800371e <HAL_DMA_Init+0x452>
 80036e8:	2300      	movs	r3, #0
 80036ea:	e018      	b.n	800371e <HAL_DMA_Init+0x452>
 80036ec:	fe10803f 	.word	0xfe10803f
 80036f0:	5c001000 	.word	0x5c001000
 80036f4:	ffff0000 	.word	0xffff0000
 80036f8:	58025408 	.word	0x58025408
 80036fc:	5802541c 	.word	0x5802541c
 8003700:	58025430 	.word	0x58025430
 8003704:	58025444 	.word	0x58025444
 8003708:	58025458 	.word	0x58025458
 800370c:	5802546c 	.word	0x5802546c
 8003710:	58025480 	.word	0x58025480
 8003714:	58025494 	.word	0x58025494
 8003718:	fffe000f 	.word	0xfffe000f
 800371c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68d2      	ldr	r2, [r2, #12]
 8003722:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003724:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800372c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003734:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800373c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003744:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800374c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4b6e      	ldr	r3, [pc, #440]	; (800391c <HAL_DMA_Init+0x650>)
 8003764:	4413      	add	r3, r2
 8003766:	4a6e      	ldr	r2, [pc, #440]	; (8003920 <HAL_DMA_Init+0x654>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	009a      	lsls	r2, r3, #2
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f001 fc45 	bl	8005004 <DMA_CalcBaseAndBitshift>
 800377a:	4603      	mov	r3, r0
 800377c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	2201      	movs	r2, #1
 8003788:	409a      	lsls	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e008      	b.n	80037a2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2240      	movs	r2, #64	; 0x40
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2203      	movs	r2, #3
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e0b7      	b.n	8003912 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a5f      	ldr	r2, [pc, #380]	; (8003924 <HAL_DMA_Init+0x658>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d072      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a5d      	ldr	r2, [pc, #372]	; (8003928 <HAL_DMA_Init+0x65c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d06d      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a5c      	ldr	r2, [pc, #368]	; (800392c <HAL_DMA_Init+0x660>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d068      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a5a      	ldr	r2, [pc, #360]	; (8003930 <HAL_DMA_Init+0x664>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d063      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a59      	ldr	r2, [pc, #356]	; (8003934 <HAL_DMA_Init+0x668>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d05e      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a57      	ldr	r2, [pc, #348]	; (8003938 <HAL_DMA_Init+0x66c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d059      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a56      	ldr	r2, [pc, #344]	; (800393c <HAL_DMA_Init+0x670>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d054      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a54      	ldr	r2, [pc, #336]	; (8003940 <HAL_DMA_Init+0x674>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d04f      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a53      	ldr	r2, [pc, #332]	; (8003944 <HAL_DMA_Init+0x678>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d04a      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a51      	ldr	r2, [pc, #324]	; (8003948 <HAL_DMA_Init+0x67c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d045      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a50      	ldr	r2, [pc, #320]	; (800394c <HAL_DMA_Init+0x680>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d040      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a4e      	ldr	r2, [pc, #312]	; (8003950 <HAL_DMA_Init+0x684>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d03b      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a4d      	ldr	r2, [pc, #308]	; (8003954 <HAL_DMA_Init+0x688>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d036      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a4b      	ldr	r2, [pc, #300]	; (8003958 <HAL_DMA_Init+0x68c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d031      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a4a      	ldr	r2, [pc, #296]	; (800395c <HAL_DMA_Init+0x690>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d02c      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a48      	ldr	r2, [pc, #288]	; (8003960 <HAL_DMA_Init+0x694>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d027      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a47      	ldr	r2, [pc, #284]	; (8003964 <HAL_DMA_Init+0x698>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d022      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a45      	ldr	r2, [pc, #276]	; (8003968 <HAL_DMA_Init+0x69c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01d      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a44      	ldr	r2, [pc, #272]	; (800396c <HAL_DMA_Init+0x6a0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d018      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a42      	ldr	r2, [pc, #264]	; (8003970 <HAL_DMA_Init+0x6a4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a41      	ldr	r2, [pc, #260]	; (8003974 <HAL_DMA_Init+0x6a8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00e      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a3f      	ldr	r2, [pc, #252]	; (8003978 <HAL_DMA_Init+0x6ac>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a3e      	ldr	r2, [pc, #248]	; (800397c <HAL_DMA_Init+0x6b0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_DMA_Init+0x5c6>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a3c      	ldr	r2, [pc, #240]	; (8003980 <HAL_DMA_Init+0x6b4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_DMA_Init+0x5ca>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_DMA_Init+0x5cc>
 8003896:	2300      	movs	r3, #0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d032      	beq.n	8003902 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f001 fcdf 	bl	8005260 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b80      	cmp	r3, #128	; 0x80
 80038a8:	d102      	bne.n	80038b0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038c4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d010      	beq.n	80038f0 <HAL_DMA_Init+0x624>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d80c      	bhi.n	80038f0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f001 fd5c 	bl	8005394 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	e008      	b.n	8003902 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	a7fdabf8 	.word	0xa7fdabf8
 8003920:	cccccccd 	.word	0xcccccccd
 8003924:	40020010 	.word	0x40020010
 8003928:	40020028 	.word	0x40020028
 800392c:	40020040 	.word	0x40020040
 8003930:	40020058 	.word	0x40020058
 8003934:	40020070 	.word	0x40020070
 8003938:	40020088 	.word	0x40020088
 800393c:	400200a0 	.word	0x400200a0
 8003940:	400200b8 	.word	0x400200b8
 8003944:	40020410 	.word	0x40020410
 8003948:	40020428 	.word	0x40020428
 800394c:	40020440 	.word	0x40020440
 8003950:	40020458 	.word	0x40020458
 8003954:	40020470 	.word	0x40020470
 8003958:	40020488 	.word	0x40020488
 800395c:	400204a0 	.word	0x400204a0
 8003960:	400204b8 	.word	0x400204b8
 8003964:	58025408 	.word	0x58025408
 8003968:	5802541c 	.word	0x5802541c
 800396c:	58025430 	.word	0x58025430
 8003970:	58025444 	.word	0x58025444
 8003974:	58025458 	.word	0x58025458
 8003978:	5802546c 	.word	0x5802546c
 800397c:	58025480 	.word	0x58025480
 8003980:	58025494 	.word	0x58025494

08003984 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e226      	b.n	8003dee <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_DMA_Start_IT+0x2a>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e21f      	b.n	8003dee <HAL_DMA_Start_IT+0x46a>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	f040 820a 	bne.w	8003dd8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a68      	ldr	r2, [pc, #416]	; (8003b78 <HAL_DMA_Start_IT+0x1f4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d04a      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a66      	ldr	r2, [pc, #408]	; (8003b7c <HAL_DMA_Start_IT+0x1f8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d045      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a65      	ldr	r2, [pc, #404]	; (8003b80 <HAL_DMA_Start_IT+0x1fc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d040      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a63      	ldr	r2, [pc, #396]	; (8003b84 <HAL_DMA_Start_IT+0x200>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d03b      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a62      	ldr	r2, [pc, #392]	; (8003b88 <HAL_DMA_Start_IT+0x204>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d036      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a60      	ldr	r2, [pc, #384]	; (8003b8c <HAL_DMA_Start_IT+0x208>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d031      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a5f      	ldr	r2, [pc, #380]	; (8003b90 <HAL_DMA_Start_IT+0x20c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d02c      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a5d      	ldr	r2, [pc, #372]	; (8003b94 <HAL_DMA_Start_IT+0x210>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d027      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a5c      	ldr	r2, [pc, #368]	; (8003b98 <HAL_DMA_Start_IT+0x214>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d022      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a5a      	ldr	r2, [pc, #360]	; (8003b9c <HAL_DMA_Start_IT+0x218>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01d      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a59      	ldr	r2, [pc, #356]	; (8003ba0 <HAL_DMA_Start_IT+0x21c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d018      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a57      	ldr	r2, [pc, #348]	; (8003ba4 <HAL_DMA_Start_IT+0x220>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a56      	ldr	r2, [pc, #344]	; (8003ba8 <HAL_DMA_Start_IT+0x224>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00e      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a54      	ldr	r2, [pc, #336]	; (8003bac <HAL_DMA_Start_IT+0x228>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d009      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a53      	ldr	r2, [pc, #332]	; (8003bb0 <HAL_DMA_Start_IT+0x22c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_DMA_Start_IT+0xee>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a51      	ldr	r2, [pc, #324]	; (8003bb4 <HAL_DMA_Start_IT+0x230>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d108      	bne.n	8003a84 <HAL_DMA_Start_IT+0x100>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e007      	b.n	8003a94 <HAL_DMA_Start_IT+0x110>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f001 f906 	bl	8004cac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a34      	ldr	r2, [pc, #208]	; (8003b78 <HAL_DMA_Start_IT+0x1f4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d04a      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a33      	ldr	r2, [pc, #204]	; (8003b7c <HAL_DMA_Start_IT+0x1f8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d045      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a31      	ldr	r2, [pc, #196]	; (8003b80 <HAL_DMA_Start_IT+0x1fc>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d040      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a30      	ldr	r2, [pc, #192]	; (8003b84 <HAL_DMA_Start_IT+0x200>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d03b      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2e      	ldr	r2, [pc, #184]	; (8003b88 <HAL_DMA_Start_IT+0x204>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d036      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2d      	ldr	r2, [pc, #180]	; (8003b8c <HAL_DMA_Start_IT+0x208>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d031      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	; (8003b90 <HAL_DMA_Start_IT+0x20c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02c      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a2a      	ldr	r2, [pc, #168]	; (8003b94 <HAL_DMA_Start_IT+0x210>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d027      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <HAL_DMA_Start_IT+0x214>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d022      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a27      	ldr	r2, [pc, #156]	; (8003b9c <HAL_DMA_Start_IT+0x218>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d01d      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a25      	ldr	r2, [pc, #148]	; (8003ba0 <HAL_DMA_Start_IT+0x21c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d018      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a24      	ldr	r2, [pc, #144]	; (8003ba4 <HAL_DMA_Start_IT+0x220>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d013      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <HAL_DMA_Start_IT+0x224>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00e      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a21      	ldr	r2, [pc, #132]	; (8003bac <HAL_DMA_Start_IT+0x228>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d009      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <HAL_DMA_Start_IT+0x22c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_DMA_Start_IT+0x1bc>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1e      	ldr	r2, [pc, #120]	; (8003bb4 <HAL_DMA_Start_IT+0x230>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <HAL_DMA_Start_IT+0x1c0>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_DMA_Start_IT+0x1c2>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d036      	beq.n	8003bb8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f023 021e 	bic.w	r2, r3, #30
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0216 	orr.w	r2, r2, #22
 8003b5c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d03e      	beq.n	8003be4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0208 	orr.w	r2, r2, #8
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e035      	b.n	8003be4 <HAL_DMA_Start_IT+0x260>
 8003b78:	40020010 	.word	0x40020010
 8003b7c:	40020028 	.word	0x40020028
 8003b80:	40020040 	.word	0x40020040
 8003b84:	40020058 	.word	0x40020058
 8003b88:	40020070 	.word	0x40020070
 8003b8c:	40020088 	.word	0x40020088
 8003b90:	400200a0 	.word	0x400200a0
 8003b94:	400200b8 	.word	0x400200b8
 8003b98:	40020410 	.word	0x40020410
 8003b9c:	40020428 	.word	0x40020428
 8003ba0:	40020440 	.word	0x40020440
 8003ba4:	40020458 	.word	0x40020458
 8003ba8:	40020470 	.word	0x40020470
 8003bac:	40020488 	.word	0x40020488
 8003bb0:	400204a0 	.word	0x400204a0
 8003bb4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 020e 	bic.w	r2, r3, #14
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 020a 	orr.w	r2, r2, #10
 8003bca:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0204 	orr.w	r2, r2, #4
 8003be2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a83      	ldr	r2, [pc, #524]	; (8003df8 <HAL_DMA_Start_IT+0x474>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d072      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a82      	ldr	r2, [pc, #520]	; (8003dfc <HAL_DMA_Start_IT+0x478>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d06d      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a80      	ldr	r2, [pc, #512]	; (8003e00 <HAL_DMA_Start_IT+0x47c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d068      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a7f      	ldr	r2, [pc, #508]	; (8003e04 <HAL_DMA_Start_IT+0x480>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d063      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a7d      	ldr	r2, [pc, #500]	; (8003e08 <HAL_DMA_Start_IT+0x484>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d05e      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7c      	ldr	r2, [pc, #496]	; (8003e0c <HAL_DMA_Start_IT+0x488>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d059      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a7a      	ldr	r2, [pc, #488]	; (8003e10 <HAL_DMA_Start_IT+0x48c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d054      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a79      	ldr	r2, [pc, #484]	; (8003e14 <HAL_DMA_Start_IT+0x490>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d04f      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a77      	ldr	r2, [pc, #476]	; (8003e18 <HAL_DMA_Start_IT+0x494>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d04a      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a76      	ldr	r2, [pc, #472]	; (8003e1c <HAL_DMA_Start_IT+0x498>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d045      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a74      	ldr	r2, [pc, #464]	; (8003e20 <HAL_DMA_Start_IT+0x49c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d040      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a73      	ldr	r2, [pc, #460]	; (8003e24 <HAL_DMA_Start_IT+0x4a0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d03b      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a71      	ldr	r2, [pc, #452]	; (8003e28 <HAL_DMA_Start_IT+0x4a4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d036      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a70      	ldr	r2, [pc, #448]	; (8003e2c <HAL_DMA_Start_IT+0x4a8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d031      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a6e      	ldr	r2, [pc, #440]	; (8003e30 <HAL_DMA_Start_IT+0x4ac>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d02c      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a6d      	ldr	r2, [pc, #436]	; (8003e34 <HAL_DMA_Start_IT+0x4b0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d027      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a6b      	ldr	r2, [pc, #428]	; (8003e38 <HAL_DMA_Start_IT+0x4b4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d022      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a6a      	ldr	r2, [pc, #424]	; (8003e3c <HAL_DMA_Start_IT+0x4b8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d01d      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a68      	ldr	r2, [pc, #416]	; (8003e40 <HAL_DMA_Start_IT+0x4bc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d018      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a67      	ldr	r2, [pc, #412]	; (8003e44 <HAL_DMA_Start_IT+0x4c0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d013      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a65      	ldr	r2, [pc, #404]	; (8003e48 <HAL_DMA_Start_IT+0x4c4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00e      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a64      	ldr	r2, [pc, #400]	; (8003e4c <HAL_DMA_Start_IT+0x4c8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d009      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a62      	ldr	r2, [pc, #392]	; (8003e50 <HAL_DMA_Start_IT+0x4cc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x350>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a61      	ldr	r2, [pc, #388]	; (8003e54 <HAL_DMA_Start_IT+0x4d0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d101      	bne.n	8003cd8 <HAL_DMA_Start_IT+0x354>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_DMA_Start_IT+0x356>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01a      	beq.n	8003d14 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d12:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a37      	ldr	r2, [pc, #220]	; (8003df8 <HAL_DMA_Start_IT+0x474>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d04a      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a36      	ldr	r2, [pc, #216]	; (8003dfc <HAL_DMA_Start_IT+0x478>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d045      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a34      	ldr	r2, [pc, #208]	; (8003e00 <HAL_DMA_Start_IT+0x47c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d040      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a33      	ldr	r2, [pc, #204]	; (8003e04 <HAL_DMA_Start_IT+0x480>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d03b      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a31      	ldr	r2, [pc, #196]	; (8003e08 <HAL_DMA_Start_IT+0x484>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d036      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a30      	ldr	r2, [pc, #192]	; (8003e0c <HAL_DMA_Start_IT+0x488>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d031      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2e      	ldr	r2, [pc, #184]	; (8003e10 <HAL_DMA_Start_IT+0x48c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d02c      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2d      	ldr	r2, [pc, #180]	; (8003e14 <HAL_DMA_Start_IT+0x490>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d027      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2b      	ldr	r2, [pc, #172]	; (8003e18 <HAL_DMA_Start_IT+0x494>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d022      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2a      	ldr	r2, [pc, #168]	; (8003e1c <HAL_DMA_Start_IT+0x498>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d01d      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a28      	ldr	r2, [pc, #160]	; (8003e20 <HAL_DMA_Start_IT+0x49c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d018      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a27      	ldr	r2, [pc, #156]	; (8003e24 <HAL_DMA_Start_IT+0x4a0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a25      	ldr	r2, [pc, #148]	; (8003e28 <HAL_DMA_Start_IT+0x4a4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00e      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a24      	ldr	r2, [pc, #144]	; (8003e2c <HAL_DMA_Start_IT+0x4a8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d009      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a22      	ldr	r2, [pc, #136]	; (8003e30 <HAL_DMA_Start_IT+0x4ac>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_DMA_Start_IT+0x430>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a21      	ldr	r2, [pc, #132]	; (8003e34 <HAL_DMA_Start_IT+0x4b0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d108      	bne.n	8003dc6 <HAL_DMA_Start_IT+0x442>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e012      	b.n	8003dec <HAL_DMA_Start_IT+0x468>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e009      	b.n	8003dec <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40020010 	.word	0x40020010
 8003dfc:	40020028 	.word	0x40020028
 8003e00:	40020040 	.word	0x40020040
 8003e04:	40020058 	.word	0x40020058
 8003e08:	40020070 	.word	0x40020070
 8003e0c:	40020088 	.word	0x40020088
 8003e10:	400200a0 	.word	0x400200a0
 8003e14:	400200b8 	.word	0x400200b8
 8003e18:	40020410 	.word	0x40020410
 8003e1c:	40020428 	.word	0x40020428
 8003e20:	40020440 	.word	0x40020440
 8003e24:	40020458 	.word	0x40020458
 8003e28:	40020470 	.word	0x40020470
 8003e2c:	40020488 	.word	0x40020488
 8003e30:	400204a0 	.word	0x400204a0
 8003e34:	400204b8 	.word	0x400204b8
 8003e38:	58025408 	.word	0x58025408
 8003e3c:	5802541c 	.word	0x5802541c
 8003e40:	58025430 	.word	0x58025430
 8003e44:	58025444 	.word	0x58025444
 8003e48:	58025458 	.word	0x58025458
 8003e4c:	5802546c 	.word	0x5802546c
 8003e50:	58025480 	.word	0x58025480
 8003e54:	58025494 	.word	0x58025494

08003e58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	; 0x28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e64:	4b67      	ldr	r3, [pc, #412]	; (8004004 <HAL_DMA_IRQHandler+0x1ac>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a67      	ldr	r2, [pc, #412]	; (8004008 <HAL_DMA_IRQHandler+0x1b0>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	0a9b      	lsrs	r3, r3, #10
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a5f      	ldr	r2, [pc, #380]	; (800400c <HAL_DMA_IRQHandler+0x1b4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d04a      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a5d      	ldr	r2, [pc, #372]	; (8004010 <HAL_DMA_IRQHandler+0x1b8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d045      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a5c      	ldr	r2, [pc, #368]	; (8004014 <HAL_DMA_IRQHandler+0x1bc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d040      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a5a      	ldr	r2, [pc, #360]	; (8004018 <HAL_DMA_IRQHandler+0x1c0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d03b      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a59      	ldr	r2, [pc, #356]	; (800401c <HAL_DMA_IRQHandler+0x1c4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d036      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a57      	ldr	r2, [pc, #348]	; (8004020 <HAL_DMA_IRQHandler+0x1c8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d031      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a56      	ldr	r2, [pc, #344]	; (8004024 <HAL_DMA_IRQHandler+0x1cc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d02c      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a54      	ldr	r2, [pc, #336]	; (8004028 <HAL_DMA_IRQHandler+0x1d0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d027      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a53      	ldr	r2, [pc, #332]	; (800402c <HAL_DMA_IRQHandler+0x1d4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d022      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a51      	ldr	r2, [pc, #324]	; (8004030 <HAL_DMA_IRQHandler+0x1d8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01d      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a50      	ldr	r2, [pc, #320]	; (8004034 <HAL_DMA_IRQHandler+0x1dc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a4e      	ldr	r2, [pc, #312]	; (8004038 <HAL_DMA_IRQHandler+0x1e0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a4d      	ldr	r2, [pc, #308]	; (800403c <HAL_DMA_IRQHandler+0x1e4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a4b      	ldr	r2, [pc, #300]	; (8004040 <HAL_DMA_IRQHandler+0x1e8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a4a      	ldr	r2, [pc, #296]	; (8004044 <HAL_DMA_IRQHandler+0x1ec>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xd2>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a48      	ldr	r2, [pc, #288]	; (8004048 <HAL_DMA_IRQHandler+0x1f0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d101      	bne.n	8003f2e <HAL_DMA_IRQHandler+0xd6>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <HAL_DMA_IRQHandler+0xd8>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 842b 	beq.w	800478c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2208      	movs	r2, #8
 8003f40:	409a      	lsls	r2, r3
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80a2 	beq.w	8004090 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2e      	ldr	r2, [pc, #184]	; (800400c <HAL_DMA_IRQHandler+0x1b4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d04a      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2d      	ldr	r2, [pc, #180]	; (8004010 <HAL_DMA_IRQHandler+0x1b8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d045      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2b      	ldr	r2, [pc, #172]	; (8004014 <HAL_DMA_IRQHandler+0x1bc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d040      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a2a      	ldr	r2, [pc, #168]	; (8004018 <HAL_DMA_IRQHandler+0x1c0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d03b      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a28      	ldr	r2, [pc, #160]	; (800401c <HAL_DMA_IRQHandler+0x1c4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d036      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a27      	ldr	r2, [pc, #156]	; (8004020 <HAL_DMA_IRQHandler+0x1c8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d031      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a25      	ldr	r2, [pc, #148]	; (8004024 <HAL_DMA_IRQHandler+0x1cc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d02c      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a24      	ldr	r2, [pc, #144]	; (8004028 <HAL_DMA_IRQHandler+0x1d0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d027      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a22      	ldr	r2, [pc, #136]	; (800402c <HAL_DMA_IRQHandler+0x1d4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d022      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a21      	ldr	r2, [pc, #132]	; (8004030 <HAL_DMA_IRQHandler+0x1d8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d01d      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <HAL_DMA_IRQHandler+0x1dc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d018      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1e      	ldr	r2, [pc, #120]	; (8004038 <HAL_DMA_IRQHandler+0x1e0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d013      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	; (800403c <HAL_DMA_IRQHandler+0x1e4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00e      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <HAL_DMA_IRQHandler+0x1e8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d009      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a19      	ldr	r2, [pc, #100]	; (8004044 <HAL_DMA_IRQHandler+0x1ec>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_DMA_IRQHandler+0x194>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a18      	ldr	r2, [pc, #96]	; (8004048 <HAL_DMA_IRQHandler+0x1f0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d12f      	bne.n	800404c <HAL_DMA_IRQHandler+0x1f4>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	bf14      	ite	ne
 8003ffa:	2301      	movne	r3, #1
 8003ffc:	2300      	moveq	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	e02e      	b.n	8004060 <HAL_DMA_IRQHandler+0x208>
 8004002:	bf00      	nop
 8004004:	2400000c 	.word	0x2400000c
 8004008:	1b4e81b5 	.word	0x1b4e81b5
 800400c:	40020010 	.word	0x40020010
 8004010:	40020028 	.word	0x40020028
 8004014:	40020040 	.word	0x40020040
 8004018:	40020058 	.word	0x40020058
 800401c:	40020070 	.word	0x40020070
 8004020:	40020088 	.word	0x40020088
 8004024:	400200a0 	.word	0x400200a0
 8004028:	400200b8 	.word	0x400200b8
 800402c:	40020410 	.word	0x40020410
 8004030:	40020428 	.word	0x40020428
 8004034:	40020440 	.word	0x40020440
 8004038:	40020458 	.word	0x40020458
 800403c:	40020470 	.word	0x40020470
 8004040:	40020488 	.word	0x40020488
 8004044:	400204a0 	.word	0x400204a0
 8004048:	400204b8 	.word	0x400204b8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	bf14      	ite	ne
 800405a:	2301      	movne	r3, #1
 800405c:	2300      	moveq	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0204 	bic.w	r2, r2, #4
 8004072:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	2208      	movs	r2, #8
 800407e:	409a      	lsls	r2, r3
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004088:	f043 0201 	orr.w	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	fa22 f303 	lsr.w	r3, r2, r3
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d06e      	beq.n	8004184 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a69      	ldr	r2, [pc, #420]	; (8004250 <HAL_DMA_IRQHandler+0x3f8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d04a      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a67      	ldr	r2, [pc, #412]	; (8004254 <HAL_DMA_IRQHandler+0x3fc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d045      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a66      	ldr	r2, [pc, #408]	; (8004258 <HAL_DMA_IRQHandler+0x400>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d040      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a64      	ldr	r2, [pc, #400]	; (800425c <HAL_DMA_IRQHandler+0x404>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d03b      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a63      	ldr	r2, [pc, #396]	; (8004260 <HAL_DMA_IRQHandler+0x408>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d036      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a61      	ldr	r2, [pc, #388]	; (8004264 <HAL_DMA_IRQHandler+0x40c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d031      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a60      	ldr	r2, [pc, #384]	; (8004268 <HAL_DMA_IRQHandler+0x410>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d02c      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a5e      	ldr	r2, [pc, #376]	; (800426c <HAL_DMA_IRQHandler+0x414>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d027      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a5d      	ldr	r2, [pc, #372]	; (8004270 <HAL_DMA_IRQHandler+0x418>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d022      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5b      	ldr	r2, [pc, #364]	; (8004274 <HAL_DMA_IRQHandler+0x41c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d01d      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5a      	ldr	r2, [pc, #360]	; (8004278 <HAL_DMA_IRQHandler+0x420>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d018      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a58      	ldr	r2, [pc, #352]	; (800427c <HAL_DMA_IRQHandler+0x424>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a57      	ldr	r2, [pc, #348]	; (8004280 <HAL_DMA_IRQHandler+0x428>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00e      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a55      	ldr	r2, [pc, #340]	; (8004284 <HAL_DMA_IRQHandler+0x42c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a54      	ldr	r2, [pc, #336]	; (8004288 <HAL_DMA_IRQHandler+0x430>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_DMA_IRQHandler+0x2ee>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a52      	ldr	r2, [pc, #328]	; (800428c <HAL_DMA_IRQHandler+0x434>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10a      	bne.n	800415c <HAL_DMA_IRQHandler+0x304>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf14      	ite	ne
 8004154:	2301      	movne	r3, #1
 8004156:	2300      	moveq	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e003      	b.n	8004164 <HAL_DMA_IRQHandler+0x30c>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2300      	movs	r3, #0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	2201      	movs	r2, #1
 8004172:	409a      	lsls	r2, r3
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	f043 0202 	orr.w	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2204      	movs	r2, #4
 800418e:	409a      	lsls	r2, r3
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 808f 	beq.w	80042b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2c      	ldr	r2, [pc, #176]	; (8004250 <HAL_DMA_IRQHandler+0x3f8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d04a      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a2a      	ldr	r2, [pc, #168]	; (8004254 <HAL_DMA_IRQHandler+0x3fc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d045      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a29      	ldr	r2, [pc, #164]	; (8004258 <HAL_DMA_IRQHandler+0x400>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d040      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a27      	ldr	r2, [pc, #156]	; (800425c <HAL_DMA_IRQHandler+0x404>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d03b      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a26      	ldr	r2, [pc, #152]	; (8004260 <HAL_DMA_IRQHandler+0x408>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d036      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a24      	ldr	r2, [pc, #144]	; (8004264 <HAL_DMA_IRQHandler+0x40c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d031      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a23      	ldr	r2, [pc, #140]	; (8004268 <HAL_DMA_IRQHandler+0x410>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d02c      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a21      	ldr	r2, [pc, #132]	; (800426c <HAL_DMA_IRQHandler+0x414>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d027      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a20      	ldr	r2, [pc, #128]	; (8004270 <HAL_DMA_IRQHandler+0x418>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d022      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <HAL_DMA_IRQHandler+0x41c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01d      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <HAL_DMA_IRQHandler+0x420>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d018      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1b      	ldr	r2, [pc, #108]	; (800427c <HAL_DMA_IRQHandler+0x424>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1a      	ldr	r2, [pc, #104]	; (8004280 <HAL_DMA_IRQHandler+0x428>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00e      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a18      	ldr	r2, [pc, #96]	; (8004284 <HAL_DMA_IRQHandler+0x42c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d009      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a17      	ldr	r2, [pc, #92]	; (8004288 <HAL_DMA_IRQHandler+0x430>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_DMA_IRQHandler+0x3e2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a15      	ldr	r2, [pc, #84]	; (800428c <HAL_DMA_IRQHandler+0x434>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d12a      	bne.n	8004290 <HAL_DMA_IRQHandler+0x438>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e023      	b.n	8004298 <HAL_DMA_IRQHandler+0x440>
 8004250:	40020010 	.word	0x40020010
 8004254:	40020028 	.word	0x40020028
 8004258:	40020040 	.word	0x40020040
 800425c:	40020058 	.word	0x40020058
 8004260:	40020070 	.word	0x40020070
 8004264:	40020088 	.word	0x40020088
 8004268:	400200a0 	.word	0x400200a0
 800426c:	400200b8 	.word	0x400200b8
 8004270:	40020410 	.word	0x40020410
 8004274:	40020428 	.word	0x40020428
 8004278:	40020440 	.word	0x40020440
 800427c:	40020458 	.word	0x40020458
 8004280:	40020470 	.word	0x40020470
 8004284:	40020488 	.word	0x40020488
 8004288:	400204a0 	.word	0x400204a0
 800428c:	400204b8 	.word	0x400204b8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	2204      	movs	r2, #4
 80042a6:	409a      	lsls	r2, r3
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b0:	f043 0204 	orr.w	r2, r3, #4
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2210      	movs	r2, #16
 80042c2:	409a      	lsls	r2, r3
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80a6 	beq.w	800441a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a85      	ldr	r2, [pc, #532]	; (80044e8 <HAL_DMA_IRQHandler+0x690>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d04a      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a83      	ldr	r2, [pc, #524]	; (80044ec <HAL_DMA_IRQHandler+0x694>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d045      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a82      	ldr	r2, [pc, #520]	; (80044f0 <HAL_DMA_IRQHandler+0x698>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d040      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a80      	ldr	r2, [pc, #512]	; (80044f4 <HAL_DMA_IRQHandler+0x69c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d03b      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a7f      	ldr	r2, [pc, #508]	; (80044f8 <HAL_DMA_IRQHandler+0x6a0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d036      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a7d      	ldr	r2, [pc, #500]	; (80044fc <HAL_DMA_IRQHandler+0x6a4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d031      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a7c      	ldr	r2, [pc, #496]	; (8004500 <HAL_DMA_IRQHandler+0x6a8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d02c      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a7a      	ldr	r2, [pc, #488]	; (8004504 <HAL_DMA_IRQHandler+0x6ac>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d027      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a79      	ldr	r2, [pc, #484]	; (8004508 <HAL_DMA_IRQHandler+0x6b0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d022      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a77      	ldr	r2, [pc, #476]	; (800450c <HAL_DMA_IRQHandler+0x6b4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01d      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a76      	ldr	r2, [pc, #472]	; (8004510 <HAL_DMA_IRQHandler+0x6b8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d018      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a74      	ldr	r2, [pc, #464]	; (8004514 <HAL_DMA_IRQHandler+0x6bc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a73      	ldr	r2, [pc, #460]	; (8004518 <HAL_DMA_IRQHandler+0x6c0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a71      	ldr	r2, [pc, #452]	; (800451c <HAL_DMA_IRQHandler+0x6c4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d009      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a70      	ldr	r2, [pc, #448]	; (8004520 <HAL_DMA_IRQHandler+0x6c8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <HAL_DMA_IRQHandler+0x516>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a6e      	ldr	r2, [pc, #440]	; (8004524 <HAL_DMA_IRQHandler+0x6cc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d10a      	bne.n	8004384 <HAL_DMA_IRQHandler+0x52c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e009      	b.n	8004398 <HAL_DMA_IRQHandler+0x540>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	bf14      	ite	ne
 8004392:	2301      	movne	r3, #1
 8004394:	2300      	moveq	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d03e      	beq.n	800441a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	2210      	movs	r2, #16
 80043a6:	409a      	lsls	r2, r3
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d018      	beq.n	80043ec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d108      	bne.n	80043da <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d024      	beq.n	800441a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
 80043d8:	e01f      	b.n	800441a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01b      	beq.n	800441a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
 80043ea:	e016      	b.n	800441a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d107      	bne.n	800440a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0208 	bic.w	r2, r2, #8
 8004408:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2220      	movs	r2, #32
 8004424:	409a      	lsls	r2, r3
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8110 	beq.w	8004650 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <HAL_DMA_IRQHandler+0x690>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d04a      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a2b      	ldr	r2, [pc, #172]	; (80044ec <HAL_DMA_IRQHandler+0x694>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d045      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a29      	ldr	r2, [pc, #164]	; (80044f0 <HAL_DMA_IRQHandler+0x698>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d040      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a28      	ldr	r2, [pc, #160]	; (80044f4 <HAL_DMA_IRQHandler+0x69c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d03b      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a26      	ldr	r2, [pc, #152]	; (80044f8 <HAL_DMA_IRQHandler+0x6a0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d036      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a25      	ldr	r2, [pc, #148]	; (80044fc <HAL_DMA_IRQHandler+0x6a4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d031      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a23      	ldr	r2, [pc, #140]	; (8004500 <HAL_DMA_IRQHandler+0x6a8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d02c      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a22      	ldr	r2, [pc, #136]	; (8004504 <HAL_DMA_IRQHandler+0x6ac>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d027      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a20      	ldr	r2, [pc, #128]	; (8004508 <HAL_DMA_IRQHandler+0x6b0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d022      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1f      	ldr	r2, [pc, #124]	; (800450c <HAL_DMA_IRQHandler+0x6b4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d01d      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <HAL_DMA_IRQHandler+0x6b8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <HAL_DMA_IRQHandler+0x6bc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <HAL_DMA_IRQHandler+0x6c0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a19      	ldr	r2, [pc, #100]	; (800451c <HAL_DMA_IRQHandler+0x6c4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a17      	ldr	r2, [pc, #92]	; (8004520 <HAL_DMA_IRQHandler+0x6c8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x678>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a16      	ldr	r2, [pc, #88]	; (8004524 <HAL_DMA_IRQHandler+0x6cc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d12b      	bne.n	8004528 <HAL_DMA_IRQHandler+0x6d0>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bf14      	ite	ne
 80044de:	2301      	movne	r3, #1
 80044e0:	2300      	moveq	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	e02a      	b.n	800453c <HAL_DMA_IRQHandler+0x6e4>
 80044e6:	bf00      	nop
 80044e8:	40020010 	.word	0x40020010
 80044ec:	40020028 	.word	0x40020028
 80044f0:	40020040 	.word	0x40020040
 80044f4:	40020058 	.word	0x40020058
 80044f8:	40020070 	.word	0x40020070
 80044fc:	40020088 	.word	0x40020088
 8004500:	400200a0 	.word	0x400200a0
 8004504:	400200b8 	.word	0x400200b8
 8004508:	40020410 	.word	0x40020410
 800450c:	40020428 	.word	0x40020428
 8004510:	40020440 	.word	0x40020440
 8004514:	40020458 	.word	0x40020458
 8004518:	40020470 	.word	0x40020470
 800451c:	40020488 	.word	0x40020488
 8004520:	400204a0 	.word	0x400204a0
 8004524:	400204b8 	.word	0x400204b8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf14      	ite	ne
 8004536:	2301      	movne	r3, #1
 8004538:	2300      	moveq	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8087 	beq.w	8004650 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2220      	movs	r2, #32
 800454c:	409a      	lsls	r2, r3
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b04      	cmp	r3, #4
 800455c:	d139      	bne.n	80045d2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0216 	bic.w	r2, r2, #22
 800456c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800457c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d103      	bne.n	800458e <HAL_DMA_IRQHandler+0x736>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0208 	bic.w	r2, r2, #8
 800459c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	223f      	movs	r2, #63	; 0x3f
 80045a8:	409a      	lsls	r2, r3
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 834a 	beq.w	8004c5c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4798      	blx	r3
          }
          return;
 80045d0:	e344      	b.n	8004c5c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d018      	beq.n	8004612 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d108      	bne.n	8004600 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d02c      	beq.n	8004650 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	4798      	blx	r3
 80045fe:	e027      	b.n	8004650 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d023      	beq.n	8004650 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
 8004610:	e01e      	b.n	8004650 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10f      	bne.n	8004640 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0210 	bic.w	r2, r2, #16
 800462e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8306 	beq.w	8004c66 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8088 	beq.w	8004778 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2204      	movs	r2, #4
 800466c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a7a      	ldr	r2, [pc, #488]	; (8004860 <HAL_DMA_IRQHandler+0xa08>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d04a      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a79      	ldr	r2, [pc, #484]	; (8004864 <HAL_DMA_IRQHandler+0xa0c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d045      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a77      	ldr	r2, [pc, #476]	; (8004868 <HAL_DMA_IRQHandler+0xa10>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d040      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a76      	ldr	r2, [pc, #472]	; (800486c <HAL_DMA_IRQHandler+0xa14>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d03b      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a74      	ldr	r2, [pc, #464]	; (8004870 <HAL_DMA_IRQHandler+0xa18>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d036      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a73      	ldr	r2, [pc, #460]	; (8004874 <HAL_DMA_IRQHandler+0xa1c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d031      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a71      	ldr	r2, [pc, #452]	; (8004878 <HAL_DMA_IRQHandler+0xa20>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d02c      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a70      	ldr	r2, [pc, #448]	; (800487c <HAL_DMA_IRQHandler+0xa24>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d027      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a6e      	ldr	r2, [pc, #440]	; (8004880 <HAL_DMA_IRQHandler+0xa28>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d022      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a6d      	ldr	r2, [pc, #436]	; (8004884 <HAL_DMA_IRQHandler+0xa2c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d01d      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a6b      	ldr	r2, [pc, #428]	; (8004888 <HAL_DMA_IRQHandler+0xa30>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d018      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a6a      	ldr	r2, [pc, #424]	; (800488c <HAL_DMA_IRQHandler+0xa34>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d013      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a68      	ldr	r2, [pc, #416]	; (8004890 <HAL_DMA_IRQHandler+0xa38>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00e      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a67      	ldr	r2, [pc, #412]	; (8004894 <HAL_DMA_IRQHandler+0xa3c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d009      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a65      	ldr	r2, [pc, #404]	; (8004898 <HAL_DMA_IRQHandler+0xa40>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d004      	beq.n	8004710 <HAL_DMA_IRQHandler+0x8b8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a64      	ldr	r2, [pc, #400]	; (800489c <HAL_DMA_IRQHandler+0xa44>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d108      	bne.n	8004722 <HAL_DMA_IRQHandler+0x8ca>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	e007      	b.n	8004732 <HAL_DMA_IRQHandler+0x8da>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0201 	bic.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3301      	adds	r3, #1
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473a:	429a      	cmp	r2, r3
 800473c:	d307      	bcc.n	800474e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f2      	bne.n	8004732 <HAL_DMA_IRQHandler+0x8da>
 800474c:	e000      	b.n	8004750 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800474e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d004      	beq.n	8004770 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2203      	movs	r2, #3
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800476e:	e003      	b.n	8004778 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8272 	beq.w	8004c66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	4798      	blx	r3
 800478a:	e26c      	b.n	8004c66 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a43      	ldr	r2, [pc, #268]	; (80048a0 <HAL_DMA_IRQHandler+0xa48>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d022      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a42      	ldr	r2, [pc, #264]	; (80048a4 <HAL_DMA_IRQHandler+0xa4c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d01d      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a40      	ldr	r2, [pc, #256]	; (80048a8 <HAL_DMA_IRQHandler+0xa50>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d018      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a3f      	ldr	r2, [pc, #252]	; (80048ac <HAL_DMA_IRQHandler+0xa54>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d013      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3d      	ldr	r2, [pc, #244]	; (80048b0 <HAL_DMA_IRQHandler+0xa58>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00e      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a3c      	ldr	r2, [pc, #240]	; (80048b4 <HAL_DMA_IRQHandler+0xa5c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a3a      	ldr	r2, [pc, #232]	; (80048b8 <HAL_DMA_IRQHandler+0xa60>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <HAL_DMA_IRQHandler+0x984>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a39      	ldr	r2, [pc, #228]	; (80048bc <HAL_DMA_IRQHandler+0xa64>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d101      	bne.n	80047e0 <HAL_DMA_IRQHandler+0x988>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_DMA_IRQHandler+0x98a>
 80047e0:	2300      	movs	r3, #0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 823f 	beq.w	8004c66 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f4:	f003 031f 	and.w	r3, r3, #31
 80047f8:	2204      	movs	r2, #4
 80047fa:	409a      	lsls	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80cd 	beq.w	80049a0 <HAL_DMA_IRQHandler+0xb48>
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80c7 	beq.w	80049a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2204      	movs	r2, #4
 800481c:	409a      	lsls	r2, r3
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d049      	beq.n	80048c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 8210 	beq.w	8004c60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004848:	e20a      	b.n	8004c60 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8206 	beq.w	8004c60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800485c:	e200      	b.n	8004c60 <HAL_DMA_IRQHandler+0xe08>
 800485e:	bf00      	nop
 8004860:	40020010 	.word	0x40020010
 8004864:	40020028 	.word	0x40020028
 8004868:	40020040 	.word	0x40020040
 800486c:	40020058 	.word	0x40020058
 8004870:	40020070 	.word	0x40020070
 8004874:	40020088 	.word	0x40020088
 8004878:	400200a0 	.word	0x400200a0
 800487c:	400200b8 	.word	0x400200b8
 8004880:	40020410 	.word	0x40020410
 8004884:	40020428 	.word	0x40020428
 8004888:	40020440 	.word	0x40020440
 800488c:	40020458 	.word	0x40020458
 8004890:	40020470 	.word	0x40020470
 8004894:	40020488 	.word	0x40020488
 8004898:	400204a0 	.word	0x400204a0
 800489c:	400204b8 	.word	0x400204b8
 80048a0:	58025408 	.word	0x58025408
 80048a4:	5802541c 	.word	0x5802541c
 80048a8:	58025430 	.word	0x58025430
 80048ac:	58025444 	.word	0x58025444
 80048b0:	58025458 	.word	0x58025458
 80048b4:	5802546c 	.word	0x5802546c
 80048b8:	58025480 	.word	0x58025480
 80048bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d160      	bne.n	800498c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a8c      	ldr	r2, [pc, #560]	; (8004b00 <HAL_DMA_IRQHandler+0xca8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d04a      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a8a      	ldr	r2, [pc, #552]	; (8004b04 <HAL_DMA_IRQHandler+0xcac>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d045      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a89      	ldr	r2, [pc, #548]	; (8004b08 <HAL_DMA_IRQHandler+0xcb0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d040      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a87      	ldr	r2, [pc, #540]	; (8004b0c <HAL_DMA_IRQHandler+0xcb4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d03b      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a86      	ldr	r2, [pc, #536]	; (8004b10 <HAL_DMA_IRQHandler+0xcb8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d036      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a84      	ldr	r2, [pc, #528]	; (8004b14 <HAL_DMA_IRQHandler+0xcbc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d031      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a83      	ldr	r2, [pc, #524]	; (8004b18 <HAL_DMA_IRQHandler+0xcc0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d02c      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a81      	ldr	r2, [pc, #516]	; (8004b1c <HAL_DMA_IRQHandler+0xcc4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d027      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a80      	ldr	r2, [pc, #512]	; (8004b20 <HAL_DMA_IRQHandler+0xcc8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d022      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a7e      	ldr	r2, [pc, #504]	; (8004b24 <HAL_DMA_IRQHandler+0xccc>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d01d      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a7d      	ldr	r2, [pc, #500]	; (8004b28 <HAL_DMA_IRQHandler+0xcd0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d018      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a7b      	ldr	r2, [pc, #492]	; (8004b2c <HAL_DMA_IRQHandler+0xcd4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a7a      	ldr	r2, [pc, #488]	; (8004b30 <HAL_DMA_IRQHandler+0xcd8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00e      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a78      	ldr	r2, [pc, #480]	; (8004b34 <HAL_DMA_IRQHandler+0xcdc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a77      	ldr	r2, [pc, #476]	; (8004b38 <HAL_DMA_IRQHandler+0xce0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_DMA_IRQHandler+0xb12>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a75      	ldr	r2, [pc, #468]	; (8004b3c <HAL_DMA_IRQHandler+0xce4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d108      	bne.n	800497c <HAL_DMA_IRQHandler+0xb24>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0208 	bic.w	r2, r2, #8
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e007      	b.n	800498c <HAL_DMA_IRQHandler+0xb34>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0204 	bic.w	r2, r2, #4
 800498a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8165 	beq.w	8004c60 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800499e:	e15f      	b.n	8004c60 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2202      	movs	r2, #2
 80049aa:	409a      	lsls	r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80c5 	beq.w	8004b40 <HAL_DMA_IRQHandler+0xce8>
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80bf 	beq.w	8004b40 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	2202      	movs	r2, #2
 80049cc:	409a      	lsls	r2, r3
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d018      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 813a 	beq.w	8004c64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049f8:	e134      	b.n	8004c64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 8130 	beq.w	8004c64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a0c:	e12a      	b.n	8004c64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d168      	bne.n	8004aea <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a38      	ldr	r2, [pc, #224]	; (8004b00 <HAL_DMA_IRQHandler+0xca8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d04a      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a37      	ldr	r2, [pc, #220]	; (8004b04 <HAL_DMA_IRQHandler+0xcac>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d045      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a35      	ldr	r2, [pc, #212]	; (8004b08 <HAL_DMA_IRQHandler+0xcb0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d040      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a34      	ldr	r2, [pc, #208]	; (8004b0c <HAL_DMA_IRQHandler+0xcb4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d03b      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a32      	ldr	r2, [pc, #200]	; (8004b10 <HAL_DMA_IRQHandler+0xcb8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d036      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a31      	ldr	r2, [pc, #196]	; (8004b14 <HAL_DMA_IRQHandler+0xcbc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d031      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a2f      	ldr	r2, [pc, #188]	; (8004b18 <HAL_DMA_IRQHandler+0xcc0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d02c      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a2e      	ldr	r2, [pc, #184]	; (8004b1c <HAL_DMA_IRQHandler+0xcc4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d027      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a2c      	ldr	r2, [pc, #176]	; (8004b20 <HAL_DMA_IRQHandler+0xcc8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d022      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2b      	ldr	r2, [pc, #172]	; (8004b24 <HAL_DMA_IRQHandler+0xccc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d01d      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <HAL_DMA_IRQHandler+0xcd0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d018      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a28      	ldr	r2, [pc, #160]	; (8004b2c <HAL_DMA_IRQHandler+0xcd4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d013      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a26      	ldr	r2, [pc, #152]	; (8004b30 <HAL_DMA_IRQHandler+0xcd8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00e      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a25      	ldr	r2, [pc, #148]	; (8004b34 <HAL_DMA_IRQHandler+0xcdc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d009      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a23      	ldr	r2, [pc, #140]	; (8004b38 <HAL_DMA_IRQHandler+0xce0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0xc60>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <HAL_DMA_IRQHandler+0xce4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d108      	bne.n	8004aca <HAL_DMA_IRQHandler+0xc72>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0214 	bic.w	r2, r2, #20
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e007      	b.n	8004ada <HAL_DMA_IRQHandler+0xc82>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 020a 	bic.w	r2, r2, #10
 8004ad8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 80b8 	beq.w	8004c64 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004afc:	e0b2      	b.n	8004c64 <HAL_DMA_IRQHandler+0xe0c>
 8004afe:	bf00      	nop
 8004b00:	40020010 	.word	0x40020010
 8004b04:	40020028 	.word	0x40020028
 8004b08:	40020040 	.word	0x40020040
 8004b0c:	40020058 	.word	0x40020058
 8004b10:	40020070 	.word	0x40020070
 8004b14:	40020088 	.word	0x40020088
 8004b18:	400200a0 	.word	0x400200a0
 8004b1c:	400200b8 	.word	0x400200b8
 8004b20:	40020410 	.word	0x40020410
 8004b24:	40020428 	.word	0x40020428
 8004b28:	40020440 	.word	0x40020440
 8004b2c:	40020458 	.word	0x40020458
 8004b30:	40020470 	.word	0x40020470
 8004b34:	40020488 	.word	0x40020488
 8004b38:	400204a0 	.word	0x400204a0
 8004b3c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2208      	movs	r2, #8
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8088 	beq.w	8004c66 <HAL_DMA_IRQHandler+0xe0e>
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8082 	beq.w	8004c66 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a41      	ldr	r2, [pc, #260]	; (8004c6c <HAL_DMA_IRQHandler+0xe14>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d04a      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a3f      	ldr	r2, [pc, #252]	; (8004c70 <HAL_DMA_IRQHandler+0xe18>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d045      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a3e      	ldr	r2, [pc, #248]	; (8004c74 <HAL_DMA_IRQHandler+0xe1c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d040      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a3c      	ldr	r2, [pc, #240]	; (8004c78 <HAL_DMA_IRQHandler+0xe20>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d03b      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3b      	ldr	r2, [pc, #236]	; (8004c7c <HAL_DMA_IRQHandler+0xe24>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d036      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a39      	ldr	r2, [pc, #228]	; (8004c80 <HAL_DMA_IRQHandler+0xe28>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d031      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a38      	ldr	r2, [pc, #224]	; (8004c84 <HAL_DMA_IRQHandler+0xe2c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d02c      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a36      	ldr	r2, [pc, #216]	; (8004c88 <HAL_DMA_IRQHandler+0xe30>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d027      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a35      	ldr	r2, [pc, #212]	; (8004c8c <HAL_DMA_IRQHandler+0xe34>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d022      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a33      	ldr	r2, [pc, #204]	; (8004c90 <HAL_DMA_IRQHandler+0xe38>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01d      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a32      	ldr	r2, [pc, #200]	; (8004c94 <HAL_DMA_IRQHandler+0xe3c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d018      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a30      	ldr	r2, [pc, #192]	; (8004c98 <HAL_DMA_IRQHandler+0xe40>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a2f      	ldr	r2, [pc, #188]	; (8004c9c <HAL_DMA_IRQHandler+0xe44>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a2d      	ldr	r2, [pc, #180]	; (8004ca0 <HAL_DMA_IRQHandler+0xe48>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d009      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2c      	ldr	r2, [pc, #176]	; (8004ca4 <HAL_DMA_IRQHandler+0xe4c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xdaa>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2a      	ldr	r2, [pc, #168]	; (8004ca8 <HAL_DMA_IRQHandler+0xe50>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d108      	bne.n	8004c14 <HAL_DMA_IRQHandler+0xdbc>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 021c 	bic.w	r2, r2, #28
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	e007      	b.n	8004c24 <HAL_DMA_IRQHandler+0xdcc>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 020e 	bic.w	r2, r2, #14
 8004c22:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
 8004c5a:	e004      	b.n	8004c66 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c5c:	bf00      	nop
 8004c5e:	e002      	b.n	8004c66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c60:	bf00      	nop
 8004c62:	e000      	b.n	8004c66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c64:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c66:	3728      	adds	r7, #40	; 0x28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40020010 	.word	0x40020010
 8004c70:	40020028 	.word	0x40020028
 8004c74:	40020040 	.word	0x40020040
 8004c78:	40020058 	.word	0x40020058
 8004c7c:	40020070 	.word	0x40020070
 8004c80:	40020088 	.word	0x40020088
 8004c84:	400200a0 	.word	0x400200a0
 8004c88:	400200b8 	.word	0x400200b8
 8004c8c:	40020410 	.word	0x40020410
 8004c90:	40020428 	.word	0x40020428
 8004c94:	40020440 	.word	0x40020440
 8004c98:	40020458 	.word	0x40020458
 8004c9c:	40020470 	.word	0x40020470
 8004ca0:	40020488 	.word	0x40020488
 8004ca4:	400204a0 	.word	0x400204a0
 8004ca8:	400204b8 	.word	0x400204b8

08004cac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a84      	ldr	r2, [pc, #528]	; (8004edc <DMA_SetConfig+0x230>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d072      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a82      	ldr	r2, [pc, #520]	; (8004ee0 <DMA_SetConfig+0x234>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d06d      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a81      	ldr	r2, [pc, #516]	; (8004ee4 <DMA_SetConfig+0x238>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d068      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a7f      	ldr	r2, [pc, #508]	; (8004ee8 <DMA_SetConfig+0x23c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d063      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a7e      	ldr	r2, [pc, #504]	; (8004eec <DMA_SetConfig+0x240>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d05e      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a7c      	ldr	r2, [pc, #496]	; (8004ef0 <DMA_SetConfig+0x244>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d059      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a7b      	ldr	r2, [pc, #492]	; (8004ef4 <DMA_SetConfig+0x248>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d054      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a79      	ldr	r2, [pc, #484]	; (8004ef8 <DMA_SetConfig+0x24c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d04f      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a78      	ldr	r2, [pc, #480]	; (8004efc <DMA_SetConfig+0x250>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d04a      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a76      	ldr	r2, [pc, #472]	; (8004f00 <DMA_SetConfig+0x254>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d045      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a75      	ldr	r2, [pc, #468]	; (8004f04 <DMA_SetConfig+0x258>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d040      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a73      	ldr	r2, [pc, #460]	; (8004f08 <DMA_SetConfig+0x25c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d03b      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a72      	ldr	r2, [pc, #456]	; (8004f0c <DMA_SetConfig+0x260>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d036      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a70      	ldr	r2, [pc, #448]	; (8004f10 <DMA_SetConfig+0x264>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d031      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a6f      	ldr	r2, [pc, #444]	; (8004f14 <DMA_SetConfig+0x268>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d02c      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a6d      	ldr	r2, [pc, #436]	; (8004f18 <DMA_SetConfig+0x26c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d027      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a6c      	ldr	r2, [pc, #432]	; (8004f1c <DMA_SetConfig+0x270>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d022      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a6a      	ldr	r2, [pc, #424]	; (8004f20 <DMA_SetConfig+0x274>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01d      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a69      	ldr	r2, [pc, #420]	; (8004f24 <DMA_SetConfig+0x278>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d018      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a67      	ldr	r2, [pc, #412]	; (8004f28 <DMA_SetConfig+0x27c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a66      	ldr	r2, [pc, #408]	; (8004f2c <DMA_SetConfig+0x280>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00e      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a64      	ldr	r2, [pc, #400]	; (8004f30 <DMA_SetConfig+0x284>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d009      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a63      	ldr	r2, [pc, #396]	; (8004f34 <DMA_SetConfig+0x288>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d004      	beq.n	8004db6 <DMA_SetConfig+0x10a>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a61      	ldr	r2, [pc, #388]	; (8004f38 <DMA_SetConfig+0x28c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d101      	bne.n	8004dba <DMA_SetConfig+0x10e>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <DMA_SetConfig+0x110>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00d      	beq.n	8004ddc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004dc8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004dda:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a3e      	ldr	r2, [pc, #248]	; (8004edc <DMA_SetConfig+0x230>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d04a      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a3d      	ldr	r2, [pc, #244]	; (8004ee0 <DMA_SetConfig+0x234>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d045      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a3b      	ldr	r2, [pc, #236]	; (8004ee4 <DMA_SetConfig+0x238>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d040      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a3a      	ldr	r2, [pc, #232]	; (8004ee8 <DMA_SetConfig+0x23c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d03b      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a38      	ldr	r2, [pc, #224]	; (8004eec <DMA_SetConfig+0x240>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d036      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a37      	ldr	r2, [pc, #220]	; (8004ef0 <DMA_SetConfig+0x244>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d031      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a35      	ldr	r2, [pc, #212]	; (8004ef4 <DMA_SetConfig+0x248>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d02c      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a34      	ldr	r2, [pc, #208]	; (8004ef8 <DMA_SetConfig+0x24c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d027      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a32      	ldr	r2, [pc, #200]	; (8004efc <DMA_SetConfig+0x250>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d022      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a31      	ldr	r2, [pc, #196]	; (8004f00 <DMA_SetConfig+0x254>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d01d      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a2f      	ldr	r2, [pc, #188]	; (8004f04 <DMA_SetConfig+0x258>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d018      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a2e      	ldr	r2, [pc, #184]	; (8004f08 <DMA_SetConfig+0x25c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2c      	ldr	r2, [pc, #176]	; (8004f0c <DMA_SetConfig+0x260>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2b      	ldr	r2, [pc, #172]	; (8004f10 <DMA_SetConfig+0x264>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a29      	ldr	r2, [pc, #164]	; (8004f14 <DMA_SetConfig+0x268>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <DMA_SetConfig+0x1d0>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <DMA_SetConfig+0x26c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d101      	bne.n	8004e80 <DMA_SetConfig+0x1d4>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <DMA_SetConfig+0x1d6>
 8004e80:	2300      	movs	r3, #0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d05a      	beq.n	8004f3c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	223f      	movs	r2, #63	; 0x3f
 8004e90:	409a      	lsls	r2, r3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ea4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b40      	cmp	r3, #64	; 0x40
 8004eb4:	d108      	bne.n	8004ec8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ec6:	e087      	b.n	8004fd8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]
}
 8004ed8:	e07e      	b.n	8004fd8 <DMA_SetConfig+0x32c>
 8004eda:	bf00      	nop
 8004edc:	40020010 	.word	0x40020010
 8004ee0:	40020028 	.word	0x40020028
 8004ee4:	40020040 	.word	0x40020040
 8004ee8:	40020058 	.word	0x40020058
 8004eec:	40020070 	.word	0x40020070
 8004ef0:	40020088 	.word	0x40020088
 8004ef4:	400200a0 	.word	0x400200a0
 8004ef8:	400200b8 	.word	0x400200b8
 8004efc:	40020410 	.word	0x40020410
 8004f00:	40020428 	.word	0x40020428
 8004f04:	40020440 	.word	0x40020440
 8004f08:	40020458 	.word	0x40020458
 8004f0c:	40020470 	.word	0x40020470
 8004f10:	40020488 	.word	0x40020488
 8004f14:	400204a0 	.word	0x400204a0
 8004f18:	400204b8 	.word	0x400204b8
 8004f1c:	58025408 	.word	0x58025408
 8004f20:	5802541c 	.word	0x5802541c
 8004f24:	58025430 	.word	0x58025430
 8004f28:	58025444 	.word	0x58025444
 8004f2c:	58025458 	.word	0x58025458
 8004f30:	5802546c 	.word	0x5802546c
 8004f34:	58025480 	.word	0x58025480
 8004f38:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a28      	ldr	r2, [pc, #160]	; (8004fe4 <DMA_SetConfig+0x338>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d022      	beq.n	8004f8c <DMA_SetConfig+0x2e0>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a27      	ldr	r2, [pc, #156]	; (8004fe8 <DMA_SetConfig+0x33c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d01d      	beq.n	8004f8c <DMA_SetConfig+0x2e0>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a25      	ldr	r2, [pc, #148]	; (8004fec <DMA_SetConfig+0x340>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d018      	beq.n	8004f8c <DMA_SetConfig+0x2e0>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a24      	ldr	r2, [pc, #144]	; (8004ff0 <DMA_SetConfig+0x344>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <DMA_SetConfig+0x2e0>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a22      	ldr	r2, [pc, #136]	; (8004ff4 <DMA_SetConfig+0x348>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00e      	beq.n	8004f8c <DMA_SetConfig+0x2e0>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a21      	ldr	r2, [pc, #132]	; (8004ff8 <DMA_SetConfig+0x34c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d009      	beq.n	8004f8c <DMA_SetConfig+0x2e0>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <DMA_SetConfig+0x350>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <DMA_SetConfig+0x2e0>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1e      	ldr	r2, [pc, #120]	; (8005000 <DMA_SetConfig+0x354>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d101      	bne.n	8004f90 <DMA_SetConfig+0x2e4>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <DMA_SetConfig+0x2e6>
 8004f90:	2300      	movs	r3, #0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d020      	beq.n	8004fd8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d108      	bne.n	8004fc8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	60da      	str	r2, [r3, #12]
}
 8004fc6:	e007      	b.n	8004fd8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	60da      	str	r2, [r3, #12]
}
 8004fd8:	bf00      	nop
 8004fda:	371c      	adds	r7, #28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	58025408 	.word	0x58025408
 8004fe8:	5802541c 	.word	0x5802541c
 8004fec:	58025430 	.word	0x58025430
 8004ff0:	58025444 	.word	0x58025444
 8004ff4:	58025458 	.word	0x58025458
 8004ff8:	5802546c 	.word	0x5802546c
 8004ffc:	58025480 	.word	0x58025480
 8005000:	58025494 	.word	0x58025494

08005004 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a42      	ldr	r2, [pc, #264]	; (800511c <DMA_CalcBaseAndBitshift+0x118>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d04a      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a41      	ldr	r2, [pc, #260]	; (8005120 <DMA_CalcBaseAndBitshift+0x11c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d045      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a3f      	ldr	r2, [pc, #252]	; (8005124 <DMA_CalcBaseAndBitshift+0x120>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d040      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a3e      	ldr	r2, [pc, #248]	; (8005128 <DMA_CalcBaseAndBitshift+0x124>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d03b      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a3c      	ldr	r2, [pc, #240]	; (800512c <DMA_CalcBaseAndBitshift+0x128>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d036      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a3b      	ldr	r2, [pc, #236]	; (8005130 <DMA_CalcBaseAndBitshift+0x12c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d031      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a39      	ldr	r2, [pc, #228]	; (8005134 <DMA_CalcBaseAndBitshift+0x130>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d02c      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a38      	ldr	r2, [pc, #224]	; (8005138 <DMA_CalcBaseAndBitshift+0x134>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d027      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a36      	ldr	r2, [pc, #216]	; (800513c <DMA_CalcBaseAndBitshift+0x138>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d022      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a35      	ldr	r2, [pc, #212]	; (8005140 <DMA_CalcBaseAndBitshift+0x13c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d01d      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a33      	ldr	r2, [pc, #204]	; (8005144 <DMA_CalcBaseAndBitshift+0x140>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d018      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a32      	ldr	r2, [pc, #200]	; (8005148 <DMA_CalcBaseAndBitshift+0x144>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d013      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a30      	ldr	r2, [pc, #192]	; (800514c <DMA_CalcBaseAndBitshift+0x148>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00e      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a2f      	ldr	r2, [pc, #188]	; (8005150 <DMA_CalcBaseAndBitshift+0x14c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d009      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a2d      	ldr	r2, [pc, #180]	; (8005154 <DMA_CalcBaseAndBitshift+0x150>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d004      	beq.n	80050ac <DMA_CalcBaseAndBitshift+0xa8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2c      	ldr	r2, [pc, #176]	; (8005158 <DMA_CalcBaseAndBitshift+0x154>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d101      	bne.n	80050b0 <DMA_CalcBaseAndBitshift+0xac>
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <DMA_CalcBaseAndBitshift+0xae>
 80050b0:	2300      	movs	r3, #0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d024      	beq.n	8005100 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	3b10      	subs	r3, #16
 80050be:	4a27      	ldr	r2, [pc, #156]	; (800515c <DMA_CalcBaseAndBitshift+0x158>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	4a24      	ldr	r2, [pc, #144]	; (8005160 <DMA_CalcBaseAndBitshift+0x15c>)
 80050d0:	5cd3      	ldrb	r3, [r2, r3]
 80050d2:	461a      	mov	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d908      	bls.n	80050f0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <DMA_CalcBaseAndBitshift+0x160>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	1d1a      	adds	r2, r3, #4
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	659a      	str	r2, [r3, #88]	; 0x58
 80050ee:	e00d      	b.n	800510c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <DMA_CalcBaseAndBitshift+0x160>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6593      	str	r3, [r2, #88]	; 0x58
 80050fe:	e005      	b.n	800510c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40020010 	.word	0x40020010
 8005120:	40020028 	.word	0x40020028
 8005124:	40020040 	.word	0x40020040
 8005128:	40020058 	.word	0x40020058
 800512c:	40020070 	.word	0x40020070
 8005130:	40020088 	.word	0x40020088
 8005134:	400200a0 	.word	0x400200a0
 8005138:	400200b8 	.word	0x400200b8
 800513c:	40020410 	.word	0x40020410
 8005140:	40020428 	.word	0x40020428
 8005144:	40020440 	.word	0x40020440
 8005148:	40020458 	.word	0x40020458
 800514c:	40020470 	.word	0x40020470
 8005150:	40020488 	.word	0x40020488
 8005154:	400204a0 	.word	0x400204a0
 8005158:	400204b8 	.word	0x400204b8
 800515c:	aaaaaaab 	.word	0xaaaaaaab
 8005160:	080197b8 	.word	0x080197b8
 8005164:	fffffc00 	.word	0xfffffc00

08005168 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d120      	bne.n	80051be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	2b03      	cmp	r3, #3
 8005182:	d858      	bhi.n	8005236 <DMA_CheckFifoParam+0xce>
 8005184:	a201      	add	r2, pc, #4	; (adr r2, 800518c <DMA_CheckFifoParam+0x24>)
 8005186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518a:	bf00      	nop
 800518c:	0800519d 	.word	0x0800519d
 8005190:	080051af 	.word	0x080051af
 8005194:	0800519d 	.word	0x0800519d
 8005198:	08005237 	.word	0x08005237
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d048      	beq.n	800523a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051ac:	e045      	b.n	800523a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051b6:	d142      	bne.n	800523e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051bc:	e03f      	b.n	800523e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c6:	d123      	bne.n	8005210 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d838      	bhi.n	8005242 <DMA_CheckFifoParam+0xda>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <DMA_CheckFifoParam+0x70>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	080051ef 	.word	0x080051ef
 80051e0:	080051e9 	.word	0x080051e9
 80051e4:	08005201 	.word	0x08005201
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
        break;
 80051ec:	e030      	b.n	8005250 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d025      	beq.n	8005246 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051fe:	e022      	b.n	8005246 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005208:	d11f      	bne.n	800524a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800520e:	e01c      	b.n	800524a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	2b02      	cmp	r3, #2
 8005216:	d902      	bls.n	800521e <DMA_CheckFifoParam+0xb6>
 8005218:	2b03      	cmp	r3, #3
 800521a:	d003      	beq.n	8005224 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800521c:	e018      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	73fb      	strb	r3, [r7, #15]
        break;
 8005222:	e015      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00e      	beq.n	800524e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	73fb      	strb	r3, [r7, #15]
    break;
 8005234:	e00b      	b.n	800524e <DMA_CheckFifoParam+0xe6>
        break;
 8005236:	bf00      	nop
 8005238:	e00a      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
        break;
 800523a:	bf00      	nop
 800523c:	e008      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
        break;
 800523e:	bf00      	nop
 8005240:	e006      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
        break;
 8005242:	bf00      	nop
 8005244:	e004      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
        break;
 8005246:	bf00      	nop
 8005248:	e002      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
        break;
 800524a:	bf00      	nop
 800524c:	e000      	b.n	8005250 <DMA_CheckFifoParam+0xe8>
    break;
 800524e:	bf00      	nop
    }
  }

  return status;
 8005250:	7bfb      	ldrb	r3, [r7, #15]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop

08005260 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a38      	ldr	r2, [pc, #224]	; (8005354 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d022      	beq.n	80052be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a36      	ldr	r2, [pc, #216]	; (8005358 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d01d      	beq.n	80052be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a35      	ldr	r2, [pc, #212]	; (800535c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d018      	beq.n	80052be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a33      	ldr	r2, [pc, #204]	; (8005360 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a32      	ldr	r2, [pc, #200]	; (8005364 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00e      	beq.n	80052be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a30      	ldr	r2, [pc, #192]	; (8005368 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d009      	beq.n	80052be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a2f      	ldr	r2, [pc, #188]	; (800536c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a2d      	ldr	r2, [pc, #180]	; (8005370 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d101      	bne.n	80052c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80052c2:	2300      	movs	r3, #0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01a      	beq.n	80052fe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	3b08      	subs	r3, #8
 80052d0:	4a28      	ldr	r2, [pc, #160]	; (8005374 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	091b      	lsrs	r3, r3, #4
 80052d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4b26      	ldr	r3, [pc, #152]	; (8005378 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	461a      	mov	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a24      	ldr	r2, [pc, #144]	; (800537c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80052ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 031f 	and.w	r3, r3, #31
 80052f4:	2201      	movs	r2, #1
 80052f6:	409a      	lsls	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80052fc:	e024      	b.n	8005348 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	3b10      	subs	r3, #16
 8005306:	4a1e      	ldr	r2, [pc, #120]	; (8005380 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4a1c      	ldr	r2, [pc, #112]	; (8005384 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d806      	bhi.n	8005326 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d902      	bls.n	8005326 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3308      	adds	r3, #8
 8005324:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4b18      	ldr	r3, [pc, #96]	; (800538c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	461a      	mov	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a16      	ldr	r2, [pc, #88]	; (8005390 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005338:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	2201      	movs	r2, #1
 8005342:	409a      	lsls	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	58025408 	.word	0x58025408
 8005358:	5802541c 	.word	0x5802541c
 800535c:	58025430 	.word	0x58025430
 8005360:	58025444 	.word	0x58025444
 8005364:	58025458 	.word	0x58025458
 8005368:	5802546c 	.word	0x5802546c
 800536c:	58025480 	.word	0x58025480
 8005370:	58025494 	.word	0x58025494
 8005374:	cccccccd 	.word	0xcccccccd
 8005378:	16009600 	.word	0x16009600
 800537c:	58025880 	.word	0x58025880
 8005380:	aaaaaaab 	.word	0xaaaaaaab
 8005384:	400204b8 	.word	0x400204b8
 8005388:	4002040f 	.word	0x4002040f
 800538c:	10008200 	.word	0x10008200
 8005390:	40020880 	.word	0x40020880

08005394 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d04a      	beq.n	8005440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d847      	bhi.n	8005440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a25      	ldr	r2, [pc, #148]	; (800544c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d022      	beq.n	8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a24      	ldr	r2, [pc, #144]	; (8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d01d      	beq.n	8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a22      	ldr	r2, [pc, #136]	; (8005454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d018      	beq.n	8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a21      	ldr	r2, [pc, #132]	; (8005458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d013      	beq.n	8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1f      	ldr	r2, [pc, #124]	; (800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00e      	beq.n	8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a1e      	ldr	r2, [pc, #120]	; (8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d009      	beq.n	8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d101      	bne.n	8005404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005404:	2300      	movs	r3, #0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4b17      	ldr	r3, [pc, #92]	; (800546c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	461a      	mov	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a15      	ldr	r2, [pc, #84]	; (8005470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800541c:	671a      	str	r2, [r3, #112]	; 0x70
 800541e:	e009      	b.n	8005434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4b14      	ldr	r3, [pc, #80]	; (8005474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	461a      	mov	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a11      	ldr	r2, [pc, #68]	; (8005478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005432:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	3b01      	subs	r3, #1
 8005438:	2201      	movs	r2, #1
 800543a:	409a      	lsls	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005440:	bf00      	nop
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	58025408 	.word	0x58025408
 8005450:	5802541c 	.word	0x5802541c
 8005454:	58025430 	.word	0x58025430
 8005458:	58025444 	.word	0x58025444
 800545c:	58025458 	.word	0x58025458
 8005460:	5802546c 	.word	0x5802546c
 8005464:	58025480 	.word	0x58025480
 8005468:	58025494 	.word	0x58025494
 800546c:	1600963f 	.word	0x1600963f
 8005470:	58025940 	.word	0x58025940
 8005474:	1000823f 	.word	0x1000823f
 8005478:	40020940 	.word	0x40020940

0800547c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b098      	sub	sp, #96	; 0x60
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005484:	4a84      	ldr	r2, [pc, #528]	; (8005698 <HAL_FDCAN_Init+0x21c>)
 8005486:	f107 030c 	add.w	r3, r7, #12
 800548a:	4611      	mov	r1, r2
 800548c:	224c      	movs	r2, #76	; 0x4c
 800548e:	4618      	mov	r0, r3
 8005490:	f012 fc64 	bl	8017d5c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e1ca      	b.n	8005834 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a7e      	ldr	r2, [pc, #504]	; (800569c <HAL_FDCAN_Init+0x220>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d106      	bne.n	80054b6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80054b0:	461a      	mov	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fd f94e 	bl	800276c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0210 	bic.w	r2, r2, #16
 80054de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054e0:	f7fd fdaa 	bl	8003038 <HAL_GetTick>
 80054e4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80054e6:	e014      	b.n	8005512 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80054e8:	f7fd fda6 	bl	8003038 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b0a      	cmp	r3, #10
 80054f4:	d90d      	bls.n	8005512 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054fc:	f043 0201 	orr.w	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2203      	movs	r2, #3
 800550a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e190      	b.n	8005834 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d0e3      	beq.n	80054e8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005530:	f7fd fd82 	bl	8003038 <HAL_GetTick>
 8005534:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005536:	e014      	b.n	8005562 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005538:	f7fd fd7e 	bl	8003038 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b0a      	cmp	r3, #10
 8005544:	d90d      	bls.n	8005562 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800554c:	f043 0201 	orr.w	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2203      	movs	r2, #3
 800555a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e168      	b.n	8005834 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0e3      	beq.n	8005538 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0202 	orr.w	r2, r2, #2
 800557e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	7c1b      	ldrb	r3, [r3, #16]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d108      	bne.n	800559a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005596:	619a      	str	r2, [r3, #24]
 8005598:	e007      	b.n	80055aa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055a8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	7c5b      	ldrb	r3, [r3, #17]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d108      	bne.n	80055c4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699a      	ldr	r2, [r3, #24]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055c0:	619a      	str	r2, [r3, #24]
 80055c2:	e007      	b.n	80055d4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055d2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	7c9b      	ldrb	r3, [r3, #18]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d108      	bne.n	80055ee <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055ea:	619a      	str	r2, [r3, #24]
 80055ec:	e007      	b.n	80055fe <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699a      	ldr	r2, [r3, #24]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055fc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005622:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0210 	bic.w	r2, r2, #16
 8005632:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d108      	bne.n	800564e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0204 	orr.w	r2, r2, #4
 800564a:	619a      	str	r2, [r3, #24]
 800564c:	e030      	b.n	80056b0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d02c      	beq.n	80056b0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d020      	beq.n	80056a0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699a      	ldr	r2, [r3, #24]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800566c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0210 	orr.w	r2, r2, #16
 800567c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d114      	bne.n	80056b0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0220 	orr.w	r2, r2, #32
 8005694:	619a      	str	r2, [r3, #24]
 8005696:	e00b      	b.n	80056b0 <HAL_FDCAN_Init+0x234>
 8005698:	080196c4 	.word	0x080196c4
 800569c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0220 	orr.w	r2, r2, #32
 80056ae:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	3b01      	subs	r3, #1
 80056be:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056c0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80056c8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80056d8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056da:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056e4:	d115      	bne.n	8005712 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	3b01      	subs	r3, #1
 80056f2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80056f4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	3b01      	subs	r3, #1
 80056fc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80056fe:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	3b01      	subs	r3, #1
 8005708:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800570e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005710:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005738:	4413      	add	r3, r2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d012      	beq.n	8005764 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005746:	f023 0107 	bic.w	r1, r3, #7
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005754:	4413      	add	r3, r2
 8005756:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d012      	beq.n	8005792 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005774:	f023 0107 	bic.w	r1, r3, #7
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005782:	4413      	add	r3, r2
 8005784:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005796:	2b00      	cmp	r3, #0
 8005798:	d013      	beq.n	80057c2 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80057a2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80057b0:	4413      	add	r3, r2
 80057b2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80057b6:	011a      	lsls	r2, r3, #4
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d013      	beq.n	80057f2 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80057d2:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80057e0:	4413      	add	r3, r2
 80057e2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80057e6:	021a      	lsls	r2, r3, #8
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a11      	ldr	r2, [pc, #68]	; (800583c <HAL_FDCAN_Init+0x3c0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d107      	bne.n	800580c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f022 0203 	bic.w	r2, r2, #3
 800580a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fddf 	bl	80063e8 <FDCAN_CalcultateRamBlockAddresses>
 800582a:	4603      	mov	r3, r0
 800582c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005830:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005834:	4618      	mov	r0, r3
 8005836:	3760      	adds	r7, #96	; 0x60
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	4000a000 	.word	0x4000a000

08005840 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005850:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d002      	beq.n	800585e <HAL_FDCAN_ConfigFilter+0x1e>
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d157      	bne.n	800590e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d12b      	bne.n	80058be <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	2b07      	cmp	r3, #7
 800586c:	d10d      	bne.n	800588a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800587a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005880:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005882:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	e00e      	b.n	80058a8 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005896:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800589e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e025      	b.n	800590a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	075a      	lsls	r2, r3, #29
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b07      	cmp	r3, #7
 80058d2:	d103      	bne.n	80058dc <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	613b      	str	r3, [r7, #16]
 80058da:	e006      	b.n	80058ea <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	079a      	lsls	r2, r3, #30
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4413      	add	r3, r2
 80058f6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	3304      	adds	r3, #4
 8005902:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	e008      	b.n	8005920 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005914:	f043 0202 	orr.w	r2, r3, #2
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
  }
}
 8005920:	4618      	mov	r0, r3
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b01      	cmp	r3, #1
 8005944:	d110      	bne.n	8005968 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800594e:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005954:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e008      	b.n	800597a <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800596e:	f043 0204 	orr.w	r2, r3, #4
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
  }
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b01      	cmp	r3, #1
 8005998:	d109      	bne.n	80059ae <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80059a8:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e008      	b.n	80059c0 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059b4:	f043 0204 	orr.w	r2, r3, #4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
  }
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d111      	bne.n	8005a04 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0201 	bic.w	r2, r2, #1
 80059f6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e008      	b.n	8005a16 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a0a:	f043 0204 	orr.w	r2, r3, #4
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
  }
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b08b      	sub	sp, #44	; 0x2c
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005a3c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005a3e:	7efb      	ldrb	r3, [r7, #27]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	f040 813b 	bne.w	8005cbc <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	d145      	bne.n	8005ad8 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a54:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a62:	f043 0220 	orr.w	r2, r3, #32
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e12e      	b.n	8005cce <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d109      	bne.n	8005a94 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e11c      	b.n	8005cce <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a9c:	0e1b      	lsrs	r3, r3, #24
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d103      	bne.n	8005aae <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	4413      	add	r3, r2
 8005ac0:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aca:	69f9      	ldr	r1, [r7, #28]
 8005acc:	fb01 f303 	mul.w	r3, r1, r3
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad6:	e061      	b.n	8005b9c <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b41      	cmp	r3, #65	; 0x41
 8005adc:	d145      	bne.n	8005b6a <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ae6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005af4:	f043 0220 	orr.w	r2, r3, #32
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e0e5      	b.n	8005cce <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e0d3      	b.n	8005cce <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b2e:	0e1b      	lsrs	r3, r3, #24
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d103      	bne.n	8005b40 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b48:	0a1b      	lsrs	r3, r3, #8
 8005b4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	4413      	add	r3, r2
 8005b52:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5c:	69f9      	ldr	r1, [r7, #28]
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
 8005b68:	e018      	b.n	8005b9c <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d309      	bcc.n	8005b88 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b7a:	f043 0220 	orr.w	r2, r3, #32
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0a2      	b.n	8005cce <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	fb01 f303 	mul.w	r3, r1, r3
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d107      	bne.n	8005bc0 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	0c9b      	lsrs	r3, r3, #18
 8005bb6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	e005      	b.n	8005bcc <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	3304      	adds	r3, #4
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	0e1b      	lsrs	r3, r3, #24
 8005c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	0fda      	lsrs	r2, r3, #31
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	3304      	adds	r3, #4
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	623b      	str	r3, [r7, #32]
 8005c3e:	e00a      	b.n	8005c56 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	441a      	add	r2, r3
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	440b      	add	r3, r1
 8005c4c:	7812      	ldrb	r2, [r2, #0]
 8005c4e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	3301      	adds	r3, #1
 8005c54:	623b      	str	r3, [r7, #32]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	0c1b      	lsrs	r3, r3, #16
 8005c5c:	4a1f      	ldr	r2, [pc, #124]	; (8005cdc <HAL_FDCAN_GetRxMessage+0x2b8>)
 8005c5e:	5cd3      	ldrb	r3, [r2, r3]
 8005c60:	461a      	mov	r2, r3
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d3eb      	bcc.n	8005c40 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d105      	bne.n	8005c7a <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005c78:	e01e      	b.n	8005cb8 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b41      	cmp	r3, #65	; 0x41
 8005c7e:	d105      	bne.n	8005c8c <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69fa      	ldr	r2, [r7, #28]
 8005c86:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8005c8a:	e015      	b.n	8005cb8 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b1f      	cmp	r3, #31
 8005c90:	d808      	bhi.n	8005ca4 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2101      	movs	r1, #1
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c9e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8005ca2:	e009      	b.n	8005cb8 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 021f 	and.w	r2, r3, #31
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2101      	movs	r1, #1
 8005cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8005cb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e008      	b.n	8005cce <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cc2:	f043 0208 	orr.w	r2, r3, #8
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
  }
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	372c      	adds	r7, #44	; 0x2c
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	080197c0 	.word	0x080197c0

08005ce0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005cf2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d002      	beq.n	8005d00 <HAL_FDCAN_ActivateNotification+0x20>
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d155      	bne.n	8005dac <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d108      	bne.n	8005d20 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0201 	orr.w	r2, r2, #1
 8005d1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d1e:	e014      	b.n	8005d4a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d108      	bne.n	8005d42 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0202 	orr.w	r2, r2, #2
 8005d3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d40:	e003      	b.n	8005d4a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2203      	movs	r2, #3
 8005d48:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d009      	beq.n	8005d68 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <HAL_FDCAN_ActivateNotification+0xec>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	430b      	orrs	r3, r1
 8005d98:	6553      	str	r3, [r2, #84]	; 0x54
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005d9c:	695a      	ldr	r2, [r3, #20]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	0f9b      	lsrs	r3, r3, #30
 8005da2:	490b      	ldr	r1, [pc, #44]	; (8005dd0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	e008      	b.n	8005dbe <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005db2:	f043 0202 	orr.w	r2, r3, #2
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
  }
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	3fcfffff 	.word	0x3fcfffff
 8005dd0:	4000a800 	.word	0x4000a800

08005dd4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b092      	sub	sp, #72	; 0x48
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005ddc:	4b90      	ldr	r3, [pc, #576]	; (8006020 <HAL_FDCAN_IRQHandler+0x24c>)
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	079b      	lsls	r3, r3, #30
 8005de2:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005de4:	4b8e      	ldr	r3, [pc, #568]	; (8006020 <HAL_FDCAN_IRQHandler+0x24c>)
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	079b      	lsls	r3, r3, #30
 8005dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dec:	4013      	ands	r3, r2
 8005dee:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005dfa:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e04:	4013      	ands	r3, r2
 8005e06:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e34:	4013      	ands	r3, r2
 8005e36:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8005e42:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e56:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8005e5a:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e64:	4013      	ands	r3, r2
 8005e66:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d011      	beq.n	8005e9a <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e8c:	651a      	str	r2, [r3, #80]	; 0x50
 8005e8e:	4b64      	ldr	r3, [pc, #400]	; (8006020 <HAL_FDCAN_IRQHandler+0x24c>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fa5a 	bl	800634e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01e      	beq.n	8005ee6 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d017      	beq.n	8005ee6 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eca:	4013      	ands	r3, r2
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ed6:	651a      	str	r2, [r3, #80]	; 0x50
 8005ed8:	4b51      	ldr	r3, [pc, #324]	; (8006020 <HAL_FDCAN_IRQHandler+0x24c>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005ede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fa0b 	bl	80062fc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00d      	beq.n	8005f08 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ef2:	4b4c      	ldr	r3, [pc, #304]	; (8006024 <HAL_FDCAN_IRQHandler+0x250>)
 8005ef4:	400b      	ands	r3, r1
 8005ef6:	6513      	str	r3, [r2, #80]	; 0x50
 8005ef8:	4a49      	ldr	r2, [pc, #292]	; (8006020 <HAL_FDCAN_IRQHandler+0x24c>)
 8005efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005efc:	0f9b      	lsrs	r3, r3, #30
 8005efe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005f00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f9c4 	bl	8006290 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00d      	beq.n	8005f2a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f14:	4b43      	ldr	r3, [pc, #268]	; (8006024 <HAL_FDCAN_IRQHandler+0x250>)
 8005f16:	400b      	ands	r3, r1
 8005f18:	6513      	str	r3, [r2, #80]	; 0x50
 8005f1a:	4a41      	ldr	r2, [pc, #260]	; (8006020 <HAL_FDCAN_IRQHandler+0x24c>)
 8005f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1e:	0f9b      	lsrs	r3, r3, #30
 8005f20:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005f22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f9be 	bl	80062a6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00d      	beq.n	8005f4c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f36:	4b3b      	ldr	r3, [pc, #236]	; (8006024 <HAL_FDCAN_IRQHandler+0x250>)
 8005f38:	400b      	ands	r3, r1
 8005f3a:	6513      	str	r3, [r2, #80]	; 0x50
 8005f3c:	4a38      	ldr	r2, [pc, #224]	; (8006020 <HAL_FDCAN_IRQHandler+0x24c>)
 8005f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f40:	0f9b      	lsrs	r3, r3, #30
 8005f42:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005f44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fa fbe0 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00d      	beq.n	8005f6e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f58:	4b32      	ldr	r3, [pc, #200]	; (8006024 <HAL_FDCAN_IRQHandler+0x250>)
 8005f5a:	400b      	ands	r3, r1
 8005f5c:	6513      	str	r3, [r2, #80]	; 0x50
 8005f5e:	4a30      	ldr	r2, [pc, #192]	; (8006020 <HAL_FDCAN_IRQHandler+0x24c>)
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	0f9b      	lsrs	r3, r3, #30
 8005f64:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005f66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f9a7 	bl	80062bc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d011      	beq.n	8005fa0 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f92:	651a      	str	r2, [r3, #80]	; 0x50
 8005f94:	4b22      	ldr	r3, [pc, #136]	; (8006020 <HAL_FDCAN_IRQHandler+0x24c>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f999 	bl	80062d2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01e      	beq.n	8005fec <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d017      	beq.n	8005fec <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005fc4:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fdc:	651a      	str	r2, [r3, #80]	; 0x50
 8005fde:	4b10      	ldr	r3, [pc, #64]	; (8006020 <HAL_FDCAN_IRQHandler+0x24c>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f97d 	bl	80062e6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d016      	beq.n	8006028 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006000:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00f      	beq.n	8006028 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006010:	651a      	str	r2, [r3, #80]	; 0x50
 8006012:	4b03      	ldr	r3, [pc, #12]	; (8006020 <HAL_FDCAN_IRQHandler+0x24c>)
 8006014:	2200      	movs	r2, #0
 8006016:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f97a 	bl	8006312 <HAL_FDCAN_RxBufferNewMessageCallback>
 800601e:	e003      	b.n	8006028 <HAL_FDCAN_IRQHandler+0x254>
 8006020:	4000a800 	.word	0x4000a800
 8006024:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d011      	beq.n	800605a <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800604c:	651a      	str	r2, [r3, #80]	; 0x50
 800604e:	4b8d      	ldr	r3, [pc, #564]	; (8006284 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006050:	2200      	movs	r2, #0
 8006052:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f966 	bl	8006326 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d011      	beq.n	800608c <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800607e:	651a      	str	r2, [r3, #80]	; 0x50
 8006080:	4b80      	ldr	r3, [pc, #512]	; (8006284 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006082:	2200      	movs	r2, #0
 8006084:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f957 	bl	800633a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d016      	beq.n	80060c8 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00f      	beq.n	80060c8 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060b0:	651a      	str	r2, [r3, #80]	; 0x50
 80060b2:	4b74      	ldr	r3, [pc, #464]	; (8006284 <HAL_FDCAN_IRQHandler+0x4b0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00d      	beq.n	80060ea <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060d4:	4b6c      	ldr	r3, [pc, #432]	; (8006288 <HAL_FDCAN_IRQHandler+0x4b4>)
 80060d6:	400b      	ands	r3, r1
 80060d8:	6513      	str	r3, [r2, #80]	; 0x50
 80060da:	4a6a      	ldr	r2, [pc, #424]	; (8006284 <HAL_FDCAN_IRQHandler+0x4b0>)
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	0f9b      	lsrs	r3, r3, #30
 80060e0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80060e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f946 	bl	8006376 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80060ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d011      	beq.n	8006114 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80060f6:	4b64      	ldr	r3, [pc, #400]	; (8006288 <HAL_FDCAN_IRQHandler+0x4b4>)
 80060f8:	400b      	ands	r3, r1
 80060fa:	6513      	str	r3, [r2, #80]	; 0x50
 80060fc:	4a61      	ldr	r2, [pc, #388]	; (8006284 <HAL_FDCAN_IRQHandler+0x4b0>)
 80060fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006100:	0f9b      	lsrs	r3, r3, #30
 8006102:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800610a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a5c      	ldr	r2, [pc, #368]	; (800628c <HAL_FDCAN_IRQHandler+0x4b8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	f040 80a6 	bne.w	800626c <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 809e 	beq.w	800626c <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006144:	4013      	ands	r3, r2
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006152:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	6a3a      	ldr	r2, [r7, #32]
 800615c:	4013      	ands	r3, r2
 800615e:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800616a:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	4013      	ands	r3, r2
 8006176:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8006182:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4013      	ands	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800619a:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4013      	ands	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d007      	beq.n	80061be <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80061b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f8e7 	bl	800638c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	6a3a      	ldr	r2, [r7, #32]
 80061ca:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80061cc:	6a39      	ldr	r1, [r7, #32]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f8e7 	bl	80063a2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01b      	beq.n	800621a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d014      	beq.n	800621a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f6:	0c1b      	lsrs	r3, r3, #16
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006206:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	2240      	movs	r2, #64	; 0x40
 800620e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	6939      	ldr	r1, [r7, #16]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f8cf 	bl	80063b8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006228:	69f9      	ldr	r1, [r7, #28]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f8d0 	bl	80063d0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00b      	beq.n	800624e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f873 	bl	8006362 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800627c:	bf00      	nop
 800627e:	3748      	adds	r7, #72	; 0x48
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	4000a800 	.word	0x4000a800
 8006288:	3fcfffff 	.word	0x3fcfffff
 800628c:	4000a000 	.word	0x4000a000

08006290 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
	...

080063e8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80063fe:	4ba7      	ldr	r3, [pc, #668]	; (800669c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006400:	4013      	ands	r3, r2
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	0091      	lsls	r1, r2, #2
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6812      	ldr	r2, [r2, #0]
 800640a:	430b      	orrs	r3, r1
 800640c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006418:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	041a      	lsls	r2, r3, #16
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	4413      	add	r3, r2
 8006434:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800643e:	4b97      	ldr	r3, [pc, #604]	; (800669c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006440:	4013      	ands	r3, r2
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	0091      	lsls	r1, r2, #2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	430b      	orrs	r3, r1
 800644c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006458:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006460:	041a      	lsls	r2, r3, #16
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	4413      	add	r3, r2
 8006476:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006480:	4b86      	ldr	r3, [pc, #536]	; (800669c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006482:	4013      	ands	r3, r2
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	0091      	lsls	r1, r2, #2
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6812      	ldr	r2, [r2, #0]
 800648c:	430b      	orrs	r3, r1
 800648e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800649a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	041a      	lsls	r2, r3, #16
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80064b6:	fb02 f303 	mul.w	r3, r2, r3
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	4413      	add	r3, r2
 80064be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80064c8:	4b74      	ldr	r3, [pc, #464]	; (800669c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80064ca:	4013      	ands	r3, r2
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	0091      	lsls	r1, r2, #2
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6812      	ldr	r2, [r2, #0]
 80064d4:	430b      	orrs	r3, r1
 80064d6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064e2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ea:	041a      	lsls	r2, r3, #16
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80064fe:	fb02 f303 	mul.w	r3, r2, r3
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	4413      	add	r3, r2
 8006506:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006510:	4b62      	ldr	r3, [pc, #392]	; (800669c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006512:	4013      	ands	r3, r2
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	0091      	lsls	r1, r2, #2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6812      	ldr	r2, [r2, #0]
 800651c:	430b      	orrs	r3, r1
 800651e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800652a:	fb02 f303 	mul.w	r3, r2, r3
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	4413      	add	r3, r2
 8006532:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800653c:	4b57      	ldr	r3, [pc, #348]	; (800669c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800653e:	4013      	ands	r3, r2
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	0091      	lsls	r1, r2, #2
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6812      	ldr	r2, [r2, #0]
 8006548:	430b      	orrs	r3, r1
 800654a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006556:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655e:	041a      	lsls	r2, r3, #16
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	4413      	add	r3, r2
 8006574:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800657e:	4b47      	ldr	r3, [pc, #284]	; (800669c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006580:	4013      	ands	r3, r2
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	0091      	lsls	r1, r2, #2
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	430b      	orrs	r3, r1
 800658c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006598:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a0:	041a      	lsls	r2, r3, #16
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80065b4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065bc:	061a      	lsls	r2, r3, #24
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065cc:	4b34      	ldr	r3, [pc, #208]	; (80066a0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80065ce:	4413      	add	r3, r2
 80065d0:	009a      	lsls	r2, r3, #2
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	441a      	add	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	441a      	add	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006602:	fb01 f303 	mul.w	r3, r1, r3
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	441a      	add	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800661a:	fb01 f303 	mul.w	r3, r1, r3
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	441a      	add	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006632:	fb01 f303 	mul.w	r3, r1, r3
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	441a      	add	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	441a      	add	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006662:	fb01 f303 	mul.w	r3, r1, r3
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	441a      	add	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800667e:	fb01 f303 	mul.w	r3, r1, r3
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	441a      	add	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006692:	4a04      	ldr	r2, [pc, #16]	; (80066a4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d915      	bls.n	80066c4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006698:	e006      	b.n	80066a8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800669a:	bf00      	nop
 800669c:	ffff0003 	.word	0xffff0003
 80066a0:	10002b00 	.word	0x10002b00
 80066a4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066ae:	f043 0220 	orr.w	r2, r3, #32
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2203      	movs	r2, #3
 80066bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e010      	b.n	80066e6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	e005      	b.n	80066d8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3304      	adds	r3, #4
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d3f3      	bcc.n	80066cc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop

080066f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b089      	sub	sp, #36	; 0x24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006702:	4b89      	ldr	r3, [pc, #548]	; (8006928 <HAL_GPIO_Init+0x234>)
 8006704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006706:	e194      	b.n	8006a32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	2101      	movs	r1, #1
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	fa01 f303 	lsl.w	r3, r1, r3
 8006714:	4013      	ands	r3, r2
 8006716:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8186 	beq.w	8006a2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d00b      	beq.n	8006740 <HAL_GPIO_Init+0x4c>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d007      	beq.n	8006740 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006734:	2b11      	cmp	r3, #17
 8006736:	d003      	beq.n	8006740 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b12      	cmp	r3, #18
 800673e:	d130      	bne.n	80067a2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	2203      	movs	r2, #3
 800674c:	fa02 f303 	lsl.w	r3, r2, r3
 8006750:	43db      	mvns	r3, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	4013      	ands	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	fa02 f303 	lsl.w	r3, r2, r3
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	4313      	orrs	r3, r2
 8006768:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006776:	2201      	movs	r2, #1
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	43db      	mvns	r3, r3
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	4013      	ands	r3, r2
 8006784:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	091b      	lsrs	r3, r3, #4
 800678c:	f003 0201 	and.w	r2, r3, #1
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	fa02 f303 	lsl.w	r3, r2, r3
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	4313      	orrs	r3, r2
 800679a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	2203      	movs	r2, #3
 80067ae:	fa02 f303 	lsl.w	r3, r2, r3
 80067b2:	43db      	mvns	r3, r3
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	4013      	ands	r3, r2
 80067b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d003      	beq.n	80067e2 <HAL_GPIO_Init+0xee>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	2b12      	cmp	r3, #18
 80067e0:	d123      	bne.n	800682a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	08da      	lsrs	r2, r3, #3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3208      	adds	r2, #8
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	220f      	movs	r2, #15
 80067fa:	fa02 f303 	lsl.w	r3, r2, r3
 80067fe:	43db      	mvns	r3, r3
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	4013      	ands	r3, r2
 8006804:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	691a      	ldr	r2, [r3, #16]
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	fa02 f303 	lsl.w	r3, r2, r3
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	4313      	orrs	r3, r2
 800681a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	08da      	lsrs	r2, r3, #3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3208      	adds	r2, #8
 8006824:	69b9      	ldr	r1, [r7, #24]
 8006826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	2203      	movs	r2, #3
 8006836:	fa02 f303 	lsl.w	r3, r2, r3
 800683a:	43db      	mvns	r3, r3
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4013      	ands	r3, r2
 8006840:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f003 0203 	and.w	r2, r3, #3
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	fa02 f303 	lsl.w	r3, r2, r3
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	4313      	orrs	r3, r2
 8006856:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 80e0 	beq.w	8006a2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800686c:	4b2f      	ldr	r3, [pc, #188]	; (800692c <HAL_GPIO_Init+0x238>)
 800686e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006872:	4a2e      	ldr	r2, [pc, #184]	; (800692c <HAL_GPIO_Init+0x238>)
 8006874:	f043 0302 	orr.w	r3, r3, #2
 8006878:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800687c:	4b2b      	ldr	r3, [pc, #172]	; (800692c <HAL_GPIO_Init+0x238>)
 800687e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800688a:	4a29      	ldr	r2, [pc, #164]	; (8006930 <HAL_GPIO_Init+0x23c>)
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	089b      	lsrs	r3, r3, #2
 8006890:	3302      	adds	r3, #2
 8006892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	220f      	movs	r2, #15
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	43db      	mvns	r3, r3
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	4013      	ands	r3, r2
 80068ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a20      	ldr	r2, [pc, #128]	; (8006934 <HAL_GPIO_Init+0x240>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d052      	beq.n	800695c <HAL_GPIO_Init+0x268>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a1f      	ldr	r2, [pc, #124]	; (8006938 <HAL_GPIO_Init+0x244>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d031      	beq.n	8006922 <HAL_GPIO_Init+0x22e>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a1e      	ldr	r2, [pc, #120]	; (800693c <HAL_GPIO_Init+0x248>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d02b      	beq.n	800691e <HAL_GPIO_Init+0x22a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a1d      	ldr	r2, [pc, #116]	; (8006940 <HAL_GPIO_Init+0x24c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d025      	beq.n	800691a <HAL_GPIO_Init+0x226>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a1c      	ldr	r2, [pc, #112]	; (8006944 <HAL_GPIO_Init+0x250>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d01f      	beq.n	8006916 <HAL_GPIO_Init+0x222>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a1b      	ldr	r2, [pc, #108]	; (8006948 <HAL_GPIO_Init+0x254>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d019      	beq.n	8006912 <HAL_GPIO_Init+0x21e>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a1a      	ldr	r2, [pc, #104]	; (800694c <HAL_GPIO_Init+0x258>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d013      	beq.n	800690e <HAL_GPIO_Init+0x21a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a19      	ldr	r2, [pc, #100]	; (8006950 <HAL_GPIO_Init+0x25c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00d      	beq.n	800690a <HAL_GPIO_Init+0x216>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a18      	ldr	r2, [pc, #96]	; (8006954 <HAL_GPIO_Init+0x260>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d007      	beq.n	8006906 <HAL_GPIO_Init+0x212>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a17      	ldr	r2, [pc, #92]	; (8006958 <HAL_GPIO_Init+0x264>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d101      	bne.n	8006902 <HAL_GPIO_Init+0x20e>
 80068fe:	2309      	movs	r3, #9
 8006900:	e02d      	b.n	800695e <HAL_GPIO_Init+0x26a>
 8006902:	230a      	movs	r3, #10
 8006904:	e02b      	b.n	800695e <HAL_GPIO_Init+0x26a>
 8006906:	2308      	movs	r3, #8
 8006908:	e029      	b.n	800695e <HAL_GPIO_Init+0x26a>
 800690a:	2307      	movs	r3, #7
 800690c:	e027      	b.n	800695e <HAL_GPIO_Init+0x26a>
 800690e:	2306      	movs	r3, #6
 8006910:	e025      	b.n	800695e <HAL_GPIO_Init+0x26a>
 8006912:	2305      	movs	r3, #5
 8006914:	e023      	b.n	800695e <HAL_GPIO_Init+0x26a>
 8006916:	2304      	movs	r3, #4
 8006918:	e021      	b.n	800695e <HAL_GPIO_Init+0x26a>
 800691a:	2303      	movs	r3, #3
 800691c:	e01f      	b.n	800695e <HAL_GPIO_Init+0x26a>
 800691e:	2302      	movs	r3, #2
 8006920:	e01d      	b.n	800695e <HAL_GPIO_Init+0x26a>
 8006922:	2301      	movs	r3, #1
 8006924:	e01b      	b.n	800695e <HAL_GPIO_Init+0x26a>
 8006926:	bf00      	nop
 8006928:	58000080 	.word	0x58000080
 800692c:	58024400 	.word	0x58024400
 8006930:	58000400 	.word	0x58000400
 8006934:	58020000 	.word	0x58020000
 8006938:	58020400 	.word	0x58020400
 800693c:	58020800 	.word	0x58020800
 8006940:	58020c00 	.word	0x58020c00
 8006944:	58021000 	.word	0x58021000
 8006948:	58021400 	.word	0x58021400
 800694c:	58021800 	.word	0x58021800
 8006950:	58021c00 	.word	0x58021c00
 8006954:	58022000 	.word	0x58022000
 8006958:	58022400 	.word	0x58022400
 800695c:	2300      	movs	r3, #0
 800695e:	69fa      	ldr	r2, [r7, #28]
 8006960:	f002 0203 	and.w	r2, r2, #3
 8006964:	0092      	lsls	r2, r2, #2
 8006966:	4093      	lsls	r3, r2
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	4313      	orrs	r3, r2
 800696c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800696e:	4938      	ldr	r1, [pc, #224]	; (8006a50 <HAL_GPIO_Init+0x35c>)
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	089b      	lsrs	r3, r3, #2
 8006974:	3302      	adds	r3, #2
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	43db      	mvns	r3, r3
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	4013      	ands	r3, r2
 800698a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4313      	orrs	r3, r2
 800699e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	43db      	mvns	r3, r3
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	4013      	ands	r3, r2
 80069b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	43db      	mvns	r3, r3
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	4013      	ands	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80069f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80069fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f47f ae63 	bne.w	8006708 <HAL_GPIO_Init+0x14>
  }
}
 8006a42:	bf00      	nop
 8006a44:	3724      	adds	r7, #36	; 0x24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	58000400 	.word	0x58000400

08006a54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691a      	ldr	r2, [r3, #16]
 8006a64:	887b      	ldrh	r3, [r7, #2]
 8006a66:	4013      	ands	r3, r2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]
 8006a70:	e001      	b.n	8006a76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	807b      	strh	r3, [r7, #2]
 8006a90:	4613      	mov	r3, r2
 8006a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a94:	787b      	ldrb	r3, [r7, #1]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a9a:	887a      	ldrh	r2, [r7, #2]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006aa0:	e003      	b.n	8006aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006aa2:	887b      	ldrh	r3, [r7, #2]
 8006aa4:	041a      	lsls	r2, r3, #16
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	619a      	str	r2, [r3, #24]
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	695a      	ldr	r2, [r3, #20]
 8006ac6:	887b      	ldrh	r3, [r7, #2]
 8006ac8:	401a      	ands	r2, r3
 8006aca:	887b      	ldrh	r3, [r7, #2]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d104      	bne.n	8006ada <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006ad0:	887b      	ldrh	r3, [r7, #2]
 8006ad2:	041a      	lsls	r2, r3, #16
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006ad8:	e002      	b.n	8006ae0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006ada:	887a      	ldrh	r2, [r7, #2]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	619a      	str	r2, [r3, #24]
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006afa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d008      	beq.n	8006b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fb fd8c 	bl	8002630 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006b18:	bf00      	nop
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b28:	4b0d      	ldr	r3, [pc, #52]	; (8006b60 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b2e:	4a0c      	ldr	r2, [pc, #48]	; (8006b60 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006b30:	f043 0302 	orr.w	r3, r3, #2
 8006b34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006b38:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8006b46:	4b07      	ldr	r3, [pc, #28]	; (8006b64 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	4906      	ldr	r1, [pc, #24]	; (8006b64 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	604b      	str	r3, [r1, #4]
}
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	58024400 	.word	0x58024400
 8006b64:	58000400 	.word	0x58000400

08006b68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b6a:	b08f      	sub	sp, #60	; 0x3c
 8006b6c:	af0a      	add	r7, sp, #40	; 0x28
 8006b6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e116      	b.n	8006da8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d106      	bne.n	8006b9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f010 fd89 	bl	80176ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2203      	movs	r2, #3
 8006b9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d102      	bne.n	8006bb4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f009 fd8e 	bl	80106da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	687e      	ldr	r6, [r7, #4]
 8006bc6:	466d      	mov	r5, sp
 8006bc8:	f106 0410 	add.w	r4, r6, #16
 8006bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006bd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8006bdc:	1d33      	adds	r3, r6, #4
 8006bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006be0:	6838      	ldr	r0, [r7, #0]
 8006be2:	f009 fc65 	bl	80104b0 <USB_CoreInit>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e0d7      	b.n	8006da8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f009 fd7c 	bl	80106fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c04:	2300      	movs	r3, #0
 8006c06:	73fb      	strb	r3, [r7, #15]
 8006c08:	e04a      	b.n	8006ca0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c0a:	7bfa      	ldrb	r2, [r7, #15]
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	1a9b      	subs	r3, r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	333d      	adds	r3, #61	; 0x3d
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c1e:	7bfa      	ldrb	r2, [r7, #15]
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	4613      	mov	r3, r2
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	1a9b      	subs	r3, r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	333c      	adds	r3, #60	; 0x3c
 8006c2e:	7bfa      	ldrb	r2, [r7, #15]
 8006c30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c32:	7bfa      	ldrb	r2, [r7, #15]
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	b298      	uxth	r0, r3
 8006c38:	6879      	ldr	r1, [r7, #4]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	1a9b      	subs	r3, r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	440b      	add	r3, r1
 8006c44:	3342      	adds	r3, #66	; 0x42
 8006c46:	4602      	mov	r2, r0
 8006c48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c4a:	7bfa      	ldrb	r2, [r7, #15]
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	00db      	lsls	r3, r3, #3
 8006c52:	1a9b      	subs	r3, r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	440b      	add	r3, r1
 8006c58:	333f      	adds	r3, #63	; 0x3f
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c5e:	7bfa      	ldrb	r2, [r7, #15]
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	1a9b      	subs	r3, r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3344      	adds	r3, #68	; 0x44
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c72:	7bfa      	ldrb	r2, [r7, #15]
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	4613      	mov	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	1a9b      	subs	r3, r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	440b      	add	r3, r1
 8006c80:	3348      	adds	r3, #72	; 0x48
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c86:	7bfa      	ldrb	r2, [r7, #15]
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	1a9b      	subs	r3, r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	440b      	add	r3, r1
 8006c94:	3350      	adds	r3, #80	; 0x50
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	73fb      	strb	r3, [r7, #15]
 8006ca0:	7bfa      	ldrb	r2, [r7, #15]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d3af      	bcc.n	8006c0a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]
 8006cae:	e044      	b.n	8006d3a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006cb0:	7bfa      	ldrb	r2, [r7, #15]
 8006cb2:	6879      	ldr	r1, [r7, #4]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	1a9b      	subs	r3, r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006cc6:	7bfa      	ldrb	r2, [r7, #15]
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	1a9b      	subs	r3, r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006cd8:	7bfa      	ldrb	r2, [r7, #15]
 8006cda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006cdc:	7bfa      	ldrb	r2, [r7, #15]
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006cee:	2200      	movs	r2, #0
 8006cf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006cf2:	7bfa      	ldrb	r2, [r7, #15]
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d08:	7bfa      	ldrb	r2, [r7, #15]
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d1e:	7bfa      	ldrb	r2, [r7, #15]
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4613      	mov	r3, r2
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	1a9b      	subs	r3, r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	440b      	add	r3, r1
 8006d2c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	3301      	adds	r3, #1
 8006d38:	73fb      	strb	r3, [r7, #15]
 8006d3a:	7bfa      	ldrb	r2, [r7, #15]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d3b5      	bcc.n	8006cb0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	603b      	str	r3, [r7, #0]
 8006d4a:	687e      	ldr	r6, [r7, #4]
 8006d4c:	466d      	mov	r5, sp
 8006d4e:	f106 0410 	add.w	r4, r6, #16
 8006d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d62:	1d33      	adds	r3, r6, #4
 8006d64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d66:	6838      	ldr	r0, [r7, #0]
 8006d68:	f009 fcf2 	bl	8010750 <USB_DevInit>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e014      	b.n	8006da8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d102      	bne.n	8006d9c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 f8be 	bl	8007f18 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f00a fd31 	bl	8011808 <USB_DevDisconnect>

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006db0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_PCD_Start+0x1c>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e020      	b.n	8006e0e <HAL_PCD_Start+0x5e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d109      	bne.n	8006df0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d005      	beq.n	8006df0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f00a fcef 	bl	80117d8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f009 fc5a 	bl	80106b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e16:	b590      	push	{r4, r7, lr}
 8006e18:	b08d      	sub	sp, #52	; 0x34
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f00a fd96 	bl	801195e <USB_GetMode>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f040 83ca 	bne.w	80075ce <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f00a fcfa 	bl	8011838 <USB_ReadInterrupts>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 83c0 	beq.w	80075cc <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f00a fcf1 	bl	8011838 <USB_ReadInterrupts>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d107      	bne.n	8006e70 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695a      	ldr	r2, [r3, #20]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f002 0202 	and.w	r2, r2, #2
 8006e6e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f00a fcdf 	bl	8011838 <USB_ReadInterrupts>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	d161      	bne.n	8006f48 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699a      	ldr	r2, [r3, #24]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0210 	bic.w	r2, r2, #16
 8006e92:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	f003 020f 	and.w	r2, r3, #15
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	1a9b      	subs	r3, r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	4413      	add	r3, r2
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	0c5b      	lsrs	r3, r3, #17
 8006eb8:	f003 030f 	and.w	r3, r3, #15
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d124      	bne.n	8006f0a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d035      	beq.n	8006f38 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	091b      	lsrs	r3, r3, #4
 8006ed4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	6a38      	ldr	r0, [r7, #32]
 8006ee0:	f00a fb57 	bl	8011592 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	091b      	lsrs	r3, r3, #4
 8006eec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ef0:	441a      	add	r2, r3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	091b      	lsrs	r3, r3, #4
 8006efe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f02:	441a      	add	r2, r3
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	619a      	str	r2, [r3, #24]
 8006f08:	e016      	b.n	8006f38 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	0c5b      	lsrs	r3, r3, #17
 8006f0e:	f003 030f 	and.w	r3, r3, #15
 8006f12:	2b06      	cmp	r3, #6
 8006f14:	d110      	bne.n	8006f38 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6a38      	ldr	r0, [r7, #32]
 8006f22:	f00a fb36 	bl	8011592 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	699a      	ldr	r2, [r3, #24]
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	091b      	lsrs	r3, r3, #4
 8006f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f32:	441a      	add	r2, r3
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699a      	ldr	r2, [r3, #24]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0210 	orr.w	r2, r2, #16
 8006f46:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f00a fc73 	bl	8011838 <USB_ReadInterrupts>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f5c:	d16e      	bne.n	800703c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f00a fc79 	bl	801185e <USB_ReadDevAllOutEpInterrupt>
 8006f6c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006f6e:	e062      	b.n	8007036 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d057      	beq.n	800702a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	4611      	mov	r1, r2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f00a fc9e 	bl	80118c6 <USB_ReadDevOutEPInterrupt>
 8006f8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00c      	beq.n	8006fb0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fe0a 	bl	8007bc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00c      	beq.n	8006fd4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	2308      	movs	r3, #8
 8006fca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006fcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 ff04 	bl	8007ddc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f003 0310 	and.w	r3, r3, #16
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d008      	beq.n	8006ff0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fea:	461a      	mov	r2, r3
 8006fec:	2310      	movs	r3, #16
 8006fee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d008      	beq.n	800700c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007006:	461a      	mov	r2, r3
 8007008:	2320      	movs	r3, #32
 800700a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d009      	beq.n	800702a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007022:	461a      	mov	r2, r3
 8007024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007028:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	3301      	adds	r3, #1
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007038:	2b00      	cmp	r3, #0
 800703a:	d199      	bne.n	8006f70 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4618      	mov	r0, r3
 8007042:	f00a fbf9 	bl	8011838 <USB_ReadInterrupts>
 8007046:	4603      	mov	r3, r0
 8007048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800704c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007050:	f040 80c0 	bne.w	80071d4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4618      	mov	r0, r3
 800705a:	f00a fc1a 	bl	8011892 <USB_ReadDevAllInEpInterrupt>
 800705e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007064:	e0b2      	b.n	80071cc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80a7 	beq.w	80071c0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	4611      	mov	r1, r2
 800707c:	4618      	mov	r0, r3
 800707e:	f00a fc40 	bl	8011902 <USB_ReadDevInEPInterrupt>
 8007082:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d057      	beq.n	800713e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	2201      	movs	r2, #1
 8007096:	fa02 f303 	lsl.w	r3, r2, r3
 800709a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	43db      	mvns	r3, r3
 80070a8:	69f9      	ldr	r1, [r7, #28]
 80070aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ae:	4013      	ands	r3, r2
 80070b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070be:	461a      	mov	r2, r3
 80070c0:	2301      	movs	r3, #1
 80070c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d132      	bne.n	8007132 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d0:	4613      	mov	r3, r2
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	1a9b      	subs	r3, r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	440b      	add	r3, r1
 80070da:	3348      	adds	r3, #72	; 0x48
 80070dc:	6819      	ldr	r1, [r3, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070e2:	4613      	mov	r3, r2
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	1a9b      	subs	r3, r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4403      	add	r3, r0
 80070ec:	3344      	adds	r3, #68	; 0x44
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4419      	add	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f6:	4613      	mov	r3, r2
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	1a9b      	subs	r3, r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4403      	add	r3, r0
 8007100:	3348      	adds	r3, #72	; 0x48
 8007102:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	2b00      	cmp	r3, #0
 8007108:	d113      	bne.n	8007132 <HAL_PCD_IRQHandler+0x31c>
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800710e:	4613      	mov	r3, r2
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	1a9b      	subs	r3, r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	440b      	add	r3, r1
 8007118:	3350      	adds	r3, #80	; 0x50
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d108      	bne.n	8007132 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800712a:	461a      	mov	r2, r3
 800712c:	2101      	movs	r1, #1
 800712e:	f00a fc49 	bl	80119c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	b2db      	uxtb	r3, r3
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f010 fb36 	bl	80177aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f003 0308 	and.w	r3, r3, #8
 8007144:	2b00      	cmp	r3, #0
 8007146:	d008      	beq.n	800715a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007154:	461a      	mov	r2, r3
 8007156:	2308      	movs	r3, #8
 8007158:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b00      	cmp	r3, #0
 8007162:	d008      	beq.n	8007176 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007170:	461a      	mov	r2, r3
 8007172:	2310      	movs	r3, #16
 8007174:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717c:	2b00      	cmp	r3, #0
 800717e:	d008      	beq.n	8007192 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718c:	461a      	mov	r2, r3
 800718e:	2340      	movs	r3, #64	; 0x40
 8007190:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d008      	beq.n	80071ae <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a8:	461a      	mov	r2, r3
 80071aa:	2302      	movs	r3, #2
 80071ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80071b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fc75 	bl	8007aaa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	3301      	adds	r3, #1
 80071c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80071c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c8:	085b      	lsrs	r3, r3, #1
 80071ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f47f af49 	bne.w	8007066 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4618      	mov	r0, r3
 80071da:	f00a fb2d 	bl	8011838 <USB_ReadInterrupts>
 80071de:	4603      	mov	r3, r0
 80071e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071e8:	d122      	bne.n	8007230 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071f8:	f023 0301 	bic.w	r3, r3, #1
 80071fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007204:	2b01      	cmp	r3, #1
 8007206:	d108      	bne.n	800721a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007210:	2100      	movs	r1, #0
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fea4 	bl	8007f60 <HAL_PCDEx_LPM_Callback>
 8007218:	e002      	b.n	8007220 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f010 fb3c 	bl	8017898 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695a      	ldr	r2, [r3, #20]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800722e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4618      	mov	r0, r3
 8007236:	f00a faff 	bl	8011838 <USB_ReadInterrupts>
 800723a:	4603      	mov	r3, r0
 800723c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007244:	d112      	bne.n	800726c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b01      	cmp	r3, #1
 8007254:	d102      	bne.n	800725c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f010 faf8 	bl	801784c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695a      	ldr	r2, [r3, #20]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800726a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4618      	mov	r0, r3
 8007272:	f00a fae1 	bl	8011838 <USB_ReadInterrupts>
 8007276:	4603      	mov	r3, r0
 8007278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800727c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007280:	d121      	bne.n	80072c6 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695a      	ldr	r2, [r3, #20]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007290:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007298:	2b00      	cmp	r3, #0
 800729a:	d111      	bne.n	80072c0 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072aa:	089b      	lsrs	r3, r3, #2
 80072ac:	f003 020f 	and.w	r2, r3, #15
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80072b6:	2101      	movs	r1, #1
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fe51 	bl	8007f60 <HAL_PCDEx_LPM_Callback>
 80072be:	e002      	b.n	80072c6 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f010 fac3 	bl	801784c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f00a fab4 	bl	8011838 <USB_ReadInterrupts>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072da:	f040 80c7 	bne.w	800746c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2110      	movs	r1, #16
 80072f8:	4618      	mov	r0, r3
 80072fa:	f009 fb87 	bl	8010a0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072fe:	2300      	movs	r3, #0
 8007300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007302:	e056      	b.n	80073b2 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	461a      	mov	r2, r3
 8007312:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007316:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007328:	0151      	lsls	r1, r2, #5
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	440a      	add	r2, r1
 800732e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007332:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007336:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007348:	0151      	lsls	r1, r2, #5
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	440a      	add	r2, r1
 800734e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007352:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007356:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007364:	461a      	mov	r2, r3
 8007366:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800736a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	440a      	add	r2, r1
 8007382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800738a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	3301      	adds	r3, #1
 80073b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d3a3      	bcc.n	8007304 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80073ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d016      	beq.n	8007406 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e2:	69fa      	ldr	r2, [r7, #28]
 80073e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073e8:	f043 030b 	orr.w	r3, r3, #11
 80073ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073fe:	f043 030b 	orr.w	r3, r3, #11
 8007402:	6453      	str	r3, [r2, #68]	; 0x44
 8007404:	e015      	b.n	8007432 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740c:	695a      	ldr	r2, [r3, #20]
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007414:	4619      	mov	r1, r3
 8007416:	f242 032b 	movw	r3, #8235	; 0x202b
 800741a:	4313      	orrs	r3, r2
 800741c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800742c:	f043 030b 	orr.w	r3, r3, #11
 8007430:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69fa      	ldr	r2, [r7, #28]
 800743c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007440:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007444:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007456:	461a      	mov	r2, r3
 8007458:	f00a fab4 	bl	80119c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695a      	ldr	r2, [r3, #20]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800746a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	f00a f9e1 	bl	8011838 <USB_ReadInterrupts>
 8007476:	4603      	mov	r3, r0
 8007478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800747c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007480:	d124      	bne.n	80074cc <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f00a fa78 	bl	801197c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4618      	mov	r0, r3
 8007492:	f009 fb1c 	bl	8010ace <USB_GetDevSpeed>
 8007496:	4603      	mov	r3, r0
 8007498:	461a      	mov	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681c      	ldr	r4, [r3, #0]
 80074a2:	f001 fdd9 	bl	8009058 <HAL_RCC_GetHCLKFreq>
 80074a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	461a      	mov	r2, r3
 80074b0:	4620      	mov	r0, r4
 80074b2:	f009 f85f 	bl	8010574 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f010 f99f 	bl	80177fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695a      	ldr	r2, [r3, #20]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80074ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f00a f9b1 	bl	8011838 <USB_ReadInterrupts>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f003 0308 	and.w	r3, r3, #8
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d10a      	bne.n	80074f6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f010 f97c 	bl	80177de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	695a      	ldr	r2, [r3, #20]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f002 0208 	and.w	r2, r2, #8
 80074f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f00a f99c 	bl	8011838 <USB_ReadInterrupts>
 8007500:	4603      	mov	r3, r0
 8007502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800750a:	d10f      	bne.n	800752c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	b2db      	uxtb	r3, r3
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f010 f9de 	bl	80178d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695a      	ldr	r2, [r3, #20]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800752a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4618      	mov	r0, r3
 8007532:	f00a f981 	bl	8011838 <USB_ReadInterrupts>
 8007536:	4603      	mov	r3, r0
 8007538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800753c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007540:	d10f      	bne.n	8007562 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	b2db      	uxtb	r3, r3
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f010 f9b1 	bl	80178b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	695a      	ldr	r2, [r3, #20]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007560:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4618      	mov	r0, r3
 8007568:	f00a f966 	bl	8011838 <USB_ReadInterrupts>
 800756c:	4603      	mov	r3, r0
 800756e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007576:	d10a      	bne.n	800758e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f010 f9bf 	bl	80178fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800758c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4618      	mov	r0, r3
 8007594:	f00a f950 	bl	8011838 <USB_ReadInterrupts>
 8007598:	4603      	mov	r3, r0
 800759a:	f003 0304 	and.w	r3, r3, #4
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d115      	bne.n	80075ce <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f010 f9af 	bl	8017918 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6859      	ldr	r1, [r3, #4]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
 80075ca:	e000      	b.n	80075ce <HAL_PCD_IRQHandler+0x7b8>
      return;
 80075cc:	bf00      	nop
    }
  }
}
 80075ce:	3734      	adds	r7, #52	; 0x34
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd90      	pop	{r4, r7, pc}

080075d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_PCD_SetAddress+0x1a>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e013      	b.n	8007616 <HAL_PCD_SetAddress+0x42>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	78fa      	ldrb	r2, [r7, #3]
 8007604:	4611      	mov	r1, r2
 8007606:	4618      	mov	r0, r3
 8007608:	f00a f8c0 	bl	801178c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	4608      	mov	r0, r1
 8007628:	4611      	mov	r1, r2
 800762a:	461a      	mov	r2, r3
 800762c:	4603      	mov	r3, r0
 800762e:	70fb      	strb	r3, [r7, #3]
 8007630:	460b      	mov	r3, r1
 8007632:	803b      	strh	r3, [r7, #0]
 8007634:	4613      	mov	r3, r2
 8007636:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800763c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007640:	2b00      	cmp	r3, #0
 8007642:	da0f      	bge.n	8007664 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	f003 020f 	and.w	r2, r3, #15
 800764a:	4613      	mov	r3, r2
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	1a9b      	subs	r3, r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	3338      	adds	r3, #56	; 0x38
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	4413      	add	r3, r2
 8007658:	3304      	adds	r3, #4
 800765a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2201      	movs	r2, #1
 8007660:	705a      	strb	r2, [r3, #1]
 8007662:	e00f      	b.n	8007684 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	f003 020f 	and.w	r2, r3, #15
 800766a:	4613      	mov	r3, r2
 800766c:	00db      	lsls	r3, r3, #3
 800766e:	1a9b      	subs	r3, r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	4413      	add	r3, r2
 800767a:	3304      	adds	r3, #4
 800767c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	b2da      	uxtb	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007690:	883a      	ldrh	r2, [r7, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	78ba      	ldrb	r2, [r7, #2]
 800769a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	785b      	ldrb	r3, [r3, #1]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80076ae:	78bb      	ldrb	r3, [r7, #2]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d102      	bne.n	80076ba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d101      	bne.n	80076c8 <HAL_PCD_EP_Open+0xaa>
 80076c4:	2302      	movs	r3, #2
 80076c6:	e00e      	b.n	80076e6 <HAL_PCD_EP_Open+0xc8>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68f9      	ldr	r1, [r7, #12]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f009 fa1e 	bl	8010b18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80076e4:	7afb      	ldrb	r3, [r7, #11]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	460b      	mov	r3, r1
 80076f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80076fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da0f      	bge.n	8007722 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007702:	78fb      	ldrb	r3, [r7, #3]
 8007704:	f003 020f 	and.w	r2, r3, #15
 8007708:	4613      	mov	r3, r2
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	1a9b      	subs	r3, r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	3338      	adds	r3, #56	; 0x38
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	4413      	add	r3, r2
 8007716:	3304      	adds	r3, #4
 8007718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	705a      	strb	r2, [r3, #1]
 8007720:	e00f      	b.n	8007742 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	f003 020f 	and.w	r2, r3, #15
 8007728:	4613      	mov	r3, r2
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	1a9b      	subs	r3, r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	4413      	add	r3, r2
 8007738:	3304      	adds	r3, #4
 800773a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007742:	78fb      	ldrb	r3, [r7, #3]
 8007744:	f003 030f 	and.w	r3, r3, #15
 8007748:	b2da      	uxtb	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_PCD_EP_Close+0x6e>
 8007758:	2302      	movs	r3, #2
 800775a:	e00e      	b.n	800777a <HAL_PCD_EP_Close+0x8c>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68f9      	ldr	r1, [r7, #12]
 800776a:	4618      	mov	r0, r3
 800776c:	f009 fa5c 	bl	8010c28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b086      	sub	sp, #24
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
 800778e:	460b      	mov	r3, r1
 8007790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007792:	7afb      	ldrb	r3, [r7, #11]
 8007794:	f003 020f 	and.w	r2, r3, #15
 8007798:	4613      	mov	r3, r2
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	1a9b      	subs	r3, r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4413      	add	r3, r2
 80077a8:	3304      	adds	r3, #4
 80077aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2200      	movs	r2, #0
 80077bc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2200      	movs	r2, #0
 80077c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	f003 030f 	and.w	r3, r3, #15
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d102      	bne.n	80077de <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80077de:	7afb      	ldrb	r3, [r7, #11]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d109      	bne.n	80077fc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	461a      	mov	r2, r3
 80077f4:	6979      	ldr	r1, [r7, #20]
 80077f6:	f009 fd3f 	bl	8011278 <USB_EP0StartXfer>
 80077fa:	e008      	b.n	800780e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	461a      	mov	r2, r3
 8007808:	6979      	ldr	r1, [r7, #20]
 800780a:	f009 fae9 	bl	8010de0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3718      	adds	r7, #24
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	f003 020f 	and.w	r2, r3, #15
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	4613      	mov	r3, r2
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	1a9b      	subs	r3, r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	440b      	add	r3, r1
 8007836:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800783a:	681b      	ldr	r3, [r3, #0]
}
 800783c:	4618      	mov	r0, r3
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	607a      	str	r2, [r7, #4]
 8007852:	603b      	str	r3, [r7, #0]
 8007854:	460b      	mov	r3, r1
 8007856:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007858:	7afb      	ldrb	r3, [r7, #11]
 800785a:	f003 020f 	and.w	r2, r3, #15
 800785e:	4613      	mov	r3, r2
 8007860:	00db      	lsls	r3, r3, #3
 8007862:	1a9b      	subs	r3, r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	3338      	adds	r3, #56	; 0x38
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4413      	add	r3, r2
 800786c:	3304      	adds	r3, #4
 800786e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2200      	movs	r2, #0
 8007880:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2201      	movs	r2, #1
 8007886:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	f003 030f 	and.w	r3, r3, #15
 800788e:	b2da      	uxtb	r2, r3
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d102      	bne.n	80078a2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80078a2:	7afb      	ldrb	r3, [r7, #11]
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d109      	bne.n	80078c0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	461a      	mov	r2, r3
 80078b8:	6979      	ldr	r1, [r7, #20]
 80078ba:	f009 fcdd 	bl	8011278 <USB_EP0StartXfer>
 80078be:	e008      	b.n	80078d2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	461a      	mov	r2, r3
 80078cc:	6979      	ldr	r1, [r7, #20]
 80078ce:	f009 fa87 	bl	8010de0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	f003 020f 	and.w	r2, r3, #15
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d901      	bls.n	80078fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e050      	b.n	800799c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80078fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	da0f      	bge.n	8007922 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007902:	78fb      	ldrb	r3, [r7, #3]
 8007904:	f003 020f 	and.w	r2, r3, #15
 8007908:	4613      	mov	r3, r2
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	1a9b      	subs	r3, r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	3338      	adds	r3, #56	; 0x38
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	4413      	add	r3, r2
 8007916:	3304      	adds	r3, #4
 8007918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	705a      	strb	r2, [r3, #1]
 8007920:	e00d      	b.n	800793e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007922:	78fa      	ldrb	r2, [r7, #3]
 8007924:	4613      	mov	r3, r2
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	1a9b      	subs	r3, r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	4413      	add	r3, r2
 8007934:	3304      	adds	r3, #4
 8007936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2201      	movs	r2, #1
 8007942:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007944:	78fb      	ldrb	r3, [r7, #3]
 8007946:	f003 030f 	and.w	r3, r3, #15
 800794a:	b2da      	uxtb	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_PCD_EP_SetStall+0x82>
 800795a:	2302      	movs	r3, #2
 800795c:	e01e      	b.n	800799c <HAL_PCD_EP_SetStall+0xc0>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	4618      	mov	r0, r3
 800796e:	f009 fe39 	bl	80115e4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	f003 030f 	and.w	r3, r3, #15
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	b2d9      	uxtb	r1, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800798c:	461a      	mov	r2, r3
 800798e:	f00a f819 	bl	80119c4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	f003 020f 	and.w	r2, r3, #15
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d901      	bls.n	80079c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e042      	b.n	8007a48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80079c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	da0f      	bge.n	80079ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079ca:	78fb      	ldrb	r3, [r7, #3]
 80079cc:	f003 020f 	and.w	r2, r3, #15
 80079d0:	4613      	mov	r3, r2
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	1a9b      	subs	r3, r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	3338      	adds	r3, #56	; 0x38
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	4413      	add	r3, r2
 80079de:	3304      	adds	r3, #4
 80079e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	705a      	strb	r2, [r3, #1]
 80079e8:	e00f      	b.n	8007a0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	f003 020f 	and.w	r2, r3, #15
 80079f0:	4613      	mov	r3, r2
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	1a9b      	subs	r3, r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	4413      	add	r3, r2
 8007a00:	3304      	adds	r3, #4
 8007a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d101      	bne.n	8007a2a <HAL_PCD_EP_ClrStall+0x86>
 8007a26:	2302      	movs	r3, #2
 8007a28:	e00e      	b.n	8007a48 <HAL_PCD_EP_ClrStall+0xa4>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68f9      	ldr	r1, [r7, #12]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f009 fe41 	bl	80116c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d101      	bne.n	8007a6a <HAL_PCD_EP_Flush+0x1a>
 8007a66:	2302      	movs	r3, #2
 8007a68:	e01b      	b.n	8007aa2 <HAL_PCD_EP_Flush+0x52>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8007a72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	da09      	bge.n	8007a8e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	f003 030f 	and.w	r3, r3, #15
 8007a84:	4619      	mov	r1, r3
 8007a86:	4610      	mov	r0, r2
 8007a88:	f008 ffc0 	bl	8010a0c <USB_FlushTxFifo>
 8007a8c:	e004      	b.n	8007a98 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f008 ffe0 	bl	8010a58 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b08a      	sub	sp, #40	; 0x28
 8007aae:	af02      	add	r7, sp, #8
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	1a9b      	subs	r3, r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	3338      	adds	r3, #56	; 0x38
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	4413      	add	r3, r2
 8007ace:	3304      	adds	r3, #4
 8007ad0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	699a      	ldr	r2, [r3, #24]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d901      	bls.n	8007ae2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e06c      	b.n	8007bbc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	695a      	ldr	r2, [r3, #20]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d902      	bls.n	8007afe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	3303      	adds	r3, #3
 8007b02:	089b      	lsrs	r3, r3, #2
 8007b04:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b06:	e02b      	b.n	8007b60 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	695a      	ldr	r2, [r3, #20]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	69fa      	ldr	r2, [r7, #28]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d902      	bls.n	8007b24 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	3303      	adds	r3, #3
 8007b28:	089b      	lsrs	r3, r3, #2
 8007b2a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	68d9      	ldr	r1, [r3, #12]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	4603      	mov	r3, r0
 8007b42:	6978      	ldr	r0, [r7, #20]
 8007b44:	f009 fcf0 	bl	8011528 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	441a      	add	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	441a      	add	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d809      	bhi.n	8007b8a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d203      	bcs.n	8007b8a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1be      	bne.n	8007b08 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	695a      	ldr	r2, [r3, #20]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d811      	bhi.n	8007bba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	f003 030f 	and.w	r3, r3, #15
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	43db      	mvns	r3, r3
 8007bb0:	6939      	ldr	r1, [r7, #16]
 8007bb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3720      	adds	r7, #32
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	333c      	adds	r3, #60	; 0x3c
 8007bdc:	3304      	adds	r3, #4
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	f040 80a0 	bne.w	8007d3c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f003 0308 	and.w	r3, r3, #8
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d015      	beq.n	8007c32 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4a72      	ldr	r2, [pc, #456]	; (8007dd4 <PCD_EP_OutXfrComplete_int+0x210>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	f240 80dd 	bls.w	8007dca <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 80d7 	beq.w	8007dca <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c28:	461a      	mov	r2, r3
 8007c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c2e:	6093      	str	r3, [r2, #8]
 8007c30:	e0cb      	b.n	8007dca <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f003 0320 	and.w	r3, r3, #32
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d009      	beq.n	8007c50 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c48:	461a      	mov	r2, r3
 8007c4a:	2320      	movs	r3, #32
 8007c4c:	6093      	str	r3, [r2, #8]
 8007c4e:	e0bc      	b.n	8007dca <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f040 80b7 	bne.w	8007dca <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4a5d      	ldr	r2, [pc, #372]	; (8007dd4 <PCD_EP_OutXfrComplete_int+0x210>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d90f      	bls.n	8007c84 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c80:	6093      	str	r3, [r2, #8]
 8007c82:	e0a2      	b.n	8007dca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007c84:	6879      	ldr	r1, [r7, #4]
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	1a9b      	subs	r3, r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007c96:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	0159      	lsls	r1, r3, #5
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	440b      	add	r3, r1
 8007ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007caa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	1a9b      	subs	r3, r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4403      	add	r3, r0
 8007cba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007cbe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	1a9b      	subs	r3, r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	440b      	add	r3, r1
 8007cce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007cd2:	6819      	ldr	r1, [r3, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	1a9b      	subs	r3, r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4403      	add	r3, r0
 8007ce2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4419      	add	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	1a9b      	subs	r3, r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4403      	add	r3, r0
 8007cf8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007cfc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d114      	bne.n	8007d2e <PCD_EP_OutXfrComplete_int+0x16a>
 8007d04:	6879      	ldr	r1, [r7, #4]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	1a9b      	subs	r3, r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	440b      	add	r3, r1
 8007d12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d108      	bne.n	8007d2e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d26:	461a      	mov	r2, r3
 8007d28:	2101      	movs	r1, #1
 8007d2a:	f009 fe4b 	bl	80119c4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f00f fd1d 	bl	8017774 <HAL_PCD_DataOutStageCallback>
 8007d3a:	e046      	b.n	8007dca <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4a26      	ldr	r2, [pc, #152]	; (8007dd8 <PCD_EP_OutXfrComplete_int+0x214>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d124      	bne.n	8007d8e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d60:	6093      	str	r3, [r2, #8]
 8007d62:	e032      	b.n	8007dca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d008      	beq.n	8007d80 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	2320      	movs	r3, #32
 8007d7e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f00f fcf4 	bl	8017774 <HAL_PCD_DataOutStageCallback>
 8007d8c:	e01d      	b.n	8007dca <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d114      	bne.n	8007dbe <PCD_EP_OutXfrComplete_int+0x1fa>
 8007d94:	6879      	ldr	r1, [r7, #4]
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	1a9b      	subs	r3, r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	440b      	add	r3, r1
 8007da2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d108      	bne.n	8007dbe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007db6:	461a      	mov	r2, r3
 8007db8:	2100      	movs	r1, #0
 8007dba:	f009 fe03 	bl	80119c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f00f fcd5 	bl	8017774 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	4f54300a 	.word	0x4f54300a
 8007dd8:	4f54310a 	.word	0x4f54310a

08007ddc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	333c      	adds	r3, #60	; 0x3c
 8007df4:	3304      	adds	r3, #4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4a15      	ldr	r2, [pc, #84]	; (8007e64 <PCD_EP_OutSetupPacket_int+0x88>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d90e      	bls.n	8007e30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d009      	beq.n	8007e30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e28:	461a      	mov	r2, r3
 8007e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f00f fc8d 	bl	8017750 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4a0a      	ldr	r2, [pc, #40]	; (8007e64 <PCD_EP_OutSetupPacket_int+0x88>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d90c      	bls.n	8007e58 <PCD_EP_OutSetupPacket_int+0x7c>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d108      	bne.n	8007e58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e50:	461a      	mov	r2, r3
 8007e52:	2101      	movs	r1, #1
 8007e54:	f009 fdb6 	bl	80119c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	4f54300a 	.word	0x4f54300a

08007e68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70fb      	strb	r3, [r7, #3]
 8007e74:	4613      	mov	r3, r2
 8007e76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d107      	bne.n	8007e96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007e86:	883b      	ldrh	r3, [r7, #0]
 8007e88:	0419      	lsls	r1, r3, #16
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	629a      	str	r2, [r3, #40]	; 0x28
 8007e94:	e028      	b.n	8007ee8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9c:	0c1b      	lsrs	r3, r3, #16
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]
 8007ea8:	e00d      	b.n	8007ec6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	3340      	adds	r3, #64	; 0x40
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	0c1b      	lsrs	r3, r3, #16
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	73fb      	strb	r3, [r7, #15]
 8007ec6:	7bfa      	ldrb	r2, [r7, #15]
 8007ec8:	78fb      	ldrb	r3, [r7, #3]
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d3ec      	bcc.n	8007eaa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007ed0:	883b      	ldrh	r3, [r7, #0]
 8007ed2:	0418      	lsls	r0, r3, #16
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6819      	ldr	r1, [r3, #0]
 8007ed8:	78fb      	ldrb	r3, [r7, #3]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	4302      	orrs	r2, r0
 8007ee0:	3340      	adds	r3, #64	; 0x40
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	440b      	add	r3, r1
 8007ee6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	887a      	ldrh	r2, [r7, #2]
 8007f08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f46:	4b05      	ldr	r3, [pc, #20]	; (8007f5c <HAL_PCDEx_ActivateLPM+0x44>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	10000003 	.word	0x10000003

08007f60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a04      	ldr	r2, [pc, #16]	; (8007f94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f86:	6013      	str	r3, [r2, #0]
}
 8007f88:	bf00      	nop
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	58024800 	.word	0x58024800

08007f98 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d069      	beq.n	800807a <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8007fa6:	4b38      	ldr	r3, [pc, #224]	; (8008088 <HAL_PWR_ConfigPVD+0xf0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4935      	ldr	r1, [pc, #212]	; (8008088 <HAL_PWR_ConfigPVD+0xf0>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8007fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 8007fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 8007fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fee:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 8007ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ffe:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d009      	beq.n	8008020 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 800800c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800801c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d009      	beq.n	8008040 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 800802c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800803c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d007      	beq.n	800805c <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 800804c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800805a:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f003 0302 	and.w	r3, r3, #2
 8008064:	2b00      	cmp	r3, #0
 8008066:	d009      	beq.n	800807c <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 8008068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008076:	6053      	str	r3, [r2, #4]
 8008078:	e000      	b.n	800807c <HAL_PWR_ConfigPVD+0xe4>
    return;
 800807a:	bf00      	nop
  }
}
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	58024800 	.word	0x58024800

0800808c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8008090:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <HAL_PWR_EnablePVD+0x1c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a04      	ldr	r2, [pc, #16]	; (80080a8 <HAL_PWR_EnablePVD+0x1c>)
 8008096:	f043 0310 	orr.w	r3, r3, #16
 800809a:	6013      	str	r3, [r2, #0]
}
 800809c:	bf00      	nop
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	58024800 	.word	0x58024800

080080ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80080b4:	4b19      	ldr	r3, [pc, #100]	; (800811c <HAL_PWREx_ConfigSupply+0x70>)
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	f003 0304 	and.w	r3, r3, #4
 80080bc:	2b04      	cmp	r3, #4
 80080be:	d00a      	beq.n	80080d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80080c0:	4b16      	ldr	r3, [pc, #88]	; (800811c <HAL_PWREx_ConfigSupply+0x70>)
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d001      	beq.n	80080d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e01f      	b.n	8008112 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	e01d      	b.n	8008112 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80080d6:	4b11      	ldr	r3, [pc, #68]	; (800811c <HAL_PWREx_ConfigSupply+0x70>)
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	f023 0207 	bic.w	r2, r3, #7
 80080de:	490f      	ldr	r1, [pc, #60]	; (800811c <HAL_PWREx_ConfigSupply+0x70>)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80080e6:	f7fa ffa7 	bl	8003038 <HAL_GetTick>
 80080ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80080ec:	e009      	b.n	8008102 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80080ee:	f7fa ffa3 	bl	8003038 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080fc:	d901      	bls.n	8008102 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e007      	b.n	8008112 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008102:	4b06      	ldr	r3, [pc, #24]	; (800811c <HAL_PWREx_ConfigSupply+0x70>)
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800810a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800810e:	d1ee      	bne.n	80080ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	58024800 	.word	0x58024800

08008120 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008120:	b480      	push	{r7}
 8008122:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008124:	4b05      	ldr	r3, [pc, #20]	; (800813c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	4a04      	ldr	r2, [pc, #16]	; (800813c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800812a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800812e:	60d3      	str	r3, [r2, #12]
}
 8008130:	bf00      	nop
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	58024800 	.word	0x58024800

08008140 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 8008144:	4b1b      	ldr	r3, [pc, #108]	; (80081b4 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0310 	and.w	r3, r3, #16
 800814c:	2b00      	cmp	r3, #0
 800814e:	d014      	beq.n	800817a <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 8008150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800815c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008160:	d10b      	bne.n	800817a <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 8008162:	f7fa fa75 	bl	8002650 <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 8008166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800816a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800816e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008176:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 800817a:	4b0e      	ldr	r3, [pc, #56]	; (80081b4 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d014      	beq.n	80081b0 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 8008186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800818a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008196:	d10b      	bne.n	80081b0 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8008198:	f000 f80e 	bl	80081b8 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 800819c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 80081b0:	bf00      	nop
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	58024800 	.word	0x58024800

080081b8 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 80081bc:	bf00      	nop
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
	...

080081c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08c      	sub	sp, #48	; 0x30
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e3ff      	b.n	80089da <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 8087 	beq.w	80082f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081e8:	4b99      	ldr	r3, [pc, #612]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081f2:	4b97      	ldr	r3, [pc, #604]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80081f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fa:	2b10      	cmp	r3, #16
 80081fc:	d007      	beq.n	800820e <HAL_RCC_OscConfig+0x46>
 80081fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008200:	2b18      	cmp	r3, #24
 8008202:	d110      	bne.n	8008226 <HAL_RCC_OscConfig+0x5e>
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d10b      	bne.n	8008226 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800820e:	4b90      	ldr	r3, [pc, #576]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d06c      	beq.n	80082f4 <HAL_RCC_OscConfig+0x12c>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d168      	bne.n	80082f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e3d9      	b.n	80089da <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800822e:	d106      	bne.n	800823e <HAL_RCC_OscConfig+0x76>
 8008230:	4b87      	ldr	r3, [pc, #540]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a86      	ldr	r2, [pc, #536]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	e02e      	b.n	800829c <HAL_RCC_OscConfig+0xd4>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10c      	bne.n	8008260 <HAL_RCC_OscConfig+0x98>
 8008246:	4b82      	ldr	r3, [pc, #520]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a81      	ldr	r2, [pc, #516]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800824c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	4b7f      	ldr	r3, [pc, #508]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a7e      	ldr	r2, [pc, #504]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008258:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	e01d      	b.n	800829c <HAL_RCC_OscConfig+0xd4>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008268:	d10c      	bne.n	8008284 <HAL_RCC_OscConfig+0xbc>
 800826a:	4b79      	ldr	r3, [pc, #484]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a78      	ldr	r2, [pc, #480]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	4b76      	ldr	r3, [pc, #472]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a75      	ldr	r2, [pc, #468]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800827c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008280:	6013      	str	r3, [r2, #0]
 8008282:	e00b      	b.n	800829c <HAL_RCC_OscConfig+0xd4>
 8008284:	4b72      	ldr	r3, [pc, #456]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a71      	ldr	r2, [pc, #452]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800828a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	4b6f      	ldr	r3, [pc, #444]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a6e      	ldr	r2, [pc, #440]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800829a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d013      	beq.n	80082cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a4:	f7fa fec8 	bl	8003038 <HAL_GetTick>
 80082a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082aa:	e008      	b.n	80082be <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082ac:	f7fa fec4 	bl	8003038 <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	2b64      	cmp	r3, #100	; 0x64
 80082b8:	d901      	bls.n	80082be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e38d      	b.n	80089da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082be:	4b64      	ldr	r3, [pc, #400]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0f0      	beq.n	80082ac <HAL_RCC_OscConfig+0xe4>
 80082ca:	e014      	b.n	80082f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082cc:	f7fa feb4 	bl	8003038 <HAL_GetTick>
 80082d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082d2:	e008      	b.n	80082e6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082d4:	f7fa feb0 	bl	8003038 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b64      	cmp	r3, #100	; 0x64
 80082e0:	d901      	bls.n	80082e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e379      	b.n	80089da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082e6:	4b5a      	ldr	r3, [pc, #360]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1f0      	bne.n	80082d4 <HAL_RCC_OscConfig+0x10c>
 80082f2:	e000      	b.n	80082f6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 80ae 	beq.w	8008460 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008304:	4b52      	ldr	r3, [pc, #328]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800830c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800830e:	4b50      	ldr	r3, [pc, #320]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008312:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d007      	beq.n	800832a <HAL_RCC_OscConfig+0x162>
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	2b18      	cmp	r3, #24
 800831e:	d13a      	bne.n	8008396 <HAL_RCC_OscConfig+0x1ce>
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d135      	bne.n	8008396 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800832a:	4b49      	ldr	r3, [pc, #292]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0304 	and.w	r3, r3, #4
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <HAL_RCC_OscConfig+0x17a>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d101      	bne.n	8008342 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e34b      	b.n	80089da <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008342:	f7fa fea7 	bl	8003094 <HAL_GetREVID>
 8008346:	4602      	mov	r2, r0
 8008348:	f241 0303 	movw	r3, #4099	; 0x1003
 800834c:	429a      	cmp	r2, r3
 800834e:	d817      	bhi.n	8008380 <HAL_RCC_OscConfig+0x1b8>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b40      	cmp	r3, #64	; 0x40
 8008356:	d108      	bne.n	800836a <HAL_RCC_OscConfig+0x1a2>
 8008358:	4b3d      	ldr	r3, [pc, #244]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008360:	4a3b      	ldr	r2, [pc, #236]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008366:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008368:	e07a      	b.n	8008460 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800836a:	4b39      	ldr	r3, [pc, #228]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	031b      	lsls	r3, r3, #12
 8008378:	4935      	ldr	r1, [pc, #212]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800837a:	4313      	orrs	r3, r2
 800837c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800837e:	e06f      	b.n	8008460 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008380:	4b33      	ldr	r3, [pc, #204]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	061b      	lsls	r3, r3, #24
 800838e:	4930      	ldr	r1, [pc, #192]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008390:	4313      	orrs	r3, r2
 8008392:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008394:	e064      	b.n	8008460 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d045      	beq.n	800842a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800839e:	4b2c      	ldr	r3, [pc, #176]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f023 0219 	bic.w	r2, r3, #25
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	4929      	ldr	r1, [pc, #164]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80083ac:	4313      	orrs	r3, r2
 80083ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b0:	f7fa fe42 	bl	8003038 <HAL_GetTick>
 80083b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083b6:	e008      	b.n	80083ca <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083b8:	f7fa fe3e 	bl	8003038 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d901      	bls.n	80083ca <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e307      	b.n	80089da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083ca:	4b21      	ldr	r3, [pc, #132]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0304 	and.w	r3, r3, #4
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d0f0      	beq.n	80083b8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083d6:	f7fa fe5d 	bl	8003094 <HAL_GetREVID>
 80083da:	4602      	mov	r2, r0
 80083dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d817      	bhi.n	8008414 <HAL_RCC_OscConfig+0x24c>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	2b40      	cmp	r3, #64	; 0x40
 80083ea:	d108      	bne.n	80083fe <HAL_RCC_OscConfig+0x236>
 80083ec:	4b18      	ldr	r3, [pc, #96]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80083f4:	4a16      	ldr	r2, [pc, #88]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 80083f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083fa:	6053      	str	r3, [r2, #4]
 80083fc:	e030      	b.n	8008460 <HAL_RCC_OscConfig+0x298>
 80083fe:	4b14      	ldr	r3, [pc, #80]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	031b      	lsls	r3, r3, #12
 800840c:	4910      	ldr	r1, [pc, #64]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800840e:	4313      	orrs	r3, r2
 8008410:	604b      	str	r3, [r1, #4]
 8008412:	e025      	b.n	8008460 <HAL_RCC_OscConfig+0x298>
 8008414:	4b0e      	ldr	r3, [pc, #56]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	061b      	lsls	r3, r3, #24
 8008422:	490b      	ldr	r1, [pc, #44]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008424:	4313      	orrs	r3, r2
 8008426:	604b      	str	r3, [r1, #4]
 8008428:	e01a      	b.n	8008460 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800842a:	4b09      	ldr	r3, [pc, #36]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a08      	ldr	r2, [pc, #32]	; (8008450 <HAL_RCC_OscConfig+0x288>)
 8008430:	f023 0301 	bic.w	r3, r3, #1
 8008434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008436:	f7fa fdff 	bl	8003038 <HAL_GetTick>
 800843a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800843c:	e00a      	b.n	8008454 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800843e:	f7fa fdfb 	bl	8003038 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d903      	bls.n	8008454 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e2c4      	b.n	80089da <HAL_RCC_OscConfig+0x812>
 8008450:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008454:	4ba4      	ldr	r3, [pc, #656]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0304 	and.w	r3, r3, #4
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1ee      	bne.n	800843e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0310 	and.w	r3, r3, #16
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 80a9 	beq.w	80085c0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800846e:	4b9e      	ldr	r3, [pc, #632]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008476:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008478:	4b9b      	ldr	r3, [pc, #620]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 800847a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	2b08      	cmp	r3, #8
 8008482:	d007      	beq.n	8008494 <HAL_RCC_OscConfig+0x2cc>
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	2b18      	cmp	r3, #24
 8008488:	d13a      	bne.n	8008500 <HAL_RCC_OscConfig+0x338>
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f003 0303 	and.w	r3, r3, #3
 8008490:	2b01      	cmp	r3, #1
 8008492:	d135      	bne.n	8008500 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008494:	4b94      	ldr	r3, [pc, #592]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800849c:	2b00      	cmp	r3, #0
 800849e:	d005      	beq.n	80084ac <HAL_RCC_OscConfig+0x2e4>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	2b80      	cmp	r3, #128	; 0x80
 80084a6:	d001      	beq.n	80084ac <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e296      	b.n	80089da <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084ac:	f7fa fdf2 	bl	8003094 <HAL_GetREVID>
 80084b0:	4602      	mov	r2, r0
 80084b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d817      	bhi.n	80084ea <HAL_RCC_OscConfig+0x322>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	2b20      	cmp	r3, #32
 80084c0:	d108      	bne.n	80084d4 <HAL_RCC_OscConfig+0x30c>
 80084c2:	4b89      	ldr	r3, [pc, #548]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80084ca:	4a87      	ldr	r2, [pc, #540]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 80084cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084d0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084d2:	e075      	b.n	80085c0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084d4:	4b84      	ldr	r3, [pc, #528]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	069b      	lsls	r3, r3, #26
 80084e2:	4981      	ldr	r1, [pc, #516]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084e8:	e06a      	b.n	80085c0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084ea:	4b7f      	ldr	r3, [pc, #508]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	061b      	lsls	r3, r3, #24
 80084f8:	497b      	ldr	r1, [pc, #492]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084fe:	e05f      	b.n	80085c0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d042      	beq.n	800858e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008508:	4b77      	ldr	r3, [pc, #476]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a76      	ldr	r2, [pc, #472]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 800850e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008514:	f7fa fd90 	bl	8003038 <HAL_GetTick>
 8008518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800851a:	e008      	b.n	800852e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800851c:	f7fa fd8c 	bl	8003038 <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e255      	b.n	80089da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800852e:	4b6e      	ldr	r3, [pc, #440]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0f0      	beq.n	800851c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800853a:	f7fa fdab 	bl	8003094 <HAL_GetREVID>
 800853e:	4602      	mov	r2, r0
 8008540:	f241 0303 	movw	r3, #4099	; 0x1003
 8008544:	429a      	cmp	r2, r3
 8008546:	d817      	bhi.n	8008578 <HAL_RCC_OscConfig+0x3b0>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	2b20      	cmp	r3, #32
 800854e:	d108      	bne.n	8008562 <HAL_RCC_OscConfig+0x39a>
 8008550:	4b65      	ldr	r3, [pc, #404]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008558:	4a63      	ldr	r2, [pc, #396]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 800855a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800855e:	6053      	str	r3, [r2, #4]
 8008560:	e02e      	b.n	80085c0 <HAL_RCC_OscConfig+0x3f8>
 8008562:	4b61      	ldr	r3, [pc, #388]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	069b      	lsls	r3, r3, #26
 8008570:	495d      	ldr	r1, [pc, #372]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008572:	4313      	orrs	r3, r2
 8008574:	604b      	str	r3, [r1, #4]
 8008576:	e023      	b.n	80085c0 <HAL_RCC_OscConfig+0x3f8>
 8008578:	4b5b      	ldr	r3, [pc, #364]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	061b      	lsls	r3, r3, #24
 8008586:	4958      	ldr	r1, [pc, #352]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008588:	4313      	orrs	r3, r2
 800858a:	60cb      	str	r3, [r1, #12]
 800858c:	e018      	b.n	80085c0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800858e:	4b56      	ldr	r3, [pc, #344]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a55      	ldr	r2, [pc, #340]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800859a:	f7fa fd4d 	bl	8003038 <HAL_GetTick>
 800859e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085a0:	e008      	b.n	80085b4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80085a2:	f7fa fd49 	bl	8003038 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d901      	bls.n	80085b4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e212      	b.n	80089da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085b4:	4b4c      	ldr	r3, [pc, #304]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1f0      	bne.n	80085a2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d036      	beq.n	800863a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d019      	beq.n	8008608 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085d4:	4b44      	ldr	r3, [pc, #272]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 80085d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085d8:	4a43      	ldr	r2, [pc, #268]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 80085da:	f043 0301 	orr.w	r3, r3, #1
 80085de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085e0:	f7fa fd2a 	bl	8003038 <HAL_GetTick>
 80085e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80085e6:	e008      	b.n	80085fa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085e8:	f7fa fd26 	bl	8003038 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e1ef      	b.n	80089da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80085fa:	4b3b      	ldr	r3, [pc, #236]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 80085fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0f0      	beq.n	80085e8 <HAL_RCC_OscConfig+0x420>
 8008606:	e018      	b.n	800863a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008608:	4b37      	ldr	r3, [pc, #220]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 800860a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800860c:	4a36      	ldr	r2, [pc, #216]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 800860e:	f023 0301 	bic.w	r3, r3, #1
 8008612:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008614:	f7fa fd10 	bl	8003038 <HAL_GetTick>
 8008618:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800861a:	e008      	b.n	800862e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800861c:	f7fa fd0c 	bl	8003038 <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	2b02      	cmp	r3, #2
 8008628:	d901      	bls.n	800862e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e1d5      	b.n	80089da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800862e:	4b2e      	ldr	r3, [pc, #184]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1f0      	bne.n	800861c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b00      	cmp	r3, #0
 8008644:	d036      	beq.n	80086b4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d019      	beq.n	8008682 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800864e:	4b26      	ldr	r3, [pc, #152]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a25      	ldr	r2, [pc, #148]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008658:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800865a:	f7fa fced 	bl	8003038 <HAL_GetTick>
 800865e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008660:	e008      	b.n	8008674 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008662:	f7fa fce9 	bl	8003038 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d901      	bls.n	8008674 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e1b2      	b.n	80089da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008674:	4b1c      	ldr	r3, [pc, #112]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0f0      	beq.n	8008662 <HAL_RCC_OscConfig+0x49a>
 8008680:	e018      	b.n	80086b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008682:	4b19      	ldr	r3, [pc, #100]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a18      	ldr	r2, [pc, #96]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 8008688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800868c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800868e:	f7fa fcd3 	bl	8003038 <HAL_GetTick>
 8008692:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008694:	e008      	b.n	80086a8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008696:	f7fa fccf 	bl	8003038 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e198      	b.n	80089da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086a8:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <HAL_RCC_OscConfig+0x520>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1f0      	bne.n	8008696 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 8085 	beq.w	80087cc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80086c2:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <HAL_RCC_OscConfig+0x524>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a09      	ldr	r2, [pc, #36]	; (80086ec <HAL_RCC_OscConfig+0x524>)
 80086c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086ce:	f7fa fcb3 	bl	8003038 <HAL_GetTick>
 80086d2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086d4:	e00c      	b.n	80086f0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80086d6:	f7fa fcaf 	bl	8003038 <HAL_GetTick>
 80086da:	4602      	mov	r2, r0
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	2b64      	cmp	r3, #100	; 0x64
 80086e2:	d905      	bls.n	80086f0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e178      	b.n	80089da <HAL_RCC_OscConfig+0x812>
 80086e8:	58024400 	.word	0x58024400
 80086ec:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086f0:	4b96      	ldr	r3, [pc, #600]	; (800894c <HAL_RCC_OscConfig+0x784>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0ec      	beq.n	80086d6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d106      	bne.n	8008712 <HAL_RCC_OscConfig+0x54a>
 8008704:	4b92      	ldr	r3, [pc, #584]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008708:	4a91      	ldr	r2, [pc, #580]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800870a:	f043 0301 	orr.w	r3, r3, #1
 800870e:	6713      	str	r3, [r2, #112]	; 0x70
 8008710:	e02d      	b.n	800876e <HAL_RCC_OscConfig+0x5a6>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10c      	bne.n	8008734 <HAL_RCC_OscConfig+0x56c>
 800871a:	4b8d      	ldr	r3, [pc, #564]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800871c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871e:	4a8c      	ldr	r2, [pc, #560]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008720:	f023 0301 	bic.w	r3, r3, #1
 8008724:	6713      	str	r3, [r2, #112]	; 0x70
 8008726:	4b8a      	ldr	r3, [pc, #552]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800872a:	4a89      	ldr	r2, [pc, #548]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800872c:	f023 0304 	bic.w	r3, r3, #4
 8008730:	6713      	str	r3, [r2, #112]	; 0x70
 8008732:	e01c      	b.n	800876e <HAL_RCC_OscConfig+0x5a6>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	2b05      	cmp	r3, #5
 800873a:	d10c      	bne.n	8008756 <HAL_RCC_OscConfig+0x58e>
 800873c:	4b84      	ldr	r3, [pc, #528]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800873e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008740:	4a83      	ldr	r2, [pc, #524]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008742:	f043 0304 	orr.w	r3, r3, #4
 8008746:	6713      	str	r3, [r2, #112]	; 0x70
 8008748:	4b81      	ldr	r3, [pc, #516]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800874a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874c:	4a80      	ldr	r2, [pc, #512]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800874e:	f043 0301 	orr.w	r3, r3, #1
 8008752:	6713      	str	r3, [r2, #112]	; 0x70
 8008754:	e00b      	b.n	800876e <HAL_RCC_OscConfig+0x5a6>
 8008756:	4b7e      	ldr	r3, [pc, #504]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875a:	4a7d      	ldr	r2, [pc, #500]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800875c:	f023 0301 	bic.w	r3, r3, #1
 8008760:	6713      	str	r3, [r2, #112]	; 0x70
 8008762:	4b7b      	ldr	r3, [pc, #492]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008766:	4a7a      	ldr	r2, [pc, #488]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008768:	f023 0304 	bic.w	r3, r3, #4
 800876c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d015      	beq.n	80087a2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008776:	f7fa fc5f 	bl	8003038 <HAL_GetTick>
 800877a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800877c:	e00a      	b.n	8008794 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800877e:	f7fa fc5b 	bl	8003038 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	f241 3288 	movw	r2, #5000	; 0x1388
 800878c:	4293      	cmp	r3, r2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e122      	b.n	80089da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008794:	4b6e      	ldr	r3, [pc, #440]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008798:	f003 0302 	and.w	r3, r3, #2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0ee      	beq.n	800877e <HAL_RCC_OscConfig+0x5b6>
 80087a0:	e014      	b.n	80087cc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087a2:	f7fa fc49 	bl	8003038 <HAL_GetTick>
 80087a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087a8:	e00a      	b.n	80087c0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087aa:	f7fa fc45 	bl	8003038 <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d901      	bls.n	80087c0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e10c      	b.n	80089da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087c0:	4b63      	ldr	r3, [pc, #396]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80087c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c4:	f003 0302 	and.w	r3, r3, #2
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1ee      	bne.n	80087aa <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 8101 	beq.w	80089d8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80087d6:	4b5e      	ldr	r3, [pc, #376]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087de:	2b18      	cmp	r3, #24
 80087e0:	f000 80bc 	beq.w	800895c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	f040 8095 	bne.w	8008918 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ee:	4b58      	ldr	r3, [pc, #352]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a57      	ldr	r2, [pc, #348]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80087f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087fa:	f7fa fc1d 	bl	8003038 <HAL_GetTick>
 80087fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008800:	e008      	b.n	8008814 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008802:	f7fa fc19 	bl	8003038 <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	d901      	bls.n	8008814 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e0e2      	b.n	80089da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008814:	4b4e      	ldr	r3, [pc, #312]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1f0      	bne.n	8008802 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008820:	4b4b      	ldr	r3, [pc, #300]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008824:	4b4b      	ldr	r3, [pc, #300]	; (8008954 <HAL_RCC_OscConfig+0x78c>)
 8008826:	4013      	ands	r3, r2
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008830:	0112      	lsls	r2, r2, #4
 8008832:	430a      	orrs	r2, r1
 8008834:	4946      	ldr	r1, [pc, #280]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008836:	4313      	orrs	r3, r2
 8008838:	628b      	str	r3, [r1, #40]	; 0x28
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883e:	3b01      	subs	r3, #1
 8008840:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008848:	3b01      	subs	r3, #1
 800884a:	025b      	lsls	r3, r3, #9
 800884c:	b29b      	uxth	r3, r3
 800884e:	431a      	orrs	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	3b01      	subs	r3, #1
 8008856:	041b      	lsls	r3, r3, #16
 8008858:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800885c:	431a      	orrs	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008862:	3b01      	subs	r3, #1
 8008864:	061b      	lsls	r3, r3, #24
 8008866:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800886a:	4939      	ldr	r1, [pc, #228]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800886c:	4313      	orrs	r3, r2
 800886e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008870:	4b37      	ldr	r3, [pc, #220]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008874:	4a36      	ldr	r2, [pc, #216]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008876:	f023 0301 	bic.w	r3, r3, #1
 800887a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800887c:	4b34      	ldr	r3, [pc, #208]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800887e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008880:	4b35      	ldr	r3, [pc, #212]	; (8008958 <HAL_RCC_OscConfig+0x790>)
 8008882:	4013      	ands	r3, r2
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008888:	00d2      	lsls	r2, r2, #3
 800888a:	4931      	ldr	r1, [pc, #196]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800888c:	4313      	orrs	r3, r2
 800888e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008890:	4b2f      	ldr	r3, [pc, #188]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	f023 020c 	bic.w	r2, r3, #12
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889c:	492c      	ldr	r1, [pc, #176]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80088a2:	4b2b      	ldr	r3, [pc, #172]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80088a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a6:	f023 0202 	bic.w	r2, r3, #2
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ae:	4928      	ldr	r1, [pc, #160]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80088b4:	4b26      	ldr	r3, [pc, #152]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80088b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b8:	4a25      	ldr	r2, [pc, #148]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80088ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088c0:	4b23      	ldr	r3, [pc, #140]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c4:	4a22      	ldr	r2, [pc, #136]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80088c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80088cc:	4b20      	ldr	r3, [pc, #128]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	4a1f      	ldr	r2, [pc, #124]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80088d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80088d8:	4b1d      	ldr	r3, [pc, #116]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	4a1c      	ldr	r2, [pc, #112]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80088de:	f043 0301 	orr.w	r3, r3, #1
 80088e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088e4:	4b1a      	ldr	r3, [pc, #104]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a19      	ldr	r2, [pc, #100]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 80088ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f0:	f7fa fba2 	bl	8003038 <HAL_GetTick>
 80088f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088f6:	e008      	b.n	800890a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088f8:	f7fa fb9e 	bl	8003038 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	2b02      	cmp	r3, #2
 8008904:	d901      	bls.n	800890a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e067      	b.n	80089da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800890a:	4b11      	ldr	r3, [pc, #68]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0f0      	beq.n	80088f8 <HAL_RCC_OscConfig+0x730>
 8008916:	e05f      	b.n	80089d8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008918:	4b0d      	ldr	r3, [pc, #52]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a0c      	ldr	r2, [pc, #48]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 800891e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008924:	f7fa fb88 	bl	8003038 <HAL_GetTick>
 8008928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800892a:	e008      	b.n	800893e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800892c:	f7fa fb84 	bl	8003038 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b02      	cmp	r3, #2
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e04d      	b.n	80089da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800893e:	4b04      	ldr	r3, [pc, #16]	; (8008950 <HAL_RCC_OscConfig+0x788>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f0      	bne.n	800892c <HAL_RCC_OscConfig+0x764>
 800894a:	e045      	b.n	80089d8 <HAL_RCC_OscConfig+0x810>
 800894c:	58024800 	.word	0x58024800
 8008950:	58024400 	.word	0x58024400
 8008954:	fffffc0c 	.word	0xfffffc0c
 8008958:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800895c:	4b21      	ldr	r3, [pc, #132]	; (80089e4 <HAL_RCC_OscConfig+0x81c>)
 800895e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008960:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008962:	4b20      	ldr	r3, [pc, #128]	; (80089e4 <HAL_RCC_OscConfig+0x81c>)
 8008964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008966:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	2b01      	cmp	r3, #1
 800896e:	d031      	beq.n	80089d4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f003 0203 	and.w	r2, r3, #3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800897a:	429a      	cmp	r2, r3
 800897c:	d12a      	bne.n	80089d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	091b      	lsrs	r3, r3, #4
 8008982:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800898a:	429a      	cmp	r2, r3
 800898c:	d122      	bne.n	80089d4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008998:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800899a:	429a      	cmp	r2, r3
 800899c:	d11a      	bne.n	80089d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	0a5b      	lsrs	r3, r3, #9
 80089a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089aa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d111      	bne.n	80089d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	0c1b      	lsrs	r3, r3, #16
 80089b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80089be:	429a      	cmp	r2, r3
 80089c0:	d108      	bne.n	80089d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	0e1b      	lsrs	r3, r3, #24
 80089c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d001      	beq.n	80089d8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e000      	b.n	80089da <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3730      	adds	r7, #48	; 0x30
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	58024400 	.word	0x58024400

080089e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e19c      	b.n	8008d36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089fc:	4b8a      	ldr	r3, [pc, #552]	; (8008c28 <HAL_RCC_ClockConfig+0x240>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d910      	bls.n	8008a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a0a:	4b87      	ldr	r3, [pc, #540]	; (8008c28 <HAL_RCC_ClockConfig+0x240>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f023 020f 	bic.w	r2, r3, #15
 8008a12:	4985      	ldr	r1, [pc, #532]	; (8008c28 <HAL_RCC_ClockConfig+0x240>)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a1a:	4b83      	ldr	r3, [pc, #524]	; (8008c28 <HAL_RCC_ClockConfig+0x240>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 030f 	and.w	r3, r3, #15
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d001      	beq.n	8008a2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e184      	b.n	8008d36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d010      	beq.n	8008a5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	691a      	ldr	r2, [r3, #16]
 8008a3c:	4b7b      	ldr	r3, [pc, #492]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d908      	bls.n	8008a5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a48:	4b78      	ldr	r3, [pc, #480]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	4975      	ldr	r1, [pc, #468]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0308 	and.w	r3, r3, #8
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d010      	beq.n	8008a88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	695a      	ldr	r2, [r3, #20]
 8008a6a:	4b70      	ldr	r3, [pc, #448]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d908      	bls.n	8008a88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a76:	4b6d      	ldr	r3, [pc, #436]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	496a      	ldr	r1, [pc, #424]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0310 	and.w	r3, r3, #16
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d010      	beq.n	8008ab6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	699a      	ldr	r2, [r3, #24]
 8008a98:	4b64      	ldr	r3, [pc, #400]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d908      	bls.n	8008ab6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008aa4:	4b61      	ldr	r3, [pc, #388]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	495e      	ldr	r1, [pc, #376]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0320 	and.w	r3, r3, #32
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d010      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	69da      	ldr	r2, [r3, #28]
 8008ac6:	4b59      	ldr	r3, [pc, #356]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d908      	bls.n	8008ae4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008ad2:	4b56      	ldr	r3, [pc, #344]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	4953      	ldr	r1, [pc, #332]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d010      	beq.n	8008b12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68da      	ldr	r2, [r3, #12]
 8008af4:	4b4d      	ldr	r3, [pc, #308]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	f003 030f 	and.w	r3, r3, #15
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d908      	bls.n	8008b12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b00:	4b4a      	ldr	r3, [pc, #296]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	f023 020f 	bic.w	r2, r3, #15
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	4947      	ldr	r1, [pc, #284]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d055      	beq.n	8008bca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b1e:	4b43      	ldr	r3, [pc, #268]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	4940      	ldr	r1, [pc, #256]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d107      	bne.n	8008b48 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b38:	4b3c      	ldr	r3, [pc, #240]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d121      	bne.n	8008b88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e0f6      	b.n	8008d36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d107      	bne.n	8008b60 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b50:	4b36      	ldr	r3, [pc, #216]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d115      	bne.n	8008b88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e0ea      	b.n	8008d36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d107      	bne.n	8008b78 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b68:	4b30      	ldr	r3, [pc, #192]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d109      	bne.n	8008b88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e0de      	b.n	8008d36 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b78:	4b2c      	ldr	r3, [pc, #176]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e0d6      	b.n	8008d36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b88:	4b28      	ldr	r3, [pc, #160]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	f023 0207 	bic.w	r2, r3, #7
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	4925      	ldr	r1, [pc, #148]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b9a:	f7fa fa4d 	bl	8003038 <HAL_GetTick>
 8008b9e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ba0:	e00a      	b.n	8008bb8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ba2:	f7fa fa49 	bl	8003038 <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d901      	bls.n	8008bb8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e0be      	b.n	8008d36 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bb8:	4b1c      	ldr	r3, [pc, #112]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	00db      	lsls	r3, r3, #3
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d1eb      	bne.n	8008ba2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0302 	and.w	r3, r3, #2
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d010      	beq.n	8008bf8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68da      	ldr	r2, [r3, #12]
 8008bda:	4b14      	ldr	r3, [pc, #80]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	f003 030f 	and.w	r3, r3, #15
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d208      	bcs.n	8008bf8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008be6:	4b11      	ldr	r3, [pc, #68]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	f023 020f 	bic.w	r2, r3, #15
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	490e      	ldr	r1, [pc, #56]	; (8008c2c <HAL_RCC_ClockConfig+0x244>)
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bf8:	4b0b      	ldr	r3, [pc, #44]	; (8008c28 <HAL_RCC_ClockConfig+0x240>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 030f 	and.w	r3, r3, #15
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d214      	bcs.n	8008c30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c06:	4b08      	ldr	r3, [pc, #32]	; (8008c28 <HAL_RCC_ClockConfig+0x240>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f023 020f 	bic.w	r2, r3, #15
 8008c0e:	4906      	ldr	r1, [pc, #24]	; (8008c28 <HAL_RCC_ClockConfig+0x240>)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c16:	4b04      	ldr	r3, [pc, #16]	; (8008c28 <HAL_RCC_ClockConfig+0x240>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 030f 	and.w	r3, r3, #15
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d005      	beq.n	8008c30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e086      	b.n	8008d36 <HAL_RCC_ClockConfig+0x34e>
 8008c28:	52002000 	.word	0x52002000
 8008c2c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d010      	beq.n	8008c5e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	691a      	ldr	r2, [r3, #16]
 8008c40:	4b3f      	ldr	r3, [pc, #252]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d208      	bcs.n	8008c5e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c4c:	4b3c      	ldr	r3, [pc, #240]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	4939      	ldr	r1, [pc, #228]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0308 	and.w	r3, r3, #8
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d010      	beq.n	8008c8c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	695a      	ldr	r2, [r3, #20]
 8008c6e:	4b34      	ldr	r3, [pc, #208]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d208      	bcs.n	8008c8c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c7a:	4b31      	ldr	r3, [pc, #196]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	492e      	ldr	r1, [pc, #184]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0310 	and.w	r3, r3, #16
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d010      	beq.n	8008cba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699a      	ldr	r2, [r3, #24]
 8008c9c:	4b28      	ldr	r3, [pc, #160]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d208      	bcs.n	8008cba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ca8:	4b25      	ldr	r3, [pc, #148]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	699b      	ldr	r3, [r3, #24]
 8008cb4:	4922      	ldr	r1, [pc, #136]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d010      	beq.n	8008ce8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	69da      	ldr	r2, [r3, #28]
 8008cca:	4b1d      	ldr	r3, [pc, #116]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d208      	bcs.n	8008ce8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008cd6:	4b1a      	ldr	r3, [pc, #104]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	4917      	ldr	r1, [pc, #92]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ce8:	f000 f844 	bl	8008d74 <HAL_RCC_GetSysClockFreq>
 8008cec:	4601      	mov	r1, r0
 8008cee:	4b14      	ldr	r3, [pc, #80]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	0a1b      	lsrs	r3, r3, #8
 8008cf4:	f003 030f 	and.w	r3, r3, #15
 8008cf8:	4a12      	ldr	r2, [pc, #72]	; (8008d44 <HAL_RCC_ClockConfig+0x35c>)
 8008cfa:	5cd3      	ldrb	r3, [r2, r3]
 8008cfc:	f003 031f 	and.w	r3, r3, #31
 8008d00:	fa21 f303 	lsr.w	r3, r1, r3
 8008d04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d06:	4b0e      	ldr	r3, [pc, #56]	; (8008d40 <HAL_RCC_ClockConfig+0x358>)
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	f003 030f 	and.w	r3, r3, #15
 8008d0e:	4a0d      	ldr	r2, [pc, #52]	; (8008d44 <HAL_RCC_ClockConfig+0x35c>)
 8008d10:	5cd3      	ldrb	r3, [r2, r3]
 8008d12:	f003 031f 	and.w	r3, r3, #31
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	fa22 f303 	lsr.w	r3, r2, r3
 8008d1c:	4a0a      	ldr	r2, [pc, #40]	; (8008d48 <HAL_RCC_ClockConfig+0x360>)
 8008d1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d20:	4a0a      	ldr	r2, [pc, #40]	; (8008d4c <HAL_RCC_ClockConfig+0x364>)
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008d26:	4b0a      	ldr	r3, [pc, #40]	; (8008d50 <HAL_RCC_ClockConfig+0x368>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fa f93a 	bl	8002fa4 <HAL_InitTick>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	58024400 	.word	0x58024400
 8008d44:	080197a8 	.word	0x080197a8
 8008d48:	24000010 	.word	0x24000010
 8008d4c:	2400000c 	.word	0x2400000c
 8008d50:	24000014 	.word	0x24000014

08008d54 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8008d58:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <HAL_RCC_EnableCSS+0x1c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a04      	ldr	r2, [pc, #16]	; (8008d70 <HAL_RCC_EnableCSS+0x1c>)
 8008d5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d62:	6013      	str	r3, [r2, #0]
}
 8008d64:	bf00      	nop
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	58024400 	.word	0x58024400

08008d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b089      	sub	sp, #36	; 0x24
 8008d78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d7a:	4baf      	ldr	r3, [pc, #700]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d82:	2b18      	cmp	r3, #24
 8008d84:	f200 814e 	bhi.w	8009024 <HAL_RCC_GetSysClockFreq+0x2b0>
 8008d88:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8e:	bf00      	nop
 8008d90:	08008df5 	.word	0x08008df5
 8008d94:	08009025 	.word	0x08009025
 8008d98:	08009025 	.word	0x08009025
 8008d9c:	08009025 	.word	0x08009025
 8008da0:	08009025 	.word	0x08009025
 8008da4:	08009025 	.word	0x08009025
 8008da8:	08009025 	.word	0x08009025
 8008dac:	08009025 	.word	0x08009025
 8008db0:	08008e1b 	.word	0x08008e1b
 8008db4:	08009025 	.word	0x08009025
 8008db8:	08009025 	.word	0x08009025
 8008dbc:	08009025 	.word	0x08009025
 8008dc0:	08009025 	.word	0x08009025
 8008dc4:	08009025 	.word	0x08009025
 8008dc8:	08009025 	.word	0x08009025
 8008dcc:	08009025 	.word	0x08009025
 8008dd0:	08008e21 	.word	0x08008e21
 8008dd4:	08009025 	.word	0x08009025
 8008dd8:	08009025 	.word	0x08009025
 8008ddc:	08009025 	.word	0x08009025
 8008de0:	08009025 	.word	0x08009025
 8008de4:	08009025 	.word	0x08009025
 8008de8:	08009025 	.word	0x08009025
 8008dec:	08009025 	.word	0x08009025
 8008df0:	08008e27 	.word	0x08008e27
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008df4:	4b90      	ldr	r3, [pc, #576]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0320 	and.w	r3, r3, #32
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d009      	beq.n	8008e14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e00:	4b8d      	ldr	r3, [pc, #564]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	08db      	lsrs	r3, r3, #3
 8008e06:	f003 0303 	and.w	r3, r3, #3
 8008e0a:	4a8c      	ldr	r2, [pc, #560]	; (800903c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008e12:	e10a      	b.n	800902a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008e14:	4b89      	ldr	r3, [pc, #548]	; (800903c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008e16:	61bb      	str	r3, [r7, #24]
    break;
 8008e18:	e107      	b.n	800902a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008e1a:	4b89      	ldr	r3, [pc, #548]	; (8009040 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008e1c:	61bb      	str	r3, [r7, #24]
    break;
 8008e1e:	e104      	b.n	800902a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008e20:	4b88      	ldr	r3, [pc, #544]	; (8009044 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8008e22:	61bb      	str	r3, [r7, #24]
    break;
 8008e24:	e101      	b.n	800902a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e26:	4b84      	ldr	r3, [pc, #528]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2a:	f003 0303 	and.w	r3, r3, #3
 8008e2e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008e30:	4b81      	ldr	r3, [pc, #516]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e34:	091b      	lsrs	r3, r3, #4
 8008e36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e3a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008e3c:	4b7e      	ldr	r3, [pc, #504]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008e46:	4b7c      	ldr	r3, [pc, #496]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4a:	08db      	lsrs	r3, r3, #3
 8008e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	fb02 f303 	mul.w	r3, r2, r3
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 80da 	beq.w	800901e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d05a      	beq.n	8008f26 <HAL_RCC_GetSysClockFreq+0x1b2>
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d302      	bcc.n	8008e7a <HAL_RCC_GetSysClockFreq+0x106>
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d078      	beq.n	8008f6a <HAL_RCC_GetSysClockFreq+0x1f6>
 8008e78:	e099      	b.n	8008fae <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e7a:	4b6f      	ldr	r3, [pc, #444]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d02d      	beq.n	8008ee2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e86:	4b6c      	ldr	r3, [pc, #432]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	08db      	lsrs	r3, r3, #3
 8008e8c:	f003 0303 	and.w	r3, r3, #3
 8008e90:	4a6a      	ldr	r2, [pc, #424]	; (800903c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008e92:	fa22 f303 	lsr.w	r3, r2, r3
 8008e96:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	ee07 3a90 	vmov	s15, r3
 8008ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eb0:	4b61      	ldr	r3, [pc, #388]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb8:	ee07 3a90 	vmov	s15, r3
 8008ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec0:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ec4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8009048 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008edc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008ee0:	e087      	b.n	8008ff2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	ee07 3a90 	vmov	s15, r3
 8008ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eec:	eddf 6a57 	vldr	s13, [pc, #348]	; 800904c <HAL_RCC_GetSysClockFreq+0x2d8>
 8008ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef4:	4b50      	ldr	r3, [pc, #320]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efc:	ee07 3a90 	vmov	s15, r3
 8008f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f04:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f08:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8009048 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f24:	e065      	b.n	8008ff2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	ee07 3a90 	vmov	s15, r3
 8008f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f30:	eddf 6a47 	vldr	s13, [pc, #284]	; 8009050 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f38:	4b3f      	ldr	r3, [pc, #252]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f40:	ee07 3a90 	vmov	s15, r3
 8008f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f48:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f4c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009048 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f68:	e043      	b.n	8008ff2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	ee07 3a90 	vmov	s15, r3
 8008f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f74:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009054 <HAL_RCC_GetSysClockFreq+0x2e0>
 8008f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7c:	4b2e      	ldr	r3, [pc, #184]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f84:	ee07 3a90 	vmov	s15, r3
 8008f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f90:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009048 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fac:	e021      	b.n	8008ff2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	ee07 3a90 	vmov	s15, r3
 8008fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8009050 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fc0:	4b1d      	ldr	r3, [pc, #116]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc8:	ee07 3a90 	vmov	s15, r3
 8008fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fd4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8009048 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008fd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ff0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008ff2:	4b11      	ldr	r3, [pc, #68]	; (8009038 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	0a5b      	lsrs	r3, r3, #9
 8008ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800900a:	edd7 6a07 	vldr	s13, [r7, #28]
 800900e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009016:	ee17 3a90 	vmov	r3, s15
 800901a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800901c:	e005      	b.n	800902a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	61bb      	str	r3, [r7, #24]
    break;
 8009022:	e002      	b.n	800902a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8009024:	4b06      	ldr	r3, [pc, #24]	; (8009040 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8009026:	61bb      	str	r3, [r7, #24]
    break;
 8009028:	bf00      	nop
  }

  return sysclockfreq;
 800902a:	69bb      	ldr	r3, [r7, #24]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3724      	adds	r7, #36	; 0x24
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	58024400 	.word	0x58024400
 800903c:	03d09000 	.word	0x03d09000
 8009040:	003d0900 	.word	0x003d0900
 8009044:	017d7840 	.word	0x017d7840
 8009048:	46000000 	.word	0x46000000
 800904c:	4c742400 	.word	0x4c742400
 8009050:	4a742400 	.word	0x4a742400
 8009054:	4bbebc20 	.word	0x4bbebc20

08009058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800905e:	f7ff fe89 	bl	8008d74 <HAL_RCC_GetSysClockFreq>
 8009062:	4601      	mov	r1, r0
 8009064:	4b10      	ldr	r3, [pc, #64]	; (80090a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	0a1b      	lsrs	r3, r3, #8
 800906a:	f003 030f 	and.w	r3, r3, #15
 800906e:	4a0f      	ldr	r2, [pc, #60]	; (80090ac <HAL_RCC_GetHCLKFreq+0x54>)
 8009070:	5cd3      	ldrb	r3, [r2, r3]
 8009072:	f003 031f 	and.w	r3, r3, #31
 8009076:	fa21 f303 	lsr.w	r3, r1, r3
 800907a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800907c:	4b0a      	ldr	r3, [pc, #40]	; (80090a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f003 030f 	and.w	r3, r3, #15
 8009084:	4a09      	ldr	r2, [pc, #36]	; (80090ac <HAL_RCC_GetHCLKFreq+0x54>)
 8009086:	5cd3      	ldrb	r3, [r2, r3]
 8009088:	f003 031f 	and.w	r3, r3, #31
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	fa22 f303 	lsr.w	r3, r2, r3
 8009092:	4a07      	ldr	r2, [pc, #28]	; (80090b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009094:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009096:	4a07      	ldr	r2, [pc, #28]	; (80090b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800909c:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800909e:	681b      	ldr	r3, [r3, #0]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	58024400 	.word	0x58024400
 80090ac:	080197a8 	.word	0x080197a8
 80090b0:	24000010 	.word	0x24000010
 80090b4:	2400000c 	.word	0x2400000c

080090b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80090bc:	f7ff ffcc 	bl	8009058 <HAL_RCC_GetHCLKFreq>
 80090c0:	4601      	mov	r1, r0
 80090c2:	4b06      	ldr	r3, [pc, #24]	; (80090dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	091b      	lsrs	r3, r3, #4
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	4a04      	ldr	r2, [pc, #16]	; (80090e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80090ce:	5cd3      	ldrb	r3, [r2, r3]
 80090d0:	f003 031f 	and.w	r3, r3, #31
 80090d4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80090d8:	4618      	mov	r0, r3
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	58024400 	.word	0x58024400
 80090e0:	080197a8 	.word	0x080197a8

080090e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80090e8:	f7ff ffb6 	bl	8009058 <HAL_RCC_GetHCLKFreq>
 80090ec:	4601      	mov	r1, r0
 80090ee:	4b06      	ldr	r3, [pc, #24]	; (8009108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	0a1b      	lsrs	r3, r3, #8
 80090f4:	f003 0307 	and.w	r3, r3, #7
 80090f8:	4a04      	ldr	r2, [pc, #16]	; (800910c <HAL_RCC_GetPCLK2Freq+0x28>)
 80090fa:	5cd3      	ldrb	r3, [r2, r3]
 80090fc:	f003 031f 	and.w	r3, r3, #31
 8009100:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009104:	4618      	mov	r0, r3
 8009106:	bd80      	pop	{r7, pc}
 8009108:	58024400 	.word	0x58024400
 800910c:	080197a8 	.word	0x080197a8

08009110 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009114:	4b07      	ldr	r3, [pc, #28]	; (8009134 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800911c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009120:	d105      	bne.n	800912e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8009122:	f000 f809 	bl	8009138 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009126:	4b03      	ldr	r3, [pc, #12]	; (8009134 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800912c:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800912e:	bf00      	nop
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	58024400 	.word	0x58024400

08009138 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8009138:	b480      	push	{r7}
 800913a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800913c:	bf00      	nop
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
	...

08009148 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009150:	2300      	movs	r3, #0
 8009152:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009154:	2300      	movs	r3, #0
 8009156:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d03d      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800916c:	d013      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800916e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009172:	d802      	bhi.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009174:	2b00      	cmp	r3, #0
 8009176:	d007      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009178:	e01f      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x72>
 800917a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800917e:	d013      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8009180:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009184:	d01c      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009186:	e018      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009188:	4baf      	ldr	r3, [pc, #700]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918c:	4aae      	ldr	r2, [pc, #696]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800918e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009192:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009194:	e015      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3304      	adds	r3, #4
 800919a:	2102      	movs	r1, #2
 800919c:	4618      	mov	r0, r3
 800919e:	f001 fd33 	bl	800ac08 <RCCEx_PLL2_Config>
 80091a2:	4603      	mov	r3, r0
 80091a4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80091a6:	e00c      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3324      	adds	r3, #36	; 0x24
 80091ac:	2102      	movs	r1, #2
 80091ae:	4618      	mov	r0, r3
 80091b0:	f001 fddc 	bl	800ad6c <RCCEx_PLL3_Config>
 80091b4:	4603      	mov	r3, r0
 80091b6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80091b8:	e003      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	75fb      	strb	r3, [r7, #23]
      break;
 80091be:	e000      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80091c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d109      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80091c8:	4b9f      	ldr	r3, [pc, #636]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80091ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091d4:	499c      	ldr	r1, [pc, #624]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	650b      	str	r3, [r1, #80]	; 0x50
 80091da:	e001      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d03d      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	d826      	bhi.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80091f4:	a201      	add	r2, pc, #4	; (adr r2, 80091fc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80091f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fa:	bf00      	nop
 80091fc:	08009211 	.word	0x08009211
 8009200:	0800921f 	.word	0x0800921f
 8009204:	08009231 	.word	0x08009231
 8009208:	08009249 	.word	0x08009249
 800920c:	08009249 	.word	0x08009249
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009210:	4b8d      	ldr	r3, [pc, #564]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009214:	4a8c      	ldr	r2, [pc, #560]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800921a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800921c:	e015      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3304      	adds	r3, #4
 8009222:	2100      	movs	r1, #0
 8009224:	4618      	mov	r0, r3
 8009226:	f001 fcef 	bl	800ac08 <RCCEx_PLL2_Config>
 800922a:	4603      	mov	r3, r0
 800922c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800922e:	e00c      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3324      	adds	r3, #36	; 0x24
 8009234:	2100      	movs	r1, #0
 8009236:	4618      	mov	r0, r3
 8009238:	f001 fd98 	bl	800ad6c <RCCEx_PLL3_Config>
 800923c:	4603      	mov	r3, r0
 800923e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009240:	e003      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	75fb      	strb	r3, [r7, #23]
      break;
 8009246:	e000      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8009248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d109      	bne.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009250:	4b7d      	ldr	r3, [pc, #500]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009254:	f023 0207 	bic.w	r2, r3, #7
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800925c:	497a      	ldr	r1, [pc, #488]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800925e:	4313      	orrs	r3, r2
 8009260:	650b      	str	r3, [r1, #80]	; 0x50
 8009262:	e001      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009270:	2b00      	cmp	r3, #0
 8009272:	d03e      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009278:	2b80      	cmp	r3, #128	; 0x80
 800927a:	d01c      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800927c:	2b80      	cmp	r3, #128	; 0x80
 800927e:	d804      	bhi.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8009280:	2b00      	cmp	r3, #0
 8009282:	d008      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009284:	2b40      	cmp	r3, #64	; 0x40
 8009286:	d00d      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009288:	e01e      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800928a:	2bc0      	cmp	r3, #192	; 0xc0
 800928c:	d01f      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x186>
 800928e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009292:	d01e      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009294:	e018      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009296:	4b6c      	ldr	r3, [pc, #432]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929a:	4a6b      	ldr	r2, [pc, #428]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800929c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80092a2:	e017      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	3304      	adds	r3, #4
 80092a8:	2100      	movs	r1, #0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f001 fcac 	bl	800ac08 <RCCEx_PLL2_Config>
 80092b0:	4603      	mov	r3, r0
 80092b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80092b4:	e00e      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3324      	adds	r3, #36	; 0x24
 80092ba:	2100      	movs	r1, #0
 80092bc:	4618      	mov	r0, r3
 80092be:	f001 fd55 	bl	800ad6c <RCCEx_PLL3_Config>
 80092c2:	4603      	mov	r3, r0
 80092c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80092c6:	e005      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	75fb      	strb	r3, [r7, #23]
      break;
 80092cc:	e002      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80092ce:	bf00      	nop
 80092d0:	e000      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80092d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d109      	bne.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80092da:	4b5b      	ldr	r3, [pc, #364]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80092dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e6:	4958      	ldr	r1, [pc, #352]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	650b      	str	r3, [r1, #80]	; 0x50
 80092ec:	e001      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
 80092f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d044      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009308:	d01f      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800930a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800930e:	d805      	bhi.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00a      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009314:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009318:	d00e      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800931a:	e01f      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800931c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009320:	d01f      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8009322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009326:	d01e      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009328:	e018      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800932a:	4b47      	ldr	r3, [pc, #284]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932e:	4a46      	ldr	r2, [pc, #280]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009334:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009336:	e017      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3304      	adds	r3, #4
 800933c:	2100      	movs	r1, #0
 800933e:	4618      	mov	r0, r3
 8009340:	f001 fc62 	bl	800ac08 <RCCEx_PLL2_Config>
 8009344:	4603      	mov	r3, r0
 8009346:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009348:	e00e      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	3324      	adds	r3, #36	; 0x24
 800934e:	2100      	movs	r1, #0
 8009350:	4618      	mov	r0, r3
 8009352:	f001 fd0b 	bl	800ad6c <RCCEx_PLL3_Config>
 8009356:	4603      	mov	r3, r0
 8009358:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800935a:	e005      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	75fb      	strb	r3, [r7, #23]
      break;
 8009360:	e002      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009362:	bf00      	nop
 8009364:	e000      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009368:	7dfb      	ldrb	r3, [r7, #23]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10a      	bne.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800936e:	4b36      	ldr	r3, [pc, #216]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009372:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800937c:	4932      	ldr	r1, [pc, #200]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800937e:	4313      	orrs	r3, r2
 8009380:	658b      	str	r3, [r1, #88]	; 0x58
 8009382:	e001      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009384:	7dfb      	ldrb	r3, [r7, #23]
 8009386:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009390:	2b00      	cmp	r3, #0
 8009392:	d044      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800939a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800939e:	d01f      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80093a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093a4:	d805      	bhi.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00a      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80093aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093ae:	d00e      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x286>
 80093b0:	e01f      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80093b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093b6:	d01f      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80093b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093bc:	d01e      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80093be:	e018      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c0:	4b21      	ldr	r3, [pc, #132]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c4:	4a20      	ldr	r2, [pc, #128]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093cc:	e017      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3304      	adds	r3, #4
 80093d2:	2100      	movs	r1, #0
 80093d4:	4618      	mov	r0, r3
 80093d6:	f001 fc17 	bl	800ac08 <RCCEx_PLL2_Config>
 80093da:	4603      	mov	r3, r0
 80093dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80093de:	e00e      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	3324      	adds	r3, #36	; 0x24
 80093e4:	2100      	movs	r1, #0
 80093e6:	4618      	mov	r0, r3
 80093e8:	f001 fcc0 	bl	800ad6c <RCCEx_PLL3_Config>
 80093ec:	4603      	mov	r3, r0
 80093ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093f0:	e005      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	75fb      	strb	r3, [r7, #23]
      break;
 80093f6:	e002      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80093f8:	bf00      	nop
 80093fa:	e000      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80093fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10a      	bne.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009404:	4b10      	ldr	r3, [pc, #64]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009408:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009412:	490d      	ldr	r1, [pc, #52]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009414:	4313      	orrs	r3, r2
 8009416:	658b      	str	r3, [r1, #88]	; 0x58
 8009418:	e001      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d035      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800942e:	2b10      	cmp	r3, #16
 8009430:	d00c      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8009432:	2b10      	cmp	r3, #16
 8009434:	d802      	bhi.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8009436:	2b00      	cmp	r3, #0
 8009438:	d01b      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800943a:	e017      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800943c:	2b20      	cmp	r3, #32
 800943e:	d00c      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8009440:	2b30      	cmp	r3, #48	; 0x30
 8009442:	d018      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8009444:	e012      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009446:	bf00      	nop
 8009448:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800944c:	4baf      	ldr	r3, [pc, #700]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800944e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009450:	4aae      	ldr	r2, [pc, #696]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009458:	e00e      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	3304      	adds	r3, #4
 800945e:	2102      	movs	r1, #2
 8009460:	4618      	mov	r0, r3
 8009462:	f001 fbd1 	bl	800ac08 <RCCEx_PLL2_Config>
 8009466:	4603      	mov	r3, r0
 8009468:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800946a:	e005      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	75fb      	strb	r3, [r7, #23]
      break;
 8009470:	e002      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009472:	bf00      	nop
 8009474:	e000      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009478:	7dfb      	ldrb	r3, [r7, #23]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d109      	bne.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800947e:	4ba3      	ldr	r3, [pc, #652]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009482:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800948a:	49a0      	ldr	r1, [pc, #640]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800948c:	4313      	orrs	r3, r2
 800948e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009490:	e001      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d042      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094aa:	d01f      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80094ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094b0:	d805      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x384>
 80094b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ba:	d00e      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x392>
 80094bc:	e01f      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80094be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094c2:	d01f      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80094c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094c8:	d01e      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80094ca:	e018      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094cc:	4b8f      	ldr	r3, [pc, #572]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80094ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d0:	4a8e      	ldr	r2, [pc, #568]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80094d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80094d8:	e017      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	3304      	adds	r3, #4
 80094de:	2100      	movs	r1, #0
 80094e0:	4618      	mov	r0, r3
 80094e2:	f001 fb91 	bl	800ac08 <RCCEx_PLL2_Config>
 80094e6:	4603      	mov	r3, r0
 80094e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80094ea:	e00e      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3324      	adds	r3, #36	; 0x24
 80094f0:	2100      	movs	r1, #0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 fc3a 	bl	800ad6c <RCCEx_PLL3_Config>
 80094f8:	4603      	mov	r3, r0
 80094fa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80094fc:	e005      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	75fb      	strb	r3, [r7, #23]
      break;
 8009502:	e002      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009504:	bf00      	nop
 8009506:	e000      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800950a:	7dfb      	ldrb	r3, [r7, #23]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d109      	bne.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009510:	4b7e      	ldr	r3, [pc, #504]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009514:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800951c:	497b      	ldr	r1, [pc, #492]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800951e:	4313      	orrs	r3, r2
 8009520:	650b      	str	r3, [r1, #80]	; 0x50
 8009522:	e001      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009524:	7dfb      	ldrb	r3, [r7, #23]
 8009526:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d042      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800953c:	d01b      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800953e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009542:	d805      	bhi.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009544:	2b00      	cmp	r3, #0
 8009546:	d022      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800954c:	d00a      	beq.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800954e:	e01b      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8009550:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009554:	d01d      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8009556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800955a:	d01c      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800955c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009560:	d01b      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009562:	e011      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3304      	adds	r3, #4
 8009568:	2101      	movs	r1, #1
 800956a:	4618      	mov	r0, r3
 800956c:	f001 fb4c 	bl	800ac08 <RCCEx_PLL2_Config>
 8009570:	4603      	mov	r3, r0
 8009572:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009574:	e012      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	3324      	adds	r3, #36	; 0x24
 800957a:	2101      	movs	r1, #1
 800957c:	4618      	mov	r0, r3
 800957e:	f001 fbf5 	bl	800ad6c <RCCEx_PLL3_Config>
 8009582:	4603      	mov	r3, r0
 8009584:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009586:	e009      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	75fb      	strb	r3, [r7, #23]
      break;
 800958c:	e006      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800958e:	bf00      	nop
 8009590:	e004      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009592:	bf00      	nop
 8009594:	e002      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009596:	bf00      	nop
 8009598:	e000      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800959a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d109      	bne.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80095a2:	4b5a      	ldr	r3, [pc, #360]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80095a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ae:	4957      	ldr	r1, [pc, #348]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80095b0:	4313      	orrs	r3, r2
 80095b2:	650b      	str	r3, [r1, #80]	; 0x50
 80095b4:	e001      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d044      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095d0:	d01b      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80095d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095d6:	d805      	bhi.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d022      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80095dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095e0:	d00a      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80095e2:	e01b      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80095e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095e8:	d01d      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80095ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095ee:	d01c      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80095f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095f4:	d01b      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80095f6:	e011      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	3304      	adds	r3, #4
 80095fc:	2101      	movs	r1, #1
 80095fe:	4618      	mov	r0, r3
 8009600:	f001 fb02 	bl	800ac08 <RCCEx_PLL2_Config>
 8009604:	4603      	mov	r3, r0
 8009606:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009608:	e012      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	3324      	adds	r3, #36	; 0x24
 800960e:	2101      	movs	r1, #1
 8009610:	4618      	mov	r0, r3
 8009612:	f001 fbab 	bl	800ad6c <RCCEx_PLL3_Config>
 8009616:	4603      	mov	r3, r0
 8009618:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800961a:	e009      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	75fb      	strb	r3, [r7, #23]
      break;
 8009620:	e006      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009622:	bf00      	nop
 8009624:	e004      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009626:	bf00      	nop
 8009628:	e002      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800962a:	bf00      	nop
 800962c:	e000      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800962e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009630:	7dfb      	ldrb	r3, [r7, #23]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10a      	bne.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009636:	4b35      	ldr	r3, [pc, #212]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009644:	4931      	ldr	r1, [pc, #196]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009646:	4313      	orrs	r3, r2
 8009648:	658b      	str	r3, [r1, #88]	; 0x58
 800964a:	e001      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800964c:	7dfb      	ldrb	r3, [r7, #23]
 800964e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d02d      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009660:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009664:	d005      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800966a:	d009      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800966c:	2b00      	cmp	r3, #0
 800966e:	d013      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009670:	e00f      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009672:	4b26      	ldr	r3, [pc, #152]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009676:	4a25      	ldr	r2, [pc, #148]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800967c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800967e:	e00c      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3304      	adds	r3, #4
 8009684:	2101      	movs	r1, #1
 8009686:	4618      	mov	r0, r3
 8009688:	f001 fabe 	bl	800ac08 <RCCEx_PLL2_Config>
 800968c:	4603      	mov	r3, r0
 800968e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009690:	e003      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	75fb      	strb	r3, [r7, #23]
      break;
 8009696:	e000      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8009698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800969a:	7dfb      	ldrb	r3, [r7, #23]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d109      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80096a0:	4b1a      	ldr	r3, [pc, #104]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ac:	4917      	ldr	r1, [pc, #92]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	650b      	str	r3, [r1, #80]	; 0x50
 80096b2:	e001      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
 80096b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d035      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c8:	2b03      	cmp	r3, #3
 80096ca:	d81b      	bhi.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80096cc:	a201      	add	r2, pc, #4	; (adr r2, 80096d4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80096ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d2:	bf00      	nop
 80096d4:	08009711 	.word	0x08009711
 80096d8:	080096e5 	.word	0x080096e5
 80096dc:	080096f3 	.word	0x080096f3
 80096e0:	08009711 	.word	0x08009711
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e4:	4b09      	ldr	r3, [pc, #36]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	4a08      	ldr	r2, [pc, #32]	; (800970c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80096f0:	e00f      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3304      	adds	r3, #4
 80096f6:	2102      	movs	r1, #2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 fa85 	bl	800ac08 <RCCEx_PLL2_Config>
 80096fe:	4603      	mov	r3, r0
 8009700:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009702:	e006      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	75fb      	strb	r3, [r7, #23]
      break;
 8009708:	e003      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800970a:	bf00      	nop
 800970c:	58024400 	.word	0x58024400
      break;
 8009710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009712:	7dfb      	ldrb	r3, [r7, #23]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d109      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009718:	4bba      	ldr	r3, [pc, #744]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800971a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800971c:	f023 0203 	bic.w	r2, r3, #3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009724:	49b7      	ldr	r1, [pc, #732]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009726:	4313      	orrs	r3, r2
 8009728:	64cb      	str	r3, [r1, #76]	; 0x4c
 800972a:	e001      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 8086 	beq.w	800984a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800973e:	4bb2      	ldr	r3, [pc, #712]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4ab1      	ldr	r2, [pc, #708]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009748:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800974a:	f7f9 fc75 	bl	8003038 <HAL_GetTick>
 800974e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009750:	e009      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009752:	f7f9 fc71 	bl	8003038 <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	2b64      	cmp	r3, #100	; 0x64
 800975e:	d902      	bls.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	75fb      	strb	r3, [r7, #23]
        break;
 8009764:	e005      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009766:	4ba8      	ldr	r3, [pc, #672]	; (8009a08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0ef      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d166      	bne.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009778:	4ba2      	ldr	r3, [pc, #648]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800977a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009782:	4053      	eors	r3, r2
 8009784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009788:	2b00      	cmp	r3, #0
 800978a:	d013      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800978c:	4b9d      	ldr	r3, [pc, #628]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800978e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009794:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009796:	4b9b      	ldr	r3, [pc, #620]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979a:	4a9a      	ldr	r2, [pc, #616]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800979c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097a2:	4b98      	ldr	r3, [pc, #608]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80097a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a6:	4a97      	ldr	r2, [pc, #604]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80097a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80097ae:	4a95      	ldr	r2, [pc, #596]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097be:	d115      	bne.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c0:	f7f9 fc3a 	bl	8003038 <HAL_GetTick>
 80097c4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097c6:	e00b      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097c8:	f7f9 fc36 	bl	8003038 <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d902      	bls.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	75fb      	strb	r3, [r7, #23]
            break;
 80097de:	e005      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097e0:	4b88      	ldr	r3, [pc, #544]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80097e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e4:	f003 0302 	and.w	r3, r3, #2
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d0ed      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d126      	bne.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009800:	d10d      	bne.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009802:	4b80      	ldr	r3, [pc, #512]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009810:	0919      	lsrs	r1, r3, #4
 8009812:	4b7e      	ldr	r3, [pc, #504]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009814:	400b      	ands	r3, r1
 8009816:	497b      	ldr	r1, [pc, #492]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009818:	4313      	orrs	r3, r2
 800981a:	610b      	str	r3, [r1, #16]
 800981c:	e005      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800981e:	4b79      	ldr	r3, [pc, #484]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	4a78      	ldr	r2, [pc, #480]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009824:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009828:	6113      	str	r3, [r2, #16]
 800982a:	4b76      	ldr	r3, [pc, #472]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800982c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009838:	4972      	ldr	r1, [pc, #456]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800983a:	4313      	orrs	r3, r2
 800983c:	670b      	str	r3, [r1, #112]	; 0x70
 800983e:	e004      	b.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	75bb      	strb	r3, [r7, #22]
 8009844:	e001      	b.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009846:	7dfb      	ldrb	r3, [r7, #23]
 8009848:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d07d      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800985a:	2b28      	cmp	r3, #40	; 0x28
 800985c:	d866      	bhi.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800985e:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	08009933 	.word	0x08009933
 8009868:	0800992d 	.word	0x0800992d
 800986c:	0800992d 	.word	0x0800992d
 8009870:	0800992d 	.word	0x0800992d
 8009874:	0800992d 	.word	0x0800992d
 8009878:	0800992d 	.word	0x0800992d
 800987c:	0800992d 	.word	0x0800992d
 8009880:	0800992d 	.word	0x0800992d
 8009884:	08009909 	.word	0x08009909
 8009888:	0800992d 	.word	0x0800992d
 800988c:	0800992d 	.word	0x0800992d
 8009890:	0800992d 	.word	0x0800992d
 8009894:	0800992d 	.word	0x0800992d
 8009898:	0800992d 	.word	0x0800992d
 800989c:	0800992d 	.word	0x0800992d
 80098a0:	0800992d 	.word	0x0800992d
 80098a4:	0800991b 	.word	0x0800991b
 80098a8:	0800992d 	.word	0x0800992d
 80098ac:	0800992d 	.word	0x0800992d
 80098b0:	0800992d 	.word	0x0800992d
 80098b4:	0800992d 	.word	0x0800992d
 80098b8:	0800992d 	.word	0x0800992d
 80098bc:	0800992d 	.word	0x0800992d
 80098c0:	0800992d 	.word	0x0800992d
 80098c4:	08009933 	.word	0x08009933
 80098c8:	0800992d 	.word	0x0800992d
 80098cc:	0800992d 	.word	0x0800992d
 80098d0:	0800992d 	.word	0x0800992d
 80098d4:	0800992d 	.word	0x0800992d
 80098d8:	0800992d 	.word	0x0800992d
 80098dc:	0800992d 	.word	0x0800992d
 80098e0:	0800992d 	.word	0x0800992d
 80098e4:	08009933 	.word	0x08009933
 80098e8:	0800992d 	.word	0x0800992d
 80098ec:	0800992d 	.word	0x0800992d
 80098f0:	0800992d 	.word	0x0800992d
 80098f4:	0800992d 	.word	0x0800992d
 80098f8:	0800992d 	.word	0x0800992d
 80098fc:	0800992d 	.word	0x0800992d
 8009900:	0800992d 	.word	0x0800992d
 8009904:	08009933 	.word	0x08009933
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3304      	adds	r3, #4
 800990c:	2101      	movs	r1, #1
 800990e:	4618      	mov	r0, r3
 8009910:	f001 f97a 	bl	800ac08 <RCCEx_PLL2_Config>
 8009914:	4603      	mov	r3, r0
 8009916:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009918:	e00c      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	3324      	adds	r3, #36	; 0x24
 800991e:	2101      	movs	r1, #1
 8009920:	4618      	mov	r0, r3
 8009922:	f001 fa23 	bl	800ad6c <RCCEx_PLL3_Config>
 8009926:	4603      	mov	r3, r0
 8009928:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800992a:	e003      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	75fb      	strb	r3, [r7, #23]
      break;
 8009930:	e000      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8009932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009934:	7dfb      	ldrb	r3, [r7, #23]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d109      	bne.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800993a:	4b32      	ldr	r3, [pc, #200]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800993c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009946:	492f      	ldr	r1, [pc, #188]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009948:	4313      	orrs	r3, r2
 800994a:	654b      	str	r3, [r1, #84]	; 0x54
 800994c:	e001      	b.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800994e:	7dfb      	ldrb	r3, [r7, #23]
 8009950:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0302 	and.w	r3, r3, #2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d037      	beq.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009962:	2b05      	cmp	r3, #5
 8009964:	d820      	bhi.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8009966:	a201      	add	r2, pc, #4	; (adr r2, 800996c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996c:	080099af 	.word	0x080099af
 8009970:	08009985 	.word	0x08009985
 8009974:	08009997 	.word	0x08009997
 8009978:	080099af 	.word	0x080099af
 800997c:	080099af 	.word	0x080099af
 8009980:	080099af 	.word	0x080099af
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3304      	adds	r3, #4
 8009988:	2101      	movs	r1, #1
 800998a:	4618      	mov	r0, r3
 800998c:	f001 f93c 	bl	800ac08 <RCCEx_PLL2_Config>
 8009990:	4603      	mov	r3, r0
 8009992:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009994:	e00c      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3324      	adds	r3, #36	; 0x24
 800999a:	2101      	movs	r1, #1
 800999c:	4618      	mov	r0, r3
 800999e:	f001 f9e5 	bl	800ad6c <RCCEx_PLL3_Config>
 80099a2:	4603      	mov	r3, r0
 80099a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80099a6:	e003      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	75fb      	strb	r3, [r7, #23]
      break;
 80099ac:	e000      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80099ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099b0:	7dfb      	ldrb	r3, [r7, #23]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d109      	bne.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80099b6:	4b13      	ldr	r3, [pc, #76]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ba:	f023 0207 	bic.w	r2, r3, #7
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099c2:	4910      	ldr	r1, [pc, #64]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	654b      	str	r3, [r1, #84]	; 0x54
 80099c8:	e001      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 0304 	and.w	r3, r3, #4
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d040      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099e0:	2b05      	cmp	r3, #5
 80099e2:	d827      	bhi.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80099e4:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	08009a3b 	.word	0x08009a3b
 80099f0:	08009a11 	.word	0x08009a11
 80099f4:	08009a23 	.word	0x08009a23
 80099f8:	08009a3b 	.word	0x08009a3b
 80099fc:	08009a3b 	.word	0x08009a3b
 8009a00:	08009a3b 	.word	0x08009a3b
 8009a04:	58024400 	.word	0x58024400
 8009a08:	58024800 	.word	0x58024800
 8009a0c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	3304      	adds	r3, #4
 8009a14:	2101      	movs	r1, #1
 8009a16:	4618      	mov	r0, r3
 8009a18:	f001 f8f6 	bl	800ac08 <RCCEx_PLL2_Config>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009a20:	e00c      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3324      	adds	r3, #36	; 0x24
 8009a26:	2101      	movs	r1, #1
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f001 f99f 	bl	800ad6c <RCCEx_PLL3_Config>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009a32:	e003      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	75fb      	strb	r3, [r7, #23]
      break;
 8009a38:	e000      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a3c:	7dfb      	ldrb	r3, [r7, #23]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10a      	bne.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a42:	4bb2      	ldr	r3, [pc, #712]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a46:	f023 0207 	bic.w	r2, r3, #7
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a50:	49ae      	ldr	r1, [pc, #696]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009a52:	4313      	orrs	r3, r2
 8009a54:	658b      	str	r3, [r1, #88]	; 0x58
 8009a56:	e001      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a58:	7dfb      	ldrb	r3, [r7, #23]
 8009a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 0320 	and.w	r3, r3, #32
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d044      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a72:	d01b      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a78:	d805      	bhi.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d022      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a82:	d00a      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009a84:	e01b      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a8a:	d01d      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a90:	d01c      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x984>
 8009a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a96:	d01b      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8009a98:	e011      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f001 f8b1 	bl	800ac08 <RCCEx_PLL2_Config>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009aaa:	e012      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	3324      	adds	r3, #36	; 0x24
 8009ab0:	2102      	movs	r1, #2
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f001 f95a 	bl	800ad6c <RCCEx_PLL3_Config>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009abc:	e009      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac2:	e006      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009ac4:	bf00      	nop
 8009ac6:	e004      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009ac8:	bf00      	nop
 8009aca:	e002      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009acc:	bf00      	nop
 8009ace:	e000      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ad8:	4b8c      	ldr	r3, [pc, #560]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009adc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ae6:	4989      	ldr	r1, [pc, #548]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	654b      	str	r3, [r1, #84]	; 0x54
 8009aec:	e001      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
 8009af0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d044      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b08:	d01b      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8009b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b0e:	d805      	bhi.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d022      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b18:	d00a      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8009b1a:	e01b      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8009b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b20:	d01d      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8009b22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009b26:	d01c      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8009b28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b2c:	d01b      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8009b2e:	e011      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3304      	adds	r3, #4
 8009b34:	2100      	movs	r1, #0
 8009b36:	4618      	mov	r0, r3
 8009b38:	f001 f866 	bl	800ac08 <RCCEx_PLL2_Config>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009b40:	e012      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3324      	adds	r3, #36	; 0x24
 8009b46:	2102      	movs	r1, #2
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f001 f90f 	bl	800ad6c <RCCEx_PLL3_Config>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009b52:	e009      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	75fb      	strb	r3, [r7, #23]
      break;
 8009b58:	e006      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009b5a:	bf00      	nop
 8009b5c:	e004      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009b5e:	bf00      	nop
 8009b60:	e002      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009b62:	bf00      	nop
 8009b64:	e000      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b68:	7dfb      	ldrb	r3, [r7, #23]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10a      	bne.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009b6e:	4b67      	ldr	r3, [pc, #412]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b7c:	4963      	ldr	r1, [pc, #396]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	658b      	str	r3, [r1, #88]	; 0x58
 8009b82:	e001      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
 8009b86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d044      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b9e:	d01b      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8009ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ba4:	d805      	bhi.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d022      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bae:	d00a      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009bb0:	e01b      	b.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8009bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bb6:	d01d      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009bb8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009bbc:	d01c      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8009bbe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009bc2:	d01b      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8009bc4:	e011      	b.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	2100      	movs	r1, #0
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f001 f81b 	bl	800ac08 <RCCEx_PLL2_Config>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009bd6:	e012      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	3324      	adds	r3, #36	; 0x24
 8009bdc:	2102      	movs	r1, #2
 8009bde:	4618      	mov	r0, r3
 8009be0:	f001 f8c4 	bl	800ad6c <RCCEx_PLL3_Config>
 8009be4:	4603      	mov	r3, r0
 8009be6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009be8:	e009      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	75fb      	strb	r3, [r7, #23]
      break;
 8009bee:	e006      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009bf0:	bf00      	nop
 8009bf2:	e004      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009bf4:	bf00      	nop
 8009bf6:	e002      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009bf8:	bf00      	nop
 8009bfa:	e000      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10a      	bne.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009c04:	4b41      	ldr	r3, [pc, #260]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c12:	493e      	ldr	r1, [pc, #248]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	658b      	str	r3, [r1, #88]	; 0x58
 8009c18:	e001      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0308 	and.w	r3, r3, #8
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d01a      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c34:	d10a      	bne.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3324      	adds	r3, #36	; 0x24
 8009c3a:	2102      	movs	r1, #2
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f001 f895 	bl	800ad6c <RCCEx_PLL3_Config>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009c4c:	4b2f      	ldr	r3, [pc, #188]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c5a:	492c      	ldr	r1, [pc, #176]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 0310 	and.w	r3, r3, #16
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d01a      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c76:	d10a      	bne.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3324      	adds	r3, #36	; 0x24
 8009c7c:	2102      	movs	r1, #2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f001 f874 	bl	800ad6c <RCCEx_PLL3_Config>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c8e:	4b1f      	ldr	r3, [pc, #124]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c9c:	491b      	ldr	r1, [pc, #108]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d032      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb8:	d00d      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8009cba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cbe:	d016      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d111      	bne.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	2100      	movs	r1, #0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 ff9c 	bl	800ac08 <RCCEx_PLL2_Config>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009cd4:	e00c      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3324      	adds	r3, #36	; 0x24
 8009cda:	2102      	movs	r1, #2
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f001 f845 	bl	800ad6c <RCCEx_PLL3_Config>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ce6:	e003      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	75fb      	strb	r3, [r7, #23]
      break;
 8009cec:	e000      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8009cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10c      	bne.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009cf6:	4b05      	ldr	r3, [pc, #20]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d04:	4901      	ldr	r1, [pc, #4]	; (8009d0c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	658b      	str	r3, [r1, #88]	; 0x58
 8009d0a:	e003      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8009d0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
 8009d12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d02f      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d2a:	d00c      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009d2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d30:	d015      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8009d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d36:	d10f      	bne.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d38:	4b79      	ldr	r3, [pc, #484]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3c:	4a78      	ldr	r2, [pc, #480]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009d44:	e00c      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	3324      	adds	r3, #36	; 0x24
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f001 f80d 	bl	800ad6c <RCCEx_PLL3_Config>
 8009d52:	4603      	mov	r3, r0
 8009d54:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009d56:	e003      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d5c:	e000      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d60:	7dfb      	ldrb	r3, [r7, #23]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10a      	bne.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d66:	4b6e      	ldr	r3, [pc, #440]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d74:	496a      	ldr	r1, [pc, #424]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	654b      	str	r3, [r1, #84]	; 0x54
 8009d7a:	e001      	b.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d029      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8009d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d98:	d007      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009d9a:	e00f      	b.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d9c:	4b60      	ldr	r3, [pc, #384]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da0:	4a5f      	ldr	r2, [pc, #380]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009da6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009da8:	e00b      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	3304      	adds	r3, #4
 8009dae:	2102      	movs	r1, #2
 8009db0:	4618      	mov	r0, r3
 8009db2:	f000 ff29 	bl	800ac08 <RCCEx_PLL2_Config>
 8009db6:	4603      	mov	r3, r0
 8009db8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009dba:	e002      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d109      	bne.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009dc8:	4b55      	ldr	r3, [pc, #340]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dd4:	4952      	ldr	r1, [pc, #328]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009dda:	e001      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ddc:	7dfb      	ldrb	r3, [r7, #23]
 8009dde:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00a      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	3324      	adds	r3, #36	; 0x24
 8009df0:	2102      	movs	r1, #2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 ffba 	bl	800ad6c <RCCEx_PLL3_Config>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d02f      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e16:	d00c      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e1c:	d802      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d011      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8009e22:	e00d      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8009e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e28:	d00f      	beq.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8009e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e2e:	d00e      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8009e30:	e006      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e32:	4b3b      	ldr	r3, [pc, #236]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e36:	4a3a      	ldr	r2, [pc, #232]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009e3e:	e007      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	75fb      	strb	r3, [r7, #23]
      break;
 8009e44:	e004      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009e46:	bf00      	nop
 8009e48:	e002      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009e4a:	bf00      	nop
 8009e4c:	e000      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d109      	bne.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e56:	4b32      	ldr	r3, [pc, #200]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e62:	492f      	ldr	r1, [pc, #188]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009e64:	4313      	orrs	r3, r2
 8009e66:	654b      	str	r3, [r1, #84]	; 0x54
 8009e68:	e001      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e6a:	7dfb      	ldrb	r3, [r7, #23]
 8009e6c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d008      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e7a:	4b29      	ldr	r3, [pc, #164]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e86:	4926      	ldr	r1, [pc, #152]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d009      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009e98:	4b21      	ldr	r3, [pc, #132]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ea6:	491e      	ldr	r1, [pc, #120]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d008      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009eb8:	4b19      	ldr	r3, [pc, #100]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ebc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ec4:	4916      	ldr	r1, [pc, #88]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00d      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009ed6:	4b12      	ldr	r3, [pc, #72]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	4a11      	ldr	r2, [pc, #68]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009edc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ee0:	6113      	str	r3, [r2, #16]
 8009ee2:	4b0f      	ldr	r3, [pc, #60]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009ee4:	691a      	ldr	r2, [r3, #16]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009eec:	490c      	ldr	r1, [pc, #48]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	da08      	bge.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009efe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f06:	4906      	ldr	r1, [pc, #24]	; (8009f20 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8009f0c:	7dbb      	ldrb	r3, [r7, #22]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	e000      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	58024400 	.word	0x58024400

08009f24 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b090      	sub	sp, #64	; 0x40
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f32:	d150      	bne.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009f34:	4ba1      	ldr	r3, [pc, #644]	; (800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f38:	f003 0307 	and.w	r3, r3, #7
 8009f3c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	d844      	bhi.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009f44:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8009f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4a:	bf00      	nop
 8009f4c:	08009f61 	.word	0x08009f61
 8009f50:	08009f71 	.word	0x08009f71
 8009f54:	08009f81 	.word	0x08009f81
 8009f58:	08009fc9 	.word	0x08009fc9
 8009f5c:	08009f91 	.word	0x08009f91
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 fd03 	bl	800a970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f6e:	e241      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f70:	f107 0318 	add.w	r3, r7, #24
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 fa63 	bl	800a440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f7e:	e239      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f80:	f107 030c 	add.w	r3, r7, #12
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 fba7 	bl	800a6d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f8e:	e231      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f90:	4b8a      	ldr	r3, [pc, #552]	; (800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f98:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d102      	bne.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009fa0:	4b87      	ldr	r3, [pc, #540]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009fa4:	e226      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fac:	d102      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8009fae:	4b85      	ldr	r3, [pc, #532]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fb2:	e21f      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fba:	d102      	bne.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8009fbc:	4b82      	ldr	r3, [pc, #520]	; (800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fc0:	e218      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fc6:	e215      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009fc8:	4b80      	ldr	r3, [pc, #512]	; (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fcc:	e212      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fd2:	bf00      	nop
 8009fd4:	e20e      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fdc:	d14f      	bne.n	800a07e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009fde:	4b77      	ldr	r3, [pc, #476]	; (800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fe2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009fe6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	2b80      	cmp	r3, #128	; 0x80
 8009fec:	d01c      	beq.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009fee:	2b80      	cmp	r3, #128	; 0x80
 8009ff0:	d804      	bhi.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d008      	beq.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8009ff6:	2b40      	cmp	r3, #64	; 0x40
 8009ff8:	d00e      	beq.n	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009ffa:	e03c      	b.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8009ffc:	2bc0      	cmp	r3, #192	; 0xc0
 8009ffe:	d037      	beq.n	800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a004:	d018      	beq.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800a006:	e036      	b.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 fcaf 	bl	800a970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a016:	e1ed      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a018:	f107 0318 	add.w	r3, r7, #24
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 fa0f 	bl	800a440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a026:	e1e5      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a028:	f107 030c 	add.w	r3, r7, #12
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 fb53 	bl	800a6d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a036:	e1dd      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a038:	4b60      	ldr	r3, [pc, #384]	; (800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a03a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a03c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a040:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a044:	2b00      	cmp	r3, #0
 800a046:	d102      	bne.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a048:	4b5d      	ldr	r3, [pc, #372]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a04a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a04c:	e1d2      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a050:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a054:	d102      	bne.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800a056:	4b5b      	ldr	r3, [pc, #364]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a058:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a05a:	e1cb      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a062:	d102      	bne.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800a064:	4b58      	ldr	r3, [pc, #352]	; (800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a068:	e1c4      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a06e:	e1c1      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a070:	4b56      	ldr	r3, [pc, #344]	; (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a074:	e1be      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a07a:	bf00      	nop
 800a07c:	e1ba      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a084:	d153      	bne.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a086:	4b4d      	ldr	r3, [pc, #308]	; (800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a08a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a08e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a096:	d01f      	beq.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a09c:	d805      	bhi.n	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00a      	beq.n	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800a0a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0a6:	d00f      	beq.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800a0a8:	e03d      	b.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800a0aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a0ae:	d037      	beq.n	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a0b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a0b4:	d018      	beq.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800a0b6:	e036      	b.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 fc57 	bl	800a970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0c6:	e195      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0c8:	f107 0318 	add.w	r3, r7, #24
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 f9b7 	bl	800a440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0d6:	e18d      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0d8:	f107 030c 	add.w	r3, r7, #12
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 fafb 	bl	800a6d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0e6:	e185      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a0e8:	4b34      	ldr	r3, [pc, #208]	; (800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0f0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d102      	bne.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a0f8:	4b31      	ldr	r3, [pc, #196]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a0fc:	e17a      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a104:	d102      	bne.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800a106:	4b2f      	ldr	r3, [pc, #188]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a108:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a10a:	e173      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a112:	d102      	bne.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800a114:	4b2c      	ldr	r3, [pc, #176]	; (800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a116:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a118:	e16c      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a11e:	e169      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a120:	4b2a      	ldr	r3, [pc, #168]	; (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a122:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a124:	e166      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a12a:	bf00      	nop
 800a12c:	e162      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a134:	d15d      	bne.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a136:	4b21      	ldr	r3, [pc, #132]	; (800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a13a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a13e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a146:	d01f      	beq.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a14c:	d805      	bhi.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00a      	beq.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a152:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a156:	d00f      	beq.n	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800a158:	e047      	b.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800a15a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a15e:	d041      	beq.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800a160:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a164:	d018      	beq.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800a166:	e040      	b.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 fbff 	bl	800a970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a176:	e13d      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a178:	f107 0318 	add.w	r3, r7, #24
 800a17c:	4618      	mov	r0, r3
 800a17e:	f000 f95f 	bl	800a440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a186:	e135      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a188:	f107 030c 	add.w	r3, r7, #12
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 faa3 	bl	800a6d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a196:	e12d      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a198:	4b08      	ldr	r3, [pc, #32]	; (800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a19a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a19c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1a0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d102      	bne.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a1a8:	4b05      	ldr	r3, [pc, #20]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a1ac:	e122      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1b4:	d10c      	bne.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800a1b6:	4b03      	ldr	r3, [pc, #12]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1ba:	e11b      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a1bc:	58024400 	.word	0x58024400
 800a1c0:	03d09000 	.word	0x03d09000
 800a1c4:	003d0900 	.word	0x003d0900
 800a1c8:	017d7840 	.word	0x017d7840
 800a1cc:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1d6:	d102      	bne.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800a1d8:	4b89      	ldr	r3, [pc, #548]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a1da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1dc:	e10a      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1e2:	e107      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a1e4:	4b87      	ldr	r3, [pc, #540]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1e8:	e104      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1ee:	bf00      	nop
 800a1f0:	e100      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1f8:	d153      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a1fa:	4b83      	ldr	r3, [pc, #524]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a1fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1fe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a202:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a20a:	d01f      	beq.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a20c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a210:	d805      	bhi.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00a      	beq.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800a216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a21a:	d00f      	beq.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800a21c:	e03d      	b.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800a21e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a222:	d037      	beq.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800a224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a228:	d018      	beq.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a22a:	e036      	b.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a22c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a230:	4618      	mov	r0, r3
 800a232:	f000 fb9d 	bl	800a970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a23a:	e0db      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a23c:	f107 0318 	add.w	r3, r7, #24
 800a240:	4618      	mov	r0, r3
 800a242:	f000 f8fd 	bl	800a440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a24a:	e0d3      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a24c:	f107 030c 	add.w	r3, r7, #12
 800a250:	4618      	mov	r0, r3
 800a252:	f000 fa41 	bl	800a6d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a25a:	e0cb      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a25c:	4b6a      	ldr	r3, [pc, #424]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a25e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a260:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a264:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d102      	bne.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a26c:	4b67      	ldr	r3, [pc, #412]	; (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a26e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a270:	e0c0      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a274:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a278:	d102      	bne.n	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800a27a:	4b65      	ldr	r3, [pc, #404]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a27c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a27e:	e0b9      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a286:	d102      	bne.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800a288:	4b5d      	ldr	r3, [pc, #372]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a28c:	e0b2      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a292:	e0af      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a294:	4b5b      	ldr	r3, [pc, #364]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a298:	e0ac      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a29e:	bf00      	nop
 800a2a0:	e0a8      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a2a8:	d13d      	bne.n	800a326 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a2aa:	4b57      	ldr	r3, [pc, #348]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a2b2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ba:	d00c      	beq.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a2bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2c0:	d011      	beq.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d12b      	bne.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2c6:	f107 0318 	add.w	r3, r7, #24
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 f8b8 	bl	800a440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2d4:	e08e      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2d6:	f107 030c 	add.w	r3, r7, #12
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 f9fc 	bl	800a6d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2e4:	e086      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a2e6:	4b48      	ldr	r3, [pc, #288]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a2e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a2ee:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d102      	bne.n	800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a2f6:	4b45      	ldr	r3, [pc, #276]	; (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a2fa:	e07b      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a302:	d102      	bne.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800a304:	4b42      	ldr	r3, [pc, #264]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a306:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a308:	e074      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a30c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a310:	d102      	bne.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800a312:	4b3b      	ldr	r3, [pc, #236]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a314:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a316:	e06d      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a318:	2300      	movs	r3, #0
 800a31a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a31c:	e06a      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a322:	bf00      	nop
 800a324:	e066      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a32c:	d11f      	bne.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a32e:	4b36      	ldr	r3, [pc, #216]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a336:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a33e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a342:	d008      	beq.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800a344:	e00f      	b.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 fb10 	bl	800a970 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a354:	e04e      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a356:	f107 0318 	add.w	r3, r7, #24
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 f870 	bl	800a440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a360:	6a3b      	ldr	r3, [r7, #32]
 800a362:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a364:	e046      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a36a:	bf00      	nop
 800a36c:	e042      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a374:	d13c      	bne.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a376:	4b24      	ldr	r3, [pc, #144]	; (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a37a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a37e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a386:	d01e      	beq.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800a388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a38c:	d805      	bhi.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00d      	beq.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a392:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a396:	d00e      	beq.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800a398:	e026      	b.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800a39a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a39e:	d01d      	beq.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800a3a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3a4:	d01d      	beq.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a3a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a3aa:	d014      	beq.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a3ac:	e01c      	b.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a3ae:	f000 f831 	bl	800a414 <HAL_RCCEx_GetD3PCLK1Freq>
 800a3b2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a3b4:	e01e      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3b6:	f107 0318 	add.w	r3, r7, #24
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 f840 	bl	800a440 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3c4:	e016      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3c6:	f107 030c 	add.w	r3, r7, #12
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 f984 	bl	800a6d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3d4:	e00e      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800a3d6:	4b0d      	ldr	r3, [pc, #52]	; (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3da:	e00b      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800a3dc:	4b0c      	ldr	r3, [pc, #48]	; (800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a3de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3e0:	e008      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800a3e2:	4b07      	ldr	r3, [pc, #28]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3e6:	e005      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3ec:	bf00      	nop
 800a3ee:	e001      	b.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3740      	adds	r7, #64	; 0x40
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	017d7840 	.word	0x017d7840
 800a404:	00bb8000 	.word	0x00bb8000
 800a408:	58024400 	.word	0x58024400
 800a40c:	03d09000 	.word	0x03d09000
 800a410:	003d0900 	.word	0x003d0900

0800a414 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a418:	f7fe fe1e 	bl	8009058 <HAL_RCC_GetHCLKFreq>
 800a41c:	4601      	mov	r1, r0
 800a41e:	4b06      	ldr	r3, [pc, #24]	; (800a438 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	091b      	lsrs	r3, r3, #4
 800a424:	f003 0307 	and.w	r3, r3, #7
 800a428:	4a04      	ldr	r2, [pc, #16]	; (800a43c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a42a:	5cd3      	ldrb	r3, [r2, r3]
 800a42c:	f003 031f 	and.w	r3, r3, #31
 800a430:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a434:	4618      	mov	r0, r3
 800a436:	bd80      	pop	{r7, pc}
 800a438:	58024400 	.word	0x58024400
 800a43c:	080197a8 	.word	0x080197a8

0800a440 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a440:	b480      	push	{r7}
 800a442:	b089      	sub	sp, #36	; 0x24
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a448:	4b9d      	ldr	r3, [pc, #628]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44c:	f003 0303 	and.w	r3, r3, #3
 800a450:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a452:	4b9b      	ldr	r3, [pc, #620]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a456:	0b1b      	lsrs	r3, r3, #12
 800a458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a45c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a45e:	4b98      	ldr	r3, [pc, #608]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a462:	091b      	lsrs	r3, r3, #4
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a46a:	4b95      	ldr	r3, [pc, #596]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46e:	08db      	lsrs	r3, r3, #3
 800a470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	fb02 f303 	mul.w	r3, r2, r3
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a482:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 810a 	beq.w	800a6a2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d05a      	beq.n	800a54a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800a494:	2b01      	cmp	r3, #1
 800a496:	d302      	bcc.n	800a49e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d078      	beq.n	800a58e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800a49c:	e099      	b.n	800a5d2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a49e:	4b88      	ldr	r3, [pc, #544]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0320 	and.w	r3, r3, #32
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d02d      	beq.n	800a506 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4aa:	4b85      	ldr	r3, [pc, #532]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	08db      	lsrs	r3, r3, #3
 800a4b0:	f003 0303 	and.w	r3, r3, #3
 800a4b4:	4a83      	ldr	r2, [pc, #524]	; (800a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800a4b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ba:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	ee07 3a90 	vmov	s15, r3
 800a4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	ee07 3a90 	vmov	s15, r3
 800a4cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4d4:	4b7a      	ldr	r3, [pc, #488]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4dc:	ee07 3a90 	vmov	s15, r3
 800a4e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a4ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a500:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a504:	e087      	b.n	800a616 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	ee07 3a90 	vmov	s15, r3
 800a50c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a510:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a6cc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800a514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a518:	4b69      	ldr	r3, [pc, #420]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a520:	ee07 3a90 	vmov	s15, r3
 800a524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a528:	ed97 6a03 	vldr	s12, [r7, #12]
 800a52c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a53c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a540:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a544:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a548:	e065      	b.n	800a616 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	ee07 3a90 	vmov	s15, r3
 800a550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a554:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a55c:	4b58      	ldr	r3, [pc, #352]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a564:	ee07 3a90 	vmov	s15, r3
 800a568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a56c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a570:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a57c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a584:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a588:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a58c:	e043      	b.n	800a616 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	ee07 3a90 	vmov	s15, r3
 800a594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a598:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a6d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800a59c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5a0:	4b47      	ldr	r3, [pc, #284]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a8:	ee07 3a90 	vmov	s15, r3
 800a5ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a5b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5d0:	e021      	b.n	800a616 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	ee07 3a90 	vmov	s15, r3
 800a5d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5dc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a5e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5e4:	4b36      	ldr	r3, [pc, #216]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ec:	ee07 3a90 	vmov	s15, r3
 800a5f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a5fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a60c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a610:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a614:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a616:	4b2a      	ldr	r3, [pc, #168]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61a:	0a5b      	lsrs	r3, r3, #9
 800a61c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a620:	ee07 3a90 	vmov	s15, r3
 800a624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a628:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a62c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a630:	edd7 6a07 	vldr	s13, [r7, #28]
 800a634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a63c:	ee17 2a90 	vmov	r2, s15
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a644:	4b1e      	ldr	r3, [pc, #120]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a648:	0c1b      	lsrs	r3, r3, #16
 800a64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a65a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a65e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a66a:	ee17 2a90 	vmov	r2, s15
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a672:	4b13      	ldr	r3, [pc, #76]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a676:	0e1b      	lsrs	r3, r3, #24
 800a678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a67c:	ee07 3a90 	vmov	s15, r3
 800a680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a68c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a698:	ee17 2a90 	vmov	r2, s15
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a6a0:	e008      	b.n	800a6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	609a      	str	r2, [r3, #8]
}
 800a6b4:	bf00      	nop
 800a6b6:	3724      	adds	r7, #36	; 0x24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	58024400 	.word	0x58024400
 800a6c4:	03d09000 	.word	0x03d09000
 800a6c8:	46000000 	.word	0x46000000
 800a6cc:	4c742400 	.word	0x4c742400
 800a6d0:	4a742400 	.word	0x4a742400
 800a6d4:	4bbebc20 	.word	0x4bbebc20

0800a6d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b089      	sub	sp, #36	; 0x24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6e0:	4b9d      	ldr	r3, [pc, #628]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e4:	f003 0303 	and.w	r3, r3, #3
 800a6e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a6ea:	4b9b      	ldr	r3, [pc, #620]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ee:	0d1b      	lsrs	r3, r3, #20
 800a6f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a6f6:	4b98      	ldr	r3, [pc, #608]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fa:	0a1b      	lsrs	r3, r3, #8
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a702:	4b95      	ldr	r3, [pc, #596]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a706:	08db      	lsrs	r3, r3, #3
 800a708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	fb02 f303 	mul.w	r3, r2, r3
 800a712:	ee07 3a90 	vmov	s15, r3
 800a716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 810a 	beq.w	800a93a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d05a      	beq.n	800a7e2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d302      	bcc.n	800a736 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800a730:	2b02      	cmp	r3, #2
 800a732:	d078      	beq.n	800a826 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800a734:	e099      	b.n	800a86a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a736:	4b88      	ldr	r3, [pc, #544]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0320 	and.w	r3, r3, #32
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d02d      	beq.n	800a79e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a742:	4b85      	ldr	r3, [pc, #532]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	08db      	lsrs	r3, r3, #3
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	4a83      	ldr	r2, [pc, #524]	; (800a95c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800a74e:	fa22 f303 	lsr.w	r3, r2, r3
 800a752:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	ee07 3a90 	vmov	s15, r3
 800a75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	ee07 3a90 	vmov	s15, r3
 800a764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a76c:	4b7a      	ldr	r3, [pc, #488]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a774:	ee07 3a90 	vmov	s15, r3
 800a778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a77c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a780:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a960 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a78c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a794:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a798:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a79c:	e087      	b.n	800a8ae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	ee07 3a90 	vmov	s15, r3
 800a7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800a7ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7b0:	4b69      	ldr	r3, [pc, #420]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7b8:	ee07 3a90 	vmov	s15, r3
 800a7bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7c4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a960 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a7c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7e0:	e065      	b.n	800a8ae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	ee07 3a90 	vmov	s15, r3
 800a7e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a7f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7f4:	4b58      	ldr	r3, [pc, #352]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7fc:	ee07 3a90 	vmov	s15, r3
 800a800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a804:	ed97 6a03 	vldr	s12, [r7, #12]
 800a808:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a960 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a80c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a81c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a820:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a824:	e043      	b.n	800a8ae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	ee07 3a90 	vmov	s15, r3
 800a82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a830:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a96c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800a834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a838:	4b47      	ldr	r3, [pc, #284]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a840:	ee07 3a90 	vmov	s15, r3
 800a844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a848:	ed97 6a03 	vldr	s12, [r7, #12]
 800a84c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a960 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a858:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a85c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a860:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a864:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a868:	e021      	b.n	800a8ae <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	ee07 3a90 	vmov	s15, r3
 800a870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a874:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a87c:	4b36      	ldr	r3, [pc, #216]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a884:	ee07 3a90 	vmov	s15, r3
 800a888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a88c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a890:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a960 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a89c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8ac:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a8ae:	4b2a      	ldr	r3, [pc, #168]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b2:	0a5b      	lsrs	r3, r3, #9
 800a8b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8b8:	ee07 3a90 	vmov	s15, r3
 800a8bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8d4:	ee17 2a90 	vmov	r2, s15
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a8dc:	4b1e      	ldr	r3, [pc, #120]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e0:	0c1b      	lsrs	r3, r3, #16
 800a8e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8e6:	ee07 3a90 	vmov	s15, r3
 800a8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a902:	ee17 2a90 	vmov	r2, s15
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a90a:	4b13      	ldr	r3, [pc, #76]	; (800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90e:	0e1b      	lsrs	r3, r3, #24
 800a910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a914:	ee07 3a90 	vmov	s15, r3
 800a918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a91c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a920:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a924:	edd7 6a07 	vldr	s13, [r7, #28]
 800a928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a92c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a930:	ee17 2a90 	vmov	r2, s15
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a938:	e008      	b.n	800a94c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	609a      	str	r2, [r3, #8]
}
 800a94c:	bf00      	nop
 800a94e:	3724      	adds	r7, #36	; 0x24
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	58024400 	.word	0x58024400
 800a95c:	03d09000 	.word	0x03d09000
 800a960:	46000000 	.word	0x46000000
 800a964:	4c742400 	.word	0x4c742400
 800a968:	4a742400 	.word	0x4a742400
 800a96c:	4bbebc20 	.word	0x4bbebc20

0800a970 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a970:	b480      	push	{r7}
 800a972:	b089      	sub	sp, #36	; 0x24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a978:	4b9d      	ldr	r3, [pc, #628]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97c:	f003 0303 	and.w	r3, r3, #3
 800a980:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a982:	4b9b      	ldr	r3, [pc, #620]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a986:	091b      	lsrs	r3, r3, #4
 800a988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a98c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a98e:	4b98      	ldr	r3, [pc, #608]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a998:	4b95      	ldr	r3, [pc, #596]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a99c:	08db      	lsrs	r3, r3, #3
 800a99e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9a2:	693a      	ldr	r2, [r7, #16]
 800a9a4:	fb02 f303 	mul.w	r3, r2, r3
 800a9a8:	ee07 3a90 	vmov	s15, r3
 800a9ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 810a 	beq.w	800abd0 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d05a      	beq.n	800aa78 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d302      	bcc.n	800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d078      	beq.n	800aabc <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800a9ca:	e099      	b.n	800ab00 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9cc:	4b88      	ldr	r3, [pc, #544]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 0320 	and.w	r3, r3, #32
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d02d      	beq.n	800aa34 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9d8:	4b85      	ldr	r3, [pc, #532]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	08db      	lsrs	r3, r3, #3
 800a9de:	f003 0303 	and.w	r3, r3, #3
 800a9e2:	4a84      	ldr	r2, [pc, #528]	; (800abf4 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800a9e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e8:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	ee07 3a90 	vmov	s15, r3
 800a9f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	ee07 3a90 	vmov	s15, r3
 800a9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa02:	4b7b      	ldr	r3, [pc, #492]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aa04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa0a:	ee07 3a90 	vmov	s15, r3
 800aa0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa12:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa16:	eddf 5a78 	vldr	s11, [pc, #480]	; 800abf8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800aa1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa2e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aa32:	e087      	b.n	800ab44 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	ee07 3a90 	vmov	s15, r3
 800aa3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800abfc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800aa42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa46:	4b6a      	ldr	r3, [pc, #424]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aa48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa4e:	ee07 3a90 	vmov	s15, r3
 800aa52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa56:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800abf8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800aa5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa76:	e065      	b.n	800ab44 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	ee07 3a90 	vmov	s15, r3
 800aa7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac00 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800aa86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa8a:	4b59      	ldr	r3, [pc, #356]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aa8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa92:	ee07 3a90 	vmov	s15, r3
 800aa96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800abf8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800aaa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aaba:	e043      	b.n	800ab44 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	ee07 3a90 	vmov	s15, r3
 800aac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aaca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aace:	4b48      	ldr	r3, [pc, #288]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad6:	ee07 3a90 	vmov	s15, r3
 800aada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aade:	ed97 6a03 	vldr	s12, [r7, #12]
 800aae2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800abf8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800aae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aafa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aafe:	e021      	b.n	800ab44 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	ee07 3a90 	vmov	s15, r3
 800ab06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac00 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800ab0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab12:	4b37      	ldr	r3, [pc, #220]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab1a:	ee07 3a90 	vmov	s15, r3
 800ab1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab22:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab26:	eddf 5a34 	vldr	s11, [pc, #208]	; 800abf8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ab2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab42:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800ab44:	4b2a      	ldr	r3, [pc, #168]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab48:	0a5b      	lsrs	r3, r3, #9
 800ab4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab4e:	ee07 3a90 	vmov	s15, r3
 800ab52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab6a:	ee17 2a90 	vmov	r2, s15
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800ab72:	4b1f      	ldr	r3, [pc, #124]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab76:	0c1b      	lsrs	r3, r3, #16
 800ab78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7c:	ee07 3a90 	vmov	s15, r3
 800ab80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab98:	ee17 2a90 	vmov	r2, s15
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800aba0:	4b13      	ldr	r3, [pc, #76]	; (800abf0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba4:	0e1b      	lsrs	r3, r3, #24
 800aba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abba:	edd7 6a07 	vldr	s13, [r7, #28]
 800abbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abc6:	ee17 2a90 	vmov	r2, s15
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800abce:	e008      	b.n	800abe2 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	609a      	str	r2, [r3, #8]
}
 800abe2:	bf00      	nop
 800abe4:	3724      	adds	r7, #36	; 0x24
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop
 800abf0:	58024400 	.word	0x58024400
 800abf4:	03d09000 	.word	0x03d09000
 800abf8:	46000000 	.word	0x46000000
 800abfc:	4c742400 	.word	0x4c742400
 800ac00:	4a742400 	.word	0x4a742400
 800ac04:	4bbebc20 	.word	0x4bbebc20

0800ac08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac16:	4b53      	ldr	r3, [pc, #332]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ac18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac1a:	f003 0303 	and.w	r3, r3, #3
 800ac1e:	2b03      	cmp	r3, #3
 800ac20:	d101      	bne.n	800ac26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e099      	b.n	800ad5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ac26:	4b4f      	ldr	r3, [pc, #316]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a4e      	ldr	r2, [pc, #312]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ac2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ac30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac32:	f7f8 fa01 	bl	8003038 <HAL_GetTick>
 800ac36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac38:	e008      	b.n	800ac4c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ac3a:	f7f8 f9fd 	bl	8003038 <HAL_GetTick>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d901      	bls.n	800ac4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e086      	b.n	800ad5a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac4c:	4b45      	ldr	r3, [pc, #276]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1f0      	bne.n	800ac3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ac58:	4b42      	ldr	r3, [pc, #264]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ac5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	031b      	lsls	r3, r3, #12
 800ac66:	493f      	ldr	r1, [pc, #252]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	628b      	str	r3, [r1, #40]	; 0x28
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	025b      	lsls	r3, r3, #9
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	431a      	orrs	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	3b01      	subs	r3, #1
 800ac88:	041b      	lsls	r3, r3, #16
 800ac8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	3b01      	subs	r3, #1
 800ac96:	061b      	lsls	r3, r3, #24
 800ac98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ac9c:	4931      	ldr	r1, [pc, #196]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aca2:	4b30      	ldr	r3, [pc, #192]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800aca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	695b      	ldr	r3, [r3, #20]
 800acae:	492d      	ldr	r1, [pc, #180]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800acb0:	4313      	orrs	r3, r2
 800acb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800acb4:	4b2b      	ldr	r3, [pc, #172]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	f023 0220 	bic.w	r2, r3, #32
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	4928      	ldr	r1, [pc, #160]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800acc2:	4313      	orrs	r3, r2
 800acc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800acc6:	4b27      	ldr	r3, [pc, #156]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800acc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acca:	4a26      	ldr	r2, [pc, #152]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800accc:	f023 0310 	bic.w	r3, r3, #16
 800acd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800acd2:	4b24      	ldr	r3, [pc, #144]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800acd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acd6:	4b24      	ldr	r3, [pc, #144]	; (800ad68 <RCCEx_PLL2_Config+0x160>)
 800acd8:	4013      	ands	r3, r2
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	69d2      	ldr	r2, [r2, #28]
 800acde:	00d2      	lsls	r2, r2, #3
 800ace0:	4920      	ldr	r1, [pc, #128]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ace2:	4313      	orrs	r3, r2
 800ace4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ace6:	4b1f      	ldr	r3, [pc, #124]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ace8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acea:	4a1e      	ldr	r2, [pc, #120]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800acec:	f043 0310 	orr.w	r3, r3, #16
 800acf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d106      	bne.n	800ad06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800acf8:	4b1a      	ldr	r3, [pc, #104]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800acfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfc:	4a19      	ldr	r2, [pc, #100]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800acfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad02:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad04:	e00f      	b.n	800ad26 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d106      	bne.n	800ad1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad0c:	4b15      	ldr	r3, [pc, #84]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ad0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad10:	4a14      	ldr	r2, [pc, #80]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ad12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad16:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad18:	e005      	b.n	800ad26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad1a:	4b12      	ldr	r3, [pc, #72]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ad1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1e:	4a11      	ldr	r2, [pc, #68]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ad20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ad26:	4b0f      	ldr	r3, [pc, #60]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a0e      	ldr	r2, [pc, #56]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ad2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad32:	f7f8 f981 	bl	8003038 <HAL_GetTick>
 800ad36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad38:	e008      	b.n	800ad4c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ad3a:	f7f8 f97d 	bl	8003038 <HAL_GetTick>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d901      	bls.n	800ad4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e006      	b.n	800ad5a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad4c:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <RCCEx_PLL2_Config+0x15c>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d0f0      	beq.n	800ad3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ad58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	58024400 	.word	0x58024400
 800ad68:	ffff0007 	.word	0xffff0007

0800ad6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad7a:	4b53      	ldr	r3, [pc, #332]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ad7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7e:	f003 0303 	and.w	r3, r3, #3
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	d101      	bne.n	800ad8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e099      	b.n	800aebe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ad8a:	4b4f      	ldr	r3, [pc, #316]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a4e      	ldr	r2, [pc, #312]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ad90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad96:	f7f8 f94f 	bl	8003038 <HAL_GetTick>
 800ad9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad9c:	e008      	b.n	800adb0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ad9e:	f7f8 f94b 	bl	8003038 <HAL_GetTick>
 800ada2:	4602      	mov	r2, r0
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d901      	bls.n	800adb0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800adac:	2303      	movs	r3, #3
 800adae:	e086      	b.n	800aebe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800adb0:	4b45      	ldr	r3, [pc, #276]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1f0      	bne.n	800ad9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800adbc:	4b42      	ldr	r3, [pc, #264]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800adbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	051b      	lsls	r3, r3, #20
 800adca:	493f      	ldr	r1, [pc, #252]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800adcc:	4313      	orrs	r3, r2
 800adce:	628b      	str	r3, [r1, #40]	; 0x28
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	3b01      	subs	r3, #1
 800add6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	3b01      	subs	r3, #1
 800ade0:	025b      	lsls	r3, r3, #9
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	431a      	orrs	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	3b01      	subs	r3, #1
 800adec:	041b      	lsls	r3, r3, #16
 800adee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800adf2:	431a      	orrs	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	061b      	lsls	r3, r3, #24
 800adfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae00:	4931      	ldr	r1, [pc, #196]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae02:	4313      	orrs	r3, r2
 800ae04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae06:	4b30      	ldr	r3, [pc, #192]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	492d      	ldr	r1, [pc, #180]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae14:	4313      	orrs	r3, r2
 800ae16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae18:	4b2b      	ldr	r3, [pc, #172]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	699b      	ldr	r3, [r3, #24]
 800ae24:	4928      	ldr	r1, [pc, #160]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ae2a:	4b27      	ldr	r3, [pc, #156]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2e:	4a26      	ldr	r2, [pc, #152]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ae36:	4b24      	ldr	r3, [pc, #144]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae3a:	4b24      	ldr	r3, [pc, #144]	; (800aecc <RCCEx_PLL3_Config+0x160>)
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	69d2      	ldr	r2, [r2, #28]
 800ae42:	00d2      	lsls	r2, r2, #3
 800ae44:	4920      	ldr	r1, [pc, #128]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae46:	4313      	orrs	r3, r2
 800ae48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ae4a:	4b1f      	ldr	r3, [pc, #124]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4e:	4a1e      	ldr	r2, [pc, #120]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d106      	bne.n	800ae6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ae5c:	4b1a      	ldr	r3, [pc, #104]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae60:	4a19      	ldr	r2, [pc, #100]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ae66:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae68:	e00f      	b.n	800ae8a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d106      	bne.n	800ae7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ae70:	4b15      	ldr	r3, [pc, #84]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae74:	4a14      	ldr	r2, [pc, #80]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae7c:	e005      	b.n	800ae8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ae7e:	4b12      	ldr	r3, [pc, #72]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae82:	4a11      	ldr	r2, [pc, #68]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ae8a:	4b0f      	ldr	r3, [pc, #60]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a0e      	ldr	r2, [pc, #56]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800ae90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae96:	f7f8 f8cf 	bl	8003038 <HAL_GetTick>
 800ae9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ae9c:	e008      	b.n	800aeb0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ae9e:	f7f8 f8cb 	bl	8003038 <HAL_GetTick>
 800aea2:	4602      	mov	r2, r0
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d901      	bls.n	800aeb0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e006      	b.n	800aebe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aeb0:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <RCCEx_PLL3_Config+0x15c>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d0f0      	beq.n	800ae9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	58024400 	.word	0x58024400
 800aecc:	ffff0007 	.word	0xffff0007

0800aed0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d067      	beq.n	800afb2 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d106      	bne.n	800aefc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7f7 fce2 	bl	80028c0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2202      	movs	r2, #2
 800af00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	22ca      	movs	r2, #202	; 0xca
 800af0a:	625a      	str	r2, [r3, #36]	; 0x24
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2253      	movs	r2, #83	; 0x53
 800af12:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f99f 	bl	800b258 <RTC_EnterInitMode>
 800af1a:	4603      	mov	r3, r0
 800af1c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d13b      	bne.n	800af9c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6899      	ldr	r1, [r3, #8]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	4b23      	ldr	r3, [pc, #140]	; (800afbc <HAL_RTC_Init+0xec>)
 800af30:	400b      	ands	r3, r1
 800af32:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6899      	ldr	r1, [r3, #8]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	431a      	orrs	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	431a      	orrs	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	430a      	orrs	r2, r1
 800af50:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	0419      	lsls	r1, r3, #16
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	68da      	ldr	r2, [r3, #12]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	430a      	orrs	r2, r1
 800af62:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f9a7 	bl	800b2b8 <RTC_ExitInitMode>
 800af6a:	4603      	mov	r3, r0
 800af6c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d113      	bne.n	800af9c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f022 0203 	bic.w	r2, r2, #3
 800af82:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	69da      	ldr	r2, [r3, #28]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	431a      	orrs	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	430a      	orrs	r2, r1
 800af9a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	22ff      	movs	r2, #255	; 0xff
 800afa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d103      	bne.n	800afb2 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2201      	movs	r2, #1
 800afae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800afb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	ff8fffbf 	.word	0xff8fffbf

0800afc0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800afc0:	b590      	push	{r4, r7, lr}
 800afc2:	b087      	sub	sp, #28
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f893 3020 	ldrb.w	r3, [r3, #32]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d101      	bne.n	800afda <HAL_RTC_SetTime+0x1a>
 800afd6:	2302      	movs	r3, #2
 800afd8:	e089      	b.n	800b0ee <HAL_RTC_SetTime+0x12e>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2201      	movs	r2, #1
 800afde:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2202      	movs	r2, #2
 800afe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	22ca      	movs	r2, #202	; 0xca
 800aff0:	625a      	str	r2, [r3, #36]	; 0x24
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2253      	movs	r2, #83	; 0x53
 800aff8:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f000 f92c 	bl	800b258 <RTC_EnterInitMode>
 800b000:	4603      	mov	r3, r0
 800b002:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b004:	7cfb      	ldrb	r3, [r7, #19]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d161      	bne.n	800b0ce <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d126      	bne.n	800b05e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d102      	bne.n	800b024 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	2200      	movs	r2, #0
 800b022:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 f983 	bl	800b334 <RTC_ByteToBcd2>
 800b02e:	4603      	mov	r3, r0
 800b030:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	785b      	ldrb	r3, [r3, #1]
 800b036:	4618      	mov	r0, r3
 800b038:	f000 f97c 	bl	800b334 <RTC_ByteToBcd2>
 800b03c:	4603      	mov	r3, r0
 800b03e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b040:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	789b      	ldrb	r3, [r3, #2]
 800b046:	4618      	mov	r0, r3
 800b048:	f000 f974 	bl	800b334 <RTC_ByteToBcd2>
 800b04c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b04e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	78db      	ldrb	r3, [r3, #3]
 800b056:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b058:	4313      	orrs	r3, r2
 800b05a:	617b      	str	r3, [r7, #20]
 800b05c:	e018      	b.n	800b090 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d102      	bne.n	800b072 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2200      	movs	r2, #0
 800b070:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	785b      	ldrb	r3, [r3, #1]
 800b07c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b07e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b080:	68ba      	ldr	r2, [r7, #8]
 800b082:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b084:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	78db      	ldrb	r3, [r3, #3]
 800b08a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b08c:	4313      	orrs	r3, r2
 800b08e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	6979      	ldr	r1, [r7, #20]
 800b096:	4b18      	ldr	r3, [pc, #96]	; (800b0f8 <HAL_RTC_SetTime+0x138>)
 800b098:	400b      	ands	r3, r1
 800b09a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	689a      	ldr	r2, [r3, #8]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b0aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6899      	ldr	r1, [r3, #8]
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	68da      	ldr	r2, [r3, #12]
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	430a      	orrs	r2, r1
 800b0c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f000 f8f7 	bl	800b2b8 <RTC_ExitInitMode>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	22ff      	movs	r2, #255	; 0xff
 800b0d4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b0d6:	7cfb      	ldrb	r3, [r7, #19]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d103      	bne.n	800b0e4 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b0ec:	7cfb      	ldrb	r3, [r7, #19]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd90      	pop	{r4, r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	007f7f7f 	.word	0x007f7f7f

0800b0fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b0fc:	b590      	push	{r4, r7, lr}
 800b0fe:	b087      	sub	sp, #28
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d101      	bne.n	800b116 <HAL_RTC_SetDate+0x1a>
 800b112:	2302      	movs	r3, #2
 800b114:	e073      	b.n	800b1fe <HAL_RTC_SetDate+0x102>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2202      	movs	r2, #2
 800b122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10e      	bne.n	800b14a <HAL_RTC_SetDate+0x4e>
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	785b      	ldrb	r3, [r3, #1]
 800b130:	f003 0310 	and.w	r3, r3, #16
 800b134:	2b00      	cmp	r3, #0
 800b136:	d008      	beq.n	800b14a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	785b      	ldrb	r3, [r3, #1]
 800b13c:	f023 0310 	bic.w	r3, r3, #16
 800b140:	b2db      	uxtb	r3, r3
 800b142:	330a      	adds	r3, #10
 800b144:	b2da      	uxtb	r2, r3
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d11c      	bne.n	800b18a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	78db      	ldrb	r3, [r3, #3]
 800b154:	4618      	mov	r0, r3
 800b156:	f000 f8ed 	bl	800b334 <RTC_ByteToBcd2>
 800b15a:	4603      	mov	r3, r0
 800b15c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	785b      	ldrb	r3, [r3, #1]
 800b162:	4618      	mov	r0, r3
 800b164:	f000 f8e6 	bl	800b334 <RTC_ByteToBcd2>
 800b168:	4603      	mov	r3, r0
 800b16a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b16c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	789b      	ldrb	r3, [r3, #2]
 800b172:	4618      	mov	r0, r3
 800b174:	f000 f8de 	bl	800b334 <RTC_ByteToBcd2>
 800b178:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b17a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b184:	4313      	orrs	r3, r2
 800b186:	617b      	str	r3, [r7, #20]
 800b188:	e00e      	b.n	800b1a8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	78db      	ldrb	r3, [r3, #3]
 800b18e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	785b      	ldrb	r3, [r3, #1]
 800b194:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b196:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b19c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	22ca      	movs	r2, #202	; 0xca
 800b1ae:	625a      	str	r2, [r3, #36]	; 0x24
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2253      	movs	r2, #83	; 0x53
 800b1b6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	f000 f84d 	bl	800b258 <RTC_EnterInitMode>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b1c2:	7cfb      	ldrb	r3, [r7, #19]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10a      	bne.n	800b1de <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	6979      	ldr	r1, [r7, #20]
 800b1ce:	4b0e      	ldr	r3, [pc, #56]	; (800b208 <HAL_RTC_SetDate+0x10c>)
 800b1d0:	400b      	ands	r3, r1
 800b1d2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f000 f86f 	bl	800b2b8 <RTC_ExitInitMode>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	22ff      	movs	r2, #255	; 0xff
 800b1e4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b1e6:	7cfb      	ldrb	r3, [r7, #19]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d103      	bne.n	800b1f4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b1fc:	7cfb      	ldrb	r3, [r7, #19]


}
 800b1fe:	4618      	mov	r0, r3
 800b200:	371c      	adds	r7, #28
 800b202:	46bd      	mov	sp, r7
 800b204:	bd90      	pop	{r4, r7, pc}
 800b206:	bf00      	nop
 800b208:	00ffff3f 	.word	0x00ffff3f

0800b20c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	68da      	ldr	r2, [r3, #12]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b222:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800b224:	f7f7 ff08 	bl	8003038 <HAL_GetTick>
 800b228:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b22a:	e009      	b.n	800b240 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b22c:	f7f7 ff04 	bl	8003038 <HAL_GetTick>
 800b230:	4602      	mov	r2, r0
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	1ad3      	subs	r3, r2, r3
 800b236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b23a:	d901      	bls.n	800b240 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800b23c:	2303      	movs	r3, #3
 800b23e:	e007      	b.n	800b250 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	f003 0320 	and.w	r3, r3, #32
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d0ee      	beq.n	800b22c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b260:	2300      	movs	r3, #0
 800b262:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d11d      	bne.n	800b2ae <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f04f 32ff 	mov.w	r2, #4294967295
 800b27a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b27c:	f7f7 fedc 	bl	8003038 <HAL_GetTick>
 800b280:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b282:	e00d      	b.n	800b2a0 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b284:	f7f7 fed8 	bl	8003038 <HAL_GetTick>
 800b288:	4602      	mov	r2, r0
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b292:	d905      	bls.n	800b2a0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b294:	2303      	movs	r3, #3
 800b296:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2203      	movs	r2, #3
 800b29c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0ea      	beq.n	800b284 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800b2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800b2c4:	4b1a      	ldr	r3, [pc, #104]	; (800b330 <RTC_ExitInitMode+0x78>)
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	4a19      	ldr	r2, [pc, #100]	; (800b330 <RTC_ExitInitMode+0x78>)
 800b2ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2ce:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b2d0:	4b17      	ldr	r3, [pc, #92]	; (800b330 <RTC_ExitInitMode+0x78>)
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f003 0320 	and.w	r3, r3, #32
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10c      	bne.n	800b2f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff ff95 	bl	800b20c <HAL_RTC_WaitForSynchro>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d01e      	beq.n	800b326 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2203      	movs	r2, #3
 800b2ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	73fb      	strb	r3, [r7, #15]
 800b2f4:	e017      	b.n	800b326 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b2f6:	4b0e      	ldr	r3, [pc, #56]	; (800b330 <RTC_ExitInitMode+0x78>)
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	4a0d      	ldr	r2, [pc, #52]	; (800b330 <RTC_ExitInitMode+0x78>)
 800b2fc:	f023 0320 	bic.w	r3, r3, #32
 800b300:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f7ff ff82 	bl	800b20c <HAL_RTC_WaitForSynchro>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d005      	beq.n	800b31a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2203      	movs	r2, #3
 800b312:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b316:	2303      	movs	r3, #3
 800b318:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b31a:	4b05      	ldr	r3, [pc, #20]	; (800b330 <RTC_ExitInitMode+0x78>)
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	4a04      	ldr	r2, [pc, #16]	; (800b330 <RTC_ExitInitMode+0x78>)
 800b320:	f043 0320 	orr.w	r3, r3, #32
 800b324:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b326:	7bfb      	ldrb	r3, [r7, #15]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	58004000 	.word	0x58004000

0800b334 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	4603      	mov	r3, r0
 800b33c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b33e:	2300      	movs	r3, #0
 800b340:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800b342:	79fb      	ldrb	r3, [r7, #7]
 800b344:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800b346:	e005      	b.n	800b354 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	3301      	adds	r3, #1
 800b34c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800b34e:	7afb      	ldrb	r3, [r7, #11]
 800b350:	3b0a      	subs	r3, #10
 800b352:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	2b09      	cmp	r3, #9
 800b358:	d8f6      	bhi.n	800b348 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	011b      	lsls	r3, r3, #4
 800b360:	b2da      	uxtb	r2, r3
 800b362:	7afb      	ldrb	r3, [r7, #11]
 800b364:	4313      	orrs	r3, r2
 800b366:	b2db      	uxtb	r3, r3
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3714      	adds	r7, #20
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b08a      	sub	sp, #40	; 0x28
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d101      	bne.n	800b386 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e07c      	b.n	800b480 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10c      	bne.n	800b3ac <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d102      	bne.n	800b3a6 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f7f7 faa4 	bl	80028f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2203      	movs	r2, #3
 800b3b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 f867 	bl	800b488 <HAL_SD_InitCard>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e05d      	b.n	800b480 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b3c4:	f107 0308 	add.w	r3, r7, #8
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f001 f8ce 	bl	800c56c <HAL_SD_GetCardStatus>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e052      	b.n	800b480 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b3da:	7e3b      	ldrb	r3, [r7, #24]
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b3e0:	7e7b      	ldrb	r3, [r7, #25]
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d10a      	bne.n	800b404 <HAL_SD_Init+0x90>
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <HAL_SD_Init+0x86>
 800b3f4:	6a3b      	ldr	r3, [r7, #32]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d004      	beq.n	800b404 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b400:	65da      	str	r2, [r3, #92]	; 0x5c
 800b402:	e00b      	b.n	800b41c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d104      	bne.n	800b416 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b412:	65da      	str	r2, [r3, #92]	; 0x5c
 800b414:	e002      	b.n	800b41c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	4619      	mov	r1, r3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f001 f984 	bl	800c730 <HAL_SD_ConfigWideBusOperation>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e026      	b.n	800b480 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b432:	f7f7 fe01 	bl	8003038 <HAL_GetTick>
 800b436:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b438:	e011      	b.n	800b45e <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800b43a:	f7f7 fdfd 	bl	8003038 <HAL_GetTick>
 800b43e:	4602      	mov	r2, r0
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b448:	d109      	bne.n	800b45e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b450:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800b45a:	2303      	movs	r3, #3
 800b45c:	e010      	b.n	800b480 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f001 fa10 	bl	800c884 <HAL_SD_GetCardState>
 800b464:	4603      	mov	r3, r0
 800b466:	2b04      	cmp	r3, #4
 800b468:	d1e7      	bne.n	800b43a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3728      	adds	r7, #40	; 0x28
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b488:	b5b0      	push	{r4, r5, r7, lr}
 800b48a:	b08e      	sub	sp, #56	; 0x38
 800b48c:	af04      	add	r7, sp, #16
 800b48e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b490:	2300      	movs	r3, #0
 800b492:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b494:	2300      	movs	r3, #0
 800b496:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b498:	2300      	movs	r3, #0
 800b49a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b49c:	2300      	movs	r3, #0
 800b49e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b4a0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b4a4:	f7fe fd3e 	bl	8009f24 <HAL_RCCEx_GetPeriphCLKFreq>
 800b4a8:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	0a1b      	lsrs	r3, r3, #8
 800b4ae:	4a40      	ldr	r2, [pc, #256]	; (800b5b0 <HAL_SD_InitCard+0x128>)
 800b4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4b4:	091b      	lsrs	r3, r3, #4
 800b4b6:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	699b      	ldr	r3, [r3, #24]
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d107      	bne.n	800b4d0 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f042 0210 	orr.w	r2, r2, #16
 800b4ce:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681d      	ldr	r5, [r3, #0]
 800b4d4:	466c      	mov	r4, sp
 800b4d6:	f107 0314 	add.w	r3, r7, #20
 800b4da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b4de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b4e2:	f107 0308 	add.w	r3, r7, #8
 800b4e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	f004 f9f5 	bl	800f8d8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f004 fa38 	bl	800f968 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	005b      	lsls	r3, r3, #1
 800b4fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b502:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b506:	2b00      	cmp	r3, #0
 800b508:	d008      	beq.n	800b51c <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800b50a:	4a2a      	ldr	r2, [pc, #168]	; (800b5b4 <HAL_SD_InitCard+0x12c>)
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b512:	3301      	adds	r3, #1
 800b514:	4618      	mov	r0, r3
 800b516:	f7f7 fd9b 	bl	8003050 <HAL_Delay>
 800b51a:	e002      	b.n	800b522 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800b51c:	2002      	movs	r0, #2
 800b51e:	f7f7 fd97 	bl	8003050 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f001 fa8c 	bl	800ca40 <SD_PowerON>
 800b528:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b52a:	6a3b      	ldr	r3, [r7, #32]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00b      	beq.n	800b548 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b53c:	6a3b      	ldr	r3, [r7, #32]
 800b53e:	431a      	orrs	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	e02e      	b.n	800b5a6 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f001 f9bb 	bl	800c8c4 <SD_InitCard>
 800b54e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b550:	6a3b      	ldr	r3, [r7, #32]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00b      	beq.n	800b56e <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b562:	6a3b      	ldr	r3, [r7, #32]
 800b564:	431a      	orrs	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e01b      	b.n	800b5a6 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b576:	4618      	mov	r0, r3
 800b578:	f004 fa8c 	bl	800fa94 <SDMMC_CmdBlockLength>
 800b57c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b57e:	6a3b      	ldr	r3, [r7, #32]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00f      	beq.n	800b5a4 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a0b      	ldr	r2, [pc, #44]	; (800b5b8 <HAL_SD_InitCard+0x130>)
 800b58a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b590:	6a3b      	ldr	r3, [r7, #32]
 800b592:	431a      	orrs	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e000      	b.n	800b5a6 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3728      	adds	r7, #40	; 0x28
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	014f8b59 	.word	0x014f8b59
 800b5b4:	00012110 	.word	0x00012110
 800b5b8:	1fe00fff 	.word	0x1fe00fff

0800b5bc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b092      	sub	sp, #72	; 0x48
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b5ca:	f7f7 fd35 	bl	8003038 <HAL_GetTick>
 800b5ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d107      	bne.n	800b5ee <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e167      	b.n	800b8be <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	f040 815a 	bne.w	800b8b0 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2200      	movs	r2, #0
 800b600:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	441a      	add	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d907      	bls.n	800b620 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b614:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e14e      	b.n	800b8be <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2203      	movs	r2, #3
 800b624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2200      	movs	r2, #0
 800b62e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b634:	2b01      	cmp	r3, #1
 800b636:	d002      	beq.n	800b63e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	025b      	lsls	r3, r3, #9
 800b63c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b63e:	f04f 33ff 	mov.w	r3, #4294967295
 800b642:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	025b      	lsls	r3, r3, #9
 800b648:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b64a:	2390      	movs	r3, #144	; 0x90
 800b64c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b64e:	2302      	movs	r3, #2
 800b650:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b652:	2300      	movs	r3, #0
 800b654:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b656:	2300      	movs	r3, #0
 800b658:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f107 0214 	add.w	r2, r7, #20
 800b662:	4611      	mov	r1, r2
 800b664:	4618      	mov	r0, r3
 800b666:	f004 f9e9 	bl	800fa3c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68da      	ldr	r2, [r3, #12]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b678:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d90a      	bls.n	800b696 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2202      	movs	r2, #2
 800b684:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b68c:	4618      	mov	r0, r3
 800b68e:	f004 fa47 	bl	800fb20 <SDMMC_CmdReadMultiBlock>
 800b692:	6478      	str	r0, [r7, #68]	; 0x44
 800b694:	e009      	b.n	800b6aa <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2201      	movs	r2, #1
 800b69a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f004 fa19 	bl	800fada <SDMMC_CmdReadSingleBlock>
 800b6a8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d012      	beq.n	800b6d6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a84      	ldr	r2, [pc, #528]	; (800b8c8 <HAL_SD_ReadBlocks+0x30c>)
 800b6b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6be:	431a      	orrs	r2, r3
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e0f3      	b.n	800b8be <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b6da:	e058      	b.n	800b78e <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d033      	beq.n	800b752 <HAL_SD_ReadBlocks+0x196>
 800b6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ec:	2b1f      	cmp	r3, #31
 800b6ee:	d930      	bls.n	800b752 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	643b      	str	r3, [r7, #64]	; 0x40
 800b6f4:	e027      	b.n	800b746 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f004 f916 	bl	800f92c <SDMMC_ReadFIFO>
 800b700:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b704:	b2da      	uxtb	r2, r3
 800b706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b708:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b70c:	3301      	adds	r3, #1
 800b70e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b712:	0a1b      	lsrs	r3, r3, #8
 800b714:	b2da      	uxtb	r2, r3
 800b716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b718:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71c:	3301      	adds	r3, #1
 800b71e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b722:	0c1b      	lsrs	r3, r3, #16
 800b724:	b2da      	uxtb	r2, r3
 800b726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b728:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72c:	3301      	adds	r3, #1
 800b72e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b732:	0e1b      	lsrs	r3, r3, #24
 800b734:	b2da      	uxtb	r2, r3
 800b736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b738:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73c:	3301      	adds	r3, #1
 800b73e:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800b740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b742:	3301      	adds	r3, #1
 800b744:	643b      	str	r3, [r7, #64]	; 0x40
 800b746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b748:	2b07      	cmp	r3, #7
 800b74a:	d9d4      	bls.n	800b6f6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800b74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b74e:	3b20      	subs	r3, #32
 800b750:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b752:	f7f7 fc71 	bl	8003038 <HAL_GetTick>
 800b756:	4602      	mov	r2, r0
 800b758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b75e:	429a      	cmp	r2, r3
 800b760:	d902      	bls.n	800b768 <HAL_SD_ReadBlocks+0x1ac>
 800b762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b764:	2b00      	cmp	r3, #0
 800b766:	d112      	bne.n	800b78e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a56      	ldr	r2, [pc, #344]	; (800b8c8 <HAL_SD_ReadBlocks+0x30c>)
 800b76e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b774:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2200      	movs	r2, #0
 800b788:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b78a:	2303      	movs	r3, #3
 800b78c:	e097      	b.n	800b8be <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b794:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d09f      	beq.n	800b6dc <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68da      	ldr	r2, [r3, #12]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7aa:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d022      	beq.n	800b800 <HAL_SD_ReadBlocks+0x244>
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d91f      	bls.n	800b800 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c4:	2b03      	cmp	r3, #3
 800b7c6:	d01b      	beq.n	800b800 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f004 fa11 	bl	800fbf4 <SDMMC_CmdStopTransfer>
 800b7d2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b7d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d012      	beq.n	800b800 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a3a      	ldr	r2, [pc, #232]	; (800b8c8 <HAL_SD_ReadBlocks+0x30c>)
 800b7e0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7e8:	431a      	orrs	r2, r3
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e05e      	b.n	800b8be <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b806:	f003 0308 	and.w	r3, r3, #8
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d012      	beq.n	800b834 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a2d      	ldr	r2, [pc, #180]	; (800b8c8 <HAL_SD_ReadBlocks+0x30c>)
 800b814:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b81a:	f043 0208 	orr.w	r2, r3, #8
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2201      	movs	r2, #1
 800b826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2200      	movs	r2, #0
 800b82e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	e044      	b.n	800b8be <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b83a:	f003 0302 	and.w	r3, r3, #2
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d012      	beq.n	800b868 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a20      	ldr	r2, [pc, #128]	; (800b8c8 <HAL_SD_ReadBlocks+0x30c>)
 800b848:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84e:	f043 0202 	orr.w	r2, r3, #2
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	e02a      	b.n	800b8be <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b86e:	f003 0320 	and.w	r3, r3, #32
 800b872:	2b00      	cmp	r3, #0
 800b874:	d012      	beq.n	800b89c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a13      	ldr	r2, [pc, #76]	; (800b8c8 <HAL_SD_ReadBlocks+0x30c>)
 800b87c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b882:	f043 0220 	orr.w	r2, r3, #32
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2201      	movs	r2, #1
 800b88e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e010      	b.n	800b8be <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a0a      	ldr	r2, [pc, #40]	; (800b8cc <HAL_SD_ReadBlocks+0x310>)
 800b8a2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	e006      	b.n	800b8be <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
  }
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3748      	adds	r7, #72	; 0x48
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	1fe00fff 	.word	0x1fe00fff
 800b8cc:	18000f3a 	.word	0x18000f3a

0800b8d0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b092      	sub	sp, #72	; 0x48
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
 800b8dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b8de:	f7f7 fbab 	bl	8003038 <HAL_GetTick>
 800b8e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d107      	bne.n	800b902 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b8fe:	2301      	movs	r3, #1
 800b900:	e16b      	b.n	800bbda <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	f040 815e 	bne.w	800bbcc <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2200      	movs	r2, #0
 800b914:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	441a      	add	r2, r3
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b920:	429a      	cmp	r2, r3
 800b922:	d907      	bls.n	800b934 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b928:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	e152      	b.n	800bbda <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2203      	movs	r2, #3
 800b938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2200      	movs	r2, #0
 800b942:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d002      	beq.n	800b952 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94e:	025b      	lsls	r3, r3, #9
 800b950:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b952:	f04f 33ff 	mov.w	r3, #4294967295
 800b956:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	025b      	lsls	r3, r3, #9
 800b95c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b95e:	2390      	movs	r3, #144	; 0x90
 800b960:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b962:	2300      	movs	r3, #0
 800b964:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b966:	2300      	movs	r3, #0
 800b968:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b96a:	2300      	movs	r3, #0
 800b96c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f107 0218 	add.w	r2, r7, #24
 800b976:	4611      	mov	r1, r2
 800b978:	4618      	mov	r0, r3
 800b97a:	f004 f85f 	bl	800fa3c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	68da      	ldr	r2, [r3, #12]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b98c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2b01      	cmp	r3, #1
 800b992:	d90a      	bls.n	800b9aa <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2220      	movs	r2, #32
 800b998:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f004 f903 	bl	800fbac <SDMMC_CmdWriteMultiBlock>
 800b9a6:	6478      	str	r0, [r7, #68]	; 0x44
 800b9a8:	e009      	b.n	800b9be <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2210      	movs	r2, #16
 800b9ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f004 f8d5 	bl	800fb66 <SDMMC_CmdWriteSingleBlock>
 800b9bc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d012      	beq.n	800b9ea <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a86      	ldr	r2, [pc, #536]	; (800bbe4 <HAL_SD_WriteBlocks+0x314>)
 800b9ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9d2:	431a      	orrs	r2, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e0f7      	b.n	800bbda <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b9ee:	e05c      	b.n	800baaa <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d037      	beq.n	800ba6e <HAL_SD_WriteBlocks+0x19e>
 800b9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba00:	2b1f      	cmp	r3, #31
 800ba02:	d934      	bls.n	800ba6e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800ba04:	2300      	movs	r3, #0
 800ba06:	643b      	str	r3, [r7, #64]	; 0x40
 800ba08:	e02b      	b.n	800ba62 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800ba0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ba10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba12:	3301      	adds	r3, #1
 800ba14:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800ba16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	021a      	lsls	r2, r3, #8
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ba22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba24:	3301      	adds	r3, #1
 800ba26:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800ba28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	041a      	lsls	r2, r3, #16
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	4313      	orrs	r3, r2
 800ba32:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ba34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba36:	3301      	adds	r3, #1
 800ba38:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800ba3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	061a      	lsls	r2, r3, #24
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ba46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba48:	3301      	adds	r3, #1
 800ba4a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f107 0214 	add.w	r2, r7, #20
 800ba54:	4611      	mov	r1, r2
 800ba56:	4618      	mov	r0, r3
 800ba58:	f003 ff75 	bl	800f946 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800ba5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba5e:	3301      	adds	r3, #1
 800ba60:	643b      	str	r3, [r7, #64]	; 0x40
 800ba62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba64:	2b07      	cmp	r3, #7
 800ba66:	d9d0      	bls.n	800ba0a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800ba68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba6a:	3b20      	subs	r3, #32
 800ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ba6e:	f7f7 fae3 	bl	8003038 <HAL_GetTick>
 800ba72:	4602      	mov	r2, r0
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d902      	bls.n	800ba84 <HAL_SD_WriteBlocks+0x1b4>
 800ba7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d112      	bne.n	800baaa <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a56      	ldr	r2, [pc, #344]	; (800bbe4 <HAL_SD_WriteBlocks+0x314>)
 800ba8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba92:	431a      	orrs	r2, r3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800baa6:	2303      	movs	r3, #3
 800baa8:	e097      	b.n	800bbda <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bab0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d09b      	beq.n	800b9f0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68da      	ldr	r2, [r3, #12]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bac6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d022      	beq.n	800bb1c <HAL_SD_WriteBlocks+0x24c>
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d91f      	bls.n	800bb1c <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae0:	2b03      	cmp	r3, #3
 800bae2:	d01b      	beq.n	800bb1c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4618      	mov	r0, r3
 800baea:	f004 f883 	bl	800fbf4 <SDMMC_CmdStopTransfer>
 800baee:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800baf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d012      	beq.n	800bb1c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a3a      	ldr	r2, [pc, #232]	; (800bbe4 <HAL_SD_WriteBlocks+0x314>)
 800bafc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb04:	431a      	orrs	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e05e      	b.n	800bbda <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb22:	f003 0308 	and.w	r3, r3, #8
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d012      	beq.n	800bb50 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a2d      	ldr	r2, [pc, #180]	; (800bbe4 <HAL_SD_WriteBlocks+0x314>)
 800bb30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb36:	f043 0208 	orr.w	r2, r3, #8
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2201      	movs	r2, #1
 800bb42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e044      	b.n	800bbda <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb56:	f003 0302 	and.w	r3, r3, #2
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d012      	beq.n	800bb84 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a20      	ldr	r2, [pc, #128]	; (800bbe4 <HAL_SD_WriteBlocks+0x314>)
 800bb64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6a:	f043 0202 	orr.w	r2, r3, #2
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bb80:	2301      	movs	r3, #1
 800bb82:	e02a      	b.n	800bbda <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8a:	f003 0310 	and.w	r3, r3, #16
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d012      	beq.n	800bbb8 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a13      	ldr	r2, [pc, #76]	; (800bbe4 <HAL_SD_WriteBlocks+0x314>)
 800bb98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb9e:	f043 0210 	orr.w	r2, r3, #16
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	e010      	b.n	800bbda <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a0a      	ldr	r2, [pc, #40]	; (800bbe8 <HAL_SD_WriteBlocks+0x318>)
 800bbbe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	e006      	b.n	800bbda <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
  }
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3748      	adds	r7, #72	; 0x48
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	1fe00fff 	.word	0x1fe00fff
 800bbe8:	18000f3a 	.word	0x18000f3a

0800bbec <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b08c      	sub	sp, #48	; 0x30
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
 800bbf8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d107      	bne.n	800bc14 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc08:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bc10:	2301      	movs	r3, #1
 800bc12:	e08d      	b.n	800bd30 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	f040 8086 	bne.w	800bd2e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bc28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	441a      	add	r2, r3
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d907      	bls.n	800bc46 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	e074      	b.n	800bd30 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2203      	movs	r2, #3
 800bc4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2200      	movs	r2, #0
 800bc54:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	68ba      	ldr	r2, [r7, #8]
 800bc5a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	025a      	lsls	r2, r3, #9
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d002      	beq.n	800bc72 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	025b      	lsls	r3, r3, #9
 800bc70:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bc72:	f04f 33ff 	mov.w	r3, #4294967295
 800bc76:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	025b      	lsls	r3, r3, #9
 800bc7c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bc7e:	2390      	movs	r3, #144	; 0x90
 800bc80:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bc82:	2302      	movs	r3, #2
 800bc84:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f107 0210 	add.w	r2, r7, #16
 800bc96:	4611      	mov	r1, r2
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f003 fecf 	bl	800fa3c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68da      	ldr	r2, [r3, #12]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcac:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68ba      	ldr	r2, [r7, #8]
 800bcb4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d90a      	bls.n	800bcda <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2282      	movs	r2, #130	; 0x82
 800bcc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f003 ff25 	bl	800fb20 <SDMMC_CmdReadMultiBlock>
 800bcd6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bcd8:	e009      	b.n	800bcee <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2281      	movs	r2, #129	; 0x81
 800bcde:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bce6:	4618      	mov	r0, r3
 800bce8:	f003 fef7 	bl	800fada <SDMMC_CmdReadSingleBlock>
 800bcec:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d012      	beq.n	800bd1a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a0f      	ldr	r2, [pc, #60]	; (800bd38 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800bcfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd02:	431a      	orrs	r2, r3
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	e00a      	b.n	800bd30 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800bd28:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	e000      	b.n	800bd30 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800bd2e:	2302      	movs	r3, #2
  }
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3730      	adds	r7, #48	; 0x30
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	1fe00fff 	.word	0x1fe00fff

0800bd3c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b08c      	sub	sp, #48	; 0x30
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
 800bd48:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d107      	bne.n	800bd64 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	e08d      	b.n	800be80 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	f040 8086 	bne.w	800be7e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2200      	movs	r2, #0
 800bd76:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bd78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	441a      	add	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d907      	bls.n	800bd96 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	e074      	b.n	800be80 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2203      	movs	r2, #3
 800bd9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2200      	movs	r2, #0
 800bda4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	68ba      	ldr	r2, [r7, #8]
 800bdaa:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	025a      	lsls	r2, r3, #9
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d002      	beq.n	800bdc2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	025b      	lsls	r3, r3, #9
 800bdc0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bdc2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdc6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	025b      	lsls	r3, r3, #9
 800bdcc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bdce:	2390      	movs	r3, #144	; 0x90
 800bdd0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bdda:	2300      	movs	r3, #0
 800bddc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f107 0210 	add.w	r2, r7, #16
 800bde6:	4611      	mov	r1, r2
 800bde8:	4618      	mov	r0, r3
 800bdea:	f003 fe27 	bl	800fa3c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	68da      	ldr	r2, [r3, #12]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdfc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2201      	movs	r2, #1
 800be0c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	2b01      	cmp	r3, #1
 800be12:	d90a      	bls.n	800be2a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	22a0      	movs	r2, #160	; 0xa0
 800be18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be20:	4618      	mov	r0, r3
 800be22:	f003 fec3 	bl	800fbac <SDMMC_CmdWriteMultiBlock>
 800be26:	62f8      	str	r0, [r7, #44]	; 0x2c
 800be28:	e009      	b.n	800be3e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2290      	movs	r2, #144	; 0x90
 800be2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be36:	4618      	mov	r0, r3
 800be38:	f003 fe95 	bl	800fb66 <SDMMC_CmdWriteSingleBlock>
 800be3c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800be3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be40:	2b00      	cmp	r3, #0
 800be42:	d012      	beq.n	800be6a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a0f      	ldr	r2, [pc, #60]	; (800be88 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800be4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be52:	431a      	orrs	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2201      	movs	r2, #1
 800be5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800be66:	2301      	movs	r3, #1
 800be68:	e00a      	b.n	800be80 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800be78:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800be7a:	2300      	movs	r3, #0
 800be7c:	e000      	b.n	800be80 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800be7e:	2302      	movs	r3, #2
  }
}
 800be80:	4618      	mov	r0, r3
 800be82:	3730      	adds	r7, #48	; 0x30
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	1fe00fff 	.word	0x1fe00fff

0800be8c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be98:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d008      	beq.n	800beba <HAL_SD_IRQHandler+0x2e>
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f003 0308 	and.w	r3, r3, #8
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d003      	beq.n	800beba <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f001 f92a 	bl	800d10c <SD_Read_IT>
 800beb8:	e19a      	b.n	800c1f0 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 80ac 	beq.w	800c022 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bed2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	4b9d      	ldr	r3, [pc, #628]	; (800c154 <HAL_SD_IRQHandler+0x2c8>)
 800bee0:	400b      	ands	r3, r1
 800bee2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bef2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	68da      	ldr	r2, [r3, #12]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf02:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f003 0308 	and.w	r3, r3, #8
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d038      	beq.n	800bf80 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f003 0302 	and.w	r3, r3, #2
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d104      	bne.n	800bf22 <HAL_SD_IRQHandler+0x96>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f003 0320 	and.w	r3, r3, #32
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d011      	beq.n	800bf46 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4618      	mov	r0, r3
 800bf28:	f003 fe64 	bl	800fbf4 <SDMMC_CmdStopTransfer>
 800bf2c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d008      	beq.n	800bf46 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	431a      	orrs	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f959 	bl	800c1f8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a83      	ldr	r2, [pc, #524]	; (800c158 <HAL_SD_IRQHandler+0x2cc>)
 800bf4c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d104      	bne.n	800bf70 <HAL_SD_IRQHandler+0xe4>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f003 0302 	and.w	r3, r3, #2
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d003      	beq.n	800bf78 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f005 fe55 	bl	8011c20 <HAL_SD_RxCpltCallback>
 800bf76:	e13b      	b.n	800c1f0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f005 fe47 	bl	8011c0c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bf7e:	e137      	b.n	800c1f0 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f000 8132 	beq.w	800c1f0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2200      	movs	r2, #0
 800bf92:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f003 0302 	and.w	r3, r3, #2
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d104      	bne.n	800bfb8 <HAL_SD_IRQHandler+0x12c>
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f003 0320 	and.w	r3, r3, #32
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d011      	beq.n	800bfdc <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f003 fe19 	bl	800fbf4 <SDMMC_CmdStopTransfer>
 800bfc2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d008      	beq.n	800bfdc <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	431a      	orrs	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f90e 	bl	800c1f8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f003 0310 	and.w	r3, r3, #16
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d104      	bne.n	800bffe <HAL_SD_IRQHandler+0x172>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f003 0320 	and.w	r3, r3, #32
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d002      	beq.n	800c004 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f005 fe04 	bl	8011c0c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d105      	bne.n	800c01a <HAL_SD_IRQHandler+0x18e>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f003 0302 	and.w	r3, r3, #2
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 80eb 	beq.w	800c1f0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f005 fe00 	bl	8011c20 <HAL_SD_RxCpltCallback>
}
 800c020:	e0e6      	b.n	800c1f0 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d008      	beq.n	800c042 <HAL_SD_IRQHandler+0x1b6>
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f003 0308 	and.w	r3, r3, #8
 800c036:	2b00      	cmp	r3, #0
 800c038:	d003      	beq.n	800c042 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f001 f8ac 	bl	800d198 <SD_Write_IT>
 800c040:	e0d6      	b.n	800c1f0 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c048:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 80a2 	beq.w	800c196 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c058:	f003 0302 	and.w	r3, r3, #2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d005      	beq.n	800c06c <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c064:	f043 0202 	orr.w	r2, r3, #2
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c072:	f003 0308 	and.w	r3, r3, #8
 800c076:	2b00      	cmp	r3, #0
 800c078:	d005      	beq.n	800c086 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c07e:	f043 0208 	orr.w	r2, r3, #8
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c08c:	f003 0320 	and.w	r3, r3, #32
 800c090:	2b00      	cmp	r3, #0
 800c092:	d005      	beq.n	800c0a0 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c098:	f043 0220 	orr.w	r2, r3, #32
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0a6:	f003 0310 	and.w	r3, r3, #16
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d005      	beq.n	800c0ba <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b2:	f043 0210 	orr.w	r2, r3, #16
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a26      	ldr	r2, [pc, #152]	; (800c158 <HAL_SD_IRQHandler+0x2cc>)
 800c0c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c0d0:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	68da      	ldr	r2, [r3, #12]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0e0:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c0f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68da      	ldr	r2, [r3, #12]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c100:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4618      	mov	r0, r3
 800c108:	f003 fd74 	bl	800fbf4 <SDMMC_CmdStopTransfer>
 800c10c:	4602      	mov	r2, r0
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c112:	431a      	orrs	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68da      	ldr	r2, [r3, #12]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c126:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c130:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f003 0308 	and.w	r3, r3, #8
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00f      	beq.n	800c15c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f854 	bl	800c1f8 <HAL_SD_ErrorCallback>
}
 800c150:	e04e      	b.n	800c1f0 <HAL_SD_IRQHandler+0x364>
 800c152:	bf00      	nop
 800c154:	ffff3ec5 	.word	0xffff3ec5
 800c158:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c162:	2b00      	cmp	r3, #0
 800c164:	d044      	beq.n	800c1f0 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d040      	beq.n	800c1f0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c17c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2200      	movs	r2, #0
 800c184:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 f832 	bl	800c1f8 <HAL_SD_ErrorCallback>
}
 800c194:	e02c      	b.n	800c1f0 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c19c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d025      	beq.n	800c1f0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1b4:	f003 0304 	and.w	r3, r3, #4
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10c      	bne.n	800c1d6 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f003 0320 	and.w	r3, r3, #32
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f001 f84e 	bl	800d268 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c1cc:	e010      	b.n	800c1f0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f001 f836 	bl	800d240 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c1d4:	e00c      	b.n	800c1f0 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f003 0320 	and.w	r3, r3, #32
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d003      	beq.n	800c1e8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f001 f837 	bl	800d254 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c1e6:	e003      	b.n	800c1f0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f001 f81f 	bl	800d22c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c1ee:	e7ff      	b.n	800c1f0 <HAL_SD_IRQHandler+0x364>
 800c1f0:	bf00      	nop
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	4603      	mov	r3, r0
 800c214:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800c216:	bf00      	nop
 800c218:	370c      	adds	r7, #12
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
	...

0800c224 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c232:	0f9b      	lsrs	r3, r3, #30
 800c234:	b2da      	uxtb	r2, r3
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c23e:	0e9b      	lsrs	r3, r3, #26
 800c240:	b2db      	uxtb	r3, r3
 800c242:	f003 030f 	and.w	r3, r3, #15
 800c246:	b2da      	uxtb	r2, r3
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c250:	0e1b      	lsrs	r3, r3, #24
 800c252:	b2db      	uxtb	r3, r3
 800c254:	f003 0303 	and.w	r3, r3, #3
 800c258:	b2da      	uxtb	r2, r3
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c262:	0c1b      	lsrs	r3, r3, #16
 800c264:	b2da      	uxtb	r2, r3
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c26e:	0a1b      	lsrs	r3, r3, #8
 800c270:	b2da      	uxtb	r2, r3
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c284:	0d1b      	lsrs	r3, r3, #20
 800c286:	b29a      	uxth	r2, r3
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c290:	0c1b      	lsrs	r3, r3, #16
 800c292:	b2db      	uxtb	r3, r3
 800c294:	f003 030f 	and.w	r3, r3, #15
 800c298:	b2da      	uxtb	r2, r3
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2a2:	0bdb      	lsrs	r3, r3, #15
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	f003 0301 	and.w	r3, r3, #1
 800c2aa:	b2da      	uxtb	r2, r3
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2b4:	0b9b      	lsrs	r3, r3, #14
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	f003 0301 	and.w	r3, r3, #1
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2c6:	0b5b      	lsrs	r3, r3, #13
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	f003 0301 	and.w	r3, r3, #1
 800c2ce:	b2da      	uxtb	r2, r3
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2d8:	0b1b      	lsrs	r3, r3, #12
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	f003 0301 	and.w	r3, r3, #1
 800c2e0:	b2da      	uxtb	r2, r3
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d163      	bne.n	800c3bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2f8:	009a      	lsls	r2, r3, #2
 800c2fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c2fe:	4013      	ands	r3, r2
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c304:	0f92      	lsrs	r2, r2, #30
 800c306:	431a      	orrs	r2, r3
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c310:	0edb      	lsrs	r3, r3, #27
 800c312:	b2db      	uxtb	r3, r3
 800c314:	f003 0307 	and.w	r3, r3, #7
 800c318:	b2da      	uxtb	r2, r3
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c322:	0e1b      	lsrs	r3, r3, #24
 800c324:	b2db      	uxtb	r3, r3
 800c326:	f003 0307 	and.w	r3, r3, #7
 800c32a:	b2da      	uxtb	r2, r3
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c334:	0d5b      	lsrs	r3, r3, #21
 800c336:	b2db      	uxtb	r3, r3
 800c338:	f003 0307 	and.w	r3, r3, #7
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c346:	0c9b      	lsrs	r3, r3, #18
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	f003 0307 	and.w	r3, r3, #7
 800c34e:	b2da      	uxtb	r2, r3
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c358:	0bdb      	lsrs	r3, r3, #15
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	f003 0307 	and.w	r3, r3, #7
 800c360:	b2da      	uxtb	r2, r3
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	691b      	ldr	r3, [r3, #16]
 800c36a:	1c5a      	adds	r2, r3, #1
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	7e1b      	ldrb	r3, [r3, #24]
 800c374:	b2db      	uxtb	r3, r3
 800c376:	f003 0307 	and.w	r3, r3, #7
 800c37a:	3302      	adds	r3, #2
 800c37c:	2201      	movs	r2, #1
 800c37e:	fa02 f303 	lsl.w	r3, r2, r3
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c386:	fb02 f203 	mul.w	r2, r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	7a1b      	ldrb	r3, [r3, #8]
 800c392:	b2db      	uxtb	r3, r3
 800c394:	f003 030f 	and.w	r3, r3, #15
 800c398:	2201      	movs	r2, #1
 800c39a:	409a      	lsls	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c3a8:	0a52      	lsrs	r2, r2, #9
 800c3aa:	fb02 f203 	mul.w	r2, r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3b8:	659a      	str	r2, [r3, #88]	; 0x58
 800c3ba:	e031      	b.n	800c420 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d11d      	bne.n	800c400 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3c8:	041b      	lsls	r3, r3, #16
 800c3ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3d2:	0c1b      	lsrs	r3, r3, #16
 800c3d4:	431a      	orrs	r2, r3
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	029a      	lsls	r2, r3, #10
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3f4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	659a      	str	r2, [r3, #88]	; 0x58
 800c3fe:	e00f      	b.n	800c420 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a58      	ldr	r2, [pc, #352]	; (800c568 <HAL_SD_GetCardCSD+0x344>)
 800c406:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	e09d      	b.n	800c55c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c424:	0b9b      	lsrs	r3, r3, #14
 800c426:	b2db      	uxtb	r3, r3
 800c428:	f003 0301 	and.w	r3, r3, #1
 800c42c:	b2da      	uxtb	r2, r3
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c436:	09db      	lsrs	r3, r3, #7
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c43e:	b2da      	uxtb	r2, r3
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c44e:	b2da      	uxtb	r2, r3
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c458:	0fdb      	lsrs	r3, r3, #31
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c464:	0f5b      	lsrs	r3, r3, #29
 800c466:	b2db      	uxtb	r3, r3
 800c468:	f003 0303 	and.w	r3, r3, #3
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c476:	0e9b      	lsrs	r3, r3, #26
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	f003 0307 	and.w	r3, r3, #7
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c488:	0d9b      	lsrs	r3, r3, #22
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	f003 030f 	and.w	r3, r3, #15
 800c490:	b2da      	uxtb	r2, r3
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c49a:	0d5b      	lsrs	r3, r3, #21
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4b6:	0c1b      	lsrs	r3, r3, #16
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	b2da      	uxtb	r2, r3
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4ca:	0bdb      	lsrs	r3, r3, #15
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	b2da      	uxtb	r2, r3
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4de:	0b9b      	lsrs	r3, r3, #14
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	f003 0301 	and.w	r3, r3, #1
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4f2:	0b5b      	lsrs	r3, r3, #13
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	b2da      	uxtb	r2, r3
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c506:	0b1b      	lsrs	r3, r3, #12
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	f003 0301 	and.w	r3, r3, #1
 800c50e:	b2da      	uxtb	r2, r3
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c51a:	0a9b      	lsrs	r3, r3, #10
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	f003 0303 	and.w	r3, r3, #3
 800c522:	b2da      	uxtb	r2, r3
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c52e:	0a1b      	lsrs	r3, r3, #8
 800c530:	b2db      	uxtb	r3, r3
 800c532:	f003 0303 	and.w	r3, r3, #3
 800c536:	b2da      	uxtb	r2, r3
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c542:	085b      	lsrs	r3, r3, #1
 800c544:	b2db      	uxtb	r3, r3
 800c546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	2201      	movs	r2, #1
 800c556:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	1fe00fff 	.word	0x1fe00fff

0800c56c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b094      	sub	sp, #80	; 0x50
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c57c:	f107 0308 	add.w	r3, r7, #8
 800c580:	4619      	mov	r1, r3
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fb64 	bl	800cc50 <SD_SendSDStatus>
 800c588:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800c58a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d011      	beq.n	800c5b4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a4f      	ldr	r2, [pc, #316]	; (800c6d4 <HAL_SD_GetCardStatus+0x168>)
 800c596:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c59c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c59e:	431a      	orrs	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c5b2:	e070      	b.n	800c696 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	099b      	lsrs	r3, r3, #6
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	f003 0303 	and.w	r3, r3, #3
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	095b      	lsrs	r3, r3, #5
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	f003 0301 	and.w	r3, r3, #1
 800c5ce:	b2da      	uxtb	r2, r3
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	0a1b      	lsrs	r3, r3, #8
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	0e1b      	lsrs	r3, r3, #24
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	061a      	lsls	r2, r3, #24
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	021b      	lsls	r3, r3, #8
 800c5f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c5fa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	0a1b      	lsrs	r3, r3, #8
 800c600:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c604:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	0e1b      	lsrs	r3, r3, #24
 800c60a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	b2da      	uxtb	r2, r3
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	0a1b      	lsrs	r3, r3, #8
 800c61c:	b2da      	uxtb	r2, r3
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	0d1b      	lsrs	r3, r3, #20
 800c626:	b2db      	uxtb	r3, r3
 800c628:	f003 030f 	and.w	r3, r3, #15
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	0c1b      	lsrs	r3, r3, #16
 800c636:	b29b      	uxth	r3, r3
 800c638:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c63c:	b29a      	uxth	r2, r3
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	b29b      	uxth	r3, r3
 800c642:	b2db      	uxtb	r3, r3
 800c644:	b29b      	uxth	r3, r3
 800c646:	4313      	orrs	r3, r2
 800c648:	b29a      	uxth	r2, r3
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	0a9b      	lsrs	r3, r3, #10
 800c652:	b2db      	uxtb	r3, r3
 800c654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	0a1b      	lsrs	r3, r3, #8
 800c662:	b2db      	uxtb	r3, r3
 800c664:	f003 0303 	and.w	r3, r3, #3
 800c668:	b2da      	uxtb	r2, r3
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	091b      	lsrs	r3, r3, #4
 800c672:	b2db      	uxtb	r3, r3
 800c674:	f003 030f 	and.w	r3, r3, #15
 800c678:	b2da      	uxtb	r2, r3
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	b2db      	uxtb	r3, r3
 800c682:	f003 030f 	and.w	r3, r3, #15
 800c686:	b2da      	uxtb	r2, r3
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	0e1b      	lsrs	r3, r3, #24
 800c690:	b2da      	uxtb	r2, r3
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f003 f9f8 	bl	800fa94 <SDMMC_CmdBlockLength>
 800c6a4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00d      	beq.n	800c6c8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a08      	ldr	r2, [pc, #32]	; (800c6d4 <HAL_SD_GetCardStatus+0x168>)
 800c6b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800c6c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3750      	adds	r7, #80	; 0x50
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	1fe00fff 	.word	0x1fe00fff

0800c6d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c730:	b5b0      	push	{r4, r5, r7, lr}
 800c732:	b08e      	sub	sp, #56	; 0x38
 800c734:	af04      	add	r7, sp, #16
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c73a:	2300      	movs	r3, #0
 800c73c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2203      	movs	r2, #3
 800c744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c74c:	2b03      	cmp	r3, #3
 800c74e:	d02e      	beq.n	800c7ae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c756:	d106      	bne.n	800c766 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	639a      	str	r2, [r3, #56]	; 0x38
 800c764:	e029      	b.n	800c7ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c76c:	d10a      	bne.n	800c784 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 fb66 	bl	800ce40 <SD_WideBus_Enable>
 800c774:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c77a:	6a3b      	ldr	r3, [r7, #32]
 800c77c:	431a      	orrs	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	639a      	str	r2, [r3, #56]	; 0x38
 800c782:	e01a      	b.n	800c7ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d10a      	bne.n	800c7a0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 fba3 	bl	800ced6 <SD_WideBus_Disable>
 800c790:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c796:	6a3b      	ldr	r3, [r7, #32]
 800c798:	431a      	orrs	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	639a      	str	r2, [r3, #56]	; 0x38
 800c79e:	e00c      	b.n	800c7ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	639a      	str	r2, [r3, #56]	; 0x38
 800c7ac:	e005      	b.n	800c7ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d007      	beq.n	800c7d2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a2e      	ldr	r2, [pc, #184]	; (800c880 <HAL_SD_ConfigWideBusOperation+0x150>)
 800c7c8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c7d0:	e034      	b.n	800c83c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	695b      	ldr	r3, [r3, #20]
 800c7ec:	2b03      	cmp	r3, #3
 800c7ee:	d903      	bls.n	800c7f8 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	695b      	ldr	r3, [r3, #20]
 800c7f4:	61bb      	str	r3, [r7, #24]
 800c7f6:	e012      	b.n	800c81e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c800:	d103      	bne.n	800c80a <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	61bb      	str	r3, [r7, #24]
 800c808:	e009      	b.n	800c81e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c80e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c812:	d102      	bne.n	800c81a <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800c814:	2302      	movs	r3, #2
 800c816:	61bb      	str	r3, [r7, #24]
 800c818:	e001      	b.n	800c81e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800c81a:	2304      	movs	r3, #4
 800c81c:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681d      	ldr	r5, [r3, #0]
 800c822:	466c      	mov	r4, sp
 800c824:	f107 0314 	add.w	r3, r7, #20
 800c828:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c82c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c830:	f107 0308 	add.w	r3, r7, #8
 800c834:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c836:	4628      	mov	r0, r5
 800c838:	f003 f84e 	bl	800f8d8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c844:	4618      	mov	r0, r3
 800c846:	f003 f925 	bl	800fa94 <SDMMC_CmdBlockLength>
 800c84a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c84c:	6a3b      	ldr	r3, [r7, #32]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00c      	beq.n	800c86c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a0a      	ldr	r2, [pc, #40]	; (800c880 <HAL_SD_ConfigWideBusOperation+0x150>)
 800c858:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c85e:	6a3b      	ldr	r3, [r7, #32]
 800c860:	431a      	orrs	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800c874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3728      	adds	r7, #40	; 0x28
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bdb0      	pop	{r4, r5, r7, pc}
 800c880:	1fe00fff 	.word	0x1fe00fff

0800c884 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b086      	sub	sp, #24
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c890:	f107 030c 	add.w	r3, r7, #12
 800c894:	4619      	mov	r1, r3
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 faaa 	bl	800cdf0 <SD_SendStatus>
 800c89c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d005      	beq.n	800c8b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	431a      	orrs	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	0a5b      	lsrs	r3, r3, #9
 800c8b4:	f003 030f 	and.w	r3, r3, #15
 800c8b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c8ba:	693b      	ldr	r3, [r7, #16]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3718      	adds	r7, #24
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c8c4:	b590      	push	{r4, r7, lr}
 800c8c6:	b091      	sub	sp, #68	; 0x44
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f003 f858 	bl	800f98a <SDMMC_GetPowerState>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d102      	bne.n	800c8e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c8e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c8e4:	e0a8      	b.n	800ca38 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ea:	2b03      	cmp	r3, #3
 800c8ec:	d02e      	beq.n	800c94c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f003 faa4 	bl	800fe40 <SDMMC_CmdSendCID>
 800c8f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d001      	beq.n	800c904 <SD_InitCard+0x40>
    {
      return errorstate;
 800c900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c902:	e099      	b.n	800ca38 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2100      	movs	r1, #0
 800c90a:	4618      	mov	r0, r3
 800c90c:	f003 f883 	bl	800fa16 <SDMMC_GetResponse>
 800c910:	4602      	mov	r2, r0
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2104      	movs	r1, #4
 800c91c:	4618      	mov	r0, r3
 800c91e:	f003 f87a 	bl	800fa16 <SDMMC_GetResponse>
 800c922:	4602      	mov	r2, r0
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2108      	movs	r1, #8
 800c92e:	4618      	mov	r0, r3
 800c930:	f003 f871 	bl	800fa16 <SDMMC_GetResponse>
 800c934:	4602      	mov	r2, r0
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	210c      	movs	r1, #12
 800c940:	4618      	mov	r0, r3
 800c942:	f003 f868 	bl	800fa16 <SDMMC_GetResponse>
 800c946:	4602      	mov	r2, r0
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c950:	2b03      	cmp	r3, #3
 800c952:	d00d      	beq.n	800c970 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f107 020e 	add.w	r2, r7, #14
 800c95c:	4611      	mov	r1, r2
 800c95e:	4618      	mov	r0, r3
 800c960:	f003 faad 	bl	800febe <SDMMC_CmdSetRelAdd>
 800c964:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d001      	beq.n	800c970 <SD_InitCard+0xac>
    {
      return errorstate;
 800c96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c96e:	e063      	b.n	800ca38 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c974:	2b03      	cmp	r3, #3
 800c976:	d036      	beq.n	800c9e6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c978:	89fb      	ldrh	r3, [r7, #14]
 800c97a:	461a      	mov	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c988:	041b      	lsls	r3, r3, #16
 800c98a:	4619      	mov	r1, r3
 800c98c:	4610      	mov	r0, r2
 800c98e:	f003 fa76 	bl	800fe7e <SDMMC_CmdSendCSD>
 800c992:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c996:	2b00      	cmp	r3, #0
 800c998:	d001      	beq.n	800c99e <SD_InitCard+0xda>
    {
      return errorstate;
 800c99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c99c:	e04c      	b.n	800ca38 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f003 f836 	bl	800fa16 <SDMMC_GetResponse>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	2104      	movs	r1, #4
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f003 f82d 	bl	800fa16 <SDMMC_GetResponse>
 800c9bc:	4602      	mov	r2, r0
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2108      	movs	r1, #8
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f003 f824 	bl	800fa16 <SDMMC_GetResponse>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	210c      	movs	r1, #12
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f003 f81b 	bl	800fa16 <SDMMC_GetResponse>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2104      	movs	r1, #4
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f003 f812 	bl	800fa16 <SDMMC_GetResponse>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	0d1a      	lsrs	r2, r3, #20
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c9fa:	f107 0310 	add.w	r3, r7, #16
 800c9fe:	4619      	mov	r1, r3
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f7ff fc0f 	bl	800c224 <HAL_SD_GetCardCSD>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d002      	beq.n	800ca12 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ca10:	e012      	b.n	800ca38 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6819      	ldr	r1, [r3, #0]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca1a:	041b      	lsls	r3, r3, #16
 800ca1c:	f04f 0400 	mov.w	r4, #0
 800ca20:	461a      	mov	r2, r3
 800ca22:	4623      	mov	r3, r4
 800ca24:	4608      	mov	r0, r1
 800ca26:	f003 f921 	bl	800fc6c <SDMMC_CmdSelDesel>
 800ca2a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d001      	beq.n	800ca36 <SD_InitCard+0x172>
  {
    return errorstate;
 800ca32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca34:	e000      	b.n	800ca38 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ca36:	2300      	movs	r3, #0
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3744      	adds	r7, #68	; 0x44
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd90      	pop	{r4, r7, pc}

0800ca40 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b088      	sub	sp, #32
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	61fb      	str	r3, [r7, #28]
 800ca50:	2300      	movs	r3, #0
 800ca52:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800ca54:	f7f6 faf0 	bl	8003038 <HAL_GetTick>
 800ca58:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f003 f928 	bl	800fcb4 <SDMMC_CmdGoIdleState>
 800ca64:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d001      	beq.n	800ca70 <SD_PowerON+0x30>
  {
    return errorstate;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	e0e9      	b.n	800cc44 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4618      	mov	r0, r3
 800ca76:	f003 f93b 	bl	800fcf0 <SDMMC_CmdOperCond>
 800ca7a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00d      	beq.n	800ca9e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2200      	movs	r2, #0
 800ca86:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f003 f911 	bl	800fcb4 <SDMMC_CmdGoIdleState>
 800ca92:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d004      	beq.n	800caa4 <SD_PowerON+0x64>
    {
      return errorstate;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	e0d2      	b.n	800cc44 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2201      	movs	r2, #1
 800caa2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d137      	bne.n	800cb1c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2100      	movs	r1, #0
 800cab2:	4618      	mov	r0, r3
 800cab4:	f003 f93c 	bl	800fd30 <SDMMC_CmdAppCommand>
 800cab8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d02d      	beq.n	800cb1c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cac0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cac4:	e0be      	b.n	800cc44 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2100      	movs	r1, #0
 800cacc:	4618      	mov	r0, r3
 800cace:	f003 f92f 	bl	800fd30 <SDMMC_CmdAppCommand>
 800cad2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d001      	beq.n	800cade <SD_PowerON+0x9e>
    {
      return errorstate;
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	e0b2      	b.n	800cc44 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	495a      	ldr	r1, [pc, #360]	; (800cc4c <SD_PowerON+0x20c>)
 800cae4:	4618      	mov	r0, r3
 800cae6:	f003 f946 	bl	800fd76 <SDMMC_CmdAppOperCommand>
 800caea:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d002      	beq.n	800caf8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800caf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800caf6:	e0a5      	b.n	800cc44 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2100      	movs	r1, #0
 800cafe:	4618      	mov	r0, r3
 800cb00:	f002 ff89 	bl	800fa16 <SDMMC_GetResponse>
 800cb04:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	0fdb      	lsrs	r3, r3, #31
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d101      	bne.n	800cb12 <SD_PowerON+0xd2>
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e000      	b.n	800cb14 <SD_PowerON+0xd4>
 800cb12:	2300      	movs	r3, #0
 800cb14:	61bb      	str	r3, [r7, #24]

    count++;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	3301      	adds	r3, #1
 800cb1a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d802      	bhi.n	800cb2c <SD_PowerON+0xec>
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d0cc      	beq.n	800cac6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d902      	bls.n	800cb3c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cb36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cb3a:	e083      	b.n	800cc44 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d07d      	beq.n	800cc42 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	699b      	ldr	r3, [r3, #24]
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d176      	bne.n	800cc42 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d071      	beq.n	800cc42 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb64:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f042 0208 	orr.w	r2, r2, #8
 800cb74:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f003 fa06 	bl	800ff8c <SDMMC_CmdVoltageSwitch>
 800cb80:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00c      	beq.n	800cba2 <SD_PowerON+0x162>
        {
          return errorstate;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	e05b      	b.n	800cc44 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cb8c:	f7f6 fa54 	bl	8003038 <HAL_GetTick>
 800cb90:	4602      	mov	r2, r0
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb9a:	d102      	bne.n	800cba2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800cb9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cba0:	e050      	b.n	800cc44 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cbac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cbb0:	d1ec      	bne.n	800cb8c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800cbba:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cbc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbca:	d002      	beq.n	800cbd2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800cbcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cbd0:	e038      	b.n	800cc44 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800cbd2:	2001      	movs	r0, #1
 800cbd4:	f7ff fb1a 	bl	800c20c <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f042 0204 	orr.w	r2, r2, #4
 800cbe6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800cbe8:	e00a      	b.n	800cc00 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cbea:	f7f6 fa25 	bl	8003038 <HAL_GetTick>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	1ad3      	subs	r3, r2, r3
 800cbf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf8:	d102      	bne.n	800cc00 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800cbfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cbfe:	e021      	b.n	800cc44 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc0e:	d1ec      	bne.n	800cbea <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800cc18:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc28:	d102      	bne.n	800cc30 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cc2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cc2e:	e009      	b.n	800cc44 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2213      	movs	r2, #19
 800cc36:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc40:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3720      	adds	r7, #32
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	c1100000 	.word	0xc1100000

0800cc50 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b08c      	sub	sp, #48	; 0x30
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cc5a:	f7f6 f9ed 	bl	8003038 <HAL_GetTick>
 800cc5e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2100      	movs	r1, #0
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f002 fed3 	bl	800fa16 <SDMMC_GetResponse>
 800cc70:	4603      	mov	r3, r0
 800cc72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc7a:	d102      	bne.n	800cc82 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cc7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc80:	e0b0      	b.n	800cde4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2140      	movs	r1, #64	; 0x40
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f002 ff03 	bl	800fa94 <SDMMC_CmdBlockLength>
 800cc8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc90:	6a3b      	ldr	r3, [r7, #32]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d005      	beq.n	800cca2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800cc9e:	6a3b      	ldr	r3, [r7, #32]
 800cca0:	e0a0      	b.n	800cde4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccaa:	041b      	lsls	r3, r3, #16
 800ccac:	4619      	mov	r1, r3
 800ccae:	4610      	mov	r0, r2
 800ccb0:	f003 f83e 	bl	800fd30 <SDMMC_CmdAppCommand>
 800ccb4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ccb6:	6a3b      	ldr	r3, [r7, #32]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d005      	beq.n	800ccc8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ccc4:	6a3b      	ldr	r3, [r7, #32]
 800ccc6:	e08d      	b.n	800cde4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ccc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cccc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ccce:	2340      	movs	r3, #64	; 0x40
 800ccd0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ccd2:	2360      	movs	r3, #96	; 0x60
 800ccd4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ccd6:	2302      	movs	r3, #2
 800ccd8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ccde:	2301      	movs	r3, #1
 800cce0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f107 0208 	add.w	r2, r7, #8
 800ccea:	4611      	mov	r1, r2
 800ccec:	4618      	mov	r0, r3
 800ccee:	f002 fea5 	bl	800fa3c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f003 f926 	bl	800ff48 <SDMMC_CmdStatusRegister>
 800ccfc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ccfe:	6a3b      	ldr	r3, [r7, #32]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d02b      	beq.n	800cd5c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800cd0c:	6a3b      	ldr	r3, [r7, #32]
 800cd0e:	e069      	b.n	800cde4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d013      	beq.n	800cd46 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800cd1e:	2300      	movs	r3, #0
 800cd20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd22:	e00d      	b.n	800cd40 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f002 fdff 	bl	800f92c <SDMMC_ReadFIFO>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd32:	601a      	str	r2, [r3, #0]
        pData++;
 800cd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd36:	3304      	adds	r3, #4
 800cd38:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800cd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd42:	2b07      	cmp	r3, #7
 800cd44:	d9ee      	bls.n	800cd24 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cd46:	f7f6 f977 	bl	8003038 <HAL_GetTick>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd54:	d102      	bne.n	800cd5c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cd56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd5a:	e043      	b.n	800cde4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd62:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0d2      	beq.n	800cd10 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd70:	f003 0308 	and.w	r3, r3, #8
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cd78:	2308      	movs	r3, #8
 800cd7a:	e033      	b.n	800cde4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd82:	f003 0302 	and.w	r3, r3, #2
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d001      	beq.n	800cd8e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd8a:	2302      	movs	r3, #2
 800cd8c:	e02a      	b.n	800cde4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd94:	f003 0320 	and.w	r3, r3, #32
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d017      	beq.n	800cdcc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800cd9c:	2320      	movs	r3, #32
 800cd9e:	e021      	b.n	800cde4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f002 fdc1 	bl	800f92c <SDMMC_ReadFIFO>
 800cdaa:	4602      	mov	r2, r0
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	601a      	str	r2, [r3, #0]
    pData++;
 800cdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cdb6:	f7f6 f93f 	bl	8003038 <HAL_GetTick>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc4:	d102      	bne.n	800cdcc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cdc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdca:	e00b      	b.n	800cde4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1e2      	bne.n	800cda0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a03      	ldr	r2, [pc, #12]	; (800cdec <SD_SendSDStatus+0x19c>)
 800cde0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3730      	adds	r7, #48	; 0x30
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	18000f3a 	.word	0x18000f3a

0800cdf0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d102      	bne.n	800ce06 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ce00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce04:	e018      	b.n	800ce38 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce0e:	041b      	lsls	r3, r3, #16
 800ce10:	4619      	mov	r1, r3
 800ce12:	4610      	mov	r0, r2
 800ce14:	f003 f875 	bl	800ff02 <SDMMC_CmdSendStatus>
 800ce18:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	e009      	b.n	800ce38 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	2100      	movs	r1, #0
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f002 fdf3 	bl	800fa16 <SDMMC_GetResponse>
 800ce30:	4602      	mov	r2, r0
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ce48:	2300      	movs	r3, #0
 800ce4a:	60fb      	str	r3, [r7, #12]
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2100      	movs	r1, #0
 800ce56:	4618      	mov	r0, r3
 800ce58:	f002 fddd 	bl	800fa16 <SDMMC_GetResponse>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce66:	d102      	bne.n	800ce6e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ce68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce6c:	e02f      	b.n	800cece <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ce6e:	f107 030c 	add.w	r3, r7, #12
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 f879 	bl	800cf6c <SD_FindSCR>
 800ce7a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	e023      	b.n	800cece <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d01c      	beq.n	800ceca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce98:	041b      	lsls	r3, r3, #16
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	f002 ff47 	bl	800fd30 <SDMMC_CmdAppCommand>
 800cea2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d001      	beq.n	800ceae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	e00f      	b.n	800cece <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2102      	movs	r1, #2
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f002 ff7e 	bl	800fdb6 <SDMMC_CmdBusWidth>
 800ceba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d001      	beq.n	800cec6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	e003      	b.n	800cece <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cec6:	2300      	movs	r3, #0
 800cec8:	e001      	b.n	800cece <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ceca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3718      	adds	r7, #24
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b086      	sub	sp, #24
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cede:	2300      	movs	r3, #0
 800cee0:	60fb      	str	r3, [r7, #12]
 800cee2:	2300      	movs	r3, #0
 800cee4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2100      	movs	r1, #0
 800ceec:	4618      	mov	r0, r3
 800ceee:	f002 fd92 	bl	800fa16 <SDMMC_GetResponse>
 800cef2:	4603      	mov	r3, r0
 800cef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cefc:	d102      	bne.n	800cf04 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cefe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf02:	e02f      	b.n	800cf64 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cf04:	f107 030c 	add.w	r3, r7, #12
 800cf08:	4619      	mov	r1, r3
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 f82e 	bl	800cf6c <SD_FindSCR>
 800cf10:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d001      	beq.n	800cf1c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	e023      	b.n	800cf64 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d01c      	beq.n	800cf60 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf2e:	041b      	lsls	r3, r3, #16
 800cf30:	4619      	mov	r1, r3
 800cf32:	4610      	mov	r0, r2
 800cf34:	f002 fefc 	bl	800fd30 <SDMMC_CmdAppCommand>
 800cf38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d001      	beq.n	800cf44 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	e00f      	b.n	800cf64 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2100      	movs	r1, #0
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f002 ff33 	bl	800fdb6 <SDMMC_CmdBusWidth>
 800cf50:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d001      	beq.n	800cf5c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	e003      	b.n	800cf64 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	e001      	b.n	800cf64 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cf60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b08e      	sub	sp, #56	; 0x38
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cf76:	f7f6 f85f 	bl	8003038 <HAL_GetTick>
 800cf7a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800cf80:	2300      	movs	r3, #0
 800cf82:	60bb      	str	r3, [r7, #8]
 800cf84:	2300      	movs	r3, #0
 800cf86:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2108      	movs	r1, #8
 800cf92:	4618      	mov	r0, r3
 800cf94:	f002 fd7e 	bl	800fa94 <SDMMC_CmdBlockLength>
 800cf98:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d001      	beq.n	800cfa4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800cfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa2:	e0ad      	b.n	800d100 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfac:	041b      	lsls	r3, r3, #16
 800cfae:	4619      	mov	r1, r3
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	f002 febd 	bl	800fd30 <SDMMC_CmdAppCommand>
 800cfb6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d001      	beq.n	800cfc2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800cfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc0:	e09e      	b.n	800d100 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cfc2:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cfc8:	2308      	movs	r3, #8
 800cfca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800cfcc:	2330      	movs	r3, #48	; 0x30
 800cfce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f107 0210 	add.w	r2, r7, #16
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f002 fd28 	bl	800fa3c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4618      	mov	r0, r3
 800cff2:	f002 ff03 	bl	800fdfc <SDMMC_CmdSendSCR>
 800cff6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d027      	beq.n	800d04e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800cffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d000:	e07e      	b.n	800d100 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d008:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d113      	bne.n	800d038 <SD_FindSCR+0xcc>
 800d010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d012:	2b00      	cmp	r3, #0
 800d014:	d110      	bne.n	800d038 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f002 fc86 	bl	800f92c <SDMMC_ReadFIFO>
 800d020:	4603      	mov	r3, r0
 800d022:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4618      	mov	r0, r3
 800d02a:	f002 fc7f 	bl	800f92c <SDMMC_ReadFIFO>
 800d02e:	4603      	mov	r3, r0
 800d030:	60fb      	str	r3, [r7, #12]
      index++;
 800d032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d034:	3301      	adds	r3, #1
 800d036:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d038:	f7f5 fffe 	bl	8003038 <HAL_GetTick>
 800d03c:	4602      	mov	r2, r0
 800d03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d040:	1ad3      	subs	r3, r2, r3
 800d042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d046:	d102      	bne.n	800d04e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d048:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d04c:	e058      	b.n	800d100 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d054:	f240 532a 	movw	r3, #1322	; 0x52a
 800d058:	4013      	ands	r3, r2
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d0d1      	beq.n	800d002 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d064:	f003 0308 	and.w	r3, r3, #8
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d005      	beq.n	800d078 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2208      	movs	r2, #8
 800d072:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d074:	2308      	movs	r3, #8
 800d076:	e043      	b.n	800d100 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d07e:	f003 0302 	and.w	r3, r3, #2
 800d082:	2b00      	cmp	r3, #0
 800d084:	d005      	beq.n	800d092 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2202      	movs	r2, #2
 800d08c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d08e:	2302      	movs	r3, #2
 800d090:	e036      	b.n	800d100 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d098:	f003 0320 	and.w	r3, r3, #32
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d005      	beq.n	800d0ac <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2220      	movs	r2, #32
 800d0a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d0a8:	2320      	movs	r3, #32
 800d0aa:	e029      	b.n	800d100 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a15      	ldr	r2, [pc, #84]	; (800d108 <SD_FindSCR+0x19c>)
 800d0b2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	061a      	lsls	r2, r3, #24
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	021b      	lsls	r3, r3, #8
 800d0bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d0c0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	0a1b      	lsrs	r3, r3, #8
 800d0c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d0ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	0e1b      	lsrs	r3, r3, #24
 800d0d0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d4:	601a      	str	r2, [r3, #0]
    scr++;
 800d0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d8:	3304      	adds	r3, #4
 800d0da:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	061a      	lsls	r2, r3, #24
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	021b      	lsls	r3, r3, #8
 800d0e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d0e8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	0a1b      	lsrs	r3, r3, #8
 800d0ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d0f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	0e1b      	lsrs	r3, r3, #24
 800d0f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3738      	adds	r7, #56	; 0x38
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	18000f3a 	.word	0x18000f3a

0800d10c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d118:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d11e:	2b1f      	cmp	r3, #31
 800d120:	d936      	bls.n	800d190 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d122:	2300      	movs	r3, #0
 800d124:	617b      	str	r3, [r7, #20]
 800d126:	e027      	b.n	800d178 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f002 fbfd 	bl	800f92c <SDMMC_ReadFIFO>
 800d132:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	b2da      	uxtb	r2, r3
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	3301      	adds	r3, #1
 800d140:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	0a1b      	lsrs	r3, r3, #8
 800d146:	b2da      	uxtb	r2, r3
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	3301      	adds	r3, #1
 800d150:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	0c1b      	lsrs	r3, r3, #16
 800d156:	b2da      	uxtb	r2, r3
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	3301      	adds	r3, #1
 800d160:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	0e1b      	lsrs	r3, r3, #24
 800d166:	b2da      	uxtb	r2, r3
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	3301      	adds	r3, #1
 800d170:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	3301      	adds	r3, #1
 800d176:	617b      	str	r3, [r7, #20]
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	2b07      	cmp	r3, #7
 800d17c:	d9d4      	bls.n	800d128 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	693a      	ldr	r2, [r7, #16]
 800d182:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d188:	f1a3 0220 	sub.w	r2, r3, #32
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d190:	bf00      	nop
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6a1b      	ldr	r3, [r3, #32]
 800d1a4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1aa:	2b1f      	cmp	r3, #31
 800d1ac:	d93a      	bls.n	800d224 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	617b      	str	r3, [r7, #20]
 800d1b2:	e02b      	b.n	800d20c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	021a      	lsls	r2, r3, #8
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	041a      	lsls	r2, r3, #16
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	061a      	lsls	r2, r3, #24
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f107 020c 	add.w	r2, r7, #12
 800d1fe:	4611      	mov	r1, r2
 800d200:	4618      	mov	r0, r3
 800d202:	f002 fba0 	bl	800f946 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	3301      	adds	r3, #1
 800d20a:	617b      	str	r3, [r7, #20]
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	2b07      	cmp	r3, #7
 800d210:	d9d0      	bls.n	800d1b4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	693a      	ldr	r2, [r7, #16]
 800d216:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21c:	f1a3 0220 	sub.w	r2, r3, #32
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d224:	bf00      	nop
 800d226:	3718      	adds	r7, #24
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d234:	bf00      	nop
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d240:	b480      	push	{r7}
 800d242:	b083      	sub	sp, #12
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d248:	bf00      	nop
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d25c:	bf00      	nop
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d270:	bf00      	nop
 800d272:	370c      	adds	r7, #12
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800d284:	2300      	movs	r3, #0
 800d286:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d101      	bne.n	800d292 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800d28e:	2301      	movs	r3, #1
 800d290:	e0e2      	b.n	800d458 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2200      	movs	r2, #0
 800d296:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a70      	ldr	r2, [pc, #448]	; (800d460 <HAL_SPI_Init+0x1e4>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d00f      	beq.n	800d2c2 <HAL_SPI_Init+0x46>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a6f      	ldr	r2, [pc, #444]	; (800d464 <HAL_SPI_Init+0x1e8>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d00a      	beq.n	800d2c2 <HAL_SPI_Init+0x46>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a6d      	ldr	r2, [pc, #436]	; (800d468 <HAL_SPI_Init+0x1ec>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d005      	beq.n	800d2c2 <HAL_SPI_Init+0x46>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	2b0f      	cmp	r3, #15
 800d2bc:	d901      	bls.n	800d2c2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e0ca      	b.n	800d458 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f001 f870 	bl	800e3a8 <SPI_GetPacketSize>
 800d2c8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a64      	ldr	r2, [pc, #400]	; (800d460 <HAL_SPI_Init+0x1e4>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d00c      	beq.n	800d2ee <HAL_SPI_Init+0x72>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a62      	ldr	r2, [pc, #392]	; (800d464 <HAL_SPI_Init+0x1e8>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d007      	beq.n	800d2ee <HAL_SPI_Init+0x72>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4a61      	ldr	r2, [pc, #388]	; (800d468 <HAL_SPI_Init+0x1ec>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d002      	beq.n	800d2ee <HAL_SPI_Init+0x72>
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	2b08      	cmp	r3, #8
 800d2ec:	d811      	bhi.n	800d312 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d2f2:	4a5b      	ldr	r2, [pc, #364]	; (800d460 <HAL_SPI_Init+0x1e4>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d009      	beq.n	800d30c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4a59      	ldr	r2, [pc, #356]	; (800d464 <HAL_SPI_Init+0x1e8>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d004      	beq.n	800d30c <HAL_SPI_Init+0x90>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4a58      	ldr	r2, [pc, #352]	; (800d468 <HAL_SPI_Init+0x1ec>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d104      	bne.n	800d316 <HAL_SPI_Init+0x9a>
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	2b10      	cmp	r3, #16
 800d310:	d901      	bls.n	800d316 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800d312:	2301      	movs	r3, #1
 800d314:	e0a0      	b.n	800d458 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d106      	bne.n	800d330 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7f5 fb56 	bl	80029dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2202      	movs	r2, #2
 800d334:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f022 0201 	bic.w	r2, r2, #1
 800d346:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d350:	d110      	bne.n	800d374 <HAL_SPI_Init+0xf8>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d35a:	d10b      	bne.n	800d374 <HAL_SPI_Init+0xf8>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d360:	2b00      	cmp	r3, #0
 800d362:	d107      	bne.n	800d374 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d372:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	69da      	ldr	r2, [r3, #28]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d37c:	431a      	orrs	r2, r3
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	431a      	orrs	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d386:	ea42 0103 	orr.w	r1, r2, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	68da      	ldr	r2, [r3, #12]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	430a      	orrs	r2, r1
 800d394:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39e:	431a      	orrs	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a4:	431a      	orrs	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	699b      	ldr	r3, [r3, #24]
 800d3aa:	431a      	orrs	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	691b      	ldr	r3, [r3, #16]
 800d3b0:	431a      	orrs	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	695b      	ldr	r3, [r3, #20]
 800d3b6:	431a      	orrs	r2, r3
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a1b      	ldr	r3, [r3, #32]
 800d3bc:	431a      	orrs	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	431a      	orrs	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3c8:	431a      	orrs	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	431a      	orrs	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3d4:	ea42 0103 	orr.w	r1, r2, r3
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	430a      	orrs	r2, r1
 800d3e2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d113      	bne.n	800d414 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3fe:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d412:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f022 0201 	bic.w	r2, r2, #1
 800d422:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00a      	beq.n	800d446 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	68db      	ldr	r3, [r3, #12]
 800d436:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	430a      	orrs	r2, r1
 800d444:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2200      	movs	r2, #0
 800d44a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2201      	movs	r2, #1
 800d452:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	40013000 	.word	0x40013000
 800d464:	40003800 	.word	0x40003800
 800d468:	40003c00 	.word	0x40003c00

0800d46c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b08a      	sub	sp, #40	; 0x28
 800d470:	af02      	add	r7, sp, #8
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	603b      	str	r3, [r7, #0]
 800d478:	4613      	mov	r3, r2
 800d47a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	3320      	adds	r3, #32
 800d482:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d101      	bne.n	800d496 <HAL_SPI_Transmit+0x2a>
 800d492:	2302      	movs	r3, #2
 800d494:	e1d7      	b.n	800d846 <HAL_SPI_Transmit+0x3da>
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2201      	movs	r2, #1
 800d49a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d49e:	f7f5 fdcb 	bl	8003038 <HAL_GetTick>
 800d4a2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d007      	beq.n	800d4c0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d4b0:	2302      	movs	r3, #2
 800d4b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d4bc:	7efb      	ldrb	r3, [r7, #27]
 800d4be:	e1c2      	b.n	800d846 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d002      	beq.n	800d4cc <HAL_SPI_Transmit+0x60>
 800d4c6:	88fb      	ldrh	r3, [r7, #6]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d107      	bne.n	800d4dc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d4d8:	7efb      	ldrb	r3, [r7, #27]
 800d4da:	e1b4      	b.n	800d846 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2203      	movs	r2, #3
 800d4e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	68ba      	ldr	r2, [r7, #8]
 800d4f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	88fa      	ldrh	r2, [r7, #6]
 800d4f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	88fa      	ldrh	r2, [r7, #6]
 800d4fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2200      	movs	r2, #0
 800d506:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2200      	movs	r2, #0
 800d514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2200      	movs	r2, #0
 800d51c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2200      	movs	r2, #0
 800d522:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	689b      	ldr	r3, [r3, #8]
 800d528:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d52c:	d107      	bne.n	800d53e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d53c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	685a      	ldr	r2, [r3, #4]
 800d544:	4b96      	ldr	r3, [pc, #600]	; (800d7a0 <HAL_SPI_Transmit+0x334>)
 800d546:	4013      	ands	r3, r2
 800d548:	88f9      	ldrh	r1, [r7, #6]
 800d54a:	68fa      	ldr	r2, [r7, #12]
 800d54c:	6812      	ldr	r2, [r2, #0]
 800d54e:	430b      	orrs	r3, r1
 800d550:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f042 0201 	orr.w	r2, r2, #1
 800d560:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d56a:	d107      	bne.n	800d57c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d57a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	2b0f      	cmp	r3, #15
 800d582:	d947      	bls.n	800d614 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d584:	e03f      	b.n	800d606 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	695b      	ldr	r3, [r3, #20]
 800d58c:	f003 0302 	and.w	r3, r3, #2
 800d590:	2b02      	cmp	r3, #2
 800d592:	d114      	bne.n	800d5be <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	6812      	ldr	r2, [r2, #0]
 800d59e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5a4:	1d1a      	adds	r2, r3, #4
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	3b01      	subs	r3, #1
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d5bc:	e023      	b.n	800d606 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5be:	f7f5 fd3b 	bl	8003038 <HAL_GetTick>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	1ad3      	subs	r3, r2, r3
 800d5c8:	683a      	ldr	r2, [r7, #0]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d803      	bhi.n	800d5d6 <HAL_SPI_Transmit+0x16a>
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5d4:	d102      	bne.n	800d5dc <HAL_SPI_Transmit+0x170>
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d114      	bne.n	800d606 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f000 fe15 	bl	800e20c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d602:	2301      	movs	r3, #1
 800d604:	e11f      	b.n	800d846 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d1b9      	bne.n	800d586 <HAL_SPI_Transmit+0x11a>
 800d612:	e0f2      	b.n	800d7fa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	2b07      	cmp	r3, #7
 800d61a:	f240 80e7 	bls.w	800d7ec <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d61e:	e05d      	b.n	800d6dc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	695b      	ldr	r3, [r3, #20]
 800d626:	f003 0302 	and.w	r3, r3, #2
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d132      	bne.n	800d694 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d634:	b29b      	uxth	r3, r3
 800d636:	2b01      	cmp	r3, #1
 800d638:	d918      	bls.n	800d66c <HAL_SPI_Transmit+0x200>
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d014      	beq.n	800d66c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	6812      	ldr	r2, [r2, #0]
 800d64c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d652:	1d1a      	adds	r2, r3, #4
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d65e:	b29b      	uxth	r3, r3
 800d660:	3b02      	subs	r3, #2
 800d662:	b29a      	uxth	r2, r3
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d66a:	e037      	b.n	800d6dc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d670:	881a      	ldrh	r2, [r3, #0]
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d67a:	1c9a      	adds	r2, r3, #2
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d686:	b29b      	uxth	r3, r3
 800d688:	3b01      	subs	r3, #1
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d692:	e023      	b.n	800d6dc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d694:	f7f5 fcd0 	bl	8003038 <HAL_GetTick>
 800d698:	4602      	mov	r2, r0
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	1ad3      	subs	r3, r2, r3
 800d69e:	683a      	ldr	r2, [r7, #0]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d803      	bhi.n	800d6ac <HAL_SPI_Transmit+0x240>
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6aa:	d102      	bne.n	800d6b2 <HAL_SPI_Transmit+0x246>
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d114      	bne.n	800d6dc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d6b2:	68f8      	ldr	r0, [r7, #12]
 800d6b4:	f000 fdaa 	bl	800e20c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e0b4      	b.n	800d846 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d19b      	bne.n	800d620 <HAL_SPI_Transmit+0x1b4>
 800d6e8:	e087      	b.n	800d7fa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	695b      	ldr	r3, [r3, #20]
 800d6f0:	f003 0302 	and.w	r3, r3, #2
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	d155      	bne.n	800d7a4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	2b03      	cmp	r3, #3
 800d702:	d918      	bls.n	800d736 <HAL_SPI_Transmit+0x2ca>
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d708:	2b40      	cmp	r3, #64	; 0x40
 800d70a:	d914      	bls.n	800d736 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	6812      	ldr	r2, [r2, #0]
 800d716:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d71c:	1d1a      	adds	r2, r3, #4
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d728:	b29b      	uxth	r3, r3
 800d72a:	3b04      	subs	r3, #4
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d734:	e05a      	b.n	800d7ec <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d917      	bls.n	800d772 <HAL_SPI_Transmit+0x306>
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d746:	2b00      	cmp	r3, #0
 800d748:	d013      	beq.n	800d772 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d74e:	881a      	ldrh	r2, [r3, #0]
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d758:	1c9a      	adds	r2, r3, #2
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d764:	b29b      	uxth	r3, r3
 800d766:	3b02      	subs	r3, #2
 800d768:	b29a      	uxth	r2, r3
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d770:	e03c      	b.n	800d7ec <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	3320      	adds	r3, #32
 800d77c:	7812      	ldrb	r2, [r2, #0]
 800d77e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d784:	1c5a      	adds	r2, r3, #1
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d790:	b29b      	uxth	r3, r3
 800d792:	3b01      	subs	r3, #1
 800d794:	b29a      	uxth	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d79c:	e026      	b.n	800d7ec <HAL_SPI_Transmit+0x380>
 800d79e:	bf00      	nop
 800d7a0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7a4:	f7f5 fc48 	bl	8003038 <HAL_GetTick>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	1ad3      	subs	r3, r2, r3
 800d7ae:	683a      	ldr	r2, [r7, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d803      	bhi.n	800d7bc <HAL_SPI_Transmit+0x350>
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ba:	d102      	bne.n	800d7c2 <HAL_SPI_Transmit+0x356>
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d114      	bne.n	800d7ec <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f000 fd22 	bl	800e20c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e02c      	b.n	800d846 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f47f af78 	bne.w	800d6ea <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	2200      	movs	r2, #0
 800d802:	2108      	movs	r1, #8
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f000 fda1 	bl	800e34c <SPI_WaitOnFlagUntilTimeout>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d007      	beq.n	800d820 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d816:	f043 0220 	orr.w	r2, r3, #32
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d820:	68f8      	ldr	r0, [r7, #12]
 800d822:	f000 fcf3 	bl	800e20c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2201      	movs	r2, #1
 800d832:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d001      	beq.n	800d844 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d840:	2301      	movs	r3, #1
 800d842:	e000      	b.n	800d846 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d844:	7efb      	ldrb	r3, [r7, #27]
}
 800d846:	4618      	mov	r0, r3
 800d848:	3720      	adds	r7, #32
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop

0800d850 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b08a      	sub	sp, #40	; 0x28
 800d854:	af02      	add	r7, sp, #8
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	603b      	str	r3, [r7, #0]
 800d85c:	4613      	mov	r3, r2
 800d85e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d860:	2300      	movs	r3, #0
 800d862:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	3330      	adds	r3, #48	; 0x30
 800d86a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d874:	d112      	bne.n	800d89c <HAL_SPI_Receive+0x4c>
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	689b      	ldr	r3, [r3, #8]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d10e      	bne.n	800d89c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2204      	movs	r2, #4
 800d882:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d886:	88fa      	ldrh	r2, [r7, #6]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	9300      	str	r3, [sp, #0]
 800d88c:	4613      	mov	r3, r2
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	68b9      	ldr	r1, [r7, #8]
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	f000 f9ce 	bl	800dc34 <HAL_SPI_TransmitReceive>
 800d898:	4603      	mov	r3, r0
 800d89a:	e1c7      	b.n	800dc2c <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d101      	bne.n	800d8aa <HAL_SPI_Receive+0x5a>
 800d8a6:	2302      	movs	r3, #2
 800d8a8:	e1c0      	b.n	800dc2c <HAL_SPI_Receive+0x3dc>
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d8b2:	f7f5 fbc1 	bl	8003038 <HAL_GetTick>
 800d8b6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d007      	beq.n	800d8d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800d8c4:	2302      	movs	r3, #2
 800d8c6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d8d0:	7ffb      	ldrb	r3, [r7, #31]
 800d8d2:	e1ab      	b.n	800dc2c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d002      	beq.n	800d8e0 <HAL_SPI_Receive+0x90>
 800d8da:	88fb      	ldrh	r3, [r7, #6]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d107      	bne.n	800d8f0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d8ec:	7ffb      	ldrb	r3, [r7, #31]
 800d8ee:	e19d      	b.n	800dc2c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2204      	movs	r2, #4
 800d8f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	68ba      	ldr	r2, [r7, #8]
 800d904:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	88fa      	ldrh	r2, [r7, #6]
 800d90a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	88fa      	ldrh	r2, [r7, #6]
 800d912:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2200      	movs	r2, #0
 800d920:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2200      	movs	r2, #0
 800d928:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2200      	movs	r2, #0
 800d930:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2200      	movs	r2, #0
 800d936:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d940:	d107      	bne.n	800d952 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d950:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	685a      	ldr	r2, [r3, #4]
 800d958:	4b94      	ldr	r3, [pc, #592]	; (800dbac <HAL_SPI_Receive+0x35c>)
 800d95a:	4013      	ands	r3, r2
 800d95c:	88f9      	ldrh	r1, [r7, #6]
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	6812      	ldr	r2, [r2, #0]
 800d962:	430b      	orrs	r3, r1
 800d964:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f042 0201 	orr.w	r2, r2, #1
 800d974:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d97e:	d107      	bne.n	800d990 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d98e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	2b0f      	cmp	r3, #15
 800d996:	d948      	bls.n	800da2a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d998:	e040      	b.n	800da1c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	695a      	ldr	r2, [r3, #20]
 800d9a0:	f248 0308 	movw	r3, #32776	; 0x8008
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d014      	beq.n	800d9d4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d9b4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9ba:	1d1a      	adds	r2, r3, #4
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	3b01      	subs	r3, #1
 800d9ca:	b29a      	uxth	r2, r3
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d9d2:	e023      	b.n	800da1c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d9d4:	f7f5 fb30 	bl	8003038 <HAL_GetTick>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	1ad3      	subs	r3, r2, r3
 800d9de:	683a      	ldr	r2, [r7, #0]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d803      	bhi.n	800d9ec <HAL_SPI_Receive+0x19c>
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ea:	d102      	bne.n	800d9f2 <HAL_SPI_Receive+0x1a2>
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d114      	bne.n	800da1c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f000 fc0a 	bl	800e20c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800da18:	2301      	movs	r3, #1
 800da1a:	e107      	b.n	800dc2c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da22:	b29b      	uxth	r3, r3
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1b8      	bne.n	800d99a <HAL_SPI_Receive+0x14a>
 800da28:	e0ed      	b.n	800dc06 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	2b07      	cmp	r3, #7
 800da30:	f240 80e2 	bls.w	800dbf8 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800da34:	e05b      	b.n	800daee <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	695b      	ldr	r3, [r3, #20]
 800da3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800da40:	2b00      	cmp	r3, #0
 800da42:	d030      	beq.n	800daa6 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d014      	beq.n	800da7c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800da5c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da62:	1d1a      	adds	r2, r3, #4
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da6e:	b29b      	uxth	r3, r3
 800da70:	3b02      	subs	r3, #2
 800da72:	b29a      	uxth	r2, r3
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800da7a:	e038      	b.n	800daee <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da80:	69ba      	ldr	r2, [r7, #24]
 800da82:	8812      	ldrh	r2, [r2, #0]
 800da84:	b292      	uxth	r2, r2
 800da86:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da8c:	1c9a      	adds	r2, r3, #2
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da98:	b29b      	uxth	r3, r3
 800da9a:	3b01      	subs	r3, #1
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800daa4:	e023      	b.n	800daee <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800daa6:	f7f5 fac7 	bl	8003038 <HAL_GetTick>
 800daaa:	4602      	mov	r2, r0
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	1ad3      	subs	r3, r2, r3
 800dab0:	683a      	ldr	r2, [r7, #0]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d803      	bhi.n	800dabe <HAL_SPI_Receive+0x26e>
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dabc:	d102      	bne.n	800dac4 <HAL_SPI_Receive+0x274>
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d114      	bne.n	800daee <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f000 fba1 	bl	800e20c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2200      	movs	r2, #0
 800dace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dad8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2201      	movs	r2, #1
 800dae6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800daea:	2301      	movs	r3, #1
 800daec:	e09e      	b.n	800dc2c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d19d      	bne.n	800da36 <HAL_SPI_Receive+0x1e6>
 800dafa:	e084      	b.n	800dc06 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	695b      	ldr	r3, [r3, #20]
 800db02:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800db06:	2b00      	cmp	r3, #0
 800db08:	d052      	beq.n	800dbb0 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	695b      	ldr	r3, [r3, #20]
 800db10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db14:	2b00      	cmp	r3, #0
 800db16:	d014      	beq.n	800db42 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800db22:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db28:	1d1a      	adds	r2, r3, #4
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db34:	b29b      	uxth	r3, r3
 800db36:	3b04      	subs	r3, #4
 800db38:	b29a      	uxth	r2, r3
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800db40:	e05a      	b.n	800dbf8 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	695b      	ldr	r3, [r3, #20]
 800db48:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800db4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db50:	d914      	bls.n	800db7c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db56:	69ba      	ldr	r2, [r7, #24]
 800db58:	8812      	ldrh	r2, [r2, #0]
 800db5a:	b292      	uxth	r2, r2
 800db5c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db62:	1c9a      	adds	r2, r3, #2
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db6e:	b29b      	uxth	r3, r3
 800db70:	3b02      	subs	r3, #2
 800db72:	b29a      	uxth	r2, r3
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800db7a:	e03d      	b.n	800dbf8 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db88:	7812      	ldrb	r2, [r2, #0]
 800db8a:	b2d2      	uxtb	r2, r2
 800db8c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db92:	1c5a      	adds	r2, r3, #1
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	3b01      	subs	r3, #1
 800dba2:	b29a      	uxth	r2, r3
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dbaa:	e025      	b.n	800dbf8 <HAL_SPI_Receive+0x3a8>
 800dbac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dbb0:	f7f5 fa42 	bl	8003038 <HAL_GetTick>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	683a      	ldr	r2, [r7, #0]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d803      	bhi.n	800dbc8 <HAL_SPI_Receive+0x378>
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc6:	d102      	bne.n	800dbce <HAL_SPI_Receive+0x37e>
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d114      	bne.n	800dbf8 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f000 fb1c 	bl	800e20c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbe2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	e019      	b.n	800dc2c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f47f af7b 	bne.w	800dafc <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	f000 fb00 	bl	800e20c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2201      	movs	r2, #1
 800dc18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d001      	beq.n	800dc2a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800dc26:	2301      	movs	r3, #1
 800dc28:	e000      	b.n	800dc2c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800dc2a:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3720      	adds	r7, #32
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b08e      	sub	sp, #56	; 0x38
 800dc38:	af02      	add	r7, sp, #8
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
 800dc40:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dc42:	2300      	movs	r3, #0
 800dc44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	3320      	adds	r3, #32
 800dc4e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	3330      	adds	r3, #48	; 0x30
 800dc56:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d101      	bne.n	800dc66 <HAL_SPI_TransmitReceive+0x32>
 800dc62:	2302      	movs	r3, #2
 800dc64:	e2ce      	b.n	800e204 <HAL_SPI_TransmitReceive+0x5d0>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc6e:	f7f5 f9e3 	bl	8003038 <HAL_GetTick>
 800dc72:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800dc74:	887b      	ldrh	r3, [r7, #2]
 800dc76:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800dc78:	887b      	ldrh	r3, [r7, #2]
 800dc7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dc82:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dc8a:	7efb      	ldrb	r3, [r7, #27]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d014      	beq.n	800dcba <HAL_SPI_TransmitReceive+0x86>
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc96:	d106      	bne.n	800dca6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d102      	bne.n	800dca6 <HAL_SPI_TransmitReceive+0x72>
 800dca0:	7efb      	ldrb	r3, [r7, #27]
 800dca2:	2b04      	cmp	r3, #4
 800dca4:	d009      	beq.n	800dcba <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800dca6:	2302      	movs	r3, #2
 800dca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dcb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dcb8:	e2a4      	b.n	800e204 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d005      	beq.n	800dccc <HAL_SPI_TransmitReceive+0x98>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d002      	beq.n	800dccc <HAL_SPI_TransmitReceive+0x98>
 800dcc6:	887b      	ldrh	r3, [r7, #2]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d109      	bne.n	800dce0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800dccc:	2301      	movs	r3, #1
 800dcce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dcda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dcde:	e291      	b.n	800e204 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	2b04      	cmp	r3, #4
 800dcea:	d003      	beq.n	800dcf4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2205      	movs	r2, #5
 800dcf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	887a      	ldrh	r2, [r7, #2]
 800dd06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	887a      	ldrh	r2, [r7, #2]
 800dd0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	68ba      	ldr	r2, [r7, #8]
 800dd16:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	887a      	ldrh	r2, [r7, #2]
 800dd1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	887a      	ldrh	r2, [r7, #2]
 800dd24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2200      	movs	r2, #0
 800dd32:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	685a      	ldr	r2, [r3, #4]
 800dd3a:	4b9f      	ldr	r3, [pc, #636]	; (800dfb8 <HAL_SPI_TransmitReceive+0x384>)
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	8879      	ldrh	r1, [r7, #2]
 800dd40:	68fa      	ldr	r2, [r7, #12]
 800dd42:	6812      	ldr	r2, [r2, #0]
 800dd44:	430b      	orrs	r3, r1
 800dd46:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f042 0201 	orr.w	r2, r2, #1
 800dd56:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd60:	d107      	bne.n	800dd72 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	2b0f      	cmp	r3, #15
 800dd78:	d970      	bls.n	800de5c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dd7a:	e068      	b.n	800de4e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	695b      	ldr	r3, [r3, #20]
 800dd82:	f003 0302 	and.w	r3, r3, #2
 800dd86:	2b02      	cmp	r3, #2
 800dd88:	d11a      	bne.n	800ddc0 <HAL_SPI_TransmitReceive+0x18c>
 800dd8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d017      	beq.n	800ddc0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	6812      	ldr	r2, [r2, #0]
 800dd9a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dda0:	1d1a      	adds	r2, r3, #4
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	3b01      	subs	r3, #1
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	695a      	ldr	r2, [r3, #20]
 800ddc6:	f248 0308 	movw	r3, #32776	; 0x8008
 800ddca:	4013      	ands	r3, r2
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d01a      	beq.n	800de06 <HAL_SPI_TransmitReceive+0x1d2>
 800ddd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d017      	beq.n	800de06 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddde:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dde0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dde6:	1d1a      	adds	r2, r3, #4
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de04:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de06:	f7f5 f917 	bl	8003038 <HAL_GetTick>
 800de0a:	4602      	mov	r2, r0
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	1ad3      	subs	r3, r2, r3
 800de10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de12:	429a      	cmp	r2, r3
 800de14:	d803      	bhi.n	800de1e <HAL_SPI_TransmitReceive+0x1ea>
 800de16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de1c:	d102      	bne.n	800de24 <HAL_SPI_TransmitReceive+0x1f0>
 800de1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de20:	2b00      	cmp	r3, #0
 800de22:	d114      	bne.n	800de4e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800de24:	68f8      	ldr	r0, [r7, #12]
 800de26:	f000 f9f1 	bl	800e20c <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2200      	movs	r2, #0
 800de2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2201      	movs	r2, #1
 800de46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	e1da      	b.n	800e204 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800de4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de50:	2b00      	cmp	r3, #0
 800de52:	d193      	bne.n	800dd7c <HAL_SPI_TransmitReceive+0x148>
 800de54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800de56:	2b00      	cmp	r3, #0
 800de58:	d190      	bne.n	800dd7c <HAL_SPI_TransmitReceive+0x148>
 800de5a:	e1ac      	b.n	800e1b6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	2b07      	cmp	r3, #7
 800de62:	f240 81a0 	bls.w	800e1a6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800de66:	e0a9      	b.n	800dfbc <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	695b      	ldr	r3, [r3, #20]
 800de6e:	f003 0302 	and.w	r3, r3, #2
 800de72:	2b02      	cmp	r3, #2
 800de74:	d139      	bne.n	800deea <HAL_SPI_TransmitReceive+0x2b6>
 800de76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d036      	beq.n	800deea <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800de7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d91c      	bls.n	800debc <HAL_SPI_TransmitReceive+0x288>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de86:	2b00      	cmp	r3, #0
 800de88:	d018      	beq.n	800debc <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	6812      	ldr	r2, [r2, #0]
 800de94:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de9a:	1d1a      	adds	r2, r3, #4
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	3b02      	subs	r3, #2
 800deaa:	b29a      	uxth	r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800deb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800deba:	e016      	b.n	800deea <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dec0:	881a      	ldrh	r2, [r3, #0]
 800dec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deca:	1c9a      	adds	r2, r3, #2
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	3b01      	subs	r3, #1
 800deda:	b29a      	uxth	r2, r3
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dee8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	695b      	ldr	r3, [r3, #20]
 800def0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800def4:	2b00      	cmp	r3, #0
 800def6:	d03a      	beq.n	800df6e <HAL_SPI_TransmitReceive+0x33a>
 800def8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800defa:	2b00      	cmp	r3, #0
 800defc:	d037      	beq.n	800df6e <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	695b      	ldr	r3, [r3, #20]
 800df04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d018      	beq.n	800df3e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681a      	ldr	r2, [r3, #0]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800df16:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df1c:	1d1a      	adds	r2, r3, #4
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df28:	b29b      	uxth	r3, r3
 800df2a:	3b02      	subs	r3, #2
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800df3c:	e017      	b.n	800df6e <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df42:	6a3a      	ldr	r2, [r7, #32]
 800df44:	8812      	ldrh	r2, [r2, #0]
 800df46:	b292      	uxth	r2, r2
 800df48:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df4e:	1c9a      	adds	r2, r3, #2
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	3b01      	subs	r3, #1
 800df5e:	b29a      	uxth	r2, r3
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df6c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df6e:	f7f5 f863 	bl	8003038 <HAL_GetTick>
 800df72:	4602      	mov	r2, r0
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	1ad3      	subs	r3, r2, r3
 800df78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d803      	bhi.n	800df86 <HAL_SPI_TransmitReceive+0x352>
 800df7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df84:	d102      	bne.n	800df8c <HAL_SPI_TransmitReceive+0x358>
 800df86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d117      	bne.n	800dfbc <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f000 f93d 	bl	800e20c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2200      	movs	r2, #0
 800df96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2201      	movs	r2, #1
 800dfae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e126      	b.n	800e204 <HAL_SPI_TransmitReceive+0x5d0>
 800dfb6:	bf00      	nop
 800dfb8:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dfbc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f47f af52 	bne.w	800de68 <HAL_SPI_TransmitReceive+0x234>
 800dfc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	f47f af4e 	bne.w	800de68 <HAL_SPI_TransmitReceive+0x234>
 800dfcc:	e0f3      	b.n	800e1b6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	695b      	ldr	r3, [r3, #20]
 800dfd4:	f003 0302 	and.w	r3, r3, #2
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	d15a      	bne.n	800e092 <HAL_SPI_TransmitReceive+0x45e>
 800dfdc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d057      	beq.n	800e092 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dfe2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dfe4:	2b03      	cmp	r3, #3
 800dfe6:	d91c      	bls.n	800e022 <HAL_SPI_TransmitReceive+0x3ee>
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfec:	2b40      	cmp	r3, #64	; 0x40
 800dfee:	d918      	bls.n	800e022 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	6812      	ldr	r2, [r2, #0]
 800dffa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e000:	1d1a      	adds	r2, r3, #4
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	3b04      	subs	r3, #4
 800e010:	b29a      	uxth	r2, r3
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e01e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e020:	e037      	b.n	800e092 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e024:	2b01      	cmp	r3, #1
 800e026:	d91b      	bls.n	800e060 <HAL_SPI_TransmitReceive+0x42c>
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d017      	beq.n	800e060 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e034:	881a      	ldrh	r2, [r3, #0]
 800e036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e038:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e03e:	1c9a      	adds	r2, r3, #2
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	3b02      	subs	r3, #2
 800e04e:	b29a      	uxth	r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e05c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e05e:	e018      	b.n	800e092 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	3320      	adds	r3, #32
 800e06a:	7812      	ldrb	r2, [r2, #0]
 800e06c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e072:	1c5a      	adds	r2, r3, #1
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e07e:	b29b      	uxth	r3, r3
 800e080:	3b01      	subs	r3, #1
 800e082:	b29a      	uxth	r2, r3
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e090:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	695b      	ldr	r3, [r3, #20]
 800e098:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d05e      	beq.n	800e15e <HAL_SPI_TransmitReceive+0x52a>
 800e0a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d05b      	beq.n	800e15e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	695b      	ldr	r3, [r3, #20]
 800e0ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d018      	beq.n	800e0e6 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e0be:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0c4:	1d1a      	adds	r2, r3, #4
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	3b04      	subs	r3, #4
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e0e4:	e03b      	b.n	800e15e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	695b      	ldr	r3, [r3, #20]
 800e0ec:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e0f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0f4:	d918      	bls.n	800e128 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0fa:	6a3a      	ldr	r2, [r7, #32]
 800e0fc:	8812      	ldrh	r2, [r2, #0]
 800e0fe:	b292      	uxth	r2, r2
 800e100:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e106:	1c9a      	adds	r2, r3, #2
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e112:	b29b      	uxth	r3, r3
 800e114:	3b02      	subs	r3, #2
 800e116:	b29a      	uxth	r2, r3
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e124:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e126:	e01a      	b.n	800e15e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e134:	7812      	ldrb	r2, [r2, #0]
 800e136:	b2d2      	uxtb	r2, r2
 800e138:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e13e:	1c5a      	adds	r2, r3, #1
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	3b01      	subs	r3, #1
 800e14e:	b29a      	uxth	r2, r3
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e15c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e15e:	f7f4 ff6b 	bl	8003038 <HAL_GetTick>
 800e162:	4602      	mov	r2, r0
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	1ad3      	subs	r3, r2, r3
 800e168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d803      	bhi.n	800e176 <HAL_SPI_TransmitReceive+0x542>
 800e16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e174:	d102      	bne.n	800e17c <HAL_SPI_TransmitReceive+0x548>
 800e176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d114      	bne.n	800e1a6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f000 f845 	bl	800e20c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2200      	movs	r2, #0
 800e186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e190:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2201      	movs	r2, #1
 800e19e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e02e      	b.n	800e204 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e1a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f47f af10 	bne.w	800dfce <HAL_SPI_TransmitReceive+0x39a>
 800e1ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f47f af0c 	bne.w	800dfce <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	2108      	movs	r1, #8
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f000 f8c3 	bl	800e34c <SPI_WaitOnFlagUntilTimeout>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d007      	beq.n	800e1dc <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1d2:	f043 0220 	orr.w	r2, r3, #32
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	f000 f815 	bl	800e20c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d001      	beq.n	800e200 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	e001      	b.n	800e204 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800e200:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e204:	4618      	mov	r0, r3
 800e206:	3730      	adds	r7, #48	; 0x30
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b085      	sub	sp, #20
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	695b      	ldr	r3, [r3, #20]
 800e21a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	699a      	ldr	r2, [r3, #24]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f042 0208 	orr.w	r2, r2, #8
 800e22a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	699a      	ldr	r2, [r3, #24]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f042 0210 	orr.w	r2, r2, #16
 800e23a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f022 0201 	bic.w	r2, r2, #1
 800e24a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	6919      	ldr	r1, [r3, #16]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681a      	ldr	r2, [r3, #0]
 800e256:	4b3c      	ldr	r3, [pc, #240]	; (800e348 <SPI_CloseTransfer+0x13c>)
 800e258:	400b      	ands	r3, r1
 800e25a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	689a      	ldr	r2, [r3, #8]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e26a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e272:	b2db      	uxtb	r3, r3
 800e274:	2b04      	cmp	r3, #4
 800e276:	d014      	beq.n	800e2a2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f003 0320 	and.w	r3, r3, #32
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00f      	beq.n	800e2a2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e288:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	699a      	ldr	r2, [r3, #24]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f042 0220 	orr.w	r2, r2, #32
 800e2a0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e2a8:	b2db      	uxtb	r3, r3
 800e2aa:	2b03      	cmp	r3, #3
 800e2ac:	d014      	beq.n	800e2d8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d00f      	beq.n	800e2d8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2be:	f043 0204 	orr.w	r2, r3, #4
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	699a      	ldr	r2, [r3, #24]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2d6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00f      	beq.n	800e302 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2e8:	f043 0201 	orr.w	r2, r3, #1
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	699a      	ldr	r2, [r3, #24]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e300:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00f      	beq.n	800e32c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e312:	f043 0208 	orr.w	r2, r3, #8
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	699a      	ldr	r2, [r3, #24]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e32a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2200      	movs	r2, #0
 800e330:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e33c:	bf00      	nop
 800e33e:	3714      	adds	r7, #20
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr
 800e348:	fffffc90 	.word	0xfffffc90

0800e34c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b084      	sub	sp, #16
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	603b      	str	r3, [r7, #0]
 800e358:	4613      	mov	r3, r2
 800e35a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e35c:	e010      	b.n	800e380 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e35e:	f7f4 fe6b 	bl	8003038 <HAL_GetTick>
 800e362:	4602      	mov	r2, r0
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	1ad3      	subs	r3, r2, r3
 800e368:	69ba      	ldr	r2, [r7, #24]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d803      	bhi.n	800e376 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e36e:	69bb      	ldr	r3, [r7, #24]
 800e370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e374:	d102      	bne.n	800e37c <SPI_WaitOnFlagUntilTimeout+0x30>
 800e376:	69bb      	ldr	r3, [r7, #24]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d101      	bne.n	800e380 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e37c:	2303      	movs	r3, #3
 800e37e:	e00f      	b.n	800e3a0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	695a      	ldr	r2, [r3, #20]
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	4013      	ands	r3, r2
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	bf0c      	ite	eq
 800e390:	2301      	moveq	r3, #1
 800e392:	2300      	movne	r3, #0
 800e394:	b2db      	uxtb	r3, r3
 800e396:	461a      	mov	r2, r3
 800e398:	79fb      	ldrb	r3, [r7, #7]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d0df      	beq.n	800e35e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b4:	095b      	lsrs	r3, r3, #5
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	68db      	ldr	r3, [r3, #12]
 800e3be:	3301      	adds	r3, #1
 800e3c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	3307      	adds	r3, #7
 800e3c6:	08db      	lsrs	r3, r3, #3
 800e3c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	68fa      	ldr	r2, [r7, #12]
 800e3ce:	fb02 f303 	mul.w	r3, r2, r3
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b082      	sub	sp, #8
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d101      	bne.n	800e3f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e042      	b.n	800e476 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d106      	bne.n	800e408 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7f4 fb34 	bl	8002a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2224      	movs	r2, #36	; 0x24
 800e40c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f022 0201 	bic.w	r2, r2, #1
 800e41e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 f95f 	bl	800e6e4 <UART_SetConfig>
 800e426:	4603      	mov	r3, r0
 800e428:	2b01      	cmp	r3, #1
 800e42a:	d101      	bne.n	800e430 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e42c:	2301      	movs	r3, #1
 800e42e:	e022      	b.n	800e476 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e434:	2b00      	cmp	r3, #0
 800e436:	d002      	beq.n	800e43e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 ff03 	bl	800f244 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	685a      	ldr	r2, [r3, #4]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e44c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	689a      	ldr	r2, [r3, #8]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e45c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f042 0201 	orr.w	r2, r2, #1
 800e46c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 ff8a 	bl	800f388 <UART_CheckIdleState>
 800e474:	4603      	mov	r3, r0
}
 800e476:	4618      	mov	r0, r3
 800e478:	3708      	adds	r7, #8
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}

0800e47e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b08a      	sub	sp, #40	; 0x28
 800e482:	af02      	add	r7, sp, #8
 800e484:	60f8      	str	r0, [r7, #12]
 800e486:	60b9      	str	r1, [r7, #8]
 800e488:	603b      	str	r3, [r7, #0]
 800e48a:	4613      	mov	r3, r2
 800e48c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e494:	2b20      	cmp	r3, #32
 800e496:	f040 8083 	bne.w	800e5a0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d002      	beq.n	800e4a6 <HAL_UART_Transmit+0x28>
 800e4a0:	88fb      	ldrh	r3, [r7, #6]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d101      	bne.n	800e4aa <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	e07b      	b.n	800e5a2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d101      	bne.n	800e4b8 <HAL_UART_Transmit+0x3a>
 800e4b4:	2302      	movs	r3, #2
 800e4b6:	e074      	b.n	800e5a2 <HAL_UART_Transmit+0x124>
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2221      	movs	r2, #33	; 0x21
 800e4cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800e4d0:	f7f4 fdb2 	bl	8003038 <HAL_GetTick>
 800e4d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	88fa      	ldrh	r2, [r7, #6]
 800e4da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	88fa      	ldrh	r2, [r7, #6]
 800e4e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	689b      	ldr	r3, [r3, #8]
 800e4ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4ee:	d108      	bne.n	800e502 <HAL_UART_Transmit+0x84>
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	691b      	ldr	r3, [r3, #16]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d104      	bne.n	800e502 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	61bb      	str	r3, [r7, #24]
 800e500:	e003      	b.n	800e50a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e506:	2300      	movs	r3, #0
 800e508:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2200      	movs	r2, #0
 800e50e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800e512:	e02c      	b.n	800e56e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	2200      	movs	r2, #0
 800e51c:	2180      	movs	r1, #128	; 0x80
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	f000 ff7a 	bl	800f418 <UART_WaitOnFlagUntilTimeout>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d001      	beq.n	800e52e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800e52a:	2303      	movs	r3, #3
 800e52c:	e039      	b.n	800e5a2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d10b      	bne.n	800e54c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	881b      	ldrh	r3, [r3, #0]
 800e538:	461a      	mov	r2, r3
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e542:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	3302      	adds	r3, #2
 800e548:	61bb      	str	r3, [r7, #24]
 800e54a:	e007      	b.n	800e55c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	781a      	ldrb	r2, [r3, #0]
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	3301      	adds	r3, #1
 800e55a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e562:	b29b      	uxth	r3, r3
 800e564:	3b01      	subs	r3, #1
 800e566:	b29a      	uxth	r2, r3
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e574:	b29b      	uxth	r3, r3
 800e576:	2b00      	cmp	r3, #0
 800e578:	d1cc      	bne.n	800e514 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	9300      	str	r3, [sp, #0]
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	2200      	movs	r2, #0
 800e582:	2140      	movs	r1, #64	; 0x40
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f000 ff47 	bl	800f418 <UART_WaitOnFlagUntilTimeout>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d001      	beq.n	800e594 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800e590:	2303      	movs	r3, #3
 800e592:	e006      	b.n	800e5a2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2220      	movs	r2, #32
 800e598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800e59c:	2300      	movs	r3, #0
 800e59e:	e000      	b.n	800e5a2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800e5a0:	2302      	movs	r3, #2
  }
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3720      	adds	r7, #32
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
	...

0800e5ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5c0:	2b20      	cmp	r3, #32
 800e5c2:	d170      	bne.n	800e6a6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d002      	beq.n	800e5d0 <HAL_UART_Receive_DMA+0x24>
 800e5ca:	88fb      	ldrh	r3, [r7, #6]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d101      	bne.n	800e5d4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e069      	b.n	800e6a8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	d101      	bne.n	800e5e2 <HAL_UART_Receive_DMA+0x36>
 800e5de:	2302      	movs	r3, #2
 800e5e0:	e062      	b.n	800e6a8 <HAL_UART_Receive_DMA+0xfc>
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	68ba      	ldr	r2, [r7, #8]
 800e5ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	88fa      	ldrh	r2, [r7, #6]
 800e5f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2222      	movs	r2, #34	; 0x22
 800e604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d02c      	beq.n	800e66a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e614:	4a26      	ldr	r2, [pc, #152]	; (800e6b0 <HAL_UART_Receive_DMA+0x104>)
 800e616:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e61c:	4a25      	ldr	r2, [pc, #148]	; (800e6b4 <HAL_UART_Receive_DMA+0x108>)
 800e61e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e624:	4a24      	ldr	r2, [pc, #144]	; (800e6b8 <HAL_UART_Receive_DMA+0x10c>)
 800e626:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e62c:	2200      	movs	r2, #0
 800e62e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	3324      	adds	r3, #36	; 0x24
 800e63a:	4619      	mov	r1, r3
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e640:	461a      	mov	r2, r3
 800e642:	88fb      	ldrh	r3, [r7, #6]
 800e644:	f7f5 f99e 	bl	8003984 <HAL_DMA_Start_IT>
 800e648:	4603      	mov	r3, r0
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00d      	beq.n	800e66a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2210      	movs	r2, #16
 800e652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2200      	movs	r2, #0
 800e65a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2220      	movs	r2, #32
 800e662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800e666:	2301      	movs	r3, #1
 800e668:	e01e      	b.n	800e6a8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2200      	movs	r2, #0
 800e66e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e680:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	689a      	ldr	r2, [r3, #8]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f042 0201 	orr.w	r2, r2, #1
 800e690:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	689a      	ldr	r2, [r3, #8]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e6a0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	e000      	b.n	800e6a8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800e6a6:	2302      	movs	r3, #2
  }
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	0800f59d 	.word	0x0800f59d
 800e6b4:	0800f603 	.word	0x0800f603
 800e6b8:	0800f61f 	.word	0x0800f61f

0800e6bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e6c4:	bf00      	nop
 800e6c6:	370c      	adds	r7, #12
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e6d8:	bf00      	nop
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e6e4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800e6e8:	b08e      	sub	sp, #56	; 0x38
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	689a      	ldr	r2, [r3, #8]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	691b      	ldr	r3, [r3, #16]
 800e6fc:	431a      	orrs	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	695b      	ldr	r3, [r3, #20]
 800e702:	431a      	orrs	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	69db      	ldr	r3, [r3, #28]
 800e708:	4313      	orrs	r3, r2
 800e70a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e712:	4313      	orrs	r3, r2
 800e714:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	4bc1      	ldr	r3, [pc, #772]	; (800ea24 <UART_SetConfig+0x340>)
 800e71e:	4013      	ands	r3, r2
 800e720:	687a      	ldr	r2, [r7, #4]
 800e722:	6812      	ldr	r2, [r2, #0]
 800e724:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e726:	430b      	orrs	r3, r1
 800e728:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	68da      	ldr	r2, [r3, #12]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	430a      	orrs	r2, r1
 800e73e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	699b      	ldr	r3, [r3, #24]
 800e744:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4ab7      	ldr	r2, [pc, #732]	; (800ea28 <UART_SetConfig+0x344>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d004      	beq.n	800e75a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6a1b      	ldr	r3, [r3, #32]
 800e754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e756:	4313      	orrs	r3, r2
 800e758:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	689a      	ldr	r2, [r3, #8]
 800e760:	4bb2      	ldr	r3, [pc, #712]	; (800ea2c <UART_SetConfig+0x348>)
 800e762:	4013      	ands	r3, r2
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	6812      	ldr	r2, [r2, #0]
 800e768:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e76a:	430b      	orrs	r3, r1
 800e76c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e774:	f023 010f 	bic.w	r1, r3, #15
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	430a      	orrs	r2, r1
 800e782:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4aa9      	ldr	r2, [pc, #676]	; (800ea30 <UART_SetConfig+0x34c>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d177      	bne.n	800e87e <UART_SetConfig+0x19a>
 800e78e:	4ba9      	ldr	r3, [pc, #676]	; (800ea34 <UART_SetConfig+0x350>)
 800e790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e796:	2b28      	cmp	r3, #40	; 0x28
 800e798:	d86c      	bhi.n	800e874 <UART_SetConfig+0x190>
 800e79a:	a201      	add	r2, pc, #4	; (adr r2, 800e7a0 <UART_SetConfig+0xbc>)
 800e79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a0:	0800e845 	.word	0x0800e845
 800e7a4:	0800e875 	.word	0x0800e875
 800e7a8:	0800e875 	.word	0x0800e875
 800e7ac:	0800e875 	.word	0x0800e875
 800e7b0:	0800e875 	.word	0x0800e875
 800e7b4:	0800e875 	.word	0x0800e875
 800e7b8:	0800e875 	.word	0x0800e875
 800e7bc:	0800e875 	.word	0x0800e875
 800e7c0:	0800e84d 	.word	0x0800e84d
 800e7c4:	0800e875 	.word	0x0800e875
 800e7c8:	0800e875 	.word	0x0800e875
 800e7cc:	0800e875 	.word	0x0800e875
 800e7d0:	0800e875 	.word	0x0800e875
 800e7d4:	0800e875 	.word	0x0800e875
 800e7d8:	0800e875 	.word	0x0800e875
 800e7dc:	0800e875 	.word	0x0800e875
 800e7e0:	0800e855 	.word	0x0800e855
 800e7e4:	0800e875 	.word	0x0800e875
 800e7e8:	0800e875 	.word	0x0800e875
 800e7ec:	0800e875 	.word	0x0800e875
 800e7f0:	0800e875 	.word	0x0800e875
 800e7f4:	0800e875 	.word	0x0800e875
 800e7f8:	0800e875 	.word	0x0800e875
 800e7fc:	0800e875 	.word	0x0800e875
 800e800:	0800e85d 	.word	0x0800e85d
 800e804:	0800e875 	.word	0x0800e875
 800e808:	0800e875 	.word	0x0800e875
 800e80c:	0800e875 	.word	0x0800e875
 800e810:	0800e875 	.word	0x0800e875
 800e814:	0800e875 	.word	0x0800e875
 800e818:	0800e875 	.word	0x0800e875
 800e81c:	0800e875 	.word	0x0800e875
 800e820:	0800e865 	.word	0x0800e865
 800e824:	0800e875 	.word	0x0800e875
 800e828:	0800e875 	.word	0x0800e875
 800e82c:	0800e875 	.word	0x0800e875
 800e830:	0800e875 	.word	0x0800e875
 800e834:	0800e875 	.word	0x0800e875
 800e838:	0800e875 	.word	0x0800e875
 800e83c:	0800e875 	.word	0x0800e875
 800e840:	0800e86d 	.word	0x0800e86d
 800e844:	2301      	movs	r3, #1
 800e846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e84a:	e233      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e84c:	2304      	movs	r3, #4
 800e84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e852:	e22f      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e854:	2308      	movs	r3, #8
 800e856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e85a:	e22b      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e85c:	2310      	movs	r3, #16
 800e85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e862:	e227      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e864:	2320      	movs	r3, #32
 800e866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e86a:	e223      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e86c:	2340      	movs	r3, #64	; 0x40
 800e86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e872:	e21f      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e874:	2380      	movs	r3, #128	; 0x80
 800e876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e87a:	bf00      	nop
 800e87c:	e21a      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4a6d      	ldr	r2, [pc, #436]	; (800ea38 <UART_SetConfig+0x354>)
 800e884:	4293      	cmp	r3, r2
 800e886:	d132      	bne.n	800e8ee <UART_SetConfig+0x20a>
 800e888:	4b6a      	ldr	r3, [pc, #424]	; (800ea34 <UART_SetConfig+0x350>)
 800e88a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e88c:	f003 0307 	and.w	r3, r3, #7
 800e890:	2b05      	cmp	r3, #5
 800e892:	d827      	bhi.n	800e8e4 <UART_SetConfig+0x200>
 800e894:	a201      	add	r2, pc, #4	; (adr r2, 800e89c <UART_SetConfig+0x1b8>)
 800e896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e89a:	bf00      	nop
 800e89c:	0800e8b5 	.word	0x0800e8b5
 800e8a0:	0800e8bd 	.word	0x0800e8bd
 800e8a4:	0800e8c5 	.word	0x0800e8c5
 800e8a8:	0800e8cd 	.word	0x0800e8cd
 800e8ac:	0800e8d5 	.word	0x0800e8d5
 800e8b0:	0800e8dd 	.word	0x0800e8dd
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ba:	e1fb      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e8bc:	2304      	movs	r3, #4
 800e8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8c2:	e1f7      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e8c4:	2308      	movs	r3, #8
 800e8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ca:	e1f3      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e8cc:	2310      	movs	r3, #16
 800e8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8d2:	e1ef      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e8d4:	2320      	movs	r3, #32
 800e8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8da:	e1eb      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e8dc:	2340      	movs	r3, #64	; 0x40
 800e8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8e2:	e1e7      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e8e4:	2380      	movs	r3, #128	; 0x80
 800e8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ea:	bf00      	nop
 800e8ec:	e1e2      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4a52      	ldr	r2, [pc, #328]	; (800ea3c <UART_SetConfig+0x358>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d132      	bne.n	800e95e <UART_SetConfig+0x27a>
 800e8f8:	4b4e      	ldr	r3, [pc, #312]	; (800ea34 <UART_SetConfig+0x350>)
 800e8fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8fc:	f003 0307 	and.w	r3, r3, #7
 800e900:	2b05      	cmp	r3, #5
 800e902:	d827      	bhi.n	800e954 <UART_SetConfig+0x270>
 800e904:	a201      	add	r2, pc, #4	; (adr r2, 800e90c <UART_SetConfig+0x228>)
 800e906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e90a:	bf00      	nop
 800e90c:	0800e925 	.word	0x0800e925
 800e910:	0800e92d 	.word	0x0800e92d
 800e914:	0800e935 	.word	0x0800e935
 800e918:	0800e93d 	.word	0x0800e93d
 800e91c:	0800e945 	.word	0x0800e945
 800e920:	0800e94d 	.word	0x0800e94d
 800e924:	2300      	movs	r3, #0
 800e926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e92a:	e1c3      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e92c:	2304      	movs	r3, #4
 800e92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e932:	e1bf      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e934:	2308      	movs	r3, #8
 800e936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e93a:	e1bb      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e93c:	2310      	movs	r3, #16
 800e93e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e942:	e1b7      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e944:	2320      	movs	r3, #32
 800e946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e94a:	e1b3      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e94c:	2340      	movs	r3, #64	; 0x40
 800e94e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e952:	e1af      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e954:	2380      	movs	r3, #128	; 0x80
 800e956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e95a:	bf00      	nop
 800e95c:	e1aa      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4a37      	ldr	r2, [pc, #220]	; (800ea40 <UART_SetConfig+0x35c>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d132      	bne.n	800e9ce <UART_SetConfig+0x2ea>
 800e968:	4b32      	ldr	r3, [pc, #200]	; (800ea34 <UART_SetConfig+0x350>)
 800e96a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e96c:	f003 0307 	and.w	r3, r3, #7
 800e970:	2b05      	cmp	r3, #5
 800e972:	d827      	bhi.n	800e9c4 <UART_SetConfig+0x2e0>
 800e974:	a201      	add	r2, pc, #4	; (adr r2, 800e97c <UART_SetConfig+0x298>)
 800e976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e97a:	bf00      	nop
 800e97c:	0800e995 	.word	0x0800e995
 800e980:	0800e99d 	.word	0x0800e99d
 800e984:	0800e9a5 	.word	0x0800e9a5
 800e988:	0800e9ad 	.word	0x0800e9ad
 800e98c:	0800e9b5 	.word	0x0800e9b5
 800e990:	0800e9bd 	.word	0x0800e9bd
 800e994:	2300      	movs	r3, #0
 800e996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e99a:	e18b      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e99c:	2304      	movs	r3, #4
 800e99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9a2:	e187      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e9a4:	2308      	movs	r3, #8
 800e9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9aa:	e183      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e9ac:	2310      	movs	r3, #16
 800e9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9b2:	e17f      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e9b4:	2320      	movs	r3, #32
 800e9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9ba:	e17b      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e9bc:	2340      	movs	r3, #64	; 0x40
 800e9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9c2:	e177      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e9c4:	2380      	movs	r3, #128	; 0x80
 800e9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9ca:	bf00      	nop
 800e9cc:	e172      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4a1c      	ldr	r2, [pc, #112]	; (800ea44 <UART_SetConfig+0x360>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d144      	bne.n	800ea62 <UART_SetConfig+0x37e>
 800e9d8:	4b16      	ldr	r3, [pc, #88]	; (800ea34 <UART_SetConfig+0x350>)
 800e9da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9dc:	f003 0307 	and.w	r3, r3, #7
 800e9e0:	2b05      	cmp	r3, #5
 800e9e2:	d839      	bhi.n	800ea58 <UART_SetConfig+0x374>
 800e9e4:	a201      	add	r2, pc, #4	; (adr r2, 800e9ec <UART_SetConfig+0x308>)
 800e9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ea:	bf00      	nop
 800e9ec:	0800ea05 	.word	0x0800ea05
 800e9f0:	0800ea0d 	.word	0x0800ea0d
 800e9f4:	0800ea15 	.word	0x0800ea15
 800e9f8:	0800ea1d 	.word	0x0800ea1d
 800e9fc:	0800ea49 	.word	0x0800ea49
 800ea00:	0800ea51 	.word	0x0800ea51
 800ea04:	2300      	movs	r3, #0
 800ea06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea0a:	e153      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ea0c:	2304      	movs	r3, #4
 800ea0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea12:	e14f      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ea14:	2308      	movs	r3, #8
 800ea16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea1a:	e14b      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ea1c:	2310      	movs	r3, #16
 800ea1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea22:	e147      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ea24:	cfff69f3 	.word	0xcfff69f3
 800ea28:	58000c00 	.word	0x58000c00
 800ea2c:	11fff4ff 	.word	0x11fff4ff
 800ea30:	40011000 	.word	0x40011000
 800ea34:	58024400 	.word	0x58024400
 800ea38:	40004400 	.word	0x40004400
 800ea3c:	40004800 	.word	0x40004800
 800ea40:	40004c00 	.word	0x40004c00
 800ea44:	40005000 	.word	0x40005000
 800ea48:	2320      	movs	r3, #32
 800ea4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea4e:	e131      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ea50:	2340      	movs	r3, #64	; 0x40
 800ea52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea56:	e12d      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ea58:	2380      	movs	r3, #128	; 0x80
 800ea5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea5e:	bf00      	nop
 800ea60:	e128      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4ab6      	ldr	r2, [pc, #728]	; (800ed40 <UART_SetConfig+0x65c>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d178      	bne.n	800eb5e <UART_SetConfig+0x47a>
 800ea6c:	4bb5      	ldr	r3, [pc, #724]	; (800ed44 <UART_SetConfig+0x660>)
 800ea6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea74:	2b28      	cmp	r3, #40	; 0x28
 800ea76:	d86d      	bhi.n	800eb54 <UART_SetConfig+0x470>
 800ea78:	a201      	add	r2, pc, #4	; (adr r2, 800ea80 <UART_SetConfig+0x39c>)
 800ea7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea7e:	bf00      	nop
 800ea80:	0800eb25 	.word	0x0800eb25
 800ea84:	0800eb55 	.word	0x0800eb55
 800ea88:	0800eb55 	.word	0x0800eb55
 800ea8c:	0800eb55 	.word	0x0800eb55
 800ea90:	0800eb55 	.word	0x0800eb55
 800ea94:	0800eb55 	.word	0x0800eb55
 800ea98:	0800eb55 	.word	0x0800eb55
 800ea9c:	0800eb55 	.word	0x0800eb55
 800eaa0:	0800eb2d 	.word	0x0800eb2d
 800eaa4:	0800eb55 	.word	0x0800eb55
 800eaa8:	0800eb55 	.word	0x0800eb55
 800eaac:	0800eb55 	.word	0x0800eb55
 800eab0:	0800eb55 	.word	0x0800eb55
 800eab4:	0800eb55 	.word	0x0800eb55
 800eab8:	0800eb55 	.word	0x0800eb55
 800eabc:	0800eb55 	.word	0x0800eb55
 800eac0:	0800eb35 	.word	0x0800eb35
 800eac4:	0800eb55 	.word	0x0800eb55
 800eac8:	0800eb55 	.word	0x0800eb55
 800eacc:	0800eb55 	.word	0x0800eb55
 800ead0:	0800eb55 	.word	0x0800eb55
 800ead4:	0800eb55 	.word	0x0800eb55
 800ead8:	0800eb55 	.word	0x0800eb55
 800eadc:	0800eb55 	.word	0x0800eb55
 800eae0:	0800eb3d 	.word	0x0800eb3d
 800eae4:	0800eb55 	.word	0x0800eb55
 800eae8:	0800eb55 	.word	0x0800eb55
 800eaec:	0800eb55 	.word	0x0800eb55
 800eaf0:	0800eb55 	.word	0x0800eb55
 800eaf4:	0800eb55 	.word	0x0800eb55
 800eaf8:	0800eb55 	.word	0x0800eb55
 800eafc:	0800eb55 	.word	0x0800eb55
 800eb00:	0800eb45 	.word	0x0800eb45
 800eb04:	0800eb55 	.word	0x0800eb55
 800eb08:	0800eb55 	.word	0x0800eb55
 800eb0c:	0800eb55 	.word	0x0800eb55
 800eb10:	0800eb55 	.word	0x0800eb55
 800eb14:	0800eb55 	.word	0x0800eb55
 800eb18:	0800eb55 	.word	0x0800eb55
 800eb1c:	0800eb55 	.word	0x0800eb55
 800eb20:	0800eb4d 	.word	0x0800eb4d
 800eb24:	2301      	movs	r3, #1
 800eb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb2a:	e0c3      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800eb2c:	2304      	movs	r3, #4
 800eb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb32:	e0bf      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800eb34:	2308      	movs	r3, #8
 800eb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb3a:	e0bb      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800eb3c:	2310      	movs	r3, #16
 800eb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb42:	e0b7      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800eb44:	2320      	movs	r3, #32
 800eb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb4a:	e0b3      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800eb4c:	2340      	movs	r3, #64	; 0x40
 800eb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb52:	e0af      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800eb54:	2380      	movs	r3, #128	; 0x80
 800eb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb5a:	bf00      	nop
 800eb5c:	e0aa      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4a79      	ldr	r2, [pc, #484]	; (800ed48 <UART_SetConfig+0x664>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d132      	bne.n	800ebce <UART_SetConfig+0x4ea>
 800eb68:	4b76      	ldr	r3, [pc, #472]	; (800ed44 <UART_SetConfig+0x660>)
 800eb6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb6c:	f003 0307 	and.w	r3, r3, #7
 800eb70:	2b05      	cmp	r3, #5
 800eb72:	d827      	bhi.n	800ebc4 <UART_SetConfig+0x4e0>
 800eb74:	a201      	add	r2, pc, #4	; (adr r2, 800eb7c <UART_SetConfig+0x498>)
 800eb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb7a:	bf00      	nop
 800eb7c:	0800eb95 	.word	0x0800eb95
 800eb80:	0800eb9d 	.word	0x0800eb9d
 800eb84:	0800eba5 	.word	0x0800eba5
 800eb88:	0800ebad 	.word	0x0800ebad
 800eb8c:	0800ebb5 	.word	0x0800ebb5
 800eb90:	0800ebbd 	.word	0x0800ebbd
 800eb94:	2300      	movs	r3, #0
 800eb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb9a:	e08b      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800eb9c:	2304      	movs	r3, #4
 800eb9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eba2:	e087      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800eba4:	2308      	movs	r3, #8
 800eba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebaa:	e083      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ebac:	2310      	movs	r3, #16
 800ebae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebb2:	e07f      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ebb4:	2320      	movs	r3, #32
 800ebb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebba:	e07b      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ebbc:	2340      	movs	r3, #64	; 0x40
 800ebbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebc2:	e077      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ebc4:	2380      	movs	r3, #128	; 0x80
 800ebc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebca:	bf00      	nop
 800ebcc:	e072      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4a5e      	ldr	r2, [pc, #376]	; (800ed4c <UART_SetConfig+0x668>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d132      	bne.n	800ec3e <UART_SetConfig+0x55a>
 800ebd8:	4b5a      	ldr	r3, [pc, #360]	; (800ed44 <UART_SetConfig+0x660>)
 800ebda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebdc:	f003 0307 	and.w	r3, r3, #7
 800ebe0:	2b05      	cmp	r3, #5
 800ebe2:	d827      	bhi.n	800ec34 <UART_SetConfig+0x550>
 800ebe4:	a201      	add	r2, pc, #4	; (adr r2, 800ebec <UART_SetConfig+0x508>)
 800ebe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebea:	bf00      	nop
 800ebec:	0800ec05 	.word	0x0800ec05
 800ebf0:	0800ec0d 	.word	0x0800ec0d
 800ebf4:	0800ec15 	.word	0x0800ec15
 800ebf8:	0800ec1d 	.word	0x0800ec1d
 800ebfc:	0800ec25 	.word	0x0800ec25
 800ec00:	0800ec2d 	.word	0x0800ec2d
 800ec04:	2300      	movs	r3, #0
 800ec06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec0a:	e053      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ec0c:	2304      	movs	r3, #4
 800ec0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec12:	e04f      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ec14:	2308      	movs	r3, #8
 800ec16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec1a:	e04b      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ec1c:	2310      	movs	r3, #16
 800ec1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec22:	e047      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ec24:	2320      	movs	r3, #32
 800ec26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec2a:	e043      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ec2c:	2340      	movs	r3, #64	; 0x40
 800ec2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec32:	e03f      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ec34:	2380      	movs	r3, #128	; 0x80
 800ec36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec3a:	bf00      	nop
 800ec3c:	e03a      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4a43      	ldr	r2, [pc, #268]	; (800ed50 <UART_SetConfig+0x66c>)
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d132      	bne.n	800ecae <UART_SetConfig+0x5ca>
 800ec48:	4b3e      	ldr	r3, [pc, #248]	; (800ed44 <UART_SetConfig+0x660>)
 800ec4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec4c:	f003 0307 	and.w	r3, r3, #7
 800ec50:	2b05      	cmp	r3, #5
 800ec52:	d827      	bhi.n	800eca4 <UART_SetConfig+0x5c0>
 800ec54:	a201      	add	r2, pc, #4	; (adr r2, 800ec5c <UART_SetConfig+0x578>)
 800ec56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec5a:	bf00      	nop
 800ec5c:	0800ec75 	.word	0x0800ec75
 800ec60:	0800ec7d 	.word	0x0800ec7d
 800ec64:	0800ec85 	.word	0x0800ec85
 800ec68:	0800ec8d 	.word	0x0800ec8d
 800ec6c:	0800ec95 	.word	0x0800ec95
 800ec70:	0800ec9d 	.word	0x0800ec9d
 800ec74:	2302      	movs	r3, #2
 800ec76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec7a:	e01b      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ec7c:	2304      	movs	r3, #4
 800ec7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec82:	e017      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ec84:	2308      	movs	r3, #8
 800ec86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec8a:	e013      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ec8c:	2310      	movs	r3, #16
 800ec8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec92:	e00f      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ec94:	2320      	movs	r3, #32
 800ec96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec9a:	e00b      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ec9c:	2340      	movs	r3, #64	; 0x40
 800ec9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eca2:	e007      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800eca4:	2380      	movs	r3, #128	; 0x80
 800eca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecaa:	bf00      	nop
 800ecac:	e002      	b.n	800ecb4 <UART_SetConfig+0x5d0>
 800ecae:	2380      	movs	r3, #128	; 0x80
 800ecb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a25      	ldr	r2, [pc, #148]	; (800ed50 <UART_SetConfig+0x66c>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	f040 80b8 	bne.w	800ee30 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ecc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ecc4:	2b08      	cmp	r3, #8
 800ecc6:	d019      	beq.n	800ecfc <UART_SetConfig+0x618>
 800ecc8:	2b08      	cmp	r3, #8
 800ecca:	dc04      	bgt.n	800ecd6 <UART_SetConfig+0x5f2>
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d009      	beq.n	800ece4 <UART_SetConfig+0x600>
 800ecd0:	2b04      	cmp	r3, #4
 800ecd2:	d00b      	beq.n	800ecec <UART_SetConfig+0x608>
 800ecd4:	e042      	b.n	800ed5c <UART_SetConfig+0x678>
 800ecd6:	2b20      	cmp	r3, #32
 800ecd8:	d02b      	beq.n	800ed32 <UART_SetConfig+0x64e>
 800ecda:	2b40      	cmp	r3, #64	; 0x40
 800ecdc:	d02c      	beq.n	800ed38 <UART_SetConfig+0x654>
 800ecde:	2b10      	cmp	r3, #16
 800ece0:	d014      	beq.n	800ed0c <UART_SetConfig+0x628>
 800ece2:	e03b      	b.n	800ed5c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ece4:	f7fb fb96 	bl	800a414 <HAL_RCCEx_GetD3PCLK1Freq>
 800ece8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ecea:	e03d      	b.n	800ed68 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecec:	f107 0314 	add.w	r3, r7, #20
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fb fba5 	bl	800a440 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ecfa:	e035      	b.n	800ed68 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ecfc:	f107 0308 	add.w	r3, r7, #8
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7fb fce9 	bl	800a6d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed0a:	e02d      	b.n	800ed68 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed0c:	4b0d      	ldr	r3, [pc, #52]	; (800ed44 <UART_SetConfig+0x660>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f003 0320 	and.w	r3, r3, #32
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d009      	beq.n	800ed2c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed18:	4b0a      	ldr	r3, [pc, #40]	; (800ed44 <UART_SetConfig+0x660>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	08db      	lsrs	r3, r3, #3
 800ed1e:	f003 0303 	and.w	r3, r3, #3
 800ed22:	4a0c      	ldr	r2, [pc, #48]	; (800ed54 <UART_SetConfig+0x670>)
 800ed24:	fa22 f303 	lsr.w	r3, r2, r3
 800ed28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed2a:	e01d      	b.n	800ed68 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800ed2c:	4b09      	ldr	r3, [pc, #36]	; (800ed54 <UART_SetConfig+0x670>)
 800ed2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed30:	e01a      	b.n	800ed68 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed32:	4b09      	ldr	r3, [pc, #36]	; (800ed58 <UART_SetConfig+0x674>)
 800ed34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed36:	e017      	b.n	800ed68 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed3e:	e013      	b.n	800ed68 <UART_SetConfig+0x684>
 800ed40:	40011400 	.word	0x40011400
 800ed44:	58024400 	.word	0x58024400
 800ed48:	40007800 	.word	0x40007800
 800ed4c:	40007c00 	.word	0x40007c00
 800ed50:	58000c00 	.word	0x58000c00
 800ed54:	03d09000 	.word	0x03d09000
 800ed58:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ed60:	2301      	movs	r3, #1
 800ed62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ed66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ed68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f000 824d 	beq.w	800f20a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed74:	4aad      	ldr	r2, [pc, #692]	; (800f02c <UART_SetConfig+0x948>)
 800ed76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed82:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	685a      	ldr	r2, [r3, #4]
 800ed88:	4613      	mov	r3, r2
 800ed8a:	005b      	lsls	r3, r3, #1
 800ed8c:	4413      	add	r3, r2
 800ed8e:	6a3a      	ldr	r2, [r7, #32]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d305      	bcc.n	800eda0 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed9a:	6a3a      	ldr	r2, [r7, #32]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d903      	bls.n	800eda8 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800eda0:	2301      	movs	r3, #1
 800eda2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eda6:	e230      	b.n	800f20a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edaa:	4618      	mov	r0, r3
 800edac:	f04f 0100 	mov.w	r1, #0
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb4:	4a9d      	ldr	r2, [pc, #628]	; (800f02c <UART_SetConfig+0x948>)
 800edb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edba:	b29b      	uxth	r3, r3
 800edbc:	f04f 0400 	mov.w	r4, #0
 800edc0:	461a      	mov	r2, r3
 800edc2:	4623      	mov	r3, r4
 800edc4:	f7f1 fae4 	bl	8000390 <__aeabi_uldivmod>
 800edc8:	4603      	mov	r3, r0
 800edca:	460c      	mov	r4, r1
 800edcc:	4619      	mov	r1, r3
 800edce:	4622      	mov	r2, r4
 800edd0:	f04f 0300 	mov.w	r3, #0
 800edd4:	f04f 0400 	mov.w	r4, #0
 800edd8:	0214      	lsls	r4, r2, #8
 800edda:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800edde:	020b      	lsls	r3, r1, #8
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	6852      	ldr	r2, [r2, #4]
 800ede4:	0852      	lsrs	r2, r2, #1
 800ede6:	4611      	mov	r1, r2
 800ede8:	f04f 0200 	mov.w	r2, #0
 800edec:	eb13 0b01 	adds.w	fp, r3, r1
 800edf0:	eb44 0c02 	adc.w	ip, r4, r2
 800edf4:	4658      	mov	r0, fp
 800edf6:	4661      	mov	r1, ip
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	f04f 0400 	mov.w	r4, #0
 800ee00:	461a      	mov	r2, r3
 800ee02:	4623      	mov	r3, r4
 800ee04:	f7f1 fac4 	bl	8000390 <__aeabi_uldivmod>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	460c      	mov	r4, r1
 800ee0c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ee0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee14:	d308      	bcc.n	800ee28 <UART_SetConfig+0x744>
 800ee16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee1c:	d204      	bcs.n	800ee28 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee24:	60da      	str	r2, [r3, #12]
 800ee26:	e1f0      	b.n	800f20a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ee2e:	e1ec      	b.n	800f20a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	69db      	ldr	r3, [r3, #28]
 800ee34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee38:	f040 8100 	bne.w	800f03c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800ee3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee40:	2b40      	cmp	r3, #64	; 0x40
 800ee42:	f200 80b7 	bhi.w	800efb4 <UART_SetConfig+0x8d0>
 800ee46:	a201      	add	r2, pc, #4	; (adr r2, 800ee4c <UART_SetConfig+0x768>)
 800ee48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee4c:	0800ef51 	.word	0x0800ef51
 800ee50:	0800ef59 	.word	0x0800ef59
 800ee54:	0800efb5 	.word	0x0800efb5
 800ee58:	0800efb5 	.word	0x0800efb5
 800ee5c:	0800ef61 	.word	0x0800ef61
 800ee60:	0800efb5 	.word	0x0800efb5
 800ee64:	0800efb5 	.word	0x0800efb5
 800ee68:	0800efb5 	.word	0x0800efb5
 800ee6c:	0800ef71 	.word	0x0800ef71
 800ee70:	0800efb5 	.word	0x0800efb5
 800ee74:	0800efb5 	.word	0x0800efb5
 800ee78:	0800efb5 	.word	0x0800efb5
 800ee7c:	0800efb5 	.word	0x0800efb5
 800ee80:	0800efb5 	.word	0x0800efb5
 800ee84:	0800efb5 	.word	0x0800efb5
 800ee88:	0800efb5 	.word	0x0800efb5
 800ee8c:	0800ef81 	.word	0x0800ef81
 800ee90:	0800efb5 	.word	0x0800efb5
 800ee94:	0800efb5 	.word	0x0800efb5
 800ee98:	0800efb5 	.word	0x0800efb5
 800ee9c:	0800efb5 	.word	0x0800efb5
 800eea0:	0800efb5 	.word	0x0800efb5
 800eea4:	0800efb5 	.word	0x0800efb5
 800eea8:	0800efb5 	.word	0x0800efb5
 800eeac:	0800efb5 	.word	0x0800efb5
 800eeb0:	0800efb5 	.word	0x0800efb5
 800eeb4:	0800efb5 	.word	0x0800efb5
 800eeb8:	0800efb5 	.word	0x0800efb5
 800eebc:	0800efb5 	.word	0x0800efb5
 800eec0:	0800efb5 	.word	0x0800efb5
 800eec4:	0800efb5 	.word	0x0800efb5
 800eec8:	0800efb5 	.word	0x0800efb5
 800eecc:	0800efa7 	.word	0x0800efa7
 800eed0:	0800efb5 	.word	0x0800efb5
 800eed4:	0800efb5 	.word	0x0800efb5
 800eed8:	0800efb5 	.word	0x0800efb5
 800eedc:	0800efb5 	.word	0x0800efb5
 800eee0:	0800efb5 	.word	0x0800efb5
 800eee4:	0800efb5 	.word	0x0800efb5
 800eee8:	0800efb5 	.word	0x0800efb5
 800eeec:	0800efb5 	.word	0x0800efb5
 800eef0:	0800efb5 	.word	0x0800efb5
 800eef4:	0800efb5 	.word	0x0800efb5
 800eef8:	0800efb5 	.word	0x0800efb5
 800eefc:	0800efb5 	.word	0x0800efb5
 800ef00:	0800efb5 	.word	0x0800efb5
 800ef04:	0800efb5 	.word	0x0800efb5
 800ef08:	0800efb5 	.word	0x0800efb5
 800ef0c:	0800efb5 	.word	0x0800efb5
 800ef10:	0800efb5 	.word	0x0800efb5
 800ef14:	0800efb5 	.word	0x0800efb5
 800ef18:	0800efb5 	.word	0x0800efb5
 800ef1c:	0800efb5 	.word	0x0800efb5
 800ef20:	0800efb5 	.word	0x0800efb5
 800ef24:	0800efb5 	.word	0x0800efb5
 800ef28:	0800efb5 	.word	0x0800efb5
 800ef2c:	0800efb5 	.word	0x0800efb5
 800ef30:	0800efb5 	.word	0x0800efb5
 800ef34:	0800efb5 	.word	0x0800efb5
 800ef38:	0800efb5 	.word	0x0800efb5
 800ef3c:	0800efb5 	.word	0x0800efb5
 800ef40:	0800efb5 	.word	0x0800efb5
 800ef44:	0800efb5 	.word	0x0800efb5
 800ef48:	0800efb5 	.word	0x0800efb5
 800ef4c:	0800efad 	.word	0x0800efad
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef50:	f7fa f8b2 	bl	80090b8 <HAL_RCC_GetPCLK1Freq>
 800ef54:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ef56:	e033      	b.n	800efc0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef58:	f7fa f8c4 	bl	80090e4 <HAL_RCC_GetPCLK2Freq>
 800ef5c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ef5e:	e02f      	b.n	800efc0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef60:	f107 0314 	add.w	r3, r7, #20
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fb fa6b 	bl	800a440 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef6e:	e027      	b.n	800efc0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef70:	f107 0308 	add.w	r3, r7, #8
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7fb fbaf 	bl	800a6d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef7e:	e01f      	b.n	800efc0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef80:	4b2b      	ldr	r3, [pc, #172]	; (800f030 <UART_SetConfig+0x94c>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f003 0320 	and.w	r3, r3, #32
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d009      	beq.n	800efa0 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef8c:	4b28      	ldr	r3, [pc, #160]	; (800f030 <UART_SetConfig+0x94c>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	08db      	lsrs	r3, r3, #3
 800ef92:	f003 0303 	and.w	r3, r3, #3
 800ef96:	4a27      	ldr	r2, [pc, #156]	; (800f034 <UART_SetConfig+0x950>)
 800ef98:	fa22 f303 	lsr.w	r3, r2, r3
 800ef9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef9e:	e00f      	b.n	800efc0 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800efa0:	4b24      	ldr	r3, [pc, #144]	; (800f034 <UART_SetConfig+0x950>)
 800efa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efa4:	e00c      	b.n	800efc0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800efa6:	4b24      	ldr	r3, [pc, #144]	; (800f038 <UART_SetConfig+0x954>)
 800efa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efaa:	e009      	b.n	800efc0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efb2:	e005      	b.n	800efc0 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800efb4:	2300      	movs	r3, #0
 800efb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800efb8:	2301      	movs	r3, #1
 800efba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800efbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800efc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	f000 8121 	beq.w	800f20a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efcc:	4a17      	ldr	r2, [pc, #92]	; (800f02c <UART_SetConfig+0x948>)
 800efce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efd2:	461a      	mov	r2, r3
 800efd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800efda:	005a      	lsls	r2, r3, #1
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	085b      	lsrs	r3, r3, #1
 800efe2:	441a      	add	r2, r3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800efec:	b29b      	uxth	r3, r3
 800efee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff2:	2b0f      	cmp	r3, #15
 800eff4:	d916      	bls.n	800f024 <UART_SetConfig+0x940>
 800eff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800effc:	d212      	bcs.n	800f024 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800effe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f000:	b29b      	uxth	r3, r3
 800f002:	f023 030f 	bic.w	r3, r3, #15
 800f006:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00a:	085b      	lsrs	r3, r3, #1
 800f00c:	b29b      	uxth	r3, r3
 800f00e:	f003 0307 	and.w	r3, r3, #7
 800f012:	b29a      	uxth	r2, r3
 800f014:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f016:	4313      	orrs	r3, r2
 800f018:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f020:	60da      	str	r2, [r3, #12]
 800f022:	e0f2      	b.n	800f20a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800f024:	2301      	movs	r3, #1
 800f026:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f02a:	e0ee      	b.n	800f20a <UART_SetConfig+0xb26>
 800f02c:	080197d0 	.word	0x080197d0
 800f030:	58024400 	.word	0x58024400
 800f034:	03d09000 	.word	0x03d09000
 800f038:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800f03c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f040:	2b40      	cmp	r3, #64	; 0x40
 800f042:	f200 80b7 	bhi.w	800f1b4 <UART_SetConfig+0xad0>
 800f046:	a201      	add	r2, pc, #4	; (adr r2, 800f04c <UART_SetConfig+0x968>)
 800f048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f04c:	0800f151 	.word	0x0800f151
 800f050:	0800f159 	.word	0x0800f159
 800f054:	0800f1b5 	.word	0x0800f1b5
 800f058:	0800f1b5 	.word	0x0800f1b5
 800f05c:	0800f161 	.word	0x0800f161
 800f060:	0800f1b5 	.word	0x0800f1b5
 800f064:	0800f1b5 	.word	0x0800f1b5
 800f068:	0800f1b5 	.word	0x0800f1b5
 800f06c:	0800f171 	.word	0x0800f171
 800f070:	0800f1b5 	.word	0x0800f1b5
 800f074:	0800f1b5 	.word	0x0800f1b5
 800f078:	0800f1b5 	.word	0x0800f1b5
 800f07c:	0800f1b5 	.word	0x0800f1b5
 800f080:	0800f1b5 	.word	0x0800f1b5
 800f084:	0800f1b5 	.word	0x0800f1b5
 800f088:	0800f1b5 	.word	0x0800f1b5
 800f08c:	0800f181 	.word	0x0800f181
 800f090:	0800f1b5 	.word	0x0800f1b5
 800f094:	0800f1b5 	.word	0x0800f1b5
 800f098:	0800f1b5 	.word	0x0800f1b5
 800f09c:	0800f1b5 	.word	0x0800f1b5
 800f0a0:	0800f1b5 	.word	0x0800f1b5
 800f0a4:	0800f1b5 	.word	0x0800f1b5
 800f0a8:	0800f1b5 	.word	0x0800f1b5
 800f0ac:	0800f1b5 	.word	0x0800f1b5
 800f0b0:	0800f1b5 	.word	0x0800f1b5
 800f0b4:	0800f1b5 	.word	0x0800f1b5
 800f0b8:	0800f1b5 	.word	0x0800f1b5
 800f0bc:	0800f1b5 	.word	0x0800f1b5
 800f0c0:	0800f1b5 	.word	0x0800f1b5
 800f0c4:	0800f1b5 	.word	0x0800f1b5
 800f0c8:	0800f1b5 	.word	0x0800f1b5
 800f0cc:	0800f1a7 	.word	0x0800f1a7
 800f0d0:	0800f1b5 	.word	0x0800f1b5
 800f0d4:	0800f1b5 	.word	0x0800f1b5
 800f0d8:	0800f1b5 	.word	0x0800f1b5
 800f0dc:	0800f1b5 	.word	0x0800f1b5
 800f0e0:	0800f1b5 	.word	0x0800f1b5
 800f0e4:	0800f1b5 	.word	0x0800f1b5
 800f0e8:	0800f1b5 	.word	0x0800f1b5
 800f0ec:	0800f1b5 	.word	0x0800f1b5
 800f0f0:	0800f1b5 	.word	0x0800f1b5
 800f0f4:	0800f1b5 	.word	0x0800f1b5
 800f0f8:	0800f1b5 	.word	0x0800f1b5
 800f0fc:	0800f1b5 	.word	0x0800f1b5
 800f100:	0800f1b5 	.word	0x0800f1b5
 800f104:	0800f1b5 	.word	0x0800f1b5
 800f108:	0800f1b5 	.word	0x0800f1b5
 800f10c:	0800f1b5 	.word	0x0800f1b5
 800f110:	0800f1b5 	.word	0x0800f1b5
 800f114:	0800f1b5 	.word	0x0800f1b5
 800f118:	0800f1b5 	.word	0x0800f1b5
 800f11c:	0800f1b5 	.word	0x0800f1b5
 800f120:	0800f1b5 	.word	0x0800f1b5
 800f124:	0800f1b5 	.word	0x0800f1b5
 800f128:	0800f1b5 	.word	0x0800f1b5
 800f12c:	0800f1b5 	.word	0x0800f1b5
 800f130:	0800f1b5 	.word	0x0800f1b5
 800f134:	0800f1b5 	.word	0x0800f1b5
 800f138:	0800f1b5 	.word	0x0800f1b5
 800f13c:	0800f1b5 	.word	0x0800f1b5
 800f140:	0800f1b5 	.word	0x0800f1b5
 800f144:	0800f1b5 	.word	0x0800f1b5
 800f148:	0800f1b5 	.word	0x0800f1b5
 800f14c:	0800f1ad 	.word	0x0800f1ad
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f150:	f7f9 ffb2 	bl	80090b8 <HAL_RCC_GetPCLK1Freq>
 800f154:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f156:	e033      	b.n	800f1c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f158:	f7f9 ffc4 	bl	80090e4 <HAL_RCC_GetPCLK2Freq>
 800f15c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f15e:	e02f      	b.n	800f1c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f160:	f107 0314 	add.w	r3, r7, #20
 800f164:	4618      	mov	r0, r3
 800f166:	f7fb f96b 	bl	800a440 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f16a:	69bb      	ldr	r3, [r7, #24]
 800f16c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f16e:	e027      	b.n	800f1c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f170:	f107 0308 	add.w	r3, r7, #8
 800f174:	4618      	mov	r0, r3
 800f176:	f7fb faaf 	bl	800a6d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f17e:	e01f      	b.n	800f1c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f180:	4b2c      	ldr	r3, [pc, #176]	; (800f234 <UART_SetConfig+0xb50>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f003 0320 	and.w	r3, r3, #32
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d009      	beq.n	800f1a0 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f18c:	4b29      	ldr	r3, [pc, #164]	; (800f234 <UART_SetConfig+0xb50>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	08db      	lsrs	r3, r3, #3
 800f192:	f003 0303 	and.w	r3, r3, #3
 800f196:	4a28      	ldr	r2, [pc, #160]	; (800f238 <UART_SetConfig+0xb54>)
 800f198:	fa22 f303 	lsr.w	r3, r2, r3
 800f19c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f19e:	e00f      	b.n	800f1c0 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800f1a0:	4b25      	ldr	r3, [pc, #148]	; (800f238 <UART_SetConfig+0xb54>)
 800f1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1a4:	e00c      	b.n	800f1c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1a6:	4b25      	ldr	r3, [pc, #148]	; (800f23c <UART_SetConfig+0xb58>)
 800f1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1aa:	e009      	b.n	800f1c0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1b2:	e005      	b.n	800f1c0 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f1be:	bf00      	nop
    }

    if (pclk != 0U)
 800f1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d021      	beq.n	800f20a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ca:	4a1d      	ldr	r2, [pc, #116]	; (800f240 <UART_SetConfig+0xb5c>)
 800f1cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d4:	fbb3 f2f2 	udiv	r2, r3, r2
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	085b      	lsrs	r3, r3, #1
 800f1de:	441a      	add	r2, r3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ee:	2b0f      	cmp	r3, #15
 800f1f0:	d908      	bls.n	800f204 <UART_SetConfig+0xb20>
 800f1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1f8:	d204      	bcs.n	800f204 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f200:	60da      	str	r2, [r3, #12]
 800f202:	e002      	b.n	800f20a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800f204:	2301      	movs	r3, #1
 800f206:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2201      	movs	r2, #1
 800f20e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2201      	movs	r2, #1
 800f216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2200      	movs	r2, #0
 800f21e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2200      	movs	r2, #0
 800f224:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800f226:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3738      	adds	r7, #56	; 0x38
 800f22e:	46bd      	mov	sp, r7
 800f230:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800f234:	58024400 	.word	0x58024400
 800f238:	03d09000 	.word	0x03d09000
 800f23c:	003d0900 	.word	0x003d0900
 800f240:	080197d0 	.word	0x080197d0

0800f244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f250:	f003 0301 	and.w	r3, r3, #1
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00a      	beq.n	800f26e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	430a      	orrs	r2, r1
 800f26c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f272:	f003 0302 	and.w	r3, r3, #2
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00a      	beq.n	800f290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	430a      	orrs	r2, r1
 800f28e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f294:	f003 0304 	and.w	r3, r3, #4
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d00a      	beq.n	800f2b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	430a      	orrs	r2, r1
 800f2b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b6:	f003 0308 	and.w	r3, r3, #8
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00a      	beq.n	800f2d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	430a      	orrs	r2, r1
 800f2d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2d8:	f003 0310 	and.w	r3, r3, #16
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d00a      	beq.n	800f2f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	689b      	ldr	r3, [r3, #8]
 800f2e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	430a      	orrs	r2, r1
 800f2f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2fa:	f003 0320 	and.w	r3, r3, #32
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d00a      	beq.n	800f318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	689b      	ldr	r3, [r3, #8]
 800f308:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	430a      	orrs	r2, r1
 800f316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f320:	2b00      	cmp	r3, #0
 800f322:	d01a      	beq.n	800f35a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	685b      	ldr	r3, [r3, #4]
 800f32a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	430a      	orrs	r2, r1
 800f338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f33e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f342:	d10a      	bne.n	800f35a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	430a      	orrs	r2, r1
 800f358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f362:	2b00      	cmp	r3, #0
 800f364:	d00a      	beq.n	800f37c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	430a      	orrs	r2, r1
 800f37a:	605a      	str	r2, [r3, #4]
  }
}
 800f37c:	bf00      	nop
 800f37e:	370c      	adds	r7, #12
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr

0800f388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b086      	sub	sp, #24
 800f38c:	af02      	add	r7, sp, #8
 800f38e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2200      	movs	r2, #0
 800f394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800f398:	f7f3 fe4e 	bl	8003038 <HAL_GetTick>
 800f39c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f003 0308 	and.w	r3, r3, #8
 800f3a8:	2b08      	cmp	r3, #8
 800f3aa:	d10e      	bne.n	800f3ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3b0:	9300      	str	r3, [sp, #0]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f000 f82c 	bl	800f418 <UART_WaitOnFlagUntilTimeout>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d001      	beq.n	800f3ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3c6:	2303      	movs	r3, #3
 800f3c8:	e022      	b.n	800f410 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	f003 0304 	and.w	r3, r3, #4
 800f3d4:	2b04      	cmp	r3, #4
 800f3d6:	d10e      	bne.n	800f3f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3dc:	9300      	str	r3, [sp, #0]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f000 f816 	bl	800f418 <UART_WaitOnFlagUntilTimeout>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d001      	beq.n	800f3f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3f2:	2303      	movs	r3, #3
 800f3f4:	e00c      	b.n	800f410 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2220      	movs	r2, #32
 800f3fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2220      	movs	r2, #32
 800f402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2200      	movs	r2, #0
 800f40a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f40e:	2300      	movs	r3, #0
}
 800f410:	4618      	mov	r0, r3
 800f412:	3710      	adds	r7, #16
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	603b      	str	r3, [r7, #0]
 800f424:	4613      	mov	r3, r2
 800f426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f428:	e062      	b.n	800f4f0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f42a:	69bb      	ldr	r3, [r7, #24]
 800f42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f430:	d05e      	beq.n	800f4f0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f432:	f7f3 fe01 	bl	8003038 <HAL_GetTick>
 800f436:	4602      	mov	r2, r0
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	1ad3      	subs	r3, r2, r3
 800f43c:	69ba      	ldr	r2, [r7, #24]
 800f43e:	429a      	cmp	r2, r3
 800f440:	d302      	bcc.n	800f448 <UART_WaitOnFlagUntilTimeout+0x30>
 800f442:	69bb      	ldr	r3, [r7, #24]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d11d      	bne.n	800f484 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f456:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	689a      	ldr	r2, [r3, #8]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f022 0201 	bic.w	r2, r2, #1
 800f466:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2220      	movs	r2, #32
 800f46c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	2220      	movs	r2, #32
 800f474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2200      	movs	r2, #0
 800f47c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800f480:	2303      	movs	r3, #3
 800f482:	e045      	b.n	800f510 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	f003 0304 	and.w	r3, r3, #4
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d02e      	beq.n	800f4f0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	69db      	ldr	r3, [r3, #28]
 800f498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f49c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4a0:	d126      	bne.n	800f4f0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f4aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	681a      	ldr	r2, [r3, #0]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f4ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	689a      	ldr	r2, [r3, #8]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f022 0201 	bic.w	r2, r2, #1
 800f4ca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	2220      	movs	r2, #32
 800f4d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2220      	movs	r2, #32
 800f4d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2220      	movs	r2, #32
 800f4e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800f4ec:	2303      	movs	r3, #3
 800f4ee:	e00f      	b.n	800f510 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	69da      	ldr	r2, [r3, #28]
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	4013      	ands	r3, r2
 800f4fa:	68ba      	ldr	r2, [r7, #8]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	bf0c      	ite	eq
 800f500:	2301      	moveq	r3, #1
 800f502:	2300      	movne	r3, #0
 800f504:	b2db      	uxtb	r3, r3
 800f506:	461a      	mov	r2, r3
 800f508:	79fb      	ldrb	r3, [r7, #7]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d08d      	beq.n	800f42a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f50e:	2300      	movs	r3, #0
}
 800f510:	4618      	mov	r0, r3
 800f512:	3710      	adds	r7, #16
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f518:	b480      	push	{r7}
 800f51a:	b083      	sub	sp, #12
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f52e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	689a      	ldr	r2, [r3, #8]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f53e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2220      	movs	r2, #32
 800f544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800f548:	bf00      	nop
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f554:	b480      	push	{r7}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f56a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	6899      	ldr	r1, [r3, #8]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	4b08      	ldr	r3, [pc, #32]	; (800f598 <UART_EndRxTransfer+0x44>)
 800f578:	400b      	ands	r3, r1
 800f57a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2220      	movs	r2, #32
 800f580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2200      	movs	r2, #0
 800f588:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800f58a:	bf00      	nop
 800f58c:	370c      	adds	r7, #12
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr
 800f596:	bf00      	nop
 800f598:	effffffe 	.word	0xeffffffe

0800f59c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5a8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	69db      	ldr	r3, [r3, #28]
 800f5ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5b2:	d01f      	beq.n	800f5f4 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f5ca:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	689a      	ldr	r2, [r3, #8]
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f022 0201 	bic.w	r2, r2, #1
 800f5da:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	689a      	ldr	r2, [r3, #8]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f5ea:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2220      	movs	r2, #32
 800f5f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800f5f4:	68f8      	ldr	r0, [r7, #12]
 800f5f6:	f7ff f861 	bl	800e6bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f5fa:	bf00      	nop
 800f5fc:	3710      	adds	r7, #16
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}

0800f602 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f602:	b580      	push	{r7, lr}
 800f604:	b084      	sub	sp, #16
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f60e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	f7f1 f971 	bl	80008f8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f616:	bf00      	nop
 800f618:	3710      	adds	r7, #16
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}

0800f61e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f61e:	b580      	push	{r7, lr}
 800f620:	b086      	sub	sp, #24
 800f622:	af00      	add	r7, sp, #0
 800f624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f62a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f632:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f63a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	689b      	ldr	r3, [r3, #8]
 800f642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f646:	2b80      	cmp	r3, #128	; 0x80
 800f648:	d109      	bne.n	800f65e <UART_DMAError+0x40>
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	2b21      	cmp	r3, #33	; 0x21
 800f64e:	d106      	bne.n	800f65e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	2200      	movs	r2, #0
 800f654:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f658:	6978      	ldr	r0, [r7, #20]
 800f65a:	f7ff ff5d 	bl	800f518 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	689b      	ldr	r3, [r3, #8]
 800f664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f668:	2b40      	cmp	r3, #64	; 0x40
 800f66a:	d109      	bne.n	800f680 <UART_DMAError+0x62>
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2b22      	cmp	r3, #34	; 0x22
 800f670:	d106      	bne.n	800f680 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	2200      	movs	r2, #0
 800f676:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f67a:	6978      	ldr	r0, [r7, #20]
 800f67c:	f7ff ff6a 	bl	800f554 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f686:	f043 0210 	orr.w	r2, r3, #16
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f690:	6978      	ldr	r0, [r7, #20]
 800f692:	f7ff f81d 	bl	800e6d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f696:	bf00      	nop
 800f698:	3718      	adds	r7, #24
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f69e:	b480      	push	{r7}
 800f6a0:	b085      	sub	sp, #20
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d101      	bne.n	800f6b4 <HAL_UARTEx_DisableFifoMode+0x16>
 800f6b0:	2302      	movs	r3, #2
 800f6b2:	e027      	b.n	800f704 <HAL_UARTEx_DisableFifoMode+0x66>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2224      	movs	r2, #36	; 0x24
 800f6c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	681a      	ldr	r2, [r3, #0]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f022 0201 	bic.w	r2, r2, #1
 800f6da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f6e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	68fa      	ldr	r2, [r7, #12]
 800f6f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2220      	movs	r2, #32
 800f6f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f702:	2300      	movs	r3, #0
}
 800f704:	4618      	mov	r0, r3
 800f706:	3714      	adds	r7, #20
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr

0800f710 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
 800f718:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f720:	2b01      	cmp	r3, #1
 800f722:	d101      	bne.n	800f728 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f724:	2302      	movs	r3, #2
 800f726:	e02d      	b.n	800f784 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2201      	movs	r2, #1
 800f72c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2224      	movs	r2, #36	; 0x24
 800f734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f022 0201 	bic.w	r2, r2, #1
 800f74e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	689b      	ldr	r3, [r3, #8]
 800f756:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	683a      	ldr	r2, [r7, #0]
 800f760:	430a      	orrs	r2, r1
 800f762:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f000 f84f 	bl	800f808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	68fa      	ldr	r2, [r7, #12]
 800f770:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2220      	movs	r2, #32
 800f776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2200      	movs	r2, #0
 800f77e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f782:	2300      	movs	r3, #0
}
 800f784:	4618      	mov	r0, r3
 800f786:	3710      	adds	r7, #16
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d101      	bne.n	800f7a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f7a0:	2302      	movs	r3, #2
 800f7a2:	e02d      	b.n	800f800 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2224      	movs	r2, #36	; 0x24
 800f7b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f022 0201 	bic.w	r2, r2, #1
 800f7ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	683a      	ldr	r2, [r7, #0]
 800f7dc:	430a      	orrs	r2, r1
 800f7de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f000 f811 	bl	800f808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2220      	movs	r2, #32
 800f7f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f7fe:	2300      	movs	r3, #0
}
 800f800:	4618      	mov	r0, r3
 800f802:	3710      	adds	r7, #16
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f808:	b480      	push	{r7}
 800f80a:	b089      	sub	sp, #36	; 0x24
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800f810:	4a2f      	ldr	r2, [pc, #188]	; (800f8d0 <UARTEx_SetNbDataToProcess+0xc8>)
 800f812:	f107 0314 	add.w	r3, r7, #20
 800f816:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f81a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800f81e:	4a2d      	ldr	r2, [pc, #180]	; (800f8d4 <UARTEx_SetNbDataToProcess+0xcc>)
 800f820:	f107 030c 	add.w	r3, r7, #12
 800f824:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f828:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f830:	2b00      	cmp	r3, #0
 800f832:	d108      	bne.n	800f846 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2201      	movs	r2, #1
 800f838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2201      	movs	r2, #1
 800f840:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f844:	e03d      	b.n	800f8c2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f846:	2310      	movs	r3, #16
 800f848:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f84a:	2310      	movs	r3, #16
 800f84c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	689b      	ldr	r3, [r3, #8]
 800f854:	0e5b      	lsrs	r3, r3, #25
 800f856:	b2db      	uxtb	r3, r3
 800f858:	f003 0307 	and.w	r3, r3, #7
 800f85c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	689b      	ldr	r3, [r3, #8]
 800f864:	0f5b      	lsrs	r3, r3, #29
 800f866:	b2db      	uxtb	r3, r3
 800f868:	f003 0307 	and.w	r3, r3, #7
 800f86c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800f86e:	7fbb      	ldrb	r3, [r7, #30]
 800f870:	7f3a      	ldrb	r2, [r7, #28]
 800f872:	f107 0120 	add.w	r1, r7, #32
 800f876:	440a      	add	r2, r1
 800f878:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800f87c:	fb02 f303 	mul.w	r3, r2, r3
 800f880:	7f3a      	ldrb	r2, [r7, #28]
 800f882:	f107 0120 	add.w	r1, r7, #32
 800f886:	440a      	add	r2, r1
 800f888:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800f88c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f890:	b29a      	uxth	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800f898:	7ffb      	ldrb	r3, [r7, #31]
 800f89a:	7f7a      	ldrb	r2, [r7, #29]
 800f89c:	f107 0120 	add.w	r1, r7, #32
 800f8a0:	440a      	add	r2, r1
 800f8a2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800f8a6:	fb02 f303 	mul.w	r3, r2, r3
 800f8aa:	7f7a      	ldrb	r2, [r7, #29]
 800f8ac:	f107 0120 	add.w	r1, r7, #32
 800f8b0:	440a      	add	r2, r1
 800f8b2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800f8b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f8c2:	bf00      	nop
 800f8c4:	3724      	adds	r7, #36	; 0x24
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr
 800f8ce:	bf00      	nop
 800f8d0:	08019710 	.word	0x08019710
 800f8d4:	08019718 	.word	0x08019718

0800f8d8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f8d8:	b084      	sub	sp, #16
 800f8da:	b480      	push	{r7}
 800f8dc:	b085      	sub	sp, #20
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
 800f8e2:	f107 001c 	add.w	r0, r7, #28
 800f8e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f8ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800f8f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f8f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800f8f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800f8fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800f8fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	4313      	orrs	r3, r2
 800f904:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	685a      	ldr	r2, [r3, #4]
 800f90a:	4b07      	ldr	r3, [pc, #28]	; (800f928 <SDMMC_Init+0x50>)
 800f90c:	4013      	ands	r3, r2
 800f90e:	68fa      	ldr	r2, [r7, #12]
 800f910:	431a      	orrs	r2, r3
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f916:	2300      	movs	r3, #0
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3714      	adds	r7, #20
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	b004      	add	sp, #16
 800f924:	4770      	bx	lr
 800f926:	bf00      	nop
 800f928:	ffc02c00 	.word	0xffc02c00

0800f92c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b083      	sub	sp, #12
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	370c      	adds	r7, #12
 800f93e:	46bd      	mov	sp, r7
 800f940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f944:	4770      	bx	lr

0800f946 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800f946:	b480      	push	{r7}
 800f948:	b083      	sub	sp, #12
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
 800f94e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f95a:	2300      	movs	r3, #0
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f043 0203 	orr.w	r2, r3, #3
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f97c:	2300      	movs	r3, #0
}
 800f97e:	4618      	mov	r0, r3
 800f980:	370c      	adds	r7, #12
 800f982:	46bd      	mov	sp, r7
 800f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f988:	4770      	bx	lr

0800f98a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800f98a:	b480      	push	{r7}
 800f98c:	b083      	sub	sp, #12
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f003 0303 	and.w	r3, r3, #3
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	370c      	adds	r7, #12
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a4:	4770      	bx	lr
	...

0800f9a8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b085      	sub	sp, #20
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f9c6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f9cc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f9d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f9d4:	68fa      	ldr	r2, [r7, #12]
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	68da      	ldr	r2, [r3, #12]
 800f9de:	4b06      	ldr	r3, [pc, #24]	; (800f9f8 <SDMMC_SendCommand+0x50>)
 800f9e0:	4013      	ands	r3, r2
 800f9e2:	68fa      	ldr	r2, [r7, #12]
 800f9e4:	431a      	orrs	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f9ea:	2300      	movs	r3, #0
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3714      	adds	r7, #20
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr
 800f9f8:	fffee0c0 	.word	0xfffee0c0

0800f9fc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b083      	sub	sp, #12
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	691b      	ldr	r3, [r3, #16]
 800fa08:	b2db      	uxtb	r3, r3
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	370c      	adds	r7, #12
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa14:	4770      	bx	lr

0800fa16 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fa16:	b480      	push	{r7}
 800fa18:	b085      	sub	sp, #20
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
 800fa1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	3314      	adds	r3, #20
 800fa24:	461a      	mov	r2, r3
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	4413      	add	r3, r2
 800fa2a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3714      	adds	r7, #20
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr

0800fa3c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b085      	sub	sp, #20
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fa46:	2300      	movs	r3, #0
 800fa48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	685a      	ldr	r2, [r3, #4]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fa62:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800fa68:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800fa6e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fa70:	68fa      	ldr	r2, [r7, #12]
 800fa72:	4313      	orrs	r3, r2
 800fa74:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	431a      	orrs	r2, r3
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800fa86:	2300      	movs	r3, #0

}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3714      	adds	r7, #20
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b088      	sub	sp, #32
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800faa2:	2310      	movs	r3, #16
 800faa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800faa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800faaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800faac:	2300      	movs	r3, #0
 800faae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fab4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fab6:	f107 0308 	add.w	r3, r7, #8
 800faba:	4619      	mov	r1, r3
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f7ff ff73 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fac2:	f241 3288 	movw	r2, #5000	; 0x1388
 800fac6:	2110      	movs	r1, #16
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f000 faaf 	bl	801002c <SDMMC_GetCmdResp1>
 800face:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fad0:	69fb      	ldr	r3, [r7, #28]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3720      	adds	r7, #32
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}

0800fada <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fada:	b580      	push	{r7, lr}
 800fadc:	b088      	sub	sp, #32
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
 800fae2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fae8:	2311      	movs	r3, #17
 800faea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800faec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800faf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800faf2:	2300      	movs	r3, #0
 800faf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800faf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fafa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fafc:	f107 0308 	add.w	r3, r7, #8
 800fb00:	4619      	mov	r1, r3
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7ff ff50 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fb08:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb0c:	2111      	movs	r1, #17
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 fa8c 	bl	801002c <SDMMC_GetCmdResp1>
 800fb14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb16:	69fb      	ldr	r3, [r7, #28]
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3720      	adds	r7, #32
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b088      	sub	sp, #32
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fb2e:	2312      	movs	r3, #18
 800fb30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb32:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb42:	f107 0308 	add.w	r3, r7, #8
 800fb46:	4619      	mov	r1, r3
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f7ff ff2d 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fb4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb52:	2112      	movs	r1, #18
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 fa69 	bl	801002c <SDMMC_GetCmdResp1>
 800fb5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb5c:	69fb      	ldr	r3, [r7, #28]
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3720      	adds	r7, #32
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fb66:	b580      	push	{r7, lr}
 800fb68:	b088      	sub	sp, #32
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
 800fb6e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fb74:	2318      	movs	r3, #24
 800fb76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb78:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb88:	f107 0308 	add.w	r3, r7, #8
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f7ff ff0a 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fb94:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb98:	2118      	movs	r1, #24
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 fa46 	bl	801002c <SDMMC_GetCmdResp1>
 800fba0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fba2:	69fb      	ldr	r3, [r7, #28]
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3720      	adds	r7, #32
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b088      	sub	sp, #32
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fbba:	2319      	movs	r3, #25
 800fbbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fbc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fbcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fbce:	f107 0308 	add.w	r3, r7, #8
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f7ff fee7 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fbda:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbde:	2119      	movs	r1, #25
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f000 fa23 	bl	801002c <SDMMC_GetCmdResp1>
 800fbe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbe8:	69fb      	ldr	r3, [r7, #28]
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3720      	adds	r7, #32
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
	...

0800fbf4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b088      	sub	sp, #32
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fc00:	230c      	movs	r3, #12
 800fc02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc12:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	68db      	ldr	r3, [r3, #12]
 800fc18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	68db      	ldr	r3, [r3, #12]
 800fc24:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc2c:	f107 0308 	add.w	r3, r7, #8
 800fc30:	4619      	mov	r1, r3
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f7ff feb8 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fc38:	4a0b      	ldr	r2, [pc, #44]	; (800fc68 <SDMMC_CmdStopTransfer+0x74>)
 800fc3a:	210c      	movs	r1, #12
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f000 f9f5 	bl	801002c <SDMMC_GetCmdResp1>
 800fc42:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fc56:	d101      	bne.n	800fc5c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800fc5c:	69fb      	ldr	r3, [r7, #28]
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3720      	adds	r7, #32
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop
 800fc68:	05f5e100 	.word	0x05f5e100

0800fc6c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b08a      	sub	sp, #40	; 0x28
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fc7c:	2307      	movs	r3, #7
 800fc7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc84:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc86:	2300      	movs	r3, #0
 800fc88:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc8e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc90:	f107 0310 	add.w	r3, r7, #16
 800fc94:	4619      	mov	r1, r3
 800fc96:	68f8      	ldr	r0, [r7, #12]
 800fc98:	f7ff fe86 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fc9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fca0:	2107      	movs	r1, #7
 800fca2:	68f8      	ldr	r0, [r7, #12]
 800fca4:	f000 f9c2 	bl	801002c <SDMMC_GetCmdResp1>
 800fca8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3728      	adds	r7, #40	; 0x28
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b088      	sub	sp, #32
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fcd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcd2:	f107 0308 	add.w	r3, r7, #8
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f7ff fe65 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 f976 	bl	800ffd0 <SDMMC_GetCmdError>
 800fce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fce6:	69fb      	ldr	r3, [r7, #28]
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3720      	adds	r7, #32
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b088      	sub	sp, #32
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fcf8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800fcfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fcfe:	2308      	movs	r3, #8
 800fd00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd12:	f107 0308 	add.w	r3, r7, #8
 800fd16:	4619      	mov	r1, r3
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7ff fe45 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f000 fb78 	bl	8010414 <SDMMC_GetCmdResp7>
 800fd24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd26:	69fb      	ldr	r3, [r7, #28]
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3720      	adds	r7, #32
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b088      	sub	sp, #32
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fd3e:	2337      	movs	r3, #55	; 0x37
 800fd40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd52:	f107 0308 	add.w	r3, r7, #8
 800fd56:	4619      	mov	r1, r3
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f7ff fe25 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fd5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd62:	2137      	movs	r1, #55	; 0x37
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f000 f961 	bl	801002c <SDMMC_GetCmdResp1>
 800fd6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd6c:	69fb      	ldr	r3, [r7, #28]
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3720      	adds	r7, #32
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}

0800fd76 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fd76:	b580      	push	{r7, lr}
 800fd78:	b088      	sub	sp, #32
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
 800fd7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fd84:	2329      	movs	r3, #41	; 0x29
 800fd86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd98:	f107 0308 	add.w	r3, r7, #8
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f7ff fe02 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f000 fa7d 	bl	80102a4 <SDMMC_GetCmdResp3>
 800fdaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdac:	69fb      	ldr	r3, [r7, #28]
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3720      	adds	r7, #32
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}

0800fdb6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800fdb6:	b580      	push	{r7, lr}
 800fdb8:	b088      	sub	sp, #32
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
 800fdbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800fdc4:	2306      	movs	r3, #6
 800fdc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fdcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fdd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdd8:	f107 0308 	add.w	r3, r7, #8
 800fddc:	4619      	mov	r1, r3
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f7ff fde2 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800fde4:	f241 3288 	movw	r2, #5000	; 0x1388
 800fde8:	2106      	movs	r1, #6
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 f91e 	bl	801002c <SDMMC_GetCmdResp1>
 800fdf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdf2:	69fb      	ldr	r3, [r7, #28]
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3720      	adds	r7, #32
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b088      	sub	sp, #32
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800fe04:	2300      	movs	r3, #0
 800fe06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fe08:	2333      	movs	r3, #51	; 0x33
 800fe0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe12:	2300      	movs	r3, #0
 800fe14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe1c:	f107 0308 	add.w	r3, r7, #8
 800fe20:	4619      	mov	r1, r3
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f7ff fdc0 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800fe28:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe2c:	2133      	movs	r1, #51	; 0x33
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f000 f8fc 	bl	801002c <SDMMC_GetCmdResp1>
 800fe34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe36:	69fb      	ldr	r3, [r7, #28]
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3720      	adds	r7, #32
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b088      	sub	sp, #32
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fe4c:	2302      	movs	r3, #2
 800fe4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fe50:	f44f 7340 	mov.w	r3, #768	; 0x300
 800fe54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe56:	2300      	movs	r3, #0
 800fe58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe60:	f107 0308 	add.w	r3, r7, #8
 800fe64:	4619      	mov	r1, r3
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f7ff fd9e 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f000 f9cf 	bl	8010210 <SDMMC_GetCmdResp2>
 800fe72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe74:	69fb      	ldr	r3, [r7, #28]
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3720      	adds	r7, #32
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fe7e:	b580      	push	{r7, lr}
 800fe80:	b088      	sub	sp, #32
 800fe82:	af00      	add	r7, sp, #0
 800fe84:	6078      	str	r0, [r7, #4]
 800fe86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fe8c:	2309      	movs	r3, #9
 800fe8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fe90:	f44f 7340 	mov.w	r3, #768	; 0x300
 800fe94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe96:	2300      	movs	r3, #0
 800fe98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fea0:	f107 0308 	add.w	r3, r7, #8
 800fea4:	4619      	mov	r1, r3
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f7ff fd7e 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 f9af 	bl	8010210 <SDMMC_GetCmdResp2>
 800feb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800feb4:	69fb      	ldr	r3, [r7, #28]
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3720      	adds	r7, #32
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}

0800febe <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800febe:	b580      	push	{r7, lr}
 800fec0:	b088      	sub	sp, #32
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
 800fec6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fec8:	2300      	movs	r3, #0
 800feca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fecc:	2303      	movs	r3, #3
 800fece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fed4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fed6:	2300      	movs	r3, #0
 800fed8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800feda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fede:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fee0:	f107 0308 	add.w	r3, r7, #8
 800fee4:	4619      	mov	r1, r3
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f7ff fd5e 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800feec:	683a      	ldr	r2, [r7, #0]
 800feee:	2103      	movs	r1, #3
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 fa17 	bl	8010324 <SDMMC_GetCmdResp6>
 800fef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fef8:	69fb      	ldr	r3, [r7, #28]
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3720      	adds	r7, #32
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b088      	sub	sp, #32
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
 800ff0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ff10:	230d      	movs	r3, #13
 800ff12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff24:	f107 0308 	add.w	r3, r7, #8
 800ff28:	4619      	mov	r1, r3
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f7ff fd3c 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ff30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff34:	210d      	movs	r1, #13
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f000 f878 	bl	801002c <SDMMC_GetCmdResp1>
 800ff3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff3e:	69fb      	ldr	r3, [r7, #28]
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3720      	adds	r7, #32
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b088      	sub	sp, #32
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ff50:	2300      	movs	r3, #0
 800ff52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ff54:	230d      	movs	r3, #13
 800ff56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff68:	f107 0308 	add.w	r3, r7, #8
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f7ff fd1a 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ff74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff78:	210d      	movs	r1, #13
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 f856 	bl	801002c <SDMMC_GetCmdResp1>
 800ff80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff82:	69fb      	ldr	r3, [r7, #28]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3720      	adds	r7, #32
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b088      	sub	sp, #32
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800ff94:	2300      	movs	r3, #0
 800ff96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800ff98:	230b      	movs	r3, #11
 800ff9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ffa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ffa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ffaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ffac:	f107 0308 	add.w	r3, r7, #8
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7ff fcf8 	bl	800f9a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800ffb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffbc:	210b      	movs	r1, #11
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 f834 	bl	801002c <SDMMC_GetCmdResp1>
 800ffc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffc6:	69fb      	ldr	r3, [r7, #28]
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3720      	adds	r7, #32
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b085      	sub	sp, #20
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ffd8:	4b11      	ldr	r3, [pc, #68]	; (8010020 <SDMMC_GetCmdError+0x50>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4a11      	ldr	r2, [pc, #68]	; (8010024 <SDMMC_GetCmdError+0x54>)
 800ffde:	fba2 2303 	umull	r2, r3, r2, r3
 800ffe2:	0a5b      	lsrs	r3, r3, #9
 800ffe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffe8:	fb02 f303 	mul.w	r3, r2, r3
 800ffec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	1e5a      	subs	r2, r3, #1
 800fff2:	60fa      	str	r2, [r7, #12]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d102      	bne.n	800fffe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fffc:	e009      	b.n	8010012 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010006:	2b00      	cmp	r3, #0
 8010008:	d0f1      	beq.n	800ffee <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	4a06      	ldr	r2, [pc, #24]	; (8010028 <SDMMC_GetCmdError+0x58>)
 801000e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8010010:	2300      	movs	r3, #0
}
 8010012:	4618      	mov	r0, r3
 8010014:	3714      	adds	r7, #20
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr
 801001e:	bf00      	nop
 8010020:	2400000c 	.word	0x2400000c
 8010024:	10624dd3 	.word	0x10624dd3
 8010028:	002000c5 	.word	0x002000c5

0801002c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b088      	sub	sp, #32
 8010030:	af00      	add	r7, sp, #0
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	460b      	mov	r3, r1
 8010036:	607a      	str	r2, [r7, #4]
 8010038:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801003a:	4b70      	ldr	r3, [pc, #448]	; (80101fc <SDMMC_GetCmdResp1+0x1d0>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a70      	ldr	r2, [pc, #448]	; (8010200 <SDMMC_GetCmdResp1+0x1d4>)
 8010040:	fba2 2303 	umull	r2, r3, r2, r3
 8010044:	0a5a      	lsrs	r2, r3, #9
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	fb02 f303 	mul.w	r3, r2, r3
 801004c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801004e:	69fb      	ldr	r3, [r7, #28]
 8010050:	1e5a      	subs	r2, r3, #1
 8010052:	61fa      	str	r2, [r7, #28]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d102      	bne.n	801005e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010058:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801005c:	e0c9      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010062:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010064:	69ba      	ldr	r2, [r7, #24]
 8010066:	4b67      	ldr	r3, [pc, #412]	; (8010204 <SDMMC_GetCmdResp1+0x1d8>)
 8010068:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801006a:	2b00      	cmp	r3, #0
 801006c:	d0ef      	beq.n	801004e <SDMMC_GetCmdResp1+0x22>
 801006e:	69bb      	ldr	r3, [r7, #24]
 8010070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010074:	2b00      	cmp	r3, #0
 8010076:	d1ea      	bne.n	801004e <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801007c:	f003 0304 	and.w	r3, r3, #4
 8010080:	2b00      	cmp	r3, #0
 8010082:	d004      	beq.n	801008e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	2204      	movs	r2, #4
 8010088:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801008a:	2304      	movs	r3, #4
 801008c:	e0b1      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010092:	f003 0301 	and.w	r3, r3, #1
 8010096:	2b00      	cmp	r3, #0
 8010098:	d004      	beq.n	80100a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	2201      	movs	r2, #1
 801009e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80100a0:	2301      	movs	r3, #1
 80100a2:	e0a6      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	4a58      	ldr	r2, [pc, #352]	; (8010208 <SDMMC_GetCmdResp1+0x1dc>)
 80100a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f7ff fca6 	bl	800f9fc <SDMMC_GetCommandResponse>
 80100b0:	4603      	mov	r3, r0
 80100b2:	461a      	mov	r2, r3
 80100b4:	7afb      	ldrb	r3, [r7, #11]
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d001      	beq.n	80100be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80100ba:	2301      	movs	r3, #1
 80100bc:	e099      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80100be:	2100      	movs	r1, #0
 80100c0:	68f8      	ldr	r0, [r7, #12]
 80100c2:	f7ff fca8 	bl	800fa16 <SDMMC_GetResponse>
 80100c6:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80100c8:	697a      	ldr	r2, [r7, #20]
 80100ca:	4b50      	ldr	r3, [pc, #320]	; (801020c <SDMMC_GetCmdResp1+0x1e0>)
 80100cc:	4013      	ands	r3, r2
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d101      	bne.n	80100d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80100d2:	2300      	movs	r3, #0
 80100d4:	e08d      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	da02      	bge.n	80100e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80100dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80100e0:	e087      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d001      	beq.n	80100f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80100ec:	2340      	movs	r3, #64	; 0x40
 80100ee:	e080      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d001      	beq.n	80100fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80100fa:	2380      	movs	r3, #128	; 0x80
 80100fc:	e079      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010104:	2b00      	cmp	r3, #0
 8010106:	d002      	beq.n	801010e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010108:	f44f 7380 	mov.w	r3, #256	; 0x100
 801010c:	e071      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010114:	2b00      	cmp	r3, #0
 8010116:	d002      	beq.n	801011e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010118:	f44f 7300 	mov.w	r3, #512	; 0x200
 801011c:	e069      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010124:	2b00      	cmp	r3, #0
 8010126:	d002      	beq.n	801012e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801012c:	e061      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010134:	2b00      	cmp	r3, #0
 8010136:	d002      	beq.n	801013e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010138:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801013c:	e059      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010144:	2b00      	cmp	r3, #0
 8010146:	d002      	beq.n	801014e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801014c:	e051      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010154:	2b00      	cmp	r3, #0
 8010156:	d002      	beq.n	801015e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801015c:	e049      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010164:	2b00      	cmp	r3, #0
 8010166:	d002      	beq.n	801016e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010168:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801016c:	e041      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010174:	2b00      	cmp	r3, #0
 8010176:	d002      	beq.n	801017e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801017c:	e039      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010184:	2b00      	cmp	r3, #0
 8010186:	d002      	beq.n	801018e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801018c:	e031      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010194:	2b00      	cmp	r3, #0
 8010196:	d002      	beq.n	801019e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010198:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801019c:	e029      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d002      	beq.n	80101ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80101a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80101ac:	e021      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d002      	beq.n	80101be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80101b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80101bc:	e019      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d002      	beq.n	80101ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80101c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80101cc:	e011      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d002      	beq.n	80101de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80101d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80101dc:	e009      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	f003 0308 	and.w	r3, r3, #8
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d002      	beq.n	80101ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80101e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80101ec:	e001      	b.n	80101f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80101ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3720      	adds	r7, #32
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	2400000c 	.word	0x2400000c
 8010200:	10624dd3 	.word	0x10624dd3
 8010204:	00200045 	.word	0x00200045
 8010208:	002000c5 	.word	0x002000c5
 801020c:	fdffe008 	.word	0xfdffe008

08010210 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010210:	b480      	push	{r7}
 8010212:	b085      	sub	sp, #20
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010218:	4b1f      	ldr	r3, [pc, #124]	; (8010298 <SDMMC_GetCmdResp2+0x88>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	4a1f      	ldr	r2, [pc, #124]	; (801029c <SDMMC_GetCmdResp2+0x8c>)
 801021e:	fba2 2303 	umull	r2, r3, r2, r3
 8010222:	0a5b      	lsrs	r3, r3, #9
 8010224:	f241 3288 	movw	r2, #5000	; 0x1388
 8010228:	fb02 f303 	mul.w	r3, r2, r3
 801022c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	1e5a      	subs	r2, r3, #1
 8010232:	60fa      	str	r2, [r7, #12]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d102      	bne.n	801023e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010238:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801023c:	e026      	b.n	801028c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010242:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801024a:	2b00      	cmp	r3, #0
 801024c:	d0ef      	beq.n	801022e <SDMMC_GetCmdResp2+0x1e>
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010254:	2b00      	cmp	r3, #0
 8010256:	d1ea      	bne.n	801022e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801025c:	f003 0304 	and.w	r3, r3, #4
 8010260:	2b00      	cmp	r3, #0
 8010262:	d004      	beq.n	801026e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2204      	movs	r2, #4
 8010268:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801026a:	2304      	movs	r3, #4
 801026c:	e00e      	b.n	801028c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010272:	f003 0301 	and.w	r3, r3, #1
 8010276:	2b00      	cmp	r3, #0
 8010278:	d004      	beq.n	8010284 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2201      	movs	r2, #1
 801027e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010280:	2301      	movs	r3, #1
 8010282:	e003      	b.n	801028c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	4a06      	ldr	r2, [pc, #24]	; (80102a0 <SDMMC_GetCmdResp2+0x90>)
 8010288:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801028a:	2300      	movs	r3, #0
}
 801028c:	4618      	mov	r0, r3
 801028e:	3714      	adds	r7, #20
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr
 8010298:	2400000c 	.word	0x2400000c
 801029c:	10624dd3 	.word	0x10624dd3
 80102a0:	002000c5 	.word	0x002000c5

080102a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80102a4:	b480      	push	{r7}
 80102a6:	b085      	sub	sp, #20
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80102ac:	4b1a      	ldr	r3, [pc, #104]	; (8010318 <SDMMC_GetCmdResp3+0x74>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	4a1a      	ldr	r2, [pc, #104]	; (801031c <SDMMC_GetCmdResp3+0x78>)
 80102b2:	fba2 2303 	umull	r2, r3, r2, r3
 80102b6:	0a5b      	lsrs	r3, r3, #9
 80102b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80102bc:	fb02 f303 	mul.w	r3, r2, r3
 80102c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	1e5a      	subs	r2, r3, #1
 80102c6:	60fa      	str	r2, [r7, #12]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d102      	bne.n	80102d2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80102cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80102d0:	e01b      	b.n	801030a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d0ef      	beq.n	80102c2 <SDMMC_GetCmdResp3+0x1e>
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1ea      	bne.n	80102c2 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102f0:	f003 0304 	and.w	r3, r3, #4
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d004      	beq.n	8010302 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2204      	movs	r2, #4
 80102fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80102fe:	2304      	movs	r3, #4
 8010300:	e003      	b.n	801030a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4a06      	ldr	r2, [pc, #24]	; (8010320 <SDMMC_GetCmdResp3+0x7c>)
 8010306:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010308:	2300      	movs	r3, #0
}
 801030a:	4618      	mov	r0, r3
 801030c:	3714      	adds	r7, #20
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr
 8010316:	bf00      	nop
 8010318:	2400000c 	.word	0x2400000c
 801031c:	10624dd3 	.word	0x10624dd3
 8010320:	002000c5 	.word	0x002000c5

08010324 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b088      	sub	sp, #32
 8010328:	af00      	add	r7, sp, #0
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	460b      	mov	r3, r1
 801032e:	607a      	str	r2, [r7, #4]
 8010330:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010332:	4b35      	ldr	r3, [pc, #212]	; (8010408 <SDMMC_GetCmdResp6+0xe4>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	4a35      	ldr	r2, [pc, #212]	; (801040c <SDMMC_GetCmdResp6+0xe8>)
 8010338:	fba2 2303 	umull	r2, r3, r2, r3
 801033c:	0a5b      	lsrs	r3, r3, #9
 801033e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010342:	fb02 f303 	mul.w	r3, r2, r3
 8010346:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	1e5a      	subs	r2, r3, #1
 801034c:	61fa      	str	r2, [r7, #28]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d102      	bne.n	8010358 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010352:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010356:	e052      	b.n	80103fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801035c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801035e:	69bb      	ldr	r3, [r7, #24]
 8010360:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010364:	2b00      	cmp	r3, #0
 8010366:	d0ef      	beq.n	8010348 <SDMMC_GetCmdResp6+0x24>
 8010368:	69bb      	ldr	r3, [r7, #24]
 801036a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801036e:	2b00      	cmp	r3, #0
 8010370:	d1ea      	bne.n	8010348 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010376:	f003 0304 	and.w	r3, r3, #4
 801037a:	2b00      	cmp	r3, #0
 801037c:	d004      	beq.n	8010388 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2204      	movs	r2, #4
 8010382:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010384:	2304      	movs	r3, #4
 8010386:	e03a      	b.n	80103fe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801038c:	f003 0301 	and.w	r3, r3, #1
 8010390:	2b00      	cmp	r3, #0
 8010392:	d004      	beq.n	801039e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	2201      	movs	r2, #1
 8010398:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801039a:	2301      	movs	r3, #1
 801039c:	e02f      	b.n	80103fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	f7ff fb2c 	bl	800f9fc <SDMMC_GetCommandResponse>
 80103a4:	4603      	mov	r3, r0
 80103a6:	461a      	mov	r2, r3
 80103a8:	7afb      	ldrb	r3, [r7, #11]
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d001      	beq.n	80103b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80103ae:	2301      	movs	r3, #1
 80103b0:	e025      	b.n	80103fe <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	4a16      	ldr	r2, [pc, #88]	; (8010410 <SDMMC_GetCmdResp6+0xec>)
 80103b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80103b8:	2100      	movs	r1, #0
 80103ba:	68f8      	ldr	r0, [r7, #12]
 80103bc:	f7ff fb2b 	bl	800fa16 <SDMMC_GetResponse>
 80103c0:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d106      	bne.n	80103da <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	0c1b      	lsrs	r3, r3, #16
 80103d0:	b29a      	uxth	r2, r3
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80103d6:	2300      	movs	r3, #0
 80103d8:	e011      	b.n	80103fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d002      	beq.n	80103ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80103e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80103e8:	e009      	b.n	80103fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d002      	beq.n	80103fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80103f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103f8:	e001      	b.n	80103fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80103fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3720      	adds	r7, #32
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}
 8010406:	bf00      	nop
 8010408:	2400000c 	.word	0x2400000c
 801040c:	10624dd3 	.word	0x10624dd3
 8010410:	002000c5 	.word	0x002000c5

08010414 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010414:	b480      	push	{r7}
 8010416:	b085      	sub	sp, #20
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801041c:	4b22      	ldr	r3, [pc, #136]	; (80104a8 <SDMMC_GetCmdResp7+0x94>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	4a22      	ldr	r2, [pc, #136]	; (80104ac <SDMMC_GetCmdResp7+0x98>)
 8010422:	fba2 2303 	umull	r2, r3, r2, r3
 8010426:	0a5b      	lsrs	r3, r3, #9
 8010428:	f241 3288 	movw	r2, #5000	; 0x1388
 801042c:	fb02 f303 	mul.w	r3, r2, r3
 8010430:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	1e5a      	subs	r2, r3, #1
 8010436:	60fa      	str	r2, [r7, #12]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d102      	bne.n	8010442 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801043c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010440:	e02c      	b.n	801049c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010446:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801044e:	2b00      	cmp	r3, #0
 8010450:	d0ef      	beq.n	8010432 <SDMMC_GetCmdResp7+0x1e>
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010458:	2b00      	cmp	r3, #0
 801045a:	d1ea      	bne.n	8010432 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010460:	f003 0304 	and.w	r3, r3, #4
 8010464:	2b00      	cmp	r3, #0
 8010466:	d004      	beq.n	8010472 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2204      	movs	r2, #4
 801046c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801046e:	2304      	movs	r3, #4
 8010470:	e014      	b.n	801049c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010476:	f003 0301 	and.w	r3, r3, #1
 801047a:	2b00      	cmp	r3, #0
 801047c:	d004      	beq.n	8010488 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2201      	movs	r2, #1
 8010482:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010484:	2301      	movs	r3, #1
 8010486:	e009      	b.n	801049c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801048c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010490:	2b00      	cmp	r3, #0
 8010492:	d002      	beq.n	801049a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2240      	movs	r2, #64	; 0x40
 8010498:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801049a:	2300      	movs	r3, #0

}
 801049c:	4618      	mov	r0, r3
 801049e:	3714      	adds	r7, #20
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr
 80104a8:	2400000c 	.word	0x2400000c
 80104ac:	10624dd3 	.word	0x10624dd3

080104b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80104b0:	b084      	sub	sp, #16
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b084      	sub	sp, #16
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
 80104ba:	f107 001c 	add.w	r0, r7, #28
 80104be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80104c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	d120      	bne.n	801050a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	68da      	ldr	r2, [r3, #12]
 80104d8:	4b25      	ldr	r3, [pc, #148]	; (8010570 <USB_CoreInit+0xc0>)
 80104da:	4013      	ands	r3, r2
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80104ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104ee:	2b01      	cmp	r3, #1
 80104f0:	d105      	bne.n	80104fe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	68db      	ldr	r3, [r3, #12]
 80104f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f001 fabe 	bl	8011a80 <USB_CoreReset>
 8010504:	4603      	mov	r3, r0
 8010506:	73fb      	strb	r3, [r7, #15]
 8010508:	e01a      	b.n	8010540 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f001 fab2 	bl	8011a80 <USB_CoreReset>
 801051c:	4603      	mov	r3, r0
 801051e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010522:	2b00      	cmp	r3, #0
 8010524:	d106      	bne.n	8010534 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801052a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	639a      	str	r2, [r3, #56]	; 0x38
 8010532:	e005      	b.n	8010540 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010542:	2b01      	cmp	r3, #1
 8010544:	d10b      	bne.n	801055e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	689b      	ldr	r3, [r3, #8]
 801054a:	f043 0206 	orr.w	r2, r3, #6
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	689b      	ldr	r3, [r3, #8]
 8010556:	f043 0220 	orr.w	r2, r3, #32
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801055e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010560:	4618      	mov	r0, r3
 8010562:	3710      	adds	r7, #16
 8010564:	46bd      	mov	sp, r7
 8010566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801056a:	b004      	add	sp, #16
 801056c:	4770      	bx	lr
 801056e:	bf00      	nop
 8010570:	ffbdffbf 	.word	0xffbdffbf

08010574 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010574:	b480      	push	{r7}
 8010576:	b087      	sub	sp, #28
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	4613      	mov	r3, r2
 8010580:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010582:	79fb      	ldrb	r3, [r7, #7]
 8010584:	2b02      	cmp	r3, #2
 8010586:	d165      	bne.n	8010654 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	4a41      	ldr	r2, [pc, #260]	; (8010690 <USB_SetTurnaroundTime+0x11c>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d906      	bls.n	801059e <USB_SetTurnaroundTime+0x2a>
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	4a40      	ldr	r2, [pc, #256]	; (8010694 <USB_SetTurnaroundTime+0x120>)
 8010594:	4293      	cmp	r3, r2
 8010596:	d802      	bhi.n	801059e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010598:	230f      	movs	r3, #15
 801059a:	617b      	str	r3, [r7, #20]
 801059c:	e062      	b.n	8010664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	4a3c      	ldr	r2, [pc, #240]	; (8010694 <USB_SetTurnaroundTime+0x120>)
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d906      	bls.n	80105b4 <USB_SetTurnaroundTime+0x40>
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	4a3b      	ldr	r2, [pc, #236]	; (8010698 <USB_SetTurnaroundTime+0x124>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d802      	bhi.n	80105b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80105ae:	230e      	movs	r3, #14
 80105b0:	617b      	str	r3, [r7, #20]
 80105b2:	e057      	b.n	8010664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	4a38      	ldr	r2, [pc, #224]	; (8010698 <USB_SetTurnaroundTime+0x124>)
 80105b8:	4293      	cmp	r3, r2
 80105ba:	d906      	bls.n	80105ca <USB_SetTurnaroundTime+0x56>
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	4a37      	ldr	r2, [pc, #220]	; (801069c <USB_SetTurnaroundTime+0x128>)
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d802      	bhi.n	80105ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80105c4:	230d      	movs	r3, #13
 80105c6:	617b      	str	r3, [r7, #20]
 80105c8:	e04c      	b.n	8010664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	4a33      	ldr	r2, [pc, #204]	; (801069c <USB_SetTurnaroundTime+0x128>)
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d906      	bls.n	80105e0 <USB_SetTurnaroundTime+0x6c>
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	4a32      	ldr	r2, [pc, #200]	; (80106a0 <USB_SetTurnaroundTime+0x12c>)
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d802      	bhi.n	80105e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80105da:	230c      	movs	r3, #12
 80105dc:	617b      	str	r3, [r7, #20]
 80105de:	e041      	b.n	8010664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	4a2f      	ldr	r2, [pc, #188]	; (80106a0 <USB_SetTurnaroundTime+0x12c>)
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d906      	bls.n	80105f6 <USB_SetTurnaroundTime+0x82>
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	4a2e      	ldr	r2, [pc, #184]	; (80106a4 <USB_SetTurnaroundTime+0x130>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d802      	bhi.n	80105f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80105f0:	230b      	movs	r3, #11
 80105f2:	617b      	str	r3, [r7, #20]
 80105f4:	e036      	b.n	8010664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	4a2a      	ldr	r2, [pc, #168]	; (80106a4 <USB_SetTurnaroundTime+0x130>)
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d906      	bls.n	801060c <USB_SetTurnaroundTime+0x98>
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	4a29      	ldr	r2, [pc, #164]	; (80106a8 <USB_SetTurnaroundTime+0x134>)
 8010602:	4293      	cmp	r3, r2
 8010604:	d802      	bhi.n	801060c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010606:	230a      	movs	r3, #10
 8010608:	617b      	str	r3, [r7, #20]
 801060a:	e02b      	b.n	8010664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	4a26      	ldr	r2, [pc, #152]	; (80106a8 <USB_SetTurnaroundTime+0x134>)
 8010610:	4293      	cmp	r3, r2
 8010612:	d906      	bls.n	8010622 <USB_SetTurnaroundTime+0xae>
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	4a25      	ldr	r2, [pc, #148]	; (80106ac <USB_SetTurnaroundTime+0x138>)
 8010618:	4293      	cmp	r3, r2
 801061a:	d802      	bhi.n	8010622 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801061c:	2309      	movs	r3, #9
 801061e:	617b      	str	r3, [r7, #20]
 8010620:	e020      	b.n	8010664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	4a21      	ldr	r2, [pc, #132]	; (80106ac <USB_SetTurnaroundTime+0x138>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d906      	bls.n	8010638 <USB_SetTurnaroundTime+0xc4>
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	4a20      	ldr	r2, [pc, #128]	; (80106b0 <USB_SetTurnaroundTime+0x13c>)
 801062e:	4293      	cmp	r3, r2
 8010630:	d802      	bhi.n	8010638 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010632:	2308      	movs	r3, #8
 8010634:	617b      	str	r3, [r7, #20]
 8010636:	e015      	b.n	8010664 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	4a1d      	ldr	r2, [pc, #116]	; (80106b0 <USB_SetTurnaroundTime+0x13c>)
 801063c:	4293      	cmp	r3, r2
 801063e:	d906      	bls.n	801064e <USB_SetTurnaroundTime+0xda>
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	4a1c      	ldr	r2, [pc, #112]	; (80106b4 <USB_SetTurnaroundTime+0x140>)
 8010644:	4293      	cmp	r3, r2
 8010646:	d802      	bhi.n	801064e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010648:	2307      	movs	r3, #7
 801064a:	617b      	str	r3, [r7, #20]
 801064c:	e00a      	b.n	8010664 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801064e:	2306      	movs	r3, #6
 8010650:	617b      	str	r3, [r7, #20]
 8010652:	e007      	b.n	8010664 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010654:	79fb      	ldrb	r3, [r7, #7]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d102      	bne.n	8010660 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801065a:	2309      	movs	r3, #9
 801065c:	617b      	str	r3, [r7, #20]
 801065e:	e001      	b.n	8010664 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010660:	2309      	movs	r3, #9
 8010662:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	68da      	ldr	r2, [r3, #12]
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	029b      	lsls	r3, r3, #10
 8010678:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801067c:	431a      	orrs	r2, r3
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010682:	2300      	movs	r3, #0
}
 8010684:	4618      	mov	r0, r3
 8010686:	371c      	adds	r7, #28
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr
 8010690:	00d8acbf 	.word	0x00d8acbf
 8010694:	00e4e1bf 	.word	0x00e4e1bf
 8010698:	00f423ff 	.word	0x00f423ff
 801069c:	0106737f 	.word	0x0106737f
 80106a0:	011a499f 	.word	0x011a499f
 80106a4:	01312cff 	.word	0x01312cff
 80106a8:	014ca43f 	.word	0x014ca43f
 80106ac:	016e35ff 	.word	0x016e35ff
 80106b0:	01a6ab1f 	.word	0x01a6ab1f
 80106b4:	01e847ff 	.word	0x01e847ff

080106b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	689b      	ldr	r3, [r3, #8]
 80106c4:	f043 0201 	orr.w	r2, r3, #1
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	370c      	adds	r7, #12
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr

080106da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80106da:	b480      	push	{r7}
 80106dc:	b083      	sub	sp, #12
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	689b      	ldr	r3, [r3, #8]
 80106e6:	f023 0201 	bic.w	r2, r3, #1
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80106ee:	2300      	movs	r3, #0
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	460b      	mov	r3, r1
 8010706:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	68db      	ldr	r3, [r3, #12]
 801070c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010714:	78fb      	ldrb	r3, [r7, #3]
 8010716:	2b01      	cmp	r3, #1
 8010718:	d106      	bne.n	8010728 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	68db      	ldr	r3, [r3, #12]
 801071e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	60da      	str	r2, [r3, #12]
 8010726:	e00b      	b.n	8010740 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010728:	78fb      	ldrb	r3, [r7, #3]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d106      	bne.n	801073c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	68db      	ldr	r3, [r3, #12]
 8010732:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	60da      	str	r2, [r3, #12]
 801073a:	e001      	b.n	8010740 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 801073c:	2301      	movs	r3, #1
 801073e:	e003      	b.n	8010748 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010740:	2032      	movs	r0, #50	; 0x32
 8010742:	f7f2 fc85 	bl	8003050 <HAL_Delay>

  return HAL_OK;
 8010746:	2300      	movs	r3, #0
}
 8010748:	4618      	mov	r0, r3
 801074a:	3708      	adds	r7, #8
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010750:	b084      	sub	sp, #16
 8010752:	b580      	push	{r7, lr}
 8010754:	b086      	sub	sp, #24
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
 801075a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801075e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010762:	2300      	movs	r3, #0
 8010764:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801076a:	2300      	movs	r3, #0
 801076c:	613b      	str	r3, [r7, #16]
 801076e:	e009      	b.n	8010784 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	3340      	adds	r3, #64	; 0x40
 8010776:	009b      	lsls	r3, r3, #2
 8010778:	4413      	add	r3, r2
 801077a:	2200      	movs	r2, #0
 801077c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	3301      	adds	r3, #1
 8010782:	613b      	str	r3, [r7, #16]
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	2b0e      	cmp	r3, #14
 8010788:	d9f2      	bls.n	8010770 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801078a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801078c:	2b00      	cmp	r3, #0
 801078e:	d11c      	bne.n	80107ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	68fa      	ldr	r2, [r7, #12]
 801079a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801079e:	f043 0302 	orr.w	r3, r3, #2
 80107a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	601a      	str	r2, [r3, #0]
 80107c8:	e005      	b.n	80107d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80107dc:	461a      	mov	r2, r3
 80107de:	2300      	movs	r3, #0
 80107e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107e8:	4619      	mov	r1, r3
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107f0:	461a      	mov	r2, r3
 80107f2:	680b      	ldr	r3, [r1, #0]
 80107f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80107f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d10c      	bne.n	8010816 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80107fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d104      	bne.n	801080c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010802:	2100      	movs	r1, #0
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f000 f949 	bl	8010a9c <USB_SetDevSpeed>
 801080a:	e008      	b.n	801081e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801080c:	2101      	movs	r1, #1
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f000 f944 	bl	8010a9c <USB_SetDevSpeed>
 8010814:	e003      	b.n	801081e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010816:	2103      	movs	r1, #3
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f000 f93f 	bl	8010a9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801081e:	2110      	movs	r1, #16
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 f8f3 	bl	8010a0c <USB_FlushTxFifo>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d001      	beq.n	8010830 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801082c:	2301      	movs	r3, #1
 801082e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f000 f911 	bl	8010a58 <USB_FlushRxFifo>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d001      	beq.n	8010840 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801083c:	2301      	movs	r3, #1
 801083e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010846:	461a      	mov	r2, r3
 8010848:	2300      	movs	r3, #0
 801084a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010852:	461a      	mov	r2, r3
 8010854:	2300      	movs	r3, #0
 8010856:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801085e:	461a      	mov	r2, r3
 8010860:	2300      	movs	r3, #0
 8010862:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010864:	2300      	movs	r3, #0
 8010866:	613b      	str	r3, [r7, #16]
 8010868:	e043      	b.n	80108f2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801086a:	693b      	ldr	r3, [r7, #16]
 801086c:	015a      	lsls	r2, r3, #5
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	4413      	add	r3, r2
 8010872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801087c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010880:	d118      	bne.n	80108b4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d10a      	bne.n	801089e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	015a      	lsls	r2, r3, #5
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	4413      	add	r3, r2
 8010890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010894:	461a      	mov	r2, r3
 8010896:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801089a:	6013      	str	r3, [r2, #0]
 801089c:	e013      	b.n	80108c6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	015a      	lsls	r2, r3, #5
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	4413      	add	r3, r2
 80108a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108aa:	461a      	mov	r2, r3
 80108ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80108b0:	6013      	str	r3, [r2, #0]
 80108b2:	e008      	b.n	80108c6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	015a      	lsls	r2, r3, #5
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	4413      	add	r3, r2
 80108bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108c0:	461a      	mov	r2, r3
 80108c2:	2300      	movs	r3, #0
 80108c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	015a      	lsls	r2, r3, #5
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	4413      	add	r3, r2
 80108ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108d2:	461a      	mov	r2, r3
 80108d4:	2300      	movs	r3, #0
 80108d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	015a      	lsls	r2, r3, #5
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	4413      	add	r3, r2
 80108e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108e4:	461a      	mov	r2, r3
 80108e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80108ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	3301      	adds	r3, #1
 80108f0:	613b      	str	r3, [r7, #16]
 80108f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f4:	693a      	ldr	r2, [r7, #16]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d3b7      	bcc.n	801086a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80108fa:	2300      	movs	r3, #0
 80108fc:	613b      	str	r3, [r7, #16]
 80108fe:	e043      	b.n	8010988 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	015a      	lsls	r2, r3, #5
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	4413      	add	r3, r2
 8010908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010916:	d118      	bne.n	801094a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d10a      	bne.n	8010934 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	015a      	lsls	r2, r3, #5
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	4413      	add	r3, r2
 8010926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801092a:	461a      	mov	r2, r3
 801092c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010930:	6013      	str	r3, [r2, #0]
 8010932:	e013      	b.n	801095c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	015a      	lsls	r2, r3, #5
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	4413      	add	r3, r2
 801093c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010940:	461a      	mov	r2, r3
 8010942:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010946:	6013      	str	r3, [r2, #0]
 8010948:	e008      	b.n	801095c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	015a      	lsls	r2, r3, #5
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	4413      	add	r3, r2
 8010952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010956:	461a      	mov	r2, r3
 8010958:	2300      	movs	r3, #0
 801095a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	015a      	lsls	r2, r3, #5
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	4413      	add	r3, r2
 8010964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010968:	461a      	mov	r2, r3
 801096a:	2300      	movs	r3, #0
 801096c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	015a      	lsls	r2, r3, #5
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	4413      	add	r3, r2
 8010976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801097a:	461a      	mov	r2, r3
 801097c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010980:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	3301      	adds	r3, #1
 8010986:	613b      	str	r3, [r7, #16]
 8010988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098a:	693a      	ldr	r2, [r7, #16]
 801098c:	429a      	cmp	r2, r3
 801098e:	d3b7      	bcc.n	8010900 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010996:	691b      	ldr	r3, [r3, #16]
 8010998:	68fa      	ldr	r2, [r7, #12]
 801099a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801099e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80109a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2200      	movs	r2, #0
 80109a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80109b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80109b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d105      	bne.n	80109c4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	699b      	ldr	r3, [r3, #24]
 80109bc:	f043 0210 	orr.w	r2, r3, #16
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	699a      	ldr	r2, [r3, #24]
 80109c8:	4b0e      	ldr	r3, [pc, #56]	; (8010a04 <USB_DevInit+0x2b4>)
 80109ca:	4313      	orrs	r3, r2
 80109cc:	687a      	ldr	r2, [r7, #4]
 80109ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80109d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d005      	beq.n	80109e2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	699b      	ldr	r3, [r3, #24]
 80109da:	f043 0208 	orr.w	r2, r3, #8
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80109e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109e4:	2b01      	cmp	r3, #1
 80109e6:	d105      	bne.n	80109f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	699a      	ldr	r2, [r3, #24]
 80109ec:	4b06      	ldr	r3, [pc, #24]	; (8010a08 <USB_DevInit+0x2b8>)
 80109ee:	4313      	orrs	r3, r2
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80109f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3718      	adds	r7, #24
 80109fa:	46bd      	mov	sp, r7
 80109fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010a00:	b004      	add	sp, #16
 8010a02:	4770      	bx	lr
 8010a04:	803c3800 	.word	0x803c3800
 8010a08:	40000004 	.word	0x40000004

08010a0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b085      	sub	sp, #20
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010a16:	2300      	movs	r3, #0
 8010a18:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	019b      	lsls	r3, r3, #6
 8010a1e:	f043 0220 	orr.w	r2, r3, #32
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	3301      	adds	r3, #1
 8010a2a:	60fb      	str	r3, [r7, #12]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	4a09      	ldr	r2, [pc, #36]	; (8010a54 <USB_FlushTxFifo+0x48>)
 8010a30:	4293      	cmp	r3, r2
 8010a32:	d901      	bls.n	8010a38 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010a34:	2303      	movs	r3, #3
 8010a36:	e006      	b.n	8010a46 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	691b      	ldr	r3, [r3, #16]
 8010a3c:	f003 0320 	and.w	r3, r3, #32
 8010a40:	2b20      	cmp	r3, #32
 8010a42:	d0f0      	beq.n	8010a26 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010a44:	2300      	movs	r3, #0
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3714      	adds	r7, #20
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr
 8010a52:	bf00      	nop
 8010a54:	00030d40 	.word	0x00030d40

08010a58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b085      	sub	sp, #20
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8010a60:	2300      	movs	r3, #0
 8010a62:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2210      	movs	r2, #16
 8010a68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	60fb      	str	r3, [r7, #12]
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	4a09      	ldr	r2, [pc, #36]	; (8010a98 <USB_FlushRxFifo+0x40>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d901      	bls.n	8010a7c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8010a78:	2303      	movs	r3, #3
 8010a7a:	e006      	b.n	8010a8a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	691b      	ldr	r3, [r3, #16]
 8010a80:	f003 0310 	and.w	r3, r3, #16
 8010a84:	2b10      	cmp	r3, #16
 8010a86:	d0f0      	beq.n	8010a6a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8010a88:	2300      	movs	r3, #0
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3714      	adds	r7, #20
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a94:	4770      	bx	lr
 8010a96:	bf00      	nop
 8010a98:	00030d40 	.word	0x00030d40

08010a9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b085      	sub	sp, #20
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	78fb      	ldrb	r3, [r7, #3]
 8010ab6:	68f9      	ldr	r1, [r7, #12]
 8010ab8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010abc:	4313      	orrs	r3, r2
 8010abe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010ac0:	2300      	movs	r3, #0
}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3714      	adds	r7, #20
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010acc:	4770      	bx	lr

08010ace <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010ace:	b480      	push	{r7}
 8010ad0:	b087      	sub	sp, #28
 8010ad2:	af00      	add	r7, sp, #0
 8010ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ae0:	689b      	ldr	r3, [r3, #8]
 8010ae2:	f003 0306 	and.w	r3, r3, #6
 8010ae6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d102      	bne.n	8010af4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010aee:	2300      	movs	r3, #0
 8010af0:	75fb      	strb	r3, [r7, #23]
 8010af2:	e00a      	b.n	8010b0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2b02      	cmp	r3, #2
 8010af8:	d002      	beq.n	8010b00 <USB_GetDevSpeed+0x32>
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2b06      	cmp	r3, #6
 8010afe:	d102      	bne.n	8010b06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010b00:	2302      	movs	r3, #2
 8010b02:	75fb      	strb	r3, [r7, #23]
 8010b04:	e001      	b.n	8010b0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010b06:	230f      	movs	r3, #15
 8010b08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	371c      	adds	r7, #28
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr

08010b18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	785b      	ldrb	r3, [r3, #1]
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d139      	bne.n	8010ba8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b3a:	69da      	ldr	r2, [r3, #28]
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	f003 030f 	and.w	r3, r3, #15
 8010b44:	2101      	movs	r1, #1
 8010b46:	fa01 f303 	lsl.w	r3, r1, r3
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	68f9      	ldr	r1, [r7, #12]
 8010b4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010b52:	4313      	orrs	r3, r2
 8010b54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010b56:	68bb      	ldr	r3, [r7, #8]
 8010b58:	015a      	lsls	r2, r3, #5
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	4413      	add	r3, r2
 8010b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d153      	bne.n	8010c14 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	015a      	lsls	r2, r3, #5
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	4413      	add	r3, r2
 8010b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	689b      	ldr	r3, [r3, #8]
 8010b7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	78db      	ldrb	r3, [r3, #3]
 8010b86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010b88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	059b      	lsls	r3, r3, #22
 8010b8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010b90:	431a      	orrs	r2, r3
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	0159      	lsls	r1, r3, #5
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	440b      	add	r3, r1
 8010b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	4b20      	ldr	r3, [pc, #128]	; (8010c24 <USB_ActivateEndpoint+0x10c>)
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	600b      	str	r3, [r1, #0]
 8010ba6:	e035      	b.n	8010c14 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bae:	69da      	ldr	r2, [r3, #28]
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	781b      	ldrb	r3, [r3, #0]
 8010bb4:	f003 030f 	and.w	r3, r3, #15
 8010bb8:	2101      	movs	r1, #1
 8010bba:	fa01 f303 	lsl.w	r3, r1, r3
 8010bbe:	041b      	lsls	r3, r3, #16
 8010bc0:	68f9      	ldr	r1, [r7, #12]
 8010bc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	015a      	lsls	r2, r3, #5
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	4413      	add	r3, r2
 8010bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d119      	bne.n	8010c14 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	015a      	lsls	r2, r3, #5
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	4413      	add	r3, r2
 8010be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	689b      	ldr	r3, [r3, #8]
 8010bf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	78db      	ldrb	r3, [r3, #3]
 8010bfa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010bfc:	430b      	orrs	r3, r1
 8010bfe:	431a      	orrs	r2, r3
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	0159      	lsls	r1, r3, #5
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	440b      	add	r3, r1
 8010c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	4b05      	ldr	r3, [pc, #20]	; (8010c24 <USB_ActivateEndpoint+0x10c>)
 8010c10:	4313      	orrs	r3, r2
 8010c12:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010c14:	2300      	movs	r3, #0
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3714      	adds	r7, #20
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr
 8010c22:	bf00      	nop
 8010c24:	10008000 	.word	0x10008000

08010c28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b085      	sub	sp, #20
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	781b      	ldrb	r3, [r3, #0]
 8010c3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	785b      	ldrb	r3, [r3, #1]
 8010c40:	2b01      	cmp	r3, #1
 8010c42:	d161      	bne.n	8010d08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	015a      	lsls	r2, r3, #5
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	4413      	add	r3, r2
 8010c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010c5a:	d11f      	bne.n	8010c9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	015a      	lsls	r2, r3, #5
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	4413      	add	r3, r2
 8010c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	68ba      	ldr	r2, [r7, #8]
 8010c6c:	0151      	lsls	r1, r2, #5
 8010c6e:	68fa      	ldr	r2, [r7, #12]
 8010c70:	440a      	add	r2, r1
 8010c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010c7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	015a      	lsls	r2, r3, #5
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	4413      	add	r3, r2
 8010c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	68ba      	ldr	r2, [r7, #8]
 8010c8c:	0151      	lsls	r1, r2, #5
 8010c8e:	68fa      	ldr	r2, [r7, #12]
 8010c90:	440a      	add	r2, r1
 8010c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010c9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	781b      	ldrb	r3, [r3, #0]
 8010ca8:	f003 030f 	and.w	r3, r3, #15
 8010cac:	2101      	movs	r1, #1
 8010cae:	fa01 f303 	lsl.w	r3, r1, r3
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	43db      	mvns	r3, r3
 8010cb6:	68f9      	ldr	r1, [r7, #12]
 8010cb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010cbc:	4013      	ands	r3, r2
 8010cbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cc6:	69da      	ldr	r2, [r3, #28]
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	f003 030f 	and.w	r3, r3, #15
 8010cd0:	2101      	movs	r1, #1
 8010cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	43db      	mvns	r3, r3
 8010cda:	68f9      	ldr	r1, [r7, #12]
 8010cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010ce0:	4013      	ands	r3, r2
 8010ce2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	015a      	lsls	r2, r3, #5
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	4413      	add	r3, r2
 8010cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cf0:	681a      	ldr	r2, [r3, #0]
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	0159      	lsls	r1, r3, #5
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	440b      	add	r3, r1
 8010cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cfe:	4619      	mov	r1, r3
 8010d00:	4b35      	ldr	r3, [pc, #212]	; (8010dd8 <USB_DeactivateEndpoint+0x1b0>)
 8010d02:	4013      	ands	r3, r2
 8010d04:	600b      	str	r3, [r1, #0]
 8010d06:	e060      	b.n	8010dca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	015a      	lsls	r2, r3, #5
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	4413      	add	r3, r2
 8010d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010d1e:	d11f      	bne.n	8010d60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	015a      	lsls	r2, r3, #5
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	4413      	add	r3, r2
 8010d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	0151      	lsls	r1, r2, #5
 8010d32:	68fa      	ldr	r2, [r7, #12]
 8010d34:	440a      	add	r2, r1
 8010d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010d3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	015a      	lsls	r2, r3, #5
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	4413      	add	r3, r2
 8010d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	68ba      	ldr	r2, [r7, #8]
 8010d50:	0151      	lsls	r1, r2, #5
 8010d52:	68fa      	ldr	r2, [r7, #12]
 8010d54:	440a      	add	r2, r1
 8010d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010d5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	f003 030f 	and.w	r3, r3, #15
 8010d70:	2101      	movs	r1, #1
 8010d72:	fa01 f303 	lsl.w	r3, r1, r3
 8010d76:	041b      	lsls	r3, r3, #16
 8010d78:	43db      	mvns	r3, r3
 8010d7a:	68f9      	ldr	r1, [r7, #12]
 8010d7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010d80:	4013      	ands	r3, r2
 8010d82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d8a:	69da      	ldr	r2, [r3, #28]
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	f003 030f 	and.w	r3, r3, #15
 8010d94:	2101      	movs	r1, #1
 8010d96:	fa01 f303 	lsl.w	r3, r1, r3
 8010d9a:	041b      	lsls	r3, r3, #16
 8010d9c:	43db      	mvns	r3, r3
 8010d9e:	68f9      	ldr	r1, [r7, #12]
 8010da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010da4:	4013      	ands	r3, r2
 8010da6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	015a      	lsls	r2, r3, #5
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	4413      	add	r3, r2
 8010db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010db4:	681a      	ldr	r2, [r3, #0]
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	0159      	lsls	r1, r3, #5
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	440b      	add	r3, r1
 8010dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dc2:	4619      	mov	r1, r3
 8010dc4:	4b05      	ldr	r3, [pc, #20]	; (8010ddc <USB_DeactivateEndpoint+0x1b4>)
 8010dc6:	4013      	ands	r3, r2
 8010dc8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010dca:	2300      	movs	r3, #0
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3714      	adds	r7, #20
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd6:	4770      	bx	lr
 8010dd8:	ec337800 	.word	0xec337800
 8010ddc:	eff37800 	.word	0xeff37800

08010de0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b08a      	sub	sp, #40	; 0x28
 8010de4:	af02      	add	r7, sp, #8
 8010de6:	60f8      	str	r0, [r7, #12]
 8010de8:	60b9      	str	r1, [r7, #8]
 8010dea:	4613      	mov	r3, r2
 8010dec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	785b      	ldrb	r3, [r3, #1]
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	f040 8163 	bne.w	80110c8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	695b      	ldr	r3, [r3, #20]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d132      	bne.n	8010e70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010e0a:	69bb      	ldr	r3, [r7, #24]
 8010e0c:	015a      	lsls	r2, r3, #5
 8010e0e:	69fb      	ldr	r3, [r7, #28]
 8010e10:	4413      	add	r3, r2
 8010e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e16:	691a      	ldr	r2, [r3, #16]
 8010e18:	69bb      	ldr	r3, [r7, #24]
 8010e1a:	0159      	lsls	r1, r3, #5
 8010e1c:	69fb      	ldr	r3, [r7, #28]
 8010e1e:	440b      	add	r3, r1
 8010e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e24:	4619      	mov	r1, r3
 8010e26:	4ba5      	ldr	r3, [pc, #660]	; (80110bc <USB_EPStartXfer+0x2dc>)
 8010e28:	4013      	ands	r3, r2
 8010e2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	015a      	lsls	r2, r3, #5
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	4413      	add	r3, r2
 8010e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e38:	691b      	ldr	r3, [r3, #16]
 8010e3a:	69ba      	ldr	r2, [r7, #24]
 8010e3c:	0151      	lsls	r1, r2, #5
 8010e3e:	69fa      	ldr	r2, [r7, #28]
 8010e40:	440a      	add	r2, r1
 8010e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010e4c:	69bb      	ldr	r3, [r7, #24]
 8010e4e:	015a      	lsls	r2, r3, #5
 8010e50:	69fb      	ldr	r3, [r7, #28]
 8010e52:	4413      	add	r3, r2
 8010e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e58:	691a      	ldr	r2, [r3, #16]
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	0159      	lsls	r1, r3, #5
 8010e5e:	69fb      	ldr	r3, [r7, #28]
 8010e60:	440b      	add	r3, r1
 8010e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e66:	4619      	mov	r1, r3
 8010e68:	4b95      	ldr	r3, [pc, #596]	; (80110c0 <USB_EPStartXfer+0x2e0>)
 8010e6a:	4013      	ands	r3, r2
 8010e6c:	610b      	str	r3, [r1, #16]
 8010e6e:	e074      	b.n	8010f5a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010e70:	69bb      	ldr	r3, [r7, #24]
 8010e72:	015a      	lsls	r2, r3, #5
 8010e74:	69fb      	ldr	r3, [r7, #28]
 8010e76:	4413      	add	r3, r2
 8010e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e7c:	691a      	ldr	r2, [r3, #16]
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	0159      	lsls	r1, r3, #5
 8010e82:	69fb      	ldr	r3, [r7, #28]
 8010e84:	440b      	add	r3, r1
 8010e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e8a:	4619      	mov	r1, r3
 8010e8c:	4b8c      	ldr	r3, [pc, #560]	; (80110c0 <USB_EPStartXfer+0x2e0>)
 8010e8e:	4013      	ands	r3, r2
 8010e90:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010e92:	69bb      	ldr	r3, [r7, #24]
 8010e94:	015a      	lsls	r2, r3, #5
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	4413      	add	r3, r2
 8010e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e9e:	691a      	ldr	r2, [r3, #16]
 8010ea0:	69bb      	ldr	r3, [r7, #24]
 8010ea2:	0159      	lsls	r1, r3, #5
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	440b      	add	r3, r1
 8010ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010eac:	4619      	mov	r1, r3
 8010eae:	4b83      	ldr	r3, [pc, #524]	; (80110bc <USB_EPStartXfer+0x2dc>)
 8010eb0:	4013      	ands	r3, r2
 8010eb2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010eb4:	69bb      	ldr	r3, [r7, #24]
 8010eb6:	015a      	lsls	r2, r3, #5
 8010eb8:	69fb      	ldr	r3, [r7, #28]
 8010eba:	4413      	add	r3, r2
 8010ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ec0:	691a      	ldr	r2, [r3, #16]
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	6959      	ldr	r1, [r3, #20]
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	440b      	add	r3, r1
 8010ecc:	1e59      	subs	r1, r3, #1
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	689b      	ldr	r3, [r3, #8]
 8010ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8010ed6:	04d9      	lsls	r1, r3, #19
 8010ed8:	4b7a      	ldr	r3, [pc, #488]	; (80110c4 <USB_EPStartXfer+0x2e4>)
 8010eda:	400b      	ands	r3, r1
 8010edc:	69b9      	ldr	r1, [r7, #24]
 8010ede:	0148      	lsls	r0, r1, #5
 8010ee0:	69f9      	ldr	r1, [r7, #28]
 8010ee2:	4401      	add	r1, r0
 8010ee4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010ee8:	4313      	orrs	r3, r2
 8010eea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010eec:	69bb      	ldr	r3, [r7, #24]
 8010eee:	015a      	lsls	r2, r3, #5
 8010ef0:	69fb      	ldr	r3, [r7, #28]
 8010ef2:	4413      	add	r3, r2
 8010ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ef8:	691a      	ldr	r2, [r3, #16]
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	695b      	ldr	r3, [r3, #20]
 8010efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010f02:	69b9      	ldr	r1, [r7, #24]
 8010f04:	0148      	lsls	r0, r1, #5
 8010f06:	69f9      	ldr	r1, [r7, #28]
 8010f08:	4401      	add	r1, r0
 8010f0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	78db      	ldrb	r3, [r3, #3]
 8010f16:	2b01      	cmp	r3, #1
 8010f18:	d11f      	bne.n	8010f5a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	015a      	lsls	r2, r3, #5
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	4413      	add	r3, r2
 8010f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f26:	691b      	ldr	r3, [r3, #16]
 8010f28:	69ba      	ldr	r2, [r7, #24]
 8010f2a:	0151      	lsls	r1, r2, #5
 8010f2c:	69fa      	ldr	r2, [r7, #28]
 8010f2e:	440a      	add	r2, r1
 8010f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010f38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010f3a:	69bb      	ldr	r3, [r7, #24]
 8010f3c:	015a      	lsls	r2, r3, #5
 8010f3e:	69fb      	ldr	r3, [r7, #28]
 8010f40:	4413      	add	r3, r2
 8010f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f46:	691b      	ldr	r3, [r3, #16]
 8010f48:	69ba      	ldr	r2, [r7, #24]
 8010f4a:	0151      	lsls	r1, r2, #5
 8010f4c:	69fa      	ldr	r2, [r7, #28]
 8010f4e:	440a      	add	r2, r1
 8010f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010f58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010f5a:	79fb      	ldrb	r3, [r7, #7]
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d14b      	bne.n	8010ff8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	691b      	ldr	r3, [r3, #16]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d009      	beq.n	8010f7c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010f68:	69bb      	ldr	r3, [r7, #24]
 8010f6a:	015a      	lsls	r2, r3, #5
 8010f6c:	69fb      	ldr	r3, [r7, #28]
 8010f6e:	4413      	add	r3, r2
 8010f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f74:	461a      	mov	r2, r3
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	691b      	ldr	r3, [r3, #16]
 8010f7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	78db      	ldrb	r3, [r3, #3]
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d128      	bne.n	8010fd6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f8a:	689b      	ldr	r3, [r3, #8]
 8010f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d110      	bne.n	8010fb6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010f94:	69bb      	ldr	r3, [r7, #24]
 8010f96:	015a      	lsls	r2, r3, #5
 8010f98:	69fb      	ldr	r3, [r7, #28]
 8010f9a:	4413      	add	r3, r2
 8010f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	69ba      	ldr	r2, [r7, #24]
 8010fa4:	0151      	lsls	r1, r2, #5
 8010fa6:	69fa      	ldr	r2, [r7, #28]
 8010fa8:	440a      	add	r2, r1
 8010faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010fae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010fb2:	6013      	str	r3, [r2, #0]
 8010fb4:	e00f      	b.n	8010fd6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010fb6:	69bb      	ldr	r3, [r7, #24]
 8010fb8:	015a      	lsls	r2, r3, #5
 8010fba:	69fb      	ldr	r3, [r7, #28]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	69ba      	ldr	r2, [r7, #24]
 8010fc6:	0151      	lsls	r1, r2, #5
 8010fc8:	69fa      	ldr	r2, [r7, #28]
 8010fca:	440a      	add	r2, r1
 8010fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010fd4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010fd6:	69bb      	ldr	r3, [r7, #24]
 8010fd8:	015a      	lsls	r2, r3, #5
 8010fda:	69fb      	ldr	r3, [r7, #28]
 8010fdc:	4413      	add	r3, r2
 8010fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	69ba      	ldr	r2, [r7, #24]
 8010fe6:	0151      	lsls	r1, r2, #5
 8010fe8:	69fa      	ldr	r2, [r7, #28]
 8010fea:	440a      	add	r2, r1
 8010fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ff0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010ff4:	6013      	str	r3, [r2, #0]
 8010ff6:	e133      	b.n	8011260 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010ff8:	69bb      	ldr	r3, [r7, #24]
 8010ffa:	015a      	lsls	r2, r3, #5
 8010ffc:	69fb      	ldr	r3, [r7, #28]
 8010ffe:	4413      	add	r3, r2
 8011000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	69ba      	ldr	r2, [r7, #24]
 8011008:	0151      	lsls	r1, r2, #5
 801100a:	69fa      	ldr	r2, [r7, #28]
 801100c:	440a      	add	r2, r1
 801100e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011012:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011016:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	78db      	ldrb	r3, [r3, #3]
 801101c:	2b01      	cmp	r3, #1
 801101e:	d015      	beq.n	801104c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	695b      	ldr	r3, [r3, #20]
 8011024:	2b00      	cmp	r3, #0
 8011026:	f000 811b 	beq.w	8011260 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801102a:	69fb      	ldr	r3, [r7, #28]
 801102c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	781b      	ldrb	r3, [r3, #0]
 8011036:	f003 030f 	and.w	r3, r3, #15
 801103a:	2101      	movs	r1, #1
 801103c:	fa01 f303 	lsl.w	r3, r1, r3
 8011040:	69f9      	ldr	r1, [r7, #28]
 8011042:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011046:	4313      	orrs	r3, r2
 8011048:	634b      	str	r3, [r1, #52]	; 0x34
 801104a:	e109      	b.n	8011260 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011052:	689b      	ldr	r3, [r3, #8]
 8011054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011058:	2b00      	cmp	r3, #0
 801105a:	d110      	bne.n	801107e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801105c:	69bb      	ldr	r3, [r7, #24]
 801105e:	015a      	lsls	r2, r3, #5
 8011060:	69fb      	ldr	r3, [r7, #28]
 8011062:	4413      	add	r3, r2
 8011064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	69ba      	ldr	r2, [r7, #24]
 801106c:	0151      	lsls	r1, r2, #5
 801106e:	69fa      	ldr	r2, [r7, #28]
 8011070:	440a      	add	r2, r1
 8011072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011076:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801107a:	6013      	str	r3, [r2, #0]
 801107c:	e00f      	b.n	801109e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801107e:	69bb      	ldr	r3, [r7, #24]
 8011080:	015a      	lsls	r2, r3, #5
 8011082:	69fb      	ldr	r3, [r7, #28]
 8011084:	4413      	add	r3, r2
 8011086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	69ba      	ldr	r2, [r7, #24]
 801108e:	0151      	lsls	r1, r2, #5
 8011090:	69fa      	ldr	r2, [r7, #28]
 8011092:	440a      	add	r2, r1
 8011094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801109c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	68d9      	ldr	r1, [r3, #12]
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	781a      	ldrb	r2, [r3, #0]
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	695b      	ldr	r3, [r3, #20]
 80110aa:	b298      	uxth	r0, r3
 80110ac:	79fb      	ldrb	r3, [r7, #7]
 80110ae:	9300      	str	r3, [sp, #0]
 80110b0:	4603      	mov	r3, r0
 80110b2:	68f8      	ldr	r0, [r7, #12]
 80110b4:	f000 fa38 	bl	8011528 <USB_WritePacket>
 80110b8:	e0d2      	b.n	8011260 <USB_EPStartXfer+0x480>
 80110ba:	bf00      	nop
 80110bc:	e007ffff 	.word	0xe007ffff
 80110c0:	fff80000 	.word	0xfff80000
 80110c4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80110c8:	69bb      	ldr	r3, [r7, #24]
 80110ca:	015a      	lsls	r2, r3, #5
 80110cc:	69fb      	ldr	r3, [r7, #28]
 80110ce:	4413      	add	r3, r2
 80110d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110d4:	691a      	ldr	r2, [r3, #16]
 80110d6:	69bb      	ldr	r3, [r7, #24]
 80110d8:	0159      	lsls	r1, r3, #5
 80110da:	69fb      	ldr	r3, [r7, #28]
 80110dc:	440b      	add	r3, r1
 80110de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110e2:	4619      	mov	r1, r3
 80110e4:	4b61      	ldr	r3, [pc, #388]	; (801126c <USB_EPStartXfer+0x48c>)
 80110e6:	4013      	ands	r3, r2
 80110e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80110ea:	69bb      	ldr	r3, [r7, #24]
 80110ec:	015a      	lsls	r2, r3, #5
 80110ee:	69fb      	ldr	r3, [r7, #28]
 80110f0:	4413      	add	r3, r2
 80110f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110f6:	691a      	ldr	r2, [r3, #16]
 80110f8:	69bb      	ldr	r3, [r7, #24]
 80110fa:	0159      	lsls	r1, r3, #5
 80110fc:	69fb      	ldr	r3, [r7, #28]
 80110fe:	440b      	add	r3, r1
 8011100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011104:	4619      	mov	r1, r3
 8011106:	4b5a      	ldr	r3, [pc, #360]	; (8011270 <USB_EPStartXfer+0x490>)
 8011108:	4013      	ands	r3, r2
 801110a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	695b      	ldr	r3, [r3, #20]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d123      	bne.n	801115c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011114:	69bb      	ldr	r3, [r7, #24]
 8011116:	015a      	lsls	r2, r3, #5
 8011118:	69fb      	ldr	r3, [r7, #28]
 801111a:	4413      	add	r3, r2
 801111c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011120:	691a      	ldr	r2, [r3, #16]
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	689b      	ldr	r3, [r3, #8]
 8011126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801112a:	69b9      	ldr	r1, [r7, #24]
 801112c:	0148      	lsls	r0, r1, #5
 801112e:	69f9      	ldr	r1, [r7, #28]
 8011130:	4401      	add	r1, r0
 8011132:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011136:	4313      	orrs	r3, r2
 8011138:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	015a      	lsls	r2, r3, #5
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	4413      	add	r3, r2
 8011142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011146:	691b      	ldr	r3, [r3, #16]
 8011148:	69ba      	ldr	r2, [r7, #24]
 801114a:	0151      	lsls	r1, r2, #5
 801114c:	69fa      	ldr	r2, [r7, #28]
 801114e:	440a      	add	r2, r1
 8011150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011154:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011158:	6113      	str	r3, [r2, #16]
 801115a:	e033      	b.n	80111c4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	695a      	ldr	r2, [r3, #20]
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	689b      	ldr	r3, [r3, #8]
 8011164:	4413      	add	r3, r2
 8011166:	1e5a      	subs	r2, r3, #1
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	689b      	ldr	r3, [r3, #8]
 801116c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011170:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011172:	69bb      	ldr	r3, [r7, #24]
 8011174:	015a      	lsls	r2, r3, #5
 8011176:	69fb      	ldr	r3, [r7, #28]
 8011178:	4413      	add	r3, r2
 801117a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801117e:	691a      	ldr	r2, [r3, #16]
 8011180:	8afb      	ldrh	r3, [r7, #22]
 8011182:	04d9      	lsls	r1, r3, #19
 8011184:	4b3b      	ldr	r3, [pc, #236]	; (8011274 <USB_EPStartXfer+0x494>)
 8011186:	400b      	ands	r3, r1
 8011188:	69b9      	ldr	r1, [r7, #24]
 801118a:	0148      	lsls	r0, r1, #5
 801118c:	69f9      	ldr	r1, [r7, #28]
 801118e:	4401      	add	r1, r0
 8011190:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011194:	4313      	orrs	r3, r2
 8011196:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011198:	69bb      	ldr	r3, [r7, #24]
 801119a:	015a      	lsls	r2, r3, #5
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	4413      	add	r3, r2
 80111a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111a4:	691a      	ldr	r2, [r3, #16]
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	689b      	ldr	r3, [r3, #8]
 80111aa:	8af9      	ldrh	r1, [r7, #22]
 80111ac:	fb01 f303 	mul.w	r3, r1, r3
 80111b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80111b4:	69b9      	ldr	r1, [r7, #24]
 80111b6:	0148      	lsls	r0, r1, #5
 80111b8:	69f9      	ldr	r1, [r7, #28]
 80111ba:	4401      	add	r1, r0
 80111bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80111c0:	4313      	orrs	r3, r2
 80111c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80111c4:	79fb      	ldrb	r3, [r7, #7]
 80111c6:	2b01      	cmp	r3, #1
 80111c8:	d10d      	bne.n	80111e6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d009      	beq.n	80111e6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	68d9      	ldr	r1, [r3, #12]
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	015a      	lsls	r2, r3, #5
 80111da:	69fb      	ldr	r3, [r7, #28]
 80111dc:	4413      	add	r3, r2
 80111de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111e2:	460a      	mov	r2, r1
 80111e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	78db      	ldrb	r3, [r3, #3]
 80111ea:	2b01      	cmp	r3, #1
 80111ec:	d128      	bne.n	8011240 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80111ee:	69fb      	ldr	r3, [r7, #28]
 80111f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111f4:	689b      	ldr	r3, [r3, #8]
 80111f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d110      	bne.n	8011220 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80111fe:	69bb      	ldr	r3, [r7, #24]
 8011200:	015a      	lsls	r2, r3, #5
 8011202:	69fb      	ldr	r3, [r7, #28]
 8011204:	4413      	add	r3, r2
 8011206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	69ba      	ldr	r2, [r7, #24]
 801120e:	0151      	lsls	r1, r2, #5
 8011210:	69fa      	ldr	r2, [r7, #28]
 8011212:	440a      	add	r2, r1
 8011214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011218:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801121c:	6013      	str	r3, [r2, #0]
 801121e:	e00f      	b.n	8011240 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011220:	69bb      	ldr	r3, [r7, #24]
 8011222:	015a      	lsls	r2, r3, #5
 8011224:	69fb      	ldr	r3, [r7, #28]
 8011226:	4413      	add	r3, r2
 8011228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	69ba      	ldr	r2, [r7, #24]
 8011230:	0151      	lsls	r1, r2, #5
 8011232:	69fa      	ldr	r2, [r7, #28]
 8011234:	440a      	add	r2, r1
 8011236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801123a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801123e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011240:	69bb      	ldr	r3, [r7, #24]
 8011242:	015a      	lsls	r2, r3, #5
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	4413      	add	r3, r2
 8011248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	69ba      	ldr	r2, [r7, #24]
 8011250:	0151      	lsls	r1, r2, #5
 8011252:	69fa      	ldr	r2, [r7, #28]
 8011254:	440a      	add	r2, r1
 8011256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801125a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801125e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011260:	2300      	movs	r3, #0
}
 8011262:	4618      	mov	r0, r3
 8011264:	3720      	adds	r7, #32
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	fff80000 	.word	0xfff80000
 8011270:	e007ffff 	.word	0xe007ffff
 8011274:	1ff80000 	.word	0x1ff80000

08011278 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011278:	b480      	push	{r7}
 801127a:	b087      	sub	sp, #28
 801127c:	af00      	add	r7, sp, #0
 801127e:	60f8      	str	r0, [r7, #12]
 8011280:	60b9      	str	r1, [r7, #8]
 8011282:	4613      	mov	r3, r2
 8011284:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	785b      	ldrb	r3, [r3, #1]
 8011294:	2b01      	cmp	r3, #1
 8011296:	f040 80cd 	bne.w	8011434 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	695b      	ldr	r3, [r3, #20]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d132      	bne.n	8011308 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80112a2:	693b      	ldr	r3, [r7, #16]
 80112a4:	015a      	lsls	r2, r3, #5
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	4413      	add	r3, r2
 80112aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112ae:	691a      	ldr	r2, [r3, #16]
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	0159      	lsls	r1, r3, #5
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	440b      	add	r3, r1
 80112b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112bc:	4619      	mov	r1, r3
 80112be:	4b98      	ldr	r3, [pc, #608]	; (8011520 <USB_EP0StartXfer+0x2a8>)
 80112c0:	4013      	ands	r3, r2
 80112c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	015a      	lsls	r2, r3, #5
 80112c8:	697b      	ldr	r3, [r7, #20]
 80112ca:	4413      	add	r3, r2
 80112cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112d0:	691b      	ldr	r3, [r3, #16]
 80112d2:	693a      	ldr	r2, [r7, #16]
 80112d4:	0151      	lsls	r1, r2, #5
 80112d6:	697a      	ldr	r2, [r7, #20]
 80112d8:	440a      	add	r2, r1
 80112da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80112de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80112e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80112e4:	693b      	ldr	r3, [r7, #16]
 80112e6:	015a      	lsls	r2, r3, #5
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	4413      	add	r3, r2
 80112ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112f0:	691a      	ldr	r2, [r3, #16]
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	0159      	lsls	r1, r3, #5
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	440b      	add	r3, r1
 80112fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112fe:	4619      	mov	r1, r3
 8011300:	4b88      	ldr	r3, [pc, #544]	; (8011524 <USB_EP0StartXfer+0x2ac>)
 8011302:	4013      	ands	r3, r2
 8011304:	610b      	str	r3, [r1, #16]
 8011306:	e04e      	b.n	80113a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	015a      	lsls	r2, r3, #5
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	4413      	add	r3, r2
 8011310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011314:	691a      	ldr	r2, [r3, #16]
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	0159      	lsls	r1, r3, #5
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	440b      	add	r3, r1
 801131e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011322:	4619      	mov	r1, r3
 8011324:	4b7f      	ldr	r3, [pc, #508]	; (8011524 <USB_EP0StartXfer+0x2ac>)
 8011326:	4013      	ands	r3, r2
 8011328:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	015a      	lsls	r2, r3, #5
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	4413      	add	r3, r2
 8011332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011336:	691a      	ldr	r2, [r3, #16]
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	0159      	lsls	r1, r3, #5
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	440b      	add	r3, r1
 8011340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011344:	4619      	mov	r1, r3
 8011346:	4b76      	ldr	r3, [pc, #472]	; (8011520 <USB_EP0StartXfer+0x2a8>)
 8011348:	4013      	ands	r3, r2
 801134a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	695a      	ldr	r2, [r3, #20]
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	689b      	ldr	r3, [r3, #8]
 8011354:	429a      	cmp	r2, r3
 8011356:	d903      	bls.n	8011360 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	689a      	ldr	r2, [r3, #8]
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	015a      	lsls	r2, r3, #5
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	4413      	add	r3, r2
 8011368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801136c:	691b      	ldr	r3, [r3, #16]
 801136e:	693a      	ldr	r2, [r7, #16]
 8011370:	0151      	lsls	r1, r2, #5
 8011372:	697a      	ldr	r2, [r7, #20]
 8011374:	440a      	add	r2, r1
 8011376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801137a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801137e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	015a      	lsls	r2, r3, #5
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	4413      	add	r3, r2
 8011388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801138c:	691a      	ldr	r2, [r3, #16]
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	695b      	ldr	r3, [r3, #20]
 8011392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011396:	6939      	ldr	r1, [r7, #16]
 8011398:	0148      	lsls	r0, r1, #5
 801139a:	6979      	ldr	r1, [r7, #20]
 801139c:	4401      	add	r1, r0
 801139e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80113a2:	4313      	orrs	r3, r2
 80113a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80113a6:	79fb      	ldrb	r3, [r7, #7]
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d11e      	bne.n	80113ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	691b      	ldr	r3, [r3, #16]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d009      	beq.n	80113c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	015a      	lsls	r2, r3, #5
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	4413      	add	r3, r2
 80113bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113c0:	461a      	mov	r2, r3
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	691b      	ldr	r3, [r3, #16]
 80113c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	015a      	lsls	r2, r3, #5
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	4413      	add	r3, r2
 80113d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	693a      	ldr	r2, [r7, #16]
 80113d8:	0151      	lsls	r1, r2, #5
 80113da:	697a      	ldr	r2, [r7, #20]
 80113dc:	440a      	add	r2, r1
 80113de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80113e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80113e6:	6013      	str	r3, [r2, #0]
 80113e8:	e092      	b.n	8011510 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	015a      	lsls	r2, r3, #5
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	4413      	add	r3, r2
 80113f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	693a      	ldr	r2, [r7, #16]
 80113fa:	0151      	lsls	r1, r2, #5
 80113fc:	697a      	ldr	r2, [r7, #20]
 80113fe:	440a      	add	r2, r1
 8011400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011404:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011408:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	695b      	ldr	r3, [r3, #20]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d07e      	beq.n	8011510 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	f003 030f 	and.w	r3, r3, #15
 8011422:	2101      	movs	r1, #1
 8011424:	fa01 f303 	lsl.w	r3, r1, r3
 8011428:	6979      	ldr	r1, [r7, #20]
 801142a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801142e:	4313      	orrs	r3, r2
 8011430:	634b      	str	r3, [r1, #52]	; 0x34
 8011432:	e06d      	b.n	8011510 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	015a      	lsls	r2, r3, #5
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	4413      	add	r3, r2
 801143c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011440:	691a      	ldr	r2, [r3, #16]
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	0159      	lsls	r1, r3, #5
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	440b      	add	r3, r1
 801144a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801144e:	4619      	mov	r1, r3
 8011450:	4b34      	ldr	r3, [pc, #208]	; (8011524 <USB_EP0StartXfer+0x2ac>)
 8011452:	4013      	ands	r3, r2
 8011454:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	015a      	lsls	r2, r3, #5
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	4413      	add	r3, r2
 801145e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011462:	691a      	ldr	r2, [r3, #16]
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	0159      	lsls	r1, r3, #5
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	440b      	add	r3, r1
 801146c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011470:	4619      	mov	r1, r3
 8011472:	4b2b      	ldr	r3, [pc, #172]	; (8011520 <USB_EP0StartXfer+0x2a8>)
 8011474:	4013      	ands	r3, r2
 8011476:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	695b      	ldr	r3, [r3, #20]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d003      	beq.n	8011488 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	689a      	ldr	r2, [r3, #8]
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	015a      	lsls	r2, r3, #5
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	4413      	add	r3, r2
 8011490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011494:	691b      	ldr	r3, [r3, #16]
 8011496:	693a      	ldr	r2, [r7, #16]
 8011498:	0151      	lsls	r1, r2, #5
 801149a:	697a      	ldr	r2, [r7, #20]
 801149c:	440a      	add	r2, r1
 801149e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80114a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80114a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	015a      	lsls	r2, r3, #5
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	4413      	add	r3, r2
 80114b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114b4:	691a      	ldr	r2, [r3, #16]
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	689b      	ldr	r3, [r3, #8]
 80114ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80114be:	6939      	ldr	r1, [r7, #16]
 80114c0:	0148      	lsls	r0, r1, #5
 80114c2:	6979      	ldr	r1, [r7, #20]
 80114c4:	4401      	add	r1, r0
 80114c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80114ca:	4313      	orrs	r3, r2
 80114cc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80114ce:	79fb      	ldrb	r3, [r7, #7]
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	d10d      	bne.n	80114f0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d009      	beq.n	80114f0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	68d9      	ldr	r1, [r3, #12]
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	015a      	lsls	r2, r3, #5
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	4413      	add	r3, r2
 80114e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114ec:	460a      	mov	r2, r1
 80114ee:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	015a      	lsls	r2, r3, #5
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	4413      	add	r3, r2
 80114f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	693a      	ldr	r2, [r7, #16]
 8011500:	0151      	lsls	r1, r2, #5
 8011502:	697a      	ldr	r2, [r7, #20]
 8011504:	440a      	add	r2, r1
 8011506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801150a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801150e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011510:	2300      	movs	r3, #0
}
 8011512:	4618      	mov	r0, r3
 8011514:	371c      	adds	r7, #28
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr
 801151e:	bf00      	nop
 8011520:	e007ffff 	.word	0xe007ffff
 8011524:	fff80000 	.word	0xfff80000

08011528 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011528:	b480      	push	{r7}
 801152a:	b089      	sub	sp, #36	; 0x24
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	4611      	mov	r1, r2
 8011534:	461a      	mov	r2, r3
 8011536:	460b      	mov	r3, r1
 8011538:	71fb      	strb	r3, [r7, #7]
 801153a:	4613      	mov	r3, r2
 801153c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8011546:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801154a:	2b00      	cmp	r3, #0
 801154c:	d11a      	bne.n	8011584 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801154e:	88bb      	ldrh	r3, [r7, #4]
 8011550:	3303      	adds	r3, #3
 8011552:	089b      	lsrs	r3, r3, #2
 8011554:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011556:	2300      	movs	r3, #0
 8011558:	61bb      	str	r3, [r7, #24]
 801155a:	e00f      	b.n	801157c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801155c:	79fb      	ldrb	r3, [r7, #7]
 801155e:	031a      	lsls	r2, r3, #12
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	4413      	add	r3, r2
 8011564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011568:	461a      	mov	r2, r3
 801156a:	69fb      	ldr	r3, [r7, #28]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011570:	69fb      	ldr	r3, [r7, #28]
 8011572:	3304      	adds	r3, #4
 8011574:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	3301      	adds	r3, #1
 801157a:	61bb      	str	r3, [r7, #24]
 801157c:	69ba      	ldr	r2, [r7, #24]
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	429a      	cmp	r2, r3
 8011582:	d3eb      	bcc.n	801155c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011584:	2300      	movs	r3, #0
}
 8011586:	4618      	mov	r0, r3
 8011588:	3724      	adds	r7, #36	; 0x24
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr

08011592 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011592:	b480      	push	{r7}
 8011594:	b089      	sub	sp, #36	; 0x24
 8011596:	af00      	add	r7, sp, #0
 8011598:	60f8      	str	r0, [r7, #12]
 801159a:	60b9      	str	r1, [r7, #8]
 801159c:	4613      	mov	r3, r2
 801159e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80115a8:	88fb      	ldrh	r3, [r7, #6]
 80115aa:	3303      	adds	r3, #3
 80115ac:	089b      	lsrs	r3, r3, #2
 80115ae:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80115b0:	2300      	movs	r3, #0
 80115b2:	61bb      	str	r3, [r7, #24]
 80115b4:	e00b      	b.n	80115ce <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80115bc:	681a      	ldr	r2, [r3, #0]
 80115be:	69fb      	ldr	r3, [r7, #28]
 80115c0:	601a      	str	r2, [r3, #0]
    pDest++;
 80115c2:	69fb      	ldr	r3, [r7, #28]
 80115c4:	3304      	adds	r3, #4
 80115c6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80115c8:	69bb      	ldr	r3, [r7, #24]
 80115ca:	3301      	adds	r3, #1
 80115cc:	61bb      	str	r3, [r7, #24]
 80115ce:	69ba      	ldr	r2, [r7, #24]
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d3ef      	bcc.n	80115b6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80115d6:	69fb      	ldr	r3, [r7, #28]
}
 80115d8:	4618      	mov	r0, r3
 80115da:	3724      	adds	r7, #36	; 0x24
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr

080115e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b085      	sub	sp, #20
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	785b      	ldrb	r3, [r3, #1]
 80115fc:	2b01      	cmp	r3, #1
 80115fe:	d12c      	bne.n	801165a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	015a      	lsls	r2, r3, #5
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	4413      	add	r3, r2
 8011608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	db12      	blt.n	8011638 <USB_EPSetStall+0x54>
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d00f      	beq.n	8011638 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	015a      	lsls	r2, r3, #5
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	4413      	add	r3, r2
 8011620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	68ba      	ldr	r2, [r7, #8]
 8011628:	0151      	lsls	r1, r2, #5
 801162a:	68fa      	ldr	r2, [r7, #12]
 801162c:	440a      	add	r2, r1
 801162e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011632:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011636:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	015a      	lsls	r2, r3, #5
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	4413      	add	r3, r2
 8011640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	68ba      	ldr	r2, [r7, #8]
 8011648:	0151      	lsls	r1, r2, #5
 801164a:	68fa      	ldr	r2, [r7, #12]
 801164c:	440a      	add	r2, r1
 801164e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011656:	6013      	str	r3, [r2, #0]
 8011658:	e02b      	b.n	80116b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	015a      	lsls	r2, r3, #5
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	4413      	add	r3, r2
 8011662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	db12      	blt.n	8011692 <USB_EPSetStall+0xae>
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d00f      	beq.n	8011692 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	015a      	lsls	r2, r3, #5
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	4413      	add	r3, r2
 801167a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	68ba      	ldr	r2, [r7, #8]
 8011682:	0151      	lsls	r1, r2, #5
 8011684:	68fa      	ldr	r2, [r7, #12]
 8011686:	440a      	add	r2, r1
 8011688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801168c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011690:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	015a      	lsls	r2, r3, #5
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	4413      	add	r3, r2
 801169a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	68ba      	ldr	r2, [r7, #8]
 80116a2:	0151      	lsls	r1, r2, #5
 80116a4:	68fa      	ldr	r2, [r7, #12]
 80116a6:	440a      	add	r2, r1
 80116a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80116b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80116b2:	2300      	movs	r3, #0
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3714      	adds	r7, #20
 80116b8:	46bd      	mov	sp, r7
 80116ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116be:	4770      	bx	lr

080116c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80116c0:	b480      	push	{r7}
 80116c2:	b085      	sub	sp, #20
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	785b      	ldrb	r3, [r3, #1]
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d128      	bne.n	801172e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	015a      	lsls	r2, r3, #5
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	4413      	add	r3, r2
 80116e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	68ba      	ldr	r2, [r7, #8]
 80116ec:	0151      	lsls	r1, r2, #5
 80116ee:	68fa      	ldr	r2, [r7, #12]
 80116f0:	440a      	add	r2, r1
 80116f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80116fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	78db      	ldrb	r3, [r3, #3]
 8011700:	2b03      	cmp	r3, #3
 8011702:	d003      	beq.n	801170c <USB_EPClearStall+0x4c>
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	78db      	ldrb	r3, [r3, #3]
 8011708:	2b02      	cmp	r3, #2
 801170a:	d138      	bne.n	801177e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	015a      	lsls	r2, r3, #5
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	4413      	add	r3, r2
 8011714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	68ba      	ldr	r2, [r7, #8]
 801171c:	0151      	lsls	r1, r2, #5
 801171e:	68fa      	ldr	r2, [r7, #12]
 8011720:	440a      	add	r2, r1
 8011722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801172a:	6013      	str	r3, [r2, #0]
 801172c:	e027      	b.n	801177e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	015a      	lsls	r2, r3, #5
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	4413      	add	r3, r2
 8011736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	68ba      	ldr	r2, [r7, #8]
 801173e:	0151      	lsls	r1, r2, #5
 8011740:	68fa      	ldr	r2, [r7, #12]
 8011742:	440a      	add	r2, r1
 8011744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011748:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801174c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	78db      	ldrb	r3, [r3, #3]
 8011752:	2b03      	cmp	r3, #3
 8011754:	d003      	beq.n	801175e <USB_EPClearStall+0x9e>
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	78db      	ldrb	r3, [r3, #3]
 801175a:	2b02      	cmp	r3, #2
 801175c:	d10f      	bne.n	801177e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	015a      	lsls	r2, r3, #5
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	4413      	add	r3, r2
 8011766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	68ba      	ldr	r2, [r7, #8]
 801176e:	0151      	lsls	r1, r2, #5
 8011770:	68fa      	ldr	r2, [r7, #12]
 8011772:	440a      	add	r2, r1
 8011774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801177c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801177e:	2300      	movs	r3, #0
}
 8011780:	4618      	mov	r0, r3
 8011782:	3714      	adds	r7, #20
 8011784:	46bd      	mov	sp, r7
 8011786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178a:	4770      	bx	lr

0801178c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801178c:	b480      	push	{r7}
 801178e:	b085      	sub	sp, #20
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	460b      	mov	r3, r1
 8011796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	68fa      	ldr	r2, [r7, #12]
 80117a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80117aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80117ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117b6:	681a      	ldr	r2, [r3, #0]
 80117b8:	78fb      	ldrb	r3, [r7, #3]
 80117ba:	011b      	lsls	r3, r3, #4
 80117bc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80117c0:	68f9      	ldr	r1, [r7, #12]
 80117c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80117c6:	4313      	orrs	r3, r2
 80117c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80117ca:	2300      	movs	r3, #0
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	3714      	adds	r7, #20
 80117d0:	46bd      	mov	sp, r7
 80117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d6:	4770      	bx	lr

080117d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b084      	sub	sp, #16
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	68fa      	ldr	r2, [r7, #12]
 80117ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80117f2:	f023 0302 	bic.w	r3, r3, #2
 80117f6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80117f8:	2003      	movs	r0, #3
 80117fa:	f7f1 fc29 	bl	8003050 <HAL_Delay>

  return HAL_OK;
 80117fe:	2300      	movs	r3, #0
}
 8011800:	4618      	mov	r0, r3
 8011802:	3710      	adds	r7, #16
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}

08011808 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b084      	sub	sp, #16
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801181a:	685b      	ldr	r3, [r3, #4]
 801181c:	68fa      	ldr	r2, [r7, #12]
 801181e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011822:	f043 0302 	orr.w	r3, r3, #2
 8011826:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8011828:	2003      	movs	r0, #3
 801182a:	f7f1 fc11 	bl	8003050 <HAL_Delay>

  return HAL_OK;
 801182e:	2300      	movs	r3, #0
}
 8011830:	4618      	mov	r0, r3
 8011832:	3710      	adds	r7, #16
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}

08011838 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011838:	b480      	push	{r7}
 801183a:	b085      	sub	sp, #20
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	695b      	ldr	r3, [r3, #20]
 8011844:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	699b      	ldr	r3, [r3, #24]
 801184a:	68fa      	ldr	r2, [r7, #12]
 801184c:	4013      	ands	r3, r2
 801184e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011850:	68fb      	ldr	r3, [r7, #12]
}
 8011852:	4618      	mov	r0, r3
 8011854:	3714      	adds	r7, #20
 8011856:	46bd      	mov	sp, r7
 8011858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185c:	4770      	bx	lr

0801185e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801185e:	b480      	push	{r7}
 8011860:	b085      	sub	sp, #20
 8011862:	af00      	add	r7, sp, #0
 8011864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011870:	699b      	ldr	r3, [r3, #24]
 8011872:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801187a:	69db      	ldr	r3, [r3, #28]
 801187c:	68ba      	ldr	r2, [r7, #8]
 801187e:	4013      	ands	r3, r2
 8011880:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	0c1b      	lsrs	r3, r3, #16
}
 8011886:	4618      	mov	r0, r3
 8011888:	3714      	adds	r7, #20
 801188a:	46bd      	mov	sp, r7
 801188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011890:	4770      	bx	lr

08011892 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011892:	b480      	push	{r7}
 8011894:	b085      	sub	sp, #20
 8011896:	af00      	add	r7, sp, #0
 8011898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118a4:	699b      	ldr	r3, [r3, #24]
 80118a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118ae:	69db      	ldr	r3, [r3, #28]
 80118b0:	68ba      	ldr	r2, [r7, #8]
 80118b2:	4013      	ands	r3, r2
 80118b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	b29b      	uxth	r3, r3
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3714      	adds	r7, #20
 80118be:	46bd      	mov	sp, r7
 80118c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c4:	4770      	bx	lr

080118c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80118c6:	b480      	push	{r7}
 80118c8:	b085      	sub	sp, #20
 80118ca:	af00      	add	r7, sp, #0
 80118cc:	6078      	str	r0, [r7, #4]
 80118ce:	460b      	mov	r3, r1
 80118d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80118d6:	78fb      	ldrb	r3, [r7, #3]
 80118d8:	015a      	lsls	r2, r3, #5
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	4413      	add	r3, r2
 80118de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118e2:	689b      	ldr	r3, [r3, #8]
 80118e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118ec:	695b      	ldr	r3, [r3, #20]
 80118ee:	68ba      	ldr	r2, [r7, #8]
 80118f0:	4013      	ands	r3, r2
 80118f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80118f4:	68bb      	ldr	r3, [r7, #8]
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3714      	adds	r7, #20
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr

08011902 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011902:	b480      	push	{r7}
 8011904:	b087      	sub	sp, #28
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
 801190a:	460b      	mov	r3, r1
 801190c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011918:	691b      	ldr	r3, [r3, #16]
 801191a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801191c:	697b      	ldr	r3, [r7, #20]
 801191e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011924:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011926:	78fb      	ldrb	r3, [r7, #3]
 8011928:	f003 030f 	and.w	r3, r3, #15
 801192c:	68fa      	ldr	r2, [r7, #12]
 801192e:	fa22 f303 	lsr.w	r3, r2, r3
 8011932:	01db      	lsls	r3, r3, #7
 8011934:	b2db      	uxtb	r3, r3
 8011936:	693a      	ldr	r2, [r7, #16]
 8011938:	4313      	orrs	r3, r2
 801193a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801193c:	78fb      	ldrb	r3, [r7, #3]
 801193e:	015a      	lsls	r2, r3, #5
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	4413      	add	r3, r2
 8011944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011948:	689b      	ldr	r3, [r3, #8]
 801194a:	693a      	ldr	r2, [r7, #16]
 801194c:	4013      	ands	r3, r2
 801194e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011950:	68bb      	ldr	r3, [r7, #8]
}
 8011952:	4618      	mov	r0, r3
 8011954:	371c      	adds	r7, #28
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr

0801195e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801195e:	b480      	push	{r7}
 8011960:	b083      	sub	sp, #12
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	695b      	ldr	r3, [r3, #20]
 801196a:	f003 0301 	and.w	r3, r3, #1
}
 801196e:	4618      	mov	r0, r3
 8011970:	370c      	adds	r7, #12
 8011972:	46bd      	mov	sp, r7
 8011974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011978:	4770      	bx	lr
	...

0801197c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801197c:	b480      	push	{r7}
 801197e:	b085      	sub	sp, #20
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801198e:	681a      	ldr	r2, [r3, #0]
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011996:	4619      	mov	r1, r3
 8011998:	4b09      	ldr	r3, [pc, #36]	; (80119c0 <USB_ActivateSetup+0x44>)
 801199a:	4013      	ands	r3, r2
 801199c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	68fa      	ldr	r2, [r7, #12]
 80119a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80119ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80119b2:	2300      	movs	r3, #0
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3714      	adds	r7, #20
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr
 80119c0:	fffff800 	.word	0xfffff800

080119c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b087      	sub	sp, #28
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	60f8      	str	r0, [r7, #12]
 80119cc:	460b      	mov	r3, r1
 80119ce:	607a      	str	r2, [r7, #4]
 80119d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	333c      	adds	r3, #60	; 0x3c
 80119da:	3304      	adds	r3, #4
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	4a26      	ldr	r2, [pc, #152]	; (8011a7c <USB_EP0_OutStart+0xb8>)
 80119e4:	4293      	cmp	r3, r2
 80119e6:	d90a      	bls.n	80119fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80119f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80119f8:	d101      	bne.n	80119fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80119fa:	2300      	movs	r3, #0
 80119fc:	e037      	b.n	8011a6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a04:	461a      	mov	r2, r3
 8011a06:	2300      	movs	r3, #0
 8011a08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a10:	691b      	ldr	r3, [r3, #16]
 8011a12:	697a      	ldr	r2, [r7, #20]
 8011a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a24:	691b      	ldr	r3, [r3, #16]
 8011a26:	697a      	ldr	r2, [r7, #20]
 8011a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a2c:	f043 0318 	orr.w	r3, r3, #24
 8011a30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a38:	691b      	ldr	r3, [r3, #16]
 8011a3a:	697a      	ldr	r2, [r7, #20]
 8011a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011a44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011a46:	7afb      	ldrb	r3, [r7, #11]
 8011a48:	2b01      	cmp	r3, #1
 8011a4a:	d10f      	bne.n	8011a6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a52:	461a      	mov	r2, r3
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	697a      	ldr	r2, [r7, #20]
 8011a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8011a6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011a6c:	2300      	movs	r3, #0
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	371c      	adds	r7, #28
 8011a72:	46bd      	mov	sp, r7
 8011a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a78:	4770      	bx	lr
 8011a7a:	bf00      	nop
 8011a7c:	4f54300a 	.word	0x4f54300a

08011a80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011a80:	b480      	push	{r7}
 8011a82:	b085      	sub	sp, #20
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011a88:	2300      	movs	r3, #0
 8011a8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	60fb      	str	r3, [r7, #12]
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	4a13      	ldr	r2, [pc, #76]	; (8011ae4 <USB_CoreReset+0x64>)
 8011a96:	4293      	cmp	r3, r2
 8011a98:	d901      	bls.n	8011a9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011a9a:	2303      	movs	r3, #3
 8011a9c:	e01b      	b.n	8011ad6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	691b      	ldr	r3, [r3, #16]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	daf2      	bge.n	8011a8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	691b      	ldr	r3, [r3, #16]
 8011aae:	f043 0201 	orr.w	r2, r3, #1
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	3301      	adds	r3, #1
 8011aba:	60fb      	str	r3, [r7, #12]
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	4a09      	ldr	r2, [pc, #36]	; (8011ae4 <USB_CoreReset+0x64>)
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	d901      	bls.n	8011ac8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011ac4:	2303      	movs	r3, #3
 8011ac6:	e006      	b.n	8011ad6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	691b      	ldr	r3, [r3, #16]
 8011acc:	f003 0301 	and.w	r3, r3, #1
 8011ad0:	2b01      	cmp	r3, #1
 8011ad2:	d0f0      	beq.n	8011ab6 <USB_CoreReset+0x36>

  return HAL_OK;
 8011ad4:	2300      	movs	r3, #0
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3714      	adds	r7, #20
 8011ada:	46bd      	mov	sp, r7
 8011adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae0:	4770      	bx	lr
 8011ae2:	bf00      	nop
 8011ae4:	00030d40 	.word	0x00030d40

08011ae8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011aec:	4904      	ldr	r1, [pc, #16]	; (8011b00 <MX_FATFS_Init+0x18>)
 8011aee:	4805      	ldr	r0, [pc, #20]	; (8011b04 <MX_FATFS_Init+0x1c>)
 8011af0:	f005 fbec 	bl	80172cc <FATFS_LinkDriver>
 8011af4:	4603      	mov	r3, r0
 8011af6:	461a      	mov	r2, r3
 8011af8:	4b03      	ldr	r3, [pc, #12]	; (8011b08 <MX_FATFS_Init+0x20>)
 8011afa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011afc:	bf00      	nop
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	24001718 	.word	0x24001718
 8011b04:	080197e8 	.word	0x080197e8
 8011b08:	24001714 	.word	0x24001714

08011b0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011b10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	46bd      	mov	sp, r7
 8011b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1a:	4770      	bx	lr

08011b1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b082      	sub	sp, #8
 8011b20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011b22:	2300      	movs	r3, #0
 8011b24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011b26:	f000 f885 	bl	8011c34 <BSP_SD_IsDetected>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	2b01      	cmp	r3, #1
 8011b2e:	d001      	beq.n	8011b34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011b30:	2302      	movs	r3, #2
 8011b32:	e012      	b.n	8011b5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011b34:	480b      	ldr	r0, [pc, #44]	; (8011b64 <BSP_SD_Init+0x48>)
 8011b36:	f7f9 fc1d 	bl	800b374 <HAL_SD_Init>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011b3e:	79fb      	ldrb	r3, [r7, #7]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d109      	bne.n	8011b58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011b44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011b48:	4806      	ldr	r0, [pc, #24]	; (8011b64 <BSP_SD_Init+0x48>)
 8011b4a:	f7fa fdf1 	bl	800c730 <HAL_SD_ConfigWideBusOperation>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d001      	beq.n	8011b58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011b54:	2301      	movs	r3, #1
 8011b56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011b58:	79fb      	ldrb	r3, [r7, #7]
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3708      	adds	r7, #8
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	240013bc 	.word	0x240013bc

08011b68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b086      	sub	sp, #24
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011b74:	2300      	movs	r3, #0
 8011b76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	68ba      	ldr	r2, [r7, #8]
 8011b7c:	68f9      	ldr	r1, [r7, #12]
 8011b7e:	4806      	ldr	r0, [pc, #24]	; (8011b98 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011b80:	f7fa f834 	bl	800bbec <HAL_SD_ReadBlocks_DMA>
 8011b84:	4603      	mov	r3, r0
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d001      	beq.n	8011b8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3718      	adds	r7, #24
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}
 8011b98:	240013bc 	.word	0x240013bc

08011b9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b086      	sub	sp, #24
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	60f8      	str	r0, [r7, #12]
 8011ba4:	60b9      	str	r1, [r7, #8]
 8011ba6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011ba8:	2300      	movs	r3, #0
 8011baa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	68ba      	ldr	r2, [r7, #8]
 8011bb0:	68f9      	ldr	r1, [r7, #12]
 8011bb2:	4806      	ldr	r0, [pc, #24]	; (8011bcc <BSP_SD_WriteBlocks_DMA+0x30>)
 8011bb4:	f7fa f8c2 	bl	800bd3c <HAL_SD_WriteBlocks_DMA>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d001      	beq.n	8011bc2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3718      	adds	r7, #24
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}
 8011bcc:	240013bc 	.word	0x240013bc

08011bd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011bd4:	4805      	ldr	r0, [pc, #20]	; (8011bec <BSP_SD_GetCardState+0x1c>)
 8011bd6:	f7fa fe55 	bl	800c884 <HAL_SD_GetCardState>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	2b04      	cmp	r3, #4
 8011bde:	bf14      	ite	ne
 8011be0:	2301      	movne	r3, #1
 8011be2:	2300      	moveq	r3, #0
 8011be4:	b2db      	uxtb	r3, r3
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	bf00      	nop
 8011bec:	240013bc 	.word	0x240013bc

08011bf0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011bf8:	6879      	ldr	r1, [r7, #4]
 8011bfa:	4803      	ldr	r0, [pc, #12]	; (8011c08 <BSP_SD_GetCardInfo+0x18>)
 8011bfc:	f7fa fd6c 	bl	800c6d8 <HAL_SD_GetCardInfo>
}
 8011c00:	bf00      	nop
 8011c02:	3708      	adds	r7, #8
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	240013bc 	.word	0x240013bc

08011c0c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011c14:	f000 f9a0 	bl	8011f58 <BSP_SD_WriteCpltCallback>
}
 8011c18:	bf00      	nop
 8011c1a:	3708      	adds	r7, #8
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011c28:	f000 f9a2 	bl	8011f70 <BSP_SD_ReadCpltCallback>
}
 8011c2c:	bf00      	nop
 8011c2e:	3708      	adds	r7, #8
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011c3e:	f000 f80b 	bl	8011c58 <BSP_PlatformIsDetected>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d101      	bne.n	8011c4c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011c4c:	79fb      	ldrb	r3, [r7, #7]
 8011c4e:	b2db      	uxtb	r3, r3
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	3708      	adds	r7, #8
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}

08011c58 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011c5e:	2301      	movs	r3, #1
 8011c60:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011c66:	4806      	ldr	r0, [pc, #24]	; (8011c80 <BSP_PlatformIsDetected+0x28>)
 8011c68:	f7f4 fef4 	bl	8006a54 <HAL_GPIO_ReadPin>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d001      	beq.n	8011c76 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011c72:	2300      	movs	r3, #0
 8011c74:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011c76:	79fb      	ldrb	r3, [r7, #7]
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3708      	adds	r7, #8
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	58020000 	.word	0x58020000

08011c84 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011c8c:	f7f1 f9d4 	bl	8003038 <HAL_GetTick>
 8011c90:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011c92:	e006      	b.n	8011ca2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011c94:	f7ff ff9c 	bl	8011bd0 <BSP_SD_GetCardState>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d101      	bne.n	8011ca2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	e009      	b.n	8011cb6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011ca2:	f7f1 f9c9 	bl	8003038 <HAL_GetTick>
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	1ad3      	subs	r3, r2, r3
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d8f0      	bhi.n	8011c94 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
	...

08011cc0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011cca:	4b0b      	ldr	r3, [pc, #44]	; (8011cf8 <SD_CheckStatus+0x38>)
 8011ccc:	2201      	movs	r2, #1
 8011cce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011cd0:	f7ff ff7e 	bl	8011bd0 <BSP_SD_GetCardState>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d107      	bne.n	8011cea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011cda:	4b07      	ldr	r3, [pc, #28]	; (8011cf8 <SD_CheckStatus+0x38>)
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	b2db      	uxtb	r3, r3
 8011ce0:	f023 0301 	bic.w	r3, r3, #1
 8011ce4:	b2da      	uxtb	r2, r3
 8011ce6:	4b04      	ldr	r3, [pc, #16]	; (8011cf8 <SD_CheckStatus+0x38>)
 8011ce8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011cea:	4b03      	ldr	r3, [pc, #12]	; (8011cf8 <SD_CheckStatus+0x38>)
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	b2db      	uxtb	r3, r3
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3708      	adds	r7, #8
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}
 8011cf8:	24000019 	.word	0x24000019

08011cfc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	4603      	mov	r3, r0
 8011d04:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011d06:	f7ff ff09 	bl	8011b1c <BSP_SD_Init>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d107      	bne.n	8011d20 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011d10:	79fb      	ldrb	r3, [r7, #7]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7ff ffd4 	bl	8011cc0 <SD_CheckStatus>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	461a      	mov	r2, r3
 8011d1c:	4b04      	ldr	r3, [pc, #16]	; (8011d30 <SD_initialize+0x34>)
 8011d1e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011d20:	4b03      	ldr	r3, [pc, #12]	; (8011d30 <SD_initialize+0x34>)
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	b2db      	uxtb	r3, r3
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3708      	adds	r7, #8
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
 8011d2e:	bf00      	nop
 8011d30:	24000019 	.word	0x24000019

08011d34 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011d3e:	79fb      	ldrb	r3, [r7, #7]
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7ff ffbd 	bl	8011cc0 <SD_CheckStatus>
 8011d46:	4603      	mov	r3, r0
}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	3708      	adds	r7, #8
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}

08011d50 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b086      	sub	sp, #24
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	60b9      	str	r1, [r7, #8]
 8011d58:	607a      	str	r2, [r7, #4]
 8011d5a:	603b      	str	r3, [r7, #0]
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011d60:	2301      	movs	r3, #1
 8011d62:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011d64:	f247 5030 	movw	r0, #30000	; 0x7530
 8011d68:	f7ff ff8c 	bl	8011c84 <SD_CheckStatusWithTimeout>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	da01      	bge.n	8011d76 <SD_read+0x26>
  {
    return res;
 8011d72:	7dfb      	ldrb	r3, [r7, #23]
 8011d74:	e03b      	b.n	8011dee <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011d76:	683a      	ldr	r2, [r7, #0]
 8011d78:	6879      	ldr	r1, [r7, #4]
 8011d7a:	68b8      	ldr	r0, [r7, #8]
 8011d7c:	f7ff fef4 	bl	8011b68 <BSP_SD_ReadBlocks_DMA>
 8011d80:	4603      	mov	r3, r0
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d132      	bne.n	8011dec <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011d86:	4b1c      	ldr	r3, [pc, #112]	; (8011df8 <SD_read+0xa8>)
 8011d88:	2200      	movs	r2, #0
 8011d8a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011d8c:	f7f1 f954 	bl	8003038 <HAL_GetTick>
 8011d90:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011d92:	bf00      	nop
 8011d94:	4b18      	ldr	r3, [pc, #96]	; (8011df8 <SD_read+0xa8>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d108      	bne.n	8011dae <SD_read+0x5e>
 8011d9c:	f7f1 f94c 	bl	8003038 <HAL_GetTick>
 8011da0:	4602      	mov	r2, r0
 8011da2:	693b      	ldr	r3, [r7, #16]
 8011da4:	1ad3      	subs	r3, r2, r3
 8011da6:	f247 522f 	movw	r2, #29999	; 0x752f
 8011daa:	4293      	cmp	r3, r2
 8011dac:	d9f2      	bls.n	8011d94 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8011dae:	4b12      	ldr	r3, [pc, #72]	; (8011df8 <SD_read+0xa8>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d102      	bne.n	8011dbc <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011db6:	2301      	movs	r3, #1
 8011db8:	75fb      	strb	r3, [r7, #23]
 8011dba:	e017      	b.n	8011dec <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011dbc:	4b0e      	ldr	r3, [pc, #56]	; (8011df8 <SD_read+0xa8>)
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011dc2:	f7f1 f939 	bl	8003038 <HAL_GetTick>
 8011dc6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011dc8:	e007      	b.n	8011dda <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011dca:	f7ff ff01 	bl	8011bd0 <BSP_SD_GetCardState>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d102      	bne.n	8011dda <SD_read+0x8a>
          {
            res = RES_OK;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011dd8:	e008      	b.n	8011dec <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011dda:	f7f1 f92d 	bl	8003038 <HAL_GetTick>
 8011dde:	4602      	mov	r2, r0
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	1ad3      	subs	r3, r2, r3
 8011de4:	f247 522f 	movw	r2, #29999	; 0x752f
 8011de8:	4293      	cmp	r3, r2
 8011dea:	d9ee      	bls.n	8011dca <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3718      	adds	r7, #24
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	24000b28 	.word	0x24000b28

08011dfc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b086      	sub	sp, #24
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60b9      	str	r1, [r7, #8]
 8011e04:	607a      	str	r2, [r7, #4]
 8011e06:	603b      	str	r3, [r7, #0]
 8011e08:	4603      	mov	r3, r0
 8011e0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011e10:	4b24      	ldr	r3, [pc, #144]	; (8011ea4 <SD_write+0xa8>)
 8011e12:	2200      	movs	r2, #0
 8011e14:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011e16:	f247 5030 	movw	r0, #30000	; 0x7530
 8011e1a:	f7ff ff33 	bl	8011c84 <SD_CheckStatusWithTimeout>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	da01      	bge.n	8011e28 <SD_write+0x2c>
  {
    return res;
 8011e24:	7dfb      	ldrb	r3, [r7, #23]
 8011e26:	e038      	b.n	8011e9a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011e28:	683a      	ldr	r2, [r7, #0]
 8011e2a:	6879      	ldr	r1, [r7, #4]
 8011e2c:	68b8      	ldr	r0, [r7, #8]
 8011e2e:	f7ff feb5 	bl	8011b9c <BSP_SD_WriteBlocks_DMA>
 8011e32:	4603      	mov	r3, r0
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d12f      	bne.n	8011e98 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011e38:	f7f1 f8fe 	bl	8003038 <HAL_GetTick>
 8011e3c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011e3e:	bf00      	nop
 8011e40:	4b18      	ldr	r3, [pc, #96]	; (8011ea4 <SD_write+0xa8>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d108      	bne.n	8011e5a <SD_write+0x5e>
 8011e48:	f7f1 f8f6 	bl	8003038 <HAL_GetTick>
 8011e4c:	4602      	mov	r2, r0
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	1ad3      	subs	r3, r2, r3
 8011e52:	f247 522f 	movw	r2, #29999	; 0x752f
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d9f2      	bls.n	8011e40 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8011e5a:	4b12      	ldr	r3, [pc, #72]	; (8011ea4 <SD_write+0xa8>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d102      	bne.n	8011e68 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011e62:	2301      	movs	r3, #1
 8011e64:	75fb      	strb	r3, [r7, #23]
 8011e66:	e017      	b.n	8011e98 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011e68:	4b0e      	ldr	r3, [pc, #56]	; (8011ea4 <SD_write+0xa8>)
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011e6e:	f7f1 f8e3 	bl	8003038 <HAL_GetTick>
 8011e72:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011e74:	e007      	b.n	8011e86 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011e76:	f7ff feab 	bl	8011bd0 <BSP_SD_GetCardState>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d102      	bne.n	8011e86 <SD_write+0x8a>
          {
            res = RES_OK;
 8011e80:	2300      	movs	r3, #0
 8011e82:	75fb      	strb	r3, [r7, #23]
            break;
 8011e84:	e008      	b.n	8011e98 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011e86:	f7f1 f8d7 	bl	8003038 <HAL_GetTick>
 8011e8a:	4602      	mov	r2, r0
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	1ad3      	subs	r3, r2, r3
 8011e90:	f247 522f 	movw	r2, #29999	; 0x752f
 8011e94:	4293      	cmp	r3, r2
 8011e96:	d9ee      	bls.n	8011e76 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	3718      	adds	r7, #24
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	24000b24 	.word	0x24000b24

08011ea8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b08c      	sub	sp, #48	; 0x30
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	4603      	mov	r3, r0
 8011eb0:	603a      	str	r2, [r7, #0]
 8011eb2:	71fb      	strb	r3, [r7, #7]
 8011eb4:	460b      	mov	r3, r1
 8011eb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011eb8:	2301      	movs	r3, #1
 8011eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011ebe:	4b25      	ldr	r3, [pc, #148]	; (8011f54 <SD_ioctl+0xac>)
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	b2db      	uxtb	r3, r3
 8011ec4:	f003 0301 	and.w	r3, r3, #1
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d001      	beq.n	8011ed0 <SD_ioctl+0x28>
 8011ecc:	2303      	movs	r3, #3
 8011ece:	e03c      	b.n	8011f4a <SD_ioctl+0xa2>

  switch (cmd)
 8011ed0:	79bb      	ldrb	r3, [r7, #6]
 8011ed2:	2b03      	cmp	r3, #3
 8011ed4:	d834      	bhi.n	8011f40 <SD_ioctl+0x98>
 8011ed6:	a201      	add	r2, pc, #4	; (adr r2, 8011edc <SD_ioctl+0x34>)
 8011ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011edc:	08011eed 	.word	0x08011eed
 8011ee0:	08011ef5 	.word	0x08011ef5
 8011ee4:	08011f0d 	.word	0x08011f0d
 8011ee8:	08011f27 	.word	0x08011f27
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011eec:	2300      	movs	r3, #0
 8011eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011ef2:	e028      	b.n	8011f46 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ef4:	f107 0308 	add.w	r3, r7, #8
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7ff fe79 	bl	8011bf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011efe:	6a3a      	ldr	r2, [r7, #32]
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011f04:	2300      	movs	r3, #0
 8011f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011f0a:	e01c      	b.n	8011f46 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011f0c:	f107 0308 	add.w	r3, r7, #8
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7ff fe6d 	bl	8011bf0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f18:	b29a      	uxth	r2, r3
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011f24:	e00f      	b.n	8011f46 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011f26:	f107 0308 	add.w	r3, r7, #8
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7ff fe60 	bl	8011bf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f32:	0a5a      	lsrs	r2, r3, #9
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011f3e:	e002      	b.n	8011f46 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011f40:	2304      	movs	r3, #4
 8011f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011f46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3730      	adds	r7, #48	; 0x30
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	24000019 	.word	0x24000019

08011f58 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011f58:	b480      	push	{r7}
 8011f5a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011f5c:	4b03      	ldr	r3, [pc, #12]	; (8011f6c <BSP_SD_WriteCpltCallback+0x14>)
 8011f5e:	2201      	movs	r2, #1
 8011f60:	601a      	str	r2, [r3, #0]
}
 8011f62:	bf00      	nop
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr
 8011f6c:	24000b24 	.word	0x24000b24

08011f70 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011f70:	b480      	push	{r7}
 8011f72:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011f74:	4b03      	ldr	r3, [pc, #12]	; (8011f84 <BSP_SD_ReadCpltCallback+0x14>)
 8011f76:	2201      	movs	r2, #1
 8011f78:	601a      	str	r2, [r3, #0]
}
 8011f7a:	bf00      	nop
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr
 8011f84:	24000b28 	.word	0x24000b28

08011f88 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	460b      	mov	r3, r1
 8011f92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8011f94:	f248 0074 	movw	r0, #32884	; 0x8074
 8011f98:	f005 fed0 	bl	8017d3c <malloc>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d105      	bne.n	8011fb2 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011fae:	2302      	movs	r3, #2
 8011fb0:	e034      	b.n	801201c <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	68fa      	ldr	r2, [r7, #12]
 8011fb6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	7c1b      	ldrb	r3, [r3, #16]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d115      	bne.n	8011fee <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011fc6:	2202      	movs	r2, #2
 8011fc8:	2101      	movs	r1, #1
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f005 fd1d 	bl	8017a0a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011fdc:	2202      	movs	r2, #2
 8011fde:	2181      	movs	r1, #129	; 0x81
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f005 fd12 	bl	8017a0a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2201      	movs	r2, #1
 8011fea:	871a      	strh	r2, [r3, #56]	; 0x38
 8011fec:	e012      	b.n	8012014 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011fee:	2340      	movs	r3, #64	; 0x40
 8011ff0:	2202      	movs	r2, #2
 8011ff2:	2101      	movs	r1, #1
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f005 fd08 	bl	8017a0a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2201      	movs	r2, #1
 8011ffe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8012002:	2340      	movs	r3, #64	; 0x40
 8012004:	2202      	movs	r2, #2
 8012006:	2181      	movs	r1, #129	; 0x81
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f005 fcfe 	bl	8017a0a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2201      	movs	r2, #1
 8012012:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f000 f98e 	bl	8012336 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801201a:	2300      	movs	r3, #0
}
 801201c:	4618      	mov	r0, r3
 801201e:	3710      	adds	r7, #16
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	460b      	mov	r3, r1
 801202e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8012030:	2101      	movs	r1, #1
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f005 fd0f 	bl	8017a56 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2200      	movs	r2, #0
 801203c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8012040:	2181      	movs	r1, #129	; 0x81
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f005 fd07 	bl	8017a56 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2200      	movs	r2, #0
 801204c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 f9cf 	bl	80123f2 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801205a:	2b00      	cmp	r3, #0
 801205c:	d009      	beq.n	8012072 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012064:	4618      	mov	r0, r3
 8012066:	f005 fe71 	bl	8017d4c <free>
    pdev->pClassData = NULL;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2200      	movs	r2, #0
 801206e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012072:	2300      	movs	r3, #0
}
 8012074:	4618      	mov	r0, r3
 8012076:	3708      	adds	r7, #8
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}

0801207c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b086      	sub	sp, #24
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801208c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801208e:	2300      	movs	r3, #0
 8012090:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8012092:	2300      	movs	r3, #0
 8012094:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d04d      	beq.n	801213e <USBD_MSC_Setup+0xc2>
 80120a2:	2b20      	cmp	r3, #32
 80120a4:	f040 80c6 	bne.w	8012234 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	785b      	ldrb	r3, [r3, #1]
 80120ac:	2bfe      	cmp	r3, #254	; 0xfe
 80120ae:	d002      	beq.n	80120b6 <USBD_MSC_Setup+0x3a>
 80120b0:	2bff      	cmp	r3, #255	; 0xff
 80120b2:	d024      	beq.n	80120fe <USBD_MSC_Setup+0x82>
 80120b4:	e03b      	b.n	801212e <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	885b      	ldrh	r3, [r3, #2]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d118      	bne.n	80120f0 <USBD_MSC_Setup+0x74>
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	88db      	ldrh	r3, [r3, #6]
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d114      	bne.n	80120f0 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	781b      	ldrb	r3, [r3, #0]
 80120ca:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	da0f      	bge.n	80120f0 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80120d6:	699b      	ldr	r3, [r3, #24]
 80120d8:	4798      	blx	r3
 80120da:	4603      	mov	r3, r0
 80120dc:	461a      	mov	r2, r3
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80120e2:	693b      	ldr	r3, [r7, #16]
 80120e4:	2201      	movs	r2, #1
 80120e6:	4619      	mov	r1, r3
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f002 fdaa 	bl	8014c42 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80120ee:	e025      	b.n	801213c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80120f0:	6839      	ldr	r1, [r7, #0]
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f002 fd34 	bl	8014b60 <USBD_CtlError>
        ret = USBD_FAIL;
 80120f8:	2303      	movs	r3, #3
 80120fa:	75fb      	strb	r3, [r7, #23]
      break;
 80120fc:	e01e      	b.n	801213c <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	885b      	ldrh	r3, [r3, #2]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d10c      	bne.n	8012120 <USBD_MSC_Setup+0xa4>
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	88db      	ldrh	r3, [r3, #6]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d108      	bne.n	8012120 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8012114:	2b00      	cmp	r3, #0
 8012116:	db03      	blt.n	8012120 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f000 f947 	bl	80123ac <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801211e:	e00d      	b.n	801213c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8012120:	6839      	ldr	r1, [r7, #0]
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f002 fd1c 	bl	8014b60 <USBD_CtlError>
        ret = USBD_FAIL;
 8012128:	2303      	movs	r3, #3
 801212a:	75fb      	strb	r3, [r7, #23]
      break;
 801212c:	e006      	b.n	801213c <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 801212e:	6839      	ldr	r1, [r7, #0]
 8012130:	6878      	ldr	r0, [r7, #4]
 8012132:	f002 fd15 	bl	8014b60 <USBD_CtlError>
      ret = USBD_FAIL;
 8012136:	2303      	movs	r3, #3
 8012138:	75fb      	strb	r3, [r7, #23]
      break;
 801213a:	bf00      	nop
    }
    break;
 801213c:	e081      	b.n	8012242 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	785b      	ldrb	r3, [r3, #1]
 8012142:	2b0b      	cmp	r3, #11
 8012144:	d86d      	bhi.n	8012222 <USBD_MSC_Setup+0x1a6>
 8012146:	a201      	add	r2, pc, #4	; (adr r2, 801214c <USBD_MSC_Setup+0xd0>)
 8012148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801214c:	0801217d 	.word	0x0801217d
 8012150:	080121f3 	.word	0x080121f3
 8012154:	08012223 	.word	0x08012223
 8012158:	08012223 	.word	0x08012223
 801215c:	08012223 	.word	0x08012223
 8012160:	08012223 	.word	0x08012223
 8012164:	08012223 	.word	0x08012223
 8012168:	08012223 	.word	0x08012223
 801216c:	08012223 	.word	0x08012223
 8012170:	08012223 	.word	0x08012223
 8012174:	080121a5 	.word	0x080121a5
 8012178:	080121cd 	.word	0x080121cd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012182:	2b03      	cmp	r3, #3
 8012184:	d107      	bne.n	8012196 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012186:	f107 030e 	add.w	r3, r7, #14
 801218a:	2202      	movs	r2, #2
 801218c:	4619      	mov	r1, r3
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f002 fd57 	bl	8014c42 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012194:	e04d      	b.n	8012232 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8012196:	6839      	ldr	r1, [r7, #0]
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f002 fce1 	bl	8014b60 <USBD_CtlError>
        ret = USBD_FAIL;
 801219e:	2303      	movs	r3, #3
 80121a0:	75fb      	strb	r3, [r7, #23]
      break;
 80121a2:	e046      	b.n	8012232 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121aa:	2b03      	cmp	r3, #3
 80121ac:	d107      	bne.n	80121be <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	3304      	adds	r3, #4
 80121b2:	2201      	movs	r2, #1
 80121b4:	4619      	mov	r1, r3
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f002 fd43 	bl	8014c42 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80121bc:	e039      	b.n	8012232 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80121be:	6839      	ldr	r1, [r7, #0]
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f002 fccd 	bl	8014b60 <USBD_CtlError>
        ret = USBD_FAIL;
 80121c6:	2303      	movs	r3, #3
 80121c8:	75fb      	strb	r3, [r7, #23]
      break;
 80121ca:	e032      	b.n	8012232 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121d2:	2b03      	cmp	r3, #3
 80121d4:	d106      	bne.n	80121e4 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	885b      	ldrh	r3, [r3, #2]
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	461a      	mov	r2, r3
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80121e2:	e026      	b.n	8012232 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80121e4:	6839      	ldr	r1, [r7, #0]
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f002 fcba 	bl	8014b60 <USBD_CtlError>
        ret = USBD_FAIL;
 80121ec:	2303      	movs	r3, #3
 80121ee:	75fb      	strb	r3, [r7, #23]
      break;
 80121f0:	e01f      	b.n	8012232 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121f8:	2b03      	cmp	r3, #3
 80121fa:	d119      	bne.n	8012230 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	885b      	ldrh	r3, [r3, #2]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d115      	bne.n	8012230 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	889b      	ldrh	r3, [r3, #4]
 8012208:	b2db      	uxtb	r3, r3
 801220a:	4619      	mov	r1, r3
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f005 fc41 	bl	8017a94 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	889b      	ldrh	r3, [r3, #4]
 8012216:	b2db      	uxtb	r3, r3
 8012218:	4619      	mov	r1, r3
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f000 fa90 	bl	8012740 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8012220:	e006      	b.n	8012230 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8012222:	6839      	ldr	r1, [r7, #0]
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	f002 fc9b 	bl	8014b60 <USBD_CtlError>
      ret = USBD_FAIL;
 801222a:	2303      	movs	r3, #3
 801222c:	75fb      	strb	r3, [r7, #23]
      break;
 801222e:	e000      	b.n	8012232 <USBD_MSC_Setup+0x1b6>
      break;
 8012230:	bf00      	nop
    }
    break;
 8012232:	e006      	b.n	8012242 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8012234:	6839      	ldr	r1, [r7, #0]
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f002 fc92 	bl	8014b60 <USBD_CtlError>
    ret = USBD_FAIL;
 801223c:	2303      	movs	r3, #3
 801223e:	75fb      	strb	r3, [r7, #23]
    break;
 8012240:	bf00      	nop
  }

  return (uint8_t)ret;
 8012242:	7dfb      	ldrb	r3, [r7, #23]
}
 8012244:	4618      	mov	r0, r3
 8012246:	3718      	adds	r7, #24
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}

0801224c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b082      	sub	sp, #8
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	460b      	mov	r3, r1
 8012256:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8012258:	78fb      	ldrb	r3, [r7, #3]
 801225a:	4619      	mov	r1, r3
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f000 f8d9 	bl	8012414 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8012262:	2300      	movs	r3, #0
}
 8012264:	4618      	mov	r0, r3
 8012266:	3708      	adds	r7, #8
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}

0801226c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	460b      	mov	r3, r1
 8012276:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8012278:	78fb      	ldrb	r3, [r7, #3]
 801227a:	4619      	mov	r1, r3
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f000 f8fd 	bl	801247c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8012282:	2300      	movs	r3, #0
}
 8012284:	4618      	mov	r0, r3
 8012286:	3708      	adds	r7, #8
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801228c:	b480      	push	{r7}
 801228e:	b083      	sub	sp, #12
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2220      	movs	r2, #32
 8012298:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801229a:	4b03      	ldr	r3, [pc, #12]	; (80122a8 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 801229c:	4618      	mov	r0, r3
 801229e:	370c      	adds	r7, #12
 80122a0:	46bd      	mov	sp, r7
 80122a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a6:	4770      	bx	lr
 80122a8:	24000054 	.word	0x24000054

080122ac <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80122ac:	b480      	push	{r7}
 80122ae:	b083      	sub	sp, #12
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2220      	movs	r2, #32
 80122b8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80122ba:	4b03      	ldr	r3, [pc, #12]	; (80122c8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80122bc:	4618      	mov	r0, r3
 80122be:	370c      	adds	r7, #12
 80122c0:	46bd      	mov	sp, r7
 80122c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c6:	4770      	bx	lr
 80122c8:	24000074 	.word	0x24000074

080122cc <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2220      	movs	r2, #32
 80122d8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80122da:	4b03      	ldr	r3, [pc, #12]	; (80122e8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80122dc:	4618      	mov	r0, r3
 80122de:	370c      	adds	r7, #12
 80122e0:	46bd      	mov	sp, r7
 80122e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e6:	4770      	bx	lr
 80122e8:	24000094 	.word	0x24000094

080122ec <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80122ec:	b480      	push	{r7}
 80122ee:	b083      	sub	sp, #12
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	220a      	movs	r2, #10
 80122f8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80122fa:	4b03      	ldr	r3, [pc, #12]	; (8012308 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	370c      	adds	r7, #12
 8012300:	46bd      	mov	sp, r7
 8012302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012306:	4770      	bx	lr
 8012308:	240000b4 	.word	0x240000b4

0801230c <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801230c:	b480      	push	{r7}
 801230e:	b083      	sub	sp, #12
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d101      	bne.n	8012320 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801231c:	2303      	movs	r3, #3
 801231e:	e004      	b.n	801232a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	683a      	ldr	r2, [r7, #0]
 8012324:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8012328:	2300      	movs	r3, #0
}
 801232a:	4618      	mov	r0, r3
 801232c:	370c      	adds	r7, #12
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr

08012336 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8012336:	b580      	push	{r7, lr}
 8012338:	b084      	sub	sp, #16
 801233a:	af00      	add	r7, sp, #0
 801233c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012344:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	2200      	movs	r2, #0
 801234a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	2200      	movs	r2, #0
 8012350:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8012352:	68fa      	ldr	r2, [r7, #12]
 8012354:	f248 0361 	movw	r3, #32865	; 0x8061
 8012358:	4413      	add	r3, r2
 801235a:	2200      	movs	r2, #0
 801235c:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 801235e:	68fa      	ldr	r2, [r7, #12]
 8012360:	f248 0360 	movw	r3, #32864	; 0x8060
 8012364:	4413      	add	r3, r2
 8012366:	2200      	movs	r2, #0
 8012368:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801236a:	68fa      	ldr	r2, [r7, #12]
 801236c:	f248 0362 	movw	r3, #32866	; 0x8062
 8012370:	4413      	add	r3, r2
 8012372:	2200      	movs	r2, #0
 8012374:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	2000      	movs	r0, #0
 8012380:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8012382:	2101      	movs	r1, #1
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f005 fb85 	bl	8017a94 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801238a:	2181      	movs	r1, #129	; 0x81
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f005 fb81 	bl	8017a94 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	f248 0210 	movw	r2, #32784	; 0x8010
 8012398:	441a      	add	r2, r3
 801239a:	231f      	movs	r3, #31
 801239c:	2101      	movs	r1, #1
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f005 fc41 	bl	8017c26 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80123a4:	bf00      	nop
 80123a6:	3710      	adds	r7, #16
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}

080123ac <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b084      	sub	sp, #16
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80123ba:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	2200      	movs	r2, #0
 80123c0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	2201      	movs	r2, #1
 80123c6:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 80123c8:	2181      	movs	r1, #129	; 0x81
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f005 fba0 	bl	8017b10 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 80123d0:	2101      	movs	r1, #1
 80123d2:	6878      	ldr	r0, [r7, #4]
 80123d4:	f005 fb9c 	bl	8017b10 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	f248 0210 	movw	r2, #32784	; 0x8010
 80123de:	441a      	add	r2, r3
 80123e0:	231f      	movs	r3, #31
 80123e2:	2101      	movs	r1, #1
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f005 fc1e 	bl	8017c26 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80123ea:	bf00      	nop
 80123ec:	3710      	adds	r7, #16
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}

080123f2 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80123f2:	b480      	push	{r7}
 80123f4:	b085      	sub	sp, #20
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012400:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	2200      	movs	r2, #0
 8012406:	721a      	strb	r2, [r3, #8]
}
 8012408:	bf00      	nop
 801240a:	3714      	adds	r7, #20
 801240c:	46bd      	mov	sp, r7
 801240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012412:	4770      	bx	lr

08012414 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b084      	sub	sp, #16
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	460b      	mov	r3, r1
 801241e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012426:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	7a1b      	ldrb	r3, [r3, #8]
 801242c:	2b02      	cmp	r3, #2
 801242e:	d004      	beq.n	801243a <MSC_BOT_DataIn+0x26>
 8012430:	2b02      	cmp	r3, #2
 8012432:	db1c      	blt.n	801246e <MSC_BOT_DataIn+0x5a>
 8012434:	2b04      	cmp	r3, #4
 8012436:	dc1a      	bgt.n	801246e <MSC_BOT_DataIn+0x5a>
 8012438:	e014      	b.n	8012464 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801243a:	68fa      	ldr	r2, [r7, #12]
 801243c:	f248 031d 	movw	r3, #32797	; 0x801d
 8012440:	4413      	add	r3, r2
 8012442:	7819      	ldrb	r1, [r3, #0]
 8012444:	68fa      	ldr	r2, [r7, #12]
 8012446:	f248 031f 	movw	r3, #32799	; 0x801f
 801244a:	4413      	add	r3, r2
 801244c:	461a      	mov	r2, r3
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f000 f99e 	bl	8012790 <SCSI_ProcessCmd>
 8012454:	4603      	mov	r3, r0
 8012456:	2b00      	cmp	r3, #0
 8012458:	da0b      	bge.n	8012472 <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801245a:	2101      	movs	r1, #1
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f000 f90b 	bl	8012678 <MSC_BOT_SendCSW>
    }
    break;
 8012462:	e006      	b.n	8012472 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012464:	2100      	movs	r1, #0
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f000 f906 	bl	8012678 <MSC_BOT_SendCSW>
    break;
 801246c:	e002      	b.n	8012474 <MSC_BOT_DataIn+0x60>

  default:
    break;
 801246e:	bf00      	nop
 8012470:	e000      	b.n	8012474 <MSC_BOT_DataIn+0x60>
    break;
 8012472:	bf00      	nop
  }
}
 8012474:	bf00      	nop
 8012476:	3710      	adds	r7, #16
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}

0801247c <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	460b      	mov	r3, r1
 8012486:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801248e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	7a1b      	ldrb	r3, [r3, #8]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d002      	beq.n	801249e <MSC_BOT_DataOut+0x22>
 8012498:	2b01      	cmp	r3, #1
 801249a:	d004      	beq.n	80124a6 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801249c:	e018      	b.n	80124d0 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f000 f81a 	bl	80124d8 <MSC_BOT_CBW_Decode>
      break;
 80124a4:	e014      	b.n	80124d0 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80124a6:	68fa      	ldr	r2, [r7, #12]
 80124a8:	f248 031d 	movw	r3, #32797	; 0x801d
 80124ac:	4413      	add	r3, r2
 80124ae:	7819      	ldrb	r1, [r3, #0]
 80124b0:	68fa      	ldr	r2, [r7, #12]
 80124b2:	f248 031f 	movw	r3, #32799	; 0x801f
 80124b6:	4413      	add	r3, r2
 80124b8:	461a      	mov	r2, r3
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f000 f968 	bl	8012790 <SCSI_ProcessCmd>
 80124c0:	4603      	mov	r3, r0
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	da03      	bge.n	80124ce <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80124c6:	2101      	movs	r1, #1
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f000 f8d5 	bl	8012678 <MSC_BOT_SendCSW>
      break;
 80124ce:	bf00      	nop
  }
}
 80124d0:	bf00      	nop
 80124d2:	3710      	adds	r7, #16
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b084      	sub	sp, #16
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80124e6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80124e8:	68fa      	ldr	r2, [r7, #12]
 80124ea:	f248 0314 	movw	r3, #32788	; 0x8014
 80124ee:	4413      	add	r3, r2
 80124f0:	681a      	ldr	r2, [r3, #0]
 80124f2:	68f9      	ldr	r1, [r7, #12]
 80124f4:	f248 0334 	movw	r3, #32820	; 0x8034
 80124f8:	440b      	add	r3, r1
 80124fa:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80124fc:	68fa      	ldr	r2, [r7, #12]
 80124fe:	f248 0318 	movw	r3, #32792	; 0x8018
 8012502:	4413      	add	r3, r2
 8012504:	681a      	ldr	r2, [r3, #0]
 8012506:	68f9      	ldr	r1, [r7, #12]
 8012508:	f248 0338 	movw	r3, #32824	; 0x8038
 801250c:	440b      	add	r3, r1
 801250e:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012510:	2101      	movs	r1, #1
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	f005 fba8 	bl	8017c68 <USBD_LL_GetRxDataSize>
 8012518:	4603      	mov	r3, r0
 801251a:	2b1f      	cmp	r3, #31
 801251c:	d11c      	bne.n	8012558 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801251e:	68fa      	ldr	r2, [r7, #12]
 8012520:	f248 0310 	movw	r3, #32784	; 0x8010
 8012524:	4413      	add	r3, r2
 8012526:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012528:	4a38      	ldr	r2, [pc, #224]	; (801260c <MSC_BOT_CBW_Decode+0x134>)
 801252a:	4293      	cmp	r3, r2
 801252c:	d114      	bne.n	8012558 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801252e:	68fa      	ldr	r2, [r7, #12]
 8012530:	f248 031d 	movw	r3, #32797	; 0x801d
 8012534:	4413      	add	r3, r2
 8012536:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012538:	2b01      	cmp	r3, #1
 801253a:	d80d      	bhi.n	8012558 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801253c:	68fa      	ldr	r2, [r7, #12]
 801253e:	f248 031e 	movw	r3, #32798	; 0x801e
 8012542:	4413      	add	r3, r2
 8012544:	781b      	ldrb	r3, [r3, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d006      	beq.n	8012558 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 801254a:	68fa      	ldr	r2, [r7, #12]
 801254c:	f248 031e 	movw	r3, #32798	; 0x801e
 8012550:	4413      	add	r3, r2
 8012552:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012554:	2b10      	cmp	r3, #16
 8012556:	d910      	bls.n	801257a <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012558:	68fa      	ldr	r2, [r7, #12]
 801255a:	f248 031d 	movw	r3, #32797	; 0x801d
 801255e:	4413      	add	r3, r2
 8012560:	7819      	ldrb	r1, [r3, #0]
 8012562:	2320      	movs	r3, #32
 8012564:	2205      	movs	r2, #5
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f000 fd36 	bl	8012fd8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2202      	movs	r2, #2
 8012570:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8012572:	6878      	ldr	r0, [r7, #4]
 8012574:	f000 f8b2 	bl	80126dc <MSC_BOT_Abort>
 8012578:	e044      	b.n	8012604 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801257a:	68fa      	ldr	r2, [r7, #12]
 801257c:	f248 031d 	movw	r3, #32797	; 0x801d
 8012580:	4413      	add	r3, r2
 8012582:	7819      	ldrb	r1, [r3, #0]
 8012584:	68fa      	ldr	r2, [r7, #12]
 8012586:	f248 031f 	movw	r3, #32799	; 0x801f
 801258a:	4413      	add	r3, r2
 801258c:	461a      	mov	r2, r3
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 f8fe 	bl	8012790 <SCSI_ProcessCmd>
 8012594:	4603      	mov	r3, r0
 8012596:	2b00      	cmp	r3, #0
 8012598:	da0c      	bge.n	80125b4 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	7a1b      	ldrb	r3, [r3, #8]
 801259e:	2b05      	cmp	r3, #5
 80125a0:	d104      	bne.n	80125ac <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80125a2:	2101      	movs	r1, #1
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f000 f867 	bl	8012678 <MSC_BOT_SendCSW>
 80125aa:	e02b      	b.n	8012604 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f000 f895 	bl	80126dc <MSC_BOT_Abort>
 80125b2:	e027      	b.n	8012604 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	7a1b      	ldrb	r3, [r3, #8]
 80125b8:	2b02      	cmp	r3, #2
 80125ba:	d022      	beq.n	8012602 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d01e      	beq.n	8012602 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80125c8:	2b03      	cmp	r3, #3
 80125ca:	d01a      	beq.n	8012602 <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	68db      	ldr	r3, [r3, #12]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d009      	beq.n	80125e8 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	f103 0110 	add.w	r1, r3, #16
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	461a      	mov	r2, r3
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f000 f815 	bl	8012610 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80125e6:	e00d      	b.n	8012604 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	68db      	ldr	r3, [r3, #12]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d104      	bne.n	80125fa <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80125f0:	2100      	movs	r1, #0
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f000 f840 	bl	8012678 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80125f8:	e004      	b.n	8012604 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f000 f86e 	bl	80126dc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8012600:	e000      	b.n	8012604 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8012602:	bf00      	nop
    }
  }
}
 8012604:	3710      	adds	r7, #16
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
 801260a:	bf00      	nop
 801260c:	43425355 	.word	0x43425355

08012610 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b086      	sub	sp, #24
 8012614:	af00      	add	r7, sp, #0
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	60b9      	str	r1, [r7, #8]
 801261a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012622:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8012624:	697a      	ldr	r2, [r7, #20]
 8012626:	f248 0318 	movw	r3, #32792	; 0x8018
 801262a:	4413      	add	r3, r2
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	4293      	cmp	r3, r2
 8012632:	bf28      	it	cs
 8012634:	4613      	movcs	r3, r2
 8012636:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8012638:	697a      	ldr	r2, [r7, #20]
 801263a:	f248 0338 	movw	r3, #32824	; 0x8038
 801263e:	4413      	add	r3, r2
 8012640:	681a      	ldr	r2, [r3, #0]
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	1ad2      	subs	r2, r2, r3
 8012646:	6979      	ldr	r1, [r7, #20]
 8012648:	f248 0338 	movw	r3, #32824	; 0x8038
 801264c:	440b      	add	r3, r1
 801264e:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8012650:	697a      	ldr	r2, [r7, #20]
 8012652:	f248 033c 	movw	r3, #32828	; 0x803c
 8012656:	4413      	add	r3, r2
 8012658:	2200      	movs	r2, #0
 801265a:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	2204      	movs	r2, #4
 8012660:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8012662:	693b      	ldr	r3, [r7, #16]
 8012664:	68ba      	ldr	r2, [r7, #8]
 8012666:	2181      	movs	r1, #129	; 0x81
 8012668:	68f8      	ldr	r0, [r7, #12]
 801266a:	f005 fabb 	bl	8017be4 <USBD_LL_Transmit>
}
 801266e:	bf00      	nop
 8012670:	3718      	adds	r7, #24
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}
	...

08012678 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b084      	sub	sp, #16
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	460b      	mov	r3, r1
 8012682:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801268a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801268c:	68fa      	ldr	r2, [r7, #12]
 801268e:	f248 0330 	movw	r3, #32816	; 0x8030
 8012692:	4413      	add	r3, r2
 8012694:	4a10      	ldr	r2, [pc, #64]	; (80126d8 <MSC_BOT_SendCSW+0x60>)
 8012696:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8012698:	68fa      	ldr	r2, [r7, #12]
 801269a:	f248 033c 	movw	r3, #32828	; 0x803c
 801269e:	4413      	add	r3, r2
 80126a0:	78fa      	ldrb	r2, [r7, #3]
 80126a2:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	2200      	movs	r2, #0
 80126a8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	f248 0230 	movw	r2, #32816	; 0x8030
 80126b0:	441a      	add	r2, r3
 80126b2:	230d      	movs	r3, #13
 80126b4:	2181      	movs	r1, #129	; 0x81
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f005 fa94 	bl	8017be4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	f248 0210 	movw	r2, #32784	; 0x8010
 80126c2:	441a      	add	r2, r3
 80126c4:	231f      	movs	r3, #31
 80126c6:	2101      	movs	r1, #1
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f005 faac 	bl	8017c26 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80126ce:	bf00      	nop
 80126d0:	3710      	adds	r7, #16
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}
 80126d6:	bf00      	nop
 80126d8:	53425355 	.word	0x53425355

080126dc <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80126ea:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 80126ec:	68fa      	ldr	r2, [r7, #12]
 80126ee:	f248 031c 	movw	r3, #32796	; 0x801c
 80126f2:	4413      	add	r3, r2
 80126f4:	781b      	ldrb	r3, [r3, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d10e      	bne.n	8012718 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 80126fa:	68fa      	ldr	r2, [r7, #12]
 80126fc:	f248 0318 	movw	r3, #32792	; 0x8018
 8012700:	4413      	add	r3, r2
 8012702:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8012704:	2b00      	cmp	r3, #0
 8012706:	d007      	beq.n	8012718 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801270c:	2b00      	cmp	r3, #0
 801270e:	d103      	bne.n	8012718 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012710:	2101      	movs	r1, #1
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f005 f9dd 	bl	8017ad2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012718:	2181      	movs	r1, #129	; 0x81
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f005 f9d9 	bl	8017ad2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	7a5b      	ldrb	r3, [r3, #9]
 8012724:	2b02      	cmp	r3, #2
 8012726:	d107      	bne.n	8012738 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012728:	2181      	movs	r1, #129	; 0x81
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f005 f9d1 	bl	8017ad2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012730:	2101      	movs	r1, #1
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f005 f9cd 	bl	8017ad2 <USBD_LL_StallEP>
  }
}
 8012738:	bf00      	nop
 801273a:	3710      	adds	r7, #16
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}

08012740 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b084      	sub	sp, #16
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	460b      	mov	r3, r1
 801274a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012752:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	7a5b      	ldrb	r3, [r3, #9]
 8012758:	2b02      	cmp	r3, #2
 801275a:	d108      	bne.n	801276e <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801275c:	2181      	movs	r1, #129	; 0x81
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f005 f9b7 	bl	8017ad2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012764:	2101      	movs	r1, #1
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f005 f9b3 	bl	8017ad2 <USBD_LL_StallEP>
 801276c:	e00d      	b.n	801278a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801276e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012772:	2b00      	cmp	r3, #0
 8012774:	da08      	bge.n	8012788 <MSC_BOT_CplClrFeature+0x48>
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	7a5b      	ldrb	r3, [r3, #9]
 801277a:	2b01      	cmp	r3, #1
 801277c:	d004      	beq.n	8012788 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801277e:	2101      	movs	r1, #1
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f7ff ff79 	bl	8012678 <MSC_BOT_SendCSW>
 8012786:	e000      	b.n	801278a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8012788:	bf00      	nop
  }
}
 801278a:	3710      	adds	r7, #16
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}

08012790 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b086      	sub	sp, #24
 8012794:	af00      	add	r7, sp, #0
 8012796:	60f8      	str	r0, [r7, #12]
 8012798:	460b      	mov	r3, r1
 801279a:	607a      	str	r2, [r7, #4]
 801279c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80127a4:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	781b      	ldrb	r3, [r3, #0]
 80127aa:	2b25      	cmp	r3, #37	; 0x25
 80127ac:	d06e      	beq.n	801288c <SCSI_ProcessCmd+0xfc>
 80127ae:	2b25      	cmp	r3, #37	; 0x25
 80127b0:	dc11      	bgt.n	80127d6 <SCSI_ProcessCmd+0x46>
 80127b2:	2b1a      	cmp	r3, #26
 80127b4:	d04f      	beq.n	8012856 <SCSI_ProcessCmd+0xc6>
 80127b6:	2b1a      	cmp	r3, #26
 80127b8:	dc06      	bgt.n	80127c8 <SCSI_ProcessCmd+0x38>
 80127ba:	2b03      	cmp	r3, #3
 80127bc:	d027      	beq.n	801280e <SCSI_ProcessCmd+0x7e>
 80127be:	2b12      	cmp	r3, #18
 80127c0:	d02e      	beq.n	8012820 <SCSI_ProcessCmd+0x90>
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d01a      	beq.n	80127fc <SCSI_ProcessCmd+0x6c>
 80127c6:	e0a0      	b.n	801290a <SCSI_ProcessCmd+0x17a>
 80127c8:	2b1e      	cmp	r3, #30
 80127ca:	d03b      	beq.n	8012844 <SCSI_ProcessCmd+0xb4>
 80127cc:	2b23      	cmp	r3, #35	; 0x23
 80127ce:	d054      	beq.n	801287a <SCSI_ProcessCmd+0xea>
 80127d0:	2b1b      	cmp	r3, #27
 80127d2:	d02e      	beq.n	8012832 <SCSI_ProcessCmd+0xa2>
 80127d4:	e099      	b.n	801290a <SCSI_ProcessCmd+0x17a>
 80127d6:	2b5a      	cmp	r3, #90	; 0x5a
 80127d8:	d046      	beq.n	8012868 <SCSI_ProcessCmd+0xd8>
 80127da:	2b5a      	cmp	r3, #90	; 0x5a
 80127dc:	dc07      	bgt.n	80127ee <SCSI_ProcessCmd+0x5e>
 80127de:	2b2a      	cmp	r3, #42	; 0x2a
 80127e0:	d078      	beq.n	80128d4 <SCSI_ProcessCmd+0x144>
 80127e2:	2b2f      	cmp	r3, #47	; 0x2f
 80127e4:	f000 8088 	beq.w	80128f8 <SCSI_ProcessCmd+0x168>
 80127e8:	2b28      	cmp	r3, #40	; 0x28
 80127ea:	d061      	beq.n	80128b0 <SCSI_ProcessCmd+0x120>
 80127ec:	e08d      	b.n	801290a <SCSI_ProcessCmd+0x17a>
 80127ee:	2ba8      	cmp	r3, #168	; 0xa8
 80127f0:	d067      	beq.n	80128c2 <SCSI_ProcessCmd+0x132>
 80127f2:	2baa      	cmp	r3, #170	; 0xaa
 80127f4:	d077      	beq.n	80128e6 <SCSI_ProcessCmd+0x156>
 80127f6:	2b9e      	cmp	r3, #158	; 0x9e
 80127f8:	d051      	beq.n	801289e <SCSI_ProcessCmd+0x10e>
 80127fa:	e086      	b.n	801290a <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80127fc:	7afb      	ldrb	r3, [r7, #11]
 80127fe:	687a      	ldr	r2, [r7, #4]
 8012800:	4619      	mov	r1, r3
 8012802:	68f8      	ldr	r0, [r7, #12]
 8012804:	f000 f893 	bl	801292e <SCSI_TestUnitReady>
 8012808:	4603      	mov	r3, r0
 801280a:	75fb      	strb	r3, [r7, #23]
    break;
 801280c:	e089      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 801280e:	7afb      	ldrb	r3, [r7, #11]
 8012810:	687a      	ldr	r2, [r7, #4]
 8012812:	4619      	mov	r1, r3
 8012814:	68f8      	ldr	r0, [r7, #12]
 8012816:	f000 fb47 	bl	8012ea8 <SCSI_RequestSense>
 801281a:	4603      	mov	r3, r0
 801281c:	75fb      	strb	r3, [r7, #23]
    break;
 801281e:	e080      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8012820:	7afb      	ldrb	r3, [r7, #11]
 8012822:	687a      	ldr	r2, [r7, #4]
 8012824:	4619      	mov	r1, r3
 8012826:	68f8      	ldr	r0, [r7, #12]
 8012828:	f000 f8d2 	bl	80129d0 <SCSI_Inquiry>
 801282c:	4603      	mov	r3, r0
 801282e:	75fb      	strb	r3, [r7, #23]
    break;
 8012830:	e077      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8012832:	7afb      	ldrb	r3, [r7, #11]
 8012834:	687a      	ldr	r2, [r7, #4]
 8012836:	4619      	mov	r1, r3
 8012838:	68f8      	ldr	r0, [r7, #12]
 801283a:	f000 fc27 	bl	801308c <SCSI_StartStopUnit>
 801283e:	4603      	mov	r3, r0
 8012840:	75fb      	strb	r3, [r7, #23]
    break;
 8012842:	e06e      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8012844:	7afb      	ldrb	r3, [r7, #11]
 8012846:	687a      	ldr	r2, [r7, #4]
 8012848:	4619      	mov	r1, r3
 801284a:	68f8      	ldr	r0, [r7, #12]
 801284c:	f000 fc71 	bl	8013132 <SCSI_AllowPreventRemovable>
 8012850:	4603      	mov	r3, r0
 8012852:	75fb      	strb	r3, [r7, #23]
    break;
 8012854:	e065      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8012856:	7afb      	ldrb	r3, [r7, #11]
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	4619      	mov	r1, r3
 801285c:	68f8      	ldr	r0, [r7, #12]
 801285e:	f000 fad7 	bl	8012e10 <SCSI_ModeSense6>
 8012862:	4603      	mov	r3, r0
 8012864:	75fb      	strb	r3, [r7, #23]
    break;
 8012866:	e05c      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8012868:	7afb      	ldrb	r3, [r7, #11]
 801286a:	687a      	ldr	r2, [r7, #4]
 801286c:	4619      	mov	r1, r3
 801286e:	68f8      	ldr	r0, [r7, #12]
 8012870:	f000 faf4 	bl	8012e5c <SCSI_ModeSense10>
 8012874:	4603      	mov	r3, r0
 8012876:	75fb      	strb	r3, [r7, #23]
    break;
 8012878:	e053      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801287a:	7afb      	ldrb	r3, [r7, #11]
 801287c:	687a      	ldr	r2, [r7, #4]
 801287e:	4619      	mov	r1, r3
 8012880:	68f8      	ldr	r0, [r7, #12]
 8012882:	f000 fa56 	bl	8012d32 <SCSI_ReadFormatCapacity>
 8012886:	4603      	mov	r3, r0
 8012888:	75fb      	strb	r3, [r7, #23]
    break;
 801288a:	e04a      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801288c:	7afb      	ldrb	r3, [r7, #11]
 801288e:	687a      	ldr	r2, [r7, #4]
 8012890:	4619      	mov	r1, r3
 8012892:	68f8      	ldr	r0, [r7, #12]
 8012894:	f000 f910 	bl	8012ab8 <SCSI_ReadCapacity10>
 8012898:	4603      	mov	r3, r0
 801289a:	75fb      	strb	r3, [r7, #23]
    break;
 801289c:	e041      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801289e:	7afb      	ldrb	r3, [r7, #11]
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	4619      	mov	r1, r3
 80128a4:	68f8      	ldr	r0, [r7, #12]
 80128a6:	f000 f98b 	bl	8012bc0 <SCSI_ReadCapacity16>
 80128aa:	4603      	mov	r3, r0
 80128ac:	75fb      	strb	r3, [r7, #23]
    break;
 80128ae:	e038      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 80128b0:	7afb      	ldrb	r3, [r7, #11]
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	4619      	mov	r1, r3
 80128b6:	68f8      	ldr	r0, [r7, #12]
 80128b8:	f000 fc62 	bl	8013180 <SCSI_Read10>
 80128bc:	4603      	mov	r3, r0
 80128be:	75fb      	strb	r3, [r7, #23]
    break;
 80128c0:	e02f      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 80128c2:	7afb      	ldrb	r3, [r7, #11]
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	4619      	mov	r1, r3
 80128c8:	68f8      	ldr	r0, [r7, #12]
 80128ca:	f000 fd0b 	bl	80132e4 <SCSI_Read12>
 80128ce:	4603      	mov	r3, r0
 80128d0:	75fb      	strb	r3, [r7, #23]
    break;
 80128d2:	e026      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 80128d4:	7afb      	ldrb	r3, [r7, #11]
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	4619      	mov	r1, r3
 80128da:	68f8      	ldr	r0, [r7, #12]
 80128dc:	f000 fdbe 	bl	801345c <SCSI_Write10>
 80128e0:	4603      	mov	r3, r0
 80128e2:	75fb      	strb	r3, [r7, #23]
    break;
 80128e4:	e01d      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 80128e6:	7afb      	ldrb	r3, [r7, #11]
 80128e8:	687a      	ldr	r2, [r7, #4]
 80128ea:	4619      	mov	r1, r3
 80128ec:	68f8      	ldr	r0, [r7, #12]
 80128ee:	f000 fe8d 	bl	801360c <SCSI_Write12>
 80128f2:	4603      	mov	r3, r0
 80128f4:	75fb      	strb	r3, [r7, #23]
    break;
 80128f6:	e014      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 80128f8:	7afb      	ldrb	r3, [r7, #11]
 80128fa:	687a      	ldr	r2, [r7, #4]
 80128fc:	4619      	mov	r1, r3
 80128fe:	68f8      	ldr	r0, [r7, #12]
 8012900:	f000 ff6c 	bl	80137dc <SCSI_Verify10>
 8012904:	4603      	mov	r3, r0
 8012906:	75fb      	strb	r3, [r7, #23]
    break;
 8012908:	e00b      	b.n	8012922 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801290a:	7af9      	ldrb	r1, [r7, #11]
 801290c:	2320      	movs	r3, #32
 801290e:	2205      	movs	r2, #5
 8012910:	68f8      	ldr	r0, [r7, #12]
 8012912:	f000 fb61 	bl	8012fd8 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	2202      	movs	r2, #2
 801291a:	725a      	strb	r2, [r3, #9]
    ret = -1;
 801291c:	23ff      	movs	r3, #255	; 0xff
 801291e:	75fb      	strb	r3, [r7, #23]
    break;
 8012920:	bf00      	nop
  }

  return ret;
 8012922:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012926:	4618      	mov	r0, r3
 8012928:	3718      	adds	r7, #24
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}

0801292e <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801292e:	b580      	push	{r7, lr}
 8012930:	b086      	sub	sp, #24
 8012932:	af00      	add	r7, sp, #0
 8012934:	60f8      	str	r0, [r7, #12]
 8012936:	460b      	mov	r3, r1
 8012938:	607a      	str	r2, [r7, #4]
 801293a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012942:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8012944:	697a      	ldr	r2, [r7, #20]
 8012946:	f248 0318 	movw	r3, #32792	; 0x8018
 801294a:	4413      	add	r3, r2
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d00c      	beq.n	801296c <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012952:	697a      	ldr	r2, [r7, #20]
 8012954:	f248 031d 	movw	r3, #32797	; 0x801d
 8012958:	4413      	add	r3, r2
 801295a:	7819      	ldrb	r1, [r3, #0]
 801295c:	2320      	movs	r3, #32
 801295e:	2205      	movs	r2, #5
 8012960:	68f8      	ldr	r0, [r7, #12]
 8012962:	f000 fb39 	bl	8012fd8 <SCSI_SenseCode>

    return -1;
 8012966:	f04f 33ff 	mov.w	r3, #4294967295
 801296a:	e02c      	b.n	80129c6 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801296c:	697a      	ldr	r2, [r7, #20]
 801296e:	f248 0362 	movw	r3, #32866	; 0x8062
 8012972:	4413      	add	r3, r2
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	2b02      	cmp	r3, #2
 8012978:	d10b      	bne.n	8012992 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801297a:	7af9      	ldrb	r1, [r7, #11]
 801297c:	233a      	movs	r3, #58	; 0x3a
 801297e:	2202      	movs	r2, #2
 8012980:	68f8      	ldr	r0, [r7, #12]
 8012982:	f000 fb29 	bl	8012fd8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	2205      	movs	r2, #5
 801298a:	721a      	strb	r2, [r3, #8]
    return -1;
 801298c:	f04f 33ff 	mov.w	r3, #4294967295
 8012990:	e019      	b.n	80129c6 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012998:	689b      	ldr	r3, [r3, #8]
 801299a:	7afa      	ldrb	r2, [r7, #11]
 801299c:	4610      	mov	r0, r2
 801299e:	4798      	blx	r3
 80129a0:	4603      	mov	r3, r0
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d00b      	beq.n	80129be <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80129a6:	7af9      	ldrb	r1, [r7, #11]
 80129a8:	233a      	movs	r3, #58	; 0x3a
 80129aa:	2202      	movs	r2, #2
 80129ac:	68f8      	ldr	r0, [r7, #12]
 80129ae:	f000 fb13 	bl	8012fd8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	2205      	movs	r2, #5
 80129b6:	721a      	strb	r2, [r3, #8]

    return -1;
 80129b8:	f04f 33ff 	mov.w	r3, #4294967295
 80129bc:	e003      	b.n	80129c6 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80129be:	697b      	ldr	r3, [r7, #20]
 80129c0:	2200      	movs	r2, #0
 80129c2:	60da      	str	r2, [r3, #12]

  return 0;
 80129c4:	2300      	movs	r3, #0
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3718      	adds	r7, #24
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
	...

080129d0 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b088      	sub	sp, #32
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	60f8      	str	r0, [r7, #12]
 80129d8:	460b      	mov	r3, r1
 80129da:	607a      	str	r2, [r7, #4]
 80129dc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80129e4:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80129e6:	69ba      	ldr	r2, [r7, #24]
 80129e8:	f248 0318 	movw	r3, #32792	; 0x8018
 80129ec:	4413      	add	r3, r2
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d10c      	bne.n	8012a0e <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80129f4:	69ba      	ldr	r2, [r7, #24]
 80129f6:	f248 031d 	movw	r3, #32797	; 0x801d
 80129fa:	4413      	add	r3, r2
 80129fc:	7819      	ldrb	r1, [r3, #0]
 80129fe:	2320      	movs	r3, #32
 8012a00:	2205      	movs	r2, #5
 8012a02:	68f8      	ldr	r0, [r7, #12]
 8012a04:	f000 fae8 	bl	8012fd8 <SCSI_SenseCode>
    return -1;
 8012a08:	f04f 33ff 	mov.w	r3, #4294967295
 8012a0c:	e04c      	b.n	8012aa8 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	3301      	adds	r3, #1
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	f003 0301 	and.w	r3, r3, #1
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d022      	beq.n	8012a62 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	3302      	adds	r3, #2
 8012a20:	781b      	ldrb	r3, [r3, #0]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d105      	bne.n	8012a32 <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8012a26:	2206      	movs	r2, #6
 8012a28:	4921      	ldr	r1, [pc, #132]	; (8012ab0 <SCSI_Inquiry+0xe0>)
 8012a2a:	69b8      	ldr	r0, [r7, #24]
 8012a2c:	f001 f862 	bl	8013af4 <SCSI_UpdateBotData>
 8012a30:	e039      	b.n	8012aa6 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	3302      	adds	r3, #2
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	2b80      	cmp	r3, #128	; 0x80
 8012a3a:	d105      	bne.n	8012a48 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8012a3c:	2208      	movs	r2, #8
 8012a3e:	491d      	ldr	r1, [pc, #116]	; (8012ab4 <SCSI_Inquiry+0xe4>)
 8012a40:	69b8      	ldr	r0, [r7, #24]
 8012a42:	f001 f857 	bl	8013af4 <SCSI_UpdateBotData>
 8012a46:	e02e      	b.n	8012aa6 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8012a48:	69ba      	ldr	r2, [r7, #24]
 8012a4a:	f248 031d 	movw	r3, #32797	; 0x801d
 8012a4e:	4413      	add	r3, r2
 8012a50:	7819      	ldrb	r1, [r3, #0]
 8012a52:	2324      	movs	r3, #36	; 0x24
 8012a54:	2205      	movs	r2, #5
 8012a56:	68f8      	ldr	r0, [r7, #12]
 8012a58:	f000 fabe 	bl	8012fd8 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8012a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a60:	e022      	b.n	8012aa8 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012a68:	69d9      	ldr	r1, [r3, #28]
 8012a6a:	7afa      	ldrb	r2, [r7, #11]
 8012a6c:	4613      	mov	r3, r2
 8012a6e:	00db      	lsls	r3, r3, #3
 8012a70:	4413      	add	r3, r2
 8012a72:	009b      	lsls	r3, r3, #2
 8012a74:	440b      	add	r3, r1
 8012a76:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	3304      	adds	r3, #4
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	3305      	adds	r3, #5
 8012a82:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	3304      	adds	r3, #4
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	8bfa      	ldrh	r2, [r7, #30]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d303      	bcc.n	8012a9a <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	3304      	adds	r3, #4
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8012a9a:	8bfb      	ldrh	r3, [r7, #30]
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	6979      	ldr	r1, [r7, #20]
 8012aa0:	69b8      	ldr	r0, [r7, #24]
 8012aa2:	f001 f827 	bl	8013af4 <SCSI_UpdateBotData>
  }

  return 0;
 8012aa6:	2300      	movs	r3, #0
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3720      	adds	r7, #32
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	240000c0 	.word	0x240000c0
 8012ab4:	240000c8 	.word	0x240000c8

08012ab8 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012ab8:	b590      	push	{r4, r7, lr}
 8012aba:	b087      	sub	sp, #28
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	60f8      	str	r0, [r7, #12]
 8012ac0:	460b      	mov	r3, r1
 8012ac2:	607a      	str	r2, [r7, #4]
 8012ac4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012acc:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012ad4:	685c      	ldr	r4, [r3, #4]
 8012ad6:	697a      	ldr	r2, [r7, #20]
 8012ad8:	f248 0368 	movw	r3, #32872	; 0x8068
 8012adc:	4413      	add	r3, r2
 8012ade:	6979      	ldr	r1, [r7, #20]
 8012ae0:	f248 0264 	movw	r2, #32868	; 0x8064
 8012ae4:	440a      	add	r2, r1
 8012ae6:	7af8      	ldrb	r0, [r7, #11]
 8012ae8:	4619      	mov	r1, r3
 8012aea:	47a0      	blx	r4
 8012aec:	4603      	mov	r3, r0
 8012aee:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012af0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d106      	bne.n	8012b06 <SCSI_ReadCapacity10+0x4e>
 8012af8:	697a      	ldr	r2, [r7, #20]
 8012afa:	f248 0362 	movw	r3, #32866	; 0x8062
 8012afe:	4413      	add	r3, r2
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	2b02      	cmp	r3, #2
 8012b04:	d108      	bne.n	8012b18 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012b06:	7af9      	ldrb	r1, [r7, #11]
 8012b08:	233a      	movs	r3, #58	; 0x3a
 8012b0a:	2202      	movs	r2, #2
 8012b0c:	68f8      	ldr	r0, [r7, #12]
 8012b0e:	f000 fa63 	bl	8012fd8 <SCSI_SenseCode>
    return -1;
 8012b12:	f04f 33ff 	mov.w	r3, #4294967295
 8012b16:	e04f      	b.n	8012bb8 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012b18:	697a      	ldr	r2, [r7, #20]
 8012b1a:	f248 0368 	movw	r3, #32872	; 0x8068
 8012b1e:	4413      	add	r3, r2
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	3b01      	subs	r3, #1
 8012b24:	0e1b      	lsrs	r3, r3, #24
 8012b26:	b2da      	uxtb	r2, r3
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012b2c:	697a      	ldr	r2, [r7, #20]
 8012b2e:	f248 0368 	movw	r3, #32872	; 0x8068
 8012b32:	4413      	add	r3, r2
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	3b01      	subs	r3, #1
 8012b38:	0c1b      	lsrs	r3, r3, #16
 8012b3a:	b2da      	uxtb	r2, r3
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012b40:	697a      	ldr	r2, [r7, #20]
 8012b42:	f248 0368 	movw	r3, #32872	; 0x8068
 8012b46:	4413      	add	r3, r2
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	3b01      	subs	r3, #1
 8012b4c:	0a1b      	lsrs	r3, r3, #8
 8012b4e:	b2da      	uxtb	r2, r3
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012b54:	697a      	ldr	r2, [r7, #20]
 8012b56:	f248 0368 	movw	r3, #32872	; 0x8068
 8012b5a:	4413      	add	r3, r2
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	b2db      	uxtb	r3, r3
 8012b60:	3b01      	subs	r3, #1
 8012b62:	b2da      	uxtb	r2, r3
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012b68:	697a      	ldr	r2, [r7, #20]
 8012b6a:	f248 0364 	movw	r3, #32868	; 0x8064
 8012b6e:	4413      	add	r3, r2
 8012b70:	881b      	ldrh	r3, [r3, #0]
 8012b72:	161b      	asrs	r3, r3, #24
 8012b74:	b2da      	uxtb	r2, r3
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012b7a:	697a      	ldr	r2, [r7, #20]
 8012b7c:	f248 0364 	movw	r3, #32868	; 0x8064
 8012b80:	4413      	add	r3, r2
 8012b82:	881b      	ldrh	r3, [r3, #0]
 8012b84:	141b      	asrs	r3, r3, #16
 8012b86:	b2da      	uxtb	r2, r3
 8012b88:	697b      	ldr	r3, [r7, #20]
 8012b8a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012b8c:	697a      	ldr	r2, [r7, #20]
 8012b8e:	f248 0364 	movw	r3, #32868	; 0x8064
 8012b92:	4413      	add	r3, r2
 8012b94:	881b      	ldrh	r3, [r3, #0]
 8012b96:	0a1b      	lsrs	r3, r3, #8
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	b2da      	uxtb	r2, r3
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8012ba0:	697a      	ldr	r2, [r7, #20]
 8012ba2:	f248 0364 	movw	r3, #32868	; 0x8064
 8012ba6:	4413      	add	r3, r2
 8012ba8:	881b      	ldrh	r3, [r3, #0]
 8012baa:	b2da      	uxtb	r2, r3
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8012bb0:	697b      	ldr	r3, [r7, #20]
 8012bb2:	2208      	movs	r2, #8
 8012bb4:	60da      	str	r2, [r3, #12]

  return 0;
 8012bb6:	2300      	movs	r3, #0

}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	371c      	adds	r7, #28
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd90      	pop	{r4, r7, pc}

08012bc0 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012bc0:	b590      	push	{r4, r7, lr}
 8012bc2:	b089      	sub	sp, #36	; 0x24
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60f8      	str	r0, [r7, #12]
 8012bc8:	460b      	mov	r3, r1
 8012bca:	607a      	str	r2, [r7, #4]
 8012bcc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012bd4:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012bdc:	685c      	ldr	r4, [r3, #4]
 8012bde:	69ba      	ldr	r2, [r7, #24]
 8012be0:	f248 0368 	movw	r3, #32872	; 0x8068
 8012be4:	4413      	add	r3, r2
 8012be6:	69b9      	ldr	r1, [r7, #24]
 8012be8:	f248 0264 	movw	r2, #32868	; 0x8064
 8012bec:	440a      	add	r2, r1
 8012bee:	7af8      	ldrb	r0, [r7, #11]
 8012bf0:	4619      	mov	r1, r3
 8012bf2:	47a0      	blx	r4
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012bf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d106      	bne.n	8012c0e <SCSI_ReadCapacity16+0x4e>
 8012c00:	69ba      	ldr	r2, [r7, #24]
 8012c02:	f248 0362 	movw	r3, #32866	; 0x8062
 8012c06:	4413      	add	r3, r2
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	2b02      	cmp	r3, #2
 8012c0c:	d108      	bne.n	8012c20 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012c0e:	7af9      	ldrb	r1, [r7, #11]
 8012c10:	233a      	movs	r3, #58	; 0x3a
 8012c12:	2202      	movs	r2, #2
 8012c14:	68f8      	ldr	r0, [r7, #12]
 8012c16:	f000 f9df 	bl	8012fd8 <SCSI_SenseCode>
    return -1;
 8012c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8012c1e:	e084      	b.n	8012d2a <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	330a      	adds	r3, #10
 8012c24:	781b      	ldrb	r3, [r3, #0]
 8012c26:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	330b      	adds	r3, #11
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012c30:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	330c      	adds	r3, #12
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012c3a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8012c3c:	687a      	ldr	r2, [r7, #4]
 8012c3e:	320d      	adds	r2, #13
 8012c40:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012c42:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012c44:	69bb      	ldr	r3, [r7, #24]
 8012c46:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012c48:	2300      	movs	r3, #0
 8012c4a:	77fb      	strb	r3, [r7, #31]
 8012c4c:	e007      	b.n	8012c5e <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8012c4e:	7ffb      	ldrb	r3, [r7, #31]
 8012c50:	69ba      	ldr	r2, [r7, #24]
 8012c52:	4413      	add	r3, r2
 8012c54:	2200      	movs	r2, #0
 8012c56:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012c58:	7ffb      	ldrb	r3, [r7, #31]
 8012c5a:	3301      	adds	r3, #1
 8012c5c:	77fb      	strb	r3, [r7, #31]
 8012c5e:	7ffa      	ldrb	r2, [r7, #31]
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	68db      	ldr	r3, [r3, #12]
 8012c64:	429a      	cmp	r2, r3
 8012c66:	d3f2      	bcc.n	8012c4e <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012c68:	69ba      	ldr	r2, [r7, #24]
 8012c6a:	f248 0368 	movw	r3, #32872	; 0x8068
 8012c6e:	4413      	add	r3, r2
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	3b01      	subs	r3, #1
 8012c74:	0e1b      	lsrs	r3, r3, #24
 8012c76:	b2da      	uxtb	r2, r3
 8012c78:	69bb      	ldr	r3, [r7, #24]
 8012c7a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012c7c:	69ba      	ldr	r2, [r7, #24]
 8012c7e:	f248 0368 	movw	r3, #32872	; 0x8068
 8012c82:	4413      	add	r3, r2
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	3b01      	subs	r3, #1
 8012c88:	0c1b      	lsrs	r3, r3, #16
 8012c8a:	b2da      	uxtb	r2, r3
 8012c8c:	69bb      	ldr	r3, [r7, #24]
 8012c8e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012c90:	69ba      	ldr	r2, [r7, #24]
 8012c92:	f248 0368 	movw	r3, #32872	; 0x8068
 8012c96:	4413      	add	r3, r2
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	3b01      	subs	r3, #1
 8012c9c:	0a1b      	lsrs	r3, r3, #8
 8012c9e:	b2da      	uxtb	r2, r3
 8012ca0:	69bb      	ldr	r3, [r7, #24]
 8012ca2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012ca4:	69ba      	ldr	r2, [r7, #24]
 8012ca6:	f248 0368 	movw	r3, #32872	; 0x8068
 8012caa:	4413      	add	r3, r2
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	b2db      	uxtb	r3, r3
 8012cb0:	3b01      	subs	r3, #1
 8012cb2:	b2da      	uxtb	r2, r3
 8012cb4:	69bb      	ldr	r3, [r7, #24]
 8012cb6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012cb8:	69ba      	ldr	r2, [r7, #24]
 8012cba:	f248 0364 	movw	r3, #32868	; 0x8064
 8012cbe:	4413      	add	r3, r2
 8012cc0:	881b      	ldrh	r3, [r3, #0]
 8012cc2:	161b      	asrs	r3, r3, #24
 8012cc4:	b2da      	uxtb	r2, r3
 8012cc6:	69bb      	ldr	r3, [r7, #24]
 8012cc8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012cca:	69ba      	ldr	r2, [r7, #24]
 8012ccc:	f248 0364 	movw	r3, #32868	; 0x8064
 8012cd0:	4413      	add	r3, r2
 8012cd2:	881b      	ldrh	r3, [r3, #0]
 8012cd4:	141b      	asrs	r3, r3, #16
 8012cd6:	b2da      	uxtb	r2, r3
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012cdc:	69ba      	ldr	r2, [r7, #24]
 8012cde:	f248 0364 	movw	r3, #32868	; 0x8064
 8012ce2:	4413      	add	r3, r2
 8012ce4:	881b      	ldrh	r3, [r3, #0]
 8012ce6:	0a1b      	lsrs	r3, r3, #8
 8012ce8:	b29b      	uxth	r3, r3
 8012cea:	b2da      	uxtb	r2, r3
 8012cec:	69bb      	ldr	r3, [r7, #24]
 8012cee:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8012cf0:	69ba      	ldr	r2, [r7, #24]
 8012cf2:	f248 0364 	movw	r3, #32868	; 0x8064
 8012cf6:	4413      	add	r3, r2
 8012cf8:	881b      	ldrh	r3, [r3, #0]
 8012cfa:	b2da      	uxtb	r2, r3
 8012cfc:	69bb      	ldr	r3, [r7, #24]
 8012cfe:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	330a      	adds	r3, #10
 8012d04:	781b      	ldrb	r3, [r3, #0]
 8012d06:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	330b      	adds	r3, #11
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012d10:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	330c      	adds	r3, #12
 8012d16:	781b      	ldrb	r3, [r3, #0]
 8012d18:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012d1a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8012d1c:	687a      	ldr	r2, [r7, #4]
 8012d1e:	320d      	adds	r2, #13
 8012d20:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012d22:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012d24:	69bb      	ldr	r3, [r7, #24]
 8012d26:	60da      	str	r2, [r3, #12]

  return 0;
 8012d28:	2300      	movs	r3, #0
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3724      	adds	r7, #36	; 0x24
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd90      	pop	{r4, r7, pc}

08012d32 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012d32:	b580      	push	{r7, lr}
 8012d34:	b088      	sub	sp, #32
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	60f8      	str	r0, [r7, #12]
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	607a      	str	r2, [r7, #4]
 8012d3e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d46:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	f107 0214 	add.w	r2, r7, #20
 8012d54:	f107 0110 	add.w	r1, r7, #16
 8012d58:	7af8      	ldrb	r0, [r7, #11]
 8012d5a:	4798      	blx	r3
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d106      	bne.n	8012d76 <SCSI_ReadFormatCapacity+0x44>
 8012d68:	69ba      	ldr	r2, [r7, #24]
 8012d6a:	f248 0362 	movw	r3, #32866	; 0x8062
 8012d6e:	4413      	add	r3, r2
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	2b02      	cmp	r3, #2
 8012d74:	d108      	bne.n	8012d88 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012d76:	7af9      	ldrb	r1, [r7, #11]
 8012d78:	233a      	movs	r3, #58	; 0x3a
 8012d7a:	2202      	movs	r2, #2
 8012d7c:	68f8      	ldr	r0, [r7, #12]
 8012d7e:	f000 f92b 	bl	8012fd8 <SCSI_SenseCode>
    return -1;
 8012d82:	f04f 33ff 	mov.w	r3, #4294967295
 8012d86:	e03e      	b.n	8012e06 <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 8012d88:	2300      	movs	r3, #0
 8012d8a:	83fb      	strh	r3, [r7, #30]
 8012d8c:	e007      	b.n	8012d9e <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8012d8e:	8bfb      	ldrh	r3, [r7, #30]
 8012d90:	69ba      	ldr	r2, [r7, #24]
 8012d92:	4413      	add	r3, r2
 8012d94:	2200      	movs	r2, #0
 8012d96:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8012d98:	8bfb      	ldrh	r3, [r7, #30]
 8012d9a:	3301      	adds	r3, #1
 8012d9c:	83fb      	strh	r3, [r7, #30]
 8012d9e:	8bfb      	ldrh	r3, [r7, #30]
 8012da0:	2b0b      	cmp	r3, #11
 8012da2:	d9f4      	bls.n	8012d8e <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8012da4:	69bb      	ldr	r3, [r7, #24]
 8012da6:	2208      	movs	r2, #8
 8012da8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8012daa:	693b      	ldr	r3, [r7, #16]
 8012dac:	3b01      	subs	r3, #1
 8012dae:	0e1b      	lsrs	r3, r3, #24
 8012db0:	b2da      	uxtb	r2, r3
 8012db2:	69bb      	ldr	r3, [r7, #24]
 8012db4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8012db6:	693b      	ldr	r3, [r7, #16]
 8012db8:	3b01      	subs	r3, #1
 8012dba:	0c1b      	lsrs	r3, r3, #16
 8012dbc:	b2da      	uxtb	r2, r3
 8012dbe:	69bb      	ldr	r3, [r7, #24]
 8012dc0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	3b01      	subs	r3, #1
 8012dc6:	0a1b      	lsrs	r3, r3, #8
 8012dc8:	b2da      	uxtb	r2, r3
 8012dca:	69bb      	ldr	r3, [r7, #24]
 8012dcc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8012dce:	693b      	ldr	r3, [r7, #16]
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	3b01      	subs	r3, #1
 8012dd4:	b2da      	uxtb	r2, r3
 8012dd6:	69bb      	ldr	r3, [r7, #24]
 8012dd8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8012dda:	69bb      	ldr	r3, [r7, #24]
 8012ddc:	2202      	movs	r2, #2
 8012dde:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8012de0:	8abb      	ldrh	r3, [r7, #20]
 8012de2:	141b      	asrs	r3, r3, #16
 8012de4:	b2da      	uxtb	r2, r3
 8012de6:	69bb      	ldr	r3, [r7, #24]
 8012de8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8012dea:	8abb      	ldrh	r3, [r7, #20]
 8012dec:	0a1b      	lsrs	r3, r3, #8
 8012dee:	b29b      	uxth	r3, r3
 8012df0:	b2da      	uxtb	r2, r3
 8012df2:	69bb      	ldr	r3, [r7, #24]
 8012df4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8012df6:	8abb      	ldrh	r3, [r7, #20]
 8012df8:	b2da      	uxtb	r2, r3
 8012dfa:	69bb      	ldr	r3, [r7, #24]
 8012dfc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8012dfe:	69bb      	ldr	r3, [r7, #24]
 8012e00:	220c      	movs	r2, #12
 8012e02:	60da      	str	r2, [r3, #12]

  return 0;
 8012e04:	2300      	movs	r3, #0
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3720      	adds	r7, #32
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}
	...

08012e10 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b086      	sub	sp, #24
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	60f8      	str	r0, [r7, #12]
 8012e18:	460b      	mov	r3, r1
 8012e1a:	607a      	str	r2, [r7, #4]
 8012e1c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e24:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8012e26:	2317      	movs	r3, #23
 8012e28:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	3304      	adds	r3, #4
 8012e2e:	781b      	ldrb	r3, [r3, #0]
 8012e30:	b29b      	uxth	r3, r3
 8012e32:	8afa      	ldrh	r2, [r7, #22]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d303      	bcc.n	8012e40 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	3304      	adds	r3, #4
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8012e40:	8afb      	ldrh	r3, [r7, #22]
 8012e42:	461a      	mov	r2, r3
 8012e44:	4904      	ldr	r1, [pc, #16]	; (8012e58 <SCSI_ModeSense6+0x48>)
 8012e46:	6938      	ldr	r0, [r7, #16]
 8012e48:	f000 fe54 	bl	8013af4 <SCSI_UpdateBotData>

  return 0;
 8012e4c:	2300      	movs	r3, #0
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3718      	adds	r7, #24
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	240000d0 	.word	0x240000d0

08012e5c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b086      	sub	sp, #24
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	60f8      	str	r0, [r7, #12]
 8012e64:	460b      	mov	r3, r1
 8012e66:	607a      	str	r2, [r7, #4]
 8012e68:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e70:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8012e72:	231b      	movs	r3, #27
 8012e74:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	3308      	adds	r3, #8
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	8afa      	ldrh	r2, [r7, #22]
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d303      	bcc.n	8012e8c <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	3308      	adds	r3, #8
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8012e8c:	8afb      	ldrh	r3, [r7, #22]
 8012e8e:	461a      	mov	r2, r3
 8012e90:	4904      	ldr	r1, [pc, #16]	; (8012ea4 <SCSI_ModeSense10+0x48>)
 8012e92:	6938      	ldr	r0, [r7, #16]
 8012e94:	f000 fe2e 	bl	8013af4 <SCSI_UpdateBotData>

  return 0;
 8012e98:	2300      	movs	r3, #0
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3718      	adds	r7, #24
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	240000e8 	.word	0x240000e8

08012ea8 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b086      	sub	sp, #24
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	60f8      	str	r0, [r7, #12]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	607a      	str	r2, [r7, #4]
 8012eb4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ebc:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8012ebe:	693a      	ldr	r2, [r7, #16]
 8012ec0:	f248 0318 	movw	r3, #32792	; 0x8018
 8012ec4:	4413      	add	r3, r2
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d10c      	bne.n	8012ee6 <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012ecc:	693a      	ldr	r2, [r7, #16]
 8012ece:	f248 031d 	movw	r3, #32797	; 0x801d
 8012ed2:	4413      	add	r3, r2
 8012ed4:	7819      	ldrb	r1, [r3, #0]
 8012ed6:	2320      	movs	r3, #32
 8012ed8:	2205      	movs	r2, #5
 8012eda:	68f8      	ldr	r0, [r7, #12]
 8012edc:	f000 f87c 	bl	8012fd8 <SCSI_SenseCode>
    return -1;
 8012ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ee4:	e074      	b.n	8012fd0 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	75fb      	strb	r3, [r7, #23]
 8012eea:	e007      	b.n	8012efc <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 8012eec:	7dfb      	ldrb	r3, [r7, #23]
 8012eee:	693a      	ldr	r2, [r7, #16]
 8012ef0:	4413      	add	r3, r2
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012ef6:	7dfb      	ldrb	r3, [r7, #23]
 8012ef8:	3301      	adds	r3, #1
 8012efa:	75fb      	strb	r3, [r7, #23]
 8012efc:	7dfb      	ldrb	r3, [r7, #23]
 8012efe:	2b11      	cmp	r3, #17
 8012f00:	d9f4      	bls.n	8012eec <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	2270      	movs	r2, #112	; 0x70
 8012f06:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	220c      	movs	r2, #12
 8012f0c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8012f0e:	693a      	ldr	r2, [r7, #16]
 8012f10:	f248 0360 	movw	r3, #32864	; 0x8060
 8012f14:	4413      	add	r3, r2
 8012f16:	781a      	ldrb	r2, [r3, #0]
 8012f18:	6939      	ldr	r1, [r7, #16]
 8012f1a:	f248 0361 	movw	r3, #32865	; 0x8061
 8012f1e:	440b      	add	r3, r1
 8012f20:	781b      	ldrb	r3, [r3, #0]
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d045      	beq.n	8012fb2 <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8012f26:	693a      	ldr	r2, [r7, #16]
 8012f28:	f248 0360 	movw	r3, #32864	; 0x8060
 8012f2c:	4413      	add	r3, r2
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	4619      	mov	r1, r3
 8012f32:	693a      	ldr	r2, [r7, #16]
 8012f34:	f241 0308 	movw	r3, #4104	; 0x1008
 8012f38:	440b      	add	r3, r1
 8012f3a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8012f42:	693a      	ldr	r2, [r7, #16]
 8012f44:	f248 0360 	movw	r3, #32864	; 0x8060
 8012f48:	4413      	add	r3, r2
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	693a      	ldr	r2, [r7, #16]
 8012f50:	f241 0308 	movw	r3, #4104	; 0x1008
 8012f54:	440b      	add	r3, r1
 8012f56:	00db      	lsls	r3, r3, #3
 8012f58:	4413      	add	r3, r2
 8012f5a:	791a      	ldrb	r2, [r3, #4]
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8012f60:	693a      	ldr	r2, [r7, #16]
 8012f62:	f248 0360 	movw	r3, #32864	; 0x8060
 8012f66:	4413      	add	r3, r2
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	4619      	mov	r1, r3
 8012f6c:	693a      	ldr	r2, [r7, #16]
 8012f6e:	f241 0308 	movw	r3, #4104	; 0x1008
 8012f72:	440b      	add	r3, r1
 8012f74:	00db      	lsls	r3, r3, #3
 8012f76:	4413      	add	r3, r2
 8012f78:	795a      	ldrb	r2, [r3, #5]
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8012f7e:	693a      	ldr	r2, [r7, #16]
 8012f80:	f248 0360 	movw	r3, #32864	; 0x8060
 8012f84:	4413      	add	r3, r2
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	3301      	adds	r3, #1
 8012f8a:	b2d9      	uxtb	r1, r3
 8012f8c:	693a      	ldr	r2, [r7, #16]
 8012f8e:	f248 0360 	movw	r3, #32864	; 0x8060
 8012f92:	4413      	add	r3, r2
 8012f94:	460a      	mov	r2, r1
 8012f96:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8012f98:	693a      	ldr	r2, [r7, #16]
 8012f9a:	f248 0360 	movw	r3, #32864	; 0x8060
 8012f9e:	4413      	add	r3, r2
 8012fa0:	781b      	ldrb	r3, [r3, #0]
 8012fa2:	2b04      	cmp	r3, #4
 8012fa4:	d105      	bne.n	8012fb2 <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 8012fa6:	693a      	ldr	r2, [r7, #16]
 8012fa8:	f248 0360 	movw	r3, #32864	; 0x8060
 8012fac:	4413      	add	r3, r2
 8012fae:	2200      	movs	r2, #0
 8012fb0:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	2212      	movs	r2, #18
 8012fb6:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	3304      	adds	r3, #4
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	2b12      	cmp	r3, #18
 8012fc0:	d805      	bhi.n	8012fce <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	3304      	adds	r3, #4
 8012fc6:	781b      	ldrb	r3, [r3, #0]
 8012fc8:	461a      	mov	r2, r3
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8012fce:	2300      	movs	r3, #0
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3718      	adds	r7, #24
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8012fd8:	b480      	push	{r7}
 8012fda:	b085      	sub	sp, #20
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	4608      	mov	r0, r1
 8012fe2:	4611      	mov	r1, r2
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	70fb      	strb	r3, [r7, #3]
 8012fea:	460b      	mov	r3, r1
 8012fec:	70bb      	strb	r3, [r7, #2]
 8012fee:	4613      	mov	r3, r2
 8012ff0:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ff8:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8012ffa:	68fa      	ldr	r2, [r7, #12]
 8012ffc:	f248 0361 	movw	r3, #32865	; 0x8061
 8013000:	4413      	add	r3, r2
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	4619      	mov	r1, r3
 8013006:	68fa      	ldr	r2, [r7, #12]
 8013008:	f241 0308 	movw	r3, #4104	; 0x1008
 801300c:	440b      	add	r3, r1
 801300e:	78b9      	ldrb	r1, [r7, #2]
 8013010:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8013014:	68fa      	ldr	r2, [r7, #12]
 8013016:	f248 0361 	movw	r3, #32865	; 0x8061
 801301a:	4413      	add	r3, r2
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	4619      	mov	r1, r3
 8013020:	68fa      	ldr	r2, [r7, #12]
 8013022:	f241 0308 	movw	r3, #4104	; 0x1008
 8013026:	440b      	add	r3, r1
 8013028:	00db      	lsls	r3, r3, #3
 801302a:	4413      	add	r3, r2
 801302c:	787a      	ldrb	r2, [r7, #1]
 801302e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8013030:	68fa      	ldr	r2, [r7, #12]
 8013032:	f248 0361 	movw	r3, #32865	; 0x8061
 8013036:	4413      	add	r3, r2
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	4619      	mov	r1, r3
 801303c:	68fa      	ldr	r2, [r7, #12]
 801303e:	f241 0308 	movw	r3, #4104	; 0x1008
 8013042:	440b      	add	r3, r1
 8013044:	00db      	lsls	r3, r3, #3
 8013046:	4413      	add	r3, r2
 8013048:	2200      	movs	r2, #0
 801304a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801304c:	68fa      	ldr	r2, [r7, #12]
 801304e:	f248 0361 	movw	r3, #32865	; 0x8061
 8013052:	4413      	add	r3, r2
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	3301      	adds	r3, #1
 8013058:	b2d9      	uxtb	r1, r3
 801305a:	68fa      	ldr	r2, [r7, #12]
 801305c:	f248 0361 	movw	r3, #32865	; 0x8061
 8013060:	4413      	add	r3, r2
 8013062:	460a      	mov	r2, r1
 8013064:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8013066:	68fa      	ldr	r2, [r7, #12]
 8013068:	f248 0361 	movw	r3, #32865	; 0x8061
 801306c:	4413      	add	r3, r2
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	2b04      	cmp	r3, #4
 8013072:	d105      	bne.n	8013080 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 8013074:	68fa      	ldr	r2, [r7, #12]
 8013076:	f248 0361 	movw	r3, #32865	; 0x8061
 801307a:	4413      	add	r3, r2
 801307c:	2200      	movs	r2, #0
 801307e:	701a      	strb	r2, [r3, #0]
  }
}
 8013080:	bf00      	nop
 8013082:	3714      	adds	r7, #20
 8013084:	46bd      	mov	sp, r7
 8013086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308a:	4770      	bx	lr

0801308c <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b086      	sub	sp, #24
 8013090:	af00      	add	r7, sp, #0
 8013092:	60f8      	str	r0, [r7, #12]
 8013094:	460b      	mov	r3, r1
 8013096:	607a      	str	r2, [r7, #4]
 8013098:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130a0:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80130a2:	697a      	ldr	r2, [r7, #20]
 80130a4:	f248 0362 	movw	r3, #32866	; 0x8062
 80130a8:	4413      	add	r3, r2
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d10f      	bne.n	80130d0 <SCSI_StartStopUnit+0x44>
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	3304      	adds	r3, #4
 80130b4:	781b      	ldrb	r3, [r3, #0]
 80130b6:	f003 0303 	and.w	r3, r3, #3
 80130ba:	2b02      	cmp	r3, #2
 80130bc:	d108      	bne.n	80130d0 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80130be:	7af9      	ldrb	r1, [r7, #11]
 80130c0:	2324      	movs	r3, #36	; 0x24
 80130c2:	2205      	movs	r2, #5
 80130c4:	68f8      	ldr	r0, [r7, #12]
 80130c6:	f7ff ff87 	bl	8012fd8 <SCSI_SenseCode>

    return -1;
 80130ca:	f04f 33ff 	mov.w	r3, #4294967295
 80130ce:	e02c      	b.n	801312a <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	3304      	adds	r3, #4
 80130d4:	781b      	ldrb	r3, [r3, #0]
 80130d6:	f003 0303 	and.w	r3, r3, #3
 80130da:	2b01      	cmp	r3, #1
 80130dc:	d106      	bne.n	80130ec <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80130de:	697a      	ldr	r2, [r7, #20]
 80130e0:	f248 0362 	movw	r3, #32866	; 0x8062
 80130e4:	4413      	add	r3, r2
 80130e6:	2200      	movs	r2, #0
 80130e8:	701a      	strb	r2, [r3, #0]
 80130ea:	e01a      	b.n	8013122 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	3304      	adds	r3, #4
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	f003 0303 	and.w	r3, r3, #3
 80130f6:	2b02      	cmp	r3, #2
 80130f8:	d106      	bne.n	8013108 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80130fa:	697a      	ldr	r2, [r7, #20]
 80130fc:	f248 0362 	movw	r3, #32866	; 0x8062
 8013100:	4413      	add	r3, r2
 8013102:	2202      	movs	r2, #2
 8013104:	701a      	strb	r2, [r3, #0]
 8013106:	e00c      	b.n	8013122 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	3304      	adds	r3, #4
 801310c:	781b      	ldrb	r3, [r3, #0]
 801310e:	f003 0303 	and.w	r3, r3, #3
 8013112:	2b03      	cmp	r3, #3
 8013114:	d105      	bne.n	8013122 <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013116:	697a      	ldr	r2, [r7, #20]
 8013118:	f248 0362 	movw	r3, #32866	; 0x8062
 801311c:	4413      	add	r3, r2
 801311e:	2200      	movs	r2, #0
 8013120:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	2200      	movs	r2, #0
 8013126:	60da      	str	r2, [r3, #12]

  return 0;
 8013128:	2300      	movs	r3, #0
}
 801312a:	4618      	mov	r0, r3
 801312c:	3718      	adds	r7, #24
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}

08013132 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013132:	b480      	push	{r7}
 8013134:	b087      	sub	sp, #28
 8013136:	af00      	add	r7, sp, #0
 8013138:	60f8      	str	r0, [r7, #12]
 801313a:	460b      	mov	r3, r1
 801313c:	607a      	str	r2, [r7, #4]
 801313e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013146:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	3304      	adds	r3, #4
 801314c:	781b      	ldrb	r3, [r3, #0]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d106      	bne.n	8013160 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013152:	697a      	ldr	r2, [r7, #20]
 8013154:	f248 0362 	movw	r3, #32866	; 0x8062
 8013158:	4413      	add	r3, r2
 801315a:	2200      	movs	r2, #0
 801315c:	701a      	strb	r2, [r3, #0]
 801315e:	e005      	b.n	801316c <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8013160:	697a      	ldr	r2, [r7, #20]
 8013162:	f248 0362 	movw	r3, #32866	; 0x8062
 8013166:	4413      	add	r3, r2
 8013168:	2201      	movs	r2, #1
 801316a:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	2200      	movs	r2, #0
 8013170:	60da      	str	r2, [r3, #12]

  return 0;
 8013172:	2300      	movs	r3, #0
}
 8013174:	4618      	mov	r0, r3
 8013176:	371c      	adds	r7, #28
 8013178:	46bd      	mov	sp, r7
 801317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317e:	4770      	bx	lr

08013180 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b086      	sub	sp, #24
 8013184:	af00      	add	r7, sp, #0
 8013186:	60f8      	str	r0, [r7, #12]
 8013188:	460b      	mov	r3, r1
 801318a:	607a      	str	r2, [r7, #4]
 801318c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013194:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	7a1b      	ldrb	r3, [r3, #8]
 801319a:	2b00      	cmp	r3, #0
 801319c:	f040 8094 	bne.w	80132c8 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80131a0:	697a      	ldr	r2, [r7, #20]
 80131a2:	f248 031c 	movw	r3, #32796	; 0x801c
 80131a6:	4413      	add	r3, r2
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	b25b      	sxtb	r3, r3
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	db0c      	blt.n	80131ca <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80131b0:	697a      	ldr	r2, [r7, #20]
 80131b2:	f248 031d 	movw	r3, #32797	; 0x801d
 80131b6:	4413      	add	r3, r2
 80131b8:	7819      	ldrb	r1, [r3, #0]
 80131ba:	2320      	movs	r3, #32
 80131bc:	2205      	movs	r2, #5
 80131be:	68f8      	ldr	r0, [r7, #12]
 80131c0:	f7ff ff0a 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 80131c4:	f04f 33ff 	mov.w	r3, #4294967295
 80131c8:	e088      	b.n	80132dc <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80131ca:	697a      	ldr	r2, [r7, #20]
 80131cc:	f248 0362 	movw	r3, #32866	; 0x8062
 80131d0:	4413      	add	r3, r2
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	2b02      	cmp	r3, #2
 80131d6:	d108      	bne.n	80131ea <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80131d8:	7af9      	ldrb	r1, [r7, #11]
 80131da:	233a      	movs	r3, #58	; 0x3a
 80131dc:	2202      	movs	r2, #2
 80131de:	68f8      	ldr	r0, [r7, #12]
 80131e0:	f7ff fefa 	bl	8012fd8 <SCSI_SenseCode>

      return -1;
 80131e4:	f04f 33ff 	mov.w	r3, #4294967295
 80131e8:	e078      	b.n	80132dc <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80131f0:	689b      	ldr	r3, [r3, #8]
 80131f2:	7afa      	ldrb	r2, [r7, #11]
 80131f4:	4610      	mov	r0, r2
 80131f6:	4798      	blx	r3
 80131f8:	4603      	mov	r3, r0
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d008      	beq.n	8013210 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80131fe:	7af9      	ldrb	r1, [r7, #11]
 8013200:	233a      	movs	r3, #58	; 0x3a
 8013202:	2202      	movs	r2, #2
 8013204:	68f8      	ldr	r0, [r7, #12]
 8013206:	f7ff fee7 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 801320a:	f04f 33ff 	mov.w	r3, #4294967295
 801320e:	e065      	b.n	80132dc <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	3302      	adds	r3, #2
 8013214:	781b      	ldrb	r3, [r3, #0]
 8013216:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	3303      	adds	r3, #3
 801321c:	781b      	ldrb	r3, [r3, #0]
 801321e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013220:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	3304      	adds	r3, #4
 8013226:	781b      	ldrb	r3, [r3, #0]
 8013228:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801322a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801322c:	687a      	ldr	r2, [r7, #4]
 801322e:	3205      	adds	r2, #5
 8013230:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013232:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013234:	6979      	ldr	r1, [r7, #20]
 8013236:	f248 036c 	movw	r3, #32876	; 0x806c
 801323a:	440b      	add	r3, r1
 801323c:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	3307      	adds	r3, #7
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	021b      	lsls	r3, r3, #8
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	3208      	adds	r2, #8
 801324a:	7812      	ldrb	r2, [r2, #0]
 801324c:	431a      	orrs	r2, r3
 801324e:	6979      	ldr	r1, [r7, #20]
 8013250:	f248 0370 	movw	r3, #32880	; 0x8070
 8013254:	440b      	add	r3, r1
 8013256:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013258:	697a      	ldr	r2, [r7, #20]
 801325a:	f248 036c 	movw	r3, #32876	; 0x806c
 801325e:	4413      	add	r3, r2
 8013260:	6818      	ldr	r0, [r3, #0]
 8013262:	697a      	ldr	r2, [r7, #20]
 8013264:	f248 0370 	movw	r3, #32880	; 0x8070
 8013268:	4413      	add	r3, r2
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	7af9      	ldrb	r1, [r7, #11]
 801326e:	4602      	mov	r2, r0
 8013270:	68f8      	ldr	r0, [r7, #12]
 8013272:	f000 faeb 	bl	801384c <SCSI_CheckAddressRange>
 8013276:	4603      	mov	r3, r0
 8013278:	2b00      	cmp	r3, #0
 801327a:	da02      	bge.n	8013282 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801327c:	f04f 33ff 	mov.w	r3, #4294967295
 8013280:	e02c      	b.n	80132dc <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013282:	697a      	ldr	r2, [r7, #20]
 8013284:	f248 0318 	movw	r3, #32792	; 0x8018
 8013288:	4413      	add	r3, r2
 801328a:	681a      	ldr	r2, [r3, #0]
 801328c:	6979      	ldr	r1, [r7, #20]
 801328e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013292:	440b      	add	r3, r1
 8013294:	6819      	ldr	r1, [r3, #0]
 8013296:	6978      	ldr	r0, [r7, #20]
 8013298:	f248 0364 	movw	r3, #32868	; 0x8064
 801329c:	4403      	add	r3, r0
 801329e:	881b      	ldrh	r3, [r3, #0]
 80132a0:	fb03 f301 	mul.w	r3, r3, r1
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d00c      	beq.n	80132c2 <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80132a8:	697a      	ldr	r2, [r7, #20]
 80132aa:	f248 031d 	movw	r3, #32797	; 0x801d
 80132ae:	4413      	add	r3, r2
 80132b0:	7819      	ldrb	r1, [r3, #0]
 80132b2:	2320      	movs	r3, #32
 80132b4:	2205      	movs	r2, #5
 80132b6:	68f8      	ldr	r0, [r7, #12]
 80132b8:	f7ff fe8e 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 80132bc:	f04f 33ff 	mov.w	r3, #4294967295
 80132c0:	e00c      	b.n	80132dc <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	2202      	movs	r2, #2
 80132c6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80132ce:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80132d0:	7afb      	ldrb	r3, [r7, #11]
 80132d2:	4619      	mov	r1, r3
 80132d4:	68f8      	ldr	r0, [r7, #12]
 80132d6:	f000 fadd 	bl	8013894 <SCSI_ProcessRead>
 80132da:	4603      	mov	r3, r0
}
 80132dc:	4618      	mov	r0, r3
 80132de:	3718      	adds	r7, #24
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b086      	sub	sp, #24
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	60f8      	str	r0, [r7, #12]
 80132ec:	460b      	mov	r3, r1
 80132ee:	607a      	str	r2, [r7, #4]
 80132f0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132f8:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	7a1b      	ldrb	r3, [r3, #8]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	f040 809e 	bne.w	8013440 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013304:	697a      	ldr	r2, [r7, #20]
 8013306:	f248 031c 	movw	r3, #32796	; 0x801c
 801330a:	4413      	add	r3, r2
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	b25b      	sxtb	r3, r3
 8013310:	2b00      	cmp	r3, #0
 8013312:	db0c      	blt.n	801332e <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013314:	697a      	ldr	r2, [r7, #20]
 8013316:	f248 031d 	movw	r3, #32797	; 0x801d
 801331a:	4413      	add	r3, r2
 801331c:	7819      	ldrb	r1, [r3, #0]
 801331e:	2320      	movs	r3, #32
 8013320:	2205      	movs	r2, #5
 8013322:	68f8      	ldr	r0, [r7, #12]
 8013324:	f7ff fe58 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 8013328:	f04f 33ff 	mov.w	r3, #4294967295
 801332c:	e092      	b.n	8013454 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801332e:	697a      	ldr	r2, [r7, #20]
 8013330:	f248 0362 	movw	r3, #32866	; 0x8062
 8013334:	4413      	add	r3, r2
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	2b02      	cmp	r3, #2
 801333a:	d108      	bne.n	801334e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801333c:	7af9      	ldrb	r1, [r7, #11]
 801333e:	233a      	movs	r3, #58	; 0x3a
 8013340:	2202      	movs	r2, #2
 8013342:	68f8      	ldr	r0, [r7, #12]
 8013344:	f7ff fe48 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 8013348:	f04f 33ff 	mov.w	r3, #4294967295
 801334c:	e082      	b.n	8013454 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013354:	689b      	ldr	r3, [r3, #8]
 8013356:	7afa      	ldrb	r2, [r7, #11]
 8013358:	4610      	mov	r0, r2
 801335a:	4798      	blx	r3
 801335c:	4603      	mov	r3, r0
 801335e:	2b00      	cmp	r3, #0
 8013360:	d008      	beq.n	8013374 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013362:	7af9      	ldrb	r1, [r7, #11]
 8013364:	233a      	movs	r3, #58	; 0x3a
 8013366:	2202      	movs	r2, #2
 8013368:	68f8      	ldr	r0, [r7, #12]
 801336a:	f7ff fe35 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 801336e:	f04f 33ff 	mov.w	r3, #4294967295
 8013372:	e06f      	b.n	8013454 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	3302      	adds	r3, #2
 8013378:	781b      	ldrb	r3, [r3, #0]
 801337a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	3303      	adds	r3, #3
 8013380:	781b      	ldrb	r3, [r3, #0]
 8013382:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013384:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	3304      	adds	r3, #4
 801338a:	781b      	ldrb	r3, [r3, #0]
 801338c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801338e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013390:	687a      	ldr	r2, [r7, #4]
 8013392:	3205      	adds	r2, #5
 8013394:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013396:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013398:	6979      	ldr	r1, [r7, #20]
 801339a:	f248 036c 	movw	r3, #32876	; 0x806c
 801339e:	440b      	add	r3, r1
 80133a0:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	3306      	adds	r3, #6
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	3307      	adds	r3, #7
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80133b2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	3308      	adds	r3, #8
 80133b8:	781b      	ldrb	r3, [r3, #0]
 80133ba:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80133bc:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	3209      	adds	r2, #9
 80133c2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80133c4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80133c6:	6979      	ldr	r1, [r7, #20]
 80133c8:	f248 0370 	movw	r3, #32880	; 0x8070
 80133cc:	440b      	add	r3, r1
 80133ce:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80133d0:	697a      	ldr	r2, [r7, #20]
 80133d2:	f248 036c 	movw	r3, #32876	; 0x806c
 80133d6:	4413      	add	r3, r2
 80133d8:	6818      	ldr	r0, [r3, #0]
 80133da:	697a      	ldr	r2, [r7, #20]
 80133dc:	f248 0370 	movw	r3, #32880	; 0x8070
 80133e0:	4413      	add	r3, r2
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	7af9      	ldrb	r1, [r7, #11]
 80133e6:	4602      	mov	r2, r0
 80133e8:	68f8      	ldr	r0, [r7, #12]
 80133ea:	f000 fa2f 	bl	801384c <SCSI_CheckAddressRange>
 80133ee:	4603      	mov	r3, r0
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	da02      	bge.n	80133fa <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80133f4:	f04f 33ff 	mov.w	r3, #4294967295
 80133f8:	e02c      	b.n	8013454 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80133fa:	697a      	ldr	r2, [r7, #20]
 80133fc:	f248 0318 	movw	r3, #32792	; 0x8018
 8013400:	4413      	add	r3, r2
 8013402:	681a      	ldr	r2, [r3, #0]
 8013404:	6979      	ldr	r1, [r7, #20]
 8013406:	f248 0370 	movw	r3, #32880	; 0x8070
 801340a:	440b      	add	r3, r1
 801340c:	6819      	ldr	r1, [r3, #0]
 801340e:	6978      	ldr	r0, [r7, #20]
 8013410:	f248 0364 	movw	r3, #32868	; 0x8064
 8013414:	4403      	add	r3, r0
 8013416:	881b      	ldrh	r3, [r3, #0]
 8013418:	fb03 f301 	mul.w	r3, r3, r1
 801341c:	429a      	cmp	r2, r3
 801341e:	d00c      	beq.n	801343a <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013420:	697a      	ldr	r2, [r7, #20]
 8013422:	f248 031d 	movw	r3, #32797	; 0x801d
 8013426:	4413      	add	r3, r2
 8013428:	7819      	ldrb	r1, [r3, #0]
 801342a:	2320      	movs	r3, #32
 801342c:	2205      	movs	r2, #5
 801342e:	68f8      	ldr	r0, [r7, #12]
 8013430:	f7ff fdd2 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 8013434:	f04f 33ff 	mov.w	r3, #4294967295
 8013438:	e00c      	b.n	8013454 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	2202      	movs	r2, #2
 801343e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013446:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8013448:	7afb      	ldrb	r3, [r7, #11]
 801344a:	4619      	mov	r1, r3
 801344c:	68f8      	ldr	r0, [r7, #12]
 801344e:	f000 fa21 	bl	8013894 <SCSI_ProcessRead>
 8013452:	4603      	mov	r3, r0
}
 8013454:	4618      	mov	r0, r3
 8013456:	3718      	adds	r7, #24
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}

0801345c <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b086      	sub	sp, #24
 8013460:	af00      	add	r7, sp, #0
 8013462:	60f8      	str	r0, [r7, #12]
 8013464:	460b      	mov	r3, r1
 8013466:	607a      	str	r2, [r7, #4]
 8013468:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013470:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	7a1b      	ldrb	r3, [r3, #8]
 8013476:	2b00      	cmp	r3, #0
 8013478:	f040 80be 	bne.w	80135f8 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801347c:	697a      	ldr	r2, [r7, #20]
 801347e:	f248 0318 	movw	r3, #32792	; 0x8018
 8013482:	4413      	add	r3, r2
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d10c      	bne.n	80134a4 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801348a:	697a      	ldr	r2, [r7, #20]
 801348c:	f248 031d 	movw	r3, #32797	; 0x801d
 8013490:	4413      	add	r3, r2
 8013492:	7819      	ldrb	r1, [r3, #0]
 8013494:	2320      	movs	r3, #32
 8013496:	2205      	movs	r2, #5
 8013498:	68f8      	ldr	r0, [r7, #12]
 801349a:	f7ff fd9d 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 801349e:	f04f 33ff 	mov.w	r3, #4294967295
 80134a2:	e0af      	b.n	8013604 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80134a4:	697a      	ldr	r2, [r7, #20]
 80134a6:	f248 031c 	movw	r3, #32796	; 0x801c
 80134aa:	4413      	add	r3, r2
 80134ac:	781b      	ldrb	r3, [r3, #0]
 80134ae:	b25b      	sxtb	r3, r3
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	da0c      	bge.n	80134ce <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80134b4:	697a      	ldr	r2, [r7, #20]
 80134b6:	f248 031d 	movw	r3, #32797	; 0x801d
 80134ba:	4413      	add	r3, r2
 80134bc:	7819      	ldrb	r1, [r3, #0]
 80134be:	2320      	movs	r3, #32
 80134c0:	2205      	movs	r2, #5
 80134c2:	68f8      	ldr	r0, [r7, #12]
 80134c4:	f7ff fd88 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 80134c8:	f04f 33ff 	mov.w	r3, #4294967295
 80134cc:	e09a      	b.n	8013604 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80134d4:	689b      	ldr	r3, [r3, #8]
 80134d6:	7afa      	ldrb	r2, [r7, #11]
 80134d8:	4610      	mov	r0, r2
 80134da:	4798      	blx	r3
 80134dc:	4603      	mov	r3, r0
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d008      	beq.n	80134f4 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80134e2:	7af9      	ldrb	r1, [r7, #11]
 80134e4:	233a      	movs	r3, #58	; 0x3a
 80134e6:	2202      	movs	r2, #2
 80134e8:	68f8      	ldr	r0, [r7, #12]
 80134ea:	f7ff fd75 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 80134ee:	f04f 33ff 	mov.w	r3, #4294967295
 80134f2:	e087      	b.n	8013604 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80134fa:	68db      	ldr	r3, [r3, #12]
 80134fc:	7afa      	ldrb	r2, [r7, #11]
 80134fe:	4610      	mov	r0, r2
 8013500:	4798      	blx	r3
 8013502:	4603      	mov	r3, r0
 8013504:	2b00      	cmp	r3, #0
 8013506:	d008      	beq.n	801351a <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013508:	7af9      	ldrb	r1, [r7, #11]
 801350a:	2327      	movs	r3, #39	; 0x27
 801350c:	2202      	movs	r2, #2
 801350e:	68f8      	ldr	r0, [r7, #12]
 8013510:	f7ff fd62 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 8013514:	f04f 33ff 	mov.w	r3, #4294967295
 8013518:	e074      	b.n	8013604 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	3302      	adds	r3, #2
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	3303      	adds	r3, #3
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801352a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	3304      	adds	r3, #4
 8013530:	781b      	ldrb	r3, [r3, #0]
 8013532:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013534:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013536:	687a      	ldr	r2, [r7, #4]
 8013538:	3205      	adds	r2, #5
 801353a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801353c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801353e:	6979      	ldr	r1, [r7, #20]
 8013540:	f248 036c 	movw	r3, #32876	; 0x806c
 8013544:	440b      	add	r3, r1
 8013546:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	3307      	adds	r3, #7
 801354c:	781b      	ldrb	r3, [r3, #0]
 801354e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8013550:	687a      	ldr	r2, [r7, #4]
 8013552:	3208      	adds	r2, #8
 8013554:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013556:	431a      	orrs	r2, r3
 8013558:	6979      	ldr	r1, [r7, #20]
 801355a:	f248 0370 	movw	r3, #32880	; 0x8070
 801355e:	440b      	add	r3, r1
 8013560:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013562:	697a      	ldr	r2, [r7, #20]
 8013564:	f248 036c 	movw	r3, #32876	; 0x806c
 8013568:	4413      	add	r3, r2
 801356a:	6818      	ldr	r0, [r3, #0]
 801356c:	697a      	ldr	r2, [r7, #20]
 801356e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013572:	4413      	add	r3, r2
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	7af9      	ldrb	r1, [r7, #11]
 8013578:	4602      	mov	r2, r0
 801357a:	68f8      	ldr	r0, [r7, #12]
 801357c:	f000 f966 	bl	801384c <SCSI_CheckAddressRange>
 8013580:	4603      	mov	r3, r0
 8013582:	2b00      	cmp	r3, #0
 8013584:	da02      	bge.n	801358c <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013586:	f04f 33ff 	mov.w	r3, #4294967295
 801358a:	e03b      	b.n	8013604 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801358c:	697a      	ldr	r2, [r7, #20]
 801358e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013592:	4413      	add	r3, r2
 8013594:	681a      	ldr	r2, [r3, #0]
 8013596:	6979      	ldr	r1, [r7, #20]
 8013598:	f248 0364 	movw	r3, #32868	; 0x8064
 801359c:	440b      	add	r3, r1
 801359e:	881b      	ldrh	r3, [r3, #0]
 80135a0:	fb03 f302 	mul.w	r3, r3, r2
 80135a4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80135a6:	697a      	ldr	r2, [r7, #20]
 80135a8:	f248 0318 	movw	r3, #32792	; 0x8018
 80135ac:	4413      	add	r3, r2
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	693a      	ldr	r2, [r7, #16]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d00c      	beq.n	80135d0 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80135b6:	697a      	ldr	r2, [r7, #20]
 80135b8:	f248 031d 	movw	r3, #32797	; 0x801d
 80135bc:	4413      	add	r3, r2
 80135be:	7819      	ldrb	r1, [r3, #0]
 80135c0:	2320      	movs	r3, #32
 80135c2:	2205      	movs	r2, #5
 80135c4:	68f8      	ldr	r0, [r7, #12]
 80135c6:	f7ff fd07 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 80135ca:	f04f 33ff 	mov.w	r3, #4294967295
 80135ce:	e019      	b.n	8013604 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80135d6:	bf28      	it	cs
 80135d8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80135dc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	2201      	movs	r2, #1
 80135e2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	f103 0210 	add.w	r2, r3, #16
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	2101      	movs	r1, #1
 80135ee:	68f8      	ldr	r0, [r7, #12]
 80135f0:	f004 fb19 	bl	8017c26 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80135f4:	2300      	movs	r3, #0
 80135f6:	e005      	b.n	8013604 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 80135f8:	7afb      	ldrb	r3, [r7, #11]
 80135fa:	4619      	mov	r1, r3
 80135fc:	68f8      	ldr	r0, [r7, #12]
 80135fe:	f000 f9d7 	bl	80139b0 <SCSI_ProcessWrite>
 8013602:	4603      	mov	r3, r0
}
 8013604:	4618      	mov	r0, r3
 8013606:	3718      	adds	r7, #24
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}

0801360c <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b086      	sub	sp, #24
 8013610:	af00      	add	r7, sp, #0
 8013612:	60f8      	str	r0, [r7, #12]
 8013614:	460b      	mov	r3, r1
 8013616:	607a      	str	r2, [r7, #4]
 8013618:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013620:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013622:	697b      	ldr	r3, [r7, #20]
 8013624:	7a1b      	ldrb	r3, [r3, #8]
 8013626:	2b00      	cmp	r3, #0
 8013628:	f040 80ce 	bne.w	80137c8 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801362c:	697a      	ldr	r2, [r7, #20]
 801362e:	f248 0318 	movw	r3, #32792	; 0x8018
 8013632:	4413      	add	r3, r2
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d10c      	bne.n	8013654 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801363a:	697a      	ldr	r2, [r7, #20]
 801363c:	f248 031d 	movw	r3, #32797	; 0x801d
 8013640:	4413      	add	r3, r2
 8013642:	7819      	ldrb	r1, [r3, #0]
 8013644:	2320      	movs	r3, #32
 8013646:	2205      	movs	r2, #5
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	f7ff fcc5 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 801364e:	f04f 33ff 	mov.w	r3, #4294967295
 8013652:	e0bf      	b.n	80137d4 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013654:	697a      	ldr	r2, [r7, #20]
 8013656:	f248 031c 	movw	r3, #32796	; 0x801c
 801365a:	4413      	add	r3, r2
 801365c:	781b      	ldrb	r3, [r3, #0]
 801365e:	b25b      	sxtb	r3, r3
 8013660:	2b00      	cmp	r3, #0
 8013662:	da0c      	bge.n	801367e <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013664:	697a      	ldr	r2, [r7, #20]
 8013666:	f248 031d 	movw	r3, #32797	; 0x801d
 801366a:	4413      	add	r3, r2
 801366c:	7819      	ldrb	r1, [r3, #0]
 801366e:	2320      	movs	r3, #32
 8013670:	2205      	movs	r2, #5
 8013672:	68f8      	ldr	r0, [r7, #12]
 8013674:	f7ff fcb0 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 8013678:	f04f 33ff 	mov.w	r3, #4294967295
 801367c:	e0aa      	b.n	80137d4 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013684:	689b      	ldr	r3, [r3, #8]
 8013686:	7afa      	ldrb	r2, [r7, #11]
 8013688:	4610      	mov	r0, r2
 801368a:	4798      	blx	r3
 801368c:	4603      	mov	r3, r0
 801368e:	2b00      	cmp	r3, #0
 8013690:	d00b      	beq.n	80136aa <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013692:	7af9      	ldrb	r1, [r7, #11]
 8013694:	233a      	movs	r3, #58	; 0x3a
 8013696:	2202      	movs	r2, #2
 8013698:	68f8      	ldr	r0, [r7, #12]
 801369a:	f7ff fc9d 	bl	8012fd8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	2205      	movs	r2, #5
 80136a2:	721a      	strb	r2, [r3, #8]
      return -1;
 80136a4:	f04f 33ff 	mov.w	r3, #4294967295
 80136a8:	e094      	b.n	80137d4 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	7afa      	ldrb	r2, [r7, #11]
 80136b4:	4610      	mov	r0, r2
 80136b6:	4798      	blx	r3
 80136b8:	4603      	mov	r3, r0
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d00b      	beq.n	80136d6 <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80136be:	7af9      	ldrb	r1, [r7, #11]
 80136c0:	2327      	movs	r3, #39	; 0x27
 80136c2:	2202      	movs	r2, #2
 80136c4:	68f8      	ldr	r0, [r7, #12]
 80136c6:	f7ff fc87 	bl	8012fd8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	2205      	movs	r2, #5
 80136ce:	721a      	strb	r2, [r3, #8]
      return -1;
 80136d0:	f04f 33ff 	mov.w	r3, #4294967295
 80136d4:	e07e      	b.n	80137d4 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	3302      	adds	r3, #2
 80136da:	781b      	ldrb	r3, [r3, #0]
 80136dc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	3303      	adds	r3, #3
 80136e2:	781b      	ldrb	r3, [r3, #0]
 80136e4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80136e6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	3304      	adds	r3, #4
 80136ec:	781b      	ldrb	r3, [r3, #0]
 80136ee:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80136f0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80136f2:	687a      	ldr	r2, [r7, #4]
 80136f4:	3205      	adds	r2, #5
 80136f6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80136f8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80136fa:	6979      	ldr	r1, [r7, #20]
 80136fc:	f248 036c 	movw	r3, #32876	; 0x806c
 8013700:	440b      	add	r3, r1
 8013702:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	3306      	adds	r3, #6
 8013708:	781b      	ldrb	r3, [r3, #0]
 801370a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	3307      	adds	r3, #7
 8013710:	781b      	ldrb	r3, [r3, #0]
 8013712:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013714:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	3308      	adds	r3, #8
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801371e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	3209      	adds	r2, #9
 8013724:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013726:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013728:	6979      	ldr	r1, [r7, #20]
 801372a:	f248 0370 	movw	r3, #32880	; 0x8070
 801372e:	440b      	add	r3, r1
 8013730:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013732:	697a      	ldr	r2, [r7, #20]
 8013734:	f248 036c 	movw	r3, #32876	; 0x806c
 8013738:	4413      	add	r3, r2
 801373a:	6818      	ldr	r0, [r3, #0]
 801373c:	697a      	ldr	r2, [r7, #20]
 801373e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013742:	4413      	add	r3, r2
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	7af9      	ldrb	r1, [r7, #11]
 8013748:	4602      	mov	r2, r0
 801374a:	68f8      	ldr	r0, [r7, #12]
 801374c:	f000 f87e 	bl	801384c <SCSI_CheckAddressRange>
 8013750:	4603      	mov	r3, r0
 8013752:	2b00      	cmp	r3, #0
 8013754:	da02      	bge.n	801375c <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013756:	f04f 33ff 	mov.w	r3, #4294967295
 801375a:	e03b      	b.n	80137d4 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801375c:	697a      	ldr	r2, [r7, #20]
 801375e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013762:	4413      	add	r3, r2
 8013764:	681a      	ldr	r2, [r3, #0]
 8013766:	6979      	ldr	r1, [r7, #20]
 8013768:	f248 0364 	movw	r3, #32868	; 0x8064
 801376c:	440b      	add	r3, r1
 801376e:	881b      	ldrh	r3, [r3, #0]
 8013770:	fb03 f302 	mul.w	r3, r3, r2
 8013774:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013776:	697a      	ldr	r2, [r7, #20]
 8013778:	f248 0318 	movw	r3, #32792	; 0x8018
 801377c:	4413      	add	r3, r2
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	693a      	ldr	r2, [r7, #16]
 8013782:	429a      	cmp	r2, r3
 8013784:	d00c      	beq.n	80137a0 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013786:	697a      	ldr	r2, [r7, #20]
 8013788:	f248 031d 	movw	r3, #32797	; 0x801d
 801378c:	4413      	add	r3, r2
 801378e:	7819      	ldrb	r1, [r3, #0]
 8013790:	2320      	movs	r3, #32
 8013792:	2205      	movs	r2, #5
 8013794:	68f8      	ldr	r0, [r7, #12]
 8013796:	f7ff fc1f 	bl	8012fd8 <SCSI_SenseCode>
      return -1;
 801379a:	f04f 33ff 	mov.w	r3, #4294967295
 801379e:	e019      	b.n	80137d4 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137a6:	bf28      	it	cs
 80137a8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80137ac:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	2201      	movs	r2, #1
 80137b2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	f103 0210 	add.w	r2, r3, #16
 80137ba:	693b      	ldr	r3, [r7, #16]
 80137bc:	2101      	movs	r1, #1
 80137be:	68f8      	ldr	r0, [r7, #12]
 80137c0:	f004 fa31 	bl	8017c26 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80137c4:	2300      	movs	r3, #0
 80137c6:	e005      	b.n	80137d4 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 80137c8:	7afb      	ldrb	r3, [r7, #11]
 80137ca:	4619      	mov	r1, r3
 80137cc:	68f8      	ldr	r0, [r7, #12]
 80137ce:	f000 f8ef 	bl	80139b0 <SCSI_ProcessWrite>
 80137d2:	4603      	mov	r3, r0
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	3718      	adds	r7, #24
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b086      	sub	sp, #24
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	460b      	mov	r3, r1
 80137e6:	607a      	str	r2, [r7, #4]
 80137e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80137f0:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	3301      	adds	r3, #1
 80137f6:	781b      	ldrb	r3, [r3, #0]
 80137f8:	f003 0302 	and.w	r3, r3, #2
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d008      	beq.n	8013812 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8013800:	7af9      	ldrb	r1, [r7, #11]
 8013802:	2324      	movs	r3, #36	; 0x24
 8013804:	2205      	movs	r2, #5
 8013806:	68f8      	ldr	r0, [r7, #12]
 8013808:	f7ff fbe6 	bl	8012fd8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801380c:	f04f 33ff 	mov.w	r3, #4294967295
 8013810:	e018      	b.n	8013844 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8013812:	697a      	ldr	r2, [r7, #20]
 8013814:	f248 036c 	movw	r3, #32876	; 0x806c
 8013818:	4413      	add	r3, r2
 801381a:	6818      	ldr	r0, [r3, #0]
 801381c:	697a      	ldr	r2, [r7, #20]
 801381e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013822:	4413      	add	r3, r2
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	7af9      	ldrb	r1, [r7, #11]
 8013828:	4602      	mov	r2, r0
 801382a:	68f8      	ldr	r0, [r7, #12]
 801382c:	f000 f80e 	bl	801384c <SCSI_CheckAddressRange>
 8013830:	4603      	mov	r3, r0
 8013832:	2b00      	cmp	r3, #0
 8013834:	da02      	bge.n	801383c <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8013836:	f04f 33ff 	mov.w	r3, #4294967295
 801383a:	e003      	b.n	8013844 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	2200      	movs	r2, #0
 8013840:	60da      	str	r2, [r3, #12]

  return 0;
 8013842:	2300      	movs	r3, #0
}
 8013844:	4618      	mov	r0, r3
 8013846:	3718      	adds	r7, #24
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}

0801384c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b086      	sub	sp, #24
 8013850:	af00      	add	r7, sp, #0
 8013852:	60f8      	str	r0, [r7, #12]
 8013854:	607a      	str	r2, [r7, #4]
 8013856:	603b      	str	r3, [r7, #0]
 8013858:	460b      	mov	r3, r1
 801385a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013862:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8013864:	687a      	ldr	r2, [r7, #4]
 8013866:	683b      	ldr	r3, [r7, #0]
 8013868:	441a      	add	r2, r3
 801386a:	6979      	ldr	r1, [r7, #20]
 801386c:	f248 0368 	movw	r3, #32872	; 0x8068
 8013870:	440b      	add	r3, r1
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	429a      	cmp	r2, r3
 8013876:	d908      	bls.n	801388a <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8013878:	7af9      	ldrb	r1, [r7, #11]
 801387a:	2321      	movs	r3, #33	; 0x21
 801387c:	2205      	movs	r2, #5
 801387e:	68f8      	ldr	r0, [r7, #12]
 8013880:	f7ff fbaa 	bl	8012fd8 <SCSI_SenseCode>
    return -1;
 8013884:	f04f 33ff 	mov.w	r3, #4294967295
 8013888:	e000      	b.n	801388c <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 801388a:	2300      	movs	r3, #0
}
 801388c:	4618      	mov	r0, r3
 801388e:	3718      	adds	r7, #24
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}

08013894 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013894:	b5b0      	push	{r4, r5, r7, lr}
 8013896:	b084      	sub	sp, #16
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	460b      	mov	r3, r1
 801389e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138a6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80138a8:	68fa      	ldr	r2, [r7, #12]
 80138aa:	f248 0370 	movw	r3, #32880	; 0x8070
 80138ae:	4413      	add	r3, r2
 80138b0:	681a      	ldr	r2, [r3, #0]
 80138b2:	68f9      	ldr	r1, [r7, #12]
 80138b4:	f248 0364 	movw	r3, #32868	; 0x8064
 80138b8:	440b      	add	r3, r1
 80138ba:	881b      	ldrh	r3, [r3, #0]
 80138bc:	fb03 f302 	mul.w	r3, r3, r2
 80138c0:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80138c8:	bf28      	it	cs
 80138ca:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80138ce:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80138d6:	691c      	ldr	r4, [r3, #16]
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	f103 0110 	add.w	r1, r3, #16
 80138de:	68fa      	ldr	r2, [r7, #12]
 80138e0:	f248 036c 	movw	r3, #32876	; 0x806c
 80138e4:	4413      	add	r3, r2
 80138e6:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80138e8:	68fa      	ldr	r2, [r7, #12]
 80138ea:	f248 0364 	movw	r3, #32868	; 0x8064
 80138ee:	4413      	add	r3, r2
 80138f0:	881b      	ldrh	r3, [r3, #0]
 80138f2:	461a      	mov	r2, r3
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80138fa:	b29b      	uxth	r3, r3
 80138fc:	78f8      	ldrb	r0, [r7, #3]
 80138fe:	462a      	mov	r2, r5
 8013900:	47a0      	blx	r4
 8013902:	4603      	mov	r3, r0
 8013904:	2b00      	cmp	r3, #0
 8013906:	da08      	bge.n	801391a <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8013908:	78f9      	ldrb	r1, [r7, #3]
 801390a:	2311      	movs	r3, #17
 801390c:	2204      	movs	r2, #4
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f7ff fb62 	bl	8012fd8 <SCSI_SenseCode>
    return -1;
 8013914:	f04f 33ff 	mov.w	r3, #4294967295
 8013918:	e046      	b.n	80139a8 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	f103 0210 	add.w	r2, r3, #16
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	2181      	movs	r1, #129	; 0x81
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f004 f95d 	bl	8017be4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801392a:	68fa      	ldr	r2, [r7, #12]
 801392c:	f248 036c 	movw	r3, #32876	; 0x806c
 8013930:	4413      	add	r3, r2
 8013932:	681a      	ldr	r2, [r3, #0]
 8013934:	68f9      	ldr	r1, [r7, #12]
 8013936:	f248 0364 	movw	r3, #32868	; 0x8064
 801393a:	440b      	add	r3, r1
 801393c:	881b      	ldrh	r3, [r3, #0]
 801393e:	4619      	mov	r1, r3
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	fbb3 f3f1 	udiv	r3, r3, r1
 8013946:	441a      	add	r2, r3
 8013948:	68f9      	ldr	r1, [r7, #12]
 801394a:	f248 036c 	movw	r3, #32876	; 0x806c
 801394e:	440b      	add	r3, r1
 8013950:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013952:	68fa      	ldr	r2, [r7, #12]
 8013954:	f248 0370 	movw	r3, #32880	; 0x8070
 8013958:	4413      	add	r3, r2
 801395a:	681a      	ldr	r2, [r3, #0]
 801395c:	68f9      	ldr	r1, [r7, #12]
 801395e:	f248 0364 	movw	r3, #32868	; 0x8064
 8013962:	440b      	add	r3, r1
 8013964:	881b      	ldrh	r3, [r3, #0]
 8013966:	4619      	mov	r1, r3
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	fbb3 f3f1 	udiv	r3, r3, r1
 801396e:	1ad2      	subs	r2, r2, r3
 8013970:	68f9      	ldr	r1, [r7, #12]
 8013972:	f248 0370 	movw	r3, #32880	; 0x8070
 8013976:	440b      	add	r3, r1
 8013978:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801397a:	68fa      	ldr	r2, [r7, #12]
 801397c:	f248 0338 	movw	r3, #32824	; 0x8038
 8013980:	4413      	add	r3, r2
 8013982:	681a      	ldr	r2, [r3, #0]
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	1ad2      	subs	r2, r2, r3
 8013988:	68f9      	ldr	r1, [r7, #12]
 801398a:	f248 0338 	movw	r3, #32824	; 0x8038
 801398e:	440b      	add	r3, r1
 8013990:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8013992:	68fa      	ldr	r2, [r7, #12]
 8013994:	f248 0370 	movw	r3, #32880	; 0x8070
 8013998:	4413      	add	r3, r2
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d102      	bne.n	80139a6 <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	2203      	movs	r2, #3
 80139a4:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80139a6:	2300      	movs	r3, #0
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3710      	adds	r7, #16
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bdb0      	pop	{r4, r5, r7, pc}

080139b0 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80139b0:	b5b0      	push	{r4, r5, r7, lr}
 80139b2:	b084      	sub	sp, #16
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	460b      	mov	r3, r1
 80139ba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80139c2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80139c4:	68fa      	ldr	r2, [r7, #12]
 80139c6:	f248 0370 	movw	r3, #32880	; 0x8070
 80139ca:	4413      	add	r3, r2
 80139cc:	681a      	ldr	r2, [r3, #0]
 80139ce:	68f9      	ldr	r1, [r7, #12]
 80139d0:	f248 0364 	movw	r3, #32868	; 0x8064
 80139d4:	440b      	add	r3, r1
 80139d6:	881b      	ldrh	r3, [r3, #0]
 80139d8:	fb03 f302 	mul.w	r3, r3, r2
 80139dc:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80139e4:	bf28      	it	cs
 80139e6:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80139ea:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80139f2:	695c      	ldr	r4, [r3, #20]
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	f103 0110 	add.w	r1, r3, #16
 80139fa:	68fa      	ldr	r2, [r7, #12]
 80139fc:	f248 036c 	movw	r3, #32876	; 0x806c
 8013a00:	4413      	add	r3, r2
 8013a02:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8013a04:	68fa      	ldr	r2, [r7, #12]
 8013a06:	f248 0364 	movw	r3, #32868	; 0x8064
 8013a0a:	4413      	add	r3, r2
 8013a0c:	881b      	ldrh	r3, [r3, #0]
 8013a0e:	461a      	mov	r2, r3
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	78f8      	ldrb	r0, [r7, #3]
 8013a1a:	462a      	mov	r2, r5
 8013a1c:	47a0      	blx	r4
 8013a1e:	4603      	mov	r3, r0
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	da08      	bge.n	8013a36 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8013a24:	78f9      	ldrb	r1, [r7, #3]
 8013a26:	2303      	movs	r3, #3
 8013a28:	2204      	movs	r2, #4
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f7ff fad4 	bl	8012fd8 <SCSI_SenseCode>
    return -1;
 8013a30:	f04f 33ff 	mov.w	r3, #4294967295
 8013a34:	e05a      	b.n	8013aec <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013a36:	68fa      	ldr	r2, [r7, #12]
 8013a38:	f248 036c 	movw	r3, #32876	; 0x806c
 8013a3c:	4413      	add	r3, r2
 8013a3e:	681a      	ldr	r2, [r3, #0]
 8013a40:	68f9      	ldr	r1, [r7, #12]
 8013a42:	f248 0364 	movw	r3, #32868	; 0x8064
 8013a46:	440b      	add	r3, r1
 8013a48:	881b      	ldrh	r3, [r3, #0]
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013a52:	441a      	add	r2, r3
 8013a54:	68f9      	ldr	r1, [r7, #12]
 8013a56:	f248 036c 	movw	r3, #32876	; 0x806c
 8013a5a:	440b      	add	r3, r1
 8013a5c:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013a5e:	68fa      	ldr	r2, [r7, #12]
 8013a60:	f248 0370 	movw	r3, #32880	; 0x8070
 8013a64:	4413      	add	r3, r2
 8013a66:	681a      	ldr	r2, [r3, #0]
 8013a68:	68f9      	ldr	r1, [r7, #12]
 8013a6a:	f248 0364 	movw	r3, #32868	; 0x8064
 8013a6e:	440b      	add	r3, r1
 8013a70:	881b      	ldrh	r3, [r3, #0]
 8013a72:	4619      	mov	r1, r3
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8013a7a:	1ad2      	subs	r2, r2, r3
 8013a7c:	68f9      	ldr	r1, [r7, #12]
 8013a7e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013a82:	440b      	add	r3, r1
 8013a84:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8013a86:	68fa      	ldr	r2, [r7, #12]
 8013a88:	f248 0338 	movw	r3, #32824	; 0x8038
 8013a8c:	4413      	add	r3, r2
 8013a8e:	681a      	ldr	r2, [r3, #0]
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	1ad2      	subs	r2, r2, r3
 8013a94:	68f9      	ldr	r1, [r7, #12]
 8013a96:	f248 0338 	movw	r3, #32824	; 0x8038
 8013a9a:	440b      	add	r3, r1
 8013a9c:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8013a9e:	68fa      	ldr	r2, [r7, #12]
 8013aa0:	f248 0370 	movw	r3, #32880	; 0x8070
 8013aa4:	4413      	add	r3, r2
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d104      	bne.n	8013ab6 <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013aac:	2100      	movs	r1, #0
 8013aae:	6878      	ldr	r0, [r7, #4]
 8013ab0:	f7fe fde2 	bl	8012678 <MSC_BOT_SendCSW>
 8013ab4:	e019      	b.n	8013aea <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8013ab6:	68fa      	ldr	r2, [r7, #12]
 8013ab8:	f248 0370 	movw	r3, #32880	; 0x8070
 8013abc:	4413      	add	r3, r2
 8013abe:	681a      	ldr	r2, [r3, #0]
 8013ac0:	68f9      	ldr	r1, [r7, #12]
 8013ac2:	f248 0364 	movw	r3, #32868	; 0x8064
 8013ac6:	440b      	add	r3, r1
 8013ac8:	881b      	ldrh	r3, [r3, #0]
 8013aca:	fb03 f302 	mul.w	r3, r3, r2
 8013ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ad2:	bf28      	it	cs
 8013ad4:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013ad8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	f103 0210 	add.w	r2, r3, #16
 8013ae0:	68bb      	ldr	r3, [r7, #8]
 8013ae2:	2101      	movs	r1, #1
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f004 f89e 	bl	8017c26 <USBD_LL_PrepareReceive>
  }

  return 0;
 8013aea:	2300      	movs	r3, #0
}
 8013aec:	4618      	mov	r0, r3
 8013aee:	3710      	adds	r7, #16
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bdb0      	pop	{r4, r5, r7, pc}

08013af4 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8013af4:	b480      	push	{r7}
 8013af6:	b087      	sub	sp, #28
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	60f8      	str	r0, [r7, #12]
 8013afc:	60b9      	str	r1, [r7, #8]
 8013afe:	4613      	mov	r3, r2
 8013b00:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8013b02:	88fb      	ldrh	r3, [r7, #6]
 8013b04:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 8013b06:	8afa      	ldrh	r2, [r7, #22]
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8013b0c:	e00b      	b.n	8013b26 <SCSI_UpdateBotData+0x32>
  {
    len--;
 8013b0e:	8afb      	ldrh	r3, [r7, #22]
 8013b10:	3b01      	subs	r3, #1
 8013b12:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8013b14:	8afb      	ldrh	r3, [r7, #22]
 8013b16:	68ba      	ldr	r2, [r7, #8]
 8013b18:	441a      	add	r2, r3
 8013b1a:	8afb      	ldrh	r3, [r7, #22]
 8013b1c:	7811      	ldrb	r1, [r2, #0]
 8013b1e:	68fa      	ldr	r2, [r7, #12]
 8013b20:	4413      	add	r3, r2
 8013b22:	460a      	mov	r2, r1
 8013b24:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8013b26:	8afb      	ldrh	r3, [r7, #22]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d1f0      	bne.n	8013b0e <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8013b2c:	2300      	movs	r3, #0
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	371c      	adds	r7, #28
 8013b32:	46bd      	mov	sp, r7
 8013b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b38:	4770      	bx	lr

08013b3a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013b3a:	b580      	push	{r7, lr}
 8013b3c:	b086      	sub	sp, #24
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	60f8      	str	r0, [r7, #12]
 8013b42:	60b9      	str	r1, [r7, #8]
 8013b44:	4613      	mov	r3, r2
 8013b46:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d101      	bne.n	8013b52 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013b4e:	2303      	movs	r3, #3
 8013b50:	e025      	b.n	8013b9e <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d003      	beq.n	8013b64 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d003      	beq.n	8013b76 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	2200      	movs	r2, #0
 8013b72:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013b76:	68bb      	ldr	r3, [r7, #8]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d003      	beq.n	8013b84 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	68ba      	ldr	r2, [r7, #8]
 8013b80:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	2201      	movs	r2, #1
 8013b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	79fa      	ldrb	r2, [r7, #7]
 8013b90:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013b92:	68f8      	ldr	r0, [r7, #12]
 8013b94:	f003 fece 	bl	8017934 <USBD_LL_Init>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	3718      	adds	r7, #24
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	bd80      	pop	{r7, pc}

08013ba6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013ba6:	b580      	push	{r7, lr}
 8013ba8:	b084      	sub	sp, #16
 8013baa:	af00      	add	r7, sp, #0
 8013bac:	6078      	str	r0, [r7, #4]
 8013bae:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d101      	bne.n	8013bbe <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8013bba:	2303      	movs	r3, #3
 8013bbc:	e010      	b.n	8013be0 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	683a      	ldr	r2, [r7, #0]
 8013bc2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bce:	f107 020e 	add.w	r2, r7, #14
 8013bd2:	4610      	mov	r0, r2
 8013bd4:	4798      	blx	r3
 8013bd6:	4602      	mov	r2, r0
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8013bde:	2300      	movs	r3, #0
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	3710      	adds	r7, #16
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}

08013be8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b082      	sub	sp, #8
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f003 feef 	bl	80179d4 <USBD_LL_Start>
 8013bf6:	4603      	mov	r3, r0
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	3708      	adds	r7, #8
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}

08013c00 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013c00:	b480      	push	{r7}
 8013c02:	b083      	sub	sp, #12
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013c08:	2300      	movs	r3, #0
}
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	370c      	adds	r7, #12
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c14:	4770      	bx	lr

08013c16 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c16:	b580      	push	{r7, lr}
 8013c18:	b084      	sub	sp, #16
 8013c1a:	af00      	add	r7, sp, #0
 8013c1c:	6078      	str	r0, [r7, #4]
 8013c1e:	460b      	mov	r3, r1
 8013c20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013c22:	2303      	movs	r3, #3
 8013c24:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d009      	beq.n	8013c44 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	78fa      	ldrb	r2, [r7, #3]
 8013c3a:	4611      	mov	r1, r2
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	4798      	blx	r3
 8013c40:	4603      	mov	r3, r0
 8013c42:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3710      	adds	r7, #16
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}

08013c4e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c4e:	b580      	push	{r7, lr}
 8013c50:	b082      	sub	sp, #8
 8013c52:	af00      	add	r7, sp, #0
 8013c54:	6078      	str	r0, [r7, #4]
 8013c56:	460b      	mov	r3, r1
 8013c58:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d007      	beq.n	8013c74 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c6a:	685b      	ldr	r3, [r3, #4]
 8013c6c:	78fa      	ldrb	r2, [r7, #3]
 8013c6e:	4611      	mov	r1, r2
 8013c70:	6878      	ldr	r0, [r7, #4]
 8013c72:	4798      	blx	r3
  }

  return USBD_OK;
 8013c74:	2300      	movs	r3, #0
}
 8013c76:	4618      	mov	r0, r3
 8013c78:	3708      	adds	r7, #8
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bd80      	pop	{r7, pc}

08013c7e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013c7e:	b580      	push	{r7, lr}
 8013c80:	b084      	sub	sp, #16
 8013c82:	af00      	add	r7, sp, #0
 8013c84:	6078      	str	r0, [r7, #4]
 8013c86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013c8e:	6839      	ldr	r1, [r7, #0]
 8013c90:	4618      	mov	r0, r3
 8013c92:	f000 ff2b 	bl	8014aec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2201      	movs	r2, #1
 8013c9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013cb2:	f003 031f 	and.w	r3, r3, #31
 8013cb6:	2b01      	cmp	r3, #1
 8013cb8:	d00e      	beq.n	8013cd8 <USBD_LL_SetupStage+0x5a>
 8013cba:	2b01      	cmp	r3, #1
 8013cbc:	d302      	bcc.n	8013cc4 <USBD_LL_SetupStage+0x46>
 8013cbe:	2b02      	cmp	r3, #2
 8013cc0:	d014      	beq.n	8013cec <USBD_LL_SetupStage+0x6e>
 8013cc2:	e01d      	b.n	8013d00 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013cca:	4619      	mov	r1, r3
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f000 fa17 	bl	8014100 <USBD_StdDevReq>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8013cd6:	e020      	b.n	8013d1a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013cde:	4619      	mov	r1, r3
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f000 fa7b 	bl	80141dc <USBD_StdItfReq>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8013cea:	e016      	b.n	8013d1a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f000 fab7 	bl	8014268 <USBD_StdEPReq>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8013cfe:	e00c      	b.n	8013d1a <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013d06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013d0a:	b2db      	uxtb	r3, r3
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f003 fedf 	bl	8017ad2 <USBD_LL_StallEP>
 8013d14:	4603      	mov	r3, r0
 8013d16:	73fb      	strb	r3, [r7, #15]
      break;
 8013d18:	bf00      	nop
  }

  return ret;
 8013d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	3710      	adds	r7, #16
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}

08013d24 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b086      	sub	sp, #24
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	60f8      	str	r0, [r7, #12]
 8013d2c:	460b      	mov	r3, r1
 8013d2e:	607a      	str	r2, [r7, #4]
 8013d30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013d32:	7afb      	ldrb	r3, [r7, #11]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d137      	bne.n	8013da8 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013d3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013d46:	2b03      	cmp	r3, #3
 8013d48:	d14a      	bne.n	8013de0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013d4a:	693b      	ldr	r3, [r7, #16]
 8013d4c:	689a      	ldr	r2, [r3, #8]
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	68db      	ldr	r3, [r3, #12]
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d913      	bls.n	8013d7e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	689a      	ldr	r2, [r3, #8]
 8013d5a:	693b      	ldr	r3, [r7, #16]
 8013d5c:	68db      	ldr	r3, [r3, #12]
 8013d5e:	1ad2      	subs	r2, r2, r3
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	68da      	ldr	r2, [r3, #12]
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	689b      	ldr	r3, [r3, #8]
 8013d6c:	4293      	cmp	r3, r2
 8013d6e:	bf28      	it	cs
 8013d70:	4613      	movcs	r3, r2
 8013d72:	461a      	mov	r2, r3
 8013d74:	6879      	ldr	r1, [r7, #4]
 8013d76:	68f8      	ldr	r0, [r7, #12]
 8013d78:	f000 ff8f 	bl	8014c9a <USBD_CtlContinueRx>
 8013d7c:	e030      	b.n	8013de0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d84:	691b      	ldr	r3, [r3, #16]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d00a      	beq.n	8013da0 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013d90:	2b03      	cmp	r3, #3
 8013d92:	d105      	bne.n	8013da0 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d9a:	691b      	ldr	r3, [r3, #16]
 8013d9c:	68f8      	ldr	r0, [r7, #12]
 8013d9e:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8013da0:	68f8      	ldr	r0, [r7, #12]
 8013da2:	f000 ff8b 	bl	8014cbc <USBD_CtlSendStatus>
 8013da6:	e01b      	b.n	8013de0 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dae:	699b      	ldr	r3, [r3, #24]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d013      	beq.n	8013ddc <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8013dba:	2b03      	cmp	r3, #3
 8013dbc:	d10e      	bne.n	8013ddc <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dc4:	699b      	ldr	r3, [r3, #24]
 8013dc6:	7afa      	ldrb	r2, [r7, #11]
 8013dc8:	4611      	mov	r1, r2
 8013dca:	68f8      	ldr	r0, [r7, #12]
 8013dcc:	4798      	blx	r3
 8013dce:	4603      	mov	r3, r0
 8013dd0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8013dd2:	7dfb      	ldrb	r3, [r7, #23]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d003      	beq.n	8013de0 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8013dd8:	7dfb      	ldrb	r3, [r7, #23]
 8013dda:	e002      	b.n	8013de2 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013ddc:	2303      	movs	r3, #3
 8013dde:	e000      	b.n	8013de2 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8013de0:	2300      	movs	r3, #0
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	3718      	adds	r7, #24
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}

08013dea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013dea:	b580      	push	{r7, lr}
 8013dec:	b086      	sub	sp, #24
 8013dee:	af00      	add	r7, sp, #0
 8013df0:	60f8      	str	r0, [r7, #12]
 8013df2:	460b      	mov	r3, r1
 8013df4:	607a      	str	r2, [r7, #4]
 8013df6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013df8:	7afb      	ldrb	r3, [r7, #11]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d16a      	bne.n	8013ed4 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	3314      	adds	r3, #20
 8013e02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013e0a:	2b02      	cmp	r3, #2
 8013e0c:	d155      	bne.n	8013eba <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	689a      	ldr	r2, [r3, #8]
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	68db      	ldr	r3, [r3, #12]
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d914      	bls.n	8013e44 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	689a      	ldr	r2, [r3, #8]
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	68db      	ldr	r3, [r3, #12]
 8013e22:	1ad2      	subs	r2, r2, r3
 8013e24:	693b      	ldr	r3, [r7, #16]
 8013e26:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	689b      	ldr	r3, [r3, #8]
 8013e2c:	461a      	mov	r2, r3
 8013e2e:	6879      	ldr	r1, [r7, #4]
 8013e30:	68f8      	ldr	r0, [r7, #12]
 8013e32:	f000 ff21 	bl	8014c78 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e36:	2300      	movs	r3, #0
 8013e38:	2200      	movs	r2, #0
 8013e3a:	2100      	movs	r1, #0
 8013e3c:	68f8      	ldr	r0, [r7, #12]
 8013e3e:	f003 fef2 	bl	8017c26 <USBD_LL_PrepareReceive>
 8013e42:	e03a      	b.n	8013eba <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013e44:	693b      	ldr	r3, [r7, #16]
 8013e46:	68da      	ldr	r2, [r3, #12]
 8013e48:	693b      	ldr	r3, [r7, #16]
 8013e4a:	689b      	ldr	r3, [r3, #8]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d11c      	bne.n	8013e8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013e50:	693b      	ldr	r3, [r7, #16]
 8013e52:	685a      	ldr	r2, [r3, #4]
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d316      	bcc.n	8013e8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	685a      	ldr	r2, [r3, #4]
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d20f      	bcs.n	8013e8a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	2100      	movs	r1, #0
 8013e6e:	68f8      	ldr	r0, [r7, #12]
 8013e70:	f000 ff02 	bl	8014c78 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	2200      	movs	r2, #0
 8013e78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	2200      	movs	r2, #0
 8013e80:	2100      	movs	r1, #0
 8013e82:	68f8      	ldr	r0, [r7, #12]
 8013e84:	f003 fecf 	bl	8017c26 <USBD_LL_PrepareReceive>
 8013e88:	e017      	b.n	8013eba <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e90:	68db      	ldr	r3, [r3, #12]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d00a      	beq.n	8013eac <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013e9c:	2b03      	cmp	r3, #3
 8013e9e:	d105      	bne.n	8013eac <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ea6:	68db      	ldr	r3, [r3, #12]
 8013ea8:	68f8      	ldr	r0, [r7, #12]
 8013eaa:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013eac:	2180      	movs	r1, #128	; 0x80
 8013eae:	68f8      	ldr	r0, [r7, #12]
 8013eb0:	f003 fe0f 	bl	8017ad2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013eb4:	68f8      	ldr	r0, [r7, #12]
 8013eb6:	f000 ff14 	bl	8014ce2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	d123      	bne.n	8013f0c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013ec4:	68f8      	ldr	r0, [r7, #12]
 8013ec6:	f7ff fe9b 	bl	8013c00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	2200      	movs	r2, #0
 8013ece:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013ed2:	e01b      	b.n	8013f0c <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013eda:	695b      	ldr	r3, [r3, #20]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d013      	beq.n	8013f08 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8013ee6:	2b03      	cmp	r3, #3
 8013ee8:	d10e      	bne.n	8013f08 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ef0:	695b      	ldr	r3, [r3, #20]
 8013ef2:	7afa      	ldrb	r2, [r7, #11]
 8013ef4:	4611      	mov	r1, r2
 8013ef6:	68f8      	ldr	r0, [r7, #12]
 8013ef8:	4798      	blx	r3
 8013efa:	4603      	mov	r3, r0
 8013efc:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8013efe:	7dfb      	ldrb	r3, [r7, #23]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d003      	beq.n	8013f0c <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8013f04:	7dfb      	ldrb	r3, [r7, #23]
 8013f06:	e002      	b.n	8013f0e <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013f08:	2303      	movs	r3, #3
 8013f0a:	e000      	b.n	8013f0e <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8013f0c:	2300      	movs	r3, #0
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3718      	adds	r7, #24
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}

08013f16 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013f16:	b580      	push	{r7, lr}
 8013f18:	b082      	sub	sp, #8
 8013f1a:	af00      	add	r7, sp, #0
 8013f1c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2201      	movs	r2, #1
 8013f22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	2200      	movs	r2, #0
 8013f2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2200      	movs	r2, #0
 8013f32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2200      	movs	r2, #0
 8013f38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d009      	beq.n	8013f5a <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	687a      	ldr	r2, [r7, #4]
 8013f50:	6852      	ldr	r2, [r2, #4]
 8013f52:	b2d2      	uxtb	r2, r2
 8013f54:	4611      	mov	r1, r2
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013f5a:	2340      	movs	r3, #64	; 0x40
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	2100      	movs	r1, #0
 8013f60:	6878      	ldr	r0, [r7, #4]
 8013f62:	f003 fd52 	bl	8017a0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	2201      	movs	r2, #1
 8013f6a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2240      	movs	r2, #64	; 0x40
 8013f72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013f76:	2340      	movs	r3, #64	; 0x40
 8013f78:	2200      	movs	r2, #0
 8013f7a:	2180      	movs	r1, #128	; 0x80
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f003 fd44 	bl	8017a0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2201      	movs	r2, #1
 8013f86:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2240      	movs	r2, #64	; 0x40
 8013f8c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8013f8e:	2300      	movs	r3, #0
}
 8013f90:	4618      	mov	r0, r3
 8013f92:	3708      	adds	r7, #8
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}

08013f98 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b083      	sub	sp, #12
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	460b      	mov	r3, r1
 8013fa2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	78fa      	ldrb	r2, [r7, #3]
 8013fa8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013faa:	2300      	movs	r3, #0
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	370c      	adds	r7, #12
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb6:	4770      	bx	lr

08013fb8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013fb8:	b480      	push	{r7}
 8013fba:	b083      	sub	sp, #12
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2204      	movs	r2, #4
 8013fd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013fd4:	2300      	movs	r3, #0
}
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	370c      	adds	r7, #12
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe0:	4770      	bx	lr

08013fe2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013fe2:	b480      	push	{r7}
 8013fe4:	b083      	sub	sp, #12
 8013fe6:	af00      	add	r7, sp, #0
 8013fe8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ff0:	2b04      	cmp	r3, #4
 8013ff2:	d105      	bne.n	8014000 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014000:	2300      	movs	r3, #0
}
 8014002:	4618      	mov	r0, r3
 8014004:	370c      	adds	r7, #12
 8014006:	46bd      	mov	sp, r7
 8014008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400c:	4770      	bx	lr

0801400e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801400e:	b580      	push	{r7, lr}
 8014010:	b082      	sub	sp, #8
 8014012:	af00      	add	r7, sp, #0
 8014014:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801401c:	2b03      	cmp	r3, #3
 801401e:	d10b      	bne.n	8014038 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014026:	69db      	ldr	r3, [r3, #28]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d005      	beq.n	8014038 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014032:	69db      	ldr	r3, [r3, #28]
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014038:	2300      	movs	r3, #0
}
 801403a:	4618      	mov	r0, r3
 801403c:	3708      	adds	r7, #8
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}

08014042 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014042:	b480      	push	{r7}
 8014044:	b083      	sub	sp, #12
 8014046:	af00      	add	r7, sp, #0
 8014048:	6078      	str	r0, [r7, #4]
 801404a:	460b      	mov	r3, r1
 801404c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801404e:	2300      	movs	r3, #0
}
 8014050:	4618      	mov	r0, r3
 8014052:	370c      	adds	r7, #12
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr

0801405c <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801405c:	b480      	push	{r7}
 801405e:	b083      	sub	sp, #12
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	460b      	mov	r3, r1
 8014066:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8014068:	2300      	movs	r3, #0
}
 801406a:	4618      	mov	r0, r3
 801406c:	370c      	adds	r7, #12
 801406e:	46bd      	mov	sp, r7
 8014070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014074:	4770      	bx	lr

08014076 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014076:	b480      	push	{r7}
 8014078:	b083      	sub	sp, #12
 801407a:	af00      	add	r7, sp, #0
 801407c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801407e:	2300      	movs	r3, #0
}
 8014080:	4618      	mov	r0, r3
 8014082:	370c      	adds	r7, #12
 8014084:	46bd      	mov	sp, r7
 8014086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408a:	4770      	bx	lr

0801408c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b082      	sub	sp, #8
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2201      	movs	r2, #1
 8014098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d009      	beq.n	80140ba <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140ac:	685b      	ldr	r3, [r3, #4]
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	6852      	ldr	r2, [r2, #4]
 80140b2:	b2d2      	uxtb	r2, r2
 80140b4:	4611      	mov	r1, r2
 80140b6:	6878      	ldr	r0, [r7, #4]
 80140b8:	4798      	blx	r3
  }

  return USBD_OK;
 80140ba:	2300      	movs	r3, #0
}
 80140bc:	4618      	mov	r0, r3
 80140be:	3708      	adds	r7, #8
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}

080140c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80140c4:	b480      	push	{r7}
 80140c6:	b087      	sub	sp, #28
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	781b      	ldrb	r3, [r3, #0]
 80140d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80140d6:	697b      	ldr	r3, [r7, #20]
 80140d8:	3301      	adds	r3, #1
 80140da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80140dc:	697b      	ldr	r3, [r7, #20]
 80140de:	781b      	ldrb	r3, [r3, #0]
 80140e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80140e2:	8a3b      	ldrh	r3, [r7, #16]
 80140e4:	021b      	lsls	r3, r3, #8
 80140e6:	b21a      	sxth	r2, r3
 80140e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80140ec:	4313      	orrs	r3, r2
 80140ee:	b21b      	sxth	r3, r3
 80140f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80140f2:	89fb      	ldrh	r3, [r7, #14]
}
 80140f4:	4618      	mov	r0, r3
 80140f6:	371c      	adds	r7, #28
 80140f8:	46bd      	mov	sp, r7
 80140fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fe:	4770      	bx	lr

08014100 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b084      	sub	sp, #16
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
 8014108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801410a:	2300      	movs	r3, #0
 801410c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801410e:	683b      	ldr	r3, [r7, #0]
 8014110:	781b      	ldrb	r3, [r3, #0]
 8014112:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014116:	2b20      	cmp	r3, #32
 8014118:	d004      	beq.n	8014124 <USBD_StdDevReq+0x24>
 801411a:	2b40      	cmp	r3, #64	; 0x40
 801411c:	d002      	beq.n	8014124 <USBD_StdDevReq+0x24>
 801411e:	2b00      	cmp	r3, #0
 8014120:	d00a      	beq.n	8014138 <USBD_StdDevReq+0x38>
 8014122:	e050      	b.n	80141c6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801412a:	689b      	ldr	r3, [r3, #8]
 801412c:	6839      	ldr	r1, [r7, #0]
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	4798      	blx	r3
 8014132:	4603      	mov	r3, r0
 8014134:	73fb      	strb	r3, [r7, #15]
    break;
 8014136:	e04b      	b.n	80141d0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	785b      	ldrb	r3, [r3, #1]
 801413c:	2b09      	cmp	r3, #9
 801413e:	d83c      	bhi.n	80141ba <USBD_StdDevReq+0xba>
 8014140:	a201      	add	r2, pc, #4	; (adr r2, 8014148 <USBD_StdDevReq+0x48>)
 8014142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014146:	bf00      	nop
 8014148:	0801419d 	.word	0x0801419d
 801414c:	080141b1 	.word	0x080141b1
 8014150:	080141bb 	.word	0x080141bb
 8014154:	080141a7 	.word	0x080141a7
 8014158:	080141bb 	.word	0x080141bb
 801415c:	0801417b 	.word	0x0801417b
 8014160:	08014171 	.word	0x08014171
 8014164:	080141bb 	.word	0x080141bb
 8014168:	08014193 	.word	0x08014193
 801416c:	08014185 	.word	0x08014185
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8014170:	6839      	ldr	r1, [r7, #0]
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f000 f9ce 	bl	8014514 <USBD_GetDescriptor>
      break;
 8014178:	e024      	b.n	80141c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 801417a:	6839      	ldr	r1, [r7, #0]
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f000 fb33 	bl	80147e8 <USBD_SetAddress>
      break;
 8014182:	e01f      	b.n	80141c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8014184:	6839      	ldr	r1, [r7, #0]
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f000 fb70 	bl	801486c <USBD_SetConfig>
 801418c:	4603      	mov	r3, r0
 801418e:	73fb      	strb	r3, [r7, #15]
      break;
 8014190:	e018      	b.n	80141c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8014192:	6839      	ldr	r1, [r7, #0]
 8014194:	6878      	ldr	r0, [r7, #4]
 8014196:	f000 fc0d 	bl	80149b4 <USBD_GetConfig>
      break;
 801419a:	e013      	b.n	80141c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 801419c:	6839      	ldr	r1, [r7, #0]
 801419e:	6878      	ldr	r0, [r7, #4]
 80141a0:	f000 fc3c 	bl	8014a1c <USBD_GetStatus>
      break;
 80141a4:	e00e      	b.n	80141c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80141a6:	6839      	ldr	r1, [r7, #0]
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f000 fc6a 	bl	8014a82 <USBD_SetFeature>
      break;
 80141ae:	e009      	b.n	80141c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80141b0:	6839      	ldr	r1, [r7, #0]
 80141b2:	6878      	ldr	r0, [r7, #4]
 80141b4:	f000 fc79 	bl	8014aaa <USBD_ClrFeature>
      break;
 80141b8:	e004      	b.n	80141c4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80141ba:	6839      	ldr	r1, [r7, #0]
 80141bc:	6878      	ldr	r0, [r7, #4]
 80141be:	f000 fccf 	bl	8014b60 <USBD_CtlError>
      break;
 80141c2:	bf00      	nop
    }
    break;
 80141c4:	e004      	b.n	80141d0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80141c6:	6839      	ldr	r1, [r7, #0]
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f000 fcc9 	bl	8014b60 <USBD_CtlError>
    break;
 80141ce:	bf00      	nop
  }

  return ret;
 80141d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80141d2:	4618      	mov	r0, r3
 80141d4:	3710      	adds	r7, #16
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd80      	pop	{r7, pc}
 80141da:	bf00      	nop

080141dc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b084      	sub	sp, #16
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80141e6:	2300      	movs	r3, #0
 80141e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	781b      	ldrb	r3, [r3, #0]
 80141ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80141f2:	2b20      	cmp	r3, #32
 80141f4:	d003      	beq.n	80141fe <USBD_StdItfReq+0x22>
 80141f6:	2b40      	cmp	r3, #64	; 0x40
 80141f8:	d001      	beq.n	80141fe <USBD_StdItfReq+0x22>
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d12a      	bne.n	8014254 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014204:	3b01      	subs	r3, #1
 8014206:	2b02      	cmp	r3, #2
 8014208:	d81d      	bhi.n	8014246 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801420a:	683b      	ldr	r3, [r7, #0]
 801420c:	889b      	ldrh	r3, [r3, #4]
 801420e:	b2db      	uxtb	r3, r3
 8014210:	2b01      	cmp	r3, #1
 8014212:	d813      	bhi.n	801423c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801421a:	689b      	ldr	r3, [r3, #8]
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	4798      	blx	r3
 8014222:	4603      	mov	r3, r0
 8014224:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	88db      	ldrh	r3, [r3, #6]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d110      	bne.n	8014250 <USBD_StdItfReq+0x74>
 801422e:	7bfb      	ldrb	r3, [r7, #15]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d10d      	bne.n	8014250 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8014234:	6878      	ldr	r0, [r7, #4]
 8014236:	f000 fd41 	bl	8014cbc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801423a:	e009      	b.n	8014250 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 801423c:	6839      	ldr	r1, [r7, #0]
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f000 fc8e 	bl	8014b60 <USBD_CtlError>
      break;
 8014244:	e004      	b.n	8014250 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8014246:	6839      	ldr	r1, [r7, #0]
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f000 fc89 	bl	8014b60 <USBD_CtlError>
      break;
 801424e:	e000      	b.n	8014252 <USBD_StdItfReq+0x76>
      break;
 8014250:	bf00      	nop
    }
    break;
 8014252:	e004      	b.n	801425e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8014254:	6839      	ldr	r1, [r7, #0]
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f000 fc82 	bl	8014b60 <USBD_CtlError>
    break;
 801425c:	bf00      	nop
  }

  return ret;
 801425e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014260:	4618      	mov	r0, r3
 8014262:	3710      	adds	r7, #16
 8014264:	46bd      	mov	sp, r7
 8014266:	bd80      	pop	{r7, pc}

08014268 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b084      	sub	sp, #16
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
 8014270:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014272:	2300      	movs	r3, #0
 8014274:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	889b      	ldrh	r3, [r3, #4]
 801427a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	781b      	ldrb	r3, [r3, #0]
 8014280:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014284:	2b20      	cmp	r3, #32
 8014286:	d004      	beq.n	8014292 <USBD_StdEPReq+0x2a>
 8014288:	2b40      	cmp	r3, #64	; 0x40
 801428a:	d002      	beq.n	8014292 <USBD_StdEPReq+0x2a>
 801428c:	2b00      	cmp	r3, #0
 801428e:	d00a      	beq.n	80142a6 <USBD_StdEPReq+0x3e>
 8014290:	e135      	b.n	80144fe <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014298:	689b      	ldr	r3, [r3, #8]
 801429a:	6839      	ldr	r1, [r7, #0]
 801429c:	6878      	ldr	r0, [r7, #4]
 801429e:	4798      	blx	r3
 80142a0:	4603      	mov	r3, r0
 80142a2:	73fb      	strb	r3, [r7, #15]
    break;
 80142a4:	e130      	b.n	8014508 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	785b      	ldrb	r3, [r3, #1]
 80142aa:	2b01      	cmp	r3, #1
 80142ac:	d03e      	beq.n	801432c <USBD_StdEPReq+0xc4>
 80142ae:	2b03      	cmp	r3, #3
 80142b0:	d002      	beq.n	80142b8 <USBD_StdEPReq+0x50>
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d077      	beq.n	80143a6 <USBD_StdEPReq+0x13e>
 80142b6:	e11c      	b.n	80144f2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142be:	2b02      	cmp	r3, #2
 80142c0:	d002      	beq.n	80142c8 <USBD_StdEPReq+0x60>
 80142c2:	2b03      	cmp	r3, #3
 80142c4:	d015      	beq.n	80142f2 <USBD_StdEPReq+0x8a>
 80142c6:	e02b      	b.n	8014320 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80142c8:	7bbb      	ldrb	r3, [r7, #14]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d00c      	beq.n	80142e8 <USBD_StdEPReq+0x80>
 80142ce:	7bbb      	ldrb	r3, [r7, #14]
 80142d0:	2b80      	cmp	r3, #128	; 0x80
 80142d2:	d009      	beq.n	80142e8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80142d4:	7bbb      	ldrb	r3, [r7, #14]
 80142d6:	4619      	mov	r1, r3
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f003 fbfa 	bl	8017ad2 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80142de:	2180      	movs	r1, #128	; 0x80
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f003 fbf6 	bl	8017ad2 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80142e6:	e020      	b.n	801432a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80142e8:	6839      	ldr	r1, [r7, #0]
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	f000 fc38 	bl	8014b60 <USBD_CtlError>
        break;
 80142f0:	e01b      	b.n	801432a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	885b      	ldrh	r3, [r3, #2]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d10e      	bne.n	8014318 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80142fa:	7bbb      	ldrb	r3, [r7, #14]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d00b      	beq.n	8014318 <USBD_StdEPReq+0xb0>
 8014300:	7bbb      	ldrb	r3, [r7, #14]
 8014302:	2b80      	cmp	r3, #128	; 0x80
 8014304:	d008      	beq.n	8014318 <USBD_StdEPReq+0xb0>
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	88db      	ldrh	r3, [r3, #6]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d104      	bne.n	8014318 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 801430e:	7bbb      	ldrb	r3, [r7, #14]
 8014310:	4619      	mov	r1, r3
 8014312:	6878      	ldr	r0, [r7, #4]
 8014314:	f003 fbdd 	bl	8017ad2 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	f000 fccf 	bl	8014cbc <USBD_CtlSendStatus>

        break;
 801431e:	e004      	b.n	801432a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8014320:	6839      	ldr	r1, [r7, #0]
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f000 fc1c 	bl	8014b60 <USBD_CtlError>
        break;
 8014328:	bf00      	nop
      }
      break;
 801432a:	e0e7      	b.n	80144fc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014332:	2b02      	cmp	r3, #2
 8014334:	d002      	beq.n	801433c <USBD_StdEPReq+0xd4>
 8014336:	2b03      	cmp	r3, #3
 8014338:	d015      	beq.n	8014366 <USBD_StdEPReq+0xfe>
 801433a:	e02d      	b.n	8014398 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801433c:	7bbb      	ldrb	r3, [r7, #14]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d00c      	beq.n	801435c <USBD_StdEPReq+0xf4>
 8014342:	7bbb      	ldrb	r3, [r7, #14]
 8014344:	2b80      	cmp	r3, #128	; 0x80
 8014346:	d009      	beq.n	801435c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8014348:	7bbb      	ldrb	r3, [r7, #14]
 801434a:	4619      	mov	r1, r3
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f003 fbc0 	bl	8017ad2 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014352:	2180      	movs	r1, #128	; 0x80
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f003 fbbc 	bl	8017ad2 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801435a:	e023      	b.n	80143a4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 801435c:	6839      	ldr	r1, [r7, #0]
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f000 fbfe 	bl	8014b60 <USBD_CtlError>
        break;
 8014364:	e01e      	b.n	80143a4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	885b      	ldrh	r3, [r3, #2]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d119      	bne.n	80143a2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801436e:	7bbb      	ldrb	r3, [r7, #14]
 8014370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014374:	2b00      	cmp	r3, #0
 8014376:	d004      	beq.n	8014382 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014378:	7bbb      	ldrb	r3, [r7, #14]
 801437a:	4619      	mov	r1, r3
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f003 fbc7 	bl	8017b10 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	f000 fc9a 	bl	8014cbc <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801438e:	689b      	ldr	r3, [r3, #8]
 8014390:	6839      	ldr	r1, [r7, #0]
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	4798      	blx	r3
        }
        break;
 8014396:	e004      	b.n	80143a2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8014398:	6839      	ldr	r1, [r7, #0]
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f000 fbe0 	bl	8014b60 <USBD_CtlError>
        break;
 80143a0:	e000      	b.n	80143a4 <USBD_StdEPReq+0x13c>
        break;
 80143a2:	bf00      	nop
      }
      break;
 80143a4:	e0aa      	b.n	80144fc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143ac:	2b02      	cmp	r3, #2
 80143ae:	d002      	beq.n	80143b6 <USBD_StdEPReq+0x14e>
 80143b0:	2b03      	cmp	r3, #3
 80143b2:	d032      	beq.n	801441a <USBD_StdEPReq+0x1b2>
 80143b4:	e097      	b.n	80144e6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80143b6:	7bbb      	ldrb	r3, [r7, #14]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d007      	beq.n	80143cc <USBD_StdEPReq+0x164>
 80143bc:	7bbb      	ldrb	r3, [r7, #14]
 80143be:	2b80      	cmp	r3, #128	; 0x80
 80143c0:	d004      	beq.n	80143cc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80143c2:	6839      	ldr	r1, [r7, #0]
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f000 fbcb 	bl	8014b60 <USBD_CtlError>
          break;
 80143ca:	e091      	b.n	80144f0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80143cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	da0b      	bge.n	80143ec <USBD_StdEPReq+0x184>
 80143d4:	7bbb      	ldrb	r3, [r7, #14]
 80143d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80143da:	4613      	mov	r3, r2
 80143dc:	009b      	lsls	r3, r3, #2
 80143de:	4413      	add	r3, r2
 80143e0:	009b      	lsls	r3, r3, #2
 80143e2:	3310      	adds	r3, #16
 80143e4:	687a      	ldr	r2, [r7, #4]
 80143e6:	4413      	add	r3, r2
 80143e8:	3304      	adds	r3, #4
 80143ea:	e00b      	b.n	8014404 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80143ec:	7bbb      	ldrb	r3, [r7, #14]
 80143ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80143f2:	4613      	mov	r3, r2
 80143f4:	009b      	lsls	r3, r3, #2
 80143f6:	4413      	add	r3, r2
 80143f8:	009b      	lsls	r3, r3, #2
 80143fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80143fe:	687a      	ldr	r2, [r7, #4]
 8014400:	4413      	add	r3, r2
 8014402:	3304      	adds	r3, #4
 8014404:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	2200      	movs	r2, #0
 801440a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	2202      	movs	r2, #2
 8014410:	4619      	mov	r1, r3
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	f000 fc15 	bl	8014c42 <USBD_CtlSendData>
        break;
 8014418:	e06a      	b.n	80144f0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 801441a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801441e:	2b00      	cmp	r3, #0
 8014420:	da11      	bge.n	8014446 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014422:	7bbb      	ldrb	r3, [r7, #14]
 8014424:	f003 020f 	and.w	r2, r3, #15
 8014428:	6879      	ldr	r1, [r7, #4]
 801442a:	4613      	mov	r3, r2
 801442c:	009b      	lsls	r3, r3, #2
 801442e:	4413      	add	r3, r2
 8014430:	009b      	lsls	r3, r3, #2
 8014432:	440b      	add	r3, r1
 8014434:	3324      	adds	r3, #36	; 0x24
 8014436:	881b      	ldrh	r3, [r3, #0]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d117      	bne.n	801446c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 801443c:	6839      	ldr	r1, [r7, #0]
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f000 fb8e 	bl	8014b60 <USBD_CtlError>
            break;
 8014444:	e054      	b.n	80144f0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014446:	7bbb      	ldrb	r3, [r7, #14]
 8014448:	f003 020f 	and.w	r2, r3, #15
 801444c:	6879      	ldr	r1, [r7, #4]
 801444e:	4613      	mov	r3, r2
 8014450:	009b      	lsls	r3, r3, #2
 8014452:	4413      	add	r3, r2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	440b      	add	r3, r1
 8014458:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801445c:	881b      	ldrh	r3, [r3, #0]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d104      	bne.n	801446c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8014462:	6839      	ldr	r1, [r7, #0]
 8014464:	6878      	ldr	r0, [r7, #4]
 8014466:	f000 fb7b 	bl	8014b60 <USBD_CtlError>
            break;
 801446a:	e041      	b.n	80144f0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801446c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014470:	2b00      	cmp	r3, #0
 8014472:	da0b      	bge.n	801448c <USBD_StdEPReq+0x224>
 8014474:	7bbb      	ldrb	r3, [r7, #14]
 8014476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801447a:	4613      	mov	r3, r2
 801447c:	009b      	lsls	r3, r3, #2
 801447e:	4413      	add	r3, r2
 8014480:	009b      	lsls	r3, r3, #2
 8014482:	3310      	adds	r3, #16
 8014484:	687a      	ldr	r2, [r7, #4]
 8014486:	4413      	add	r3, r2
 8014488:	3304      	adds	r3, #4
 801448a:	e00b      	b.n	80144a4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 801448c:	7bbb      	ldrb	r3, [r7, #14]
 801448e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014492:	4613      	mov	r3, r2
 8014494:	009b      	lsls	r3, r3, #2
 8014496:	4413      	add	r3, r2
 8014498:	009b      	lsls	r3, r3, #2
 801449a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801449e:	687a      	ldr	r2, [r7, #4]
 80144a0:	4413      	add	r3, r2
 80144a2:	3304      	adds	r3, #4
 80144a4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80144a6:	7bbb      	ldrb	r3, [r7, #14]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d002      	beq.n	80144b2 <USBD_StdEPReq+0x24a>
 80144ac:	7bbb      	ldrb	r3, [r7, #14]
 80144ae:	2b80      	cmp	r3, #128	; 0x80
 80144b0:	d103      	bne.n	80144ba <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80144b2:	68bb      	ldr	r3, [r7, #8]
 80144b4:	2200      	movs	r2, #0
 80144b6:	601a      	str	r2, [r3, #0]
 80144b8:	e00e      	b.n	80144d8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80144ba:	7bbb      	ldrb	r3, [r7, #14]
 80144bc:	4619      	mov	r1, r3
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f003 fb45 	bl	8017b4e <USBD_LL_IsStallEP>
 80144c4:	4603      	mov	r3, r0
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d003      	beq.n	80144d2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80144ca:	68bb      	ldr	r3, [r7, #8]
 80144cc:	2201      	movs	r2, #1
 80144ce:	601a      	str	r2, [r3, #0]
 80144d0:	e002      	b.n	80144d8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	2200      	movs	r2, #0
 80144d6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	2202      	movs	r2, #2
 80144dc:	4619      	mov	r1, r3
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f000 fbaf 	bl	8014c42 <USBD_CtlSendData>
          break;
 80144e4:	e004      	b.n	80144f0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80144e6:	6839      	ldr	r1, [r7, #0]
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f000 fb39 	bl	8014b60 <USBD_CtlError>
        break;
 80144ee:	bf00      	nop
      }
      break;
 80144f0:	e004      	b.n	80144fc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80144f2:	6839      	ldr	r1, [r7, #0]
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f000 fb33 	bl	8014b60 <USBD_CtlError>
      break;
 80144fa:	bf00      	nop
    }
    break;
 80144fc:	e004      	b.n	8014508 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80144fe:	6839      	ldr	r1, [r7, #0]
 8014500:	6878      	ldr	r0, [r7, #4]
 8014502:	f000 fb2d 	bl	8014b60 <USBD_CtlError>
    break;
 8014506:	bf00      	nop
  }

  return ret;
 8014508:	7bfb      	ldrb	r3, [r7, #15]
}
 801450a:	4618      	mov	r0, r3
 801450c:	3710      	adds	r7, #16
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
	...

08014514 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b084      	sub	sp, #16
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801451e:	2300      	movs	r3, #0
 8014520:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014522:	2300      	movs	r3, #0
 8014524:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014526:	2300      	movs	r3, #0
 8014528:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	885b      	ldrh	r3, [r3, #2]
 801452e:	0a1b      	lsrs	r3, r3, #8
 8014530:	b29b      	uxth	r3, r3
 8014532:	3b01      	subs	r3, #1
 8014534:	2b06      	cmp	r3, #6
 8014536:	f200 8128 	bhi.w	801478a <USBD_GetDescriptor+0x276>
 801453a:	a201      	add	r2, pc, #4	; (adr r2, 8014540 <USBD_GetDescriptor+0x2c>)
 801453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014540:	0801455d 	.word	0x0801455d
 8014544:	08014575 	.word	0x08014575
 8014548:	080145b5 	.word	0x080145b5
 801454c:	0801478b 	.word	0x0801478b
 8014550:	0801478b 	.word	0x0801478b
 8014554:	0801472b 	.word	0x0801472b
 8014558:	08014757 	.word	0x08014757
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	687a      	ldr	r2, [r7, #4]
 8014566:	7c12      	ldrb	r2, [r2, #16]
 8014568:	f107 0108 	add.w	r1, r7, #8
 801456c:	4610      	mov	r0, r2
 801456e:	4798      	blx	r3
 8014570:	60f8      	str	r0, [r7, #12]
    break;
 8014572:	e112      	b.n	801479a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	7c1b      	ldrb	r3, [r3, #16]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d10d      	bne.n	8014598 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014584:	f107 0208 	add.w	r2, r7, #8
 8014588:	4610      	mov	r0, r2
 801458a:	4798      	blx	r3
 801458c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	3301      	adds	r3, #1
 8014592:	2202      	movs	r2, #2
 8014594:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8014596:	e100      	b.n	801479a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145a0:	f107 0208 	add.w	r2, r7, #8
 80145a4:	4610      	mov	r0, r2
 80145a6:	4798      	blx	r3
 80145a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	3301      	adds	r3, #1
 80145ae:	2202      	movs	r2, #2
 80145b0:	701a      	strb	r2, [r3, #0]
    break;
 80145b2:	e0f2      	b.n	801479a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	885b      	ldrh	r3, [r3, #2]
 80145b8:	b2db      	uxtb	r3, r3
 80145ba:	2b05      	cmp	r3, #5
 80145bc:	f200 80ac 	bhi.w	8014718 <USBD_GetDescriptor+0x204>
 80145c0:	a201      	add	r2, pc, #4	; (adr r2, 80145c8 <USBD_GetDescriptor+0xb4>)
 80145c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145c6:	bf00      	nop
 80145c8:	080145e1 	.word	0x080145e1
 80145cc:	08014615 	.word	0x08014615
 80145d0:	08014649 	.word	0x08014649
 80145d4:	0801467d 	.word	0x0801467d
 80145d8:	080146b1 	.word	0x080146b1
 80145dc:	080146e5 	.word	0x080146e5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80145e6:	685b      	ldr	r3, [r3, #4]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d00b      	beq.n	8014604 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80145f2:	685b      	ldr	r3, [r3, #4]
 80145f4:	687a      	ldr	r2, [r7, #4]
 80145f6:	7c12      	ldrb	r2, [r2, #16]
 80145f8:	f107 0108 	add.w	r1, r7, #8
 80145fc:	4610      	mov	r0, r2
 80145fe:	4798      	blx	r3
 8014600:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014602:	e091      	b.n	8014728 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014604:	6839      	ldr	r1, [r7, #0]
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f000 faaa 	bl	8014b60 <USBD_CtlError>
        err++;
 801460c:	7afb      	ldrb	r3, [r7, #11]
 801460e:	3301      	adds	r3, #1
 8014610:	72fb      	strb	r3, [r7, #11]
      break;
 8014612:	e089      	b.n	8014728 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801461a:	689b      	ldr	r3, [r3, #8]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d00b      	beq.n	8014638 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014626:	689b      	ldr	r3, [r3, #8]
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	7c12      	ldrb	r2, [r2, #16]
 801462c:	f107 0108 	add.w	r1, r7, #8
 8014630:	4610      	mov	r0, r2
 8014632:	4798      	blx	r3
 8014634:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014636:	e077      	b.n	8014728 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014638:	6839      	ldr	r1, [r7, #0]
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	f000 fa90 	bl	8014b60 <USBD_CtlError>
        err++;
 8014640:	7afb      	ldrb	r3, [r7, #11]
 8014642:	3301      	adds	r3, #1
 8014644:	72fb      	strb	r3, [r7, #11]
      break;
 8014646:	e06f      	b.n	8014728 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801464e:	68db      	ldr	r3, [r3, #12]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d00b      	beq.n	801466c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801465a:	68db      	ldr	r3, [r3, #12]
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	7c12      	ldrb	r2, [r2, #16]
 8014660:	f107 0108 	add.w	r1, r7, #8
 8014664:	4610      	mov	r0, r2
 8014666:	4798      	blx	r3
 8014668:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801466a:	e05d      	b.n	8014728 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801466c:	6839      	ldr	r1, [r7, #0]
 801466e:	6878      	ldr	r0, [r7, #4]
 8014670:	f000 fa76 	bl	8014b60 <USBD_CtlError>
        err++;
 8014674:	7afb      	ldrb	r3, [r7, #11]
 8014676:	3301      	adds	r3, #1
 8014678:	72fb      	strb	r3, [r7, #11]
      break;
 801467a:	e055      	b.n	8014728 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014682:	691b      	ldr	r3, [r3, #16]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d00b      	beq.n	80146a0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801468e:	691b      	ldr	r3, [r3, #16]
 8014690:	687a      	ldr	r2, [r7, #4]
 8014692:	7c12      	ldrb	r2, [r2, #16]
 8014694:	f107 0108 	add.w	r1, r7, #8
 8014698:	4610      	mov	r0, r2
 801469a:	4798      	blx	r3
 801469c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801469e:	e043      	b.n	8014728 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80146a0:	6839      	ldr	r1, [r7, #0]
 80146a2:	6878      	ldr	r0, [r7, #4]
 80146a4:	f000 fa5c 	bl	8014b60 <USBD_CtlError>
        err++;
 80146a8:	7afb      	ldrb	r3, [r7, #11]
 80146aa:	3301      	adds	r3, #1
 80146ac:	72fb      	strb	r3, [r7, #11]
      break;
 80146ae:	e03b      	b.n	8014728 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146b6:	695b      	ldr	r3, [r3, #20]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d00b      	beq.n	80146d4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146c2:	695b      	ldr	r3, [r3, #20]
 80146c4:	687a      	ldr	r2, [r7, #4]
 80146c6:	7c12      	ldrb	r2, [r2, #16]
 80146c8:	f107 0108 	add.w	r1, r7, #8
 80146cc:	4610      	mov	r0, r2
 80146ce:	4798      	blx	r3
 80146d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80146d2:	e029      	b.n	8014728 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80146d4:	6839      	ldr	r1, [r7, #0]
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f000 fa42 	bl	8014b60 <USBD_CtlError>
        err++;
 80146dc:	7afb      	ldrb	r3, [r7, #11]
 80146de:	3301      	adds	r3, #1
 80146e0:	72fb      	strb	r3, [r7, #11]
      break;
 80146e2:	e021      	b.n	8014728 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146ea:	699b      	ldr	r3, [r3, #24]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d00b      	beq.n	8014708 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146f6:	699b      	ldr	r3, [r3, #24]
 80146f8:	687a      	ldr	r2, [r7, #4]
 80146fa:	7c12      	ldrb	r2, [r2, #16]
 80146fc:	f107 0108 	add.w	r1, r7, #8
 8014700:	4610      	mov	r0, r2
 8014702:	4798      	blx	r3
 8014704:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014706:	e00f      	b.n	8014728 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014708:	6839      	ldr	r1, [r7, #0]
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f000 fa28 	bl	8014b60 <USBD_CtlError>
        err++;
 8014710:	7afb      	ldrb	r3, [r7, #11]
 8014712:	3301      	adds	r3, #1
 8014714:	72fb      	strb	r3, [r7, #11]
      break;
 8014716:	e007      	b.n	8014728 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8014718:	6839      	ldr	r1, [r7, #0]
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f000 fa20 	bl	8014b60 <USBD_CtlError>
      err++;
 8014720:	7afb      	ldrb	r3, [r7, #11]
 8014722:	3301      	adds	r3, #1
 8014724:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8014726:	bf00      	nop
    }
    break;
 8014728:	e037      	b.n	801479a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	7c1b      	ldrb	r3, [r3, #16]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d109      	bne.n	8014746 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801473a:	f107 0208 	add.w	r2, r7, #8
 801473e:	4610      	mov	r0, r2
 8014740:	4798      	blx	r3
 8014742:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8014744:	e029      	b.n	801479a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8014746:	6839      	ldr	r1, [r7, #0]
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f000 fa09 	bl	8014b60 <USBD_CtlError>
      err++;
 801474e:	7afb      	ldrb	r3, [r7, #11]
 8014750:	3301      	adds	r3, #1
 8014752:	72fb      	strb	r3, [r7, #11]
    break;
 8014754:	e021      	b.n	801479a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	7c1b      	ldrb	r3, [r3, #16]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d10d      	bne.n	801477a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014766:	f107 0208 	add.w	r2, r7, #8
 801476a:	4610      	mov	r0, r2
 801476c:	4798      	blx	r3
 801476e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	3301      	adds	r3, #1
 8014774:	2207      	movs	r2, #7
 8014776:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8014778:	e00f      	b.n	801479a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801477a:	6839      	ldr	r1, [r7, #0]
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f000 f9ef 	bl	8014b60 <USBD_CtlError>
      err++;
 8014782:	7afb      	ldrb	r3, [r7, #11]
 8014784:	3301      	adds	r3, #1
 8014786:	72fb      	strb	r3, [r7, #11]
    break;
 8014788:	e007      	b.n	801479a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 801478a:	6839      	ldr	r1, [r7, #0]
 801478c:	6878      	ldr	r0, [r7, #4]
 801478e:	f000 f9e7 	bl	8014b60 <USBD_CtlError>
    err++;
 8014792:	7afb      	ldrb	r3, [r7, #11]
 8014794:	3301      	adds	r3, #1
 8014796:	72fb      	strb	r3, [r7, #11]
    break;
 8014798:	bf00      	nop
  }

  if (err != 0U)
 801479a:	7afb      	ldrb	r3, [r7, #11]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d11e      	bne.n	80147de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	88db      	ldrh	r3, [r3, #6]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d016      	beq.n	80147d6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80147a8:	893b      	ldrh	r3, [r7, #8]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d00e      	beq.n	80147cc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	88da      	ldrh	r2, [r3, #6]
 80147b2:	893b      	ldrh	r3, [r7, #8]
 80147b4:	4293      	cmp	r3, r2
 80147b6:	bf28      	it	cs
 80147b8:	4613      	movcs	r3, r2
 80147ba:	b29b      	uxth	r3, r3
 80147bc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80147be:	893b      	ldrh	r3, [r7, #8]
 80147c0:	461a      	mov	r2, r3
 80147c2:	68f9      	ldr	r1, [r7, #12]
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f000 fa3c 	bl	8014c42 <USBD_CtlSendData>
 80147ca:	e009      	b.n	80147e0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80147cc:	6839      	ldr	r1, [r7, #0]
 80147ce:	6878      	ldr	r0, [r7, #4]
 80147d0:	f000 f9c6 	bl	8014b60 <USBD_CtlError>
 80147d4:	e004      	b.n	80147e0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f000 fa70 	bl	8014cbc <USBD_CtlSendStatus>
 80147dc:	e000      	b.n	80147e0 <USBD_GetDescriptor+0x2cc>
    return;
 80147de:	bf00      	nop
    }
  }
}
 80147e0:	3710      	adds	r7, #16
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop

080147e8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b084      	sub	sp, #16
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	889b      	ldrh	r3, [r3, #4]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d130      	bne.n	801485c <USBD_SetAddress+0x74>
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	88db      	ldrh	r3, [r3, #6]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d12c      	bne.n	801485c <USBD_SetAddress+0x74>
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	885b      	ldrh	r3, [r3, #2]
 8014806:	2b7f      	cmp	r3, #127	; 0x7f
 8014808:	d828      	bhi.n	801485c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801480a:	683b      	ldr	r3, [r7, #0]
 801480c:	885b      	ldrh	r3, [r3, #2]
 801480e:	b2db      	uxtb	r3, r3
 8014810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014814:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801481c:	2b03      	cmp	r3, #3
 801481e:	d104      	bne.n	801482a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8014820:	6839      	ldr	r1, [r7, #0]
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f000 f99c 	bl	8014b60 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014828:	e01c      	b.n	8014864 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	7bfa      	ldrb	r2, [r7, #15]
 801482e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014832:	7bfb      	ldrb	r3, [r7, #15]
 8014834:	4619      	mov	r1, r3
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f003 f9b5 	bl	8017ba6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f000 fa3d 	bl	8014cbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014842:	7bfb      	ldrb	r3, [r7, #15]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d004      	beq.n	8014852 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	2202      	movs	r2, #2
 801484c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014850:	e008      	b.n	8014864 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2201      	movs	r2, #1
 8014856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801485a:	e003      	b.n	8014864 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801485c:	6839      	ldr	r1, [r7, #0]
 801485e:	6878      	ldr	r0, [r7, #4]
 8014860:	f000 f97e 	bl	8014b60 <USBD_CtlError>
  }
}
 8014864:	bf00      	nop
 8014866:	3710      	adds	r7, #16
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}

0801486c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b084      	sub	sp, #16
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014876:	2300      	movs	r3, #0
 8014878:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	885b      	ldrh	r3, [r3, #2]
 801487e:	b2da      	uxtb	r2, r3
 8014880:	4b4b      	ldr	r3, [pc, #300]	; (80149b0 <USBD_SetConfig+0x144>)
 8014882:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014884:	4b4a      	ldr	r3, [pc, #296]	; (80149b0 <USBD_SetConfig+0x144>)
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	2b01      	cmp	r3, #1
 801488a:	d905      	bls.n	8014898 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801488c:	6839      	ldr	r1, [r7, #0]
 801488e:	6878      	ldr	r0, [r7, #4]
 8014890:	f000 f966 	bl	8014b60 <USBD_CtlError>
    return USBD_FAIL;
 8014894:	2303      	movs	r3, #3
 8014896:	e087      	b.n	80149a8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801489e:	2b02      	cmp	r3, #2
 80148a0:	d002      	beq.n	80148a8 <USBD_SetConfig+0x3c>
 80148a2:	2b03      	cmp	r3, #3
 80148a4:	d025      	beq.n	80148f2 <USBD_SetConfig+0x86>
 80148a6:	e071      	b.n	801498c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80148a8:	4b41      	ldr	r3, [pc, #260]	; (80149b0 <USBD_SetConfig+0x144>)
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d01c      	beq.n	80148ea <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80148b0:	4b3f      	ldr	r3, [pc, #252]	; (80149b0 <USBD_SetConfig+0x144>)
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	461a      	mov	r2, r3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80148ba:	4b3d      	ldr	r3, [pc, #244]	; (80149b0 <USBD_SetConfig+0x144>)
 80148bc:	781b      	ldrb	r3, [r3, #0]
 80148be:	4619      	mov	r1, r3
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f7ff f9a8 	bl	8013c16 <USBD_SetClassConfig>
 80148c6:	4603      	mov	r3, r0
 80148c8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80148ca:	7bfb      	ldrb	r3, [r7, #15]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d004      	beq.n	80148da <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80148d0:	6839      	ldr	r1, [r7, #0]
 80148d2:	6878      	ldr	r0, [r7, #4]
 80148d4:	f000 f944 	bl	8014b60 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80148d8:	e065      	b.n	80149a6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f000 f9ee 	bl	8014cbc <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	2203      	movs	r2, #3
 80148e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80148e8:	e05d      	b.n	80149a6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	f000 f9e6 	bl	8014cbc <USBD_CtlSendStatus>
    break;
 80148f0:	e059      	b.n	80149a6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80148f2:	4b2f      	ldr	r3, [pc, #188]	; (80149b0 <USBD_SetConfig+0x144>)
 80148f4:	781b      	ldrb	r3, [r3, #0]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d112      	bne.n	8014920 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	2202      	movs	r2, #2
 80148fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8014902:	4b2b      	ldr	r3, [pc, #172]	; (80149b0 <USBD_SetConfig+0x144>)
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	461a      	mov	r2, r3
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801490c:	4b28      	ldr	r3, [pc, #160]	; (80149b0 <USBD_SetConfig+0x144>)
 801490e:	781b      	ldrb	r3, [r3, #0]
 8014910:	4619      	mov	r1, r3
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	f7ff f99b 	bl	8013c4e <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f000 f9cf 	bl	8014cbc <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801491e:	e042      	b.n	80149a6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8014920:	4b23      	ldr	r3, [pc, #140]	; (80149b0 <USBD_SetConfig+0x144>)
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	461a      	mov	r2, r3
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	685b      	ldr	r3, [r3, #4]
 801492a:	429a      	cmp	r2, r3
 801492c:	d02a      	beq.n	8014984 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	685b      	ldr	r3, [r3, #4]
 8014932:	b2db      	uxtb	r3, r3
 8014934:	4619      	mov	r1, r3
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f7ff f989 	bl	8013c4e <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 801493c:	4b1c      	ldr	r3, [pc, #112]	; (80149b0 <USBD_SetConfig+0x144>)
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	461a      	mov	r2, r3
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8014946:	4b1a      	ldr	r3, [pc, #104]	; (80149b0 <USBD_SetConfig+0x144>)
 8014948:	781b      	ldrb	r3, [r3, #0]
 801494a:	4619      	mov	r1, r3
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f7ff f962 	bl	8013c16 <USBD_SetClassConfig>
 8014952:	4603      	mov	r3, r0
 8014954:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8014956:	7bfb      	ldrb	r3, [r7, #15]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d00f      	beq.n	801497c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 801495c:	6839      	ldr	r1, [r7, #0]
 801495e:	6878      	ldr	r0, [r7, #4]
 8014960:	f000 f8fe 	bl	8014b60 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	685b      	ldr	r3, [r3, #4]
 8014968:	b2db      	uxtb	r3, r3
 801496a:	4619      	mov	r1, r3
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f7ff f96e 	bl	8013c4e <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	2202      	movs	r2, #2
 8014976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801497a:	e014      	b.n	80149a6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f000 f99d 	bl	8014cbc <USBD_CtlSendStatus>
    break;
 8014982:	e010      	b.n	80149a6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f000 f999 	bl	8014cbc <USBD_CtlSendStatus>
    break;
 801498a:	e00c      	b.n	80149a6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 801498c:	6839      	ldr	r1, [r7, #0]
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f000 f8e6 	bl	8014b60 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014994:	4b06      	ldr	r3, [pc, #24]	; (80149b0 <USBD_SetConfig+0x144>)
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	4619      	mov	r1, r3
 801499a:	6878      	ldr	r0, [r7, #4]
 801499c:	f7ff f957 	bl	8013c4e <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80149a0:	2303      	movs	r3, #3
 80149a2:	73fb      	strb	r3, [r7, #15]
    break;
 80149a4:	bf00      	nop
  }

  return ret;
 80149a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80149a8:	4618      	mov	r0, r3
 80149aa:	3710      	adds	r7, #16
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}
 80149b0:	24000b2c 	.word	0x24000b2c

080149b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	88db      	ldrh	r3, [r3, #6]
 80149c2:	2b01      	cmp	r3, #1
 80149c4:	d004      	beq.n	80149d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80149c6:	6839      	ldr	r1, [r7, #0]
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f000 f8c9 	bl	8014b60 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80149ce:	e021      	b.n	8014a14 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149d6:	2b01      	cmp	r3, #1
 80149d8:	db17      	blt.n	8014a0a <USBD_GetConfig+0x56>
 80149da:	2b02      	cmp	r3, #2
 80149dc:	dd02      	ble.n	80149e4 <USBD_GetConfig+0x30>
 80149de:	2b03      	cmp	r3, #3
 80149e0:	d00b      	beq.n	80149fa <USBD_GetConfig+0x46>
 80149e2:	e012      	b.n	8014a0a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2200      	movs	r2, #0
 80149e8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	3308      	adds	r3, #8
 80149ee:	2201      	movs	r2, #1
 80149f0:	4619      	mov	r1, r3
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f000 f925 	bl	8014c42 <USBD_CtlSendData>
      break;
 80149f8:	e00c      	b.n	8014a14 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	3304      	adds	r3, #4
 80149fe:	2201      	movs	r2, #1
 8014a00:	4619      	mov	r1, r3
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f000 f91d 	bl	8014c42 <USBD_CtlSendData>
      break;
 8014a08:	e004      	b.n	8014a14 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8014a0a:	6839      	ldr	r1, [r7, #0]
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f000 f8a7 	bl	8014b60 <USBD_CtlError>
      break;
 8014a12:	bf00      	nop
}
 8014a14:	bf00      	nop
 8014a16:	3708      	adds	r7, #8
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a2c:	3b01      	subs	r3, #1
 8014a2e:	2b02      	cmp	r3, #2
 8014a30:	d81e      	bhi.n	8014a70 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	88db      	ldrh	r3, [r3, #6]
 8014a36:	2b02      	cmp	r3, #2
 8014a38:	d004      	beq.n	8014a44 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8014a3a:	6839      	ldr	r1, [r7, #0]
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f000 f88f 	bl	8014b60 <USBD_CtlError>
      break;
 8014a42:	e01a      	b.n	8014a7a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2201      	movs	r2, #1
 8014a48:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d005      	beq.n	8014a60 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	68db      	ldr	r3, [r3, #12]
 8014a58:	f043 0202 	orr.w	r2, r3, #2
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	330c      	adds	r3, #12
 8014a64:	2202      	movs	r2, #2
 8014a66:	4619      	mov	r1, r3
 8014a68:	6878      	ldr	r0, [r7, #4]
 8014a6a:	f000 f8ea 	bl	8014c42 <USBD_CtlSendData>
    break;
 8014a6e:	e004      	b.n	8014a7a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8014a70:	6839      	ldr	r1, [r7, #0]
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f000 f874 	bl	8014b60 <USBD_CtlError>
    break;
 8014a78:	bf00      	nop
  }
}
 8014a7a:	bf00      	nop
 8014a7c:	3708      	adds	r7, #8
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bd80      	pop	{r7, pc}

08014a82 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a82:	b580      	push	{r7, lr}
 8014a84:	b082      	sub	sp, #8
 8014a86:	af00      	add	r7, sp, #0
 8014a88:	6078      	str	r0, [r7, #4]
 8014a8a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	885b      	ldrh	r3, [r3, #2]
 8014a90:	2b01      	cmp	r3, #1
 8014a92:	d106      	bne.n	8014aa2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2201      	movs	r2, #1
 8014a98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	f000 f90d 	bl	8014cbc <USBD_CtlSendStatus>
  }
}
 8014aa2:	bf00      	nop
 8014aa4:	3708      	adds	r7, #8
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}

08014aaa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014aaa:	b580      	push	{r7, lr}
 8014aac:	b082      	sub	sp, #8
 8014aae:	af00      	add	r7, sp, #0
 8014ab0:	6078      	str	r0, [r7, #4]
 8014ab2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014aba:	3b01      	subs	r3, #1
 8014abc:	2b02      	cmp	r3, #2
 8014abe:	d80b      	bhi.n	8014ad8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	885b      	ldrh	r3, [r3, #2]
 8014ac4:	2b01      	cmp	r3, #1
 8014ac6:	d10c      	bne.n	8014ae2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	2200      	movs	r2, #0
 8014acc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014ad0:	6878      	ldr	r0, [r7, #4]
 8014ad2:	f000 f8f3 	bl	8014cbc <USBD_CtlSendStatus>
      }
      break;
 8014ad6:	e004      	b.n	8014ae2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8014ad8:	6839      	ldr	r1, [r7, #0]
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f000 f840 	bl	8014b60 <USBD_CtlError>
      break;
 8014ae0:	e000      	b.n	8014ae4 <USBD_ClrFeature+0x3a>
      break;
 8014ae2:	bf00      	nop
  }
}
 8014ae4:	bf00      	nop
 8014ae6:	3708      	adds	r7, #8
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}

08014aec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b084      	sub	sp, #16
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	781a      	ldrb	r2, [r3, #0]
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	3301      	adds	r3, #1
 8014b06:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	781a      	ldrb	r2, [r3, #0]
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	3301      	adds	r3, #1
 8014b14:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014b16:	68f8      	ldr	r0, [r7, #12]
 8014b18:	f7ff fad4 	bl	80140c4 <SWAPBYTE>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	461a      	mov	r2, r3
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	3301      	adds	r3, #1
 8014b28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	3301      	adds	r3, #1
 8014b2e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014b30:	68f8      	ldr	r0, [r7, #12]
 8014b32:	f7ff fac7 	bl	80140c4 <SWAPBYTE>
 8014b36:	4603      	mov	r3, r0
 8014b38:	461a      	mov	r2, r3
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	3301      	adds	r3, #1
 8014b42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	3301      	adds	r3, #1
 8014b48:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014b4a:	68f8      	ldr	r0, [r7, #12]
 8014b4c:	f7ff faba 	bl	80140c4 <SWAPBYTE>
 8014b50:	4603      	mov	r3, r0
 8014b52:	461a      	mov	r2, r3
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	80da      	strh	r2, [r3, #6]
}
 8014b58:	bf00      	nop
 8014b5a:	3710      	adds	r7, #16
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}

08014b60 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b082      	sub	sp, #8
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
 8014b68:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b6a:	2180      	movs	r1, #128	; 0x80
 8014b6c:	6878      	ldr	r0, [r7, #4]
 8014b6e:	f002 ffb0 	bl	8017ad2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014b72:	2100      	movs	r1, #0
 8014b74:	6878      	ldr	r0, [r7, #4]
 8014b76:	f002 ffac 	bl	8017ad2 <USBD_LL_StallEP>
}
 8014b7a:	bf00      	nop
 8014b7c:	3708      	adds	r7, #8
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bd80      	pop	{r7, pc}

08014b82 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014b82:	b580      	push	{r7, lr}
 8014b84:	b086      	sub	sp, #24
 8014b86:	af00      	add	r7, sp, #0
 8014b88:	60f8      	str	r0, [r7, #12]
 8014b8a:	60b9      	str	r1, [r7, #8]
 8014b8c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d036      	beq.n	8014c06 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014b9c:	6938      	ldr	r0, [r7, #16]
 8014b9e:	f000 f836 	bl	8014c0e <USBD_GetLen>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	3301      	adds	r3, #1
 8014ba6:	b29b      	uxth	r3, r3
 8014ba8:	005b      	lsls	r3, r3, #1
 8014baa:	b29a      	uxth	r2, r3
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014bb0:	7dfb      	ldrb	r3, [r7, #23]
 8014bb2:	68ba      	ldr	r2, [r7, #8]
 8014bb4:	4413      	add	r3, r2
 8014bb6:	687a      	ldr	r2, [r7, #4]
 8014bb8:	7812      	ldrb	r2, [r2, #0]
 8014bba:	701a      	strb	r2, [r3, #0]
  idx++;
 8014bbc:	7dfb      	ldrb	r3, [r7, #23]
 8014bbe:	3301      	adds	r3, #1
 8014bc0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014bc2:	7dfb      	ldrb	r3, [r7, #23]
 8014bc4:	68ba      	ldr	r2, [r7, #8]
 8014bc6:	4413      	add	r3, r2
 8014bc8:	2203      	movs	r2, #3
 8014bca:	701a      	strb	r2, [r3, #0]
  idx++;
 8014bcc:	7dfb      	ldrb	r3, [r7, #23]
 8014bce:	3301      	adds	r3, #1
 8014bd0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014bd2:	e013      	b.n	8014bfc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014bd4:	7dfb      	ldrb	r3, [r7, #23]
 8014bd6:	68ba      	ldr	r2, [r7, #8]
 8014bd8:	4413      	add	r3, r2
 8014bda:	693a      	ldr	r2, [r7, #16]
 8014bdc:	7812      	ldrb	r2, [r2, #0]
 8014bde:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	3301      	adds	r3, #1
 8014be4:	613b      	str	r3, [r7, #16]
    idx++;
 8014be6:	7dfb      	ldrb	r3, [r7, #23]
 8014be8:	3301      	adds	r3, #1
 8014bea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014bec:	7dfb      	ldrb	r3, [r7, #23]
 8014bee:	68ba      	ldr	r2, [r7, #8]
 8014bf0:	4413      	add	r3, r2
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	701a      	strb	r2, [r3, #0]
    idx++;
 8014bf6:	7dfb      	ldrb	r3, [r7, #23]
 8014bf8:	3301      	adds	r3, #1
 8014bfa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014bfc:	693b      	ldr	r3, [r7, #16]
 8014bfe:	781b      	ldrb	r3, [r3, #0]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d1e7      	bne.n	8014bd4 <USBD_GetString+0x52>
 8014c04:	e000      	b.n	8014c08 <USBD_GetString+0x86>
    return;
 8014c06:	bf00      	nop
  }
}
 8014c08:	3718      	adds	r7, #24
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd80      	pop	{r7, pc}

08014c0e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014c0e:	b480      	push	{r7}
 8014c10:	b085      	sub	sp, #20
 8014c12:	af00      	add	r7, sp, #0
 8014c14:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014c16:	2300      	movs	r3, #0
 8014c18:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014c1e:	e005      	b.n	8014c2c <USBD_GetLen+0x1e>
  {
    len++;
 8014c20:	7bfb      	ldrb	r3, [r7, #15]
 8014c22:	3301      	adds	r3, #1
 8014c24:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	3301      	adds	r3, #1
 8014c2a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d1f5      	bne.n	8014c20 <USBD_GetLen+0x12>
  }

  return len;
 8014c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	3714      	adds	r7, #20
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c40:	4770      	bx	lr

08014c42 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014c42:	b580      	push	{r7, lr}
 8014c44:	b084      	sub	sp, #16
 8014c46:	af00      	add	r7, sp, #0
 8014c48:	60f8      	str	r0, [r7, #12]
 8014c4a:	60b9      	str	r1, [r7, #8]
 8014c4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	2202      	movs	r2, #2
 8014c52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	687a      	ldr	r2, [r7, #4]
 8014c5a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	687a      	ldr	r2, [r7, #4]
 8014c60:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	68ba      	ldr	r2, [r7, #8]
 8014c66:	2100      	movs	r1, #0
 8014c68:	68f8      	ldr	r0, [r7, #12]
 8014c6a:	f002 ffbb 	bl	8017be4 <USBD_LL_Transmit>

  return USBD_OK;
 8014c6e:	2300      	movs	r3, #0
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	3710      	adds	r7, #16
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}

08014c78 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	60f8      	str	r0, [r7, #12]
 8014c80:	60b9      	str	r1, [r7, #8]
 8014c82:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	68ba      	ldr	r2, [r7, #8]
 8014c88:	2100      	movs	r1, #0
 8014c8a:	68f8      	ldr	r0, [r7, #12]
 8014c8c:	f002 ffaa 	bl	8017be4 <USBD_LL_Transmit>

  return USBD_OK;
 8014c90:	2300      	movs	r3, #0
}
 8014c92:	4618      	mov	r0, r3
 8014c94:	3710      	adds	r7, #16
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bd80      	pop	{r7, pc}

08014c9a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014c9a:	b580      	push	{r7, lr}
 8014c9c:	b084      	sub	sp, #16
 8014c9e:	af00      	add	r7, sp, #0
 8014ca0:	60f8      	str	r0, [r7, #12]
 8014ca2:	60b9      	str	r1, [r7, #8]
 8014ca4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	68ba      	ldr	r2, [r7, #8]
 8014caa:	2100      	movs	r1, #0
 8014cac:	68f8      	ldr	r0, [r7, #12]
 8014cae:	f002 ffba 	bl	8017c26 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014cb2:	2300      	movs	r3, #0
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3710      	adds	r7, #16
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}

08014cbc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b082      	sub	sp, #8
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2204      	movs	r2, #4
 8014cc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014ccc:	2300      	movs	r3, #0
 8014cce:	2200      	movs	r2, #0
 8014cd0:	2100      	movs	r1, #0
 8014cd2:	6878      	ldr	r0, [r7, #4]
 8014cd4:	f002 ff86 	bl	8017be4 <USBD_LL_Transmit>

  return USBD_OK;
 8014cd8:	2300      	movs	r3, #0
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3708      	adds	r7, #8
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}

08014ce2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014ce2:	b580      	push	{r7, lr}
 8014ce4:	b082      	sub	sp, #8
 8014ce6:	af00      	add	r7, sp, #0
 8014ce8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2205      	movs	r2, #5
 8014cee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	2100      	movs	r1, #0
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f002 ff94 	bl	8017c26 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014cfe:	2300      	movs	r3, #0
}
 8014d00:	4618      	mov	r0, r3
 8014d02:	3708      	adds	r7, #8
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}

08014d08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b084      	sub	sp, #16
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	4603      	mov	r3, r0
 8014d10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8014d12:	79fb      	ldrb	r3, [r7, #7]
 8014d14:	4a08      	ldr	r2, [pc, #32]	; (8014d38 <disk_status+0x30>)
 8014d16:	009b      	lsls	r3, r3, #2
 8014d18:	4413      	add	r3, r2
 8014d1a:	685b      	ldr	r3, [r3, #4]
 8014d1c:	685b      	ldr	r3, [r3, #4]
 8014d1e:	79fa      	ldrb	r2, [r7, #7]
 8014d20:	4905      	ldr	r1, [pc, #20]	; (8014d38 <disk_status+0x30>)
 8014d22:	440a      	add	r2, r1
 8014d24:	7a12      	ldrb	r2, [r2, #8]
 8014d26:	4610      	mov	r0, r2
 8014d28:	4798      	blx	r3
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d30:	4618      	mov	r0, r3
 8014d32:	3710      	adds	r7, #16
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}
 8014d38:	24000b58 	.word	0x24000b58

08014d3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b084      	sub	sp, #16
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	4603      	mov	r3, r0
 8014d44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8014d46:	2300      	movs	r3, #0
 8014d48:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014d4a:	79fb      	ldrb	r3, [r7, #7]
 8014d4c:	4a0d      	ldr	r2, [pc, #52]	; (8014d84 <disk_initialize+0x48>)
 8014d4e:	5cd3      	ldrb	r3, [r2, r3]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d111      	bne.n	8014d78 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014d54:	79fb      	ldrb	r3, [r7, #7]
 8014d56:	4a0b      	ldr	r2, [pc, #44]	; (8014d84 <disk_initialize+0x48>)
 8014d58:	2101      	movs	r1, #1
 8014d5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014d5c:	79fb      	ldrb	r3, [r7, #7]
 8014d5e:	4a09      	ldr	r2, [pc, #36]	; (8014d84 <disk_initialize+0x48>)
 8014d60:	009b      	lsls	r3, r3, #2
 8014d62:	4413      	add	r3, r2
 8014d64:	685b      	ldr	r3, [r3, #4]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	79fa      	ldrb	r2, [r7, #7]
 8014d6a:	4906      	ldr	r1, [pc, #24]	; (8014d84 <disk_initialize+0x48>)
 8014d6c:	440a      	add	r2, r1
 8014d6e:	7a12      	ldrb	r2, [r2, #8]
 8014d70:	4610      	mov	r0, r2
 8014d72:	4798      	blx	r3
 8014d74:	4603      	mov	r3, r0
 8014d76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	3710      	adds	r7, #16
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bd80      	pop	{r7, pc}
 8014d82:	bf00      	nop
 8014d84:	24000b58 	.word	0x24000b58

08014d88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014d88:	b590      	push	{r4, r7, lr}
 8014d8a:	b087      	sub	sp, #28
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	60b9      	str	r1, [r7, #8]
 8014d90:	607a      	str	r2, [r7, #4]
 8014d92:	603b      	str	r3, [r7, #0]
 8014d94:	4603      	mov	r3, r0
 8014d96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014d98:	7bfb      	ldrb	r3, [r7, #15]
 8014d9a:	4a0a      	ldr	r2, [pc, #40]	; (8014dc4 <disk_read+0x3c>)
 8014d9c:	009b      	lsls	r3, r3, #2
 8014d9e:	4413      	add	r3, r2
 8014da0:	685b      	ldr	r3, [r3, #4]
 8014da2:	689c      	ldr	r4, [r3, #8]
 8014da4:	7bfb      	ldrb	r3, [r7, #15]
 8014da6:	4a07      	ldr	r2, [pc, #28]	; (8014dc4 <disk_read+0x3c>)
 8014da8:	4413      	add	r3, r2
 8014daa:	7a18      	ldrb	r0, [r3, #8]
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	687a      	ldr	r2, [r7, #4]
 8014db0:	68b9      	ldr	r1, [r7, #8]
 8014db2:	47a0      	blx	r4
 8014db4:	4603      	mov	r3, r0
 8014db6:	75fb      	strb	r3, [r7, #23]
  return res;
 8014db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	371c      	adds	r7, #28
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd90      	pop	{r4, r7, pc}
 8014dc2:	bf00      	nop
 8014dc4:	24000b58 	.word	0x24000b58

08014dc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014dc8:	b590      	push	{r4, r7, lr}
 8014dca:	b087      	sub	sp, #28
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	60b9      	str	r1, [r7, #8]
 8014dd0:	607a      	str	r2, [r7, #4]
 8014dd2:	603b      	str	r3, [r7, #0]
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014dd8:	7bfb      	ldrb	r3, [r7, #15]
 8014dda:	4a0a      	ldr	r2, [pc, #40]	; (8014e04 <disk_write+0x3c>)
 8014ddc:	009b      	lsls	r3, r3, #2
 8014dde:	4413      	add	r3, r2
 8014de0:	685b      	ldr	r3, [r3, #4]
 8014de2:	68dc      	ldr	r4, [r3, #12]
 8014de4:	7bfb      	ldrb	r3, [r7, #15]
 8014de6:	4a07      	ldr	r2, [pc, #28]	; (8014e04 <disk_write+0x3c>)
 8014de8:	4413      	add	r3, r2
 8014dea:	7a18      	ldrb	r0, [r3, #8]
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	687a      	ldr	r2, [r7, #4]
 8014df0:	68b9      	ldr	r1, [r7, #8]
 8014df2:	47a0      	blx	r4
 8014df4:	4603      	mov	r3, r0
 8014df6:	75fb      	strb	r3, [r7, #23]
  return res;
 8014df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	371c      	adds	r7, #28
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd90      	pop	{r4, r7, pc}
 8014e02:	bf00      	nop
 8014e04:	24000b58 	.word	0x24000b58

08014e08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b084      	sub	sp, #16
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	4603      	mov	r3, r0
 8014e10:	603a      	str	r2, [r7, #0]
 8014e12:	71fb      	strb	r3, [r7, #7]
 8014e14:	460b      	mov	r3, r1
 8014e16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014e18:	79fb      	ldrb	r3, [r7, #7]
 8014e1a:	4a09      	ldr	r2, [pc, #36]	; (8014e40 <disk_ioctl+0x38>)
 8014e1c:	009b      	lsls	r3, r3, #2
 8014e1e:	4413      	add	r3, r2
 8014e20:	685b      	ldr	r3, [r3, #4]
 8014e22:	691b      	ldr	r3, [r3, #16]
 8014e24:	79fa      	ldrb	r2, [r7, #7]
 8014e26:	4906      	ldr	r1, [pc, #24]	; (8014e40 <disk_ioctl+0x38>)
 8014e28:	440a      	add	r2, r1
 8014e2a:	7a10      	ldrb	r0, [r2, #8]
 8014e2c:	79b9      	ldrb	r1, [r7, #6]
 8014e2e:	683a      	ldr	r2, [r7, #0]
 8014e30:	4798      	blx	r3
 8014e32:	4603      	mov	r3, r0
 8014e34:	73fb      	strb	r3, [r7, #15]
  return res;
 8014e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e38:	4618      	mov	r0, r3
 8014e3a:	3710      	adds	r7, #16
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	24000b58 	.word	0x24000b58

08014e44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014e44:	b480      	push	{r7}
 8014e46:	b085      	sub	sp, #20
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	3301      	adds	r3, #1
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014e54:	89fb      	ldrh	r3, [r7, #14]
 8014e56:	021b      	lsls	r3, r3, #8
 8014e58:	b21a      	sxth	r2, r3
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	781b      	ldrb	r3, [r3, #0]
 8014e5e:	b21b      	sxth	r3, r3
 8014e60:	4313      	orrs	r3, r2
 8014e62:	b21b      	sxth	r3, r3
 8014e64:	81fb      	strh	r3, [r7, #14]
	return rv;
 8014e66:	89fb      	ldrh	r3, [r7, #14]
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	3714      	adds	r7, #20
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e72:	4770      	bx	lr

08014e74 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014e74:	b480      	push	{r7}
 8014e76:	b085      	sub	sp, #20
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	3303      	adds	r3, #3
 8014e80:	781b      	ldrb	r3, [r3, #0]
 8014e82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	021b      	lsls	r3, r3, #8
 8014e88:	687a      	ldr	r2, [r7, #4]
 8014e8a:	3202      	adds	r2, #2
 8014e8c:	7812      	ldrb	r2, [r2, #0]
 8014e8e:	4313      	orrs	r3, r2
 8014e90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	021b      	lsls	r3, r3, #8
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	3201      	adds	r2, #1
 8014e9a:	7812      	ldrb	r2, [r2, #0]
 8014e9c:	4313      	orrs	r3, r2
 8014e9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	021b      	lsls	r3, r3, #8
 8014ea4:	687a      	ldr	r2, [r7, #4]
 8014ea6:	7812      	ldrb	r2, [r2, #0]
 8014ea8:	4313      	orrs	r3, r2
 8014eaa:	60fb      	str	r3, [r7, #12]
	return rv;
 8014eac:	68fb      	ldr	r3, [r7, #12]
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3714      	adds	r7, #20
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb8:	4770      	bx	lr

08014eba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014eba:	b480      	push	{r7}
 8014ebc:	b083      	sub	sp, #12
 8014ebe:	af00      	add	r7, sp, #0
 8014ec0:	6078      	str	r0, [r7, #4]
 8014ec2:	460b      	mov	r3, r1
 8014ec4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	1c5a      	adds	r2, r3, #1
 8014eca:	607a      	str	r2, [r7, #4]
 8014ecc:	887a      	ldrh	r2, [r7, #2]
 8014ece:	b2d2      	uxtb	r2, r2
 8014ed0:	701a      	strb	r2, [r3, #0]
 8014ed2:	887b      	ldrh	r3, [r7, #2]
 8014ed4:	0a1b      	lsrs	r3, r3, #8
 8014ed6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	1c5a      	adds	r2, r3, #1
 8014edc:	607a      	str	r2, [r7, #4]
 8014ede:	887a      	ldrh	r2, [r7, #2]
 8014ee0:	b2d2      	uxtb	r2, r2
 8014ee2:	701a      	strb	r2, [r3, #0]
}
 8014ee4:	bf00      	nop
 8014ee6:	370c      	adds	r7, #12
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eee:	4770      	bx	lr

08014ef0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014ef0:	b480      	push	{r7}
 8014ef2:	b083      	sub	sp, #12
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	1c5a      	adds	r2, r3, #1
 8014efe:	607a      	str	r2, [r7, #4]
 8014f00:	683a      	ldr	r2, [r7, #0]
 8014f02:	b2d2      	uxtb	r2, r2
 8014f04:	701a      	strb	r2, [r3, #0]
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	0a1b      	lsrs	r3, r3, #8
 8014f0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	1c5a      	adds	r2, r3, #1
 8014f10:	607a      	str	r2, [r7, #4]
 8014f12:	683a      	ldr	r2, [r7, #0]
 8014f14:	b2d2      	uxtb	r2, r2
 8014f16:	701a      	strb	r2, [r3, #0]
 8014f18:	683b      	ldr	r3, [r7, #0]
 8014f1a:	0a1b      	lsrs	r3, r3, #8
 8014f1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	1c5a      	adds	r2, r3, #1
 8014f22:	607a      	str	r2, [r7, #4]
 8014f24:	683a      	ldr	r2, [r7, #0]
 8014f26:	b2d2      	uxtb	r2, r2
 8014f28:	701a      	strb	r2, [r3, #0]
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	0a1b      	lsrs	r3, r3, #8
 8014f2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	1c5a      	adds	r2, r3, #1
 8014f34:	607a      	str	r2, [r7, #4]
 8014f36:	683a      	ldr	r2, [r7, #0]
 8014f38:	b2d2      	uxtb	r2, r2
 8014f3a:	701a      	strb	r2, [r3, #0]
}
 8014f3c:	bf00      	nop
 8014f3e:	370c      	adds	r7, #12
 8014f40:	46bd      	mov	sp, r7
 8014f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f46:	4770      	bx	lr

08014f48 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014f48:	b480      	push	{r7}
 8014f4a:	b087      	sub	sp, #28
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	60f8      	str	r0, [r7, #12]
 8014f50:	60b9      	str	r1, [r7, #8]
 8014f52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014f58:	68bb      	ldr	r3, [r7, #8]
 8014f5a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d00d      	beq.n	8014f7e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014f62:	693a      	ldr	r2, [r7, #16]
 8014f64:	1c53      	adds	r3, r2, #1
 8014f66:	613b      	str	r3, [r7, #16]
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	1c59      	adds	r1, r3, #1
 8014f6c:	6179      	str	r1, [r7, #20]
 8014f6e:	7812      	ldrb	r2, [r2, #0]
 8014f70:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	3b01      	subs	r3, #1
 8014f76:	607b      	str	r3, [r7, #4]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d1f1      	bne.n	8014f62 <mem_cpy+0x1a>
	}
}
 8014f7e:	bf00      	nop
 8014f80:	371c      	adds	r7, #28
 8014f82:	46bd      	mov	sp, r7
 8014f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f88:	4770      	bx	lr

08014f8a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014f8a:	b480      	push	{r7}
 8014f8c:	b087      	sub	sp, #28
 8014f8e:	af00      	add	r7, sp, #0
 8014f90:	60f8      	str	r0, [r7, #12]
 8014f92:	60b9      	str	r1, [r7, #8]
 8014f94:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014f9a:	697b      	ldr	r3, [r7, #20]
 8014f9c:	1c5a      	adds	r2, r3, #1
 8014f9e:	617a      	str	r2, [r7, #20]
 8014fa0:	68ba      	ldr	r2, [r7, #8]
 8014fa2:	b2d2      	uxtb	r2, r2
 8014fa4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	3b01      	subs	r3, #1
 8014faa:	607b      	str	r3, [r7, #4]
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d1f3      	bne.n	8014f9a <mem_set+0x10>
}
 8014fb2:	bf00      	nop
 8014fb4:	371c      	adds	r7, #28
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fbc:	4770      	bx	lr

08014fbe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014fbe:	b480      	push	{r7}
 8014fc0:	b089      	sub	sp, #36	; 0x24
 8014fc2:	af00      	add	r7, sp, #0
 8014fc4:	60f8      	str	r0, [r7, #12]
 8014fc6:	60b9      	str	r1, [r7, #8]
 8014fc8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	61fb      	str	r3, [r7, #28]
 8014fce:	68bb      	ldr	r3, [r7, #8]
 8014fd0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014fd6:	69fb      	ldr	r3, [r7, #28]
 8014fd8:	1c5a      	adds	r2, r3, #1
 8014fda:	61fa      	str	r2, [r7, #28]
 8014fdc:	781b      	ldrb	r3, [r3, #0]
 8014fde:	4619      	mov	r1, r3
 8014fe0:	69bb      	ldr	r3, [r7, #24]
 8014fe2:	1c5a      	adds	r2, r3, #1
 8014fe4:	61ba      	str	r2, [r7, #24]
 8014fe6:	781b      	ldrb	r3, [r3, #0]
 8014fe8:	1acb      	subs	r3, r1, r3
 8014fea:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	3b01      	subs	r3, #1
 8014ff0:	607b      	str	r3, [r7, #4]
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d002      	beq.n	8014ffe <mem_cmp+0x40>
 8014ff8:	697b      	ldr	r3, [r7, #20]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d0eb      	beq.n	8014fd6 <mem_cmp+0x18>

	return r;
 8014ffe:	697b      	ldr	r3, [r7, #20]
}
 8015000:	4618      	mov	r0, r3
 8015002:	3724      	adds	r7, #36	; 0x24
 8015004:	46bd      	mov	sp, r7
 8015006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500a:	4770      	bx	lr

0801500c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801500c:	b480      	push	{r7}
 801500e:	b083      	sub	sp, #12
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
 8015014:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8015016:	e002      	b.n	801501e <chk_chr+0x12>
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	3301      	adds	r3, #1
 801501c:	607b      	str	r3, [r7, #4]
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	781b      	ldrb	r3, [r3, #0]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d005      	beq.n	8015032 <chk_chr+0x26>
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	781b      	ldrb	r3, [r3, #0]
 801502a:	461a      	mov	r2, r3
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	4293      	cmp	r3, r2
 8015030:	d1f2      	bne.n	8015018 <chk_chr+0xc>
	return *str;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	781b      	ldrb	r3, [r3, #0]
}
 8015036:	4618      	mov	r0, r3
 8015038:	370c      	adds	r7, #12
 801503a:	46bd      	mov	sp, r7
 801503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015040:	4770      	bx	lr
	...

08015044 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015044:	b480      	push	{r7}
 8015046:	b085      	sub	sp, #20
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801504e:	2300      	movs	r3, #0
 8015050:	60bb      	str	r3, [r7, #8]
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	60fb      	str	r3, [r7, #12]
 8015056:	e029      	b.n	80150ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8015058:	4a27      	ldr	r2, [pc, #156]	; (80150f8 <chk_lock+0xb4>)
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	011b      	lsls	r3, r3, #4
 801505e:	4413      	add	r3, r2
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d01d      	beq.n	80150a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015066:	4a24      	ldr	r2, [pc, #144]	; (80150f8 <chk_lock+0xb4>)
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	011b      	lsls	r3, r3, #4
 801506c:	4413      	add	r3, r2
 801506e:	681a      	ldr	r2, [r3, #0]
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	429a      	cmp	r2, r3
 8015076:	d116      	bne.n	80150a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8015078:	4a1f      	ldr	r2, [pc, #124]	; (80150f8 <chk_lock+0xb4>)
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	011b      	lsls	r3, r3, #4
 801507e:	4413      	add	r3, r2
 8015080:	3304      	adds	r3, #4
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015088:	429a      	cmp	r2, r3
 801508a:	d10c      	bne.n	80150a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801508c:	4a1a      	ldr	r2, [pc, #104]	; (80150f8 <chk_lock+0xb4>)
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	011b      	lsls	r3, r3, #4
 8015092:	4413      	add	r3, r2
 8015094:	3308      	adds	r3, #8
 8015096:	681a      	ldr	r2, [r3, #0]
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801509c:	429a      	cmp	r2, r3
 801509e:	d102      	bne.n	80150a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80150a0:	e007      	b.n	80150b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80150a2:	2301      	movs	r3, #1
 80150a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	3301      	adds	r3, #1
 80150aa:	60fb      	str	r3, [r7, #12]
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	2b01      	cmp	r3, #1
 80150b0:	d9d2      	bls.n	8015058 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	2b02      	cmp	r3, #2
 80150b6:	d109      	bne.n	80150cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80150b8:	68bb      	ldr	r3, [r7, #8]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d102      	bne.n	80150c4 <chk_lock+0x80>
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	2b02      	cmp	r3, #2
 80150c2:	d101      	bne.n	80150c8 <chk_lock+0x84>
 80150c4:	2300      	movs	r3, #0
 80150c6:	e010      	b.n	80150ea <chk_lock+0xa6>
 80150c8:	2312      	movs	r3, #18
 80150ca:	e00e      	b.n	80150ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d108      	bne.n	80150e4 <chk_lock+0xa0>
 80150d2:	4a09      	ldr	r2, [pc, #36]	; (80150f8 <chk_lock+0xb4>)
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	011b      	lsls	r3, r3, #4
 80150d8:	4413      	add	r3, r2
 80150da:	330c      	adds	r3, #12
 80150dc:	881b      	ldrh	r3, [r3, #0]
 80150de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80150e2:	d101      	bne.n	80150e8 <chk_lock+0xa4>
 80150e4:	2310      	movs	r3, #16
 80150e6:	e000      	b.n	80150ea <chk_lock+0xa6>
 80150e8:	2300      	movs	r3, #0
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	3714      	adds	r7, #20
 80150ee:	46bd      	mov	sp, r7
 80150f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f4:	4770      	bx	lr
 80150f6:	bf00      	nop
 80150f8:	24000b38 	.word	0x24000b38

080150fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80150fc:	b480      	push	{r7}
 80150fe:	b083      	sub	sp, #12
 8015100:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015102:	2300      	movs	r3, #0
 8015104:	607b      	str	r3, [r7, #4]
 8015106:	e002      	b.n	801510e <enq_lock+0x12>
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	3301      	adds	r3, #1
 801510c:	607b      	str	r3, [r7, #4]
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	2b01      	cmp	r3, #1
 8015112:	d806      	bhi.n	8015122 <enq_lock+0x26>
 8015114:	4a09      	ldr	r2, [pc, #36]	; (801513c <enq_lock+0x40>)
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	011b      	lsls	r3, r3, #4
 801511a:	4413      	add	r3, r2
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d1f2      	bne.n	8015108 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	2b02      	cmp	r3, #2
 8015126:	bf14      	ite	ne
 8015128:	2301      	movne	r3, #1
 801512a:	2300      	moveq	r3, #0
 801512c:	b2db      	uxtb	r3, r3
}
 801512e:	4618      	mov	r0, r3
 8015130:	370c      	adds	r7, #12
 8015132:	46bd      	mov	sp, r7
 8015134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015138:	4770      	bx	lr
 801513a:	bf00      	nop
 801513c:	24000b38 	.word	0x24000b38

08015140 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015140:	b480      	push	{r7}
 8015142:	b085      	sub	sp, #20
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
 8015148:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801514a:	2300      	movs	r3, #0
 801514c:	60fb      	str	r3, [r7, #12]
 801514e:	e01f      	b.n	8015190 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015150:	4a41      	ldr	r2, [pc, #260]	; (8015258 <inc_lock+0x118>)
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	011b      	lsls	r3, r3, #4
 8015156:	4413      	add	r3, r2
 8015158:	681a      	ldr	r2, [r3, #0]
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	429a      	cmp	r2, r3
 8015160:	d113      	bne.n	801518a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8015162:	4a3d      	ldr	r2, [pc, #244]	; (8015258 <inc_lock+0x118>)
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	011b      	lsls	r3, r3, #4
 8015168:	4413      	add	r3, r2
 801516a:	3304      	adds	r3, #4
 801516c:	681a      	ldr	r2, [r3, #0]
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8015172:	429a      	cmp	r2, r3
 8015174:	d109      	bne.n	801518a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8015176:	4a38      	ldr	r2, [pc, #224]	; (8015258 <inc_lock+0x118>)
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	011b      	lsls	r3, r3, #4
 801517c:	4413      	add	r3, r2
 801517e:	3308      	adds	r3, #8
 8015180:	681a      	ldr	r2, [r3, #0]
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8015186:	429a      	cmp	r2, r3
 8015188:	d006      	beq.n	8015198 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	3301      	adds	r3, #1
 801518e:	60fb      	str	r3, [r7, #12]
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	2b01      	cmp	r3, #1
 8015194:	d9dc      	bls.n	8015150 <inc_lock+0x10>
 8015196:	e000      	b.n	801519a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8015198:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	2b02      	cmp	r3, #2
 801519e:	d132      	bne.n	8015206 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80151a0:	2300      	movs	r3, #0
 80151a2:	60fb      	str	r3, [r7, #12]
 80151a4:	e002      	b.n	80151ac <inc_lock+0x6c>
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	3301      	adds	r3, #1
 80151aa:	60fb      	str	r3, [r7, #12]
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	2b01      	cmp	r3, #1
 80151b0:	d806      	bhi.n	80151c0 <inc_lock+0x80>
 80151b2:	4a29      	ldr	r2, [pc, #164]	; (8015258 <inc_lock+0x118>)
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	011b      	lsls	r3, r3, #4
 80151b8:	4413      	add	r3, r2
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d1f2      	bne.n	80151a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	2b02      	cmp	r3, #2
 80151c4:	d101      	bne.n	80151ca <inc_lock+0x8a>
 80151c6:	2300      	movs	r3, #0
 80151c8:	e040      	b.n	801524c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	681a      	ldr	r2, [r3, #0]
 80151ce:	4922      	ldr	r1, [pc, #136]	; (8015258 <inc_lock+0x118>)
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	011b      	lsls	r3, r3, #4
 80151d4:	440b      	add	r3, r1
 80151d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	689a      	ldr	r2, [r3, #8]
 80151dc:	491e      	ldr	r1, [pc, #120]	; (8015258 <inc_lock+0x118>)
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	011b      	lsls	r3, r3, #4
 80151e2:	440b      	add	r3, r1
 80151e4:	3304      	adds	r3, #4
 80151e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	695a      	ldr	r2, [r3, #20]
 80151ec:	491a      	ldr	r1, [pc, #104]	; (8015258 <inc_lock+0x118>)
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	011b      	lsls	r3, r3, #4
 80151f2:	440b      	add	r3, r1
 80151f4:	3308      	adds	r3, #8
 80151f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80151f8:	4a17      	ldr	r2, [pc, #92]	; (8015258 <inc_lock+0x118>)
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	011b      	lsls	r3, r3, #4
 80151fe:	4413      	add	r3, r2
 8015200:	330c      	adds	r3, #12
 8015202:	2200      	movs	r2, #0
 8015204:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d009      	beq.n	8015220 <inc_lock+0xe0>
 801520c:	4a12      	ldr	r2, [pc, #72]	; (8015258 <inc_lock+0x118>)
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	011b      	lsls	r3, r3, #4
 8015212:	4413      	add	r3, r2
 8015214:	330c      	adds	r3, #12
 8015216:	881b      	ldrh	r3, [r3, #0]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d001      	beq.n	8015220 <inc_lock+0xe0>
 801521c:	2300      	movs	r3, #0
 801521e:	e015      	b.n	801524c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015220:	683b      	ldr	r3, [r7, #0]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d108      	bne.n	8015238 <inc_lock+0xf8>
 8015226:	4a0c      	ldr	r2, [pc, #48]	; (8015258 <inc_lock+0x118>)
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	011b      	lsls	r3, r3, #4
 801522c:	4413      	add	r3, r2
 801522e:	330c      	adds	r3, #12
 8015230:	881b      	ldrh	r3, [r3, #0]
 8015232:	3301      	adds	r3, #1
 8015234:	b29a      	uxth	r2, r3
 8015236:	e001      	b.n	801523c <inc_lock+0xfc>
 8015238:	f44f 7280 	mov.w	r2, #256	; 0x100
 801523c:	4906      	ldr	r1, [pc, #24]	; (8015258 <inc_lock+0x118>)
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	011b      	lsls	r3, r3, #4
 8015242:	440b      	add	r3, r1
 8015244:	330c      	adds	r3, #12
 8015246:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	3301      	adds	r3, #1
}
 801524c:	4618      	mov	r0, r3
 801524e:	3714      	adds	r7, #20
 8015250:	46bd      	mov	sp, r7
 8015252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015256:	4770      	bx	lr
 8015258:	24000b38 	.word	0x24000b38

0801525c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801525c:	b480      	push	{r7}
 801525e:	b085      	sub	sp, #20
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	3b01      	subs	r3, #1
 8015268:	607b      	str	r3, [r7, #4]
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2b01      	cmp	r3, #1
 801526e:	d825      	bhi.n	80152bc <dec_lock+0x60>
		n = Files[i].ctr;
 8015270:	4a17      	ldr	r2, [pc, #92]	; (80152d0 <dec_lock+0x74>)
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	011b      	lsls	r3, r3, #4
 8015276:	4413      	add	r3, r2
 8015278:	330c      	adds	r3, #12
 801527a:	881b      	ldrh	r3, [r3, #0]
 801527c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801527e:	89fb      	ldrh	r3, [r7, #14]
 8015280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015284:	d101      	bne.n	801528a <dec_lock+0x2e>
 8015286:	2300      	movs	r3, #0
 8015288:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801528a:	89fb      	ldrh	r3, [r7, #14]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d002      	beq.n	8015296 <dec_lock+0x3a>
 8015290:	89fb      	ldrh	r3, [r7, #14]
 8015292:	3b01      	subs	r3, #1
 8015294:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8015296:	4a0e      	ldr	r2, [pc, #56]	; (80152d0 <dec_lock+0x74>)
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	011b      	lsls	r3, r3, #4
 801529c:	4413      	add	r3, r2
 801529e:	330c      	adds	r3, #12
 80152a0:	89fa      	ldrh	r2, [r7, #14]
 80152a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80152a4:	89fb      	ldrh	r3, [r7, #14]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d105      	bne.n	80152b6 <dec_lock+0x5a>
 80152aa:	4a09      	ldr	r2, [pc, #36]	; (80152d0 <dec_lock+0x74>)
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	011b      	lsls	r3, r3, #4
 80152b0:	4413      	add	r3, r2
 80152b2:	2200      	movs	r2, #0
 80152b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80152b6:	2300      	movs	r3, #0
 80152b8:	737b      	strb	r3, [r7, #13]
 80152ba:	e001      	b.n	80152c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80152bc:	2302      	movs	r3, #2
 80152be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80152c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	3714      	adds	r7, #20
 80152c6:	46bd      	mov	sp, r7
 80152c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152cc:	4770      	bx	lr
 80152ce:	bf00      	nop
 80152d0:	24000b38 	.word	0x24000b38

080152d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80152d4:	b480      	push	{r7}
 80152d6:	b085      	sub	sp, #20
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80152dc:	2300      	movs	r3, #0
 80152de:	60fb      	str	r3, [r7, #12]
 80152e0:	e010      	b.n	8015304 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80152e2:	4a0d      	ldr	r2, [pc, #52]	; (8015318 <clear_lock+0x44>)
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	011b      	lsls	r3, r3, #4
 80152e8:	4413      	add	r3, r2
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	687a      	ldr	r2, [r7, #4]
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d105      	bne.n	80152fe <clear_lock+0x2a>
 80152f2:	4a09      	ldr	r2, [pc, #36]	; (8015318 <clear_lock+0x44>)
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	011b      	lsls	r3, r3, #4
 80152f8:	4413      	add	r3, r2
 80152fa:	2200      	movs	r2, #0
 80152fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	3301      	adds	r3, #1
 8015302:	60fb      	str	r3, [r7, #12]
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	2b01      	cmp	r3, #1
 8015308:	d9eb      	bls.n	80152e2 <clear_lock+0xe>
	}
}
 801530a:	bf00      	nop
 801530c:	3714      	adds	r7, #20
 801530e:	46bd      	mov	sp, r7
 8015310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015314:	4770      	bx	lr
 8015316:	bf00      	nop
 8015318:	24000b38 	.word	0x24000b38

0801531c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b086      	sub	sp, #24
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015324:	2300      	movs	r3, #0
 8015326:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	78db      	ldrb	r3, [r3, #3]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d034      	beq.n	801539a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015334:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	7858      	ldrb	r0, [r3, #1]
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015340:	2301      	movs	r3, #1
 8015342:	697a      	ldr	r2, [r7, #20]
 8015344:	f7ff fd40 	bl	8014dc8 <disk_write>
 8015348:	4603      	mov	r3, r0
 801534a:	2b00      	cmp	r3, #0
 801534c:	d002      	beq.n	8015354 <sync_window+0x38>
			res = FR_DISK_ERR;
 801534e:	2301      	movs	r3, #1
 8015350:	73fb      	strb	r3, [r7, #15]
 8015352:	e022      	b.n	801539a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2200      	movs	r2, #0
 8015358:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	6a1b      	ldr	r3, [r3, #32]
 801535e:	697a      	ldr	r2, [r7, #20]
 8015360:	1ad2      	subs	r2, r2, r3
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	699b      	ldr	r3, [r3, #24]
 8015366:	429a      	cmp	r2, r3
 8015368:	d217      	bcs.n	801539a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	789b      	ldrb	r3, [r3, #2]
 801536e:	613b      	str	r3, [r7, #16]
 8015370:	e010      	b.n	8015394 <sync_window+0x78>
					wsect += fs->fsize;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	699b      	ldr	r3, [r3, #24]
 8015376:	697a      	ldr	r2, [r7, #20]
 8015378:	4413      	add	r3, r2
 801537a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	7858      	ldrb	r0, [r3, #1]
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015386:	2301      	movs	r3, #1
 8015388:	697a      	ldr	r2, [r7, #20]
 801538a:	f7ff fd1d 	bl	8014dc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801538e:	693b      	ldr	r3, [r7, #16]
 8015390:	3b01      	subs	r3, #1
 8015392:	613b      	str	r3, [r7, #16]
 8015394:	693b      	ldr	r3, [r7, #16]
 8015396:	2b01      	cmp	r3, #1
 8015398:	d8eb      	bhi.n	8015372 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801539a:	7bfb      	ldrb	r3, [r7, #15]
}
 801539c:	4618      	mov	r0, r3
 801539e:	3718      	adds	r7, #24
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}

080153a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b084      	sub	sp, #16
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
 80153ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80153ae:	2300      	movs	r3, #0
 80153b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153b6:	683a      	ldr	r2, [r7, #0]
 80153b8:	429a      	cmp	r2, r3
 80153ba:	d01b      	beq.n	80153f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80153bc:	6878      	ldr	r0, [r7, #4]
 80153be:	f7ff ffad 	bl	801531c <sync_window>
 80153c2:	4603      	mov	r3, r0
 80153c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80153c6:	7bfb      	ldrb	r3, [r7, #15]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d113      	bne.n	80153f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	7858      	ldrb	r0, [r3, #1]
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80153d6:	2301      	movs	r3, #1
 80153d8:	683a      	ldr	r2, [r7, #0]
 80153da:	f7ff fcd5 	bl	8014d88 <disk_read>
 80153de:	4603      	mov	r3, r0
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d004      	beq.n	80153ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80153e4:	f04f 33ff 	mov.w	r3, #4294967295
 80153e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80153ea:	2301      	movs	r3, #1
 80153ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	683a      	ldr	r2, [r7, #0]
 80153f2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80153f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80153f6:	4618      	mov	r0, r3
 80153f8:	3710      	adds	r7, #16
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}
	...

08015400 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	f7ff ff87 	bl	801531c <sync_window>
 801540e:	4603      	mov	r3, r0
 8015410:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015412:	7bfb      	ldrb	r3, [r7, #15]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d158      	bne.n	80154ca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	781b      	ldrb	r3, [r3, #0]
 801541c:	2b03      	cmp	r3, #3
 801541e:	d148      	bne.n	80154b2 <sync_fs+0xb2>
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	791b      	ldrb	r3, [r3, #4]
 8015424:	2b01      	cmp	r3, #1
 8015426:	d144      	bne.n	80154b2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	3330      	adds	r3, #48	; 0x30
 801542c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015430:	2100      	movs	r1, #0
 8015432:	4618      	mov	r0, r3
 8015434:	f7ff fda9 	bl	8014f8a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	3330      	adds	r3, #48	; 0x30
 801543c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015440:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015444:	4618      	mov	r0, r3
 8015446:	f7ff fd38 	bl	8014eba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	3330      	adds	r3, #48	; 0x30
 801544e:	4921      	ldr	r1, [pc, #132]	; (80154d4 <sync_fs+0xd4>)
 8015450:	4618      	mov	r0, r3
 8015452:	f7ff fd4d 	bl	8014ef0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	3330      	adds	r3, #48	; 0x30
 801545a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801545e:	491e      	ldr	r1, [pc, #120]	; (80154d8 <sync_fs+0xd8>)
 8015460:	4618      	mov	r0, r3
 8015462:	f7ff fd45 	bl	8014ef0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	3330      	adds	r3, #48	; 0x30
 801546a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	691b      	ldr	r3, [r3, #16]
 8015472:	4619      	mov	r1, r3
 8015474:	4610      	mov	r0, r2
 8015476:	f7ff fd3b 	bl	8014ef0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	3330      	adds	r3, #48	; 0x30
 801547e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	68db      	ldr	r3, [r3, #12]
 8015486:	4619      	mov	r1, r3
 8015488:	4610      	mov	r0, r2
 801548a:	f7ff fd31 	bl	8014ef0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	69db      	ldr	r3, [r3, #28]
 8015492:	1c5a      	adds	r2, r3, #1
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	7858      	ldrb	r0, [r3, #1]
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154a6:	2301      	movs	r3, #1
 80154a8:	f7ff fc8e 	bl	8014dc8 <disk_write>
			fs->fsi_flag = 0;
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2200      	movs	r2, #0
 80154b0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	785b      	ldrb	r3, [r3, #1]
 80154b6:	2200      	movs	r2, #0
 80154b8:	2100      	movs	r1, #0
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7ff fca4 	bl	8014e08 <disk_ioctl>
 80154c0:	4603      	mov	r3, r0
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d001      	beq.n	80154ca <sync_fs+0xca>
 80154c6:	2301      	movs	r3, #1
 80154c8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80154ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80154cc:	4618      	mov	r0, r3
 80154ce:	3710      	adds	r7, #16
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}
 80154d4:	41615252 	.word	0x41615252
 80154d8:	61417272 	.word	0x61417272

080154dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80154dc:	b480      	push	{r7}
 80154de:	b083      	sub	sp, #12
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
 80154e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80154e6:	683b      	ldr	r3, [r7, #0]
 80154e8:	3b02      	subs	r3, #2
 80154ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	695b      	ldr	r3, [r3, #20]
 80154f0:	3b02      	subs	r3, #2
 80154f2:	683a      	ldr	r2, [r7, #0]
 80154f4:	429a      	cmp	r2, r3
 80154f6:	d301      	bcc.n	80154fc <clust2sect+0x20>
 80154f8:	2300      	movs	r3, #0
 80154fa:	e008      	b.n	801550e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	895b      	ldrh	r3, [r3, #10]
 8015500:	461a      	mov	r2, r3
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	fb03 f202 	mul.w	r2, r3, r2
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801550c:	4413      	add	r3, r2
}
 801550e:	4618      	mov	r0, r3
 8015510:	370c      	adds	r7, #12
 8015512:	46bd      	mov	sp, r7
 8015514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015518:	4770      	bx	lr

0801551a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801551a:	b580      	push	{r7, lr}
 801551c:	b086      	sub	sp, #24
 801551e:	af00      	add	r7, sp, #0
 8015520:	6078      	str	r0, [r7, #4]
 8015522:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801552a:	683b      	ldr	r3, [r7, #0]
 801552c:	2b01      	cmp	r3, #1
 801552e:	d904      	bls.n	801553a <get_fat+0x20>
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	695b      	ldr	r3, [r3, #20]
 8015534:	683a      	ldr	r2, [r7, #0]
 8015536:	429a      	cmp	r2, r3
 8015538:	d302      	bcc.n	8015540 <get_fat+0x26>
		val = 1;	/* Internal error */
 801553a:	2301      	movs	r3, #1
 801553c:	617b      	str	r3, [r7, #20]
 801553e:	e08c      	b.n	801565a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015540:	f04f 33ff 	mov.w	r3, #4294967295
 8015544:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	781b      	ldrb	r3, [r3, #0]
 801554a:	2b02      	cmp	r3, #2
 801554c:	d045      	beq.n	80155da <get_fat+0xc0>
 801554e:	2b03      	cmp	r3, #3
 8015550:	d05d      	beq.n	801560e <get_fat+0xf4>
 8015552:	2b01      	cmp	r3, #1
 8015554:	d177      	bne.n	8015646 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	60fb      	str	r3, [r7, #12]
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	085b      	lsrs	r3, r3, #1
 801555e:	68fa      	ldr	r2, [r7, #12]
 8015560:	4413      	add	r3, r2
 8015562:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	6a1a      	ldr	r2, [r3, #32]
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	0a5b      	lsrs	r3, r3, #9
 801556c:	4413      	add	r3, r2
 801556e:	4619      	mov	r1, r3
 8015570:	6938      	ldr	r0, [r7, #16]
 8015572:	f7ff ff17 	bl	80153a4 <move_window>
 8015576:	4603      	mov	r3, r0
 8015578:	2b00      	cmp	r3, #0
 801557a:	d167      	bne.n	801564c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	1c5a      	adds	r2, r3, #1
 8015580:	60fa      	str	r2, [r7, #12]
 8015582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015586:	693a      	ldr	r2, [r7, #16]
 8015588:	4413      	add	r3, r2
 801558a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801558e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	6a1a      	ldr	r2, [r3, #32]
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	0a5b      	lsrs	r3, r3, #9
 8015598:	4413      	add	r3, r2
 801559a:	4619      	mov	r1, r3
 801559c:	6938      	ldr	r0, [r7, #16]
 801559e:	f7ff ff01 	bl	80153a4 <move_window>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d153      	bne.n	8015650 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80155ae:	693a      	ldr	r2, [r7, #16]
 80155b0:	4413      	add	r3, r2
 80155b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80155b6:	021b      	lsls	r3, r3, #8
 80155b8:	461a      	mov	r2, r3
 80155ba:	68bb      	ldr	r3, [r7, #8]
 80155bc:	4313      	orrs	r3, r2
 80155be:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	f003 0301 	and.w	r3, r3, #1
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d002      	beq.n	80155d0 <get_fat+0xb6>
 80155ca:	68bb      	ldr	r3, [r7, #8]
 80155cc:	091b      	lsrs	r3, r3, #4
 80155ce:	e002      	b.n	80155d6 <get_fat+0xbc>
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80155d6:	617b      	str	r3, [r7, #20]
			break;
 80155d8:	e03f      	b.n	801565a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80155da:	693b      	ldr	r3, [r7, #16]
 80155dc:	6a1a      	ldr	r2, [r3, #32]
 80155de:	683b      	ldr	r3, [r7, #0]
 80155e0:	0a1b      	lsrs	r3, r3, #8
 80155e2:	4413      	add	r3, r2
 80155e4:	4619      	mov	r1, r3
 80155e6:	6938      	ldr	r0, [r7, #16]
 80155e8:	f7ff fedc 	bl	80153a4 <move_window>
 80155ec:	4603      	mov	r3, r0
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d130      	bne.n	8015654 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80155f2:	693b      	ldr	r3, [r7, #16]
 80155f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80155f8:	683b      	ldr	r3, [r7, #0]
 80155fa:	005b      	lsls	r3, r3, #1
 80155fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015600:	4413      	add	r3, r2
 8015602:	4618      	mov	r0, r3
 8015604:	f7ff fc1e 	bl	8014e44 <ld_word>
 8015608:	4603      	mov	r3, r0
 801560a:	617b      	str	r3, [r7, #20]
			break;
 801560c:	e025      	b.n	801565a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801560e:	693b      	ldr	r3, [r7, #16]
 8015610:	6a1a      	ldr	r2, [r3, #32]
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	09db      	lsrs	r3, r3, #7
 8015616:	4413      	add	r3, r2
 8015618:	4619      	mov	r1, r3
 801561a:	6938      	ldr	r0, [r7, #16]
 801561c:	f7ff fec2 	bl	80153a4 <move_window>
 8015620:	4603      	mov	r3, r0
 8015622:	2b00      	cmp	r3, #0
 8015624:	d118      	bne.n	8015658 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015626:	693b      	ldr	r3, [r7, #16]
 8015628:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	009b      	lsls	r3, r3, #2
 8015630:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015634:	4413      	add	r3, r2
 8015636:	4618      	mov	r0, r3
 8015638:	f7ff fc1c 	bl	8014e74 <ld_dword>
 801563c:	4603      	mov	r3, r0
 801563e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015642:	617b      	str	r3, [r7, #20]
			break;
 8015644:	e009      	b.n	801565a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015646:	2301      	movs	r3, #1
 8015648:	617b      	str	r3, [r7, #20]
 801564a:	e006      	b.n	801565a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801564c:	bf00      	nop
 801564e:	e004      	b.n	801565a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015650:	bf00      	nop
 8015652:	e002      	b.n	801565a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015654:	bf00      	nop
 8015656:	e000      	b.n	801565a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015658:	bf00      	nop
		}
	}

	return val;
 801565a:	697b      	ldr	r3, [r7, #20]
}
 801565c:	4618      	mov	r0, r3
 801565e:	3718      	adds	r7, #24
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}

08015664 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015664:	b590      	push	{r4, r7, lr}
 8015666:	b089      	sub	sp, #36	; 0x24
 8015668:	af00      	add	r7, sp, #0
 801566a:	60f8      	str	r0, [r7, #12]
 801566c:	60b9      	str	r1, [r7, #8]
 801566e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015670:	2302      	movs	r3, #2
 8015672:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	2b01      	cmp	r3, #1
 8015678:	f240 80d6 	bls.w	8015828 <put_fat+0x1c4>
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	695b      	ldr	r3, [r3, #20]
 8015680:	68ba      	ldr	r2, [r7, #8]
 8015682:	429a      	cmp	r2, r3
 8015684:	f080 80d0 	bcs.w	8015828 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	781b      	ldrb	r3, [r3, #0]
 801568c:	2b02      	cmp	r3, #2
 801568e:	d073      	beq.n	8015778 <put_fat+0x114>
 8015690:	2b03      	cmp	r3, #3
 8015692:	f000 8091 	beq.w	80157b8 <put_fat+0x154>
 8015696:	2b01      	cmp	r3, #1
 8015698:	f040 80c6 	bne.w	8015828 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	61bb      	str	r3, [r7, #24]
 80156a0:	69bb      	ldr	r3, [r7, #24]
 80156a2:	085b      	lsrs	r3, r3, #1
 80156a4:	69ba      	ldr	r2, [r7, #24]
 80156a6:	4413      	add	r3, r2
 80156a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	6a1a      	ldr	r2, [r3, #32]
 80156ae:	69bb      	ldr	r3, [r7, #24]
 80156b0:	0a5b      	lsrs	r3, r3, #9
 80156b2:	4413      	add	r3, r2
 80156b4:	4619      	mov	r1, r3
 80156b6:	68f8      	ldr	r0, [r7, #12]
 80156b8:	f7ff fe74 	bl	80153a4 <move_window>
 80156bc:	4603      	mov	r3, r0
 80156be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80156c0:	7ffb      	ldrb	r3, [r7, #31]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	f040 80a9 	bne.w	801581a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80156ce:	69bb      	ldr	r3, [r7, #24]
 80156d0:	1c59      	adds	r1, r3, #1
 80156d2:	61b9      	str	r1, [r7, #24]
 80156d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80156d8:	4413      	add	r3, r2
 80156da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	f003 0301 	and.w	r3, r3, #1
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d00d      	beq.n	8015702 <put_fat+0x9e>
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	781b      	ldrb	r3, [r3, #0]
 80156ea:	b25b      	sxtb	r3, r3
 80156ec:	f003 030f 	and.w	r3, r3, #15
 80156f0:	b25a      	sxtb	r2, r3
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	b2db      	uxtb	r3, r3
 80156f6:	011b      	lsls	r3, r3, #4
 80156f8:	b25b      	sxtb	r3, r3
 80156fa:	4313      	orrs	r3, r2
 80156fc:	b25b      	sxtb	r3, r3
 80156fe:	b2db      	uxtb	r3, r3
 8015700:	e001      	b.n	8015706 <put_fat+0xa2>
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	b2db      	uxtb	r3, r3
 8015706:	697a      	ldr	r2, [r7, #20]
 8015708:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	2201      	movs	r2, #1
 801570e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	6a1a      	ldr	r2, [r3, #32]
 8015714:	69bb      	ldr	r3, [r7, #24]
 8015716:	0a5b      	lsrs	r3, r3, #9
 8015718:	4413      	add	r3, r2
 801571a:	4619      	mov	r1, r3
 801571c:	68f8      	ldr	r0, [r7, #12]
 801571e:	f7ff fe41 	bl	80153a4 <move_window>
 8015722:	4603      	mov	r3, r0
 8015724:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015726:	7ffb      	ldrb	r3, [r7, #31]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d178      	bne.n	801581e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015732:	69bb      	ldr	r3, [r7, #24]
 8015734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015738:	4413      	add	r3, r2
 801573a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	f003 0301 	and.w	r3, r3, #1
 8015742:	2b00      	cmp	r3, #0
 8015744:	d003      	beq.n	801574e <put_fat+0xea>
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	091b      	lsrs	r3, r3, #4
 801574a:	b2db      	uxtb	r3, r3
 801574c:	e00e      	b.n	801576c <put_fat+0x108>
 801574e:	697b      	ldr	r3, [r7, #20]
 8015750:	781b      	ldrb	r3, [r3, #0]
 8015752:	b25b      	sxtb	r3, r3
 8015754:	f023 030f 	bic.w	r3, r3, #15
 8015758:	b25a      	sxtb	r2, r3
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	0a1b      	lsrs	r3, r3, #8
 801575e:	b25b      	sxtb	r3, r3
 8015760:	f003 030f 	and.w	r3, r3, #15
 8015764:	b25b      	sxtb	r3, r3
 8015766:	4313      	orrs	r3, r2
 8015768:	b25b      	sxtb	r3, r3
 801576a:	b2db      	uxtb	r3, r3
 801576c:	697a      	ldr	r2, [r7, #20]
 801576e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	2201      	movs	r2, #1
 8015774:	70da      	strb	r2, [r3, #3]
			break;
 8015776:	e057      	b.n	8015828 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	6a1a      	ldr	r2, [r3, #32]
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	0a1b      	lsrs	r3, r3, #8
 8015780:	4413      	add	r3, r2
 8015782:	4619      	mov	r1, r3
 8015784:	68f8      	ldr	r0, [r7, #12]
 8015786:	f7ff fe0d 	bl	80153a4 <move_window>
 801578a:	4603      	mov	r3, r0
 801578c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801578e:	7ffb      	ldrb	r3, [r7, #31]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d146      	bne.n	8015822 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801579a:	68bb      	ldr	r3, [r7, #8]
 801579c:	005b      	lsls	r3, r3, #1
 801579e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80157a2:	4413      	add	r3, r2
 80157a4:	687a      	ldr	r2, [r7, #4]
 80157a6:	b292      	uxth	r2, r2
 80157a8:	4611      	mov	r1, r2
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7ff fb85 	bl	8014eba <st_word>
			fs->wflag = 1;
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	2201      	movs	r2, #1
 80157b4:	70da      	strb	r2, [r3, #3]
			break;
 80157b6:	e037      	b.n	8015828 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	6a1a      	ldr	r2, [r3, #32]
 80157bc:	68bb      	ldr	r3, [r7, #8]
 80157be:	09db      	lsrs	r3, r3, #7
 80157c0:	4413      	add	r3, r2
 80157c2:	4619      	mov	r1, r3
 80157c4:	68f8      	ldr	r0, [r7, #12]
 80157c6:	f7ff fded 	bl	80153a4 <move_window>
 80157ca:	4603      	mov	r3, r0
 80157cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80157ce:	7ffb      	ldrb	r3, [r7, #31]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d128      	bne.n	8015826 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80157e0:	68bb      	ldr	r3, [r7, #8]
 80157e2:	009b      	lsls	r3, r3, #2
 80157e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80157e8:	4413      	add	r3, r2
 80157ea:	4618      	mov	r0, r3
 80157ec:	f7ff fb42 	bl	8014e74 <ld_dword>
 80157f0:	4603      	mov	r3, r0
 80157f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80157f6:	4323      	orrs	r3, r4
 80157f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	009b      	lsls	r3, r3, #2
 8015804:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015808:	4413      	add	r3, r2
 801580a:	6879      	ldr	r1, [r7, #4]
 801580c:	4618      	mov	r0, r3
 801580e:	f7ff fb6f 	bl	8014ef0 <st_dword>
			fs->wflag = 1;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	2201      	movs	r2, #1
 8015816:	70da      	strb	r2, [r3, #3]
			break;
 8015818:	e006      	b.n	8015828 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801581a:	bf00      	nop
 801581c:	e004      	b.n	8015828 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801581e:	bf00      	nop
 8015820:	e002      	b.n	8015828 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015822:	bf00      	nop
 8015824:	e000      	b.n	8015828 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015826:	bf00      	nop
		}
	}
	return res;
 8015828:	7ffb      	ldrb	r3, [r7, #31]
}
 801582a:	4618      	mov	r0, r3
 801582c:	3724      	adds	r7, #36	; 0x24
 801582e:	46bd      	mov	sp, r7
 8015830:	bd90      	pop	{r4, r7, pc}

08015832 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015832:	b580      	push	{r7, lr}
 8015834:	b088      	sub	sp, #32
 8015836:	af00      	add	r7, sp, #0
 8015838:	60f8      	str	r0, [r7, #12]
 801583a:	60b9      	str	r1, [r7, #8]
 801583c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801583e:	2300      	movs	r3, #0
 8015840:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	2b01      	cmp	r3, #1
 801584c:	d904      	bls.n	8015858 <remove_chain+0x26>
 801584e:	69bb      	ldr	r3, [r7, #24]
 8015850:	695b      	ldr	r3, [r3, #20]
 8015852:	68ba      	ldr	r2, [r7, #8]
 8015854:	429a      	cmp	r2, r3
 8015856:	d301      	bcc.n	801585c <remove_chain+0x2a>
 8015858:	2302      	movs	r3, #2
 801585a:	e04b      	b.n	80158f4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d00c      	beq.n	801587c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015862:	f04f 32ff 	mov.w	r2, #4294967295
 8015866:	6879      	ldr	r1, [r7, #4]
 8015868:	69b8      	ldr	r0, [r7, #24]
 801586a:	f7ff fefb 	bl	8015664 <put_fat>
 801586e:	4603      	mov	r3, r0
 8015870:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015872:	7ffb      	ldrb	r3, [r7, #31]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d001      	beq.n	801587c <remove_chain+0x4a>
 8015878:	7ffb      	ldrb	r3, [r7, #31]
 801587a:	e03b      	b.n	80158f4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801587c:	68b9      	ldr	r1, [r7, #8]
 801587e:	68f8      	ldr	r0, [r7, #12]
 8015880:	f7ff fe4b 	bl	801551a <get_fat>
 8015884:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015886:	697b      	ldr	r3, [r7, #20]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d031      	beq.n	80158f0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801588c:	697b      	ldr	r3, [r7, #20]
 801588e:	2b01      	cmp	r3, #1
 8015890:	d101      	bne.n	8015896 <remove_chain+0x64>
 8015892:	2302      	movs	r3, #2
 8015894:	e02e      	b.n	80158f4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015896:	697b      	ldr	r3, [r7, #20]
 8015898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801589c:	d101      	bne.n	80158a2 <remove_chain+0x70>
 801589e:	2301      	movs	r3, #1
 80158a0:	e028      	b.n	80158f4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80158a2:	2200      	movs	r2, #0
 80158a4:	68b9      	ldr	r1, [r7, #8]
 80158a6:	69b8      	ldr	r0, [r7, #24]
 80158a8:	f7ff fedc 	bl	8015664 <put_fat>
 80158ac:	4603      	mov	r3, r0
 80158ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80158b0:	7ffb      	ldrb	r3, [r7, #31]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d001      	beq.n	80158ba <remove_chain+0x88>
 80158b6:	7ffb      	ldrb	r3, [r7, #31]
 80158b8:	e01c      	b.n	80158f4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80158ba:	69bb      	ldr	r3, [r7, #24]
 80158bc:	691a      	ldr	r2, [r3, #16]
 80158be:	69bb      	ldr	r3, [r7, #24]
 80158c0:	695b      	ldr	r3, [r3, #20]
 80158c2:	3b02      	subs	r3, #2
 80158c4:	429a      	cmp	r2, r3
 80158c6:	d20b      	bcs.n	80158e0 <remove_chain+0xae>
			fs->free_clst++;
 80158c8:	69bb      	ldr	r3, [r7, #24]
 80158ca:	691b      	ldr	r3, [r3, #16]
 80158cc:	1c5a      	adds	r2, r3, #1
 80158ce:	69bb      	ldr	r3, [r7, #24]
 80158d0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80158d2:	69bb      	ldr	r3, [r7, #24]
 80158d4:	791b      	ldrb	r3, [r3, #4]
 80158d6:	f043 0301 	orr.w	r3, r3, #1
 80158da:	b2da      	uxtb	r2, r3
 80158dc:	69bb      	ldr	r3, [r7, #24]
 80158de:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80158e0:	697b      	ldr	r3, [r7, #20]
 80158e2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80158e4:	69bb      	ldr	r3, [r7, #24]
 80158e6:	695b      	ldr	r3, [r3, #20]
 80158e8:	68ba      	ldr	r2, [r7, #8]
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d3c6      	bcc.n	801587c <remove_chain+0x4a>
 80158ee:	e000      	b.n	80158f2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80158f0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80158f2:	2300      	movs	r3, #0
}
 80158f4:	4618      	mov	r0, r3
 80158f6:	3720      	adds	r7, #32
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}

080158fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b088      	sub	sp, #32
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
 8015904:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801590c:	683b      	ldr	r3, [r7, #0]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d10d      	bne.n	801592e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015912:	693b      	ldr	r3, [r7, #16]
 8015914:	68db      	ldr	r3, [r3, #12]
 8015916:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015918:	69bb      	ldr	r3, [r7, #24]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d004      	beq.n	8015928 <create_chain+0x2c>
 801591e:	693b      	ldr	r3, [r7, #16]
 8015920:	695b      	ldr	r3, [r3, #20]
 8015922:	69ba      	ldr	r2, [r7, #24]
 8015924:	429a      	cmp	r2, r3
 8015926:	d31b      	bcc.n	8015960 <create_chain+0x64>
 8015928:	2301      	movs	r3, #1
 801592a:	61bb      	str	r3, [r7, #24]
 801592c:	e018      	b.n	8015960 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801592e:	6839      	ldr	r1, [r7, #0]
 8015930:	6878      	ldr	r0, [r7, #4]
 8015932:	f7ff fdf2 	bl	801551a <get_fat>
 8015936:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	2b01      	cmp	r3, #1
 801593c:	d801      	bhi.n	8015942 <create_chain+0x46>
 801593e:	2301      	movs	r3, #1
 8015940:	e070      	b.n	8015a24 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015948:	d101      	bne.n	801594e <create_chain+0x52>
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	e06a      	b.n	8015a24 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801594e:	693b      	ldr	r3, [r7, #16]
 8015950:	695b      	ldr	r3, [r3, #20]
 8015952:	68fa      	ldr	r2, [r7, #12]
 8015954:	429a      	cmp	r2, r3
 8015956:	d201      	bcs.n	801595c <create_chain+0x60>
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	e063      	b.n	8015a24 <create_chain+0x128>
		scl = clst;
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015960:	69bb      	ldr	r3, [r7, #24]
 8015962:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015964:	69fb      	ldr	r3, [r7, #28]
 8015966:	3301      	adds	r3, #1
 8015968:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801596a:	693b      	ldr	r3, [r7, #16]
 801596c:	695b      	ldr	r3, [r3, #20]
 801596e:	69fa      	ldr	r2, [r7, #28]
 8015970:	429a      	cmp	r2, r3
 8015972:	d307      	bcc.n	8015984 <create_chain+0x88>
				ncl = 2;
 8015974:	2302      	movs	r3, #2
 8015976:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8015978:	69fa      	ldr	r2, [r7, #28]
 801597a:	69bb      	ldr	r3, [r7, #24]
 801597c:	429a      	cmp	r2, r3
 801597e:	d901      	bls.n	8015984 <create_chain+0x88>
 8015980:	2300      	movs	r3, #0
 8015982:	e04f      	b.n	8015a24 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015984:	69f9      	ldr	r1, [r7, #28]
 8015986:	6878      	ldr	r0, [r7, #4]
 8015988:	f7ff fdc7 	bl	801551a <get_fat>
 801598c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d00e      	beq.n	80159b2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	2b01      	cmp	r3, #1
 8015998:	d003      	beq.n	80159a2 <create_chain+0xa6>
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159a0:	d101      	bne.n	80159a6 <create_chain+0xaa>
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	e03e      	b.n	8015a24 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80159a6:	69fa      	ldr	r2, [r7, #28]
 80159a8:	69bb      	ldr	r3, [r7, #24]
 80159aa:	429a      	cmp	r2, r3
 80159ac:	d1da      	bne.n	8015964 <create_chain+0x68>
 80159ae:	2300      	movs	r3, #0
 80159b0:	e038      	b.n	8015a24 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80159b2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80159b4:	f04f 32ff 	mov.w	r2, #4294967295
 80159b8:	69f9      	ldr	r1, [r7, #28]
 80159ba:	6938      	ldr	r0, [r7, #16]
 80159bc:	f7ff fe52 	bl	8015664 <put_fat>
 80159c0:	4603      	mov	r3, r0
 80159c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80159c4:	7dfb      	ldrb	r3, [r7, #23]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d109      	bne.n	80159de <create_chain+0xe2>
 80159ca:	683b      	ldr	r3, [r7, #0]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d006      	beq.n	80159de <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80159d0:	69fa      	ldr	r2, [r7, #28]
 80159d2:	6839      	ldr	r1, [r7, #0]
 80159d4:	6938      	ldr	r0, [r7, #16]
 80159d6:	f7ff fe45 	bl	8015664 <put_fat>
 80159da:	4603      	mov	r3, r0
 80159dc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80159de:	7dfb      	ldrb	r3, [r7, #23]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d116      	bne.n	8015a12 <create_chain+0x116>
		fs->last_clst = ncl;
 80159e4:	693b      	ldr	r3, [r7, #16]
 80159e6:	69fa      	ldr	r2, [r7, #28]
 80159e8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80159ea:	693b      	ldr	r3, [r7, #16]
 80159ec:	691a      	ldr	r2, [r3, #16]
 80159ee:	693b      	ldr	r3, [r7, #16]
 80159f0:	695b      	ldr	r3, [r3, #20]
 80159f2:	3b02      	subs	r3, #2
 80159f4:	429a      	cmp	r2, r3
 80159f6:	d804      	bhi.n	8015a02 <create_chain+0x106>
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	691b      	ldr	r3, [r3, #16]
 80159fc:	1e5a      	subs	r2, r3, #1
 80159fe:	693b      	ldr	r3, [r7, #16]
 8015a00:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8015a02:	693b      	ldr	r3, [r7, #16]
 8015a04:	791b      	ldrb	r3, [r3, #4]
 8015a06:	f043 0301 	orr.w	r3, r3, #1
 8015a0a:	b2da      	uxtb	r2, r3
 8015a0c:	693b      	ldr	r3, [r7, #16]
 8015a0e:	711a      	strb	r2, [r3, #4]
 8015a10:	e007      	b.n	8015a22 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015a12:	7dfb      	ldrb	r3, [r7, #23]
 8015a14:	2b01      	cmp	r3, #1
 8015a16:	d102      	bne.n	8015a1e <create_chain+0x122>
 8015a18:	f04f 33ff 	mov.w	r3, #4294967295
 8015a1c:	e000      	b.n	8015a20 <create_chain+0x124>
 8015a1e:	2301      	movs	r3, #1
 8015a20:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015a22:	69fb      	ldr	r3, [r7, #28]
}
 8015a24:	4618      	mov	r0, r3
 8015a26:	3720      	adds	r7, #32
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd80      	pop	{r7, pc}

08015a2c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	b087      	sub	sp, #28
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a40:	3304      	adds	r3, #4
 8015a42:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	0a5b      	lsrs	r3, r3, #9
 8015a48:	68fa      	ldr	r2, [r7, #12]
 8015a4a:	8952      	ldrh	r2, [r2, #10]
 8015a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015a50:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015a52:	693b      	ldr	r3, [r7, #16]
 8015a54:	1d1a      	adds	r2, r3, #4
 8015a56:	613a      	str	r2, [r7, #16]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d101      	bne.n	8015a66 <clmt_clust+0x3a>
 8015a62:	2300      	movs	r3, #0
 8015a64:	e010      	b.n	8015a88 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8015a66:	697a      	ldr	r2, [r7, #20]
 8015a68:	68bb      	ldr	r3, [r7, #8]
 8015a6a:	429a      	cmp	r2, r3
 8015a6c:	d307      	bcc.n	8015a7e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8015a6e:	697a      	ldr	r2, [r7, #20]
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	1ad3      	subs	r3, r2, r3
 8015a74:	617b      	str	r3, [r7, #20]
 8015a76:	693b      	ldr	r3, [r7, #16]
 8015a78:	3304      	adds	r3, #4
 8015a7a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015a7c:	e7e9      	b.n	8015a52 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8015a7e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015a80:	693b      	ldr	r3, [r7, #16]
 8015a82:	681a      	ldr	r2, [r3, #0]
 8015a84:	697b      	ldr	r3, [r7, #20]
 8015a86:	4413      	add	r3, r2
}
 8015a88:	4618      	mov	r0, r3
 8015a8a:	371c      	adds	r7, #28
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a92:	4770      	bx	lr

08015a94 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b086      	sub	sp, #24
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
 8015a9c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015aaa:	d204      	bcs.n	8015ab6 <dir_sdi+0x22>
 8015aac:	683b      	ldr	r3, [r7, #0]
 8015aae:	f003 031f 	and.w	r3, r3, #31
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d001      	beq.n	8015aba <dir_sdi+0x26>
		return FR_INT_ERR;
 8015ab6:	2302      	movs	r3, #2
 8015ab8:	e063      	b.n	8015b82 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	683a      	ldr	r2, [r7, #0]
 8015abe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	689b      	ldr	r3, [r3, #8]
 8015ac4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d106      	bne.n	8015ada <dir_sdi+0x46>
 8015acc:	693b      	ldr	r3, [r7, #16]
 8015ace:	781b      	ldrb	r3, [r3, #0]
 8015ad0:	2b02      	cmp	r3, #2
 8015ad2:	d902      	bls.n	8015ada <dir_sdi+0x46>
		clst = fs->dirbase;
 8015ad4:	693b      	ldr	r3, [r7, #16]
 8015ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ad8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015ada:	697b      	ldr	r3, [r7, #20]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d10c      	bne.n	8015afa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015ae0:	683b      	ldr	r3, [r7, #0]
 8015ae2:	095b      	lsrs	r3, r3, #5
 8015ae4:	693a      	ldr	r2, [r7, #16]
 8015ae6:	8912      	ldrh	r2, [r2, #8]
 8015ae8:	4293      	cmp	r3, r2
 8015aea:	d301      	bcc.n	8015af0 <dir_sdi+0x5c>
 8015aec:	2302      	movs	r3, #2
 8015aee:	e048      	b.n	8015b82 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8015af0:	693b      	ldr	r3, [r7, #16]
 8015af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	61da      	str	r2, [r3, #28]
 8015af8:	e029      	b.n	8015b4e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	895b      	ldrh	r3, [r3, #10]
 8015afe:	025b      	lsls	r3, r3, #9
 8015b00:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015b02:	e019      	b.n	8015b38 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	6979      	ldr	r1, [r7, #20]
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f7ff fd06 	bl	801551a <get_fat>
 8015b0e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015b10:	697b      	ldr	r3, [r7, #20]
 8015b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b16:	d101      	bne.n	8015b1c <dir_sdi+0x88>
 8015b18:	2301      	movs	r3, #1
 8015b1a:	e032      	b.n	8015b82 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015b1c:	697b      	ldr	r3, [r7, #20]
 8015b1e:	2b01      	cmp	r3, #1
 8015b20:	d904      	bls.n	8015b2c <dir_sdi+0x98>
 8015b22:	693b      	ldr	r3, [r7, #16]
 8015b24:	695b      	ldr	r3, [r3, #20]
 8015b26:	697a      	ldr	r2, [r7, #20]
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	d301      	bcc.n	8015b30 <dir_sdi+0x9c>
 8015b2c:	2302      	movs	r3, #2
 8015b2e:	e028      	b.n	8015b82 <dir_sdi+0xee>
			ofs -= csz;
 8015b30:	683a      	ldr	r2, [r7, #0]
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	1ad3      	subs	r3, r2, r3
 8015b36:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015b38:	683a      	ldr	r2, [r7, #0]
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	d2e1      	bcs.n	8015b04 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8015b40:	6979      	ldr	r1, [r7, #20]
 8015b42:	6938      	ldr	r0, [r7, #16]
 8015b44:	f7ff fcca 	bl	80154dc <clust2sect>
 8015b48:	4602      	mov	r2, r0
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	697a      	ldr	r2, [r7, #20]
 8015b52:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	69db      	ldr	r3, [r3, #28]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d101      	bne.n	8015b60 <dir_sdi+0xcc>
 8015b5c:	2302      	movs	r3, #2
 8015b5e:	e010      	b.n	8015b82 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	69da      	ldr	r2, [r3, #28]
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	0a5b      	lsrs	r3, r3, #9
 8015b68:	441a      	add	r2, r3
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015b6e:	693b      	ldr	r3, [r7, #16]
 8015b70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015b74:	683b      	ldr	r3, [r7, #0]
 8015b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015b7a:	441a      	add	r2, r3
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015b80:	2300      	movs	r3, #0
}
 8015b82:	4618      	mov	r0, r3
 8015b84:	3718      	adds	r7, #24
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}

08015b8a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015b8a:	b580      	push	{r7, lr}
 8015b8c:	b086      	sub	sp, #24
 8015b8e:	af00      	add	r7, sp, #0
 8015b90:	6078      	str	r0, [r7, #4]
 8015b92:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	695b      	ldr	r3, [r3, #20]
 8015b9e:	3320      	adds	r3, #32
 8015ba0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	69db      	ldr	r3, [r3, #28]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d003      	beq.n	8015bb2 <dir_next+0x28>
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015bb0:	d301      	bcc.n	8015bb6 <dir_next+0x2c>
 8015bb2:	2304      	movs	r3, #4
 8015bb4:	e0aa      	b.n	8015d0c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015bb6:	68bb      	ldr	r3, [r7, #8]
 8015bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	f040 8098 	bne.w	8015cf2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	69db      	ldr	r3, [r3, #28]
 8015bc6:	1c5a      	adds	r2, r3, #1
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	699b      	ldr	r3, [r3, #24]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d10b      	bne.n	8015bec <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	095b      	lsrs	r3, r3, #5
 8015bd8:	68fa      	ldr	r2, [r7, #12]
 8015bda:	8912      	ldrh	r2, [r2, #8]
 8015bdc:	4293      	cmp	r3, r2
 8015bde:	f0c0 8088 	bcc.w	8015cf2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2200      	movs	r2, #0
 8015be6:	61da      	str	r2, [r3, #28]
 8015be8:	2304      	movs	r3, #4
 8015bea:	e08f      	b.n	8015d0c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015bec:	68bb      	ldr	r3, [r7, #8]
 8015bee:	0a5b      	lsrs	r3, r3, #9
 8015bf0:	68fa      	ldr	r2, [r7, #12]
 8015bf2:	8952      	ldrh	r2, [r2, #10]
 8015bf4:	3a01      	subs	r2, #1
 8015bf6:	4013      	ands	r3, r2
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d17a      	bne.n	8015cf2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015bfc:	687a      	ldr	r2, [r7, #4]
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	699b      	ldr	r3, [r3, #24]
 8015c02:	4619      	mov	r1, r3
 8015c04:	4610      	mov	r0, r2
 8015c06:	f7ff fc88 	bl	801551a <get_fat>
 8015c0a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015c0c:	697b      	ldr	r3, [r7, #20]
 8015c0e:	2b01      	cmp	r3, #1
 8015c10:	d801      	bhi.n	8015c16 <dir_next+0x8c>
 8015c12:	2302      	movs	r3, #2
 8015c14:	e07a      	b.n	8015d0c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015c16:	697b      	ldr	r3, [r7, #20]
 8015c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c1c:	d101      	bne.n	8015c22 <dir_next+0x98>
 8015c1e:	2301      	movs	r3, #1
 8015c20:	e074      	b.n	8015d0c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	695b      	ldr	r3, [r3, #20]
 8015c26:	697a      	ldr	r2, [r7, #20]
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d358      	bcc.n	8015cde <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015c2c:	683b      	ldr	r3, [r7, #0]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d104      	bne.n	8015c3c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	2200      	movs	r2, #0
 8015c36:	61da      	str	r2, [r3, #28]
 8015c38:	2304      	movs	r3, #4
 8015c3a:	e067      	b.n	8015d0c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015c3c:	687a      	ldr	r2, [r7, #4]
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	699b      	ldr	r3, [r3, #24]
 8015c42:	4619      	mov	r1, r3
 8015c44:	4610      	mov	r0, r2
 8015c46:	f7ff fe59 	bl	80158fc <create_chain>
 8015c4a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015c4c:	697b      	ldr	r3, [r7, #20]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d101      	bne.n	8015c56 <dir_next+0xcc>
 8015c52:	2307      	movs	r3, #7
 8015c54:	e05a      	b.n	8015d0c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015c56:	697b      	ldr	r3, [r7, #20]
 8015c58:	2b01      	cmp	r3, #1
 8015c5a:	d101      	bne.n	8015c60 <dir_next+0xd6>
 8015c5c:	2302      	movs	r3, #2
 8015c5e:	e055      	b.n	8015d0c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c66:	d101      	bne.n	8015c6c <dir_next+0xe2>
 8015c68:	2301      	movs	r3, #1
 8015c6a:	e04f      	b.n	8015d0c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015c6c:	68f8      	ldr	r0, [r7, #12]
 8015c6e:	f7ff fb55 	bl	801531c <sync_window>
 8015c72:	4603      	mov	r3, r0
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d001      	beq.n	8015c7c <dir_next+0xf2>
 8015c78:	2301      	movs	r3, #1
 8015c7a:	e047      	b.n	8015d0c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	3330      	adds	r3, #48	; 0x30
 8015c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015c84:	2100      	movs	r1, #0
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7ff f97f 	bl	8014f8a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	613b      	str	r3, [r7, #16]
 8015c90:	6979      	ldr	r1, [r7, #20]
 8015c92:	68f8      	ldr	r0, [r7, #12]
 8015c94:	f7ff fc22 	bl	80154dc <clust2sect>
 8015c98:	4602      	mov	r2, r0
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8015c9e:	e012      	b.n	8015cc6 <dir_next+0x13c>
						fs->wflag = 1;
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	2201      	movs	r2, #1
 8015ca4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015ca6:	68f8      	ldr	r0, [r7, #12]
 8015ca8:	f7ff fb38 	bl	801531c <sync_window>
 8015cac:	4603      	mov	r3, r0
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d001      	beq.n	8015cb6 <dir_next+0x12c>
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	e02a      	b.n	8015d0c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015cb6:	693b      	ldr	r3, [r7, #16]
 8015cb8:	3301      	adds	r3, #1
 8015cba:	613b      	str	r3, [r7, #16]
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cc0:	1c5a      	adds	r2, r3, #1
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	895b      	ldrh	r3, [r3, #10]
 8015cca:	461a      	mov	r2, r3
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	4293      	cmp	r3, r2
 8015cd0:	d3e6      	bcc.n	8015ca0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	1ad2      	subs	r2, r2, r3
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	697a      	ldr	r2, [r7, #20]
 8015ce2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8015ce4:	6979      	ldr	r1, [r7, #20]
 8015ce6:	68f8      	ldr	r0, [r7, #12]
 8015ce8:	f7ff fbf8 	bl	80154dc <clust2sect>
 8015cec:	4602      	mov	r2, r0
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	68ba      	ldr	r2, [r7, #8]
 8015cf6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015cfe:	68bb      	ldr	r3, [r7, #8]
 8015d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d04:	441a      	add	r2, r3
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015d0a:	2300      	movs	r3, #0
}
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	3718      	adds	r7, #24
 8015d10:	46bd      	mov	sp, r7
 8015d12:	bd80      	pop	{r7, pc}

08015d14 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b086      	sub	sp, #24
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
 8015d1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015d24:	2100      	movs	r1, #0
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	f7ff feb4 	bl	8015a94 <dir_sdi>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015d30:	7dfb      	ldrb	r3, [r7, #23]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d12b      	bne.n	8015d8e <dir_alloc+0x7a>
		n = 0;
 8015d36:	2300      	movs	r3, #0
 8015d38:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	69db      	ldr	r3, [r3, #28]
 8015d3e:	4619      	mov	r1, r3
 8015d40:	68f8      	ldr	r0, [r7, #12]
 8015d42:	f7ff fb2f 	bl	80153a4 <move_window>
 8015d46:	4603      	mov	r3, r0
 8015d48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015d4a:	7dfb      	ldrb	r3, [r7, #23]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d11d      	bne.n	8015d8c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	6a1b      	ldr	r3, [r3, #32]
 8015d54:	781b      	ldrb	r3, [r3, #0]
 8015d56:	2be5      	cmp	r3, #229	; 0xe5
 8015d58:	d004      	beq.n	8015d64 <dir_alloc+0x50>
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	6a1b      	ldr	r3, [r3, #32]
 8015d5e:	781b      	ldrb	r3, [r3, #0]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d107      	bne.n	8015d74 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015d64:	693b      	ldr	r3, [r7, #16]
 8015d66:	3301      	adds	r3, #1
 8015d68:	613b      	str	r3, [r7, #16]
 8015d6a:	693a      	ldr	r2, [r7, #16]
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	429a      	cmp	r2, r3
 8015d70:	d102      	bne.n	8015d78 <dir_alloc+0x64>
 8015d72:	e00c      	b.n	8015d8e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015d74:	2300      	movs	r3, #0
 8015d76:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015d78:	2101      	movs	r1, #1
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f7ff ff05 	bl	8015b8a <dir_next>
 8015d80:	4603      	mov	r3, r0
 8015d82:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015d84:	7dfb      	ldrb	r3, [r7, #23]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d0d7      	beq.n	8015d3a <dir_alloc+0x26>
 8015d8a:	e000      	b.n	8015d8e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8015d8c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015d8e:	7dfb      	ldrb	r3, [r7, #23]
 8015d90:	2b04      	cmp	r3, #4
 8015d92:	d101      	bne.n	8015d98 <dir_alloc+0x84>
 8015d94:	2307      	movs	r3, #7
 8015d96:	75fb      	strb	r3, [r7, #23]
	return res;
 8015d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3718      	adds	r7, #24
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}

08015da2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015da2:	b580      	push	{r7, lr}
 8015da4:	b084      	sub	sp, #16
 8015da6:	af00      	add	r7, sp, #0
 8015da8:	6078      	str	r0, [r7, #4]
 8015daa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	331a      	adds	r3, #26
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7ff f847 	bl	8014e44 <ld_word>
 8015db6:	4603      	mov	r3, r0
 8015db8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	781b      	ldrb	r3, [r3, #0]
 8015dbe:	2b03      	cmp	r3, #3
 8015dc0:	d109      	bne.n	8015dd6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	3314      	adds	r3, #20
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f7ff f83c 	bl	8014e44 <ld_word>
 8015dcc:	4603      	mov	r3, r0
 8015dce:	041b      	lsls	r3, r3, #16
 8015dd0:	68fa      	ldr	r2, [r7, #12]
 8015dd2:	4313      	orrs	r3, r2
 8015dd4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3710      	adds	r7, #16
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd80      	pop	{r7, pc}

08015de0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b084      	sub	sp, #16
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	60f8      	str	r0, [r7, #12]
 8015de8:	60b9      	str	r1, [r7, #8]
 8015dea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015dec:	68bb      	ldr	r3, [r7, #8]
 8015dee:	331a      	adds	r3, #26
 8015df0:	687a      	ldr	r2, [r7, #4]
 8015df2:	b292      	uxth	r2, r2
 8015df4:	4611      	mov	r1, r2
 8015df6:	4618      	mov	r0, r3
 8015df8:	f7ff f85f 	bl	8014eba <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	781b      	ldrb	r3, [r3, #0]
 8015e00:	2b03      	cmp	r3, #3
 8015e02:	d109      	bne.n	8015e18 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015e04:	68bb      	ldr	r3, [r7, #8]
 8015e06:	f103 0214 	add.w	r2, r3, #20
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	0c1b      	lsrs	r3, r3, #16
 8015e0e:	b29b      	uxth	r3, r3
 8015e10:	4619      	mov	r1, r3
 8015e12:	4610      	mov	r0, r2
 8015e14:	f7ff f851 	bl	8014eba <st_word>
	}
}
 8015e18:	bf00      	nop
 8015e1a:	3710      	adds	r7, #16
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}

08015e20 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b086      	sub	sp, #24
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015e2e:	2100      	movs	r1, #0
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f7ff fe2f 	bl	8015a94 <dir_sdi>
 8015e36:	4603      	mov	r3, r0
 8015e38:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015e3a:	7dfb      	ldrb	r3, [r7, #23]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d001      	beq.n	8015e44 <dir_find+0x24>
 8015e40:	7dfb      	ldrb	r3, [r7, #23]
 8015e42:	e03e      	b.n	8015ec2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	69db      	ldr	r3, [r3, #28]
 8015e48:	4619      	mov	r1, r3
 8015e4a:	6938      	ldr	r0, [r7, #16]
 8015e4c:	f7ff faaa 	bl	80153a4 <move_window>
 8015e50:	4603      	mov	r3, r0
 8015e52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015e54:	7dfb      	ldrb	r3, [r7, #23]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d12f      	bne.n	8015eba <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	6a1b      	ldr	r3, [r3, #32]
 8015e5e:	781b      	ldrb	r3, [r3, #0]
 8015e60:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015e62:	7bfb      	ldrb	r3, [r7, #15]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d102      	bne.n	8015e6e <dir_find+0x4e>
 8015e68:	2304      	movs	r3, #4
 8015e6a:	75fb      	strb	r3, [r7, #23]
 8015e6c:	e028      	b.n	8015ec0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	6a1b      	ldr	r3, [r3, #32]
 8015e72:	330b      	adds	r3, #11
 8015e74:	781b      	ldrb	r3, [r3, #0]
 8015e76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015e7a:	b2da      	uxtb	r2, r3
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	6a1b      	ldr	r3, [r3, #32]
 8015e84:	330b      	adds	r3, #11
 8015e86:	781b      	ldrb	r3, [r3, #0]
 8015e88:	f003 0308 	and.w	r3, r3, #8
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d10a      	bne.n	8015ea6 <dir_find+0x86>
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	6a18      	ldr	r0, [r3, #32]
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	3324      	adds	r3, #36	; 0x24
 8015e98:	220b      	movs	r2, #11
 8015e9a:	4619      	mov	r1, r3
 8015e9c:	f7ff f88f 	bl	8014fbe <mem_cmp>
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d00b      	beq.n	8015ebe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015ea6:	2100      	movs	r1, #0
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f7ff fe6e 	bl	8015b8a <dir_next>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015eb2:	7dfb      	ldrb	r3, [r7, #23]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d0c5      	beq.n	8015e44 <dir_find+0x24>
 8015eb8:	e002      	b.n	8015ec0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8015eba:	bf00      	nop
 8015ebc:	e000      	b.n	8015ec0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015ebe:	bf00      	nop

	return res;
 8015ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	3718      	adds	r7, #24
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	bd80      	pop	{r7, pc}

08015eca <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015eca:	b580      	push	{r7, lr}
 8015ecc:	b084      	sub	sp, #16
 8015ece:	af00      	add	r7, sp, #0
 8015ed0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8015ed8:	2101      	movs	r1, #1
 8015eda:	6878      	ldr	r0, [r7, #4]
 8015edc:	f7ff ff1a 	bl	8015d14 <dir_alloc>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015ee4:	7bfb      	ldrb	r3, [r7, #15]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d11c      	bne.n	8015f24 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	69db      	ldr	r3, [r3, #28]
 8015eee:	4619      	mov	r1, r3
 8015ef0:	68b8      	ldr	r0, [r7, #8]
 8015ef2:	f7ff fa57 	bl	80153a4 <move_window>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015efa:	7bfb      	ldrb	r3, [r7, #15]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d111      	bne.n	8015f24 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	6a1b      	ldr	r3, [r3, #32]
 8015f04:	2220      	movs	r2, #32
 8015f06:	2100      	movs	r1, #0
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7ff f83e 	bl	8014f8a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	6a18      	ldr	r0, [r3, #32]
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	3324      	adds	r3, #36	; 0x24
 8015f16:	220b      	movs	r2, #11
 8015f18:	4619      	mov	r1, r3
 8015f1a:	f7ff f815 	bl	8014f48 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	2201      	movs	r2, #1
 8015f22:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f26:	4618      	mov	r0, r3
 8015f28:	3710      	adds	r7, #16
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}
	...

08015f30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b088      	sub	sp, #32
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
 8015f38:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	60fb      	str	r3, [r7, #12]
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	3324      	adds	r3, #36	; 0x24
 8015f44:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8015f46:	220b      	movs	r2, #11
 8015f48:	2120      	movs	r1, #32
 8015f4a:	68b8      	ldr	r0, [r7, #8]
 8015f4c:	f7ff f81d 	bl	8014f8a <mem_set>
	si = i = 0; ni = 8;
 8015f50:	2300      	movs	r3, #0
 8015f52:	613b      	str	r3, [r7, #16]
 8015f54:	693b      	ldr	r3, [r7, #16]
 8015f56:	617b      	str	r3, [r7, #20]
 8015f58:	2308      	movs	r3, #8
 8015f5a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8015f5c:	697b      	ldr	r3, [r7, #20]
 8015f5e:	1c5a      	adds	r2, r3, #1
 8015f60:	617a      	str	r2, [r7, #20]
 8015f62:	68fa      	ldr	r2, [r7, #12]
 8015f64:	4413      	add	r3, r2
 8015f66:	781b      	ldrb	r3, [r3, #0]
 8015f68:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8015f6a:	7ffb      	ldrb	r3, [r7, #31]
 8015f6c:	2b20      	cmp	r3, #32
 8015f6e:	d94e      	bls.n	801600e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8015f70:	7ffb      	ldrb	r3, [r7, #31]
 8015f72:	2b2f      	cmp	r3, #47	; 0x2f
 8015f74:	d006      	beq.n	8015f84 <create_name+0x54>
 8015f76:	7ffb      	ldrb	r3, [r7, #31]
 8015f78:	2b5c      	cmp	r3, #92	; 0x5c
 8015f7a:	d110      	bne.n	8015f9e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015f7c:	e002      	b.n	8015f84 <create_name+0x54>
 8015f7e:	697b      	ldr	r3, [r7, #20]
 8015f80:	3301      	adds	r3, #1
 8015f82:	617b      	str	r3, [r7, #20]
 8015f84:	68fa      	ldr	r2, [r7, #12]
 8015f86:	697b      	ldr	r3, [r7, #20]
 8015f88:	4413      	add	r3, r2
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	2b2f      	cmp	r3, #47	; 0x2f
 8015f8e:	d0f6      	beq.n	8015f7e <create_name+0x4e>
 8015f90:	68fa      	ldr	r2, [r7, #12]
 8015f92:	697b      	ldr	r3, [r7, #20]
 8015f94:	4413      	add	r3, r2
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	2b5c      	cmp	r3, #92	; 0x5c
 8015f9a:	d0f0      	beq.n	8015f7e <create_name+0x4e>
			break;
 8015f9c:	e038      	b.n	8016010 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8015f9e:	7ffb      	ldrb	r3, [r7, #31]
 8015fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8015fa2:	d003      	beq.n	8015fac <create_name+0x7c>
 8015fa4:	693a      	ldr	r2, [r7, #16]
 8015fa6:	69bb      	ldr	r3, [r7, #24]
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d30c      	bcc.n	8015fc6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8015fac:	69bb      	ldr	r3, [r7, #24]
 8015fae:	2b0b      	cmp	r3, #11
 8015fb0:	d002      	beq.n	8015fb8 <create_name+0x88>
 8015fb2:	7ffb      	ldrb	r3, [r7, #31]
 8015fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8015fb6:	d001      	beq.n	8015fbc <create_name+0x8c>
 8015fb8:	2306      	movs	r3, #6
 8015fba:	e044      	b.n	8016046 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8015fbc:	2308      	movs	r3, #8
 8015fbe:	613b      	str	r3, [r7, #16]
 8015fc0:	230b      	movs	r3, #11
 8015fc2:	61bb      	str	r3, [r7, #24]
			continue;
 8015fc4:	e022      	b.n	801600c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8015fc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	da04      	bge.n	8015fd8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8015fce:	7ffb      	ldrb	r3, [r7, #31]
 8015fd0:	3b80      	subs	r3, #128	; 0x80
 8015fd2:	4a1f      	ldr	r2, [pc, #124]	; (8016050 <create_name+0x120>)
 8015fd4:	5cd3      	ldrb	r3, [r2, r3]
 8015fd6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8015fd8:	7ffb      	ldrb	r3, [r7, #31]
 8015fda:	4619      	mov	r1, r3
 8015fdc:	481d      	ldr	r0, [pc, #116]	; (8016054 <create_name+0x124>)
 8015fde:	f7ff f815 	bl	801500c <chk_chr>
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d001      	beq.n	8015fec <create_name+0xbc>
 8015fe8:	2306      	movs	r3, #6
 8015fea:	e02c      	b.n	8016046 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8015fec:	7ffb      	ldrb	r3, [r7, #31]
 8015fee:	2b60      	cmp	r3, #96	; 0x60
 8015ff0:	d905      	bls.n	8015ffe <create_name+0xce>
 8015ff2:	7ffb      	ldrb	r3, [r7, #31]
 8015ff4:	2b7a      	cmp	r3, #122	; 0x7a
 8015ff6:	d802      	bhi.n	8015ffe <create_name+0xce>
 8015ff8:	7ffb      	ldrb	r3, [r7, #31]
 8015ffa:	3b20      	subs	r3, #32
 8015ffc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	1c5a      	adds	r2, r3, #1
 8016002:	613a      	str	r2, [r7, #16]
 8016004:	68ba      	ldr	r2, [r7, #8]
 8016006:	4413      	add	r3, r2
 8016008:	7ffa      	ldrb	r2, [r7, #31]
 801600a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801600c:	e7a6      	b.n	8015f5c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801600e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8016010:	68fa      	ldr	r2, [r7, #12]
 8016012:	697b      	ldr	r3, [r7, #20]
 8016014:	441a      	add	r2, r3
 8016016:	683b      	ldr	r3, [r7, #0]
 8016018:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801601a:	693b      	ldr	r3, [r7, #16]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d101      	bne.n	8016024 <create_name+0xf4>
 8016020:	2306      	movs	r3, #6
 8016022:	e010      	b.n	8016046 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016024:	68bb      	ldr	r3, [r7, #8]
 8016026:	781b      	ldrb	r3, [r3, #0]
 8016028:	2be5      	cmp	r3, #229	; 0xe5
 801602a:	d102      	bne.n	8016032 <create_name+0x102>
 801602c:	68bb      	ldr	r3, [r7, #8]
 801602e:	2205      	movs	r2, #5
 8016030:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8016032:	7ffb      	ldrb	r3, [r7, #31]
 8016034:	2b20      	cmp	r3, #32
 8016036:	d801      	bhi.n	801603c <create_name+0x10c>
 8016038:	2204      	movs	r2, #4
 801603a:	e000      	b.n	801603e <create_name+0x10e>
 801603c:	2200      	movs	r2, #0
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	330b      	adds	r3, #11
 8016042:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8016044:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8016046:	4618      	mov	r0, r3
 8016048:	3720      	adds	r7, #32
 801604a:	46bd      	mov	sp, r7
 801604c:	bd80      	pop	{r7, pc}
 801604e:	bf00      	nop
 8016050:	080197fc 	.word	0x080197fc
 8016054:	08019720 	.word	0x08019720

08016058 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b086      	sub	sp, #24
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
 8016060:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8016066:	693b      	ldr	r3, [r7, #16]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801606c:	e002      	b.n	8016074 <follow_path+0x1c>
 801606e:	683b      	ldr	r3, [r7, #0]
 8016070:	3301      	adds	r3, #1
 8016072:	603b      	str	r3, [r7, #0]
 8016074:	683b      	ldr	r3, [r7, #0]
 8016076:	781b      	ldrb	r3, [r3, #0]
 8016078:	2b2f      	cmp	r3, #47	; 0x2f
 801607a:	d0f8      	beq.n	801606e <follow_path+0x16>
 801607c:	683b      	ldr	r3, [r7, #0]
 801607e:	781b      	ldrb	r3, [r3, #0]
 8016080:	2b5c      	cmp	r3, #92	; 0x5c
 8016082:	d0f4      	beq.n	801606e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016084:	693b      	ldr	r3, [r7, #16]
 8016086:	2200      	movs	r2, #0
 8016088:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801608a:	683b      	ldr	r3, [r7, #0]
 801608c:	781b      	ldrb	r3, [r3, #0]
 801608e:	2b1f      	cmp	r3, #31
 8016090:	d80a      	bhi.n	80160a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	2280      	movs	r2, #128	; 0x80
 8016096:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801609a:	2100      	movs	r1, #0
 801609c:	6878      	ldr	r0, [r7, #4]
 801609e:	f7ff fcf9 	bl	8015a94 <dir_sdi>
 80160a2:	4603      	mov	r3, r0
 80160a4:	75fb      	strb	r3, [r7, #23]
 80160a6:	e043      	b.n	8016130 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80160a8:	463b      	mov	r3, r7
 80160aa:	4619      	mov	r1, r3
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f7ff ff3f 	bl	8015f30 <create_name>
 80160b2:	4603      	mov	r3, r0
 80160b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80160b6:	7dfb      	ldrb	r3, [r7, #23]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d134      	bne.n	8016126 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f7ff feaf 	bl	8015e20 <dir_find>
 80160c2:	4603      	mov	r3, r0
 80160c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80160cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80160ce:	7dfb      	ldrb	r3, [r7, #23]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d00a      	beq.n	80160ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80160d4:	7dfb      	ldrb	r3, [r7, #23]
 80160d6:	2b04      	cmp	r3, #4
 80160d8:	d127      	bne.n	801612a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80160da:	7afb      	ldrb	r3, [r7, #11]
 80160dc:	f003 0304 	and.w	r3, r3, #4
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d122      	bne.n	801612a <follow_path+0xd2>
 80160e4:	2305      	movs	r3, #5
 80160e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80160e8:	e01f      	b.n	801612a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80160ea:	7afb      	ldrb	r3, [r7, #11]
 80160ec:	f003 0304 	and.w	r3, r3, #4
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d11c      	bne.n	801612e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80160f4:	693b      	ldr	r3, [r7, #16]
 80160f6:	799b      	ldrb	r3, [r3, #6]
 80160f8:	f003 0310 	and.w	r3, r3, #16
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d102      	bne.n	8016106 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016100:	2305      	movs	r3, #5
 8016102:	75fb      	strb	r3, [r7, #23]
 8016104:	e014      	b.n	8016130 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	695b      	ldr	r3, [r3, #20]
 8016110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016114:	4413      	add	r3, r2
 8016116:	4619      	mov	r1, r3
 8016118:	68f8      	ldr	r0, [r7, #12]
 801611a:	f7ff fe42 	bl	8015da2 <ld_clust>
 801611e:	4602      	mov	r2, r0
 8016120:	693b      	ldr	r3, [r7, #16]
 8016122:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016124:	e7c0      	b.n	80160a8 <follow_path+0x50>
			if (res != FR_OK) break;
 8016126:	bf00      	nop
 8016128:	e002      	b.n	8016130 <follow_path+0xd8>
				break;
 801612a:	bf00      	nop
 801612c:	e000      	b.n	8016130 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801612e:	bf00      	nop
			}
		}
	}

	return res;
 8016130:	7dfb      	ldrb	r3, [r7, #23]
}
 8016132:	4618      	mov	r0, r3
 8016134:	3718      	adds	r7, #24
 8016136:	46bd      	mov	sp, r7
 8016138:	bd80      	pop	{r7, pc}

0801613a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801613a:	b480      	push	{r7}
 801613c:	b087      	sub	sp, #28
 801613e:	af00      	add	r7, sp, #0
 8016140:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016142:	f04f 33ff 	mov.w	r3, #4294967295
 8016146:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d031      	beq.n	80161b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	617b      	str	r3, [r7, #20]
 8016156:	e002      	b.n	801615e <get_ldnumber+0x24>
 8016158:	697b      	ldr	r3, [r7, #20]
 801615a:	3301      	adds	r3, #1
 801615c:	617b      	str	r3, [r7, #20]
 801615e:	697b      	ldr	r3, [r7, #20]
 8016160:	781b      	ldrb	r3, [r3, #0]
 8016162:	2b20      	cmp	r3, #32
 8016164:	d903      	bls.n	801616e <get_ldnumber+0x34>
 8016166:	697b      	ldr	r3, [r7, #20]
 8016168:	781b      	ldrb	r3, [r3, #0]
 801616a:	2b3a      	cmp	r3, #58	; 0x3a
 801616c:	d1f4      	bne.n	8016158 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801616e:	697b      	ldr	r3, [r7, #20]
 8016170:	781b      	ldrb	r3, [r3, #0]
 8016172:	2b3a      	cmp	r3, #58	; 0x3a
 8016174:	d11c      	bne.n	80161b0 <get_ldnumber+0x76>
			tp = *path;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	1c5a      	adds	r2, r3, #1
 8016180:	60fa      	str	r2, [r7, #12]
 8016182:	781b      	ldrb	r3, [r3, #0]
 8016184:	3b30      	subs	r3, #48	; 0x30
 8016186:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	2b09      	cmp	r3, #9
 801618c:	d80e      	bhi.n	80161ac <get_ldnumber+0x72>
 801618e:	68fa      	ldr	r2, [r7, #12]
 8016190:	697b      	ldr	r3, [r7, #20]
 8016192:	429a      	cmp	r2, r3
 8016194:	d10a      	bne.n	80161ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d107      	bne.n	80161ac <get_ldnumber+0x72>
					vol = (int)i;
 801619c:	68bb      	ldr	r3, [r7, #8]
 801619e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80161a0:	697b      	ldr	r3, [r7, #20]
 80161a2:	3301      	adds	r3, #1
 80161a4:	617b      	str	r3, [r7, #20]
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	697a      	ldr	r2, [r7, #20]
 80161aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80161ac:	693b      	ldr	r3, [r7, #16]
 80161ae:	e002      	b.n	80161b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80161b0:	2300      	movs	r3, #0
 80161b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80161b4:	693b      	ldr	r3, [r7, #16]
}
 80161b6:	4618      	mov	r0, r3
 80161b8:	371c      	adds	r7, #28
 80161ba:	46bd      	mov	sp, r7
 80161bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c0:	4770      	bx	lr
	...

080161c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b082      	sub	sp, #8
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
 80161cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	2200      	movs	r2, #0
 80161d2:	70da      	strb	r2, [r3, #3]
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f04f 32ff 	mov.w	r2, #4294967295
 80161da:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80161dc:	6839      	ldr	r1, [r7, #0]
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f7ff f8e0 	bl	80153a4 <move_window>
 80161e4:	4603      	mov	r3, r0
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d001      	beq.n	80161ee <check_fs+0x2a>
 80161ea:	2304      	movs	r3, #4
 80161ec:	e038      	b.n	8016260 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	3330      	adds	r3, #48	; 0x30
 80161f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80161f6:	4618      	mov	r0, r3
 80161f8:	f7fe fe24 	bl	8014e44 <ld_word>
 80161fc:	4603      	mov	r3, r0
 80161fe:	461a      	mov	r2, r3
 8016200:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016204:	429a      	cmp	r2, r3
 8016206:	d001      	beq.n	801620c <check_fs+0x48>
 8016208:	2303      	movs	r3, #3
 801620a:	e029      	b.n	8016260 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016212:	2be9      	cmp	r3, #233	; 0xe9
 8016214:	d009      	beq.n	801622a <check_fs+0x66>
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801621c:	2beb      	cmp	r3, #235	; 0xeb
 801621e:	d11e      	bne.n	801625e <check_fs+0x9a>
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8016226:	2b90      	cmp	r3, #144	; 0x90
 8016228:	d119      	bne.n	801625e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	3330      	adds	r3, #48	; 0x30
 801622e:	3336      	adds	r3, #54	; 0x36
 8016230:	4618      	mov	r0, r3
 8016232:	f7fe fe1f 	bl	8014e74 <ld_dword>
 8016236:	4603      	mov	r3, r0
 8016238:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801623c:	4a0a      	ldr	r2, [pc, #40]	; (8016268 <check_fs+0xa4>)
 801623e:	4293      	cmp	r3, r2
 8016240:	d101      	bne.n	8016246 <check_fs+0x82>
 8016242:	2300      	movs	r3, #0
 8016244:	e00c      	b.n	8016260 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	3330      	adds	r3, #48	; 0x30
 801624a:	3352      	adds	r3, #82	; 0x52
 801624c:	4618      	mov	r0, r3
 801624e:	f7fe fe11 	bl	8014e74 <ld_dword>
 8016252:	4602      	mov	r2, r0
 8016254:	4b05      	ldr	r3, [pc, #20]	; (801626c <check_fs+0xa8>)
 8016256:	429a      	cmp	r2, r3
 8016258:	d101      	bne.n	801625e <check_fs+0x9a>
 801625a:	2300      	movs	r3, #0
 801625c:	e000      	b.n	8016260 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801625e:	2302      	movs	r3, #2
}
 8016260:	4618      	mov	r0, r3
 8016262:	3708      	adds	r7, #8
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}
 8016268:	00544146 	.word	0x00544146
 801626c:	33544146 	.word	0x33544146

08016270 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b096      	sub	sp, #88	; 0x58
 8016274:	af00      	add	r7, sp, #0
 8016276:	60f8      	str	r0, [r7, #12]
 8016278:	60b9      	str	r1, [r7, #8]
 801627a:	4613      	mov	r3, r2
 801627c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	2200      	movs	r2, #0
 8016282:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016284:	68f8      	ldr	r0, [r7, #12]
 8016286:	f7ff ff58 	bl	801613a <get_ldnumber>
 801628a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801628c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801628e:	2b00      	cmp	r3, #0
 8016290:	da01      	bge.n	8016296 <find_volume+0x26>
 8016292:	230b      	movs	r3, #11
 8016294:	e22e      	b.n	80166f4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016296:	4aa8      	ldr	r2, [pc, #672]	; (8016538 <find_volume+0x2c8>)
 8016298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801629a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801629e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80162a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d101      	bne.n	80162aa <find_volume+0x3a>
 80162a6:	230c      	movs	r3, #12
 80162a8:	e224      	b.n	80166f4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80162aa:	68bb      	ldr	r3, [r7, #8]
 80162ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80162ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80162b0:	79fb      	ldrb	r3, [r7, #7]
 80162b2:	f023 0301 	bic.w	r3, r3, #1
 80162b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80162b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ba:	781b      	ldrb	r3, [r3, #0]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d01a      	beq.n	80162f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80162c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162c2:	785b      	ldrb	r3, [r3, #1]
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7fe fd1f 	bl	8014d08 <disk_status>
 80162ca:	4603      	mov	r3, r0
 80162cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80162d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80162d4:	f003 0301 	and.w	r3, r3, #1
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d10c      	bne.n	80162f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80162dc:	79fb      	ldrb	r3, [r7, #7]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d007      	beq.n	80162f2 <find_volume+0x82>
 80162e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80162e6:	f003 0304 	and.w	r3, r3, #4
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d001      	beq.n	80162f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80162ee:	230a      	movs	r3, #10
 80162f0:	e200      	b.n	80166f4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80162f2:	2300      	movs	r3, #0
 80162f4:	e1fe      	b.n	80166f4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80162f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f8:	2200      	movs	r2, #0
 80162fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80162fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80162fe:	b2da      	uxtb	r2, r3
 8016300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016302:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016306:	785b      	ldrb	r3, [r3, #1]
 8016308:	4618      	mov	r0, r3
 801630a:	f7fe fd17 	bl	8014d3c <disk_initialize>
 801630e:	4603      	mov	r3, r0
 8016310:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016314:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016318:	f003 0301 	and.w	r3, r3, #1
 801631c:	2b00      	cmp	r3, #0
 801631e:	d001      	beq.n	8016324 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016320:	2303      	movs	r3, #3
 8016322:	e1e7      	b.n	80166f4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016324:	79fb      	ldrb	r3, [r7, #7]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d007      	beq.n	801633a <find_volume+0xca>
 801632a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801632e:	f003 0304 	and.w	r3, r3, #4
 8016332:	2b00      	cmp	r3, #0
 8016334:	d001      	beq.n	801633a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016336:	230a      	movs	r3, #10
 8016338:	e1dc      	b.n	80166f4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801633a:	2300      	movs	r3, #0
 801633c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801633e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016340:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016342:	f7ff ff3f 	bl	80161c4 <check_fs>
 8016346:	4603      	mov	r3, r0
 8016348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801634c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016350:	2b02      	cmp	r3, #2
 8016352:	d14b      	bne.n	80163ec <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016354:	2300      	movs	r3, #0
 8016356:	643b      	str	r3, [r7, #64]	; 0x40
 8016358:	e01f      	b.n	801639a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801635c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016362:	011b      	lsls	r3, r3, #4
 8016364:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016368:	4413      	add	r3, r2
 801636a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801636e:	3304      	adds	r3, #4
 8016370:	781b      	ldrb	r3, [r3, #0]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d006      	beq.n	8016384 <find_volume+0x114>
 8016376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016378:	3308      	adds	r3, #8
 801637a:	4618      	mov	r0, r3
 801637c:	f7fe fd7a 	bl	8014e74 <ld_dword>
 8016380:	4602      	mov	r2, r0
 8016382:	e000      	b.n	8016386 <find_volume+0x116>
 8016384:	2200      	movs	r2, #0
 8016386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016388:	009b      	lsls	r3, r3, #2
 801638a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801638e:	440b      	add	r3, r1
 8016390:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016396:	3301      	adds	r3, #1
 8016398:	643b      	str	r3, [r7, #64]	; 0x40
 801639a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801639c:	2b03      	cmp	r3, #3
 801639e:	d9dc      	bls.n	801635a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80163a0:	2300      	movs	r3, #0
 80163a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80163a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d002      	beq.n	80163b0 <find_volume+0x140>
 80163aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163ac:	3b01      	subs	r3, #1
 80163ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80163b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163b2:	009b      	lsls	r3, r3, #2
 80163b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80163b8:	4413      	add	r3, r2
 80163ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80163be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80163c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d005      	beq.n	80163d2 <find_volume+0x162>
 80163c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80163c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80163ca:	f7ff fefb 	bl	80161c4 <check_fs>
 80163ce:	4603      	mov	r3, r0
 80163d0:	e000      	b.n	80163d4 <find_volume+0x164>
 80163d2:	2303      	movs	r3, #3
 80163d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80163d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80163dc:	2b01      	cmp	r3, #1
 80163de:	d905      	bls.n	80163ec <find_volume+0x17c>
 80163e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163e2:	3301      	adds	r3, #1
 80163e4:	643b      	str	r3, [r7, #64]	; 0x40
 80163e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163e8:	2b03      	cmp	r3, #3
 80163ea:	d9e1      	bls.n	80163b0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80163ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80163f0:	2b04      	cmp	r3, #4
 80163f2:	d101      	bne.n	80163f8 <find_volume+0x188>
 80163f4:	2301      	movs	r3, #1
 80163f6:	e17d      	b.n	80166f4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80163f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80163fc:	2b01      	cmp	r3, #1
 80163fe:	d901      	bls.n	8016404 <find_volume+0x194>
 8016400:	230d      	movs	r3, #13
 8016402:	e177      	b.n	80166f4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016406:	3330      	adds	r3, #48	; 0x30
 8016408:	330b      	adds	r3, #11
 801640a:	4618      	mov	r0, r3
 801640c:	f7fe fd1a 	bl	8014e44 <ld_word>
 8016410:	4603      	mov	r3, r0
 8016412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016416:	d001      	beq.n	801641c <find_volume+0x1ac>
 8016418:	230d      	movs	r3, #13
 801641a:	e16b      	b.n	80166f4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801641e:	3330      	adds	r3, #48	; 0x30
 8016420:	3316      	adds	r3, #22
 8016422:	4618      	mov	r0, r3
 8016424:	f7fe fd0e 	bl	8014e44 <ld_word>
 8016428:	4603      	mov	r3, r0
 801642a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801642c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801642e:	2b00      	cmp	r3, #0
 8016430:	d106      	bne.n	8016440 <find_volume+0x1d0>
 8016432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016434:	3330      	adds	r3, #48	; 0x30
 8016436:	3324      	adds	r3, #36	; 0x24
 8016438:	4618      	mov	r0, r3
 801643a:	f7fe fd1b 	bl	8014e74 <ld_dword>
 801643e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016442:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016444:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016448:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801644e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016452:	789b      	ldrb	r3, [r3, #2]
 8016454:	2b01      	cmp	r3, #1
 8016456:	d005      	beq.n	8016464 <find_volume+0x1f4>
 8016458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801645a:	789b      	ldrb	r3, [r3, #2]
 801645c:	2b02      	cmp	r3, #2
 801645e:	d001      	beq.n	8016464 <find_volume+0x1f4>
 8016460:	230d      	movs	r3, #13
 8016462:	e147      	b.n	80166f4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016466:	789b      	ldrb	r3, [r3, #2]
 8016468:	461a      	mov	r2, r3
 801646a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801646c:	fb02 f303 	mul.w	r3, r2, r3
 8016470:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016478:	b29a      	uxth	r2, r3
 801647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801647c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016480:	895b      	ldrh	r3, [r3, #10]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d008      	beq.n	8016498 <find_volume+0x228>
 8016486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016488:	895b      	ldrh	r3, [r3, #10]
 801648a:	461a      	mov	r2, r3
 801648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801648e:	895b      	ldrh	r3, [r3, #10]
 8016490:	3b01      	subs	r3, #1
 8016492:	4013      	ands	r3, r2
 8016494:	2b00      	cmp	r3, #0
 8016496:	d001      	beq.n	801649c <find_volume+0x22c>
 8016498:	230d      	movs	r3, #13
 801649a:	e12b      	b.n	80166f4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801649e:	3330      	adds	r3, #48	; 0x30
 80164a0:	3311      	adds	r3, #17
 80164a2:	4618      	mov	r0, r3
 80164a4:	f7fe fcce 	bl	8014e44 <ld_word>
 80164a8:	4603      	mov	r3, r0
 80164aa:	461a      	mov	r2, r3
 80164ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80164b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164b2:	891b      	ldrh	r3, [r3, #8]
 80164b4:	f003 030f 	and.w	r3, r3, #15
 80164b8:	b29b      	uxth	r3, r3
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d001      	beq.n	80164c2 <find_volume+0x252>
 80164be:	230d      	movs	r3, #13
 80164c0:	e118      	b.n	80166f4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80164c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164c4:	3330      	adds	r3, #48	; 0x30
 80164c6:	3313      	adds	r3, #19
 80164c8:	4618      	mov	r0, r3
 80164ca:	f7fe fcbb 	bl	8014e44 <ld_word>
 80164ce:	4603      	mov	r3, r0
 80164d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80164d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d106      	bne.n	80164e6 <find_volume+0x276>
 80164d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164da:	3330      	adds	r3, #48	; 0x30
 80164dc:	3320      	adds	r3, #32
 80164de:	4618      	mov	r0, r3
 80164e0:	f7fe fcc8 	bl	8014e74 <ld_dword>
 80164e4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80164e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164e8:	3330      	adds	r3, #48	; 0x30
 80164ea:	330e      	adds	r3, #14
 80164ec:	4618      	mov	r0, r3
 80164ee:	f7fe fca9 	bl	8014e44 <ld_word>
 80164f2:	4603      	mov	r3, r0
 80164f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80164f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d101      	bne.n	8016500 <find_volume+0x290>
 80164fc:	230d      	movs	r3, #13
 80164fe:	e0f9      	b.n	80166f4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016500:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016504:	4413      	add	r3, r2
 8016506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016508:	8912      	ldrh	r2, [r2, #8]
 801650a:	0912      	lsrs	r2, r2, #4
 801650c:	b292      	uxth	r2, r2
 801650e:	4413      	add	r3, r2
 8016510:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8016512:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016516:	429a      	cmp	r2, r3
 8016518:	d201      	bcs.n	801651e <find_volume+0x2ae>
 801651a:	230d      	movs	r3, #13
 801651c:	e0ea      	b.n	80166f4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801651e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016522:	1ad3      	subs	r3, r2, r3
 8016524:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016526:	8952      	ldrh	r2, [r2, #10]
 8016528:	fbb3 f3f2 	udiv	r3, r3, r2
 801652c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016530:	2b00      	cmp	r3, #0
 8016532:	d103      	bne.n	801653c <find_volume+0x2cc>
 8016534:	230d      	movs	r3, #13
 8016536:	e0dd      	b.n	80166f4 <find_volume+0x484>
 8016538:	24000b30 	.word	0x24000b30
		fmt = FS_FAT32;
 801653c:	2303      	movs	r3, #3
 801653e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016544:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016548:	4293      	cmp	r3, r2
 801654a:	d802      	bhi.n	8016552 <find_volume+0x2e2>
 801654c:	2302      	movs	r3, #2
 801654e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016554:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016558:	4293      	cmp	r3, r2
 801655a:	d802      	bhi.n	8016562 <find_volume+0x2f2>
 801655c:	2301      	movs	r3, #1
 801655e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016564:	1c9a      	adds	r2, r3, #2
 8016566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016568:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801656c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801656e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016570:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016574:	441a      	add	r2, r3
 8016576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016578:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801657a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801657e:	441a      	add	r2, r3
 8016580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016582:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8016584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016588:	2b03      	cmp	r3, #3
 801658a:	d11e      	bne.n	80165ca <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801658e:	3330      	adds	r3, #48	; 0x30
 8016590:	332a      	adds	r3, #42	; 0x2a
 8016592:	4618      	mov	r0, r3
 8016594:	f7fe fc56 	bl	8014e44 <ld_word>
 8016598:	4603      	mov	r3, r0
 801659a:	2b00      	cmp	r3, #0
 801659c:	d001      	beq.n	80165a2 <find_volume+0x332>
 801659e:	230d      	movs	r3, #13
 80165a0:	e0a8      	b.n	80166f4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80165a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165a4:	891b      	ldrh	r3, [r3, #8]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d001      	beq.n	80165ae <find_volume+0x33e>
 80165aa:	230d      	movs	r3, #13
 80165ac:	e0a2      	b.n	80166f4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80165ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165b0:	3330      	adds	r3, #48	; 0x30
 80165b2:	332c      	adds	r3, #44	; 0x2c
 80165b4:	4618      	mov	r0, r3
 80165b6:	f7fe fc5d 	bl	8014e74 <ld_dword>
 80165ba:	4602      	mov	r2, r0
 80165bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165be:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80165c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165c2:	695b      	ldr	r3, [r3, #20]
 80165c4:	009b      	lsls	r3, r3, #2
 80165c6:	647b      	str	r3, [r7, #68]	; 0x44
 80165c8:	e01f      	b.n	801660a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80165ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165cc:	891b      	ldrh	r3, [r3, #8]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d101      	bne.n	80165d6 <find_volume+0x366>
 80165d2:	230d      	movs	r3, #13
 80165d4:	e08e      	b.n	80166f4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80165d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d8:	6a1a      	ldr	r2, [r3, #32]
 80165da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165dc:	441a      	add	r2, r3
 80165de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165e0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80165e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80165e6:	2b02      	cmp	r3, #2
 80165e8:	d103      	bne.n	80165f2 <find_volume+0x382>
 80165ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ec:	695b      	ldr	r3, [r3, #20]
 80165ee:	005b      	lsls	r3, r3, #1
 80165f0:	e00a      	b.n	8016608 <find_volume+0x398>
 80165f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165f4:	695a      	ldr	r2, [r3, #20]
 80165f6:	4613      	mov	r3, r2
 80165f8:	005b      	lsls	r3, r3, #1
 80165fa:	4413      	add	r3, r2
 80165fc:	085a      	lsrs	r2, r3, #1
 80165fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016600:	695b      	ldr	r3, [r3, #20]
 8016602:	f003 0301 	and.w	r3, r3, #1
 8016606:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016608:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801660c:	699a      	ldr	r2, [r3, #24]
 801660e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016610:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8016614:	0a5b      	lsrs	r3, r3, #9
 8016616:	429a      	cmp	r2, r3
 8016618:	d201      	bcs.n	801661e <find_volume+0x3ae>
 801661a:	230d      	movs	r3, #13
 801661c:	e06a      	b.n	80166f4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016620:	f04f 32ff 	mov.w	r2, #4294967295
 8016624:	611a      	str	r2, [r3, #16]
 8016626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016628:	691a      	ldr	r2, [r3, #16]
 801662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801662c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801662e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016630:	2280      	movs	r2, #128	; 0x80
 8016632:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016634:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016638:	2b03      	cmp	r3, #3
 801663a:	d149      	bne.n	80166d0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801663e:	3330      	adds	r3, #48	; 0x30
 8016640:	3330      	adds	r3, #48	; 0x30
 8016642:	4618      	mov	r0, r3
 8016644:	f7fe fbfe 	bl	8014e44 <ld_word>
 8016648:	4603      	mov	r3, r0
 801664a:	2b01      	cmp	r3, #1
 801664c:	d140      	bne.n	80166d0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 801664e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016650:	3301      	adds	r3, #1
 8016652:	4619      	mov	r1, r3
 8016654:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016656:	f7fe fea5 	bl	80153a4 <move_window>
 801665a:	4603      	mov	r3, r0
 801665c:	2b00      	cmp	r3, #0
 801665e:	d137      	bne.n	80166d0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8016660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016662:	2200      	movs	r2, #0
 8016664:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016668:	3330      	adds	r3, #48	; 0x30
 801666a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801666e:	4618      	mov	r0, r3
 8016670:	f7fe fbe8 	bl	8014e44 <ld_word>
 8016674:	4603      	mov	r3, r0
 8016676:	461a      	mov	r2, r3
 8016678:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801667c:	429a      	cmp	r2, r3
 801667e:	d127      	bne.n	80166d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016682:	3330      	adds	r3, #48	; 0x30
 8016684:	4618      	mov	r0, r3
 8016686:	f7fe fbf5 	bl	8014e74 <ld_dword>
 801668a:	4602      	mov	r2, r0
 801668c:	4b1b      	ldr	r3, [pc, #108]	; (80166fc <find_volume+0x48c>)
 801668e:	429a      	cmp	r2, r3
 8016690:	d11e      	bne.n	80166d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016694:	3330      	adds	r3, #48	; 0x30
 8016696:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801669a:	4618      	mov	r0, r3
 801669c:	f7fe fbea 	bl	8014e74 <ld_dword>
 80166a0:	4602      	mov	r2, r0
 80166a2:	4b17      	ldr	r3, [pc, #92]	; (8016700 <find_volume+0x490>)
 80166a4:	429a      	cmp	r2, r3
 80166a6:	d113      	bne.n	80166d0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80166a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166aa:	3330      	adds	r3, #48	; 0x30
 80166ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80166b0:	4618      	mov	r0, r3
 80166b2:	f7fe fbdf 	bl	8014e74 <ld_dword>
 80166b6:	4602      	mov	r2, r0
 80166b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166ba:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80166bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166be:	3330      	adds	r3, #48	; 0x30
 80166c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7fe fbd5 	bl	8014e74 <ld_dword>
 80166ca:	4602      	mov	r2, r0
 80166cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166ce:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80166d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80166d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80166d8:	4b0a      	ldr	r3, [pc, #40]	; (8016704 <find_volume+0x494>)
 80166da:	881b      	ldrh	r3, [r3, #0]
 80166dc:	3301      	adds	r3, #1
 80166de:	b29a      	uxth	r2, r3
 80166e0:	4b08      	ldr	r3, [pc, #32]	; (8016704 <find_volume+0x494>)
 80166e2:	801a      	strh	r2, [r3, #0]
 80166e4:	4b07      	ldr	r3, [pc, #28]	; (8016704 <find_volume+0x494>)
 80166e6:	881a      	ldrh	r2, [r3, #0]
 80166e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166ea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80166ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80166ee:	f7fe fdf1 	bl	80152d4 <clear_lock>
#endif
	return FR_OK;
 80166f2:	2300      	movs	r3, #0
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	3758      	adds	r7, #88	; 0x58
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}
 80166fc:	41615252 	.word	0x41615252
 8016700:	61417272 	.word	0x61417272
 8016704:	24000b34 	.word	0x24000b34

08016708 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b084      	sub	sp, #16
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
 8016710:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016712:	2309      	movs	r3, #9
 8016714:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d01c      	beq.n	8016756 <validate+0x4e>
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d018      	beq.n	8016756 <validate+0x4e>
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	781b      	ldrb	r3, [r3, #0]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d013      	beq.n	8016756 <validate+0x4e>
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	889a      	ldrh	r2, [r3, #4]
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	88db      	ldrh	r3, [r3, #6]
 8016738:	429a      	cmp	r2, r3
 801673a:	d10c      	bne.n	8016756 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	785b      	ldrb	r3, [r3, #1]
 8016742:	4618      	mov	r0, r3
 8016744:	f7fe fae0 	bl	8014d08 <disk_status>
 8016748:	4603      	mov	r3, r0
 801674a:	f003 0301 	and.w	r3, r3, #1
 801674e:	2b00      	cmp	r3, #0
 8016750:	d101      	bne.n	8016756 <validate+0x4e>
			res = FR_OK;
 8016752:	2300      	movs	r3, #0
 8016754:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016756:	7bfb      	ldrb	r3, [r7, #15]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d102      	bne.n	8016762 <validate+0x5a>
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	e000      	b.n	8016764 <validate+0x5c>
 8016762:	2300      	movs	r3, #0
 8016764:	683a      	ldr	r2, [r7, #0]
 8016766:	6013      	str	r3, [r2, #0]
	return res;
 8016768:	7bfb      	ldrb	r3, [r7, #15]
}
 801676a:	4618      	mov	r0, r3
 801676c:	3710      	adds	r7, #16
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}
	...

08016774 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b088      	sub	sp, #32
 8016778:	af00      	add	r7, sp, #0
 801677a:	60f8      	str	r0, [r7, #12]
 801677c:	60b9      	str	r1, [r7, #8]
 801677e:	4613      	mov	r3, r2
 8016780:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016782:	68bb      	ldr	r3, [r7, #8]
 8016784:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016786:	f107 0310 	add.w	r3, r7, #16
 801678a:	4618      	mov	r0, r3
 801678c:	f7ff fcd5 	bl	801613a <get_ldnumber>
 8016790:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016792:	69fb      	ldr	r3, [r7, #28]
 8016794:	2b00      	cmp	r3, #0
 8016796:	da01      	bge.n	801679c <f_mount+0x28>
 8016798:	230b      	movs	r3, #11
 801679a:	e02b      	b.n	80167f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801679c:	4a17      	ldr	r2, [pc, #92]	; (80167fc <f_mount+0x88>)
 801679e:	69fb      	ldr	r3, [r7, #28]
 80167a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80167a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80167a6:	69bb      	ldr	r3, [r7, #24]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d005      	beq.n	80167b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80167ac:	69b8      	ldr	r0, [r7, #24]
 80167ae:	f7fe fd91 	bl	80152d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80167b2:	69bb      	ldr	r3, [r7, #24]
 80167b4:	2200      	movs	r2, #0
 80167b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d002      	beq.n	80167c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	2200      	movs	r2, #0
 80167c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80167c4:	68fa      	ldr	r2, [r7, #12]
 80167c6:	490d      	ldr	r1, [pc, #52]	; (80167fc <f_mount+0x88>)
 80167c8:	69fb      	ldr	r3, [r7, #28]
 80167ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d002      	beq.n	80167da <f_mount+0x66>
 80167d4:	79fb      	ldrb	r3, [r7, #7]
 80167d6:	2b01      	cmp	r3, #1
 80167d8:	d001      	beq.n	80167de <f_mount+0x6a>
 80167da:	2300      	movs	r3, #0
 80167dc:	e00a      	b.n	80167f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80167de:	f107 010c 	add.w	r1, r7, #12
 80167e2:	f107 0308 	add.w	r3, r7, #8
 80167e6:	2200      	movs	r2, #0
 80167e8:	4618      	mov	r0, r3
 80167ea:	f7ff fd41 	bl	8016270 <find_volume>
 80167ee:	4603      	mov	r3, r0
 80167f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80167f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80167f4:	4618      	mov	r0, r3
 80167f6:	3720      	adds	r7, #32
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}
 80167fc:	24000b30 	.word	0x24000b30

08016800 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016800:	b580      	push	{r7, lr}
 8016802:	b098      	sub	sp, #96	; 0x60
 8016804:	af00      	add	r7, sp, #0
 8016806:	60f8      	str	r0, [r7, #12]
 8016808:	60b9      	str	r1, [r7, #8]
 801680a:	4613      	mov	r3, r2
 801680c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d101      	bne.n	8016818 <f_open+0x18>
 8016814:	2309      	movs	r3, #9
 8016816:	e1ad      	b.n	8016b74 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016818:	79fb      	ldrb	r3, [r7, #7]
 801681a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801681e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016820:	79fa      	ldrb	r2, [r7, #7]
 8016822:	f107 0110 	add.w	r1, r7, #16
 8016826:	f107 0308 	add.w	r3, r7, #8
 801682a:	4618      	mov	r0, r3
 801682c:	f7ff fd20 	bl	8016270 <find_volume>
 8016830:	4603      	mov	r3, r0
 8016832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8016836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801683a:	2b00      	cmp	r3, #0
 801683c:	f040 8191 	bne.w	8016b62 <f_open+0x362>
		dj.obj.fs = fs;
 8016840:	693b      	ldr	r3, [r7, #16]
 8016842:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016844:	68ba      	ldr	r2, [r7, #8]
 8016846:	f107 0314 	add.w	r3, r7, #20
 801684a:	4611      	mov	r1, r2
 801684c:	4618      	mov	r0, r3
 801684e:	f7ff fc03 	bl	8016058 <follow_path>
 8016852:	4603      	mov	r3, r0
 8016854:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016858:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801685c:	2b00      	cmp	r3, #0
 801685e:	d11a      	bne.n	8016896 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016860:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016864:	b25b      	sxtb	r3, r3
 8016866:	2b00      	cmp	r3, #0
 8016868:	da03      	bge.n	8016872 <f_open+0x72>
				res = FR_INVALID_NAME;
 801686a:	2306      	movs	r3, #6
 801686c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016870:	e011      	b.n	8016896 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016872:	79fb      	ldrb	r3, [r7, #7]
 8016874:	f023 0301 	bic.w	r3, r3, #1
 8016878:	2b00      	cmp	r3, #0
 801687a:	bf14      	ite	ne
 801687c:	2301      	movne	r3, #1
 801687e:	2300      	moveq	r3, #0
 8016880:	b2db      	uxtb	r3, r3
 8016882:	461a      	mov	r2, r3
 8016884:	f107 0314 	add.w	r3, r7, #20
 8016888:	4611      	mov	r1, r2
 801688a:	4618      	mov	r0, r3
 801688c:	f7fe fbda 	bl	8015044 <chk_lock>
 8016890:	4603      	mov	r3, r0
 8016892:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016896:	79fb      	ldrb	r3, [r7, #7]
 8016898:	f003 031c 	and.w	r3, r3, #28
 801689c:	2b00      	cmp	r3, #0
 801689e:	d07f      	beq.n	80169a0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80168a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d017      	beq.n	80168d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80168a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80168ac:	2b04      	cmp	r3, #4
 80168ae:	d10e      	bne.n	80168ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80168b0:	f7fe fc24 	bl	80150fc <enq_lock>
 80168b4:	4603      	mov	r3, r0
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d006      	beq.n	80168c8 <f_open+0xc8>
 80168ba:	f107 0314 	add.w	r3, r7, #20
 80168be:	4618      	mov	r0, r3
 80168c0:	f7ff fb03 	bl	8015eca <dir_register>
 80168c4:	4603      	mov	r3, r0
 80168c6:	e000      	b.n	80168ca <f_open+0xca>
 80168c8:	2312      	movs	r3, #18
 80168ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80168ce:	79fb      	ldrb	r3, [r7, #7]
 80168d0:	f043 0308 	orr.w	r3, r3, #8
 80168d4:	71fb      	strb	r3, [r7, #7]
 80168d6:	e010      	b.n	80168fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80168d8:	7ebb      	ldrb	r3, [r7, #26]
 80168da:	f003 0311 	and.w	r3, r3, #17
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d003      	beq.n	80168ea <f_open+0xea>
					res = FR_DENIED;
 80168e2:	2307      	movs	r3, #7
 80168e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80168e8:	e007      	b.n	80168fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80168ea:	79fb      	ldrb	r3, [r7, #7]
 80168ec:	f003 0304 	and.w	r3, r3, #4
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d002      	beq.n	80168fa <f_open+0xfa>
 80168f4:	2308      	movs	r3, #8
 80168f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80168fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d168      	bne.n	80169d4 <f_open+0x1d4>
 8016902:	79fb      	ldrb	r3, [r7, #7]
 8016904:	f003 0308 	and.w	r3, r3, #8
 8016908:	2b00      	cmp	r3, #0
 801690a:	d063      	beq.n	80169d4 <f_open+0x1d4>
				dw = GET_FATTIME();
 801690c:	f7fb f8fe 	bl	8011b0c <get_fattime>
 8016910:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016914:	330e      	adds	r3, #14
 8016916:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016918:	4618      	mov	r0, r3
 801691a:	f7fe fae9 	bl	8014ef0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801691e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016920:	3316      	adds	r3, #22
 8016922:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016924:	4618      	mov	r0, r3
 8016926:	f7fe fae3 	bl	8014ef0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801692a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801692c:	330b      	adds	r3, #11
 801692e:	2220      	movs	r2, #32
 8016930:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016932:	693b      	ldr	r3, [r7, #16]
 8016934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016936:	4611      	mov	r1, r2
 8016938:	4618      	mov	r0, r3
 801693a:	f7ff fa32 	bl	8015da2 <ld_clust>
 801693e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016940:	693b      	ldr	r3, [r7, #16]
 8016942:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016944:	2200      	movs	r2, #0
 8016946:	4618      	mov	r0, r3
 8016948:	f7ff fa4a 	bl	8015de0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801694c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801694e:	331c      	adds	r3, #28
 8016950:	2100      	movs	r1, #0
 8016952:	4618      	mov	r0, r3
 8016954:	f7fe facc 	bl	8014ef0 <st_dword>
					fs->wflag = 1;
 8016958:	693b      	ldr	r3, [r7, #16]
 801695a:	2201      	movs	r2, #1
 801695c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801695e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016960:	2b00      	cmp	r3, #0
 8016962:	d037      	beq.n	80169d4 <f_open+0x1d4>
						dw = fs->winsect;
 8016964:	693b      	ldr	r3, [r7, #16]
 8016966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016968:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801696a:	f107 0314 	add.w	r3, r7, #20
 801696e:	2200      	movs	r2, #0
 8016970:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016972:	4618      	mov	r0, r3
 8016974:	f7fe ff5d 	bl	8015832 <remove_chain>
 8016978:	4603      	mov	r3, r0
 801697a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801697e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016982:	2b00      	cmp	r3, #0
 8016984:	d126      	bne.n	80169d4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8016986:	693b      	ldr	r3, [r7, #16]
 8016988:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801698a:	4618      	mov	r0, r3
 801698c:	f7fe fd0a 	bl	80153a4 <move_window>
 8016990:	4603      	mov	r3, r0
 8016992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016996:	693b      	ldr	r3, [r7, #16]
 8016998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801699a:	3a01      	subs	r2, #1
 801699c:	60da      	str	r2, [r3, #12]
 801699e:	e019      	b.n	80169d4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80169a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d115      	bne.n	80169d4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80169a8:	7ebb      	ldrb	r3, [r7, #26]
 80169aa:	f003 0310 	and.w	r3, r3, #16
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d003      	beq.n	80169ba <f_open+0x1ba>
					res = FR_NO_FILE;
 80169b2:	2304      	movs	r3, #4
 80169b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80169b8:	e00c      	b.n	80169d4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80169ba:	79fb      	ldrb	r3, [r7, #7]
 80169bc:	f003 0302 	and.w	r3, r3, #2
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d007      	beq.n	80169d4 <f_open+0x1d4>
 80169c4:	7ebb      	ldrb	r3, [r7, #26]
 80169c6:	f003 0301 	and.w	r3, r3, #1
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d002      	beq.n	80169d4 <f_open+0x1d4>
						res = FR_DENIED;
 80169ce:	2307      	movs	r3, #7
 80169d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80169d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d128      	bne.n	8016a2e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80169dc:	79fb      	ldrb	r3, [r7, #7]
 80169de:	f003 0308 	and.w	r3, r3, #8
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d003      	beq.n	80169ee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80169e6:	79fb      	ldrb	r3, [r7, #7]
 80169e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80169ee:	693b      	ldr	r3, [r7, #16]
 80169f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80169f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80169fc:	79fb      	ldrb	r3, [r7, #7]
 80169fe:	f023 0301 	bic.w	r3, r3, #1
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	bf14      	ite	ne
 8016a06:	2301      	movne	r3, #1
 8016a08:	2300      	moveq	r3, #0
 8016a0a:	b2db      	uxtb	r3, r3
 8016a0c:	461a      	mov	r2, r3
 8016a0e:	f107 0314 	add.w	r3, r7, #20
 8016a12:	4611      	mov	r1, r2
 8016a14:	4618      	mov	r0, r3
 8016a16:	f7fe fb93 	bl	8015140 <inc_lock>
 8016a1a:	4602      	mov	r2, r0
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	691b      	ldr	r3, [r3, #16]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d102      	bne.n	8016a2e <f_open+0x22e>
 8016a28:	2302      	movs	r3, #2
 8016a2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016a2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	f040 8095 	bne.w	8016b62 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016a38:	693b      	ldr	r3, [r7, #16]
 8016a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016a3c:	4611      	mov	r1, r2
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f7ff f9af 	bl	8015da2 <ld_clust>
 8016a44:	4602      	mov	r2, r0
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a4c:	331c      	adds	r3, #28
 8016a4e:	4618      	mov	r0, r3
 8016a50:	f7fe fa10 	bl	8014e74 <ld_dword>
 8016a54:	4602      	mov	r2, r0
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016a60:	693a      	ldr	r2, [r7, #16]
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016a66:	693b      	ldr	r3, [r7, #16]
 8016a68:	88da      	ldrh	r2, [r3, #6]
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	79fa      	ldrb	r2, [r7, #7]
 8016a72:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	2200      	movs	r2, #0
 8016a78:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	2200      	movs	r2, #0
 8016a84:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	3330      	adds	r3, #48	; 0x30
 8016a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016a8e:	2100      	movs	r1, #0
 8016a90:	4618      	mov	r0, r3
 8016a92:	f7fe fa7a 	bl	8014f8a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016a96:	79fb      	ldrb	r3, [r7, #7]
 8016a98:	f003 0320 	and.w	r3, r3, #32
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d060      	beq.n	8016b62 <f_open+0x362>
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	68db      	ldr	r3, [r3, #12]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d05c      	beq.n	8016b62 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	68da      	ldr	r2, [r3, #12]
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016ab0:	693b      	ldr	r3, [r7, #16]
 8016ab2:	895b      	ldrh	r3, [r3, #10]
 8016ab4:	025b      	lsls	r3, r3, #9
 8016ab6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	689b      	ldr	r3, [r3, #8]
 8016abc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	68db      	ldr	r3, [r3, #12]
 8016ac2:	657b      	str	r3, [r7, #84]	; 0x54
 8016ac4:	e016      	b.n	8016af4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7fe fd25 	bl	801551a <get_fat>
 8016ad0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8016ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016ad4:	2b01      	cmp	r3, #1
 8016ad6:	d802      	bhi.n	8016ade <f_open+0x2de>
 8016ad8:	2302      	movs	r3, #2
 8016ada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ae4:	d102      	bne.n	8016aec <f_open+0x2ec>
 8016ae6:	2301      	movs	r3, #1
 8016ae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016aec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016af0:	1ad3      	subs	r3, r2, r3
 8016af2:	657b      	str	r3, [r7, #84]	; 0x54
 8016af4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d103      	bne.n	8016b04 <f_open+0x304>
 8016afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b00:	429a      	cmp	r2, r3
 8016b02:	d8e0      	bhi.n	8016ac6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016b08:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d127      	bne.n	8016b62 <f_open+0x362>
 8016b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d022      	beq.n	8016b62 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016b1c:	693b      	ldr	r3, [r7, #16]
 8016b1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016b20:	4618      	mov	r0, r3
 8016b22:	f7fe fcdb 	bl	80154dc <clust2sect>
 8016b26:	6478      	str	r0, [r7, #68]	; 0x44
 8016b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d103      	bne.n	8016b36 <f_open+0x336>
						res = FR_INT_ERR;
 8016b2e:	2302      	movs	r3, #2
 8016b30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016b34:	e015      	b.n	8016b62 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b38:	0a5a      	lsrs	r2, r3, #9
 8016b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b3c:	441a      	add	r2, r3
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016b42:	693b      	ldr	r3, [r7, #16]
 8016b44:	7858      	ldrb	r0, [r3, #1]
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	6a1a      	ldr	r2, [r3, #32]
 8016b50:	2301      	movs	r3, #1
 8016b52:	f7fe f919 	bl	8014d88 <disk_read>
 8016b56:	4603      	mov	r3, r0
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d002      	beq.n	8016b62 <f_open+0x362>
 8016b5c:	2301      	movs	r3, #1
 8016b5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d002      	beq.n	8016b70 <f_open+0x370>
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016b70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8016b74:	4618      	mov	r0, r3
 8016b76:	3760      	adds	r7, #96	; 0x60
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}

08016b7c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b08e      	sub	sp, #56	; 0x38
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	60f8      	str	r0, [r7, #12]
 8016b84:	60b9      	str	r1, [r7, #8]
 8016b86:	607a      	str	r2, [r7, #4]
 8016b88:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8016b8a:	68bb      	ldr	r3, [r7, #8]
 8016b8c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8016b8e:	683b      	ldr	r3, [r7, #0]
 8016b90:	2200      	movs	r2, #0
 8016b92:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	f107 0214 	add.w	r2, r7, #20
 8016b9a:	4611      	mov	r1, r2
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f7ff fdb3 	bl	8016708 <validate>
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016ba8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d107      	bne.n	8016bc0 <f_read+0x44>
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	7d5b      	ldrb	r3, [r3, #21]
 8016bb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016bb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d002      	beq.n	8016bc6 <f_read+0x4a>
 8016bc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016bc4:	e115      	b.n	8016df2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	7d1b      	ldrb	r3, [r3, #20]
 8016bca:	f003 0301 	and.w	r3, r3, #1
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d101      	bne.n	8016bd6 <f_read+0x5a>
 8016bd2:	2307      	movs	r3, #7
 8016bd4:	e10d      	b.n	8016df2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	68da      	ldr	r2, [r3, #12]
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	699b      	ldr	r3, [r3, #24]
 8016bde:	1ad3      	subs	r3, r2, r3
 8016be0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8016be2:	687a      	ldr	r2, [r7, #4]
 8016be4:	6a3b      	ldr	r3, [r7, #32]
 8016be6:	429a      	cmp	r2, r3
 8016be8:	f240 80fe 	bls.w	8016de8 <f_read+0x26c>
 8016bec:	6a3b      	ldr	r3, [r7, #32]
 8016bee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8016bf0:	e0fa      	b.n	8016de8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	699b      	ldr	r3, [r3, #24]
 8016bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	f040 80c6 	bne.w	8016d8c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	699b      	ldr	r3, [r3, #24]
 8016c04:	0a5b      	lsrs	r3, r3, #9
 8016c06:	697a      	ldr	r2, [r7, #20]
 8016c08:	8952      	ldrh	r2, [r2, #10]
 8016c0a:	3a01      	subs	r2, #1
 8016c0c:	4013      	ands	r3, r2
 8016c0e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8016c10:	69fb      	ldr	r3, [r7, #28]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d12f      	bne.n	8016c76 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	699b      	ldr	r3, [r3, #24]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d103      	bne.n	8016c26 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	689b      	ldr	r3, [r3, #8]
 8016c22:	633b      	str	r3, [r7, #48]	; 0x30
 8016c24:	e013      	b.n	8016c4e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d007      	beq.n	8016c3e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	699b      	ldr	r3, [r3, #24]
 8016c32:	4619      	mov	r1, r3
 8016c34:	68f8      	ldr	r0, [r7, #12]
 8016c36:	f7fe fef9 	bl	8015a2c <clmt_clust>
 8016c3a:	6338      	str	r0, [r7, #48]	; 0x30
 8016c3c:	e007      	b.n	8016c4e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8016c3e:	68fa      	ldr	r2, [r7, #12]
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	69db      	ldr	r3, [r3, #28]
 8016c44:	4619      	mov	r1, r3
 8016c46:	4610      	mov	r0, r2
 8016c48:	f7fe fc67 	bl	801551a <get_fat>
 8016c4c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8016c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c50:	2b01      	cmp	r3, #1
 8016c52:	d804      	bhi.n	8016c5e <f_read+0xe2>
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	2202      	movs	r2, #2
 8016c58:	755a      	strb	r2, [r3, #21]
 8016c5a:	2302      	movs	r3, #2
 8016c5c:	e0c9      	b.n	8016df2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c64:	d104      	bne.n	8016c70 <f_read+0xf4>
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	2201      	movs	r2, #1
 8016c6a:	755a      	strb	r2, [r3, #21]
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	e0c0      	b.n	8016df2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c74:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016c76:	697a      	ldr	r2, [r7, #20]
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	69db      	ldr	r3, [r3, #28]
 8016c7c:	4619      	mov	r1, r3
 8016c7e:	4610      	mov	r0, r2
 8016c80:	f7fe fc2c 	bl	80154dc <clust2sect>
 8016c84:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016c86:	69bb      	ldr	r3, [r7, #24]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d104      	bne.n	8016c96 <f_read+0x11a>
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	2202      	movs	r2, #2
 8016c90:	755a      	strb	r2, [r3, #21]
 8016c92:	2302      	movs	r3, #2
 8016c94:	e0ad      	b.n	8016df2 <f_read+0x276>
			sect += csect;
 8016c96:	69ba      	ldr	r2, [r7, #24]
 8016c98:	69fb      	ldr	r3, [r7, #28]
 8016c9a:	4413      	add	r3, r2
 8016c9c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	0a5b      	lsrs	r3, r3, #9
 8016ca2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8016ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d039      	beq.n	8016d1e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016caa:	69fa      	ldr	r2, [r7, #28]
 8016cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cae:	4413      	add	r3, r2
 8016cb0:	697a      	ldr	r2, [r7, #20]
 8016cb2:	8952      	ldrh	r2, [r2, #10]
 8016cb4:	4293      	cmp	r3, r2
 8016cb6:	d905      	bls.n	8016cc4 <f_read+0x148>
					cc = fs->csize - csect;
 8016cb8:	697b      	ldr	r3, [r7, #20]
 8016cba:	895b      	ldrh	r3, [r3, #10]
 8016cbc:	461a      	mov	r2, r3
 8016cbe:	69fb      	ldr	r3, [r7, #28]
 8016cc0:	1ad3      	subs	r3, r2, r3
 8016cc2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016cc4:	697b      	ldr	r3, [r7, #20]
 8016cc6:	7858      	ldrb	r0, [r3, #1]
 8016cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cca:	69ba      	ldr	r2, [r7, #24]
 8016ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016cce:	f7fe f85b 	bl	8014d88 <disk_read>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d004      	beq.n	8016ce2 <f_read+0x166>
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	2201      	movs	r2, #1
 8016cdc:	755a      	strb	r2, [r3, #21]
 8016cde:	2301      	movs	r3, #1
 8016ce0:	e087      	b.n	8016df2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	7d1b      	ldrb	r3, [r3, #20]
 8016ce6:	b25b      	sxtb	r3, r3
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	da14      	bge.n	8016d16 <f_read+0x19a>
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	6a1a      	ldr	r2, [r3, #32]
 8016cf0:	69bb      	ldr	r3, [r7, #24]
 8016cf2:	1ad3      	subs	r3, r2, r3
 8016cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cf6:	429a      	cmp	r2, r3
 8016cf8:	d90d      	bls.n	8016d16 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	6a1a      	ldr	r2, [r3, #32]
 8016cfe:	69bb      	ldr	r3, [r7, #24]
 8016d00:	1ad3      	subs	r3, r2, r3
 8016d02:	025b      	lsls	r3, r3, #9
 8016d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d06:	18d0      	adds	r0, r2, r3
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	3330      	adds	r3, #48	; 0x30
 8016d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d10:	4619      	mov	r1, r3
 8016d12:	f7fe f919 	bl	8014f48 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8016d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d18:	025b      	lsls	r3, r3, #9
 8016d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8016d1c:	e050      	b.n	8016dc0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	6a1b      	ldr	r3, [r3, #32]
 8016d22:	69ba      	ldr	r2, [r7, #24]
 8016d24:	429a      	cmp	r2, r3
 8016d26:	d02e      	beq.n	8016d86 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	7d1b      	ldrb	r3, [r3, #20]
 8016d2c:	b25b      	sxtb	r3, r3
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	da18      	bge.n	8016d64 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016d32:	697b      	ldr	r3, [r7, #20]
 8016d34:	7858      	ldrb	r0, [r3, #1]
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	6a1a      	ldr	r2, [r3, #32]
 8016d40:	2301      	movs	r3, #1
 8016d42:	f7fe f841 	bl	8014dc8 <disk_write>
 8016d46:	4603      	mov	r3, r0
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d004      	beq.n	8016d56 <f_read+0x1da>
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	2201      	movs	r2, #1
 8016d50:	755a      	strb	r2, [r3, #21]
 8016d52:	2301      	movs	r3, #1
 8016d54:	e04d      	b.n	8016df2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	7d1b      	ldrb	r3, [r3, #20]
 8016d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016d5e:	b2da      	uxtb	r2, r3
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8016d64:	697b      	ldr	r3, [r7, #20]
 8016d66:	7858      	ldrb	r0, [r3, #1]
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016d6e:	2301      	movs	r3, #1
 8016d70:	69ba      	ldr	r2, [r7, #24]
 8016d72:	f7fe f809 	bl	8014d88 <disk_read>
 8016d76:	4603      	mov	r3, r0
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d004      	beq.n	8016d86 <f_read+0x20a>
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	2201      	movs	r2, #1
 8016d80:	755a      	strb	r2, [r3, #21]
 8016d82:	2301      	movs	r3, #1
 8016d84:	e035      	b.n	8016df2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	69ba      	ldr	r2, [r7, #24]
 8016d8a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	699b      	ldr	r3, [r3, #24]
 8016d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d94:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8016d98:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8016d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	429a      	cmp	r2, r3
 8016da0:	d901      	bls.n	8016da6 <f_read+0x22a>
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	699b      	ldr	r3, [r3, #24]
 8016db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016db4:	4413      	add	r3, r2
 8016db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016db8:	4619      	mov	r1, r3
 8016dba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016dbc:	f7fe f8c4 	bl	8014f48 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8016dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc4:	4413      	add	r3, r2
 8016dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	699a      	ldr	r2, [r3, #24]
 8016dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dce:	441a      	add	r2, r3
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	619a      	str	r2, [r3, #24]
 8016dd4:	683b      	ldr	r3, [r7, #0]
 8016dd6:	681a      	ldr	r2, [r3, #0]
 8016dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dda:	441a      	add	r2, r3
 8016ddc:	683b      	ldr	r3, [r7, #0]
 8016dde:	601a      	str	r2, [r3, #0]
 8016de0:	687a      	ldr	r2, [r7, #4]
 8016de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016de4:	1ad3      	subs	r3, r2, r3
 8016de6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	f47f af01 	bne.w	8016bf2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8016df0:	2300      	movs	r3, #0
}
 8016df2:	4618      	mov	r0, r3
 8016df4:	3738      	adds	r7, #56	; 0x38
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bd80      	pop	{r7, pc}

08016dfa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016dfa:	b580      	push	{r7, lr}
 8016dfc:	b08c      	sub	sp, #48	; 0x30
 8016dfe:	af00      	add	r7, sp, #0
 8016e00:	60f8      	str	r0, [r7, #12]
 8016e02:	60b9      	str	r1, [r7, #8]
 8016e04:	607a      	str	r2, [r7, #4]
 8016e06:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016e08:	68bb      	ldr	r3, [r7, #8]
 8016e0a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016e0c:	683b      	ldr	r3, [r7, #0]
 8016e0e:	2200      	movs	r2, #0
 8016e10:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	f107 0210 	add.w	r2, r7, #16
 8016e18:	4611      	mov	r1, r2
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	f7ff fc74 	bl	8016708 <validate>
 8016e20:	4603      	mov	r3, r0
 8016e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d107      	bne.n	8016e3e <f_write+0x44>
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	7d5b      	ldrb	r3, [r3, #21]
 8016e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d002      	beq.n	8016e44 <f_write+0x4a>
 8016e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016e42:	e14b      	b.n	80170dc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	7d1b      	ldrb	r3, [r3, #20]
 8016e48:	f003 0302 	and.w	r3, r3, #2
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d101      	bne.n	8016e54 <f_write+0x5a>
 8016e50:	2307      	movs	r3, #7
 8016e52:	e143      	b.n	80170dc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	699a      	ldr	r2, [r3, #24]
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	441a      	add	r2, r3
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	699b      	ldr	r3, [r3, #24]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	f080 812d 	bcs.w	80170c0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	699b      	ldr	r3, [r3, #24]
 8016e6a:	43db      	mvns	r3, r3
 8016e6c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8016e6e:	e127      	b.n	80170c0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	699b      	ldr	r3, [r3, #24]
 8016e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	f040 80e3 	bne.w	8017044 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	699b      	ldr	r3, [r3, #24]
 8016e82:	0a5b      	lsrs	r3, r3, #9
 8016e84:	693a      	ldr	r2, [r7, #16]
 8016e86:	8952      	ldrh	r2, [r2, #10]
 8016e88:	3a01      	subs	r2, #1
 8016e8a:	4013      	ands	r3, r2
 8016e8c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8016e8e:	69bb      	ldr	r3, [r7, #24]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d143      	bne.n	8016f1c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	699b      	ldr	r3, [r3, #24]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d10c      	bne.n	8016eb6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	689b      	ldr	r3, [r3, #8]
 8016ea0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d11a      	bne.n	8016ede <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	2100      	movs	r1, #0
 8016eac:	4618      	mov	r0, r3
 8016eae:	f7fe fd25 	bl	80158fc <create_chain>
 8016eb2:	62b8      	str	r0, [r7, #40]	; 0x28
 8016eb4:	e013      	b.n	8016ede <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d007      	beq.n	8016ece <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	699b      	ldr	r3, [r3, #24]
 8016ec2:	4619      	mov	r1, r3
 8016ec4:	68f8      	ldr	r0, [r7, #12]
 8016ec6:	f7fe fdb1 	bl	8015a2c <clmt_clust>
 8016eca:	62b8      	str	r0, [r7, #40]	; 0x28
 8016ecc:	e007      	b.n	8016ede <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016ece:	68fa      	ldr	r2, [r7, #12]
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	69db      	ldr	r3, [r3, #28]
 8016ed4:	4619      	mov	r1, r3
 8016ed6:	4610      	mov	r0, r2
 8016ed8:	f7fe fd10 	bl	80158fc <create_chain>
 8016edc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	f000 80f2 	beq.w	80170ca <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ee8:	2b01      	cmp	r3, #1
 8016eea:	d104      	bne.n	8016ef6 <f_write+0xfc>
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	2202      	movs	r2, #2
 8016ef0:	755a      	strb	r2, [r3, #21]
 8016ef2:	2302      	movs	r3, #2
 8016ef4:	e0f2      	b.n	80170dc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016efc:	d104      	bne.n	8016f08 <f_write+0x10e>
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	2201      	movs	r2, #1
 8016f02:	755a      	strb	r2, [r3, #21]
 8016f04:	2301      	movs	r3, #1
 8016f06:	e0e9      	b.n	80170dc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016f0c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	689b      	ldr	r3, [r3, #8]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d102      	bne.n	8016f1c <f_write+0x122>
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016f1a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	7d1b      	ldrb	r3, [r3, #20]
 8016f20:	b25b      	sxtb	r3, r3
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	da18      	bge.n	8016f58 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016f26:	693b      	ldr	r3, [r7, #16]
 8016f28:	7858      	ldrb	r0, [r3, #1]
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	6a1a      	ldr	r2, [r3, #32]
 8016f34:	2301      	movs	r3, #1
 8016f36:	f7fd ff47 	bl	8014dc8 <disk_write>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d004      	beq.n	8016f4a <f_write+0x150>
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	2201      	movs	r2, #1
 8016f44:	755a      	strb	r2, [r3, #21]
 8016f46:	2301      	movs	r3, #1
 8016f48:	e0c8      	b.n	80170dc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	7d1b      	ldrb	r3, [r3, #20]
 8016f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f52:	b2da      	uxtb	r2, r3
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016f58:	693a      	ldr	r2, [r7, #16]
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	69db      	ldr	r3, [r3, #28]
 8016f5e:	4619      	mov	r1, r3
 8016f60:	4610      	mov	r0, r2
 8016f62:	f7fe fabb 	bl	80154dc <clust2sect>
 8016f66:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016f68:	697b      	ldr	r3, [r7, #20]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d104      	bne.n	8016f78 <f_write+0x17e>
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	2202      	movs	r2, #2
 8016f72:	755a      	strb	r2, [r3, #21]
 8016f74:	2302      	movs	r3, #2
 8016f76:	e0b1      	b.n	80170dc <f_write+0x2e2>
			sect += csect;
 8016f78:	697a      	ldr	r2, [r7, #20]
 8016f7a:	69bb      	ldr	r3, [r7, #24]
 8016f7c:	4413      	add	r3, r2
 8016f7e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	0a5b      	lsrs	r3, r3, #9
 8016f84:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016f86:	6a3b      	ldr	r3, [r7, #32]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d03c      	beq.n	8017006 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016f8c:	69ba      	ldr	r2, [r7, #24]
 8016f8e:	6a3b      	ldr	r3, [r7, #32]
 8016f90:	4413      	add	r3, r2
 8016f92:	693a      	ldr	r2, [r7, #16]
 8016f94:	8952      	ldrh	r2, [r2, #10]
 8016f96:	4293      	cmp	r3, r2
 8016f98:	d905      	bls.n	8016fa6 <f_write+0x1ac>
					cc = fs->csize - csect;
 8016f9a:	693b      	ldr	r3, [r7, #16]
 8016f9c:	895b      	ldrh	r3, [r3, #10]
 8016f9e:	461a      	mov	r2, r3
 8016fa0:	69bb      	ldr	r3, [r7, #24]
 8016fa2:	1ad3      	subs	r3, r2, r3
 8016fa4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016fa6:	693b      	ldr	r3, [r7, #16]
 8016fa8:	7858      	ldrb	r0, [r3, #1]
 8016faa:	6a3b      	ldr	r3, [r7, #32]
 8016fac:	697a      	ldr	r2, [r7, #20]
 8016fae:	69f9      	ldr	r1, [r7, #28]
 8016fb0:	f7fd ff0a 	bl	8014dc8 <disk_write>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d004      	beq.n	8016fc4 <f_write+0x1ca>
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	2201      	movs	r2, #1
 8016fbe:	755a      	strb	r2, [r3, #21]
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	e08b      	b.n	80170dc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	6a1a      	ldr	r2, [r3, #32]
 8016fc8:	697b      	ldr	r3, [r7, #20]
 8016fca:	1ad3      	subs	r3, r2, r3
 8016fcc:	6a3a      	ldr	r2, [r7, #32]
 8016fce:	429a      	cmp	r2, r3
 8016fd0:	d915      	bls.n	8016ffe <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	6a1a      	ldr	r2, [r3, #32]
 8016fdc:	697b      	ldr	r3, [r7, #20]
 8016fde:	1ad3      	subs	r3, r2, r3
 8016fe0:	025b      	lsls	r3, r3, #9
 8016fe2:	69fa      	ldr	r2, [r7, #28]
 8016fe4:	4413      	add	r3, r2
 8016fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016fea:	4619      	mov	r1, r3
 8016fec:	f7fd ffac 	bl	8014f48 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	7d1b      	ldrb	r3, [r3, #20]
 8016ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016ff8:	b2da      	uxtb	r2, r3
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016ffe:	6a3b      	ldr	r3, [r7, #32]
 8017000:	025b      	lsls	r3, r3, #9
 8017002:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8017004:	e03f      	b.n	8017086 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	6a1b      	ldr	r3, [r3, #32]
 801700a:	697a      	ldr	r2, [r7, #20]
 801700c:	429a      	cmp	r2, r3
 801700e:	d016      	beq.n	801703e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	699a      	ldr	r2, [r3, #24]
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017018:	429a      	cmp	r2, r3
 801701a:	d210      	bcs.n	801703e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801701c:	693b      	ldr	r3, [r7, #16]
 801701e:	7858      	ldrb	r0, [r3, #1]
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017026:	2301      	movs	r3, #1
 8017028:	697a      	ldr	r2, [r7, #20]
 801702a:	f7fd fead 	bl	8014d88 <disk_read>
 801702e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017030:	2b00      	cmp	r3, #0
 8017032:	d004      	beq.n	801703e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	2201      	movs	r2, #1
 8017038:	755a      	strb	r2, [r3, #21]
 801703a:	2301      	movs	r3, #1
 801703c:	e04e      	b.n	80170dc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	697a      	ldr	r2, [r7, #20]
 8017042:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	699b      	ldr	r3, [r3, #24]
 8017048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801704c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017050:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8017052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	429a      	cmp	r2, r3
 8017058:	d901      	bls.n	801705e <f_write+0x264>
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	699b      	ldr	r3, [r3, #24]
 8017068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801706c:	4413      	add	r3, r2
 801706e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017070:	69f9      	ldr	r1, [r7, #28]
 8017072:	4618      	mov	r0, r3
 8017074:	f7fd ff68 	bl	8014f48 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	7d1b      	ldrb	r3, [r3, #20]
 801707c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017080:	b2da      	uxtb	r2, r3
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017086:	69fa      	ldr	r2, [r7, #28]
 8017088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801708a:	4413      	add	r3, r2
 801708c:	61fb      	str	r3, [r7, #28]
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	699a      	ldr	r2, [r3, #24]
 8017092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017094:	441a      	add	r2, r3
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	619a      	str	r2, [r3, #24]
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	68da      	ldr	r2, [r3, #12]
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	699b      	ldr	r3, [r3, #24]
 80170a2:	429a      	cmp	r2, r3
 80170a4:	bf38      	it	cc
 80170a6:	461a      	movcc	r2, r3
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	60da      	str	r2, [r3, #12]
 80170ac:	683b      	ldr	r3, [r7, #0]
 80170ae:	681a      	ldr	r2, [r3, #0]
 80170b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b2:	441a      	add	r2, r3
 80170b4:	683b      	ldr	r3, [r7, #0]
 80170b6:	601a      	str	r2, [r3, #0]
 80170b8:	687a      	ldr	r2, [r7, #4]
 80170ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170bc:	1ad3      	subs	r3, r2, r3
 80170be:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	f47f aed4 	bne.w	8016e70 <f_write+0x76>
 80170c8:	e000      	b.n	80170cc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80170ca:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	7d1b      	ldrb	r3, [r3, #20]
 80170d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170d4:	b2da      	uxtb	r2, r3
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80170da:	2300      	movs	r3, #0
}
 80170dc:	4618      	mov	r0, r3
 80170de:	3730      	adds	r7, #48	; 0x30
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}

080170e4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b086      	sub	sp, #24
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	f107 0208 	add.w	r2, r7, #8
 80170f2:	4611      	mov	r1, r2
 80170f4:	4618      	mov	r0, r3
 80170f6:	f7ff fb07 	bl	8016708 <validate>
 80170fa:	4603      	mov	r3, r0
 80170fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80170fe:	7dfb      	ldrb	r3, [r7, #23]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d168      	bne.n	80171d6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	7d1b      	ldrb	r3, [r3, #20]
 8017108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801710c:	2b00      	cmp	r3, #0
 801710e:	d062      	beq.n	80171d6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	7d1b      	ldrb	r3, [r3, #20]
 8017114:	b25b      	sxtb	r3, r3
 8017116:	2b00      	cmp	r3, #0
 8017118:	da15      	bge.n	8017146 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801711a:	68bb      	ldr	r3, [r7, #8]
 801711c:	7858      	ldrb	r0, [r3, #1]
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	6a1a      	ldr	r2, [r3, #32]
 8017128:	2301      	movs	r3, #1
 801712a:	f7fd fe4d 	bl	8014dc8 <disk_write>
 801712e:	4603      	mov	r3, r0
 8017130:	2b00      	cmp	r3, #0
 8017132:	d001      	beq.n	8017138 <f_sync+0x54>
 8017134:	2301      	movs	r3, #1
 8017136:	e04f      	b.n	80171d8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	7d1b      	ldrb	r3, [r3, #20]
 801713c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017140:	b2da      	uxtb	r2, r3
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017146:	f7fa fce1 	bl	8011b0c <get_fattime>
 801714a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801714c:	68ba      	ldr	r2, [r7, #8]
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017152:	4619      	mov	r1, r3
 8017154:	4610      	mov	r0, r2
 8017156:	f7fe f925 	bl	80153a4 <move_window>
 801715a:	4603      	mov	r3, r0
 801715c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801715e:	7dfb      	ldrb	r3, [r7, #23]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d138      	bne.n	80171d6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017168:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	330b      	adds	r3, #11
 801716e:	781a      	ldrb	r2, [r3, #0]
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	330b      	adds	r3, #11
 8017174:	f042 0220 	orr.w	r2, r2, #32
 8017178:	b2d2      	uxtb	r2, r2
 801717a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	6818      	ldr	r0, [r3, #0]
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	689b      	ldr	r3, [r3, #8]
 8017184:	461a      	mov	r2, r3
 8017186:	68f9      	ldr	r1, [r7, #12]
 8017188:	f7fe fe2a 	bl	8015de0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	f103 021c 	add.w	r2, r3, #28
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	68db      	ldr	r3, [r3, #12]
 8017196:	4619      	mov	r1, r3
 8017198:	4610      	mov	r0, r2
 801719a:	f7fd fea9 	bl	8014ef0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	3316      	adds	r3, #22
 80171a2:	6939      	ldr	r1, [r7, #16]
 80171a4:	4618      	mov	r0, r3
 80171a6:	f7fd fea3 	bl	8014ef0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	3312      	adds	r3, #18
 80171ae:	2100      	movs	r1, #0
 80171b0:	4618      	mov	r0, r3
 80171b2:	f7fd fe82 	bl	8014eba <st_word>
					fs->wflag = 1;
 80171b6:	68bb      	ldr	r3, [r7, #8]
 80171b8:	2201      	movs	r2, #1
 80171ba:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80171bc:	68bb      	ldr	r3, [r7, #8]
 80171be:	4618      	mov	r0, r3
 80171c0:	f7fe f91e 	bl	8015400 <sync_fs>
 80171c4:	4603      	mov	r3, r0
 80171c6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	7d1b      	ldrb	r3, [r3, #20]
 80171cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80171d0:	b2da      	uxtb	r2, r3
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80171d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80171d8:	4618      	mov	r0, r3
 80171da:	3718      	adds	r7, #24
 80171dc:	46bd      	mov	sp, r7
 80171de:	bd80      	pop	{r7, pc}

080171e0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b084      	sub	sp, #16
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80171e8:	6878      	ldr	r0, [r7, #4]
 80171ea:	f7ff ff7b 	bl	80170e4 <f_sync>
 80171ee:	4603      	mov	r3, r0
 80171f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80171f2:	7bfb      	ldrb	r3, [r7, #15]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d118      	bne.n	801722a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	f107 0208 	add.w	r2, r7, #8
 80171fe:	4611      	mov	r1, r2
 8017200:	4618      	mov	r0, r3
 8017202:	f7ff fa81 	bl	8016708 <validate>
 8017206:	4603      	mov	r3, r0
 8017208:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801720a:	7bfb      	ldrb	r3, [r7, #15]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d10c      	bne.n	801722a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	691b      	ldr	r3, [r3, #16]
 8017214:	4618      	mov	r0, r3
 8017216:	f7fe f821 	bl	801525c <dec_lock>
 801721a:	4603      	mov	r3, r0
 801721c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801721e:	7bfb      	ldrb	r3, [r7, #15]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d102      	bne.n	801722a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2200      	movs	r2, #0
 8017228:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801722a:	7bfb      	ldrb	r3, [r7, #15]
}
 801722c:	4618      	mov	r0, r3
 801722e:	3710      	adds	r7, #16
 8017230:	46bd      	mov	sp, r7
 8017232:	bd80      	pop	{r7, pc}

08017234 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017234:	b480      	push	{r7}
 8017236:	b087      	sub	sp, #28
 8017238:	af00      	add	r7, sp, #0
 801723a:	60f8      	str	r0, [r7, #12]
 801723c:	60b9      	str	r1, [r7, #8]
 801723e:	4613      	mov	r3, r2
 8017240:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017242:	2301      	movs	r3, #1
 8017244:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017246:	2300      	movs	r3, #0
 8017248:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801724a:	4b1f      	ldr	r3, [pc, #124]	; (80172c8 <FATFS_LinkDriverEx+0x94>)
 801724c:	7a5b      	ldrb	r3, [r3, #9]
 801724e:	b2db      	uxtb	r3, r3
 8017250:	2b00      	cmp	r3, #0
 8017252:	d131      	bne.n	80172b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017254:	4b1c      	ldr	r3, [pc, #112]	; (80172c8 <FATFS_LinkDriverEx+0x94>)
 8017256:	7a5b      	ldrb	r3, [r3, #9]
 8017258:	b2db      	uxtb	r3, r3
 801725a:	461a      	mov	r2, r3
 801725c:	4b1a      	ldr	r3, [pc, #104]	; (80172c8 <FATFS_LinkDriverEx+0x94>)
 801725e:	2100      	movs	r1, #0
 8017260:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017262:	4b19      	ldr	r3, [pc, #100]	; (80172c8 <FATFS_LinkDriverEx+0x94>)
 8017264:	7a5b      	ldrb	r3, [r3, #9]
 8017266:	b2db      	uxtb	r3, r3
 8017268:	4a17      	ldr	r2, [pc, #92]	; (80172c8 <FATFS_LinkDriverEx+0x94>)
 801726a:	009b      	lsls	r3, r3, #2
 801726c:	4413      	add	r3, r2
 801726e:	68fa      	ldr	r2, [r7, #12]
 8017270:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017272:	4b15      	ldr	r3, [pc, #84]	; (80172c8 <FATFS_LinkDriverEx+0x94>)
 8017274:	7a5b      	ldrb	r3, [r3, #9]
 8017276:	b2db      	uxtb	r3, r3
 8017278:	461a      	mov	r2, r3
 801727a:	4b13      	ldr	r3, [pc, #76]	; (80172c8 <FATFS_LinkDriverEx+0x94>)
 801727c:	4413      	add	r3, r2
 801727e:	79fa      	ldrb	r2, [r7, #7]
 8017280:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017282:	4b11      	ldr	r3, [pc, #68]	; (80172c8 <FATFS_LinkDriverEx+0x94>)
 8017284:	7a5b      	ldrb	r3, [r3, #9]
 8017286:	b2db      	uxtb	r3, r3
 8017288:	1c5a      	adds	r2, r3, #1
 801728a:	b2d1      	uxtb	r1, r2
 801728c:	4a0e      	ldr	r2, [pc, #56]	; (80172c8 <FATFS_LinkDriverEx+0x94>)
 801728e:	7251      	strb	r1, [r2, #9]
 8017290:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017292:	7dbb      	ldrb	r3, [r7, #22]
 8017294:	3330      	adds	r3, #48	; 0x30
 8017296:	b2da      	uxtb	r2, r3
 8017298:	68bb      	ldr	r3, [r7, #8]
 801729a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801729c:	68bb      	ldr	r3, [r7, #8]
 801729e:	3301      	adds	r3, #1
 80172a0:	223a      	movs	r2, #58	; 0x3a
 80172a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80172a4:	68bb      	ldr	r3, [r7, #8]
 80172a6:	3302      	adds	r3, #2
 80172a8:	222f      	movs	r2, #47	; 0x2f
 80172aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80172ac:	68bb      	ldr	r3, [r7, #8]
 80172ae:	3303      	adds	r3, #3
 80172b0:	2200      	movs	r2, #0
 80172b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80172b4:	2300      	movs	r3, #0
 80172b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80172b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80172ba:	4618      	mov	r0, r3
 80172bc:	371c      	adds	r7, #28
 80172be:	46bd      	mov	sp, r7
 80172c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c4:	4770      	bx	lr
 80172c6:	bf00      	nop
 80172c8:	24000b58 	.word	0x24000b58

080172cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b082      	sub	sp, #8
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
 80172d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80172d6:	2200      	movs	r2, #0
 80172d8:	6839      	ldr	r1, [r7, #0]
 80172da:	6878      	ldr	r0, [r7, #4]
 80172dc:	f7ff ffaa 	bl	8017234 <FATFS_LinkDriverEx>
 80172e0:	4603      	mov	r3, r0
}
 80172e2:	4618      	mov	r0, r3
 80172e4:	3708      	adds	r7, #8
 80172e6:	46bd      	mov	sp, r7
 80172e8:	bd80      	pop	{r7, pc}
	...

080172ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80172f0:	2200      	movs	r2, #0
 80172f2:	4913      	ldr	r1, [pc, #76]	; (8017340 <MX_USB_DEVICE_Init+0x54>)
 80172f4:	4813      	ldr	r0, [pc, #76]	; (8017344 <MX_USB_DEVICE_Init+0x58>)
 80172f6:	f7fc fc20 	bl	8013b3a <USBD_Init>
 80172fa:	4603      	mov	r3, r0
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d001      	beq.n	8017304 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017300:	f7eb f9b2 	bl	8002668 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8017304:	4910      	ldr	r1, [pc, #64]	; (8017348 <MX_USB_DEVICE_Init+0x5c>)
 8017306:	480f      	ldr	r0, [pc, #60]	; (8017344 <MX_USB_DEVICE_Init+0x58>)
 8017308:	f7fc fc4d 	bl	8013ba6 <USBD_RegisterClass>
 801730c:	4603      	mov	r3, r0
 801730e:	2b00      	cmp	r3, #0
 8017310:	d001      	beq.n	8017316 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017312:	f7eb f9a9 	bl	8002668 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8017316:	490d      	ldr	r1, [pc, #52]	; (801734c <MX_USB_DEVICE_Init+0x60>)
 8017318:	480a      	ldr	r0, [pc, #40]	; (8017344 <MX_USB_DEVICE_Init+0x58>)
 801731a:	f7fa fff7 	bl	801230c <USBD_MSC_RegisterStorage>
 801731e:	4603      	mov	r3, r0
 8017320:	2b00      	cmp	r3, #0
 8017322:	d001      	beq.n	8017328 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017324:	f7eb f9a0 	bl	8002668 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017328:	4806      	ldr	r0, [pc, #24]	; (8017344 <MX_USB_DEVICE_Init+0x58>)
 801732a:	f7fc fc5d 	bl	8013be8 <USBD_Start>
 801732e:	4603      	mov	r3, r0
 8017330:	2b00      	cmp	r3, #0
 8017332:	d001      	beq.n	8017338 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017334:	f7eb f998 	bl	8002668 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017338:	f7f0 fef2 	bl	8008120 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801733c:	bf00      	nop
 801733e:	bd80      	pop	{r7, pc}
 8017340:	24000104 	.word	0x24000104
 8017344:	24001b7c 	.word	0x24001b7c
 8017348:	2400001c 	.word	0x2400001c
 801734c:	24000154 	.word	0x24000154

08017350 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017350:	b480      	push	{r7}
 8017352:	b083      	sub	sp, #12
 8017354:	af00      	add	r7, sp, #0
 8017356:	4603      	mov	r3, r0
 8017358:	6039      	str	r1, [r7, #0]
 801735a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801735c:	683b      	ldr	r3, [r7, #0]
 801735e:	2212      	movs	r2, #18
 8017360:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017362:	4b03      	ldr	r3, [pc, #12]	; (8017370 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017364:	4618      	mov	r0, r3
 8017366:	370c      	adds	r7, #12
 8017368:	46bd      	mov	sp, r7
 801736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801736e:	4770      	bx	lr
 8017370:	24000120 	.word	0x24000120

08017374 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017374:	b480      	push	{r7}
 8017376:	b083      	sub	sp, #12
 8017378:	af00      	add	r7, sp, #0
 801737a:	4603      	mov	r3, r0
 801737c:	6039      	str	r1, [r7, #0]
 801737e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	2204      	movs	r2, #4
 8017384:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017386:	4b03      	ldr	r3, [pc, #12]	; (8017394 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017388:	4618      	mov	r0, r3
 801738a:	370c      	adds	r7, #12
 801738c:	46bd      	mov	sp, r7
 801738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017392:	4770      	bx	lr
 8017394:	24000134 	.word	0x24000134

08017398 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b082      	sub	sp, #8
 801739c:	af00      	add	r7, sp, #0
 801739e:	4603      	mov	r3, r0
 80173a0:	6039      	str	r1, [r7, #0]
 80173a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80173a4:	79fb      	ldrb	r3, [r7, #7]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d105      	bne.n	80173b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80173aa:	683a      	ldr	r2, [r7, #0]
 80173ac:	4907      	ldr	r1, [pc, #28]	; (80173cc <USBD_FS_ProductStrDescriptor+0x34>)
 80173ae:	4808      	ldr	r0, [pc, #32]	; (80173d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80173b0:	f7fd fbe7 	bl	8014b82 <USBD_GetString>
 80173b4:	e004      	b.n	80173c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80173b6:	683a      	ldr	r2, [r7, #0]
 80173b8:	4904      	ldr	r1, [pc, #16]	; (80173cc <USBD_FS_ProductStrDescriptor+0x34>)
 80173ba:	4805      	ldr	r0, [pc, #20]	; (80173d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80173bc:	f7fd fbe1 	bl	8014b82 <USBD_GetString>
  }
  return USBD_StrDesc;
 80173c0:	4b02      	ldr	r3, [pc, #8]	; (80173cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80173c2:	4618      	mov	r0, r3
 80173c4:	3708      	adds	r7, #8
 80173c6:	46bd      	mov	sp, r7
 80173c8:	bd80      	pop	{r7, pc}
 80173ca:	bf00      	nop
 80173cc:	24001e4c 	.word	0x24001e4c
 80173d0:	08019764 	.word	0x08019764

080173d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b082      	sub	sp, #8
 80173d8:	af00      	add	r7, sp, #0
 80173da:	4603      	mov	r3, r0
 80173dc:	6039      	str	r1, [r7, #0]
 80173de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80173e0:	683a      	ldr	r2, [r7, #0]
 80173e2:	4904      	ldr	r1, [pc, #16]	; (80173f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80173e4:	4804      	ldr	r0, [pc, #16]	; (80173f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80173e6:	f7fd fbcc 	bl	8014b82 <USBD_GetString>
  return USBD_StrDesc;
 80173ea:	4b02      	ldr	r3, [pc, #8]	; (80173f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80173ec:	4618      	mov	r0, r3
 80173ee:	3708      	adds	r7, #8
 80173f0:	46bd      	mov	sp, r7
 80173f2:	bd80      	pop	{r7, pc}
 80173f4:	24001e4c 	.word	0x24001e4c
 80173f8:	08019778 	.word	0x08019778

080173fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	b082      	sub	sp, #8
 8017400:	af00      	add	r7, sp, #0
 8017402:	4603      	mov	r3, r0
 8017404:	6039      	str	r1, [r7, #0]
 8017406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	221a      	movs	r2, #26
 801740c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801740e:	f000 f843 	bl	8017498 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017412:	4b02      	ldr	r3, [pc, #8]	; (801741c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017414:	4618      	mov	r0, r3
 8017416:	3708      	adds	r7, #8
 8017418:	46bd      	mov	sp, r7
 801741a:	bd80      	pop	{r7, pc}
 801741c:	24000138 	.word	0x24000138

08017420 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b082      	sub	sp, #8
 8017424:	af00      	add	r7, sp, #0
 8017426:	4603      	mov	r3, r0
 8017428:	6039      	str	r1, [r7, #0]
 801742a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801742c:	79fb      	ldrb	r3, [r7, #7]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d105      	bne.n	801743e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017432:	683a      	ldr	r2, [r7, #0]
 8017434:	4907      	ldr	r1, [pc, #28]	; (8017454 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017436:	4808      	ldr	r0, [pc, #32]	; (8017458 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017438:	f7fd fba3 	bl	8014b82 <USBD_GetString>
 801743c:	e004      	b.n	8017448 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801743e:	683a      	ldr	r2, [r7, #0]
 8017440:	4904      	ldr	r1, [pc, #16]	; (8017454 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017442:	4805      	ldr	r0, [pc, #20]	; (8017458 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017444:	f7fd fb9d 	bl	8014b82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017448:	4b02      	ldr	r3, [pc, #8]	; (8017454 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801744a:	4618      	mov	r0, r3
 801744c:	3708      	adds	r7, #8
 801744e:	46bd      	mov	sp, r7
 8017450:	bd80      	pop	{r7, pc}
 8017452:	bf00      	nop
 8017454:	24001e4c 	.word	0x24001e4c
 8017458:	0801978c 	.word	0x0801978c

0801745c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b082      	sub	sp, #8
 8017460:	af00      	add	r7, sp, #0
 8017462:	4603      	mov	r3, r0
 8017464:	6039      	str	r1, [r7, #0]
 8017466:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017468:	79fb      	ldrb	r3, [r7, #7]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d105      	bne.n	801747a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801746e:	683a      	ldr	r2, [r7, #0]
 8017470:	4907      	ldr	r1, [pc, #28]	; (8017490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017472:	4808      	ldr	r0, [pc, #32]	; (8017494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017474:	f7fd fb85 	bl	8014b82 <USBD_GetString>
 8017478:	e004      	b.n	8017484 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801747a:	683a      	ldr	r2, [r7, #0]
 801747c:	4904      	ldr	r1, [pc, #16]	; (8017490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801747e:	4805      	ldr	r0, [pc, #20]	; (8017494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017480:	f7fd fb7f 	bl	8014b82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017484:	4b02      	ldr	r3, [pc, #8]	; (8017490 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017486:	4618      	mov	r0, r3
 8017488:	3708      	adds	r7, #8
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}
 801748e:	bf00      	nop
 8017490:	24001e4c 	.word	0x24001e4c
 8017494:	08019798 	.word	0x08019798

08017498 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	b084      	sub	sp, #16
 801749c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801749e:	4b0f      	ldr	r3, [pc, #60]	; (80174dc <Get_SerialNum+0x44>)
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80174a4:	4b0e      	ldr	r3, [pc, #56]	; (80174e0 <Get_SerialNum+0x48>)
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80174aa:	4b0e      	ldr	r3, [pc, #56]	; (80174e4 <Get_SerialNum+0x4c>)
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80174b0:	68fa      	ldr	r2, [r7, #12]
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	4413      	add	r3, r2
 80174b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d009      	beq.n	80174d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80174be:	2208      	movs	r2, #8
 80174c0:	4909      	ldr	r1, [pc, #36]	; (80174e8 <Get_SerialNum+0x50>)
 80174c2:	68f8      	ldr	r0, [r7, #12]
 80174c4:	f000 f814 	bl	80174f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80174c8:	2204      	movs	r2, #4
 80174ca:	4908      	ldr	r1, [pc, #32]	; (80174ec <Get_SerialNum+0x54>)
 80174cc:	68b8      	ldr	r0, [r7, #8]
 80174ce:	f000 f80f 	bl	80174f0 <IntToUnicode>
  }
}
 80174d2:	bf00      	nop
 80174d4:	3710      	adds	r7, #16
 80174d6:	46bd      	mov	sp, r7
 80174d8:	bd80      	pop	{r7, pc}
 80174da:	bf00      	nop
 80174dc:	1ff1e800 	.word	0x1ff1e800
 80174e0:	1ff1e804 	.word	0x1ff1e804
 80174e4:	1ff1e808 	.word	0x1ff1e808
 80174e8:	2400013a 	.word	0x2400013a
 80174ec:	2400014a 	.word	0x2400014a

080174f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80174f0:	b480      	push	{r7}
 80174f2:	b087      	sub	sp, #28
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	60f8      	str	r0, [r7, #12]
 80174f8:	60b9      	str	r1, [r7, #8]
 80174fa:	4613      	mov	r3, r2
 80174fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80174fe:	2300      	movs	r3, #0
 8017500:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017502:	2300      	movs	r3, #0
 8017504:	75fb      	strb	r3, [r7, #23]
 8017506:	e027      	b.n	8017558 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	0f1b      	lsrs	r3, r3, #28
 801750c:	2b09      	cmp	r3, #9
 801750e:	d80b      	bhi.n	8017528 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	0f1b      	lsrs	r3, r3, #28
 8017514:	b2da      	uxtb	r2, r3
 8017516:	7dfb      	ldrb	r3, [r7, #23]
 8017518:	005b      	lsls	r3, r3, #1
 801751a:	4619      	mov	r1, r3
 801751c:	68bb      	ldr	r3, [r7, #8]
 801751e:	440b      	add	r3, r1
 8017520:	3230      	adds	r2, #48	; 0x30
 8017522:	b2d2      	uxtb	r2, r2
 8017524:	701a      	strb	r2, [r3, #0]
 8017526:	e00a      	b.n	801753e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	0f1b      	lsrs	r3, r3, #28
 801752c:	b2da      	uxtb	r2, r3
 801752e:	7dfb      	ldrb	r3, [r7, #23]
 8017530:	005b      	lsls	r3, r3, #1
 8017532:	4619      	mov	r1, r3
 8017534:	68bb      	ldr	r3, [r7, #8]
 8017536:	440b      	add	r3, r1
 8017538:	3237      	adds	r2, #55	; 0x37
 801753a:	b2d2      	uxtb	r2, r2
 801753c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	011b      	lsls	r3, r3, #4
 8017542:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017544:	7dfb      	ldrb	r3, [r7, #23]
 8017546:	005b      	lsls	r3, r3, #1
 8017548:	3301      	adds	r3, #1
 801754a:	68ba      	ldr	r2, [r7, #8]
 801754c:	4413      	add	r3, r2
 801754e:	2200      	movs	r2, #0
 8017550:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017552:	7dfb      	ldrb	r3, [r7, #23]
 8017554:	3301      	adds	r3, #1
 8017556:	75fb      	strb	r3, [r7, #23]
 8017558:	7dfa      	ldrb	r2, [r7, #23]
 801755a:	79fb      	ldrb	r3, [r7, #7]
 801755c:	429a      	cmp	r2, r3
 801755e:	d3d3      	bcc.n	8017508 <IntToUnicode+0x18>
  }
}
 8017560:	bf00      	nop
 8017562:	371c      	adds	r7, #28
 8017564:	46bd      	mov	sp, r7
 8017566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756a:	4770      	bx	lr

0801756c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801756c:	b480      	push	{r7}
 801756e:	b083      	sub	sp, #12
 8017570:	af00      	add	r7, sp, #0
 8017572:	4603      	mov	r3, r0
 8017574:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8017576:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8017578:	4618      	mov	r0, r3
 801757a:	370c      	adds	r7, #12
 801757c:	46bd      	mov	sp, r7
 801757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017582:	4770      	bx	lr

08017584 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b08e      	sub	sp, #56	; 0x38
 8017588:	af00      	add	r7, sp, #0
 801758a:	4603      	mov	r3, r0
 801758c:	60b9      	str	r1, [r7, #8]
 801758e:	607a      	str	r2, [r7, #4]
 8017590:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8017592:	23ff      	movs	r3, #255	; 0xff
 8017594:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8017598:	f107 0310 	add.w	r3, r7, #16
 801759c:	4619      	mov	r1, r3
 801759e:	480a      	ldr	r0, [pc, #40]	; (80175c8 <STORAGE_GetCapacity_FS+0x44>)
 80175a0:	f7f5 f89a 	bl	800c6d8 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 80175a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175a6:	1e5a      	subs	r2, r3, #1
 80175a8:	68bb      	ldr	r3, [r7, #8]
 80175aa:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 80175ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ae:	b29a      	uxth	r2, r3
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 80175b4:	2300      	movs	r3, #0
 80175b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 80175ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3738      	adds	r7, #56	; 0x38
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}
 80175c6:	bf00      	nop
 80175c8:	240013bc 	.word	0x240013bc

080175cc <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80175cc:	b480      	push	{r7}
 80175ce:	b083      	sub	sp, #12
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	4603      	mov	r3, r0
 80175d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80175d6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80175d8:	4618      	mov	r0, r3
 80175da:	370c      	adds	r7, #12
 80175dc:	46bd      	mov	sp, r7
 80175de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e2:	4770      	bx	lr

080175e4 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80175e4:	b480      	push	{r7}
 80175e6:	b083      	sub	sp, #12
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	4603      	mov	r3, r0
 80175ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80175ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80175f0:	4618      	mov	r0, r3
 80175f2:	370c      	adds	r7, #12
 80175f4:	46bd      	mov	sp, r7
 80175f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fa:	4770      	bx	lr

080175fc <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b088      	sub	sp, #32
 8017600:	af02      	add	r7, sp, #8
 8017602:	60b9      	str	r1, [r7, #8]
 8017604:	607a      	str	r2, [r7, #4]
 8017606:	461a      	mov	r2, r3
 8017608:	4603      	mov	r3, r0
 801760a:	73fb      	strb	r3, [r7, #15]
 801760c:	4613      	mov	r3, r2
 801760e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8017610:	23ff      	movs	r3, #255	; 0xff
 8017612:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017614:	89ba      	ldrh	r2, [r7, #12]
 8017616:	f04f 33ff 	mov.w	r3, #4294967295
 801761a:	9300      	str	r3, [sp, #0]
 801761c:	4613      	mov	r3, r2
 801761e:	687a      	ldr	r2, [r7, #4]
 8017620:	68b9      	ldr	r1, [r7, #8]
 8017622:	4809      	ldr	r0, [pc, #36]	; (8017648 <STORAGE_Read_FS+0x4c>)
 8017624:	f7f3 ffca 	bl	800b5bc <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8017628:	bf00      	nop
 801762a:	4807      	ldr	r0, [pc, #28]	; (8017648 <STORAGE_Read_FS+0x4c>)
 801762c:	f7f5 f92a 	bl	800c884 <HAL_SD_GetCardState>
 8017630:	4603      	mov	r3, r0
 8017632:	2b04      	cmp	r3, #4
 8017634:	d1f9      	bne.n	801762a <STORAGE_Read_FS+0x2e>
	ret = 0;
 8017636:	2300      	movs	r3, #0
 8017638:	75fb      	strb	r3, [r7, #23]
	return ret;
 801763a:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801763e:	4618      	mov	r0, r3
 8017640:	3718      	adds	r7, #24
 8017642:	46bd      	mov	sp, r7
 8017644:	bd80      	pop	{r7, pc}
 8017646:	bf00      	nop
 8017648:	240013bc 	.word	0x240013bc

0801764c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b088      	sub	sp, #32
 8017650:	af02      	add	r7, sp, #8
 8017652:	60b9      	str	r1, [r7, #8]
 8017654:	607a      	str	r2, [r7, #4]
 8017656:	461a      	mov	r2, r3
 8017658:	4603      	mov	r3, r0
 801765a:	73fb      	strb	r3, [r7, #15]
 801765c:	4613      	mov	r3, r2
 801765e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8017660:	23ff      	movs	r3, #255	; 0xff
 8017662:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017664:	89ba      	ldrh	r2, [r7, #12]
 8017666:	f04f 33ff 	mov.w	r3, #4294967295
 801766a:	9300      	str	r3, [sp, #0]
 801766c:	4613      	mov	r3, r2
 801766e:	687a      	ldr	r2, [r7, #4]
 8017670:	68b9      	ldr	r1, [r7, #8]
 8017672:	4809      	ldr	r0, [pc, #36]	; (8017698 <STORAGE_Write_FS+0x4c>)
 8017674:	f7f4 f92c 	bl	800b8d0 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8017678:	bf00      	nop
 801767a:	4807      	ldr	r0, [pc, #28]	; (8017698 <STORAGE_Write_FS+0x4c>)
 801767c:	f7f5 f902 	bl	800c884 <HAL_SD_GetCardState>
 8017680:	4603      	mov	r3, r0
 8017682:	2b04      	cmp	r3, #4
 8017684:	d1f9      	bne.n	801767a <STORAGE_Write_FS+0x2e>
	ret = 0;
 8017686:	2300      	movs	r3, #0
 8017688:	75fb      	strb	r3, [r7, #23]
	return ret;
 801768a:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801768e:	4618      	mov	r0, r3
 8017690:	3718      	adds	r7, #24
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}
 8017696:	bf00      	nop
 8017698:	240013bc 	.word	0x240013bc

0801769c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801769c:	b480      	push	{r7}
 801769e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80176a0:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80176a2:	4618      	mov	r0, r3
 80176a4:	46bd      	mov	sp, r7
 80176a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176aa:	4770      	bx	lr

080176ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b08a      	sub	sp, #40	; 0x28
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80176b4:	f107 0314 	add.w	r3, r7, #20
 80176b8:	2200      	movs	r2, #0
 80176ba:	601a      	str	r2, [r3, #0]
 80176bc:	605a      	str	r2, [r3, #4]
 80176be:	609a      	str	r2, [r3, #8]
 80176c0:	60da      	str	r2, [r3, #12]
 80176c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	4a1e      	ldr	r2, [pc, #120]	; (8017744 <HAL_PCD_MspInit+0x98>)
 80176ca:	4293      	cmp	r3, r2
 80176cc:	d136      	bne.n	801773c <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80176ce:	4b1e      	ldr	r3, [pc, #120]	; (8017748 <HAL_PCD_MspInit+0x9c>)
 80176d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80176d4:	4a1c      	ldr	r2, [pc, #112]	; (8017748 <HAL_PCD_MspInit+0x9c>)
 80176d6:	f043 0301 	orr.w	r3, r3, #1
 80176da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80176de:	4b1a      	ldr	r3, [pc, #104]	; (8017748 <HAL_PCD_MspInit+0x9c>)
 80176e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80176e4:	f003 0301 	and.w	r3, r3, #1
 80176e8:	613b      	str	r3, [r7, #16]
 80176ea:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80176ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80176f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80176f2:	2302      	movs	r3, #2
 80176f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176f6:	2300      	movs	r3, #0
 80176f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80176fa:	2300      	movs	r3, #0
 80176fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80176fe:	230a      	movs	r3, #10
 8017700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017702:	f107 0314 	add.w	r3, r7, #20
 8017706:	4619      	mov	r1, r3
 8017708:	4810      	ldr	r0, [pc, #64]	; (801774c <HAL_PCD_MspInit+0xa0>)
 801770a:	f7ee fff3 	bl	80066f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801770e:	4b0e      	ldr	r3, [pc, #56]	; (8017748 <HAL_PCD_MspInit+0x9c>)
 8017710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017714:	4a0c      	ldr	r2, [pc, #48]	; (8017748 <HAL_PCD_MspInit+0x9c>)
 8017716:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801771a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801771e:	4b0a      	ldr	r3, [pc, #40]	; (8017748 <HAL_PCD_MspInit+0x9c>)
 8017720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017728:	60fb      	str	r3, [r7, #12]
 801772a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801772c:	2200      	movs	r2, #0
 801772e:	2100      	movs	r1, #0
 8017730:	2065      	movs	r0, #101	; 0x65
 8017732:	f7eb fd96 	bl	8003262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017736:	2065      	movs	r0, #101	; 0x65
 8017738:	f7eb fdad 	bl	8003296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801773c:	bf00      	nop
 801773e:	3728      	adds	r7, #40	; 0x28
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}
 8017744:	40080000 	.word	0x40080000
 8017748:	58024400 	.word	0x58024400
 801774c:	58020000 	.word	0x58020000

08017750 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b082      	sub	sp, #8
 8017754:	af00      	add	r7, sp, #0
 8017756:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8017764:	4619      	mov	r1, r3
 8017766:	4610      	mov	r0, r2
 8017768:	f7fc fa89 	bl	8013c7e <USBD_LL_SetupStage>
}
 801776c:	bf00      	nop
 801776e:	3708      	adds	r7, #8
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}

08017774 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b082      	sub	sp, #8
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]
 801777c:	460b      	mov	r3, r1
 801777e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017786:	78fa      	ldrb	r2, [r7, #3]
 8017788:	6879      	ldr	r1, [r7, #4]
 801778a:	4613      	mov	r3, r2
 801778c:	00db      	lsls	r3, r3, #3
 801778e:	1a9b      	subs	r3, r3, r2
 8017790:	009b      	lsls	r3, r3, #2
 8017792:	440b      	add	r3, r1
 8017794:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017798:	681a      	ldr	r2, [r3, #0]
 801779a:	78fb      	ldrb	r3, [r7, #3]
 801779c:	4619      	mov	r1, r3
 801779e:	f7fc fac1 	bl	8013d24 <USBD_LL_DataOutStage>
}
 80177a2:	bf00      	nop
 80177a4:	3708      	adds	r7, #8
 80177a6:	46bd      	mov	sp, r7
 80177a8:	bd80      	pop	{r7, pc}

080177aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177aa:	b580      	push	{r7, lr}
 80177ac:	b082      	sub	sp, #8
 80177ae:	af00      	add	r7, sp, #0
 80177b0:	6078      	str	r0, [r7, #4]
 80177b2:	460b      	mov	r3, r1
 80177b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80177bc:	78fa      	ldrb	r2, [r7, #3]
 80177be:	6879      	ldr	r1, [r7, #4]
 80177c0:	4613      	mov	r3, r2
 80177c2:	00db      	lsls	r3, r3, #3
 80177c4:	1a9b      	subs	r3, r3, r2
 80177c6:	009b      	lsls	r3, r3, #2
 80177c8:	440b      	add	r3, r1
 80177ca:	3348      	adds	r3, #72	; 0x48
 80177cc:	681a      	ldr	r2, [r3, #0]
 80177ce:	78fb      	ldrb	r3, [r7, #3]
 80177d0:	4619      	mov	r1, r3
 80177d2:	f7fc fb0a 	bl	8013dea <USBD_LL_DataInStage>
}
 80177d6:	bf00      	nop
 80177d8:	3708      	adds	r7, #8
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd80      	pop	{r7, pc}

080177de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177de:	b580      	push	{r7, lr}
 80177e0:	b082      	sub	sp, #8
 80177e2:	af00      	add	r7, sp, #0
 80177e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80177ec:	4618      	mov	r0, r3
 80177ee:	f7fc fc0e 	bl	801400e <USBD_LL_SOF>
}
 80177f2:	bf00      	nop
 80177f4:	3708      	adds	r7, #8
 80177f6:	46bd      	mov	sp, r7
 80177f8:	bd80      	pop	{r7, pc}

080177fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177fa:	b580      	push	{r7, lr}
 80177fc:	b084      	sub	sp, #16
 80177fe:	af00      	add	r7, sp, #0
 8017800:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017802:	2301      	movs	r3, #1
 8017804:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	68db      	ldr	r3, [r3, #12]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d102      	bne.n	8017814 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801780e:	2300      	movs	r3, #0
 8017810:	73fb      	strb	r3, [r7, #15]
 8017812:	e008      	b.n	8017826 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	68db      	ldr	r3, [r3, #12]
 8017818:	2b02      	cmp	r3, #2
 801781a:	d102      	bne.n	8017822 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801781c:	2301      	movs	r3, #1
 801781e:	73fb      	strb	r3, [r7, #15]
 8017820:	e001      	b.n	8017826 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017822:	f7ea ff21 	bl	8002668 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801782c:	7bfa      	ldrb	r2, [r7, #15]
 801782e:	4611      	mov	r1, r2
 8017830:	4618      	mov	r0, r3
 8017832:	f7fc fbb1 	bl	8013f98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801783c:	4618      	mov	r0, r3
 801783e:	f7fc fb6a 	bl	8013f16 <USBD_LL_Reset>
}
 8017842:	bf00      	nop
 8017844:	3710      	adds	r7, #16
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}
	...

0801784c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b082      	sub	sp, #8
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801785a:	4618      	mov	r0, r3
 801785c:	f7fc fbac 	bl	8013fb8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	687a      	ldr	r2, [r7, #4]
 801786c:	6812      	ldr	r2, [r2, #0]
 801786e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017872:	f043 0301 	orr.w	r3, r3, #1
 8017876:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	6a1b      	ldr	r3, [r3, #32]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d005      	beq.n	801788c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017880:	4b04      	ldr	r3, [pc, #16]	; (8017894 <HAL_PCD_SuspendCallback+0x48>)
 8017882:	691b      	ldr	r3, [r3, #16]
 8017884:	4a03      	ldr	r2, [pc, #12]	; (8017894 <HAL_PCD_SuspendCallback+0x48>)
 8017886:	f043 0306 	orr.w	r3, r3, #6
 801788a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801788c:	bf00      	nop
 801788e:	3708      	adds	r7, #8
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}
 8017894:	e000ed00 	.word	0xe000ed00

08017898 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b082      	sub	sp, #8
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80178a6:	4618      	mov	r0, r3
 80178a8:	f7fc fb9b 	bl	8013fe2 <USBD_LL_Resume>
}
 80178ac:	bf00      	nop
 80178ae:	3708      	adds	r7, #8
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd80      	pop	{r7, pc}

080178b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b082      	sub	sp, #8
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
 80178bc:	460b      	mov	r3, r1
 80178be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80178c6:	78fa      	ldrb	r2, [r7, #3]
 80178c8:	4611      	mov	r1, r2
 80178ca:	4618      	mov	r0, r3
 80178cc:	f7fc fbc6 	bl	801405c <USBD_LL_IsoOUTIncomplete>
}
 80178d0:	bf00      	nop
 80178d2:	3708      	adds	r7, #8
 80178d4:	46bd      	mov	sp, r7
 80178d6:	bd80      	pop	{r7, pc}

080178d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b082      	sub	sp, #8
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]
 80178e0:	460b      	mov	r3, r1
 80178e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80178ea:	78fa      	ldrb	r2, [r7, #3]
 80178ec:	4611      	mov	r1, r2
 80178ee:	4618      	mov	r0, r3
 80178f0:	f7fc fba7 	bl	8014042 <USBD_LL_IsoINIncomplete>
}
 80178f4:	bf00      	nop
 80178f6:	3708      	adds	r7, #8
 80178f8:	46bd      	mov	sp, r7
 80178fa:	bd80      	pop	{r7, pc}

080178fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801790a:	4618      	mov	r0, r3
 801790c:	f7fc fbb3 	bl	8014076 <USBD_LL_DevConnected>
}
 8017910:	bf00      	nop
 8017912:	3708      	adds	r7, #8
 8017914:	46bd      	mov	sp, r7
 8017916:	bd80      	pop	{r7, pc}

08017918 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b082      	sub	sp, #8
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017926:	4618      	mov	r0, r3
 8017928:	f7fc fbb0 	bl	801408c <USBD_LL_DevDisconnected>
}
 801792c:	bf00      	nop
 801792e:	3708      	adds	r7, #8
 8017930:	46bd      	mov	sp, r7
 8017932:	bd80      	pop	{r7, pc}

08017934 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b082      	sub	sp, #8
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	781b      	ldrb	r3, [r3, #0]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d13e      	bne.n	80179c2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017944:	4a21      	ldr	r2, [pc, #132]	; (80179cc <USBD_LL_Init+0x98>)
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	4a1f      	ldr	r2, [pc, #124]	; (80179cc <USBD_LL_Init+0x98>)
 8017950:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017954:	4b1d      	ldr	r3, [pc, #116]	; (80179cc <USBD_LL_Init+0x98>)
 8017956:	4a1e      	ldr	r2, [pc, #120]	; (80179d0 <USBD_LL_Init+0x9c>)
 8017958:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801795a:	4b1c      	ldr	r3, [pc, #112]	; (80179cc <USBD_LL_Init+0x98>)
 801795c:	2209      	movs	r2, #9
 801795e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017960:	4b1a      	ldr	r3, [pc, #104]	; (80179cc <USBD_LL_Init+0x98>)
 8017962:	2202      	movs	r2, #2
 8017964:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017966:	4b19      	ldr	r3, [pc, #100]	; (80179cc <USBD_LL_Init+0x98>)
 8017968:	2200      	movs	r2, #0
 801796a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801796c:	4b17      	ldr	r3, [pc, #92]	; (80179cc <USBD_LL_Init+0x98>)
 801796e:	2202      	movs	r2, #2
 8017970:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017972:	4b16      	ldr	r3, [pc, #88]	; (80179cc <USBD_LL_Init+0x98>)
 8017974:	2200      	movs	r2, #0
 8017976:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017978:	4b14      	ldr	r3, [pc, #80]	; (80179cc <USBD_LL_Init+0x98>)
 801797a:	2200      	movs	r2, #0
 801797c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801797e:	4b13      	ldr	r3, [pc, #76]	; (80179cc <USBD_LL_Init+0x98>)
 8017980:	2200      	movs	r2, #0
 8017982:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8017984:	4b11      	ldr	r3, [pc, #68]	; (80179cc <USBD_LL_Init+0x98>)
 8017986:	2200      	movs	r2, #0
 8017988:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801798a:	4b10      	ldr	r3, [pc, #64]	; (80179cc <USBD_LL_Init+0x98>)
 801798c:	2200      	movs	r2, #0
 801798e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017990:	4b0e      	ldr	r3, [pc, #56]	; (80179cc <USBD_LL_Init+0x98>)
 8017992:	2200      	movs	r2, #0
 8017994:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017996:	480d      	ldr	r0, [pc, #52]	; (80179cc <USBD_LL_Init+0x98>)
 8017998:	f7ef f8e6 	bl	8006b68 <HAL_PCD_Init>
 801799c:	4603      	mov	r3, r0
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d001      	beq.n	80179a6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80179a2:	f7ea fe61 	bl	8002668 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80179a6:	2180      	movs	r1, #128	; 0x80
 80179a8:	4808      	ldr	r0, [pc, #32]	; (80179cc <USBD_LL_Init+0x98>)
 80179aa:	f7f0 faa4 	bl	8007ef6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80179ae:	2240      	movs	r2, #64	; 0x40
 80179b0:	2100      	movs	r1, #0
 80179b2:	4806      	ldr	r0, [pc, #24]	; (80179cc <USBD_LL_Init+0x98>)
 80179b4:	f7f0 fa58 	bl	8007e68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80179b8:	2280      	movs	r2, #128	; 0x80
 80179ba:	2101      	movs	r1, #1
 80179bc:	4803      	ldr	r0, [pc, #12]	; (80179cc <USBD_LL_Init+0x98>)
 80179be:	f7f0 fa53 	bl	8007e68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80179c2:	2300      	movs	r3, #0
}
 80179c4:	4618      	mov	r0, r3
 80179c6:	3708      	adds	r7, #8
 80179c8:	46bd      	mov	sp, r7
 80179ca:	bd80      	pop	{r7, pc}
 80179cc:	2400204c 	.word	0x2400204c
 80179d0:	40080000 	.word	0x40080000

080179d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b084      	sub	sp, #16
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179dc:	2300      	movs	r3, #0
 80179de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179e0:	2300      	movs	r3, #0
 80179e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80179ea:	4618      	mov	r0, r3
 80179ec:	f7ef f9e0 	bl	8006db0 <HAL_PCD_Start>
 80179f0:	4603      	mov	r3, r0
 80179f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80179f4:	7bfb      	ldrb	r3, [r7, #15]
 80179f6:	4618      	mov	r0, r3
 80179f8:	f000 f94a 	bl	8017c90 <USBD_Get_USB_Status>
 80179fc:	4603      	mov	r3, r0
 80179fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a00:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a02:	4618      	mov	r0, r3
 8017a04:	3710      	adds	r7, #16
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}

08017a0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017a0a:	b580      	push	{r7, lr}
 8017a0c:	b084      	sub	sp, #16
 8017a0e:	af00      	add	r7, sp, #0
 8017a10:	6078      	str	r0, [r7, #4]
 8017a12:	4608      	mov	r0, r1
 8017a14:	4611      	mov	r1, r2
 8017a16:	461a      	mov	r2, r3
 8017a18:	4603      	mov	r3, r0
 8017a1a:	70fb      	strb	r3, [r7, #3]
 8017a1c:	460b      	mov	r3, r1
 8017a1e:	70bb      	strb	r3, [r7, #2]
 8017a20:	4613      	mov	r3, r2
 8017a22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a24:	2300      	movs	r3, #0
 8017a26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a28:	2300      	movs	r3, #0
 8017a2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017a32:	78bb      	ldrb	r3, [r7, #2]
 8017a34:	883a      	ldrh	r2, [r7, #0]
 8017a36:	78f9      	ldrb	r1, [r7, #3]
 8017a38:	f7ef fdf1 	bl	800761e <HAL_PCD_EP_Open>
 8017a3c:	4603      	mov	r3, r0
 8017a3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a40:	7bfb      	ldrb	r3, [r7, #15]
 8017a42:	4618      	mov	r0, r3
 8017a44:	f000 f924 	bl	8017c90 <USBD_Get_USB_Status>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a4e:	4618      	mov	r0, r3
 8017a50:	3710      	adds	r7, #16
 8017a52:	46bd      	mov	sp, r7
 8017a54:	bd80      	pop	{r7, pc}

08017a56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a56:	b580      	push	{r7, lr}
 8017a58:	b084      	sub	sp, #16
 8017a5a:	af00      	add	r7, sp, #0
 8017a5c:	6078      	str	r0, [r7, #4]
 8017a5e:	460b      	mov	r3, r1
 8017a60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a62:	2300      	movs	r3, #0
 8017a64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a66:	2300      	movs	r3, #0
 8017a68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017a70:	78fa      	ldrb	r2, [r7, #3]
 8017a72:	4611      	mov	r1, r2
 8017a74:	4618      	mov	r0, r3
 8017a76:	f7ef fe3a 	bl	80076ee <HAL_PCD_EP_Close>
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a7e:	7bfb      	ldrb	r3, [r7, #15]
 8017a80:	4618      	mov	r0, r3
 8017a82:	f000 f905 	bl	8017c90 <USBD_Get_USB_Status>
 8017a86:	4603      	mov	r3, r0
 8017a88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	3710      	adds	r7, #16
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd80      	pop	{r7, pc}

08017a94 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b084      	sub	sp, #16
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
 8017a9c:	460b      	mov	r3, r1
 8017a9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017aae:	78fa      	ldrb	r2, [r7, #3]
 8017ab0:	4611      	mov	r1, r2
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f7ef ffcc 	bl	8007a50 <HAL_PCD_EP_Flush>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017abc:	7bfb      	ldrb	r3, [r7, #15]
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f000 f8e6 	bl	8017c90 <USBD_Get_USB_Status>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017aca:	4618      	mov	r0, r3
 8017acc:	3710      	adds	r7, #16
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	bd80      	pop	{r7, pc}

08017ad2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ad2:	b580      	push	{r7, lr}
 8017ad4:	b084      	sub	sp, #16
 8017ad6:	af00      	add	r7, sp, #0
 8017ad8:	6078      	str	r0, [r7, #4]
 8017ada:	460b      	mov	r3, r1
 8017adc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ade:	2300      	movs	r3, #0
 8017ae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017aec:	78fa      	ldrb	r2, [r7, #3]
 8017aee:	4611      	mov	r1, r2
 8017af0:	4618      	mov	r0, r3
 8017af2:	f7ef fef3 	bl	80078dc <HAL_PCD_EP_SetStall>
 8017af6:	4603      	mov	r3, r0
 8017af8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017afa:	7bfb      	ldrb	r3, [r7, #15]
 8017afc:	4618      	mov	r0, r3
 8017afe:	f000 f8c7 	bl	8017c90 <USBD_Get_USB_Status>
 8017b02:	4603      	mov	r3, r0
 8017b04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b08:	4618      	mov	r0, r3
 8017b0a:	3710      	adds	r7, #16
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	bd80      	pop	{r7, pc}

08017b10 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b084      	sub	sp, #16
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	6078      	str	r0, [r7, #4]
 8017b18:	460b      	mov	r3, r1
 8017b1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b20:	2300      	movs	r3, #0
 8017b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b2a:	78fa      	ldrb	r2, [r7, #3]
 8017b2c:	4611      	mov	r1, r2
 8017b2e:	4618      	mov	r0, r3
 8017b30:	f7ef ff38 	bl	80079a4 <HAL_PCD_EP_ClrStall>
 8017b34:	4603      	mov	r3, r0
 8017b36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b38:	7bfb      	ldrb	r3, [r7, #15]
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f000 f8a8 	bl	8017c90 <USBD_Get_USB_Status>
 8017b40:	4603      	mov	r3, r0
 8017b42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b44:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b46:	4618      	mov	r0, r3
 8017b48:	3710      	adds	r7, #16
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	bd80      	pop	{r7, pc}

08017b4e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017b4e:	b480      	push	{r7}
 8017b50:	b085      	sub	sp, #20
 8017b52:	af00      	add	r7, sp, #0
 8017b54:	6078      	str	r0, [r7, #4]
 8017b56:	460b      	mov	r3, r1
 8017b58:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b60:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	da0b      	bge.n	8017b82 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017b6a:	78fb      	ldrb	r3, [r7, #3]
 8017b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017b70:	68f9      	ldr	r1, [r7, #12]
 8017b72:	4613      	mov	r3, r2
 8017b74:	00db      	lsls	r3, r3, #3
 8017b76:	1a9b      	subs	r3, r3, r2
 8017b78:	009b      	lsls	r3, r3, #2
 8017b7a:	440b      	add	r3, r1
 8017b7c:	333e      	adds	r3, #62	; 0x3e
 8017b7e:	781b      	ldrb	r3, [r3, #0]
 8017b80:	e00b      	b.n	8017b9a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017b82:	78fb      	ldrb	r3, [r7, #3]
 8017b84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017b88:	68f9      	ldr	r1, [r7, #12]
 8017b8a:	4613      	mov	r3, r2
 8017b8c:	00db      	lsls	r3, r3, #3
 8017b8e:	1a9b      	subs	r3, r3, r2
 8017b90:	009b      	lsls	r3, r3, #2
 8017b92:	440b      	add	r3, r1
 8017b94:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017b98:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	3714      	adds	r7, #20
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba4:	4770      	bx	lr

08017ba6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017ba6:	b580      	push	{r7, lr}
 8017ba8:	b084      	sub	sp, #16
 8017baa:	af00      	add	r7, sp, #0
 8017bac:	6078      	str	r0, [r7, #4]
 8017bae:	460b      	mov	r3, r1
 8017bb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017bc0:	78fa      	ldrb	r2, [r7, #3]
 8017bc2:	4611      	mov	r1, r2
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	f7ef fd05 	bl	80075d4 <HAL_PCD_SetAddress>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bce:	7bfb      	ldrb	r3, [r7, #15]
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	f000 f85d 	bl	8017c90 <USBD_Get_USB_Status>
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017bda:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bdc:	4618      	mov	r0, r3
 8017bde:	3710      	adds	r7, #16
 8017be0:	46bd      	mov	sp, r7
 8017be2:	bd80      	pop	{r7, pc}

08017be4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b086      	sub	sp, #24
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	60f8      	str	r0, [r7, #12]
 8017bec:	607a      	str	r2, [r7, #4]
 8017bee:	603b      	str	r3, [r7, #0]
 8017bf0:	460b      	mov	r3, r1
 8017bf2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017c02:	7af9      	ldrb	r1, [r7, #11]
 8017c04:	683b      	ldr	r3, [r7, #0]
 8017c06:	687a      	ldr	r2, [r7, #4]
 8017c08:	f7ef fe1e 	bl	8007848 <HAL_PCD_EP_Transmit>
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c10:	7dfb      	ldrb	r3, [r7, #23]
 8017c12:	4618      	mov	r0, r3
 8017c14:	f000 f83c 	bl	8017c90 <USBD_Get_USB_Status>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017c1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8017c1e:	4618      	mov	r0, r3
 8017c20:	3718      	adds	r7, #24
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}

08017c26 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017c26:	b580      	push	{r7, lr}
 8017c28:	b086      	sub	sp, #24
 8017c2a:	af00      	add	r7, sp, #0
 8017c2c:	60f8      	str	r0, [r7, #12]
 8017c2e:	607a      	str	r2, [r7, #4]
 8017c30:	603b      	str	r3, [r7, #0]
 8017c32:	460b      	mov	r3, r1
 8017c34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c36:	2300      	movs	r3, #0
 8017c38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017c44:	7af9      	ldrb	r1, [r7, #11]
 8017c46:	683b      	ldr	r3, [r7, #0]
 8017c48:	687a      	ldr	r2, [r7, #4]
 8017c4a:	f7ef fd9a 	bl	8007782 <HAL_PCD_EP_Receive>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c52:	7dfb      	ldrb	r3, [r7, #23]
 8017c54:	4618      	mov	r0, r3
 8017c56:	f000 f81b 	bl	8017c90 <USBD_Get_USB_Status>
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017c5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8017c60:	4618      	mov	r0, r3
 8017c62:	3718      	adds	r7, #24
 8017c64:	46bd      	mov	sp, r7
 8017c66:	bd80      	pop	{r7, pc}

08017c68 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b082      	sub	sp, #8
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
 8017c70:	460b      	mov	r3, r1
 8017c72:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017c7a:	78fa      	ldrb	r2, [r7, #3]
 8017c7c:	4611      	mov	r1, r2
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f7ef fdca 	bl	8007818 <HAL_PCD_EP_GetRxCount>
 8017c84:	4603      	mov	r3, r0
}
 8017c86:	4618      	mov	r0, r3
 8017c88:	3708      	adds	r7, #8
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	bd80      	pop	{r7, pc}
	...

08017c90 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017c90:	b480      	push	{r7}
 8017c92:	b085      	sub	sp, #20
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	4603      	mov	r3, r0
 8017c98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017c9e:	79fb      	ldrb	r3, [r7, #7]
 8017ca0:	2b03      	cmp	r3, #3
 8017ca2:	d817      	bhi.n	8017cd4 <USBD_Get_USB_Status+0x44>
 8017ca4:	a201      	add	r2, pc, #4	; (adr r2, 8017cac <USBD_Get_USB_Status+0x1c>)
 8017ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017caa:	bf00      	nop
 8017cac:	08017cbd 	.word	0x08017cbd
 8017cb0:	08017cc3 	.word	0x08017cc3
 8017cb4:	08017cc9 	.word	0x08017cc9
 8017cb8:	08017ccf 	.word	0x08017ccf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8017cc0:	e00b      	b.n	8017cda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017cc2:	2303      	movs	r3, #3
 8017cc4:	73fb      	strb	r3, [r7, #15]
    break;
 8017cc6:	e008      	b.n	8017cda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017cc8:	2301      	movs	r3, #1
 8017cca:	73fb      	strb	r3, [r7, #15]
    break;
 8017ccc:	e005      	b.n	8017cda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017cce:	2303      	movs	r3, #3
 8017cd0:	73fb      	strb	r3, [r7, #15]
    break;
 8017cd2:	e002      	b.n	8017cda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017cd4:	2303      	movs	r3, #3
 8017cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8017cd8:	bf00      	nop
  }
  return usb_status;
 8017cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cdc:	4618      	mov	r0, r3
 8017cde:	3714      	adds	r7, #20
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce6:	4770      	bx	lr

08017ce8 <__errno>:
 8017ce8:	4b01      	ldr	r3, [pc, #4]	; (8017cf0 <__errno+0x8>)
 8017cea:	6818      	ldr	r0, [r3, #0]
 8017cec:	4770      	bx	lr
 8017cee:	bf00      	nop
 8017cf0:	24000174 	.word	0x24000174

08017cf4 <__libc_init_array>:
 8017cf4:	b570      	push	{r4, r5, r6, lr}
 8017cf6:	4e0d      	ldr	r6, [pc, #52]	; (8017d2c <__libc_init_array+0x38>)
 8017cf8:	4c0d      	ldr	r4, [pc, #52]	; (8017d30 <__libc_init_array+0x3c>)
 8017cfa:	1ba4      	subs	r4, r4, r6
 8017cfc:	10a4      	asrs	r4, r4, #2
 8017cfe:	2500      	movs	r5, #0
 8017d00:	42a5      	cmp	r5, r4
 8017d02:	d109      	bne.n	8017d18 <__libc_init_array+0x24>
 8017d04:	4e0b      	ldr	r6, [pc, #44]	; (8017d34 <__libc_init_array+0x40>)
 8017d06:	4c0c      	ldr	r4, [pc, #48]	; (8017d38 <__libc_init_array+0x44>)
 8017d08:	f001 f972 	bl	8018ff0 <_init>
 8017d0c:	1ba4      	subs	r4, r4, r6
 8017d0e:	10a4      	asrs	r4, r4, #2
 8017d10:	2500      	movs	r5, #0
 8017d12:	42a5      	cmp	r5, r4
 8017d14:	d105      	bne.n	8017d22 <__libc_init_array+0x2e>
 8017d16:	bd70      	pop	{r4, r5, r6, pc}
 8017d18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017d1c:	4798      	blx	r3
 8017d1e:	3501      	adds	r5, #1
 8017d20:	e7ee      	b.n	8017d00 <__libc_init_array+0xc>
 8017d22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017d26:	4798      	blx	r3
 8017d28:	3501      	adds	r5, #1
 8017d2a:	e7f2      	b.n	8017d12 <__libc_init_array+0x1e>
 8017d2c:	08019940 	.word	0x08019940
 8017d30:	08019940 	.word	0x08019940
 8017d34:	08019940 	.word	0x08019940
 8017d38:	08019944 	.word	0x08019944

08017d3c <malloc>:
 8017d3c:	4b02      	ldr	r3, [pc, #8]	; (8017d48 <malloc+0xc>)
 8017d3e:	4601      	mov	r1, r0
 8017d40:	6818      	ldr	r0, [r3, #0]
 8017d42:	f000 b86d 	b.w	8017e20 <_malloc_r>
 8017d46:	bf00      	nop
 8017d48:	24000174 	.word	0x24000174

08017d4c <free>:
 8017d4c:	4b02      	ldr	r3, [pc, #8]	; (8017d58 <free+0xc>)
 8017d4e:	4601      	mov	r1, r0
 8017d50:	6818      	ldr	r0, [r3, #0]
 8017d52:	f000 b817 	b.w	8017d84 <_free_r>
 8017d56:	bf00      	nop
 8017d58:	24000174 	.word	0x24000174

08017d5c <memcpy>:
 8017d5c:	b510      	push	{r4, lr}
 8017d5e:	1e43      	subs	r3, r0, #1
 8017d60:	440a      	add	r2, r1
 8017d62:	4291      	cmp	r1, r2
 8017d64:	d100      	bne.n	8017d68 <memcpy+0xc>
 8017d66:	bd10      	pop	{r4, pc}
 8017d68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d70:	e7f7      	b.n	8017d62 <memcpy+0x6>

08017d72 <memset>:
 8017d72:	4402      	add	r2, r0
 8017d74:	4603      	mov	r3, r0
 8017d76:	4293      	cmp	r3, r2
 8017d78:	d100      	bne.n	8017d7c <memset+0xa>
 8017d7a:	4770      	bx	lr
 8017d7c:	f803 1b01 	strb.w	r1, [r3], #1
 8017d80:	e7f9      	b.n	8017d76 <memset+0x4>
	...

08017d84 <_free_r>:
 8017d84:	b538      	push	{r3, r4, r5, lr}
 8017d86:	4605      	mov	r5, r0
 8017d88:	2900      	cmp	r1, #0
 8017d8a:	d045      	beq.n	8017e18 <_free_r+0x94>
 8017d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d90:	1f0c      	subs	r4, r1, #4
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	bfb8      	it	lt
 8017d96:	18e4      	addlt	r4, r4, r3
 8017d98:	f000 fc1a 	bl	80185d0 <__malloc_lock>
 8017d9c:	4a1f      	ldr	r2, [pc, #124]	; (8017e1c <_free_r+0x98>)
 8017d9e:	6813      	ldr	r3, [r2, #0]
 8017da0:	4610      	mov	r0, r2
 8017da2:	b933      	cbnz	r3, 8017db2 <_free_r+0x2e>
 8017da4:	6063      	str	r3, [r4, #4]
 8017da6:	6014      	str	r4, [r2, #0]
 8017da8:	4628      	mov	r0, r5
 8017daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dae:	f000 bc10 	b.w	80185d2 <__malloc_unlock>
 8017db2:	42a3      	cmp	r3, r4
 8017db4:	d90c      	bls.n	8017dd0 <_free_r+0x4c>
 8017db6:	6821      	ldr	r1, [r4, #0]
 8017db8:	1862      	adds	r2, r4, r1
 8017dba:	4293      	cmp	r3, r2
 8017dbc:	bf04      	itt	eq
 8017dbe:	681a      	ldreq	r2, [r3, #0]
 8017dc0:	685b      	ldreq	r3, [r3, #4]
 8017dc2:	6063      	str	r3, [r4, #4]
 8017dc4:	bf04      	itt	eq
 8017dc6:	1852      	addeq	r2, r2, r1
 8017dc8:	6022      	streq	r2, [r4, #0]
 8017dca:	6004      	str	r4, [r0, #0]
 8017dcc:	e7ec      	b.n	8017da8 <_free_r+0x24>
 8017dce:	4613      	mov	r3, r2
 8017dd0:	685a      	ldr	r2, [r3, #4]
 8017dd2:	b10a      	cbz	r2, 8017dd8 <_free_r+0x54>
 8017dd4:	42a2      	cmp	r2, r4
 8017dd6:	d9fa      	bls.n	8017dce <_free_r+0x4a>
 8017dd8:	6819      	ldr	r1, [r3, #0]
 8017dda:	1858      	adds	r0, r3, r1
 8017ddc:	42a0      	cmp	r0, r4
 8017dde:	d10b      	bne.n	8017df8 <_free_r+0x74>
 8017de0:	6820      	ldr	r0, [r4, #0]
 8017de2:	4401      	add	r1, r0
 8017de4:	1858      	adds	r0, r3, r1
 8017de6:	4282      	cmp	r2, r0
 8017de8:	6019      	str	r1, [r3, #0]
 8017dea:	d1dd      	bne.n	8017da8 <_free_r+0x24>
 8017dec:	6810      	ldr	r0, [r2, #0]
 8017dee:	6852      	ldr	r2, [r2, #4]
 8017df0:	605a      	str	r2, [r3, #4]
 8017df2:	4401      	add	r1, r0
 8017df4:	6019      	str	r1, [r3, #0]
 8017df6:	e7d7      	b.n	8017da8 <_free_r+0x24>
 8017df8:	d902      	bls.n	8017e00 <_free_r+0x7c>
 8017dfa:	230c      	movs	r3, #12
 8017dfc:	602b      	str	r3, [r5, #0]
 8017dfe:	e7d3      	b.n	8017da8 <_free_r+0x24>
 8017e00:	6820      	ldr	r0, [r4, #0]
 8017e02:	1821      	adds	r1, r4, r0
 8017e04:	428a      	cmp	r2, r1
 8017e06:	bf04      	itt	eq
 8017e08:	6811      	ldreq	r1, [r2, #0]
 8017e0a:	6852      	ldreq	r2, [r2, #4]
 8017e0c:	6062      	str	r2, [r4, #4]
 8017e0e:	bf04      	itt	eq
 8017e10:	1809      	addeq	r1, r1, r0
 8017e12:	6021      	streq	r1, [r4, #0]
 8017e14:	605c      	str	r4, [r3, #4]
 8017e16:	e7c7      	b.n	8017da8 <_free_r+0x24>
 8017e18:	bd38      	pop	{r3, r4, r5, pc}
 8017e1a:	bf00      	nop
 8017e1c:	24000b64 	.word	0x24000b64

08017e20 <_malloc_r>:
 8017e20:	b570      	push	{r4, r5, r6, lr}
 8017e22:	1ccd      	adds	r5, r1, #3
 8017e24:	f025 0503 	bic.w	r5, r5, #3
 8017e28:	3508      	adds	r5, #8
 8017e2a:	2d0c      	cmp	r5, #12
 8017e2c:	bf38      	it	cc
 8017e2e:	250c      	movcc	r5, #12
 8017e30:	2d00      	cmp	r5, #0
 8017e32:	4606      	mov	r6, r0
 8017e34:	db01      	blt.n	8017e3a <_malloc_r+0x1a>
 8017e36:	42a9      	cmp	r1, r5
 8017e38:	d903      	bls.n	8017e42 <_malloc_r+0x22>
 8017e3a:	230c      	movs	r3, #12
 8017e3c:	6033      	str	r3, [r6, #0]
 8017e3e:	2000      	movs	r0, #0
 8017e40:	bd70      	pop	{r4, r5, r6, pc}
 8017e42:	f000 fbc5 	bl	80185d0 <__malloc_lock>
 8017e46:	4a21      	ldr	r2, [pc, #132]	; (8017ecc <_malloc_r+0xac>)
 8017e48:	6814      	ldr	r4, [r2, #0]
 8017e4a:	4621      	mov	r1, r4
 8017e4c:	b991      	cbnz	r1, 8017e74 <_malloc_r+0x54>
 8017e4e:	4c20      	ldr	r4, [pc, #128]	; (8017ed0 <_malloc_r+0xb0>)
 8017e50:	6823      	ldr	r3, [r4, #0]
 8017e52:	b91b      	cbnz	r3, 8017e5c <_malloc_r+0x3c>
 8017e54:	4630      	mov	r0, r6
 8017e56:	f000 f8b9 	bl	8017fcc <_sbrk_r>
 8017e5a:	6020      	str	r0, [r4, #0]
 8017e5c:	4629      	mov	r1, r5
 8017e5e:	4630      	mov	r0, r6
 8017e60:	f000 f8b4 	bl	8017fcc <_sbrk_r>
 8017e64:	1c43      	adds	r3, r0, #1
 8017e66:	d124      	bne.n	8017eb2 <_malloc_r+0x92>
 8017e68:	230c      	movs	r3, #12
 8017e6a:	6033      	str	r3, [r6, #0]
 8017e6c:	4630      	mov	r0, r6
 8017e6e:	f000 fbb0 	bl	80185d2 <__malloc_unlock>
 8017e72:	e7e4      	b.n	8017e3e <_malloc_r+0x1e>
 8017e74:	680b      	ldr	r3, [r1, #0]
 8017e76:	1b5b      	subs	r3, r3, r5
 8017e78:	d418      	bmi.n	8017eac <_malloc_r+0x8c>
 8017e7a:	2b0b      	cmp	r3, #11
 8017e7c:	d90f      	bls.n	8017e9e <_malloc_r+0x7e>
 8017e7e:	600b      	str	r3, [r1, #0]
 8017e80:	50cd      	str	r5, [r1, r3]
 8017e82:	18cc      	adds	r4, r1, r3
 8017e84:	4630      	mov	r0, r6
 8017e86:	f000 fba4 	bl	80185d2 <__malloc_unlock>
 8017e8a:	f104 000b 	add.w	r0, r4, #11
 8017e8e:	1d23      	adds	r3, r4, #4
 8017e90:	f020 0007 	bic.w	r0, r0, #7
 8017e94:	1ac3      	subs	r3, r0, r3
 8017e96:	d0d3      	beq.n	8017e40 <_malloc_r+0x20>
 8017e98:	425a      	negs	r2, r3
 8017e9a:	50e2      	str	r2, [r4, r3]
 8017e9c:	e7d0      	b.n	8017e40 <_malloc_r+0x20>
 8017e9e:	428c      	cmp	r4, r1
 8017ea0:	684b      	ldr	r3, [r1, #4]
 8017ea2:	bf16      	itet	ne
 8017ea4:	6063      	strne	r3, [r4, #4]
 8017ea6:	6013      	streq	r3, [r2, #0]
 8017ea8:	460c      	movne	r4, r1
 8017eaa:	e7eb      	b.n	8017e84 <_malloc_r+0x64>
 8017eac:	460c      	mov	r4, r1
 8017eae:	6849      	ldr	r1, [r1, #4]
 8017eb0:	e7cc      	b.n	8017e4c <_malloc_r+0x2c>
 8017eb2:	1cc4      	adds	r4, r0, #3
 8017eb4:	f024 0403 	bic.w	r4, r4, #3
 8017eb8:	42a0      	cmp	r0, r4
 8017eba:	d005      	beq.n	8017ec8 <_malloc_r+0xa8>
 8017ebc:	1a21      	subs	r1, r4, r0
 8017ebe:	4630      	mov	r0, r6
 8017ec0:	f000 f884 	bl	8017fcc <_sbrk_r>
 8017ec4:	3001      	adds	r0, #1
 8017ec6:	d0cf      	beq.n	8017e68 <_malloc_r+0x48>
 8017ec8:	6025      	str	r5, [r4, #0]
 8017eca:	e7db      	b.n	8017e84 <_malloc_r+0x64>
 8017ecc:	24000b64 	.word	0x24000b64
 8017ed0:	24000b68 	.word	0x24000b68

08017ed4 <iprintf>:
 8017ed4:	b40f      	push	{r0, r1, r2, r3}
 8017ed6:	4b0a      	ldr	r3, [pc, #40]	; (8017f00 <iprintf+0x2c>)
 8017ed8:	b513      	push	{r0, r1, r4, lr}
 8017eda:	681c      	ldr	r4, [r3, #0]
 8017edc:	b124      	cbz	r4, 8017ee8 <iprintf+0x14>
 8017ede:	69a3      	ldr	r3, [r4, #24]
 8017ee0:	b913      	cbnz	r3, 8017ee8 <iprintf+0x14>
 8017ee2:	4620      	mov	r0, r4
 8017ee4:	f000 fa86 	bl	80183f4 <__sinit>
 8017ee8:	ab05      	add	r3, sp, #20
 8017eea:	9a04      	ldr	r2, [sp, #16]
 8017eec:	68a1      	ldr	r1, [r4, #8]
 8017eee:	9301      	str	r3, [sp, #4]
 8017ef0:	4620      	mov	r0, r4
 8017ef2:	f000 fceb 	bl	80188cc <_vfiprintf_r>
 8017ef6:	b002      	add	sp, #8
 8017ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017efc:	b004      	add	sp, #16
 8017efe:	4770      	bx	lr
 8017f00:	24000174 	.word	0x24000174

08017f04 <_puts_r>:
 8017f04:	b570      	push	{r4, r5, r6, lr}
 8017f06:	460e      	mov	r6, r1
 8017f08:	4605      	mov	r5, r0
 8017f0a:	b118      	cbz	r0, 8017f14 <_puts_r+0x10>
 8017f0c:	6983      	ldr	r3, [r0, #24]
 8017f0e:	b90b      	cbnz	r3, 8017f14 <_puts_r+0x10>
 8017f10:	f000 fa70 	bl	80183f4 <__sinit>
 8017f14:	69ab      	ldr	r3, [r5, #24]
 8017f16:	68ac      	ldr	r4, [r5, #8]
 8017f18:	b913      	cbnz	r3, 8017f20 <_puts_r+0x1c>
 8017f1a:	4628      	mov	r0, r5
 8017f1c:	f000 fa6a 	bl	80183f4 <__sinit>
 8017f20:	4b23      	ldr	r3, [pc, #140]	; (8017fb0 <_puts_r+0xac>)
 8017f22:	429c      	cmp	r4, r3
 8017f24:	d117      	bne.n	8017f56 <_puts_r+0x52>
 8017f26:	686c      	ldr	r4, [r5, #4]
 8017f28:	89a3      	ldrh	r3, [r4, #12]
 8017f2a:	071b      	lsls	r3, r3, #28
 8017f2c:	d51d      	bpl.n	8017f6a <_puts_r+0x66>
 8017f2e:	6923      	ldr	r3, [r4, #16]
 8017f30:	b1db      	cbz	r3, 8017f6a <_puts_r+0x66>
 8017f32:	3e01      	subs	r6, #1
 8017f34:	68a3      	ldr	r3, [r4, #8]
 8017f36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017f3a:	3b01      	subs	r3, #1
 8017f3c:	60a3      	str	r3, [r4, #8]
 8017f3e:	b9e9      	cbnz	r1, 8017f7c <_puts_r+0x78>
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	da2e      	bge.n	8017fa2 <_puts_r+0x9e>
 8017f44:	4622      	mov	r2, r4
 8017f46:	210a      	movs	r1, #10
 8017f48:	4628      	mov	r0, r5
 8017f4a:	f000 f8a3 	bl	8018094 <__swbuf_r>
 8017f4e:	3001      	adds	r0, #1
 8017f50:	d011      	beq.n	8017f76 <_puts_r+0x72>
 8017f52:	200a      	movs	r0, #10
 8017f54:	e011      	b.n	8017f7a <_puts_r+0x76>
 8017f56:	4b17      	ldr	r3, [pc, #92]	; (8017fb4 <_puts_r+0xb0>)
 8017f58:	429c      	cmp	r4, r3
 8017f5a:	d101      	bne.n	8017f60 <_puts_r+0x5c>
 8017f5c:	68ac      	ldr	r4, [r5, #8]
 8017f5e:	e7e3      	b.n	8017f28 <_puts_r+0x24>
 8017f60:	4b15      	ldr	r3, [pc, #84]	; (8017fb8 <_puts_r+0xb4>)
 8017f62:	429c      	cmp	r4, r3
 8017f64:	bf08      	it	eq
 8017f66:	68ec      	ldreq	r4, [r5, #12]
 8017f68:	e7de      	b.n	8017f28 <_puts_r+0x24>
 8017f6a:	4621      	mov	r1, r4
 8017f6c:	4628      	mov	r0, r5
 8017f6e:	f000 f8e3 	bl	8018138 <__swsetup_r>
 8017f72:	2800      	cmp	r0, #0
 8017f74:	d0dd      	beq.n	8017f32 <_puts_r+0x2e>
 8017f76:	f04f 30ff 	mov.w	r0, #4294967295
 8017f7a:	bd70      	pop	{r4, r5, r6, pc}
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	da04      	bge.n	8017f8a <_puts_r+0x86>
 8017f80:	69a2      	ldr	r2, [r4, #24]
 8017f82:	429a      	cmp	r2, r3
 8017f84:	dc06      	bgt.n	8017f94 <_puts_r+0x90>
 8017f86:	290a      	cmp	r1, #10
 8017f88:	d004      	beq.n	8017f94 <_puts_r+0x90>
 8017f8a:	6823      	ldr	r3, [r4, #0]
 8017f8c:	1c5a      	adds	r2, r3, #1
 8017f8e:	6022      	str	r2, [r4, #0]
 8017f90:	7019      	strb	r1, [r3, #0]
 8017f92:	e7cf      	b.n	8017f34 <_puts_r+0x30>
 8017f94:	4622      	mov	r2, r4
 8017f96:	4628      	mov	r0, r5
 8017f98:	f000 f87c 	bl	8018094 <__swbuf_r>
 8017f9c:	3001      	adds	r0, #1
 8017f9e:	d1c9      	bne.n	8017f34 <_puts_r+0x30>
 8017fa0:	e7e9      	b.n	8017f76 <_puts_r+0x72>
 8017fa2:	6823      	ldr	r3, [r4, #0]
 8017fa4:	200a      	movs	r0, #10
 8017fa6:	1c5a      	adds	r2, r3, #1
 8017fa8:	6022      	str	r2, [r4, #0]
 8017faa:	7018      	strb	r0, [r3, #0]
 8017fac:	e7e5      	b.n	8017f7a <_puts_r+0x76>
 8017fae:	bf00      	nop
 8017fb0:	080198c4 	.word	0x080198c4
 8017fb4:	080198e4 	.word	0x080198e4
 8017fb8:	080198a4 	.word	0x080198a4

08017fbc <puts>:
 8017fbc:	4b02      	ldr	r3, [pc, #8]	; (8017fc8 <puts+0xc>)
 8017fbe:	4601      	mov	r1, r0
 8017fc0:	6818      	ldr	r0, [r3, #0]
 8017fc2:	f7ff bf9f 	b.w	8017f04 <_puts_r>
 8017fc6:	bf00      	nop
 8017fc8:	24000174 	.word	0x24000174

08017fcc <_sbrk_r>:
 8017fcc:	b538      	push	{r3, r4, r5, lr}
 8017fce:	4c06      	ldr	r4, [pc, #24]	; (8017fe8 <_sbrk_r+0x1c>)
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	4605      	mov	r5, r0
 8017fd4:	4608      	mov	r0, r1
 8017fd6:	6023      	str	r3, [r4, #0]
 8017fd8:	f7ea febc 	bl	8002d54 <_sbrk>
 8017fdc:	1c43      	adds	r3, r0, #1
 8017fde:	d102      	bne.n	8017fe6 <_sbrk_r+0x1a>
 8017fe0:	6823      	ldr	r3, [r4, #0]
 8017fe2:	b103      	cbz	r3, 8017fe6 <_sbrk_r+0x1a>
 8017fe4:	602b      	str	r3, [r5, #0]
 8017fe6:	bd38      	pop	{r3, r4, r5, pc}
 8017fe8:	24002454 	.word	0x24002454

08017fec <sniprintf>:
 8017fec:	b40c      	push	{r2, r3}
 8017fee:	b530      	push	{r4, r5, lr}
 8017ff0:	4b17      	ldr	r3, [pc, #92]	; (8018050 <sniprintf+0x64>)
 8017ff2:	1e0c      	subs	r4, r1, #0
 8017ff4:	b09d      	sub	sp, #116	; 0x74
 8017ff6:	681d      	ldr	r5, [r3, #0]
 8017ff8:	da08      	bge.n	801800c <sniprintf+0x20>
 8017ffa:	238b      	movs	r3, #139	; 0x8b
 8017ffc:	602b      	str	r3, [r5, #0]
 8017ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8018002:	b01d      	add	sp, #116	; 0x74
 8018004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018008:	b002      	add	sp, #8
 801800a:	4770      	bx	lr
 801800c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018010:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018014:	bf14      	ite	ne
 8018016:	f104 33ff 	addne.w	r3, r4, #4294967295
 801801a:	4623      	moveq	r3, r4
 801801c:	9304      	str	r3, [sp, #16]
 801801e:	9307      	str	r3, [sp, #28]
 8018020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018024:	9002      	str	r0, [sp, #8]
 8018026:	9006      	str	r0, [sp, #24]
 8018028:	f8ad 3016 	strh.w	r3, [sp, #22]
 801802c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801802e:	ab21      	add	r3, sp, #132	; 0x84
 8018030:	a902      	add	r1, sp, #8
 8018032:	4628      	mov	r0, r5
 8018034:	9301      	str	r3, [sp, #4]
 8018036:	f000 fb27 	bl	8018688 <_svfiprintf_r>
 801803a:	1c43      	adds	r3, r0, #1
 801803c:	bfbc      	itt	lt
 801803e:	238b      	movlt	r3, #139	; 0x8b
 8018040:	602b      	strlt	r3, [r5, #0]
 8018042:	2c00      	cmp	r4, #0
 8018044:	d0dd      	beq.n	8018002 <sniprintf+0x16>
 8018046:	9b02      	ldr	r3, [sp, #8]
 8018048:	2200      	movs	r2, #0
 801804a:	701a      	strb	r2, [r3, #0]
 801804c:	e7d9      	b.n	8018002 <sniprintf+0x16>
 801804e:	bf00      	nop
 8018050:	24000174 	.word	0x24000174

08018054 <siprintf>:
 8018054:	b40e      	push	{r1, r2, r3}
 8018056:	b500      	push	{lr}
 8018058:	b09c      	sub	sp, #112	; 0x70
 801805a:	ab1d      	add	r3, sp, #116	; 0x74
 801805c:	9002      	str	r0, [sp, #8]
 801805e:	9006      	str	r0, [sp, #24]
 8018060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018064:	4809      	ldr	r0, [pc, #36]	; (801808c <siprintf+0x38>)
 8018066:	9107      	str	r1, [sp, #28]
 8018068:	9104      	str	r1, [sp, #16]
 801806a:	4909      	ldr	r1, [pc, #36]	; (8018090 <siprintf+0x3c>)
 801806c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018070:	9105      	str	r1, [sp, #20]
 8018072:	6800      	ldr	r0, [r0, #0]
 8018074:	9301      	str	r3, [sp, #4]
 8018076:	a902      	add	r1, sp, #8
 8018078:	f000 fb06 	bl	8018688 <_svfiprintf_r>
 801807c:	9b02      	ldr	r3, [sp, #8]
 801807e:	2200      	movs	r2, #0
 8018080:	701a      	strb	r2, [r3, #0]
 8018082:	b01c      	add	sp, #112	; 0x70
 8018084:	f85d eb04 	ldr.w	lr, [sp], #4
 8018088:	b003      	add	sp, #12
 801808a:	4770      	bx	lr
 801808c:	24000174 	.word	0x24000174
 8018090:	ffff0208 	.word	0xffff0208

08018094 <__swbuf_r>:
 8018094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018096:	460e      	mov	r6, r1
 8018098:	4614      	mov	r4, r2
 801809a:	4605      	mov	r5, r0
 801809c:	b118      	cbz	r0, 80180a6 <__swbuf_r+0x12>
 801809e:	6983      	ldr	r3, [r0, #24]
 80180a0:	b90b      	cbnz	r3, 80180a6 <__swbuf_r+0x12>
 80180a2:	f000 f9a7 	bl	80183f4 <__sinit>
 80180a6:	4b21      	ldr	r3, [pc, #132]	; (801812c <__swbuf_r+0x98>)
 80180a8:	429c      	cmp	r4, r3
 80180aa:	d12a      	bne.n	8018102 <__swbuf_r+0x6e>
 80180ac:	686c      	ldr	r4, [r5, #4]
 80180ae:	69a3      	ldr	r3, [r4, #24]
 80180b0:	60a3      	str	r3, [r4, #8]
 80180b2:	89a3      	ldrh	r3, [r4, #12]
 80180b4:	071a      	lsls	r2, r3, #28
 80180b6:	d52e      	bpl.n	8018116 <__swbuf_r+0x82>
 80180b8:	6923      	ldr	r3, [r4, #16]
 80180ba:	b363      	cbz	r3, 8018116 <__swbuf_r+0x82>
 80180bc:	6923      	ldr	r3, [r4, #16]
 80180be:	6820      	ldr	r0, [r4, #0]
 80180c0:	1ac0      	subs	r0, r0, r3
 80180c2:	6963      	ldr	r3, [r4, #20]
 80180c4:	b2f6      	uxtb	r6, r6
 80180c6:	4283      	cmp	r3, r0
 80180c8:	4637      	mov	r7, r6
 80180ca:	dc04      	bgt.n	80180d6 <__swbuf_r+0x42>
 80180cc:	4621      	mov	r1, r4
 80180ce:	4628      	mov	r0, r5
 80180d0:	f000 f926 	bl	8018320 <_fflush_r>
 80180d4:	bb28      	cbnz	r0, 8018122 <__swbuf_r+0x8e>
 80180d6:	68a3      	ldr	r3, [r4, #8]
 80180d8:	3b01      	subs	r3, #1
 80180da:	60a3      	str	r3, [r4, #8]
 80180dc:	6823      	ldr	r3, [r4, #0]
 80180de:	1c5a      	adds	r2, r3, #1
 80180e0:	6022      	str	r2, [r4, #0]
 80180e2:	701e      	strb	r6, [r3, #0]
 80180e4:	6963      	ldr	r3, [r4, #20]
 80180e6:	3001      	adds	r0, #1
 80180e8:	4283      	cmp	r3, r0
 80180ea:	d004      	beq.n	80180f6 <__swbuf_r+0x62>
 80180ec:	89a3      	ldrh	r3, [r4, #12]
 80180ee:	07db      	lsls	r3, r3, #31
 80180f0:	d519      	bpl.n	8018126 <__swbuf_r+0x92>
 80180f2:	2e0a      	cmp	r6, #10
 80180f4:	d117      	bne.n	8018126 <__swbuf_r+0x92>
 80180f6:	4621      	mov	r1, r4
 80180f8:	4628      	mov	r0, r5
 80180fa:	f000 f911 	bl	8018320 <_fflush_r>
 80180fe:	b190      	cbz	r0, 8018126 <__swbuf_r+0x92>
 8018100:	e00f      	b.n	8018122 <__swbuf_r+0x8e>
 8018102:	4b0b      	ldr	r3, [pc, #44]	; (8018130 <__swbuf_r+0x9c>)
 8018104:	429c      	cmp	r4, r3
 8018106:	d101      	bne.n	801810c <__swbuf_r+0x78>
 8018108:	68ac      	ldr	r4, [r5, #8]
 801810a:	e7d0      	b.n	80180ae <__swbuf_r+0x1a>
 801810c:	4b09      	ldr	r3, [pc, #36]	; (8018134 <__swbuf_r+0xa0>)
 801810e:	429c      	cmp	r4, r3
 8018110:	bf08      	it	eq
 8018112:	68ec      	ldreq	r4, [r5, #12]
 8018114:	e7cb      	b.n	80180ae <__swbuf_r+0x1a>
 8018116:	4621      	mov	r1, r4
 8018118:	4628      	mov	r0, r5
 801811a:	f000 f80d 	bl	8018138 <__swsetup_r>
 801811e:	2800      	cmp	r0, #0
 8018120:	d0cc      	beq.n	80180bc <__swbuf_r+0x28>
 8018122:	f04f 37ff 	mov.w	r7, #4294967295
 8018126:	4638      	mov	r0, r7
 8018128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801812a:	bf00      	nop
 801812c:	080198c4 	.word	0x080198c4
 8018130:	080198e4 	.word	0x080198e4
 8018134:	080198a4 	.word	0x080198a4

08018138 <__swsetup_r>:
 8018138:	4b32      	ldr	r3, [pc, #200]	; (8018204 <__swsetup_r+0xcc>)
 801813a:	b570      	push	{r4, r5, r6, lr}
 801813c:	681d      	ldr	r5, [r3, #0]
 801813e:	4606      	mov	r6, r0
 8018140:	460c      	mov	r4, r1
 8018142:	b125      	cbz	r5, 801814e <__swsetup_r+0x16>
 8018144:	69ab      	ldr	r3, [r5, #24]
 8018146:	b913      	cbnz	r3, 801814e <__swsetup_r+0x16>
 8018148:	4628      	mov	r0, r5
 801814a:	f000 f953 	bl	80183f4 <__sinit>
 801814e:	4b2e      	ldr	r3, [pc, #184]	; (8018208 <__swsetup_r+0xd0>)
 8018150:	429c      	cmp	r4, r3
 8018152:	d10f      	bne.n	8018174 <__swsetup_r+0x3c>
 8018154:	686c      	ldr	r4, [r5, #4]
 8018156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801815a:	b29a      	uxth	r2, r3
 801815c:	0715      	lsls	r5, r2, #28
 801815e:	d42c      	bmi.n	80181ba <__swsetup_r+0x82>
 8018160:	06d0      	lsls	r0, r2, #27
 8018162:	d411      	bmi.n	8018188 <__swsetup_r+0x50>
 8018164:	2209      	movs	r2, #9
 8018166:	6032      	str	r2, [r6, #0]
 8018168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801816c:	81a3      	strh	r3, [r4, #12]
 801816e:	f04f 30ff 	mov.w	r0, #4294967295
 8018172:	e03e      	b.n	80181f2 <__swsetup_r+0xba>
 8018174:	4b25      	ldr	r3, [pc, #148]	; (801820c <__swsetup_r+0xd4>)
 8018176:	429c      	cmp	r4, r3
 8018178:	d101      	bne.n	801817e <__swsetup_r+0x46>
 801817a:	68ac      	ldr	r4, [r5, #8]
 801817c:	e7eb      	b.n	8018156 <__swsetup_r+0x1e>
 801817e:	4b24      	ldr	r3, [pc, #144]	; (8018210 <__swsetup_r+0xd8>)
 8018180:	429c      	cmp	r4, r3
 8018182:	bf08      	it	eq
 8018184:	68ec      	ldreq	r4, [r5, #12]
 8018186:	e7e6      	b.n	8018156 <__swsetup_r+0x1e>
 8018188:	0751      	lsls	r1, r2, #29
 801818a:	d512      	bpl.n	80181b2 <__swsetup_r+0x7a>
 801818c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801818e:	b141      	cbz	r1, 80181a2 <__swsetup_r+0x6a>
 8018190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018194:	4299      	cmp	r1, r3
 8018196:	d002      	beq.n	801819e <__swsetup_r+0x66>
 8018198:	4630      	mov	r0, r6
 801819a:	f7ff fdf3 	bl	8017d84 <_free_r>
 801819e:	2300      	movs	r3, #0
 80181a0:	6363      	str	r3, [r4, #52]	; 0x34
 80181a2:	89a3      	ldrh	r3, [r4, #12]
 80181a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80181a8:	81a3      	strh	r3, [r4, #12]
 80181aa:	2300      	movs	r3, #0
 80181ac:	6063      	str	r3, [r4, #4]
 80181ae:	6923      	ldr	r3, [r4, #16]
 80181b0:	6023      	str	r3, [r4, #0]
 80181b2:	89a3      	ldrh	r3, [r4, #12]
 80181b4:	f043 0308 	orr.w	r3, r3, #8
 80181b8:	81a3      	strh	r3, [r4, #12]
 80181ba:	6923      	ldr	r3, [r4, #16]
 80181bc:	b94b      	cbnz	r3, 80181d2 <__swsetup_r+0x9a>
 80181be:	89a3      	ldrh	r3, [r4, #12]
 80181c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80181c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80181c8:	d003      	beq.n	80181d2 <__swsetup_r+0x9a>
 80181ca:	4621      	mov	r1, r4
 80181cc:	4630      	mov	r0, r6
 80181ce:	f000 f9bf 	bl	8018550 <__smakebuf_r>
 80181d2:	89a2      	ldrh	r2, [r4, #12]
 80181d4:	f012 0301 	ands.w	r3, r2, #1
 80181d8:	d00c      	beq.n	80181f4 <__swsetup_r+0xbc>
 80181da:	2300      	movs	r3, #0
 80181dc:	60a3      	str	r3, [r4, #8]
 80181de:	6963      	ldr	r3, [r4, #20]
 80181e0:	425b      	negs	r3, r3
 80181e2:	61a3      	str	r3, [r4, #24]
 80181e4:	6923      	ldr	r3, [r4, #16]
 80181e6:	b953      	cbnz	r3, 80181fe <__swsetup_r+0xc6>
 80181e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80181f0:	d1ba      	bne.n	8018168 <__swsetup_r+0x30>
 80181f2:	bd70      	pop	{r4, r5, r6, pc}
 80181f4:	0792      	lsls	r2, r2, #30
 80181f6:	bf58      	it	pl
 80181f8:	6963      	ldrpl	r3, [r4, #20]
 80181fa:	60a3      	str	r3, [r4, #8]
 80181fc:	e7f2      	b.n	80181e4 <__swsetup_r+0xac>
 80181fe:	2000      	movs	r0, #0
 8018200:	e7f7      	b.n	80181f2 <__swsetup_r+0xba>
 8018202:	bf00      	nop
 8018204:	24000174 	.word	0x24000174
 8018208:	080198c4 	.word	0x080198c4
 801820c:	080198e4 	.word	0x080198e4
 8018210:	080198a4 	.word	0x080198a4

08018214 <__sflush_r>:
 8018214:	898a      	ldrh	r2, [r1, #12]
 8018216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801821a:	4605      	mov	r5, r0
 801821c:	0710      	lsls	r0, r2, #28
 801821e:	460c      	mov	r4, r1
 8018220:	d458      	bmi.n	80182d4 <__sflush_r+0xc0>
 8018222:	684b      	ldr	r3, [r1, #4]
 8018224:	2b00      	cmp	r3, #0
 8018226:	dc05      	bgt.n	8018234 <__sflush_r+0x20>
 8018228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801822a:	2b00      	cmp	r3, #0
 801822c:	dc02      	bgt.n	8018234 <__sflush_r+0x20>
 801822e:	2000      	movs	r0, #0
 8018230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018236:	2e00      	cmp	r6, #0
 8018238:	d0f9      	beq.n	801822e <__sflush_r+0x1a>
 801823a:	2300      	movs	r3, #0
 801823c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018240:	682f      	ldr	r7, [r5, #0]
 8018242:	6a21      	ldr	r1, [r4, #32]
 8018244:	602b      	str	r3, [r5, #0]
 8018246:	d032      	beq.n	80182ae <__sflush_r+0x9a>
 8018248:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801824a:	89a3      	ldrh	r3, [r4, #12]
 801824c:	075a      	lsls	r2, r3, #29
 801824e:	d505      	bpl.n	801825c <__sflush_r+0x48>
 8018250:	6863      	ldr	r3, [r4, #4]
 8018252:	1ac0      	subs	r0, r0, r3
 8018254:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018256:	b10b      	cbz	r3, 801825c <__sflush_r+0x48>
 8018258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801825a:	1ac0      	subs	r0, r0, r3
 801825c:	2300      	movs	r3, #0
 801825e:	4602      	mov	r2, r0
 8018260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018262:	6a21      	ldr	r1, [r4, #32]
 8018264:	4628      	mov	r0, r5
 8018266:	47b0      	blx	r6
 8018268:	1c43      	adds	r3, r0, #1
 801826a:	89a3      	ldrh	r3, [r4, #12]
 801826c:	d106      	bne.n	801827c <__sflush_r+0x68>
 801826e:	6829      	ldr	r1, [r5, #0]
 8018270:	291d      	cmp	r1, #29
 8018272:	d848      	bhi.n	8018306 <__sflush_r+0xf2>
 8018274:	4a29      	ldr	r2, [pc, #164]	; (801831c <__sflush_r+0x108>)
 8018276:	40ca      	lsrs	r2, r1
 8018278:	07d6      	lsls	r6, r2, #31
 801827a:	d544      	bpl.n	8018306 <__sflush_r+0xf2>
 801827c:	2200      	movs	r2, #0
 801827e:	6062      	str	r2, [r4, #4]
 8018280:	04d9      	lsls	r1, r3, #19
 8018282:	6922      	ldr	r2, [r4, #16]
 8018284:	6022      	str	r2, [r4, #0]
 8018286:	d504      	bpl.n	8018292 <__sflush_r+0x7e>
 8018288:	1c42      	adds	r2, r0, #1
 801828a:	d101      	bne.n	8018290 <__sflush_r+0x7c>
 801828c:	682b      	ldr	r3, [r5, #0]
 801828e:	b903      	cbnz	r3, 8018292 <__sflush_r+0x7e>
 8018290:	6560      	str	r0, [r4, #84]	; 0x54
 8018292:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018294:	602f      	str	r7, [r5, #0]
 8018296:	2900      	cmp	r1, #0
 8018298:	d0c9      	beq.n	801822e <__sflush_r+0x1a>
 801829a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801829e:	4299      	cmp	r1, r3
 80182a0:	d002      	beq.n	80182a8 <__sflush_r+0x94>
 80182a2:	4628      	mov	r0, r5
 80182a4:	f7ff fd6e 	bl	8017d84 <_free_r>
 80182a8:	2000      	movs	r0, #0
 80182aa:	6360      	str	r0, [r4, #52]	; 0x34
 80182ac:	e7c0      	b.n	8018230 <__sflush_r+0x1c>
 80182ae:	2301      	movs	r3, #1
 80182b0:	4628      	mov	r0, r5
 80182b2:	47b0      	blx	r6
 80182b4:	1c41      	adds	r1, r0, #1
 80182b6:	d1c8      	bne.n	801824a <__sflush_r+0x36>
 80182b8:	682b      	ldr	r3, [r5, #0]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d0c5      	beq.n	801824a <__sflush_r+0x36>
 80182be:	2b1d      	cmp	r3, #29
 80182c0:	d001      	beq.n	80182c6 <__sflush_r+0xb2>
 80182c2:	2b16      	cmp	r3, #22
 80182c4:	d101      	bne.n	80182ca <__sflush_r+0xb6>
 80182c6:	602f      	str	r7, [r5, #0]
 80182c8:	e7b1      	b.n	801822e <__sflush_r+0x1a>
 80182ca:	89a3      	ldrh	r3, [r4, #12]
 80182cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182d0:	81a3      	strh	r3, [r4, #12]
 80182d2:	e7ad      	b.n	8018230 <__sflush_r+0x1c>
 80182d4:	690f      	ldr	r7, [r1, #16]
 80182d6:	2f00      	cmp	r7, #0
 80182d8:	d0a9      	beq.n	801822e <__sflush_r+0x1a>
 80182da:	0793      	lsls	r3, r2, #30
 80182dc:	680e      	ldr	r6, [r1, #0]
 80182de:	bf08      	it	eq
 80182e0:	694b      	ldreq	r3, [r1, #20]
 80182e2:	600f      	str	r7, [r1, #0]
 80182e4:	bf18      	it	ne
 80182e6:	2300      	movne	r3, #0
 80182e8:	eba6 0807 	sub.w	r8, r6, r7
 80182ec:	608b      	str	r3, [r1, #8]
 80182ee:	f1b8 0f00 	cmp.w	r8, #0
 80182f2:	dd9c      	ble.n	801822e <__sflush_r+0x1a>
 80182f4:	4643      	mov	r3, r8
 80182f6:	463a      	mov	r2, r7
 80182f8:	6a21      	ldr	r1, [r4, #32]
 80182fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80182fc:	4628      	mov	r0, r5
 80182fe:	47b0      	blx	r6
 8018300:	2800      	cmp	r0, #0
 8018302:	dc06      	bgt.n	8018312 <__sflush_r+0xfe>
 8018304:	89a3      	ldrh	r3, [r4, #12]
 8018306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801830a:	81a3      	strh	r3, [r4, #12]
 801830c:	f04f 30ff 	mov.w	r0, #4294967295
 8018310:	e78e      	b.n	8018230 <__sflush_r+0x1c>
 8018312:	4407      	add	r7, r0
 8018314:	eba8 0800 	sub.w	r8, r8, r0
 8018318:	e7e9      	b.n	80182ee <__sflush_r+0xda>
 801831a:	bf00      	nop
 801831c:	20400001 	.word	0x20400001

08018320 <_fflush_r>:
 8018320:	b538      	push	{r3, r4, r5, lr}
 8018322:	690b      	ldr	r3, [r1, #16]
 8018324:	4605      	mov	r5, r0
 8018326:	460c      	mov	r4, r1
 8018328:	b1db      	cbz	r3, 8018362 <_fflush_r+0x42>
 801832a:	b118      	cbz	r0, 8018334 <_fflush_r+0x14>
 801832c:	6983      	ldr	r3, [r0, #24]
 801832e:	b90b      	cbnz	r3, 8018334 <_fflush_r+0x14>
 8018330:	f000 f860 	bl	80183f4 <__sinit>
 8018334:	4b0c      	ldr	r3, [pc, #48]	; (8018368 <_fflush_r+0x48>)
 8018336:	429c      	cmp	r4, r3
 8018338:	d109      	bne.n	801834e <_fflush_r+0x2e>
 801833a:	686c      	ldr	r4, [r5, #4]
 801833c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018340:	b17b      	cbz	r3, 8018362 <_fflush_r+0x42>
 8018342:	4621      	mov	r1, r4
 8018344:	4628      	mov	r0, r5
 8018346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801834a:	f7ff bf63 	b.w	8018214 <__sflush_r>
 801834e:	4b07      	ldr	r3, [pc, #28]	; (801836c <_fflush_r+0x4c>)
 8018350:	429c      	cmp	r4, r3
 8018352:	d101      	bne.n	8018358 <_fflush_r+0x38>
 8018354:	68ac      	ldr	r4, [r5, #8]
 8018356:	e7f1      	b.n	801833c <_fflush_r+0x1c>
 8018358:	4b05      	ldr	r3, [pc, #20]	; (8018370 <_fflush_r+0x50>)
 801835a:	429c      	cmp	r4, r3
 801835c:	bf08      	it	eq
 801835e:	68ec      	ldreq	r4, [r5, #12]
 8018360:	e7ec      	b.n	801833c <_fflush_r+0x1c>
 8018362:	2000      	movs	r0, #0
 8018364:	bd38      	pop	{r3, r4, r5, pc}
 8018366:	bf00      	nop
 8018368:	080198c4 	.word	0x080198c4
 801836c:	080198e4 	.word	0x080198e4
 8018370:	080198a4 	.word	0x080198a4

08018374 <std>:
 8018374:	2300      	movs	r3, #0
 8018376:	b510      	push	{r4, lr}
 8018378:	4604      	mov	r4, r0
 801837a:	e9c0 3300 	strd	r3, r3, [r0]
 801837e:	6083      	str	r3, [r0, #8]
 8018380:	8181      	strh	r1, [r0, #12]
 8018382:	6643      	str	r3, [r0, #100]	; 0x64
 8018384:	81c2      	strh	r2, [r0, #14]
 8018386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801838a:	6183      	str	r3, [r0, #24]
 801838c:	4619      	mov	r1, r3
 801838e:	2208      	movs	r2, #8
 8018390:	305c      	adds	r0, #92	; 0x5c
 8018392:	f7ff fcee 	bl	8017d72 <memset>
 8018396:	4b05      	ldr	r3, [pc, #20]	; (80183ac <std+0x38>)
 8018398:	6263      	str	r3, [r4, #36]	; 0x24
 801839a:	4b05      	ldr	r3, [pc, #20]	; (80183b0 <std+0x3c>)
 801839c:	62a3      	str	r3, [r4, #40]	; 0x28
 801839e:	4b05      	ldr	r3, [pc, #20]	; (80183b4 <std+0x40>)
 80183a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80183a2:	4b05      	ldr	r3, [pc, #20]	; (80183b8 <std+0x44>)
 80183a4:	6224      	str	r4, [r4, #32]
 80183a6:	6323      	str	r3, [r4, #48]	; 0x30
 80183a8:	bd10      	pop	{r4, pc}
 80183aa:	bf00      	nop
 80183ac:	08018e09 	.word	0x08018e09
 80183b0:	08018e2b 	.word	0x08018e2b
 80183b4:	08018e63 	.word	0x08018e63
 80183b8:	08018e87 	.word	0x08018e87

080183bc <_cleanup_r>:
 80183bc:	4901      	ldr	r1, [pc, #4]	; (80183c4 <_cleanup_r+0x8>)
 80183be:	f000 b885 	b.w	80184cc <_fwalk_reent>
 80183c2:	bf00      	nop
 80183c4:	08018321 	.word	0x08018321

080183c8 <__sfmoreglue>:
 80183c8:	b570      	push	{r4, r5, r6, lr}
 80183ca:	1e4a      	subs	r2, r1, #1
 80183cc:	2568      	movs	r5, #104	; 0x68
 80183ce:	4355      	muls	r5, r2
 80183d0:	460e      	mov	r6, r1
 80183d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80183d6:	f7ff fd23 	bl	8017e20 <_malloc_r>
 80183da:	4604      	mov	r4, r0
 80183dc:	b140      	cbz	r0, 80183f0 <__sfmoreglue+0x28>
 80183de:	2100      	movs	r1, #0
 80183e0:	e9c0 1600 	strd	r1, r6, [r0]
 80183e4:	300c      	adds	r0, #12
 80183e6:	60a0      	str	r0, [r4, #8]
 80183e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80183ec:	f7ff fcc1 	bl	8017d72 <memset>
 80183f0:	4620      	mov	r0, r4
 80183f2:	bd70      	pop	{r4, r5, r6, pc}

080183f4 <__sinit>:
 80183f4:	6983      	ldr	r3, [r0, #24]
 80183f6:	b510      	push	{r4, lr}
 80183f8:	4604      	mov	r4, r0
 80183fa:	bb33      	cbnz	r3, 801844a <__sinit+0x56>
 80183fc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018400:	6503      	str	r3, [r0, #80]	; 0x50
 8018402:	4b12      	ldr	r3, [pc, #72]	; (801844c <__sinit+0x58>)
 8018404:	4a12      	ldr	r2, [pc, #72]	; (8018450 <__sinit+0x5c>)
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	6282      	str	r2, [r0, #40]	; 0x28
 801840a:	4298      	cmp	r0, r3
 801840c:	bf04      	itt	eq
 801840e:	2301      	moveq	r3, #1
 8018410:	6183      	streq	r3, [r0, #24]
 8018412:	f000 f81f 	bl	8018454 <__sfp>
 8018416:	6060      	str	r0, [r4, #4]
 8018418:	4620      	mov	r0, r4
 801841a:	f000 f81b 	bl	8018454 <__sfp>
 801841e:	60a0      	str	r0, [r4, #8]
 8018420:	4620      	mov	r0, r4
 8018422:	f000 f817 	bl	8018454 <__sfp>
 8018426:	2200      	movs	r2, #0
 8018428:	60e0      	str	r0, [r4, #12]
 801842a:	2104      	movs	r1, #4
 801842c:	6860      	ldr	r0, [r4, #4]
 801842e:	f7ff ffa1 	bl	8018374 <std>
 8018432:	2201      	movs	r2, #1
 8018434:	2109      	movs	r1, #9
 8018436:	68a0      	ldr	r0, [r4, #8]
 8018438:	f7ff ff9c 	bl	8018374 <std>
 801843c:	2202      	movs	r2, #2
 801843e:	2112      	movs	r1, #18
 8018440:	68e0      	ldr	r0, [r4, #12]
 8018442:	f7ff ff97 	bl	8018374 <std>
 8018446:	2301      	movs	r3, #1
 8018448:	61a3      	str	r3, [r4, #24]
 801844a:	bd10      	pop	{r4, pc}
 801844c:	080198a0 	.word	0x080198a0
 8018450:	080183bd 	.word	0x080183bd

08018454 <__sfp>:
 8018454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018456:	4b1b      	ldr	r3, [pc, #108]	; (80184c4 <__sfp+0x70>)
 8018458:	681e      	ldr	r6, [r3, #0]
 801845a:	69b3      	ldr	r3, [r6, #24]
 801845c:	4607      	mov	r7, r0
 801845e:	b913      	cbnz	r3, 8018466 <__sfp+0x12>
 8018460:	4630      	mov	r0, r6
 8018462:	f7ff ffc7 	bl	80183f4 <__sinit>
 8018466:	3648      	adds	r6, #72	; 0x48
 8018468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801846c:	3b01      	subs	r3, #1
 801846e:	d503      	bpl.n	8018478 <__sfp+0x24>
 8018470:	6833      	ldr	r3, [r6, #0]
 8018472:	b133      	cbz	r3, 8018482 <__sfp+0x2e>
 8018474:	6836      	ldr	r6, [r6, #0]
 8018476:	e7f7      	b.n	8018468 <__sfp+0x14>
 8018478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801847c:	b16d      	cbz	r5, 801849a <__sfp+0x46>
 801847e:	3468      	adds	r4, #104	; 0x68
 8018480:	e7f4      	b.n	801846c <__sfp+0x18>
 8018482:	2104      	movs	r1, #4
 8018484:	4638      	mov	r0, r7
 8018486:	f7ff ff9f 	bl	80183c8 <__sfmoreglue>
 801848a:	6030      	str	r0, [r6, #0]
 801848c:	2800      	cmp	r0, #0
 801848e:	d1f1      	bne.n	8018474 <__sfp+0x20>
 8018490:	230c      	movs	r3, #12
 8018492:	603b      	str	r3, [r7, #0]
 8018494:	4604      	mov	r4, r0
 8018496:	4620      	mov	r0, r4
 8018498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801849a:	4b0b      	ldr	r3, [pc, #44]	; (80184c8 <__sfp+0x74>)
 801849c:	6665      	str	r5, [r4, #100]	; 0x64
 801849e:	e9c4 5500 	strd	r5, r5, [r4]
 80184a2:	60a5      	str	r5, [r4, #8]
 80184a4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80184a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80184ac:	2208      	movs	r2, #8
 80184ae:	4629      	mov	r1, r5
 80184b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80184b4:	f7ff fc5d 	bl	8017d72 <memset>
 80184b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80184bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80184c0:	e7e9      	b.n	8018496 <__sfp+0x42>
 80184c2:	bf00      	nop
 80184c4:	080198a0 	.word	0x080198a0
 80184c8:	ffff0001 	.word	0xffff0001

080184cc <_fwalk_reent>:
 80184cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184d0:	4680      	mov	r8, r0
 80184d2:	4689      	mov	r9, r1
 80184d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80184d8:	2600      	movs	r6, #0
 80184da:	b914      	cbnz	r4, 80184e2 <_fwalk_reent+0x16>
 80184dc:	4630      	mov	r0, r6
 80184de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80184e6:	3f01      	subs	r7, #1
 80184e8:	d501      	bpl.n	80184ee <_fwalk_reent+0x22>
 80184ea:	6824      	ldr	r4, [r4, #0]
 80184ec:	e7f5      	b.n	80184da <_fwalk_reent+0xe>
 80184ee:	89ab      	ldrh	r3, [r5, #12]
 80184f0:	2b01      	cmp	r3, #1
 80184f2:	d907      	bls.n	8018504 <_fwalk_reent+0x38>
 80184f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80184f8:	3301      	adds	r3, #1
 80184fa:	d003      	beq.n	8018504 <_fwalk_reent+0x38>
 80184fc:	4629      	mov	r1, r5
 80184fe:	4640      	mov	r0, r8
 8018500:	47c8      	blx	r9
 8018502:	4306      	orrs	r6, r0
 8018504:	3568      	adds	r5, #104	; 0x68
 8018506:	e7ee      	b.n	80184e6 <_fwalk_reent+0x1a>

08018508 <__swhatbuf_r>:
 8018508:	b570      	push	{r4, r5, r6, lr}
 801850a:	460e      	mov	r6, r1
 801850c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018510:	2900      	cmp	r1, #0
 8018512:	b096      	sub	sp, #88	; 0x58
 8018514:	4614      	mov	r4, r2
 8018516:	461d      	mov	r5, r3
 8018518:	da07      	bge.n	801852a <__swhatbuf_r+0x22>
 801851a:	2300      	movs	r3, #0
 801851c:	602b      	str	r3, [r5, #0]
 801851e:	89b3      	ldrh	r3, [r6, #12]
 8018520:	061a      	lsls	r2, r3, #24
 8018522:	d410      	bmi.n	8018546 <__swhatbuf_r+0x3e>
 8018524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018528:	e00e      	b.n	8018548 <__swhatbuf_r+0x40>
 801852a:	466a      	mov	r2, sp
 801852c:	f000 fcd2 	bl	8018ed4 <_fstat_r>
 8018530:	2800      	cmp	r0, #0
 8018532:	dbf2      	blt.n	801851a <__swhatbuf_r+0x12>
 8018534:	9a01      	ldr	r2, [sp, #4]
 8018536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801853a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801853e:	425a      	negs	r2, r3
 8018540:	415a      	adcs	r2, r3
 8018542:	602a      	str	r2, [r5, #0]
 8018544:	e7ee      	b.n	8018524 <__swhatbuf_r+0x1c>
 8018546:	2340      	movs	r3, #64	; 0x40
 8018548:	2000      	movs	r0, #0
 801854a:	6023      	str	r3, [r4, #0]
 801854c:	b016      	add	sp, #88	; 0x58
 801854e:	bd70      	pop	{r4, r5, r6, pc}

08018550 <__smakebuf_r>:
 8018550:	898b      	ldrh	r3, [r1, #12]
 8018552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018554:	079d      	lsls	r5, r3, #30
 8018556:	4606      	mov	r6, r0
 8018558:	460c      	mov	r4, r1
 801855a:	d507      	bpl.n	801856c <__smakebuf_r+0x1c>
 801855c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018560:	6023      	str	r3, [r4, #0]
 8018562:	6123      	str	r3, [r4, #16]
 8018564:	2301      	movs	r3, #1
 8018566:	6163      	str	r3, [r4, #20]
 8018568:	b002      	add	sp, #8
 801856a:	bd70      	pop	{r4, r5, r6, pc}
 801856c:	ab01      	add	r3, sp, #4
 801856e:	466a      	mov	r2, sp
 8018570:	f7ff ffca 	bl	8018508 <__swhatbuf_r>
 8018574:	9900      	ldr	r1, [sp, #0]
 8018576:	4605      	mov	r5, r0
 8018578:	4630      	mov	r0, r6
 801857a:	f7ff fc51 	bl	8017e20 <_malloc_r>
 801857e:	b948      	cbnz	r0, 8018594 <__smakebuf_r+0x44>
 8018580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018584:	059a      	lsls	r2, r3, #22
 8018586:	d4ef      	bmi.n	8018568 <__smakebuf_r+0x18>
 8018588:	f023 0303 	bic.w	r3, r3, #3
 801858c:	f043 0302 	orr.w	r3, r3, #2
 8018590:	81a3      	strh	r3, [r4, #12]
 8018592:	e7e3      	b.n	801855c <__smakebuf_r+0xc>
 8018594:	4b0d      	ldr	r3, [pc, #52]	; (80185cc <__smakebuf_r+0x7c>)
 8018596:	62b3      	str	r3, [r6, #40]	; 0x28
 8018598:	89a3      	ldrh	r3, [r4, #12]
 801859a:	6020      	str	r0, [r4, #0]
 801859c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80185a0:	81a3      	strh	r3, [r4, #12]
 80185a2:	9b00      	ldr	r3, [sp, #0]
 80185a4:	6163      	str	r3, [r4, #20]
 80185a6:	9b01      	ldr	r3, [sp, #4]
 80185a8:	6120      	str	r0, [r4, #16]
 80185aa:	b15b      	cbz	r3, 80185c4 <__smakebuf_r+0x74>
 80185ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185b0:	4630      	mov	r0, r6
 80185b2:	f000 fca1 	bl	8018ef8 <_isatty_r>
 80185b6:	b128      	cbz	r0, 80185c4 <__smakebuf_r+0x74>
 80185b8:	89a3      	ldrh	r3, [r4, #12]
 80185ba:	f023 0303 	bic.w	r3, r3, #3
 80185be:	f043 0301 	orr.w	r3, r3, #1
 80185c2:	81a3      	strh	r3, [r4, #12]
 80185c4:	89a3      	ldrh	r3, [r4, #12]
 80185c6:	431d      	orrs	r5, r3
 80185c8:	81a5      	strh	r5, [r4, #12]
 80185ca:	e7cd      	b.n	8018568 <__smakebuf_r+0x18>
 80185cc:	080183bd 	.word	0x080183bd

080185d0 <__malloc_lock>:
 80185d0:	4770      	bx	lr

080185d2 <__malloc_unlock>:
 80185d2:	4770      	bx	lr

080185d4 <__ssputs_r>:
 80185d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185d8:	688e      	ldr	r6, [r1, #8]
 80185da:	429e      	cmp	r6, r3
 80185dc:	4682      	mov	sl, r0
 80185de:	460c      	mov	r4, r1
 80185e0:	4690      	mov	r8, r2
 80185e2:	4699      	mov	r9, r3
 80185e4:	d837      	bhi.n	8018656 <__ssputs_r+0x82>
 80185e6:	898a      	ldrh	r2, [r1, #12]
 80185e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80185ec:	d031      	beq.n	8018652 <__ssputs_r+0x7e>
 80185ee:	6825      	ldr	r5, [r4, #0]
 80185f0:	6909      	ldr	r1, [r1, #16]
 80185f2:	1a6f      	subs	r7, r5, r1
 80185f4:	6965      	ldr	r5, [r4, #20]
 80185f6:	2302      	movs	r3, #2
 80185f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80185fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8018600:	f109 0301 	add.w	r3, r9, #1
 8018604:	443b      	add	r3, r7
 8018606:	429d      	cmp	r5, r3
 8018608:	bf38      	it	cc
 801860a:	461d      	movcc	r5, r3
 801860c:	0553      	lsls	r3, r2, #21
 801860e:	d530      	bpl.n	8018672 <__ssputs_r+0x9e>
 8018610:	4629      	mov	r1, r5
 8018612:	f7ff fc05 	bl	8017e20 <_malloc_r>
 8018616:	4606      	mov	r6, r0
 8018618:	b950      	cbnz	r0, 8018630 <__ssputs_r+0x5c>
 801861a:	230c      	movs	r3, #12
 801861c:	f8ca 3000 	str.w	r3, [sl]
 8018620:	89a3      	ldrh	r3, [r4, #12]
 8018622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018626:	81a3      	strh	r3, [r4, #12]
 8018628:	f04f 30ff 	mov.w	r0, #4294967295
 801862c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018630:	463a      	mov	r2, r7
 8018632:	6921      	ldr	r1, [r4, #16]
 8018634:	f7ff fb92 	bl	8017d5c <memcpy>
 8018638:	89a3      	ldrh	r3, [r4, #12]
 801863a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801863e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018642:	81a3      	strh	r3, [r4, #12]
 8018644:	6126      	str	r6, [r4, #16]
 8018646:	6165      	str	r5, [r4, #20]
 8018648:	443e      	add	r6, r7
 801864a:	1bed      	subs	r5, r5, r7
 801864c:	6026      	str	r6, [r4, #0]
 801864e:	60a5      	str	r5, [r4, #8]
 8018650:	464e      	mov	r6, r9
 8018652:	454e      	cmp	r6, r9
 8018654:	d900      	bls.n	8018658 <__ssputs_r+0x84>
 8018656:	464e      	mov	r6, r9
 8018658:	4632      	mov	r2, r6
 801865a:	4641      	mov	r1, r8
 801865c:	6820      	ldr	r0, [r4, #0]
 801865e:	f000 fc6d 	bl	8018f3c <memmove>
 8018662:	68a3      	ldr	r3, [r4, #8]
 8018664:	1b9b      	subs	r3, r3, r6
 8018666:	60a3      	str	r3, [r4, #8]
 8018668:	6823      	ldr	r3, [r4, #0]
 801866a:	441e      	add	r6, r3
 801866c:	6026      	str	r6, [r4, #0]
 801866e:	2000      	movs	r0, #0
 8018670:	e7dc      	b.n	801862c <__ssputs_r+0x58>
 8018672:	462a      	mov	r2, r5
 8018674:	f000 fc7b 	bl	8018f6e <_realloc_r>
 8018678:	4606      	mov	r6, r0
 801867a:	2800      	cmp	r0, #0
 801867c:	d1e2      	bne.n	8018644 <__ssputs_r+0x70>
 801867e:	6921      	ldr	r1, [r4, #16]
 8018680:	4650      	mov	r0, sl
 8018682:	f7ff fb7f 	bl	8017d84 <_free_r>
 8018686:	e7c8      	b.n	801861a <__ssputs_r+0x46>

08018688 <_svfiprintf_r>:
 8018688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801868c:	461d      	mov	r5, r3
 801868e:	898b      	ldrh	r3, [r1, #12]
 8018690:	061f      	lsls	r7, r3, #24
 8018692:	b09d      	sub	sp, #116	; 0x74
 8018694:	4680      	mov	r8, r0
 8018696:	460c      	mov	r4, r1
 8018698:	4616      	mov	r6, r2
 801869a:	d50f      	bpl.n	80186bc <_svfiprintf_r+0x34>
 801869c:	690b      	ldr	r3, [r1, #16]
 801869e:	b96b      	cbnz	r3, 80186bc <_svfiprintf_r+0x34>
 80186a0:	2140      	movs	r1, #64	; 0x40
 80186a2:	f7ff fbbd 	bl	8017e20 <_malloc_r>
 80186a6:	6020      	str	r0, [r4, #0]
 80186a8:	6120      	str	r0, [r4, #16]
 80186aa:	b928      	cbnz	r0, 80186b8 <_svfiprintf_r+0x30>
 80186ac:	230c      	movs	r3, #12
 80186ae:	f8c8 3000 	str.w	r3, [r8]
 80186b2:	f04f 30ff 	mov.w	r0, #4294967295
 80186b6:	e0c8      	b.n	801884a <_svfiprintf_r+0x1c2>
 80186b8:	2340      	movs	r3, #64	; 0x40
 80186ba:	6163      	str	r3, [r4, #20]
 80186bc:	2300      	movs	r3, #0
 80186be:	9309      	str	r3, [sp, #36]	; 0x24
 80186c0:	2320      	movs	r3, #32
 80186c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80186c6:	2330      	movs	r3, #48	; 0x30
 80186c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80186cc:	9503      	str	r5, [sp, #12]
 80186ce:	f04f 0b01 	mov.w	fp, #1
 80186d2:	4637      	mov	r7, r6
 80186d4:	463d      	mov	r5, r7
 80186d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80186da:	b10b      	cbz	r3, 80186e0 <_svfiprintf_r+0x58>
 80186dc:	2b25      	cmp	r3, #37	; 0x25
 80186de:	d13e      	bne.n	801875e <_svfiprintf_r+0xd6>
 80186e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80186e4:	d00b      	beq.n	80186fe <_svfiprintf_r+0x76>
 80186e6:	4653      	mov	r3, sl
 80186e8:	4632      	mov	r2, r6
 80186ea:	4621      	mov	r1, r4
 80186ec:	4640      	mov	r0, r8
 80186ee:	f7ff ff71 	bl	80185d4 <__ssputs_r>
 80186f2:	3001      	adds	r0, #1
 80186f4:	f000 80a4 	beq.w	8018840 <_svfiprintf_r+0x1b8>
 80186f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186fa:	4453      	add	r3, sl
 80186fc:	9309      	str	r3, [sp, #36]	; 0x24
 80186fe:	783b      	ldrb	r3, [r7, #0]
 8018700:	2b00      	cmp	r3, #0
 8018702:	f000 809d 	beq.w	8018840 <_svfiprintf_r+0x1b8>
 8018706:	2300      	movs	r3, #0
 8018708:	f04f 32ff 	mov.w	r2, #4294967295
 801870c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018710:	9304      	str	r3, [sp, #16]
 8018712:	9307      	str	r3, [sp, #28]
 8018714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018718:	931a      	str	r3, [sp, #104]	; 0x68
 801871a:	462f      	mov	r7, r5
 801871c:	2205      	movs	r2, #5
 801871e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018722:	4850      	ldr	r0, [pc, #320]	; (8018864 <_svfiprintf_r+0x1dc>)
 8018724:	f7e7 fde4 	bl	80002f0 <memchr>
 8018728:	9b04      	ldr	r3, [sp, #16]
 801872a:	b9d0      	cbnz	r0, 8018762 <_svfiprintf_r+0xda>
 801872c:	06d9      	lsls	r1, r3, #27
 801872e:	bf44      	itt	mi
 8018730:	2220      	movmi	r2, #32
 8018732:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018736:	071a      	lsls	r2, r3, #28
 8018738:	bf44      	itt	mi
 801873a:	222b      	movmi	r2, #43	; 0x2b
 801873c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018740:	782a      	ldrb	r2, [r5, #0]
 8018742:	2a2a      	cmp	r2, #42	; 0x2a
 8018744:	d015      	beq.n	8018772 <_svfiprintf_r+0xea>
 8018746:	9a07      	ldr	r2, [sp, #28]
 8018748:	462f      	mov	r7, r5
 801874a:	2000      	movs	r0, #0
 801874c:	250a      	movs	r5, #10
 801874e:	4639      	mov	r1, r7
 8018750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018754:	3b30      	subs	r3, #48	; 0x30
 8018756:	2b09      	cmp	r3, #9
 8018758:	d94d      	bls.n	80187f6 <_svfiprintf_r+0x16e>
 801875a:	b1b8      	cbz	r0, 801878c <_svfiprintf_r+0x104>
 801875c:	e00f      	b.n	801877e <_svfiprintf_r+0xf6>
 801875e:	462f      	mov	r7, r5
 8018760:	e7b8      	b.n	80186d4 <_svfiprintf_r+0x4c>
 8018762:	4a40      	ldr	r2, [pc, #256]	; (8018864 <_svfiprintf_r+0x1dc>)
 8018764:	1a80      	subs	r0, r0, r2
 8018766:	fa0b f000 	lsl.w	r0, fp, r0
 801876a:	4318      	orrs	r0, r3
 801876c:	9004      	str	r0, [sp, #16]
 801876e:	463d      	mov	r5, r7
 8018770:	e7d3      	b.n	801871a <_svfiprintf_r+0x92>
 8018772:	9a03      	ldr	r2, [sp, #12]
 8018774:	1d11      	adds	r1, r2, #4
 8018776:	6812      	ldr	r2, [r2, #0]
 8018778:	9103      	str	r1, [sp, #12]
 801877a:	2a00      	cmp	r2, #0
 801877c:	db01      	blt.n	8018782 <_svfiprintf_r+0xfa>
 801877e:	9207      	str	r2, [sp, #28]
 8018780:	e004      	b.n	801878c <_svfiprintf_r+0x104>
 8018782:	4252      	negs	r2, r2
 8018784:	f043 0302 	orr.w	r3, r3, #2
 8018788:	9207      	str	r2, [sp, #28]
 801878a:	9304      	str	r3, [sp, #16]
 801878c:	783b      	ldrb	r3, [r7, #0]
 801878e:	2b2e      	cmp	r3, #46	; 0x2e
 8018790:	d10c      	bne.n	80187ac <_svfiprintf_r+0x124>
 8018792:	787b      	ldrb	r3, [r7, #1]
 8018794:	2b2a      	cmp	r3, #42	; 0x2a
 8018796:	d133      	bne.n	8018800 <_svfiprintf_r+0x178>
 8018798:	9b03      	ldr	r3, [sp, #12]
 801879a:	1d1a      	adds	r2, r3, #4
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	9203      	str	r2, [sp, #12]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	bfb8      	it	lt
 80187a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80187a8:	3702      	adds	r7, #2
 80187aa:	9305      	str	r3, [sp, #20]
 80187ac:	4d2e      	ldr	r5, [pc, #184]	; (8018868 <_svfiprintf_r+0x1e0>)
 80187ae:	7839      	ldrb	r1, [r7, #0]
 80187b0:	2203      	movs	r2, #3
 80187b2:	4628      	mov	r0, r5
 80187b4:	f7e7 fd9c 	bl	80002f0 <memchr>
 80187b8:	b138      	cbz	r0, 80187ca <_svfiprintf_r+0x142>
 80187ba:	2340      	movs	r3, #64	; 0x40
 80187bc:	1b40      	subs	r0, r0, r5
 80187be:	fa03 f000 	lsl.w	r0, r3, r0
 80187c2:	9b04      	ldr	r3, [sp, #16]
 80187c4:	4303      	orrs	r3, r0
 80187c6:	3701      	adds	r7, #1
 80187c8:	9304      	str	r3, [sp, #16]
 80187ca:	7839      	ldrb	r1, [r7, #0]
 80187cc:	4827      	ldr	r0, [pc, #156]	; (801886c <_svfiprintf_r+0x1e4>)
 80187ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80187d2:	2206      	movs	r2, #6
 80187d4:	1c7e      	adds	r6, r7, #1
 80187d6:	f7e7 fd8b 	bl	80002f0 <memchr>
 80187da:	2800      	cmp	r0, #0
 80187dc:	d038      	beq.n	8018850 <_svfiprintf_r+0x1c8>
 80187de:	4b24      	ldr	r3, [pc, #144]	; (8018870 <_svfiprintf_r+0x1e8>)
 80187e0:	bb13      	cbnz	r3, 8018828 <_svfiprintf_r+0x1a0>
 80187e2:	9b03      	ldr	r3, [sp, #12]
 80187e4:	3307      	adds	r3, #7
 80187e6:	f023 0307 	bic.w	r3, r3, #7
 80187ea:	3308      	adds	r3, #8
 80187ec:	9303      	str	r3, [sp, #12]
 80187ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187f0:	444b      	add	r3, r9
 80187f2:	9309      	str	r3, [sp, #36]	; 0x24
 80187f4:	e76d      	b.n	80186d2 <_svfiprintf_r+0x4a>
 80187f6:	fb05 3202 	mla	r2, r5, r2, r3
 80187fa:	2001      	movs	r0, #1
 80187fc:	460f      	mov	r7, r1
 80187fe:	e7a6      	b.n	801874e <_svfiprintf_r+0xc6>
 8018800:	2300      	movs	r3, #0
 8018802:	3701      	adds	r7, #1
 8018804:	9305      	str	r3, [sp, #20]
 8018806:	4619      	mov	r1, r3
 8018808:	250a      	movs	r5, #10
 801880a:	4638      	mov	r0, r7
 801880c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018810:	3a30      	subs	r2, #48	; 0x30
 8018812:	2a09      	cmp	r2, #9
 8018814:	d903      	bls.n	801881e <_svfiprintf_r+0x196>
 8018816:	2b00      	cmp	r3, #0
 8018818:	d0c8      	beq.n	80187ac <_svfiprintf_r+0x124>
 801881a:	9105      	str	r1, [sp, #20]
 801881c:	e7c6      	b.n	80187ac <_svfiprintf_r+0x124>
 801881e:	fb05 2101 	mla	r1, r5, r1, r2
 8018822:	2301      	movs	r3, #1
 8018824:	4607      	mov	r7, r0
 8018826:	e7f0      	b.n	801880a <_svfiprintf_r+0x182>
 8018828:	ab03      	add	r3, sp, #12
 801882a:	9300      	str	r3, [sp, #0]
 801882c:	4622      	mov	r2, r4
 801882e:	4b11      	ldr	r3, [pc, #68]	; (8018874 <_svfiprintf_r+0x1ec>)
 8018830:	a904      	add	r1, sp, #16
 8018832:	4640      	mov	r0, r8
 8018834:	f3af 8000 	nop.w
 8018838:	f1b0 3fff 	cmp.w	r0, #4294967295
 801883c:	4681      	mov	r9, r0
 801883e:	d1d6      	bne.n	80187ee <_svfiprintf_r+0x166>
 8018840:	89a3      	ldrh	r3, [r4, #12]
 8018842:	065b      	lsls	r3, r3, #25
 8018844:	f53f af35 	bmi.w	80186b2 <_svfiprintf_r+0x2a>
 8018848:	9809      	ldr	r0, [sp, #36]	; 0x24
 801884a:	b01d      	add	sp, #116	; 0x74
 801884c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018850:	ab03      	add	r3, sp, #12
 8018852:	9300      	str	r3, [sp, #0]
 8018854:	4622      	mov	r2, r4
 8018856:	4b07      	ldr	r3, [pc, #28]	; (8018874 <_svfiprintf_r+0x1ec>)
 8018858:	a904      	add	r1, sp, #16
 801885a:	4640      	mov	r0, r8
 801885c:	f000 f9c2 	bl	8018be4 <_printf_i>
 8018860:	e7ea      	b.n	8018838 <_svfiprintf_r+0x1b0>
 8018862:	bf00      	nop
 8018864:	08019904 	.word	0x08019904
 8018868:	0801990a 	.word	0x0801990a
 801886c:	0801990e 	.word	0x0801990e
 8018870:	00000000 	.word	0x00000000
 8018874:	080185d5 	.word	0x080185d5

08018878 <__sfputc_r>:
 8018878:	6893      	ldr	r3, [r2, #8]
 801887a:	3b01      	subs	r3, #1
 801887c:	2b00      	cmp	r3, #0
 801887e:	b410      	push	{r4}
 8018880:	6093      	str	r3, [r2, #8]
 8018882:	da08      	bge.n	8018896 <__sfputc_r+0x1e>
 8018884:	6994      	ldr	r4, [r2, #24]
 8018886:	42a3      	cmp	r3, r4
 8018888:	db01      	blt.n	801888e <__sfputc_r+0x16>
 801888a:	290a      	cmp	r1, #10
 801888c:	d103      	bne.n	8018896 <__sfputc_r+0x1e>
 801888e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018892:	f7ff bbff 	b.w	8018094 <__swbuf_r>
 8018896:	6813      	ldr	r3, [r2, #0]
 8018898:	1c58      	adds	r0, r3, #1
 801889a:	6010      	str	r0, [r2, #0]
 801889c:	7019      	strb	r1, [r3, #0]
 801889e:	4608      	mov	r0, r1
 80188a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188a4:	4770      	bx	lr

080188a6 <__sfputs_r>:
 80188a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188a8:	4606      	mov	r6, r0
 80188aa:	460f      	mov	r7, r1
 80188ac:	4614      	mov	r4, r2
 80188ae:	18d5      	adds	r5, r2, r3
 80188b0:	42ac      	cmp	r4, r5
 80188b2:	d101      	bne.n	80188b8 <__sfputs_r+0x12>
 80188b4:	2000      	movs	r0, #0
 80188b6:	e007      	b.n	80188c8 <__sfputs_r+0x22>
 80188b8:	463a      	mov	r2, r7
 80188ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188be:	4630      	mov	r0, r6
 80188c0:	f7ff ffda 	bl	8018878 <__sfputc_r>
 80188c4:	1c43      	adds	r3, r0, #1
 80188c6:	d1f3      	bne.n	80188b0 <__sfputs_r+0xa>
 80188c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080188cc <_vfiprintf_r>:
 80188cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d0:	460c      	mov	r4, r1
 80188d2:	b09d      	sub	sp, #116	; 0x74
 80188d4:	4617      	mov	r7, r2
 80188d6:	461d      	mov	r5, r3
 80188d8:	4606      	mov	r6, r0
 80188da:	b118      	cbz	r0, 80188e4 <_vfiprintf_r+0x18>
 80188dc:	6983      	ldr	r3, [r0, #24]
 80188de:	b90b      	cbnz	r3, 80188e4 <_vfiprintf_r+0x18>
 80188e0:	f7ff fd88 	bl	80183f4 <__sinit>
 80188e4:	4b7c      	ldr	r3, [pc, #496]	; (8018ad8 <_vfiprintf_r+0x20c>)
 80188e6:	429c      	cmp	r4, r3
 80188e8:	d158      	bne.n	801899c <_vfiprintf_r+0xd0>
 80188ea:	6874      	ldr	r4, [r6, #4]
 80188ec:	89a3      	ldrh	r3, [r4, #12]
 80188ee:	0718      	lsls	r0, r3, #28
 80188f0:	d55e      	bpl.n	80189b0 <_vfiprintf_r+0xe4>
 80188f2:	6923      	ldr	r3, [r4, #16]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d05b      	beq.n	80189b0 <_vfiprintf_r+0xe4>
 80188f8:	2300      	movs	r3, #0
 80188fa:	9309      	str	r3, [sp, #36]	; 0x24
 80188fc:	2320      	movs	r3, #32
 80188fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018902:	2330      	movs	r3, #48	; 0x30
 8018904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018908:	9503      	str	r5, [sp, #12]
 801890a:	f04f 0b01 	mov.w	fp, #1
 801890e:	46b8      	mov	r8, r7
 8018910:	4645      	mov	r5, r8
 8018912:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018916:	b10b      	cbz	r3, 801891c <_vfiprintf_r+0x50>
 8018918:	2b25      	cmp	r3, #37	; 0x25
 801891a:	d154      	bne.n	80189c6 <_vfiprintf_r+0xfa>
 801891c:	ebb8 0a07 	subs.w	sl, r8, r7
 8018920:	d00b      	beq.n	801893a <_vfiprintf_r+0x6e>
 8018922:	4653      	mov	r3, sl
 8018924:	463a      	mov	r2, r7
 8018926:	4621      	mov	r1, r4
 8018928:	4630      	mov	r0, r6
 801892a:	f7ff ffbc 	bl	80188a6 <__sfputs_r>
 801892e:	3001      	adds	r0, #1
 8018930:	f000 80c2 	beq.w	8018ab8 <_vfiprintf_r+0x1ec>
 8018934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018936:	4453      	add	r3, sl
 8018938:	9309      	str	r3, [sp, #36]	; 0x24
 801893a:	f898 3000 	ldrb.w	r3, [r8]
 801893e:	2b00      	cmp	r3, #0
 8018940:	f000 80ba 	beq.w	8018ab8 <_vfiprintf_r+0x1ec>
 8018944:	2300      	movs	r3, #0
 8018946:	f04f 32ff 	mov.w	r2, #4294967295
 801894a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801894e:	9304      	str	r3, [sp, #16]
 8018950:	9307      	str	r3, [sp, #28]
 8018952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018956:	931a      	str	r3, [sp, #104]	; 0x68
 8018958:	46a8      	mov	r8, r5
 801895a:	2205      	movs	r2, #5
 801895c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018960:	485e      	ldr	r0, [pc, #376]	; (8018adc <_vfiprintf_r+0x210>)
 8018962:	f7e7 fcc5 	bl	80002f0 <memchr>
 8018966:	9b04      	ldr	r3, [sp, #16]
 8018968:	bb78      	cbnz	r0, 80189ca <_vfiprintf_r+0xfe>
 801896a:	06d9      	lsls	r1, r3, #27
 801896c:	bf44      	itt	mi
 801896e:	2220      	movmi	r2, #32
 8018970:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018974:	071a      	lsls	r2, r3, #28
 8018976:	bf44      	itt	mi
 8018978:	222b      	movmi	r2, #43	; 0x2b
 801897a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801897e:	782a      	ldrb	r2, [r5, #0]
 8018980:	2a2a      	cmp	r2, #42	; 0x2a
 8018982:	d02a      	beq.n	80189da <_vfiprintf_r+0x10e>
 8018984:	9a07      	ldr	r2, [sp, #28]
 8018986:	46a8      	mov	r8, r5
 8018988:	2000      	movs	r0, #0
 801898a:	250a      	movs	r5, #10
 801898c:	4641      	mov	r1, r8
 801898e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018992:	3b30      	subs	r3, #48	; 0x30
 8018994:	2b09      	cmp	r3, #9
 8018996:	d969      	bls.n	8018a6c <_vfiprintf_r+0x1a0>
 8018998:	b360      	cbz	r0, 80189f4 <_vfiprintf_r+0x128>
 801899a:	e024      	b.n	80189e6 <_vfiprintf_r+0x11a>
 801899c:	4b50      	ldr	r3, [pc, #320]	; (8018ae0 <_vfiprintf_r+0x214>)
 801899e:	429c      	cmp	r4, r3
 80189a0:	d101      	bne.n	80189a6 <_vfiprintf_r+0xda>
 80189a2:	68b4      	ldr	r4, [r6, #8]
 80189a4:	e7a2      	b.n	80188ec <_vfiprintf_r+0x20>
 80189a6:	4b4f      	ldr	r3, [pc, #316]	; (8018ae4 <_vfiprintf_r+0x218>)
 80189a8:	429c      	cmp	r4, r3
 80189aa:	bf08      	it	eq
 80189ac:	68f4      	ldreq	r4, [r6, #12]
 80189ae:	e79d      	b.n	80188ec <_vfiprintf_r+0x20>
 80189b0:	4621      	mov	r1, r4
 80189b2:	4630      	mov	r0, r6
 80189b4:	f7ff fbc0 	bl	8018138 <__swsetup_r>
 80189b8:	2800      	cmp	r0, #0
 80189ba:	d09d      	beq.n	80188f8 <_vfiprintf_r+0x2c>
 80189bc:	f04f 30ff 	mov.w	r0, #4294967295
 80189c0:	b01d      	add	sp, #116	; 0x74
 80189c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189c6:	46a8      	mov	r8, r5
 80189c8:	e7a2      	b.n	8018910 <_vfiprintf_r+0x44>
 80189ca:	4a44      	ldr	r2, [pc, #272]	; (8018adc <_vfiprintf_r+0x210>)
 80189cc:	1a80      	subs	r0, r0, r2
 80189ce:	fa0b f000 	lsl.w	r0, fp, r0
 80189d2:	4318      	orrs	r0, r3
 80189d4:	9004      	str	r0, [sp, #16]
 80189d6:	4645      	mov	r5, r8
 80189d8:	e7be      	b.n	8018958 <_vfiprintf_r+0x8c>
 80189da:	9a03      	ldr	r2, [sp, #12]
 80189dc:	1d11      	adds	r1, r2, #4
 80189de:	6812      	ldr	r2, [r2, #0]
 80189e0:	9103      	str	r1, [sp, #12]
 80189e2:	2a00      	cmp	r2, #0
 80189e4:	db01      	blt.n	80189ea <_vfiprintf_r+0x11e>
 80189e6:	9207      	str	r2, [sp, #28]
 80189e8:	e004      	b.n	80189f4 <_vfiprintf_r+0x128>
 80189ea:	4252      	negs	r2, r2
 80189ec:	f043 0302 	orr.w	r3, r3, #2
 80189f0:	9207      	str	r2, [sp, #28]
 80189f2:	9304      	str	r3, [sp, #16]
 80189f4:	f898 3000 	ldrb.w	r3, [r8]
 80189f8:	2b2e      	cmp	r3, #46	; 0x2e
 80189fa:	d10e      	bne.n	8018a1a <_vfiprintf_r+0x14e>
 80189fc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018a00:	2b2a      	cmp	r3, #42	; 0x2a
 8018a02:	d138      	bne.n	8018a76 <_vfiprintf_r+0x1aa>
 8018a04:	9b03      	ldr	r3, [sp, #12]
 8018a06:	1d1a      	adds	r2, r3, #4
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	9203      	str	r2, [sp, #12]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	bfb8      	it	lt
 8018a10:	f04f 33ff 	movlt.w	r3, #4294967295
 8018a14:	f108 0802 	add.w	r8, r8, #2
 8018a18:	9305      	str	r3, [sp, #20]
 8018a1a:	4d33      	ldr	r5, [pc, #204]	; (8018ae8 <_vfiprintf_r+0x21c>)
 8018a1c:	f898 1000 	ldrb.w	r1, [r8]
 8018a20:	2203      	movs	r2, #3
 8018a22:	4628      	mov	r0, r5
 8018a24:	f7e7 fc64 	bl	80002f0 <memchr>
 8018a28:	b140      	cbz	r0, 8018a3c <_vfiprintf_r+0x170>
 8018a2a:	2340      	movs	r3, #64	; 0x40
 8018a2c:	1b40      	subs	r0, r0, r5
 8018a2e:	fa03 f000 	lsl.w	r0, r3, r0
 8018a32:	9b04      	ldr	r3, [sp, #16]
 8018a34:	4303      	orrs	r3, r0
 8018a36:	f108 0801 	add.w	r8, r8, #1
 8018a3a:	9304      	str	r3, [sp, #16]
 8018a3c:	f898 1000 	ldrb.w	r1, [r8]
 8018a40:	482a      	ldr	r0, [pc, #168]	; (8018aec <_vfiprintf_r+0x220>)
 8018a42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018a46:	2206      	movs	r2, #6
 8018a48:	f108 0701 	add.w	r7, r8, #1
 8018a4c:	f7e7 fc50 	bl	80002f0 <memchr>
 8018a50:	2800      	cmp	r0, #0
 8018a52:	d037      	beq.n	8018ac4 <_vfiprintf_r+0x1f8>
 8018a54:	4b26      	ldr	r3, [pc, #152]	; (8018af0 <_vfiprintf_r+0x224>)
 8018a56:	bb1b      	cbnz	r3, 8018aa0 <_vfiprintf_r+0x1d4>
 8018a58:	9b03      	ldr	r3, [sp, #12]
 8018a5a:	3307      	adds	r3, #7
 8018a5c:	f023 0307 	bic.w	r3, r3, #7
 8018a60:	3308      	adds	r3, #8
 8018a62:	9303      	str	r3, [sp, #12]
 8018a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a66:	444b      	add	r3, r9
 8018a68:	9309      	str	r3, [sp, #36]	; 0x24
 8018a6a:	e750      	b.n	801890e <_vfiprintf_r+0x42>
 8018a6c:	fb05 3202 	mla	r2, r5, r2, r3
 8018a70:	2001      	movs	r0, #1
 8018a72:	4688      	mov	r8, r1
 8018a74:	e78a      	b.n	801898c <_vfiprintf_r+0xc0>
 8018a76:	2300      	movs	r3, #0
 8018a78:	f108 0801 	add.w	r8, r8, #1
 8018a7c:	9305      	str	r3, [sp, #20]
 8018a7e:	4619      	mov	r1, r3
 8018a80:	250a      	movs	r5, #10
 8018a82:	4640      	mov	r0, r8
 8018a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a88:	3a30      	subs	r2, #48	; 0x30
 8018a8a:	2a09      	cmp	r2, #9
 8018a8c:	d903      	bls.n	8018a96 <_vfiprintf_r+0x1ca>
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d0c3      	beq.n	8018a1a <_vfiprintf_r+0x14e>
 8018a92:	9105      	str	r1, [sp, #20]
 8018a94:	e7c1      	b.n	8018a1a <_vfiprintf_r+0x14e>
 8018a96:	fb05 2101 	mla	r1, r5, r1, r2
 8018a9a:	2301      	movs	r3, #1
 8018a9c:	4680      	mov	r8, r0
 8018a9e:	e7f0      	b.n	8018a82 <_vfiprintf_r+0x1b6>
 8018aa0:	ab03      	add	r3, sp, #12
 8018aa2:	9300      	str	r3, [sp, #0]
 8018aa4:	4622      	mov	r2, r4
 8018aa6:	4b13      	ldr	r3, [pc, #76]	; (8018af4 <_vfiprintf_r+0x228>)
 8018aa8:	a904      	add	r1, sp, #16
 8018aaa:	4630      	mov	r0, r6
 8018aac:	f3af 8000 	nop.w
 8018ab0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018ab4:	4681      	mov	r9, r0
 8018ab6:	d1d5      	bne.n	8018a64 <_vfiprintf_r+0x198>
 8018ab8:	89a3      	ldrh	r3, [r4, #12]
 8018aba:	065b      	lsls	r3, r3, #25
 8018abc:	f53f af7e 	bmi.w	80189bc <_vfiprintf_r+0xf0>
 8018ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018ac2:	e77d      	b.n	80189c0 <_vfiprintf_r+0xf4>
 8018ac4:	ab03      	add	r3, sp, #12
 8018ac6:	9300      	str	r3, [sp, #0]
 8018ac8:	4622      	mov	r2, r4
 8018aca:	4b0a      	ldr	r3, [pc, #40]	; (8018af4 <_vfiprintf_r+0x228>)
 8018acc:	a904      	add	r1, sp, #16
 8018ace:	4630      	mov	r0, r6
 8018ad0:	f000 f888 	bl	8018be4 <_printf_i>
 8018ad4:	e7ec      	b.n	8018ab0 <_vfiprintf_r+0x1e4>
 8018ad6:	bf00      	nop
 8018ad8:	080198c4 	.word	0x080198c4
 8018adc:	08019904 	.word	0x08019904
 8018ae0:	080198e4 	.word	0x080198e4
 8018ae4:	080198a4 	.word	0x080198a4
 8018ae8:	0801990a 	.word	0x0801990a
 8018aec:	0801990e 	.word	0x0801990e
 8018af0:	00000000 	.word	0x00000000
 8018af4:	080188a7 	.word	0x080188a7

08018af8 <_printf_common>:
 8018af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018afc:	4691      	mov	r9, r2
 8018afe:	461f      	mov	r7, r3
 8018b00:	688a      	ldr	r2, [r1, #8]
 8018b02:	690b      	ldr	r3, [r1, #16]
 8018b04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018b08:	4293      	cmp	r3, r2
 8018b0a:	bfb8      	it	lt
 8018b0c:	4613      	movlt	r3, r2
 8018b0e:	f8c9 3000 	str.w	r3, [r9]
 8018b12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018b16:	4606      	mov	r6, r0
 8018b18:	460c      	mov	r4, r1
 8018b1a:	b112      	cbz	r2, 8018b22 <_printf_common+0x2a>
 8018b1c:	3301      	adds	r3, #1
 8018b1e:	f8c9 3000 	str.w	r3, [r9]
 8018b22:	6823      	ldr	r3, [r4, #0]
 8018b24:	0699      	lsls	r1, r3, #26
 8018b26:	bf42      	ittt	mi
 8018b28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018b2c:	3302      	addmi	r3, #2
 8018b2e:	f8c9 3000 	strmi.w	r3, [r9]
 8018b32:	6825      	ldr	r5, [r4, #0]
 8018b34:	f015 0506 	ands.w	r5, r5, #6
 8018b38:	d107      	bne.n	8018b4a <_printf_common+0x52>
 8018b3a:	f104 0a19 	add.w	sl, r4, #25
 8018b3e:	68e3      	ldr	r3, [r4, #12]
 8018b40:	f8d9 2000 	ldr.w	r2, [r9]
 8018b44:	1a9b      	subs	r3, r3, r2
 8018b46:	42ab      	cmp	r3, r5
 8018b48:	dc28      	bgt.n	8018b9c <_printf_common+0xa4>
 8018b4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018b4e:	6822      	ldr	r2, [r4, #0]
 8018b50:	3300      	adds	r3, #0
 8018b52:	bf18      	it	ne
 8018b54:	2301      	movne	r3, #1
 8018b56:	0692      	lsls	r2, r2, #26
 8018b58:	d42d      	bmi.n	8018bb6 <_printf_common+0xbe>
 8018b5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018b5e:	4639      	mov	r1, r7
 8018b60:	4630      	mov	r0, r6
 8018b62:	47c0      	blx	r8
 8018b64:	3001      	adds	r0, #1
 8018b66:	d020      	beq.n	8018baa <_printf_common+0xb2>
 8018b68:	6823      	ldr	r3, [r4, #0]
 8018b6a:	68e5      	ldr	r5, [r4, #12]
 8018b6c:	f8d9 2000 	ldr.w	r2, [r9]
 8018b70:	f003 0306 	and.w	r3, r3, #6
 8018b74:	2b04      	cmp	r3, #4
 8018b76:	bf08      	it	eq
 8018b78:	1aad      	subeq	r5, r5, r2
 8018b7a:	68a3      	ldr	r3, [r4, #8]
 8018b7c:	6922      	ldr	r2, [r4, #16]
 8018b7e:	bf0c      	ite	eq
 8018b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018b84:	2500      	movne	r5, #0
 8018b86:	4293      	cmp	r3, r2
 8018b88:	bfc4      	itt	gt
 8018b8a:	1a9b      	subgt	r3, r3, r2
 8018b8c:	18ed      	addgt	r5, r5, r3
 8018b8e:	f04f 0900 	mov.w	r9, #0
 8018b92:	341a      	adds	r4, #26
 8018b94:	454d      	cmp	r5, r9
 8018b96:	d11a      	bne.n	8018bce <_printf_common+0xd6>
 8018b98:	2000      	movs	r0, #0
 8018b9a:	e008      	b.n	8018bae <_printf_common+0xb6>
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	4652      	mov	r2, sl
 8018ba0:	4639      	mov	r1, r7
 8018ba2:	4630      	mov	r0, r6
 8018ba4:	47c0      	blx	r8
 8018ba6:	3001      	adds	r0, #1
 8018ba8:	d103      	bne.n	8018bb2 <_printf_common+0xba>
 8018baa:	f04f 30ff 	mov.w	r0, #4294967295
 8018bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bb2:	3501      	adds	r5, #1
 8018bb4:	e7c3      	b.n	8018b3e <_printf_common+0x46>
 8018bb6:	18e1      	adds	r1, r4, r3
 8018bb8:	1c5a      	adds	r2, r3, #1
 8018bba:	2030      	movs	r0, #48	; 0x30
 8018bbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018bc0:	4422      	add	r2, r4
 8018bc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018bc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018bca:	3302      	adds	r3, #2
 8018bcc:	e7c5      	b.n	8018b5a <_printf_common+0x62>
 8018bce:	2301      	movs	r3, #1
 8018bd0:	4622      	mov	r2, r4
 8018bd2:	4639      	mov	r1, r7
 8018bd4:	4630      	mov	r0, r6
 8018bd6:	47c0      	blx	r8
 8018bd8:	3001      	adds	r0, #1
 8018bda:	d0e6      	beq.n	8018baa <_printf_common+0xb2>
 8018bdc:	f109 0901 	add.w	r9, r9, #1
 8018be0:	e7d8      	b.n	8018b94 <_printf_common+0x9c>
	...

08018be4 <_printf_i>:
 8018be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018be8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018bec:	460c      	mov	r4, r1
 8018bee:	7e09      	ldrb	r1, [r1, #24]
 8018bf0:	b085      	sub	sp, #20
 8018bf2:	296e      	cmp	r1, #110	; 0x6e
 8018bf4:	4617      	mov	r7, r2
 8018bf6:	4606      	mov	r6, r0
 8018bf8:	4698      	mov	r8, r3
 8018bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018bfc:	f000 80b3 	beq.w	8018d66 <_printf_i+0x182>
 8018c00:	d822      	bhi.n	8018c48 <_printf_i+0x64>
 8018c02:	2963      	cmp	r1, #99	; 0x63
 8018c04:	d036      	beq.n	8018c74 <_printf_i+0x90>
 8018c06:	d80a      	bhi.n	8018c1e <_printf_i+0x3a>
 8018c08:	2900      	cmp	r1, #0
 8018c0a:	f000 80b9 	beq.w	8018d80 <_printf_i+0x19c>
 8018c0e:	2958      	cmp	r1, #88	; 0x58
 8018c10:	f000 8083 	beq.w	8018d1a <_printf_i+0x136>
 8018c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018c18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018c1c:	e032      	b.n	8018c84 <_printf_i+0xa0>
 8018c1e:	2964      	cmp	r1, #100	; 0x64
 8018c20:	d001      	beq.n	8018c26 <_printf_i+0x42>
 8018c22:	2969      	cmp	r1, #105	; 0x69
 8018c24:	d1f6      	bne.n	8018c14 <_printf_i+0x30>
 8018c26:	6820      	ldr	r0, [r4, #0]
 8018c28:	6813      	ldr	r3, [r2, #0]
 8018c2a:	0605      	lsls	r5, r0, #24
 8018c2c:	f103 0104 	add.w	r1, r3, #4
 8018c30:	d52a      	bpl.n	8018c88 <_printf_i+0xa4>
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	6011      	str	r1, [r2, #0]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	da03      	bge.n	8018c42 <_printf_i+0x5e>
 8018c3a:	222d      	movs	r2, #45	; 0x2d
 8018c3c:	425b      	negs	r3, r3
 8018c3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018c42:	486f      	ldr	r0, [pc, #444]	; (8018e00 <_printf_i+0x21c>)
 8018c44:	220a      	movs	r2, #10
 8018c46:	e039      	b.n	8018cbc <_printf_i+0xd8>
 8018c48:	2973      	cmp	r1, #115	; 0x73
 8018c4a:	f000 809d 	beq.w	8018d88 <_printf_i+0x1a4>
 8018c4e:	d808      	bhi.n	8018c62 <_printf_i+0x7e>
 8018c50:	296f      	cmp	r1, #111	; 0x6f
 8018c52:	d020      	beq.n	8018c96 <_printf_i+0xb2>
 8018c54:	2970      	cmp	r1, #112	; 0x70
 8018c56:	d1dd      	bne.n	8018c14 <_printf_i+0x30>
 8018c58:	6823      	ldr	r3, [r4, #0]
 8018c5a:	f043 0320 	orr.w	r3, r3, #32
 8018c5e:	6023      	str	r3, [r4, #0]
 8018c60:	e003      	b.n	8018c6a <_printf_i+0x86>
 8018c62:	2975      	cmp	r1, #117	; 0x75
 8018c64:	d017      	beq.n	8018c96 <_printf_i+0xb2>
 8018c66:	2978      	cmp	r1, #120	; 0x78
 8018c68:	d1d4      	bne.n	8018c14 <_printf_i+0x30>
 8018c6a:	2378      	movs	r3, #120	; 0x78
 8018c6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018c70:	4864      	ldr	r0, [pc, #400]	; (8018e04 <_printf_i+0x220>)
 8018c72:	e055      	b.n	8018d20 <_printf_i+0x13c>
 8018c74:	6813      	ldr	r3, [r2, #0]
 8018c76:	1d19      	adds	r1, r3, #4
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	6011      	str	r1, [r2, #0]
 8018c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018c84:	2301      	movs	r3, #1
 8018c86:	e08c      	b.n	8018da2 <_printf_i+0x1be>
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	6011      	str	r1, [r2, #0]
 8018c8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018c90:	bf18      	it	ne
 8018c92:	b21b      	sxthne	r3, r3
 8018c94:	e7cf      	b.n	8018c36 <_printf_i+0x52>
 8018c96:	6813      	ldr	r3, [r2, #0]
 8018c98:	6825      	ldr	r5, [r4, #0]
 8018c9a:	1d18      	adds	r0, r3, #4
 8018c9c:	6010      	str	r0, [r2, #0]
 8018c9e:	0628      	lsls	r0, r5, #24
 8018ca0:	d501      	bpl.n	8018ca6 <_printf_i+0xc2>
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	e002      	b.n	8018cac <_printf_i+0xc8>
 8018ca6:	0668      	lsls	r0, r5, #25
 8018ca8:	d5fb      	bpl.n	8018ca2 <_printf_i+0xbe>
 8018caa:	881b      	ldrh	r3, [r3, #0]
 8018cac:	4854      	ldr	r0, [pc, #336]	; (8018e00 <_printf_i+0x21c>)
 8018cae:	296f      	cmp	r1, #111	; 0x6f
 8018cb0:	bf14      	ite	ne
 8018cb2:	220a      	movne	r2, #10
 8018cb4:	2208      	moveq	r2, #8
 8018cb6:	2100      	movs	r1, #0
 8018cb8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018cbc:	6865      	ldr	r5, [r4, #4]
 8018cbe:	60a5      	str	r5, [r4, #8]
 8018cc0:	2d00      	cmp	r5, #0
 8018cc2:	f2c0 8095 	blt.w	8018df0 <_printf_i+0x20c>
 8018cc6:	6821      	ldr	r1, [r4, #0]
 8018cc8:	f021 0104 	bic.w	r1, r1, #4
 8018ccc:	6021      	str	r1, [r4, #0]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d13d      	bne.n	8018d4e <_printf_i+0x16a>
 8018cd2:	2d00      	cmp	r5, #0
 8018cd4:	f040 808e 	bne.w	8018df4 <_printf_i+0x210>
 8018cd8:	4665      	mov	r5, ip
 8018cda:	2a08      	cmp	r2, #8
 8018cdc:	d10b      	bne.n	8018cf6 <_printf_i+0x112>
 8018cde:	6823      	ldr	r3, [r4, #0]
 8018ce0:	07db      	lsls	r3, r3, #31
 8018ce2:	d508      	bpl.n	8018cf6 <_printf_i+0x112>
 8018ce4:	6923      	ldr	r3, [r4, #16]
 8018ce6:	6862      	ldr	r2, [r4, #4]
 8018ce8:	429a      	cmp	r2, r3
 8018cea:	bfde      	ittt	le
 8018cec:	2330      	movle	r3, #48	; 0x30
 8018cee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018cf2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018cf6:	ebac 0305 	sub.w	r3, ip, r5
 8018cfa:	6123      	str	r3, [r4, #16]
 8018cfc:	f8cd 8000 	str.w	r8, [sp]
 8018d00:	463b      	mov	r3, r7
 8018d02:	aa03      	add	r2, sp, #12
 8018d04:	4621      	mov	r1, r4
 8018d06:	4630      	mov	r0, r6
 8018d08:	f7ff fef6 	bl	8018af8 <_printf_common>
 8018d0c:	3001      	adds	r0, #1
 8018d0e:	d14d      	bne.n	8018dac <_printf_i+0x1c8>
 8018d10:	f04f 30ff 	mov.w	r0, #4294967295
 8018d14:	b005      	add	sp, #20
 8018d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d1a:	4839      	ldr	r0, [pc, #228]	; (8018e00 <_printf_i+0x21c>)
 8018d1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018d20:	6813      	ldr	r3, [r2, #0]
 8018d22:	6821      	ldr	r1, [r4, #0]
 8018d24:	1d1d      	adds	r5, r3, #4
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	6015      	str	r5, [r2, #0]
 8018d2a:	060a      	lsls	r2, r1, #24
 8018d2c:	d50b      	bpl.n	8018d46 <_printf_i+0x162>
 8018d2e:	07ca      	lsls	r2, r1, #31
 8018d30:	bf44      	itt	mi
 8018d32:	f041 0120 	orrmi.w	r1, r1, #32
 8018d36:	6021      	strmi	r1, [r4, #0]
 8018d38:	b91b      	cbnz	r3, 8018d42 <_printf_i+0x15e>
 8018d3a:	6822      	ldr	r2, [r4, #0]
 8018d3c:	f022 0220 	bic.w	r2, r2, #32
 8018d40:	6022      	str	r2, [r4, #0]
 8018d42:	2210      	movs	r2, #16
 8018d44:	e7b7      	b.n	8018cb6 <_printf_i+0xd2>
 8018d46:	064d      	lsls	r5, r1, #25
 8018d48:	bf48      	it	mi
 8018d4a:	b29b      	uxthmi	r3, r3
 8018d4c:	e7ef      	b.n	8018d2e <_printf_i+0x14a>
 8018d4e:	4665      	mov	r5, ip
 8018d50:	fbb3 f1f2 	udiv	r1, r3, r2
 8018d54:	fb02 3311 	mls	r3, r2, r1, r3
 8018d58:	5cc3      	ldrb	r3, [r0, r3]
 8018d5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018d5e:	460b      	mov	r3, r1
 8018d60:	2900      	cmp	r1, #0
 8018d62:	d1f5      	bne.n	8018d50 <_printf_i+0x16c>
 8018d64:	e7b9      	b.n	8018cda <_printf_i+0xf6>
 8018d66:	6813      	ldr	r3, [r2, #0]
 8018d68:	6825      	ldr	r5, [r4, #0]
 8018d6a:	6961      	ldr	r1, [r4, #20]
 8018d6c:	1d18      	adds	r0, r3, #4
 8018d6e:	6010      	str	r0, [r2, #0]
 8018d70:	0628      	lsls	r0, r5, #24
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	d501      	bpl.n	8018d7a <_printf_i+0x196>
 8018d76:	6019      	str	r1, [r3, #0]
 8018d78:	e002      	b.n	8018d80 <_printf_i+0x19c>
 8018d7a:	066a      	lsls	r2, r5, #25
 8018d7c:	d5fb      	bpl.n	8018d76 <_printf_i+0x192>
 8018d7e:	8019      	strh	r1, [r3, #0]
 8018d80:	2300      	movs	r3, #0
 8018d82:	6123      	str	r3, [r4, #16]
 8018d84:	4665      	mov	r5, ip
 8018d86:	e7b9      	b.n	8018cfc <_printf_i+0x118>
 8018d88:	6813      	ldr	r3, [r2, #0]
 8018d8a:	1d19      	adds	r1, r3, #4
 8018d8c:	6011      	str	r1, [r2, #0]
 8018d8e:	681d      	ldr	r5, [r3, #0]
 8018d90:	6862      	ldr	r2, [r4, #4]
 8018d92:	2100      	movs	r1, #0
 8018d94:	4628      	mov	r0, r5
 8018d96:	f7e7 faab 	bl	80002f0 <memchr>
 8018d9a:	b108      	cbz	r0, 8018da0 <_printf_i+0x1bc>
 8018d9c:	1b40      	subs	r0, r0, r5
 8018d9e:	6060      	str	r0, [r4, #4]
 8018da0:	6863      	ldr	r3, [r4, #4]
 8018da2:	6123      	str	r3, [r4, #16]
 8018da4:	2300      	movs	r3, #0
 8018da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018daa:	e7a7      	b.n	8018cfc <_printf_i+0x118>
 8018dac:	6923      	ldr	r3, [r4, #16]
 8018dae:	462a      	mov	r2, r5
 8018db0:	4639      	mov	r1, r7
 8018db2:	4630      	mov	r0, r6
 8018db4:	47c0      	blx	r8
 8018db6:	3001      	adds	r0, #1
 8018db8:	d0aa      	beq.n	8018d10 <_printf_i+0x12c>
 8018dba:	6823      	ldr	r3, [r4, #0]
 8018dbc:	079b      	lsls	r3, r3, #30
 8018dbe:	d413      	bmi.n	8018de8 <_printf_i+0x204>
 8018dc0:	68e0      	ldr	r0, [r4, #12]
 8018dc2:	9b03      	ldr	r3, [sp, #12]
 8018dc4:	4298      	cmp	r0, r3
 8018dc6:	bfb8      	it	lt
 8018dc8:	4618      	movlt	r0, r3
 8018dca:	e7a3      	b.n	8018d14 <_printf_i+0x130>
 8018dcc:	2301      	movs	r3, #1
 8018dce:	464a      	mov	r2, r9
 8018dd0:	4639      	mov	r1, r7
 8018dd2:	4630      	mov	r0, r6
 8018dd4:	47c0      	blx	r8
 8018dd6:	3001      	adds	r0, #1
 8018dd8:	d09a      	beq.n	8018d10 <_printf_i+0x12c>
 8018dda:	3501      	adds	r5, #1
 8018ddc:	68e3      	ldr	r3, [r4, #12]
 8018dde:	9a03      	ldr	r2, [sp, #12]
 8018de0:	1a9b      	subs	r3, r3, r2
 8018de2:	42ab      	cmp	r3, r5
 8018de4:	dcf2      	bgt.n	8018dcc <_printf_i+0x1e8>
 8018de6:	e7eb      	b.n	8018dc0 <_printf_i+0x1dc>
 8018de8:	2500      	movs	r5, #0
 8018dea:	f104 0919 	add.w	r9, r4, #25
 8018dee:	e7f5      	b.n	8018ddc <_printf_i+0x1f8>
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d1ac      	bne.n	8018d4e <_printf_i+0x16a>
 8018df4:	7803      	ldrb	r3, [r0, #0]
 8018df6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018dfa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018dfe:	e76c      	b.n	8018cda <_printf_i+0xf6>
 8018e00:	08019915 	.word	0x08019915
 8018e04:	08019926 	.word	0x08019926

08018e08 <__sread>:
 8018e08:	b510      	push	{r4, lr}
 8018e0a:	460c      	mov	r4, r1
 8018e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e10:	f000 f8d4 	bl	8018fbc <_read_r>
 8018e14:	2800      	cmp	r0, #0
 8018e16:	bfab      	itete	ge
 8018e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8018e1c:	181b      	addge	r3, r3, r0
 8018e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018e22:	bfac      	ite	ge
 8018e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8018e26:	81a3      	strhlt	r3, [r4, #12]
 8018e28:	bd10      	pop	{r4, pc}

08018e2a <__swrite>:
 8018e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e2e:	461f      	mov	r7, r3
 8018e30:	898b      	ldrh	r3, [r1, #12]
 8018e32:	05db      	lsls	r3, r3, #23
 8018e34:	4605      	mov	r5, r0
 8018e36:	460c      	mov	r4, r1
 8018e38:	4616      	mov	r6, r2
 8018e3a:	d505      	bpl.n	8018e48 <__swrite+0x1e>
 8018e3c:	2302      	movs	r3, #2
 8018e3e:	2200      	movs	r2, #0
 8018e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e44:	f000 f868 	bl	8018f18 <_lseek_r>
 8018e48:	89a3      	ldrh	r3, [r4, #12]
 8018e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018e52:	81a3      	strh	r3, [r4, #12]
 8018e54:	4632      	mov	r2, r6
 8018e56:	463b      	mov	r3, r7
 8018e58:	4628      	mov	r0, r5
 8018e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e5e:	f000 b817 	b.w	8018e90 <_write_r>

08018e62 <__sseek>:
 8018e62:	b510      	push	{r4, lr}
 8018e64:	460c      	mov	r4, r1
 8018e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e6a:	f000 f855 	bl	8018f18 <_lseek_r>
 8018e6e:	1c43      	adds	r3, r0, #1
 8018e70:	89a3      	ldrh	r3, [r4, #12]
 8018e72:	bf15      	itete	ne
 8018e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8018e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018e7e:	81a3      	strheq	r3, [r4, #12]
 8018e80:	bf18      	it	ne
 8018e82:	81a3      	strhne	r3, [r4, #12]
 8018e84:	bd10      	pop	{r4, pc}

08018e86 <__sclose>:
 8018e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e8a:	f000 b813 	b.w	8018eb4 <_close_r>
	...

08018e90 <_write_r>:
 8018e90:	b538      	push	{r3, r4, r5, lr}
 8018e92:	4c07      	ldr	r4, [pc, #28]	; (8018eb0 <_write_r+0x20>)
 8018e94:	4605      	mov	r5, r0
 8018e96:	4608      	mov	r0, r1
 8018e98:	4611      	mov	r1, r2
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	6022      	str	r2, [r4, #0]
 8018e9e:	461a      	mov	r2, r3
 8018ea0:	f7e9 fc13 	bl	80026ca <_write>
 8018ea4:	1c43      	adds	r3, r0, #1
 8018ea6:	d102      	bne.n	8018eae <_write_r+0x1e>
 8018ea8:	6823      	ldr	r3, [r4, #0]
 8018eaa:	b103      	cbz	r3, 8018eae <_write_r+0x1e>
 8018eac:	602b      	str	r3, [r5, #0]
 8018eae:	bd38      	pop	{r3, r4, r5, pc}
 8018eb0:	24002454 	.word	0x24002454

08018eb4 <_close_r>:
 8018eb4:	b538      	push	{r3, r4, r5, lr}
 8018eb6:	4c06      	ldr	r4, [pc, #24]	; (8018ed0 <_close_r+0x1c>)
 8018eb8:	2300      	movs	r3, #0
 8018eba:	4605      	mov	r5, r0
 8018ebc:	4608      	mov	r0, r1
 8018ebe:	6023      	str	r3, [r4, #0]
 8018ec0:	f7e9 ff13 	bl	8002cea <_close>
 8018ec4:	1c43      	adds	r3, r0, #1
 8018ec6:	d102      	bne.n	8018ece <_close_r+0x1a>
 8018ec8:	6823      	ldr	r3, [r4, #0]
 8018eca:	b103      	cbz	r3, 8018ece <_close_r+0x1a>
 8018ecc:	602b      	str	r3, [r5, #0]
 8018ece:	bd38      	pop	{r3, r4, r5, pc}
 8018ed0:	24002454 	.word	0x24002454

08018ed4 <_fstat_r>:
 8018ed4:	b538      	push	{r3, r4, r5, lr}
 8018ed6:	4c07      	ldr	r4, [pc, #28]	; (8018ef4 <_fstat_r+0x20>)
 8018ed8:	2300      	movs	r3, #0
 8018eda:	4605      	mov	r5, r0
 8018edc:	4608      	mov	r0, r1
 8018ede:	4611      	mov	r1, r2
 8018ee0:	6023      	str	r3, [r4, #0]
 8018ee2:	f7e9 ff0e 	bl	8002d02 <_fstat>
 8018ee6:	1c43      	adds	r3, r0, #1
 8018ee8:	d102      	bne.n	8018ef0 <_fstat_r+0x1c>
 8018eea:	6823      	ldr	r3, [r4, #0]
 8018eec:	b103      	cbz	r3, 8018ef0 <_fstat_r+0x1c>
 8018eee:	602b      	str	r3, [r5, #0]
 8018ef0:	bd38      	pop	{r3, r4, r5, pc}
 8018ef2:	bf00      	nop
 8018ef4:	24002454 	.word	0x24002454

08018ef8 <_isatty_r>:
 8018ef8:	b538      	push	{r3, r4, r5, lr}
 8018efa:	4c06      	ldr	r4, [pc, #24]	; (8018f14 <_isatty_r+0x1c>)
 8018efc:	2300      	movs	r3, #0
 8018efe:	4605      	mov	r5, r0
 8018f00:	4608      	mov	r0, r1
 8018f02:	6023      	str	r3, [r4, #0]
 8018f04:	f7e9 ff0d 	bl	8002d22 <_isatty>
 8018f08:	1c43      	adds	r3, r0, #1
 8018f0a:	d102      	bne.n	8018f12 <_isatty_r+0x1a>
 8018f0c:	6823      	ldr	r3, [r4, #0]
 8018f0e:	b103      	cbz	r3, 8018f12 <_isatty_r+0x1a>
 8018f10:	602b      	str	r3, [r5, #0]
 8018f12:	bd38      	pop	{r3, r4, r5, pc}
 8018f14:	24002454 	.word	0x24002454

08018f18 <_lseek_r>:
 8018f18:	b538      	push	{r3, r4, r5, lr}
 8018f1a:	4c07      	ldr	r4, [pc, #28]	; (8018f38 <_lseek_r+0x20>)
 8018f1c:	4605      	mov	r5, r0
 8018f1e:	4608      	mov	r0, r1
 8018f20:	4611      	mov	r1, r2
 8018f22:	2200      	movs	r2, #0
 8018f24:	6022      	str	r2, [r4, #0]
 8018f26:	461a      	mov	r2, r3
 8018f28:	f7e9 ff06 	bl	8002d38 <_lseek>
 8018f2c:	1c43      	adds	r3, r0, #1
 8018f2e:	d102      	bne.n	8018f36 <_lseek_r+0x1e>
 8018f30:	6823      	ldr	r3, [r4, #0]
 8018f32:	b103      	cbz	r3, 8018f36 <_lseek_r+0x1e>
 8018f34:	602b      	str	r3, [r5, #0]
 8018f36:	bd38      	pop	{r3, r4, r5, pc}
 8018f38:	24002454 	.word	0x24002454

08018f3c <memmove>:
 8018f3c:	4288      	cmp	r0, r1
 8018f3e:	b510      	push	{r4, lr}
 8018f40:	eb01 0302 	add.w	r3, r1, r2
 8018f44:	d807      	bhi.n	8018f56 <memmove+0x1a>
 8018f46:	1e42      	subs	r2, r0, #1
 8018f48:	4299      	cmp	r1, r3
 8018f4a:	d00a      	beq.n	8018f62 <memmove+0x26>
 8018f4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f50:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018f54:	e7f8      	b.n	8018f48 <memmove+0xc>
 8018f56:	4283      	cmp	r3, r0
 8018f58:	d9f5      	bls.n	8018f46 <memmove+0xa>
 8018f5a:	1881      	adds	r1, r0, r2
 8018f5c:	1ad2      	subs	r2, r2, r3
 8018f5e:	42d3      	cmn	r3, r2
 8018f60:	d100      	bne.n	8018f64 <memmove+0x28>
 8018f62:	bd10      	pop	{r4, pc}
 8018f64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018f68:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018f6c:	e7f7      	b.n	8018f5e <memmove+0x22>

08018f6e <_realloc_r>:
 8018f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f70:	4607      	mov	r7, r0
 8018f72:	4614      	mov	r4, r2
 8018f74:	460e      	mov	r6, r1
 8018f76:	b921      	cbnz	r1, 8018f82 <_realloc_r+0x14>
 8018f78:	4611      	mov	r1, r2
 8018f7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018f7e:	f7fe bf4f 	b.w	8017e20 <_malloc_r>
 8018f82:	b922      	cbnz	r2, 8018f8e <_realloc_r+0x20>
 8018f84:	f7fe fefe 	bl	8017d84 <_free_r>
 8018f88:	4625      	mov	r5, r4
 8018f8a:	4628      	mov	r0, r5
 8018f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f8e:	f000 f827 	bl	8018fe0 <_malloc_usable_size_r>
 8018f92:	42a0      	cmp	r0, r4
 8018f94:	d20f      	bcs.n	8018fb6 <_realloc_r+0x48>
 8018f96:	4621      	mov	r1, r4
 8018f98:	4638      	mov	r0, r7
 8018f9a:	f7fe ff41 	bl	8017e20 <_malloc_r>
 8018f9e:	4605      	mov	r5, r0
 8018fa0:	2800      	cmp	r0, #0
 8018fa2:	d0f2      	beq.n	8018f8a <_realloc_r+0x1c>
 8018fa4:	4631      	mov	r1, r6
 8018fa6:	4622      	mov	r2, r4
 8018fa8:	f7fe fed8 	bl	8017d5c <memcpy>
 8018fac:	4631      	mov	r1, r6
 8018fae:	4638      	mov	r0, r7
 8018fb0:	f7fe fee8 	bl	8017d84 <_free_r>
 8018fb4:	e7e9      	b.n	8018f8a <_realloc_r+0x1c>
 8018fb6:	4635      	mov	r5, r6
 8018fb8:	e7e7      	b.n	8018f8a <_realloc_r+0x1c>
	...

08018fbc <_read_r>:
 8018fbc:	b538      	push	{r3, r4, r5, lr}
 8018fbe:	4c07      	ldr	r4, [pc, #28]	; (8018fdc <_read_r+0x20>)
 8018fc0:	4605      	mov	r5, r0
 8018fc2:	4608      	mov	r0, r1
 8018fc4:	4611      	mov	r1, r2
 8018fc6:	2200      	movs	r2, #0
 8018fc8:	6022      	str	r2, [r4, #0]
 8018fca:	461a      	mov	r2, r3
 8018fcc:	f7e9 fe70 	bl	8002cb0 <_read>
 8018fd0:	1c43      	adds	r3, r0, #1
 8018fd2:	d102      	bne.n	8018fda <_read_r+0x1e>
 8018fd4:	6823      	ldr	r3, [r4, #0]
 8018fd6:	b103      	cbz	r3, 8018fda <_read_r+0x1e>
 8018fd8:	602b      	str	r3, [r5, #0]
 8018fda:	bd38      	pop	{r3, r4, r5, pc}
 8018fdc:	24002454 	.word	0x24002454

08018fe0 <_malloc_usable_size_r>:
 8018fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018fe4:	1f18      	subs	r0, r3, #4
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	bfbc      	itt	lt
 8018fea:	580b      	ldrlt	r3, [r1, r0]
 8018fec:	18c0      	addlt	r0, r0, r3
 8018fee:	4770      	bx	lr

08018ff0 <_init>:
 8018ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ff2:	bf00      	nop
 8018ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ff6:	bc08      	pop	{r3}
 8018ff8:	469e      	mov	lr, r3
 8018ffa:	4770      	bx	lr

08018ffc <_fini>:
 8018ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ffe:	bf00      	nop
 8019000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019002:	bc08      	pop	{r3}
 8019004:	469e      	mov	lr, r3
 8019006:	4770      	bx	lr
